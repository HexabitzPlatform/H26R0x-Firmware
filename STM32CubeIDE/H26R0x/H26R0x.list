
H26R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a04  08019b20  08019b20  00029b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d524  0801d524  00030a80  2**0
                  CONTENTS
  4 .ARM          00000008  0801d524  0801d524  0002d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d52c  0801d52c  00030a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d52c  0801d52c  0002d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d534  0801d534  0002d534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a80  20000000  0801d538  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006860  20000a80  0801dfb8  00030a80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200072e0  0801dfb8  000372e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   000521d6  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008682  00000000  00000000  00082c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b436  00000000  00000000  0008b300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ed8  00000000  00000000  000a6738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002090  00000000  00000000  000a8610  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f68  00000000  00000000  000aa6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aaf5  00000000  00000000  000c1608  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc0fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006780  00000000  00000000  000cc178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a80 	.word	0x20000a80
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019b04 	.word	0x08019b04

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a84 	.word	0x20000a84
 8000100:	08019b04 	.word	0x08019b04

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 ff89 	bl	8002364 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fee1 	bl	8002224 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff7b 	bl	8002364 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff71 	bl	8002364 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff03 	bl	800229c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fef9 	bl	800229c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fca1 	bl	8000e08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc23 	bl	8000d1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc93 	bl	8000e08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc89 	bl	8000e08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc31 	bl	8000d6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc27 	bl	8000d6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	1c08      	adds	r0, r1, #0
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f866 	bl	8000640 <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	002e      	movs	r6, r5
 800058c:	b580      	push	{r7, lr}
 800058e:	0407      	lsls	r7, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0c03      	lsrs	r3, r0, #16
 8000598:	437e      	muls	r6, r7
 800059a:	435d      	muls	r5, r3
 800059c:	4367      	muls	r7, r4
 800059e:	4363      	muls	r3, r4
 80005a0:	197f      	adds	r7, r7, r5
 80005a2:	0c34      	lsrs	r4, r6, #16
 80005a4:	19e4      	adds	r4, r4, r7
 80005a6:	469c      	mov	ip, r3
 80005a8:	42a5      	cmp	r5, r4
 80005aa:	d903      	bls.n	80005b4 <__aeabi_lmul+0x34>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	025b      	lsls	r3, r3, #9
 80005b0:	4698      	mov	r8, r3
 80005b2:	44c4      	add	ip, r8
 80005b4:	464b      	mov	r3, r9
 80005b6:	4343      	muls	r3, r0
 80005b8:	4351      	muls	r1, r2
 80005ba:	0c25      	lsrs	r5, r4, #16
 80005bc:	0436      	lsls	r6, r6, #16
 80005be:	4465      	add	r5, ip
 80005c0:	0c36      	lsrs	r6, r6, #16
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	19a4      	adds	r4, r4, r6
 80005c6:	195b      	adds	r3, r3, r5
 80005c8:	1859      	adds	r1, r3, r1
 80005ca:	0020      	movs	r0, r4
 80005cc:	bc0c      	pop	{r2, r3}
 80005ce:	4690      	mov	r8, r2
 80005d0:	4699      	mov	r9, r3
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 ff55 	bl	8001494 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fd8b 	bl	800110c <__aeabi_fsub>
 80005f6:	f000 ff4d 	bl	8001494 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fce1 	bl	8002fe0 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f976 	bl	8002918 <__aeabi_dsub>
 800062c:	f002 fcd8 	bl	8002fe0 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	b082      	sub	sp, #8
 800064e:	000d      	movs	r5, r1
 8000650:	4691      	mov	r9, r2
 8000652:	4698      	mov	r8, r3
 8000654:	428b      	cmp	r3, r1
 8000656:	d82f      	bhi.n	80006b8 <__udivmoddi4+0x78>
 8000658:	d02c      	beq.n	80006b4 <__udivmoddi4+0x74>
 800065a:	4641      	mov	r1, r8
 800065c:	4648      	mov	r0, r9
 800065e:	f002 fe55 	bl	800330c <__clzdi2>
 8000662:	0029      	movs	r1, r5
 8000664:	0006      	movs	r6, r0
 8000666:	0020      	movs	r0, r4
 8000668:	f002 fe50 	bl	800330c <__clzdi2>
 800066c:	1a33      	subs	r3, r6, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469a      	mov	sl, r3
 8000674:	d500      	bpl.n	8000678 <__udivmoddi4+0x38>
 8000676:	e076      	b.n	8000766 <__udivmoddi4+0x126>
 8000678:	464b      	mov	r3, r9
 800067a:	4652      	mov	r2, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001f      	movs	r7, r3
 8000680:	464b      	mov	r3, r9
 8000682:	4662      	mov	r2, ip
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d828      	bhi.n	80006de <__udivmoddi4+0x9e>
 800068c:	d025      	beq.n	80006da <__udivmoddi4+0x9a>
 800068e:	4653      	mov	r3, sl
 8000690:	1ba4      	subs	r4, r4, r6
 8000692:	41bd      	sbcs	r5, r7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <__udivmoddi4+0x5a>
 8000698:	e07b      	b.n	8000792 <__udivmoddi4+0x152>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4652      	mov	r2, sl
 80006a6:	4093      	lsls	r3, r2
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4662      	mov	r2, ip
 80006ae:	4093      	lsls	r3, r2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	e018      	b.n	80006e6 <__udivmoddi4+0xa6>
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d9d0      	bls.n	800065a <__udivmoddi4+0x1a>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <__udivmoddi4+0x8a>
 80006c6:	601c      	str	r4, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	9800      	ldr	r0, [sp, #0]
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	b002      	add	sp, #8
 80006d0:	bc1c      	pop	{r2, r3, r4}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	46a2      	mov	sl, r4
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d9d7      	bls.n	800068e <__udivmoddi4+0x4e>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4663      	mov	r3, ip
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e9      	beq.n	80006c0 <__udivmoddi4+0x80>
 80006ec:	07fb      	lsls	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	4641      	mov	r1, r8
 80006f2:	0872      	lsrs	r2, r6, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	087b      	lsrs	r3, r7, #1
 80006f8:	4666      	mov	r6, ip
 80006fa:	e00e      	b.n	800071a <__udivmoddi4+0xda>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d101      	bne.n	8000704 <__udivmoddi4+0xc4>
 8000700:	42a2      	cmp	r2, r4
 8000702:	d80c      	bhi.n	800071e <__udivmoddi4+0xde>
 8000704:	1aa4      	subs	r4, r4, r2
 8000706:	419d      	sbcs	r5, r3
 8000708:	2001      	movs	r0, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2100      	movs	r1, #0
 8000710:	3e01      	subs	r6, #1
 8000712:	1824      	adds	r4, r4, r0
 8000714:	414d      	adcs	r5, r1
 8000716:	2e00      	cmp	r6, #0
 8000718:	d006      	beq.n	8000728 <__udivmoddi4+0xe8>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d9ee      	bls.n	80006fc <__udivmoddi4+0xbc>
 800071e:	3e01      	subs	r6, #1
 8000720:	1924      	adds	r4, r4, r4
 8000722:	416d      	adcs	r5, r5
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1f8      	bne.n	800071a <__udivmoddi4+0xda>
 8000728:	9800      	ldr	r0, [sp, #0]
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	4653      	mov	r3, sl
 800072e:	1900      	adds	r0, r0, r4
 8000730:	4169      	adcs	r1, r5
 8000732:	2b00      	cmp	r3, #0
 8000734:	db23      	blt.n	800077e <__udivmoddi4+0x13e>
 8000736:	002b      	movs	r3, r5
 8000738:	4652      	mov	r2, sl
 800073a:	40d3      	lsrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	4664      	mov	r4, ip
 8000740:	40e2      	lsrs	r2, r4
 8000742:	001c      	movs	r4, r3
 8000744:	4653      	mov	r3, sl
 8000746:	0015      	movs	r5, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	db2d      	blt.n	80007a8 <__udivmoddi4+0x168>
 800074c:	0026      	movs	r6, r4
 800074e:	4657      	mov	r7, sl
 8000750:	40be      	lsls	r6, r7
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4667      	mov	r7, ip
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e7ac      	b.n	80006c0 <__udivmoddi4+0x80>
 8000766:	4662      	mov	r2, ip
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	464a      	mov	r2, r9
 800076e:	40da      	lsrs	r2, r3
 8000770:	4661      	mov	r1, ip
 8000772:	0013      	movs	r3, r2
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	0017      	movs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e780      	b.n	8000680 <__udivmoddi4+0x40>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	4666      	mov	r6, ip
 8000788:	409a      	lsls	r2, r3
 800078a:	0023      	movs	r3, r4
 800078c:	40f3      	lsrs	r3, r6
 800078e:	4313      	orrs	r3, r2
 8000790:	e7d4      	b.n	800073c <__udivmoddi4+0xfc>
 8000792:	4662      	mov	r2, ip
 8000794:	2320      	movs	r3, #32
 8000796:	2100      	movs	r1, #0
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	9100      	str	r1, [sp, #0]
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	e780      	b.n	80006aa <__udivmoddi4+0x6a>
 80007a8:	2320      	movs	r3, #32
 80007aa:	4662      	mov	r2, ip
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	002f      	movs	r7, r5
 80007b4:	46b0      	mov	r8, r6
 80007b6:	4666      	mov	r6, ip
 80007b8:	40b7      	lsls	r7, r6
 80007ba:	4646      	mov	r6, r8
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7c8      	b.n	8000754 <__udivmoddi4+0x114>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4647      	mov	r7, r8
 80007c8:	46ce      	mov	lr, r9
 80007ca:	0243      	lsls	r3, r0, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0044      	lsls	r4, r0, #1
 80007d0:	0fc2      	lsrs	r2, r0, #31
 80007d2:	469c      	mov	ip, r3
 80007d4:	0048      	lsls	r0, r1, #1
 80007d6:	00dd      	lsls	r5, r3, #3
 80007d8:	024b      	lsls	r3, r1, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	0e00      	lsrs	r0, r0, #24
 80007e0:	b580      	push	{r7, lr}
 80007e2:	4698      	mov	r8, r3
 80007e4:	0026      	movs	r6, r4
 80007e6:	4691      	mov	r9, r2
 80007e8:	0fc9      	lsrs	r1, r1, #31
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	1a27      	subs	r7, r4, r0
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d029      	beq.n	8000846 <__aeabi_fadd+0x82>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dd15      	ble.n	8000822 <__aeabi_fadd+0x5e>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d14a      	bne.n	8000890 <__aeabi_fadd+0xcc>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x3c>
 80007fe:	e095      	b.n	800092c <__aeabi_fadd+0x168>
 8000800:	08ed      	lsrs	r5, r5, #3
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e088      	b.n	800091a <__aeabi_fadd+0x156>
 8000808:	026b      	lsls	r3, r5, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2e6      	uxtb	r6, r4
 800080e:	025b      	lsls	r3, r3, #9
 8000810:	05f6      	lsls	r6, r6, #23
 8000812:	0a58      	lsrs	r0, r3, #9
 8000814:	4330      	orrs	r0, r6
 8000816:	07d2      	lsls	r2, r2, #31
 8000818:	4310      	orrs	r0, r2
 800081a:	bc0c      	pop	{r2, r3}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	2f00      	cmp	r7, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fadd+0x64>
 8000826:	e087      	b.n	8000938 <__aeabi_fadd+0x174>
 8000828:	1c60      	adds	r0, r4, #1
 800082a:	b2c0      	uxtb	r0, r0
 800082c:	2801      	cmp	r0, #1
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x6e>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 8000832:	1aee      	subs	r6, r5, r3
 8000834:	0172      	lsls	r2, r6, #5
 8000836:	d500      	bpl.n	800083a <__aeabi_fadd+0x76>
 8000838:	e0c5      	b.n	80009c6 <__aeabi_fadd+0x202>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d13d      	bne.n	80008ba <__aeabi_fadd+0xf6>
 800083e:	2200      	movs	r2, #0
 8000840:	2600      	movs	r6, #0
 8000842:	2300      	movs	r3, #0
 8000844:	e7e3      	b.n	800080e <__aeabi_fadd+0x4a>
 8000846:	2f00      	cmp	r7, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e096      	b.n	800097a <__aeabi_fadd+0x1b6>
 800084c:	2800      	cmp	r0, #0
 800084e:	d05d      	beq.n	800090c <__aeabi_fadd+0x148>
 8000850:	2cff      	cmp	r4, #255	; 0xff
 8000852:	d060      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	4313      	orrs	r3, r2
 800085a:	2f1b      	cmp	r7, #27
 800085c:	dd00      	ble.n	8000860 <__aeabi_fadd+0x9c>
 800085e:	e0ec      	b.n	8000a3a <__aeabi_fadd+0x276>
 8000860:	2220      	movs	r2, #32
 8000862:	1bd2      	subs	r2, r2, r7
 8000864:	0018      	movs	r0, r3
 8000866:	4093      	lsls	r3, r2
 8000868:	40f8      	lsrs	r0, r7
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	4193      	sbcs	r3, r2
 800086e:	4303      	orrs	r3, r0
 8000870:	18ed      	adds	r5, r5, r3
 8000872:	016b      	lsls	r3, r5, #5
 8000874:	d57b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 8000876:	3401      	adds	r4, #1
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xba>
 800087c:	e0b7      	b.n	80009ee <__aeabi_fadd+0x22a>
 800087e:	2201      	movs	r2, #1
 8000880:	2607      	movs	r6, #7
 8000882:	402a      	ands	r2, r5
 8000884:	086b      	lsrs	r3, r5, #1
 8000886:	4d9a      	ldr	r5, [pc, #616]	; (8000af0 <__aeabi_fadd+0x32c>)
 8000888:	401d      	ands	r5, r3
 800088a:	4315      	orrs	r5, r2
 800088c:	402e      	ands	r6, r5
 800088e:	e029      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000890:	2cff      	cmp	r4, #255	; 0xff
 8000892:	d0b5      	beq.n	8000800 <__aeabi_fadd+0x3c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	04d2      	lsls	r2, r2, #19
 8000898:	4313      	orrs	r3, r2
 800089a:	2f1b      	cmp	r7, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fadd+0xdc>
 800089e:	e0b2      	b.n	8000a06 <__aeabi_fadd+0x242>
 80008a0:	2220      	movs	r2, #32
 80008a2:	1bd2      	subs	r2, r2, r7
 80008a4:	0019      	movs	r1, r3
 80008a6:	4093      	lsls	r3, r2
 80008a8:	40f9      	lsrs	r1, r7
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	4193      	sbcs	r3, r2
 80008ae:	430b      	orrs	r3, r1
 80008b0:	1aed      	subs	r5, r5, r3
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	d55b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 80008b6:	01ad      	lsls	r5, r5, #6
 80008b8:	09ae      	lsrs	r6, r5, #6
 80008ba:	0030      	movs	r0, r6
 80008bc:	f002 fd08 	bl	80032d0 <__clzsi2>
 80008c0:	3805      	subs	r0, #5
 80008c2:	4086      	lsls	r6, r0
 80008c4:	4284      	cmp	r4, r0
 80008c6:	dc65      	bgt.n	8000994 <__aeabi_fadd+0x1d0>
 80008c8:	1b04      	subs	r4, r0, r4
 80008ca:	0033      	movs	r3, r6
 80008cc:	2020      	movs	r0, #32
 80008ce:	3401      	adds	r4, #1
 80008d0:	40e3      	lsrs	r3, r4
 80008d2:	1b04      	subs	r4, r0, r4
 80008d4:	40a6      	lsls	r6, r4
 80008d6:	1e75      	subs	r5, r6, #1
 80008d8:	41ae      	sbcs	r6, r5
 80008da:	4333      	orrs	r3, r6
 80008dc:	2607      	movs	r6, #7
 80008de:	001d      	movs	r5, r3
 80008e0:	2400      	movs	r4, #0
 80008e2:	401e      	ands	r6, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	464b      	mov	r3, r9
 80008e8:	401a      	ands	r2, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008ee:	230f      	movs	r3, #15
 80008f0:	402b      	ands	r3, r5
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008f6:	3504      	adds	r5, #4
 80008f8:	016b      	lsls	r3, r5, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x13a>
 80008fc:	e780      	b.n	8000800 <__aeabi_fadd+0x3c>
 80008fe:	3401      	adds	r4, #1
 8000900:	b2e6      	uxtb	r6, r4
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d12f      	bne.n	8000966 <__aeabi_fadd+0x1a2>
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e780      	b.n	800080e <__aeabi_fadd+0x4a>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d152      	bne.n	80009b6 <__aeabi_fadd+0x1f2>
 8000910:	2cff      	cmp	r4, #255	; 0xff
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000914:	e774      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000916:	000a      	movs	r2, r1
 8000918:	08ed      	lsrs	r5, r5, #3
 800091a:	2d00      	cmp	r5, #0
 800091c:	d0f3      	beq.n	8000906 <__aeabi_fadd+0x142>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	432b      	orrs	r3, r5
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	0a5b      	lsrs	r3, r3, #9
 8000928:	26ff      	movs	r6, #255	; 0xff
 800092a:	e770      	b.n	800080e <__aeabi_fadd+0x4a>
 800092c:	3f01      	subs	r7, #1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d0be      	beq.n	80008b0 <__aeabi_fadd+0xec>
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d1b1      	bne.n	800089a <__aeabi_fadd+0xd6>
 8000936:	e763      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_fadd+0x208>
 800093c:	28ff      	cmp	r0, #255	; 0xff
 800093e:	d069      	beq.n	8000a14 <__aeabi_fadd+0x250>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	04e4      	lsls	r4, r4, #19
 8000944:	427a      	negs	r2, r7
 8000946:	4325      	orrs	r5, r4
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dd00      	ble.n	800094e <__aeabi_fadd+0x18a>
 800094c:	e0c5      	b.n	8000ada <__aeabi_fadd+0x316>
 800094e:	002c      	movs	r4, r5
 8000950:	2620      	movs	r6, #32
 8000952:	40d4      	lsrs	r4, r2
 8000954:	1ab2      	subs	r2, r6, r2
 8000956:	4095      	lsls	r5, r2
 8000958:	1e6a      	subs	r2, r5, #1
 800095a:	4195      	sbcs	r5, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	1b5d      	subs	r5, r3, r5
 8000960:	0004      	movs	r4, r0
 8000962:	4689      	mov	r9, r1
 8000964:	e7a5      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000966:	01ab      	lsls	r3, r5, #6
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e750      	b.n	800080e <__aeabi_fadd+0x4a>
 800096c:	2400      	movs	r4, #0
 800096e:	2201      	movs	r2, #1
 8000970:	464b      	mov	r3, r9
 8000972:	401a      	ands	r2, r3
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d1ba      	bne.n	80008ee <__aeabi_fadd+0x12a>
 8000978:	e742      	b.n	8000800 <__aeabi_fadd+0x3c>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d13b      	bne.n	80009f6 <__aeabi_fadd+0x232>
 800097e:	3401      	adds	r4, #1
 8000980:	b2e0      	uxtb	r0, r4
 8000982:	2801      	cmp	r0, #1
 8000984:	dd4a      	ble.n	8000a1c <__aeabi_fadd+0x258>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d0bd      	beq.n	8000906 <__aeabi_fadd+0x142>
 800098a:	2607      	movs	r6, #7
 800098c:	18ed      	adds	r5, r5, r3
 800098e:	086d      	lsrs	r5, r5, #1
 8000990:	402e      	ands	r6, r5
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000994:	2307      	movs	r3, #7
 8000996:	4d57      	ldr	r5, [pc, #348]	; (8000af4 <__aeabi_fadd+0x330>)
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	4035      	ands	r5, r6
 800099c:	401e      	ands	r6, r3
 800099e:	e7a1      	b.n	80008e4 <__aeabi_fadd+0x120>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d11b      	bne.n	80009dc <__aeabi_fadd+0x218>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d16e      	bne.n	8000a86 <__aeabi_fadd+0x2c2>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x1ea>
 80009ac:	e09a      	b.n	8000ae4 <__aeabi_fadd+0x320>
 80009ae:	000a      	movs	r2, r1
 80009b0:	001d      	movs	r5, r3
 80009b2:	003c      	movs	r4, r7
 80009b4:	e724      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2f00      	cmp	r7, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fadd+0x1fa>
 80009bc:	e758      	b.n	8000870 <__aeabi_fadd+0xac>
 80009be:	2cff      	cmp	r4, #255	; 0xff
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e74a      	b.n	800085a <__aeabi_fadd+0x96>
 80009c4:	e7a7      	b.n	8000916 <__aeabi_fadd+0x152>
 80009c6:	1b5e      	subs	r6, r3, r5
 80009c8:	4689      	mov	r9, r1
 80009ca:	e776      	b.n	80008ba <__aeabi_fadd+0xf6>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d11c      	bne.n	8000a0a <__aeabi_fadd+0x246>
 80009d0:	000a      	movs	r2, r1
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d01f      	beq.n	8000a16 <__aeabi_fadd+0x252>
 80009d6:	0004      	movs	r4, r0
 80009d8:	001d      	movs	r5, r3
 80009da:	e711      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d15d      	bne.n	8000a9c <__aeabi_fadd+0x2d8>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d117      	bne.n	8000a14 <__aeabi_fadd+0x250>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	2200      	movs	r2, #0
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	26ff      	movs	r6, #255	; 0xff
 80009ec:	e70f      	b.n	800080e <__aeabi_fadd+0x4a>
 80009ee:	000a      	movs	r2, r1
 80009f0:	26ff      	movs	r6, #255	; 0xff
 80009f2:	2300      	movs	r3, #0
 80009f4:	e70b      	b.n	800080e <__aeabi_fadd+0x4a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d121      	bne.n	8000a3e <__aeabi_fadd+0x27a>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d166      	bne.n	8000acc <__aeabi_fadd+0x308>
 80009fe:	28ff      	cmp	r0, #255	; 0xff
 8000a00:	d1e9      	bne.n	80009d6 <__aeabi_fadd+0x212>
 8000a02:	001d      	movs	r5, r3
 8000a04:	e787      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e752      	b.n	80008b0 <__aeabi_fadd+0xec>
 8000a0a:	1c7a      	adds	r2, r7, #1
 8000a0c:	d0a7      	beq.n	800095e <__aeabi_fadd+0x19a>
 8000a0e:	43fa      	mvns	r2, r7
 8000a10:	28ff      	cmp	r0, #255	; 0xff
 8000a12:	d199      	bne.n	8000948 <__aeabi_fadd+0x184>
 8000a14:	000a      	movs	r2, r1
 8000a16:	001d      	movs	r5, r3
 8000a18:	24ff      	movs	r4, #255	; 0xff
 8000a1a:	e6f1      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d121      	bne.n	8000a64 <__aeabi_fadd+0x2a0>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d04f      	beq.n	8000ac4 <__aeabi_fadd+0x300>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d04c      	beq.n	8000ac2 <__aeabi_fadd+0x2fe>
 8000a28:	18ed      	adds	r5, r5, r3
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	d59e      	bpl.n	800096c <__aeabi_fadd+0x1a8>
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <__aeabi_fadd+0x330>)
 8000a30:	3607      	adds	r6, #7
 8000a32:	402e      	ands	r6, r5
 8000a34:	2401      	movs	r4, #1
 8000a36:	401d      	ands	r5, r3
 8000a38:	e754      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xac>
 8000a3e:	28ff      	cmp	r0, #255	; 0xff
 8000a40:	d0df      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a42:	2480      	movs	r4, #128	; 0x80
 8000a44:	04e4      	lsls	r4, r4, #19
 8000a46:	427f      	negs	r7, r7
 8000a48:	4325      	orrs	r5, r4
 8000a4a:	2f1b      	cmp	r7, #27
 8000a4c:	dc4d      	bgt.n	8000aea <__aeabi_fadd+0x326>
 8000a4e:	2620      	movs	r6, #32
 8000a50:	1bf6      	subs	r6, r6, r7
 8000a52:	002c      	movs	r4, r5
 8000a54:	40b5      	lsls	r5, r6
 8000a56:	40fc      	lsrs	r4, r7
 8000a58:	1e6a      	subs	r2, r5, #1
 8000a5a:	4195      	sbcs	r5, r2
 8000a5c:	4325      	orrs	r5, r4
 8000a5e:	18ed      	adds	r5, r5, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	e706      	b.n	8000872 <__aeabi_fadd+0xae>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d0cc      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e753      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4660      	mov	r0, ip
 8000a72:	03c9      	lsls	r1, r1, #15
 8000a74:	4208      	tst	r0, r1
 8000a76:	d003      	beq.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	4208      	tst	r0, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	2101      	movs	r1, #1
 8000a82:	4011      	ands	r1, r2
 8000a84:	e747      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x2c8>
 8000a8a:	e6b9      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a8c:	1aea      	subs	r2, r5, r3
 8000a8e:	0150      	lsls	r0, r2, #5
 8000a90:	d525      	bpl.n	8000ade <__aeabi_fadd+0x31a>
 8000a92:	2607      	movs	r6, #7
 8000a94:	1b5d      	subs	r5, r3, r5
 8000a96:	402e      	ands	r6, r5
 8000a98:	4689      	mov	r9, r1
 8000a9a:	e723      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a9c:	24ff      	movs	r4, #255	; 0xff
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2e0>
 8000aa2:	e6ad      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4660      	mov	r0, ip
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4210      	tst	r0, r2
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000aae:	4640      	mov	r0, r8
 8000ab0:	4210      	tst	r0, r2
 8000ab2:	d101      	bne.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	464b      	mov	r3, r9
 8000abc:	24ff      	movs	r4, #255	; 0xff
 8000abe:	401a      	ands	r2, r3
 8000ac0:	e69e      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000ac2:	002b      	movs	r3, r5
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e69d      	b.n	8000808 <__aeabi_fadd+0x44>
 8000acc:	1c7a      	adds	r2, r7, #1
 8000ace:	d0c6      	beq.n	8000a5e <__aeabi_fadd+0x29a>
 8000ad0:	43ff      	mvns	r7, r7
 8000ad2:	28ff      	cmp	r0, #255	; 0xff
 8000ad4:	d1b9      	bne.n	8000a4a <__aeabi_fadd+0x286>
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	e71d      	b.n	8000916 <__aeabi_fadd+0x152>
 8000ada:	2501      	movs	r5, #1
 8000adc:	e73f      	b.n	800095e <__aeabi_fadd+0x19a>
 8000ade:	1e15      	subs	r5, r2, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fadd+0x320>
 8000ae2:	e744      	b.n	800096e <__aeabi_fadd+0x1aa>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e691      	b.n	800080e <__aeabi_fadd+0x4a>
 8000aea:	2501      	movs	r5, #1
 8000aec:	e7b7      	b.n	8000a5e <__aeabi_fadd+0x29a>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4657      	mov	r7, sl
 8000afc:	464e      	mov	r6, r9
 8000afe:	4645      	mov	r5, r8
 8000b00:	46de      	mov	lr, fp
 8000b02:	0244      	lsls	r4, r0, #9
 8000b04:	b5e0      	push	{r5, r6, r7, lr}
 8000b06:	0046      	lsls	r6, r0, #1
 8000b08:	4688      	mov	r8, r1
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	0e36      	lsrs	r6, r6, #24
 8000b0e:	0fc7      	lsrs	r7, r0, #31
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d063      	beq.n	8000bdc <__aeabi_fdiv+0xe4>
 8000b14:	2eff      	cmp	r6, #255	; 0xff
 8000b16:	d024      	beq.n	8000b62 <__aeabi_fdiv+0x6a>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	00e4      	lsls	r4, r4, #3
 8000b1c:	04db      	lsls	r3, r3, #19
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	469b      	mov	fp, r3
 8000b26:	3e7f      	subs	r6, #127	; 0x7f
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	025d      	lsls	r5, r3, #9
 8000b2e:	0fd2      	lsrs	r2, r2, #31
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	0a6d      	lsrs	r5, r5, #9
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	4690      	mov	r8, r2
 8000b38:	4692      	mov	sl, r2
 8000b3a:	d065      	beq.n	8000c08 <__aeabi_fdiv+0x110>
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d055      	beq.n	8000bec <__aeabi_fdiv+0xf4>
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	2100      	movs	r1, #0
 8000b44:	00ed      	lsls	r5, r5, #3
 8000b46:	04d2      	lsls	r2, r2, #19
 8000b48:	3b7f      	subs	r3, #127	; 0x7f
 8000b4a:	4315      	orrs	r5, r2
 8000b4c:	1af6      	subs	r6, r6, r3
 8000b4e:	4643      	mov	r3, r8
 8000b50:	464a      	mov	r2, r9
 8000b52:	407b      	eors	r3, r7
 8000b54:	2a0f      	cmp	r2, #15
 8000b56:	d900      	bls.n	8000b5a <__aeabi_fdiv+0x62>
 8000b58:	e08d      	b.n	8000c76 <__aeabi_fdiv+0x17e>
 8000b5a:	486d      	ldr	r0, [pc, #436]	; (8000d10 <__aeabi_fdiv+0x218>)
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	5882      	ldr	r2, [r0, r2]
 8000b60:	4697      	mov	pc, r2
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d154      	bne.n	8000c10 <__aeabi_fdiv+0x118>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	26ff      	movs	r6, #255	; 0xff
 8000b6e:	469b      	mov	fp, r3
 8000b70:	e7da      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000b72:	2500      	movs	r5, #0
 8000b74:	4653      	mov	r3, sl
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d01b      	beq.n	8000bb2 <__aeabi_fdiv+0xba>
 8000b7a:	2903      	cmp	r1, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e0bf      	b.n	8000d00 <__aeabi_fdiv+0x208>
 8000b80:	2901      	cmp	r1, #1
 8000b82:	d028      	beq.n	8000bd6 <__aeabi_fdiv+0xde>
 8000b84:	0030      	movs	r0, r6
 8000b86:	307f      	adds	r0, #127	; 0x7f
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd20      	ble.n	8000bce <__aeabi_fdiv+0xd6>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <__aeabi_fdiv+0x21c>)
 8000ba2:	3080      	adds	r0, #128	; 0x80
 8000ba4:	4015      	ands	r5, r2
 8000ba6:	28fe      	cmp	r0, #254	; 0xfe
 8000ba8:	dc03      	bgt.n	8000bb2 <__aeabi_fdiv+0xba>
 8000baa:	01ac      	lsls	r4, r5, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	b2c2      	uxtb	r2, r0
 8000bb0:	e001      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	05d2      	lsls	r2, r2, #23
 8000bba:	0a60      	lsrs	r0, r4, #9
 8000bbc:	07db      	lsls	r3, r3, #31
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	4318      	orrs	r0, r3
 8000bc2:	bc3c      	pop	{r2, r3, r4, r5}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	46ab      	mov	fp, r5
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bce:	2201      	movs	r2, #1
 8000bd0:	1a10      	subs	r0, r2, r0
 8000bd2:	281b      	cmp	r0, #27
 8000bd4:	dd7c      	ble.n	8000cd0 <__aeabi_fdiv+0x1d8>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7ec      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11d      	bne.n	8000c1c <__aeabi_fdiv+0x124>
 8000be0:	2304      	movs	r3, #4
 8000be2:	4699      	mov	r9, r3
 8000be4:	3b03      	subs	r3, #3
 8000be6:	2600      	movs	r6, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	e79d      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000bec:	3eff      	subs	r6, #255	; 0xff
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d120      	bne.n	8000c34 <__aeabi_fdiv+0x13c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	2a0f      	cmp	r2, #15
 8000bfe:	d8d8      	bhi.n	8000bb2 <__aeabi_fdiv+0xba>
 8000c00:	4845      	ldr	r0, [pc, #276]	; (8000d18 <__aeabi_fdiv+0x220>)
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	5882      	ldr	r2, [r0, r2]
 8000c06:	4697      	mov	pc, r2
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d119      	bne.n	8000c40 <__aeabi_fdiv+0x148>
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	e7f1      	b.n	8000bf4 <__aeabi_fdiv+0xfc>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	26ff      	movs	r6, #255	; 0xff
 8000c18:	469b      	mov	fp, r3
 8000c1a:	e785      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f002 fb57 	bl	80032d0 <__clzsi2>
 8000c22:	2676      	movs	r6, #118	; 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4276      	negs	r6, r6
 8000c2c:	1a36      	subs	r6, r6, r0
 8000c2e:	4699      	mov	r9, r3
 8000c30:	469b      	mov	fp, r3
 8000c32:	e779      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c34:	464a      	mov	r2, r9
 8000c36:	2303      	movs	r3, #3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	e786      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f002 fb45 	bl	80032d0 <__clzsi2>
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	1836      	adds	r6, r6, r0
 8000c4a:	409d      	lsls	r5, r3
 8000c4c:	3676      	adds	r6, #118	; 0x76
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	2480      	movs	r4, #128	; 0x80
 8000c54:	2300      	movs	r3, #0
 8000c56:	03e4      	lsls	r4, r4, #15
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	e7ac      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	03db      	lsls	r3, r3, #15
 8000c62:	421c      	tst	r4, r3
 8000c64:	d028      	beq.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c66:	421d      	tst	r5, r3
 8000c68:	d126      	bne.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c6a:	432b      	orrs	r3, r5
 8000c6c:	025c      	lsls	r4, r3, #9
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	4643      	mov	r3, r8
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	e79f      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c76:	0162      	lsls	r2, r4, #5
 8000c78:	016c      	lsls	r4, r5, #5
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d224      	bcs.n	8000cc8 <__aeabi_fdiv+0x1d0>
 8000c7e:	211b      	movs	r1, #27
 8000c80:	2500      	movs	r5, #0
 8000c82:	3e01      	subs	r6, #1
 8000c84:	2701      	movs	r7, #1
 8000c86:	0010      	movs	r0, r2
 8000c88:	006d      	lsls	r5, r5, #1
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	db01      	blt.n	8000c94 <__aeabi_fdiv+0x19c>
 8000c90:	4294      	cmp	r4, r2
 8000c92:	d801      	bhi.n	8000c98 <__aeabi_fdiv+0x1a0>
 8000c94:	1b12      	subs	r2, r2, r4
 8000c96:	433d      	orrs	r5, r7
 8000c98:	3901      	subs	r1, #1
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d1f3      	bne.n	8000c86 <__aeabi_fdiv+0x18e>
 8000c9e:	0014      	movs	r4, r2
 8000ca0:	1e62      	subs	r2, r4, #1
 8000ca2:	4194      	sbcs	r4, r2
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	e76d      	b.n	8000b84 <__aeabi_fdiv+0x8c>
 8000ca8:	46ba      	mov	sl, r7
 8000caa:	4659      	mov	r1, fp
 8000cac:	0025      	movs	r5, r4
 8000cae:	4653      	mov	r3, sl
 8000cb0:	2902      	cmp	r1, #2
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fdiv+0x1be>
 8000cb4:	e761      	b.n	8000b7a <__aeabi_fdiv+0x82>
 8000cb6:	e77c      	b.n	8000bb2 <__aeabi_fdiv+0xba>
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	e776      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cc8:	1b12      	subs	r2, r2, r4
 8000cca:	211a      	movs	r1, #26
 8000ccc:	2501      	movs	r5, #1
 8000cce:	e7d9      	b.n	8000c84 <__aeabi_fdiv+0x18c>
 8000cd0:	369e      	adds	r6, #158	; 0x9e
 8000cd2:	002a      	movs	r2, r5
 8000cd4:	40b5      	lsls	r5, r6
 8000cd6:	002c      	movs	r4, r5
 8000cd8:	40c2      	lsrs	r2, r0
 8000cda:	1e65      	subs	r5, r4, #1
 8000cdc:	41ac      	sbcs	r4, r5
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	4022      	ands	r2, r4
 8000ce8:	2a04      	cmp	r2, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0162      	lsls	r2, r4, #5
 8000cf0:	d403      	bmi.n	8000cfa <__aeabi_fdiv+0x202>
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	e75d      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	e75a      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	03e4      	lsls	r4, r4, #15
 8000d04:	432c      	orrs	r4, r5
 8000d06:	0264      	lsls	r4, r4, #9
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	e753      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	08019b54 	.word	0x08019b54
 8000d14:	f7ffffff 	.word	0xf7ffffff
 8000d18:	08019b94 	.word	0x08019b94

08000d1c <__eqsf2>:
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0042      	lsls	r2, r0, #1
 8000d20:	024e      	lsls	r6, r1, #9
 8000d22:	004c      	lsls	r4, r1, #1
 8000d24:	0245      	lsls	r5, r0, #9
 8000d26:	0a6d      	lsrs	r5, r5, #9
 8000d28:	0e12      	lsrs	r2, r2, #24
 8000d2a:	0fc3      	lsrs	r3, r0, #31
 8000d2c:	0a76      	lsrs	r6, r6, #9
 8000d2e:	0e24      	lsrs	r4, r4, #24
 8000d30:	0fc9      	lsrs	r1, r1, #31
 8000d32:	2aff      	cmp	r2, #255	; 0xff
 8000d34:	d00f      	beq.n	8000d56 <__eqsf2+0x3a>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d011      	beq.n	8000d5e <__eqsf2+0x42>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	d000      	beq.n	8000d42 <__eqsf2+0x26>
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	42b5      	cmp	r5, r6
 8000d44:	d1fc      	bne.n	8000d40 <__eqsf2+0x24>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d00d      	beq.n	8000d66 <__eqsf2+0x4a>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d1f8      	bne.n	8000d40 <__eqsf2+0x24>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	1e45      	subs	r5, r0, #1
 8000d52:	41a8      	sbcs	r0, r5
 8000d54:	e7f4      	b.n	8000d40 <__eqsf2+0x24>
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d1f1      	bne.n	8000d40 <__eqsf2+0x24>
 8000d5c:	e7eb      	b.n	8000d36 <__eqsf2+0x1a>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d1ed      	bne.n	8000d40 <__eqsf2+0x24>
 8000d64:	e7e9      	b.n	8000d3a <__eqsf2+0x1e>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ea      	b.n	8000d40 <__eqsf2+0x24>
 8000d6a:	46c0      	nop			; (mov r8, r8)

08000d6c <__gesf2>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	004a      	lsls	r2, r1, #1
 8000d70:	024e      	lsls	r6, r1, #9
 8000d72:	0245      	lsls	r5, r0, #9
 8000d74:	0044      	lsls	r4, r0, #1
 8000d76:	0a6d      	lsrs	r5, r5, #9
 8000d78:	0e24      	lsrs	r4, r4, #24
 8000d7a:	0fc3      	lsrs	r3, r0, #31
 8000d7c:	0a76      	lsrs	r6, r6, #9
 8000d7e:	0e12      	lsrs	r2, r2, #24
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d015      	beq.n	8000db2 <__gesf2+0x46>
 8000d86:	2aff      	cmp	r2, #255	; 0xff
 8000d88:	d00e      	beq.n	8000da8 <__gesf2+0x3c>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d115      	bne.n	8000dba <__gesf2+0x4e>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d101      	bne.n	8000d96 <__gesf2+0x2a>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d01c      	beq.n	8000dd0 <__gesf2+0x64>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d014      	beq.n	8000dc4 <__gesf2+0x58>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d027      	beq.n	8000dee <__gesf2+0x82>
 8000d9e:	2002      	movs	r0, #2
 8000da0:	3b01      	subs	r3, #1
 8000da2:	4018      	ands	r0, r3
 8000da4:	3801      	subs	r0, #1
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d0ee      	beq.n	8000d8a <__gesf2+0x1e>
 8000dac:	2002      	movs	r0, #2
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7f9      	b.n	8000da6 <__gesf2+0x3a>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d1fa      	bne.n	8000dac <__gesf2+0x40>
 8000db6:	2aff      	cmp	r2, #255	; 0xff
 8000db8:	d00e      	beq.n	8000dd8 <__gesf2+0x6c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d10e      	bne.n	8000ddc <__gesf2+0x70>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0ed      	beq.n	8000d9e <__gesf2+0x32>
 8000dc2:	e00b      	b.n	8000ddc <__gesf2+0x70>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	3901      	subs	r1, #1
 8000dc8:	4399      	bics	r1, r3
 8000dca:	0008      	movs	r0, r1
 8000dcc:	3001      	adds	r0, #1
 8000dce:	e7ea      	b.n	8000da6 <__gesf2+0x3a>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0e7      	beq.n	8000da6 <__gesf2+0x3a>
 8000dd6:	e7e2      	b.n	8000d9e <__gesf2+0x32>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d1e7      	bne.n	8000dac <__gesf2+0x40>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d1de      	bne.n	8000d9e <__gesf2+0x32>
 8000de0:	4294      	cmp	r4, r2
 8000de2:	dd05      	ble.n	8000df0 <__gesf2+0x84>
 8000de4:	2102      	movs	r1, #2
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	4008      	ands	r0, r1
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7db      	b.n	8000da6 <__gesf2+0x3a>
 8000dee:	2400      	movs	r4, #0
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc04      	bgt.n	8000dfe <__gesf2+0x92>
 8000df4:	42b5      	cmp	r5, r6
 8000df6:	d8d2      	bhi.n	8000d9e <__gesf2+0x32>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d2d3      	bcs.n	8000da6 <__gesf2+0x3a>
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	2301      	movs	r3, #1
 8000e02:	4398      	bics	r0, r3
 8000e04:	3001      	adds	r0, #1
 8000e06:	e7ce      	b.n	8000da6 <__gesf2+0x3a>

08000e08 <__lesf2>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0244      	lsls	r4, r0, #9
 8000e0e:	024d      	lsls	r5, r1, #9
 8000e10:	0fc3      	lsrs	r3, r0, #31
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	0e12      	lsrs	r2, r2, #24
 8000e18:	0a6d      	lsrs	r5, r5, #9
 8000e1a:	0e00      	lsrs	r0, r0, #24
 8000e1c:	0fc9      	lsrs	r1, r1, #31
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d012      	beq.n	8000e48 <__lesf2+0x40>
 8000e22:	28ff      	cmp	r0, #255	; 0xff
 8000e24:	d00c      	beq.n	8000e40 <__lesf2+0x38>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d112      	bne.n	8000e50 <__lesf2+0x48>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d119      	bne.n	8000e62 <__lesf2+0x5a>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d117      	bne.n	8000e62 <__lesf2+0x5a>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d02b      	beq.n	8000e8e <__lesf2+0x86>
 8000e36:	2002      	movs	r0, #2
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4018      	ands	r0, r3
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e026      	b.n	8000e8e <__lesf2+0x86>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d0f0      	beq.n	8000e26 <__lesf2+0x1e>
 8000e44:	2002      	movs	r0, #2
 8000e46:	e022      	b.n	8000e8e <__lesf2+0x86>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d1fb      	bne.n	8000e44 <__lesf2+0x3c>
 8000e4c:	28ff      	cmp	r0, #255	; 0xff
 8000e4e:	d01f      	beq.n	8000e90 <__lesf2+0x88>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d11f      	bne.n	8000e94 <__lesf2+0x8c>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d11d      	bne.n	8000e94 <__lesf2+0x8c>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4018      	ands	r0, r3
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e015      	b.n	8000e8e <__lesf2+0x86>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d00e      	beq.n	8000e84 <__lesf2+0x7c>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d1e5      	bne.n	8000e36 <__lesf2+0x2e>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	dc04      	bgt.n	8000e7a <__lesf2+0x72>
 8000e70:	42ac      	cmp	r4, r5
 8000e72:	d8e0      	bhi.n	8000e36 <__lesf2+0x2e>
 8000e74:	2000      	movs	r0, #0
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	d209      	bcs.n	8000e8e <__lesf2+0x86>
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4398      	bics	r0, r3
 8000e80:	3001      	adds	r0, #1
 8000e82:	e004      	b.n	8000e8e <__lesf2+0x86>
 8000e84:	2301      	movs	r3, #1
 8000e86:	3901      	subs	r1, #1
 8000e88:	4399      	bics	r1, r3
 8000e8a:	0008      	movs	r0, r1
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d1d7      	bne.n	8000e44 <__lesf2+0x3c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ce      	bne.n	8000e36 <__lesf2+0x2e>
 8000e98:	4282      	cmp	r2, r0
 8000e9a:	dde7      	ble.n	8000e6c <__lesf2+0x64>
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	4008      	ands	r0, r1
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7f3      	b.n	8000e8e <__lesf2+0x86>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fmul>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4657      	mov	r7, sl
 8000eae:	4645      	mov	r5, r8
 8000eb0:	46de      	mov	lr, fp
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	0243      	lsls	r3, r0, #9
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	0045      	lsls	r5, r0, #1
 8000eba:	b083      	sub	sp, #12
 8000ebc:	1c0f      	adds	r7, r1, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	0e2d      	lsrs	r5, r5, #24
 8000ec2:	0fc6      	lsrs	r6, r0, #31
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d057      	beq.n	8000f78 <__aeabi_fmul+0xd0>
 8000ec8:	2dff      	cmp	r5, #255	; 0xff
 8000eca:	d024      	beq.n	8000f16 <__aeabi_fmul+0x6e>
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	04c0      	lsls	r0, r0, #19
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4681      	mov	r9, r0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	469b      	mov	fp, r3
 8000edc:	3d7f      	subs	r5, #127	; 0x7f
 8000ede:	027c      	lsls	r4, r7, #9
 8000ee0:	007a      	lsls	r2, r7, #1
 8000ee2:	0ffb      	lsrs	r3, r7, #31
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	4698      	mov	r8, r3
 8000eea:	d023      	beq.n	8000f34 <__aeabi_fmul+0x8c>
 8000eec:	2aff      	cmp	r2, #255	; 0xff
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fmul+0xe0>
 8000ef0:	00e3      	lsls	r3, r4, #3
 8000ef2:	2480      	movs	r4, #128	; 0x80
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	04e4      	lsls	r4, r4, #19
 8000ef8:	3a7f      	subs	r2, #127	; 0x7f
 8000efa:	431c      	orrs	r4, r3
 8000efc:	18ad      	adds	r5, r5, r2
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	4647      	mov	r7, r8
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4653      	mov	r3, sl
 8000f06:	4077      	eors	r7, r6
 8000f08:	003a      	movs	r2, r7
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d848      	bhi.n	8000fa0 <__aeabi_fmul+0xf8>
 8000f0e:	497d      	ldr	r1, [pc, #500]	; (8001104 <__aeabi_fmul+0x25c>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	58cb      	ldr	r3, [r1, r3]
 8000f14:	469f      	mov	pc, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x74>
 8000f1a:	e085      	b.n	8001028 <__aeabi_fmul+0x180>
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	469a      	mov	sl, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	469b      	mov	fp, r3
 8000f24:	027c      	lsls	r4, r7, #9
 8000f26:	007a      	lsls	r2, r7, #1
 8000f28:	0ffb      	lsrs	r3, r7, #31
 8000f2a:	25ff      	movs	r5, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	4698      	mov	r8, r3
 8000f32:	d1db      	bne.n	8000eec <__aeabi_fmul+0x44>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fmul+0x92>
 8000f38:	e090      	b.n	800105c <__aeabi_fmul+0x1b4>
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4692      	mov	sl, r2
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7db      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f46:	464c      	mov	r4, r9
 8000f48:	4658      	mov	r0, fp
 8000f4a:	0017      	movs	r7, r2
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d024      	beq.n	8000f9a <__aeabi_fmul+0xf2>
 8000f50:	2803      	cmp	r0, #3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fmul+0xae>
 8000f54:	e0cf      	b.n	80010f6 <__aeabi_fmul+0x24e>
 8000f56:	2200      	movs	r2, #0
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d14d      	bne.n	8000ffa <__aeabi_fmul+0x152>
 8000f5e:	0258      	lsls	r0, r3, #9
 8000f60:	05d2      	lsls	r2, r2, #23
 8000f62:	0a40      	lsrs	r0, r0, #9
 8000f64:	07ff      	lsls	r7, r7, #31
 8000f66:	4310      	orrs	r0, r2
 8000f68:	4338      	orrs	r0, r7
 8000f6a:	b003      	add	sp, #12
 8000f6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	46a2      	mov	sl, r4
 8000f74:	46ab      	mov	fp, r5
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d15b      	bne.n	8001034 <__aeabi_fmul+0x18c>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3b03      	subs	r3, #3
 8000f82:	2500      	movs	r5, #0
 8000f84:	469b      	mov	fp, r3
 8000f86:	e7aa      	b.n	8000ede <__aeabi_fmul+0x36>
 8000f88:	35ff      	adds	r5, #255	; 0xff
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d160      	bne.n	8001050 <__aeabi_fmul+0x1a8>
 8000f8e:	4652      	mov	r2, sl
 8000f90:	2302      	movs	r3, #2
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4692      	mov	sl, r2
 8000f96:	2002      	movs	r0, #2
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e7de      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	0c1b      	lsrs	r3, r3, #16
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	0426      	lsls	r6, r4, #16
 8000faa:	0c36      	lsrs	r6, r6, #16
 8000fac:	0418      	lsls	r0, r3, #16
 8000fae:	4661      	mov	r1, ip
 8000fb0:	0033      	movs	r3, r6
 8000fb2:	0c22      	lsrs	r2, r4, #16
 8000fb4:	4664      	mov	r4, ip
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	4343      	muls	r3, r0
 8000fba:	434e      	muls	r6, r1
 8000fbc:	4350      	muls	r0, r2
 8000fbe:	4354      	muls	r4, r2
 8000fc0:	1980      	adds	r0, r0, r6
 8000fc2:	0c1a      	lsrs	r2, r3, #16
 8000fc4:	1812      	adds	r2, r2, r0
 8000fc6:	4296      	cmp	r6, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_fmul+0x12a>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4464      	add	r4, ip
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	0410      	lsls	r0, r2, #16
 8000fd8:	18c0      	adds	r0, r0, r3
 8000fda:	0183      	lsls	r3, r0, #6
 8000fdc:	1e5e      	subs	r6, r3, #1
 8000fde:	41b3      	sbcs	r3, r6
 8000fe0:	0e80      	lsrs	r0, r0, #26
 8000fe2:	4318      	orrs	r0, r3
 8000fe4:	0c13      	lsrs	r3, r2, #16
 8000fe6:	191b      	adds	r3, r3, r4
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	001c      	movs	r4, r3
 8000fee:	0123      	lsls	r3, r4, #4
 8000ff0:	d579      	bpl.n	80010e6 <__aeabi_fmul+0x23e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	0862      	lsrs	r2, r4, #1
 8000ff6:	401c      	ands	r4, r3
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	dd4d      	ble.n	800109e <__aeabi_fmul+0x1f6>
 8001002:	0763      	lsls	r3, r4, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x168>
 8001006:	230f      	movs	r3, #15
 8001008:	4023      	ands	r3, r4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x168>
 800100e:	3404      	adds	r4, #4
 8001010:	0123      	lsls	r3, r4, #4
 8001012:	d503      	bpl.n	800101c <__aeabi_fmul+0x174>
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <__aeabi_fmul+0x260>)
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	401c      	ands	r4, r3
 800101a:	3280      	adds	r2, #128	; 0x80
 800101c:	2afe      	cmp	r2, #254	; 0xfe
 800101e:	dcbc      	bgt.n	8000f9a <__aeabi_fmul+0xf2>
 8001020:	01a3      	lsls	r3, r4, #6
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	e79a      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001028:	230c      	movs	r3, #12
 800102a:	469a      	mov	sl, r3
 800102c:	3b09      	subs	r3, #9
 800102e:	25ff      	movs	r5, #255	; 0xff
 8001030:	469b      	mov	fp, r3
 8001032:	e754      	b.n	8000ede <__aeabi_fmul+0x36>
 8001034:	0018      	movs	r0, r3
 8001036:	f002 f94b 	bl	80032d0 <__clzsi2>
 800103a:	464a      	mov	r2, r9
 800103c:	1f43      	subs	r3, r0, #5
 800103e:	2576      	movs	r5, #118	; 0x76
 8001040:	409a      	lsls	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	426d      	negs	r5, r5
 8001046:	4691      	mov	r9, r2
 8001048:	1a2d      	subs	r5, r5, r0
 800104a:	469a      	mov	sl, r3
 800104c:	469b      	mov	fp, r3
 800104e:	e746      	b.n	8000ede <__aeabi_fmul+0x36>
 8001050:	4652      	mov	r2, sl
 8001052:	2303      	movs	r3, #3
 8001054:	431a      	orrs	r2, r3
 8001056:	4692      	mov	sl, r2
 8001058:	2003      	movs	r0, #3
 800105a:	e750      	b.n	8000efe <__aeabi_fmul+0x56>
 800105c:	0020      	movs	r0, r4
 800105e:	f002 f937 	bl	80032d0 <__clzsi2>
 8001062:	1f43      	subs	r3, r0, #5
 8001064:	1a2d      	subs	r5, r5, r0
 8001066:	409c      	lsls	r4, r3
 8001068:	3d76      	subs	r5, #118	; 0x76
 800106a:	2000      	movs	r0, #0
 800106c:	e747      	b.n	8000efe <__aeabi_fmul+0x56>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	2700      	movs	r7, #0
 8001072:	03db      	lsls	r3, r3, #15
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001078:	4642      	mov	r2, r8
 800107a:	e766      	b.n	8000f4a <__aeabi_fmul+0xa2>
 800107c:	464c      	mov	r4, r9
 800107e:	0032      	movs	r2, r6
 8001080:	4658      	mov	r0, fp
 8001082:	e762      	b.n	8000f4a <__aeabi_fmul+0xa2>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	464a      	mov	r2, r9
 8001088:	03db      	lsls	r3, r3, #15
 800108a:	421a      	tst	r2, r3
 800108c:	d022      	beq.n	80010d4 <__aeabi_fmul+0x22c>
 800108e:	421c      	tst	r4, r3
 8001090:	d120      	bne.n	80010d4 <__aeabi_fmul+0x22c>
 8001092:	4323      	orrs	r3, r4
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5b      	lsrs	r3, r3, #9
 8001098:	4647      	mov	r7, r8
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	e75f      	b.n	8000f5e <__aeabi_fmul+0xb6>
 800109e:	2301      	movs	r3, #1
 80010a0:	1a9a      	subs	r2, r3, r2
 80010a2:	2a1b      	cmp	r2, #27
 80010a4:	dc21      	bgt.n	80010ea <__aeabi_fmul+0x242>
 80010a6:	0023      	movs	r3, r4
 80010a8:	9901      	ldr	r1, [sp, #4]
 80010aa:	40d3      	lsrs	r3, r2
 80010ac:	319e      	adds	r1, #158	; 0x9e
 80010ae:	408c      	lsls	r4, r1
 80010b0:	001a      	movs	r2, r3
 80010b2:	0023      	movs	r3, r4
 80010b4:	1e5c      	subs	r4, r3, #1
 80010b6:	41a3      	sbcs	r3, r4
 80010b8:	4313      	orrs	r3, r2
 80010ba:	075a      	lsls	r2, r3, #29
 80010bc:	d004      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010be:	220f      	movs	r2, #15
 80010c0:	401a      	ands	r2, r3
 80010c2:	2a04      	cmp	r2, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010c6:	3304      	adds	r3, #4
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	d411      	bmi.n	80010f0 <__aeabi_fmul+0x248>
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	2200      	movs	r2, #0
 80010d2:	e744      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	464a      	mov	r2, r9
 80010d8:	03db      	lsls	r3, r3, #15
 80010da:	4313      	orrs	r3, r2
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	0037      	movs	r7, r6
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	e73b      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010e6:	9501      	str	r5, [sp, #4]
 80010e8:	e787      	b.n	8000ffa <__aeabi_fmul+0x152>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2300      	movs	r3, #0
 80010ee:	e736      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2300      	movs	r3, #0
 80010f4:	e733      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	4323      	orrs	r3, r4
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0a5b      	lsrs	r3, r3, #9
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	e72c      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001104:	08019bd4 	.word	0x08019bd4
 8001108:	f7ffffff 	.word	0xf7ffffff

0800110c <__aeabi_fsub>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	4647      	mov	r7, r8
 8001110:	46ce      	mov	lr, r9
 8001112:	0044      	lsls	r4, r0, #1
 8001114:	0fc2      	lsrs	r2, r0, #31
 8001116:	b580      	push	{r7, lr}
 8001118:	0247      	lsls	r7, r0, #9
 800111a:	0248      	lsls	r0, r1, #9
 800111c:	0a40      	lsrs	r0, r0, #9
 800111e:	4684      	mov	ip, r0
 8001120:	4666      	mov	r6, ip
 8001122:	0048      	lsls	r0, r1, #1
 8001124:	0a7f      	lsrs	r7, r7, #9
 8001126:	0e24      	lsrs	r4, r4, #24
 8001128:	00f6      	lsls	r6, r6, #3
 800112a:	0025      	movs	r5, r4
 800112c:	4690      	mov	r8, r2
 800112e:	00fb      	lsls	r3, r7, #3
 8001130:	0e00      	lsrs	r0, r0, #24
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	46b1      	mov	r9, r6
 8001136:	28ff      	cmp	r0, #255	; 0xff
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x30>
 800113a:	e085      	b.n	8001248 <__aeabi_fsub+0x13c>
 800113c:	2601      	movs	r6, #1
 800113e:	4071      	eors	r1, r6
 8001140:	1a26      	subs	r6, r4, r0
 8001142:	4291      	cmp	r1, r2
 8001144:	d057      	beq.n	80011f6 <__aeabi_fsub+0xea>
 8001146:	2e00      	cmp	r6, #0
 8001148:	dd43      	ble.n	80011d2 <__aeabi_fsub+0xc6>
 800114a:	2800      	cmp	r0, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x44>
 800114e:	e07f      	b.n	8001250 <__aeabi_fsub+0x144>
 8001150:	4649      	mov	r1, r9
 8001152:	2900      	cmp	r1, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x4c>
 8001156:	e0aa      	b.n	80012ae <__aeabi_fsub+0x1a2>
 8001158:	3e01      	subs	r6, #1
 800115a:	2e00      	cmp	r6, #0
 800115c:	d000      	beq.n	8001160 <__aeabi_fsub+0x54>
 800115e:	e0f7      	b.n	8001350 <__aeabi_fsub+0x244>
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	d400      	bmi.n	8001168 <__aeabi_fsub+0x5c>
 8001166:	e08b      	b.n	8001280 <__aeabi_fsub+0x174>
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	099c      	lsrs	r4, r3, #6
 800116c:	0020      	movs	r0, r4
 800116e:	f002 f8af 	bl	80032d0 <__clzsi2>
 8001172:	3805      	subs	r0, #5
 8001174:	4084      	lsls	r4, r0
 8001176:	4285      	cmp	r5, r0
 8001178:	dd00      	ble.n	800117c <__aeabi_fsub+0x70>
 800117a:	e0d3      	b.n	8001324 <__aeabi_fsub+0x218>
 800117c:	1b45      	subs	r5, r0, r5
 800117e:	0023      	movs	r3, r4
 8001180:	2020      	movs	r0, #32
 8001182:	3501      	adds	r5, #1
 8001184:	40eb      	lsrs	r3, r5
 8001186:	1b45      	subs	r5, r0, r5
 8001188:	40ac      	lsls	r4, r5
 800118a:	1e62      	subs	r2, r4, #1
 800118c:	4194      	sbcs	r4, r2
 800118e:	4323      	orrs	r3, r4
 8001190:	2407      	movs	r4, #7
 8001192:	2500      	movs	r5, #0
 8001194:	401c      	ands	r4, r3
 8001196:	2201      	movs	r2, #1
 8001198:	4641      	mov	r1, r8
 800119a:	400a      	ands	r2, r1
 800119c:	2c00      	cmp	r4, #0
 800119e:	d004      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a0:	210f      	movs	r1, #15
 80011a2:	4019      	ands	r1, r3
 80011a4:	2904      	cmp	r1, #4
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a8:	3304      	adds	r3, #4
 80011aa:	0159      	lsls	r1, r3, #5
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_fsub+0xa4>
 80011ae:	e080      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 80011b0:	3501      	adds	r5, #1
 80011b2:	b2ec      	uxtb	r4, r5
 80011b4:	2dff      	cmp	r5, #255	; 0xff
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0xae>
 80011b8:	e0a3      	b.n	8001302 <__aeabi_fsub+0x1f6>
 80011ba:	24ff      	movs	r4, #255	; 0xff
 80011bc:	2300      	movs	r3, #0
 80011be:	025b      	lsls	r3, r3, #9
 80011c0:	05e4      	lsls	r4, r4, #23
 80011c2:	0a58      	lsrs	r0, r3, #9
 80011c4:	07d2      	lsls	r2, r2, #31
 80011c6:	4320      	orrs	r0, r4
 80011c8:	4310      	orrs	r0, r2
 80011ca:	bc0c      	pop	{r2, r3}
 80011cc:	4690      	mov	r8, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d174      	bne.n	80012c0 <__aeabi_fsub+0x1b4>
 80011d6:	1c60      	adds	r0, r4, #1
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	2801      	cmp	r0, #1
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_fsub+0xd4>
 80011de:	e0a7      	b.n	8001330 <__aeabi_fsub+0x224>
 80011e0:	464a      	mov	r2, r9
 80011e2:	1a9c      	subs	r4, r3, r2
 80011e4:	0162      	lsls	r2, r4, #5
 80011e6:	d500      	bpl.n	80011ea <__aeabi_fsub+0xde>
 80011e8:	e0b6      	b.n	8001358 <__aeabi_fsub+0x24c>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d1be      	bne.n	800116c <__aeabi_fsub+0x60>
 80011ee:	2200      	movs	r2, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e7e3      	b.n	80011be <__aeabi_fsub+0xb2>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_fsub+0xf0>
 80011fa:	e085      	b.n	8001308 <__aeabi_fsub+0x1fc>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d046      	beq.n	800128e <__aeabi_fsub+0x182>
 8001200:	2cff      	cmp	r4, #255	; 0xff
 8001202:	d049      	beq.n	8001298 <__aeabi_fsub+0x18c>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	4648      	mov	r0, r9
 8001208:	04d2      	lsls	r2, r2, #19
 800120a:	4310      	orrs	r0, r2
 800120c:	4681      	mov	r9, r0
 800120e:	2201      	movs	r2, #1
 8001210:	2e1b      	cmp	r6, #27
 8001212:	dc09      	bgt.n	8001228 <__aeabi_fsub+0x11c>
 8001214:	2020      	movs	r0, #32
 8001216:	464c      	mov	r4, r9
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	4084      	lsls	r4, r0
 800121c:	464a      	mov	r2, r9
 800121e:	0020      	movs	r0, r4
 8001220:	40f2      	lsrs	r2, r6
 8001222:	1e44      	subs	r4, r0, #1
 8001224:	41a0      	sbcs	r0, r4
 8001226:	4302      	orrs	r2, r0
 8001228:	189b      	adds	r3, r3, r2
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	d528      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800122e:	3501      	adds	r5, #1
 8001230:	2dff      	cmp	r5, #255	; 0xff
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x12a>
 8001234:	e0a8      	b.n	8001388 <__aeabi_fsub+0x27c>
 8001236:	2201      	movs	r2, #1
 8001238:	2407      	movs	r4, #7
 800123a:	4994      	ldr	r1, [pc, #592]	; (800148c <__aeabi_fsub+0x380>)
 800123c:	401a      	ands	r2, r3
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	400b      	ands	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	401c      	ands	r4, r3
 8001246:	e7a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_fsub+0x142>
 800124c:	e778      	b.n	8001140 <__aeabi_fsub+0x34>
 800124e:	e775      	b.n	800113c <__aeabi_fsub+0x30>
 8001250:	2cff      	cmp	r4, #255	; 0xff
 8001252:	d054      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	4649      	mov	r1, r9
 8001258:	04d2      	lsls	r2, r2, #19
 800125a:	4311      	orrs	r1, r2
 800125c:	4689      	mov	r9, r1
 800125e:	2201      	movs	r2, #1
 8001260:	2e1b      	cmp	r6, #27
 8001262:	dc09      	bgt.n	8001278 <__aeabi_fsub+0x16c>
 8001264:	2120      	movs	r1, #32
 8001266:	4648      	mov	r0, r9
 8001268:	1b89      	subs	r1, r1, r6
 800126a:	4088      	lsls	r0, r1
 800126c:	464a      	mov	r2, r9
 800126e:	0001      	movs	r1, r0
 8001270:	40f2      	lsrs	r2, r6
 8001272:	1e48      	subs	r0, r1, #1
 8001274:	4181      	sbcs	r1, r0
 8001276:	430a      	orrs	r2, r1
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	d500      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800127e:	e773      	b.n	8001168 <__aeabi_fsub+0x5c>
 8001280:	2201      	movs	r2, #1
 8001282:	4641      	mov	r1, r8
 8001284:	400a      	ands	r2, r1
 8001286:	0759      	lsls	r1, r3, #29
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x180>
 800128a:	e789      	b.n	80011a0 <__aeabi_fsub+0x94>
 800128c:	e011      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800128e:	4648      	mov	r0, r9
 8001290:	2800      	cmp	r0, #0
 8001292:	d158      	bne.n	8001346 <__aeabi_fsub+0x23a>
 8001294:	2cff      	cmp	r4, #255	; 0xff
 8001296:	d10c      	bne.n	80012b2 <__aeabi_fsub+0x1a6>
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x194>
 800129e:	e78c      	b.n	80011ba <__aeabi_fsub+0xae>
 80012a0:	2080      	movs	r0, #128	; 0x80
 80012a2:	03c0      	lsls	r0, r0, #15
 80012a4:	4303      	orrs	r3, r0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	0a5b      	lsrs	r3, r3, #9
 80012aa:	24ff      	movs	r4, #255	; 0xff
 80012ac:	e787      	b.n	80011be <__aeabi_fsub+0xb2>
 80012ae:	2cff      	cmp	r4, #255	; 0xff
 80012b0:	d025      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2dff      	cmp	r5, #255	; 0xff
 80012b6:	d0f0      	beq.n	800129a <__aeabi_fsub+0x18e>
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	b2ec      	uxtb	r4, r5
 80012be:	e77e      	b.n	80011be <__aeabi_fsub+0xb2>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d04d      	beq.n	8001360 <__aeabi_fsub+0x254>
 80012c4:	28ff      	cmp	r0, #255	; 0xff
 80012c6:	d018      	beq.n	80012fa <__aeabi_fsub+0x1ee>
 80012c8:	2480      	movs	r4, #128	; 0x80
 80012ca:	04e4      	lsls	r4, r4, #19
 80012cc:	4272      	negs	r2, r6
 80012ce:	4323      	orrs	r3, r4
 80012d0:	2a1b      	cmp	r2, #27
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_fsub+0x1ca>
 80012d4:	e0c4      	b.n	8001460 <__aeabi_fsub+0x354>
 80012d6:	001c      	movs	r4, r3
 80012d8:	2520      	movs	r5, #32
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	1aaa      	subs	r2, r5, r2
 80012de:	4093      	lsls	r3, r2
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	4193      	sbcs	r3, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	464a      	mov	r2, r9
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4688      	mov	r8, r1
 80012ee:	e738      	b.n	8001162 <__aeabi_fsub+0x56>
 80012f0:	1c72      	adds	r2, r6, #1
 80012f2:	d0f8      	beq.n	80012e6 <__aeabi_fsub+0x1da>
 80012f4:	43f2      	mvns	r2, r6
 80012f6:	28ff      	cmp	r0, #255	; 0xff
 80012f8:	d1ea      	bne.n	80012d0 <__aeabi_fsub+0x1c4>
 80012fa:	000a      	movs	r2, r1
 80012fc:	464b      	mov	r3, r9
 80012fe:	25ff      	movs	r5, #255	; 0xff
 8001300:	e7d7      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	0a5b      	lsrs	r3, r3, #9
 8001306:	e75a      	b.n	80011be <__aeabi_fsub+0xb2>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d141      	bne.n	8001390 <__aeabi_fsub+0x284>
 800130c:	1c65      	adds	r5, r4, #1
 800130e:	b2e9      	uxtb	r1, r5
 8001310:	2901      	cmp	r1, #1
 8001312:	dd45      	ble.n	80013a0 <__aeabi_fsub+0x294>
 8001314:	2dff      	cmp	r5, #255	; 0xff
 8001316:	d100      	bne.n	800131a <__aeabi_fsub+0x20e>
 8001318:	e74f      	b.n	80011ba <__aeabi_fsub+0xae>
 800131a:	2407      	movs	r4, #7
 800131c:	444b      	add	r3, r9
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	401c      	ands	r4, r3
 8001322:	e738      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001324:	2207      	movs	r2, #7
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <__aeabi_fsub+0x384>)
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	4023      	ands	r3, r4
 800132c:	4014      	ands	r4, r2
 800132e:	e732      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d11d      	bne.n	8001370 <__aeabi_fsub+0x264>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d17a      	bne.n	800142e <__aeabi_fsub+0x322>
 8001338:	464b      	mov	r3, r9
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x234>
 800133e:	e091      	b.n	8001464 <__aeabi_fsub+0x358>
 8001340:	000a      	movs	r2, r1
 8001342:	2500      	movs	r5, #0
 8001344:	e7b5      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001346:	3e01      	subs	r6, #1
 8001348:	2e00      	cmp	r6, #0
 800134a:	d119      	bne.n	8001380 <__aeabi_fsub+0x274>
 800134c:	444b      	add	r3, r9
 800134e:	e76c      	b.n	800122a <__aeabi_fsub+0x11e>
 8001350:	2cff      	cmp	r4, #255	; 0xff
 8001352:	d184      	bne.n	800125e <__aeabi_fsub+0x152>
 8001354:	25ff      	movs	r5, #255	; 0xff
 8001356:	e7ac      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001358:	464a      	mov	r2, r9
 800135a:	4688      	mov	r8, r1
 800135c:	1ad4      	subs	r4, r2, r3
 800135e:	e705      	b.n	800116c <__aeabi_fsub+0x60>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1c5      	bne.n	80012f0 <__aeabi_fsub+0x1e4>
 8001364:	000a      	movs	r2, r1
 8001366:	28ff      	cmp	r0, #255	; 0xff
 8001368:	d0c8      	beq.n	80012fc <__aeabi_fsub+0x1f0>
 800136a:	0005      	movs	r5, r0
 800136c:	464b      	mov	r3, r9
 800136e:	e7a0      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d149      	bne.n	8001408 <__aeabi_fsub+0x2fc>
 8001374:	464b      	mov	r3, r9
 8001376:	2b00      	cmp	r3, #0
 8001378:	d077      	beq.n	800146a <__aeabi_fsub+0x35e>
 800137a:	000a      	movs	r2, r1
 800137c:	25ff      	movs	r5, #255	; 0xff
 800137e:	e798      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001380:	2cff      	cmp	r4, #255	; 0xff
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x27a>
 8001384:	e743      	b.n	800120e <__aeabi_fsub+0x102>
 8001386:	e787      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001388:	000a      	movs	r2, r1
 800138a:	24ff      	movs	r4, #255	; 0xff
 800138c:	2300      	movs	r3, #0
 800138e:	e716      	b.n	80011be <__aeabi_fsub+0xb2>
 8001390:	2c00      	cmp	r4, #0
 8001392:	d115      	bne.n	80013c0 <__aeabi_fsub+0x2b4>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <__aeabi_fsub+0x33c>
 8001398:	28ff      	cmp	r0, #255	; 0xff
 800139a:	d1e6      	bne.n	800136a <__aeabi_fsub+0x25e>
 800139c:	464b      	mov	r3, r9
 800139e:	e77b      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d120      	bne.n	80013e6 <__aeabi_fsub+0x2da>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d057      	beq.n	8001458 <__aeabi_fsub+0x34c>
 80013a8:	4649      	mov	r1, r9
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d053      	beq.n	8001456 <__aeabi_fsub+0x34a>
 80013ae:	444b      	add	r3, r9
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	d568      	bpl.n	8001486 <__aeabi_fsub+0x37a>
 80013b4:	2407      	movs	r4, #7
 80013b6:	4a36      	ldr	r2, [pc, #216]	; (8001490 <__aeabi_fsub+0x384>)
 80013b8:	401c      	ands	r4, r3
 80013ba:	2501      	movs	r5, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	e6ea      	b.n	8001196 <__aeabi_fsub+0x8a>
 80013c0:	28ff      	cmp	r0, #255	; 0xff
 80013c2:	d0eb      	beq.n	800139c <__aeabi_fsub+0x290>
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	04d2      	lsls	r2, r2, #19
 80013c8:	4276      	negs	r6, r6
 80013ca:	4313      	orrs	r3, r2
 80013cc:	2e1b      	cmp	r6, #27
 80013ce:	dc53      	bgt.n	8001478 <__aeabi_fsub+0x36c>
 80013d0:	2520      	movs	r5, #32
 80013d2:	1bad      	subs	r5, r5, r6
 80013d4:	001a      	movs	r2, r3
 80013d6:	40ab      	lsls	r3, r5
 80013d8:	40f2      	lsrs	r2, r6
 80013da:	1e5c      	subs	r4, r3, #1
 80013dc:	41a3      	sbcs	r3, r4
 80013de:	4313      	orrs	r3, r2
 80013e0:	444b      	add	r3, r9
 80013e2:	0005      	movs	r5, r0
 80013e4:	e721      	b.n	800122a <__aeabi_fsub+0x11e>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0d8      	beq.n	800139c <__aeabi_fsub+0x290>
 80013ea:	4649      	mov	r1, r9
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x2e6>
 80013f0:	e752      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	03c9      	lsls	r1, r1, #15
 80013f6:	420f      	tst	r7, r1
 80013f8:	d100      	bne.n	80013fc <__aeabi_fsub+0x2f0>
 80013fa:	e74d      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013fc:	4660      	mov	r0, ip
 80013fe:	4208      	tst	r0, r1
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x2f8>
 8001402:	e749      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001404:	464b      	mov	r3, r9
 8001406:	e747      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001408:	4648      	mov	r0, r9
 800140a:	25ff      	movs	r5, #255	; 0xff
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x306>
 8001410:	e74f      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	03d2      	lsls	r2, r2, #15
 8001416:	4217      	tst	r7, r2
 8001418:	d004      	beq.n	8001424 <__aeabi_fsub+0x318>
 800141a:	4660      	mov	r0, ip
 800141c:	4210      	tst	r0, r2
 800141e:	d101      	bne.n	8001424 <__aeabi_fsub+0x318>
 8001420:	464b      	mov	r3, r9
 8001422:	4688      	mov	r8, r1
 8001424:	2201      	movs	r2, #1
 8001426:	4641      	mov	r1, r8
 8001428:	25ff      	movs	r5, #255	; 0xff
 800142a:	400a      	ands	r2, r1
 800142c:	e741      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800142e:	4648      	mov	r0, r9
 8001430:	2800      	cmp	r0, #0
 8001432:	d01f      	beq.n	8001474 <__aeabi_fsub+0x368>
 8001434:	1a1a      	subs	r2, r3, r0
 8001436:	0150      	lsls	r0, r2, #5
 8001438:	d520      	bpl.n	800147c <__aeabi_fsub+0x370>
 800143a:	464a      	mov	r2, r9
 800143c:	2407      	movs	r4, #7
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	401c      	ands	r4, r3
 8001442:	4688      	mov	r8, r1
 8001444:	2500      	movs	r5, #0
 8001446:	e6a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001448:	1c74      	adds	r4, r6, #1
 800144a:	d0c9      	beq.n	80013e0 <__aeabi_fsub+0x2d4>
 800144c:	43f6      	mvns	r6, r6
 800144e:	28ff      	cmp	r0, #255	; 0xff
 8001450:	d1bc      	bne.n	80013cc <__aeabi_fsub+0x2c0>
 8001452:	464b      	mov	r3, r9
 8001454:	e720      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001456:	4699      	mov	r9, r3
 8001458:	464b      	mov	r3, r9
 800145a:	2500      	movs	r5, #0
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	e72b      	b.n	80012b8 <__aeabi_fsub+0x1ac>
 8001460:	2301      	movs	r3, #1
 8001462:	e740      	b.n	80012e6 <__aeabi_fsub+0x1da>
 8001464:	2200      	movs	r2, #0
 8001466:	2300      	movs	r3, #0
 8001468:	e6a9      	b.n	80011be <__aeabi_fsub+0xb2>
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	2200      	movs	r2, #0
 800146e:	03db      	lsls	r3, r3, #15
 8001470:	24ff      	movs	r4, #255	; 0xff
 8001472:	e6a4      	b.n	80011be <__aeabi_fsub+0xb2>
 8001474:	2500      	movs	r5, #0
 8001476:	e71c      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001478:	2301      	movs	r3, #1
 800147a:	e7b1      	b.n	80013e0 <__aeabi_fsub+0x2d4>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d0f1      	beq.n	8001464 <__aeabi_fsub+0x358>
 8001480:	0013      	movs	r3, r2
 8001482:	2500      	movs	r5, #0
 8001484:	e6fc      	b.n	8001280 <__aeabi_fsub+0x174>
 8001486:	2500      	movs	r5, #0
 8001488:	e6fa      	b.n	8001280 <__aeabi_fsub+0x174>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	7dffffff 	.word	0x7dffffff
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_f2iz>:
 8001494:	0241      	lsls	r1, r0, #9
 8001496:	0042      	lsls	r2, r0, #1
 8001498:	0fc3      	lsrs	r3, r0, #31
 800149a:	0a49      	lsrs	r1, r1, #9
 800149c:	0e12      	lsrs	r2, r2, #24
 800149e:	2000      	movs	r0, #0
 80014a0:	2a7e      	cmp	r2, #126	; 0x7e
 80014a2:	d90d      	bls.n	80014c0 <__aeabi_f2iz+0x2c>
 80014a4:	2a9d      	cmp	r2, #157	; 0x9d
 80014a6:	d80c      	bhi.n	80014c2 <__aeabi_f2iz+0x2e>
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	0400      	lsls	r0, r0, #16
 80014ac:	4301      	orrs	r1, r0
 80014ae:	2a95      	cmp	r2, #149	; 0x95
 80014b0:	dc0a      	bgt.n	80014c8 <__aeabi_f2iz+0x34>
 80014b2:	2096      	movs	r0, #150	; 0x96
 80014b4:	1a82      	subs	r2, r0, r2
 80014b6:	40d1      	lsrs	r1, r2
 80014b8:	4248      	negs	r0, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_f2iz+0x2c>
 80014be:	0008      	movs	r0, r1
 80014c0:	4770      	bx	lr
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <__aeabi_f2iz+0x3c>)
 80014c4:	1898      	adds	r0, r3, r2
 80014c6:	e7fb      	b.n	80014c0 <__aeabi_f2iz+0x2c>
 80014c8:	3a96      	subs	r2, #150	; 0x96
 80014ca:	4091      	lsls	r1, r2
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_f2iz+0x24>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	7fffffff 	.word	0x7fffffff

080014d4 <__aeabi_i2f>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d03d      	beq.n	8001556 <__aeabi_i2f+0x82>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f001 fef4 	bl	80032d0 <__clzsi2>
 80014e8:	229e      	movs	r2, #158	; 0x9e
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	2a96      	cmp	r2, #150	; 0x96
 80014ee:	dc07      	bgt.n	8001500 <__aeabi_i2f+0x2c>
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2808      	cmp	r0, #8
 80014f4:	dd33      	ble.n	800155e <__aeabi_i2f+0x8a>
 80014f6:	3808      	subs	r0, #8
 80014f8:	4085      	lsls	r5, r0
 80014fa:	0268      	lsls	r0, r5, #9
 80014fc:	0a40      	lsrs	r0, r0, #9
 80014fe:	e023      	b.n	8001548 <__aeabi_i2f+0x74>
 8001500:	2a99      	cmp	r2, #153	; 0x99
 8001502:	dd0b      	ble.n	800151c <__aeabi_i2f+0x48>
 8001504:	2305      	movs	r3, #5
 8001506:	0029      	movs	r1, r5
 8001508:	1a1b      	subs	r3, r3, r0
 800150a:	40d9      	lsrs	r1, r3
 800150c:	0003      	movs	r3, r0
 800150e:	331b      	adds	r3, #27
 8001510:	409d      	lsls	r5, r3
 8001512:	002b      	movs	r3, r5
 8001514:	1e5d      	subs	r5, r3, #1
 8001516:	41ab      	sbcs	r3, r5
 8001518:	4319      	orrs	r1, r3
 800151a:	000d      	movs	r5, r1
 800151c:	2805      	cmp	r0, #5
 800151e:	dd01      	ble.n	8001524 <__aeabi_i2f+0x50>
 8001520:	1f43      	subs	r3, r0, #5
 8001522:	409d      	lsls	r5, r3
 8001524:	002b      	movs	r3, r5
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <__aeabi_i2f+0x90>)
 8001528:	400b      	ands	r3, r1
 800152a:	076e      	lsls	r6, r5, #29
 800152c:	d009      	beq.n	8001542 <__aeabi_i2f+0x6e>
 800152e:	260f      	movs	r6, #15
 8001530:	4035      	ands	r5, r6
 8001532:	2d04      	cmp	r5, #4
 8001534:	d005      	beq.n	8001542 <__aeabi_i2f+0x6e>
 8001536:	3304      	adds	r3, #4
 8001538:	015d      	lsls	r5, r3, #5
 800153a:	d502      	bpl.n	8001542 <__aeabi_i2f+0x6e>
 800153c:	229f      	movs	r2, #159	; 0x9f
 800153e:	400b      	ands	r3, r1
 8001540:	1a12      	subs	r2, r2, r0
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	0a58      	lsrs	r0, r3, #9
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	0240      	lsls	r0, r0, #9
 800154a:	05d2      	lsls	r2, r2, #23
 800154c:	0a40      	lsrs	r0, r0, #9
 800154e:	07e4      	lsls	r4, r4, #31
 8001550:	4310      	orrs	r0, r2
 8001552:	4320      	orrs	r0, r4
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2000      	movs	r0, #0
 800155c:	e7f4      	b.n	8001548 <__aeabi_i2f+0x74>
 800155e:	0268      	lsls	r0, r5, #9
 8001560:	0a40      	lsrs	r0, r0, #9
 8001562:	e7f1      	b.n	8001548 <__aeabi_i2f+0x74>
 8001564:	fbffffff 	.word	0xfbffffff

08001568 <__aeabi_ui2f>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	1e04      	subs	r4, r0, #0
 800156c:	d034      	beq.n	80015d8 <__aeabi_ui2f+0x70>
 800156e:	f001 feaf 	bl	80032d0 <__clzsi2>
 8001572:	229e      	movs	r2, #158	; 0x9e
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	2a96      	cmp	r2, #150	; 0x96
 8001578:	dc07      	bgt.n	800158a <__aeabi_ui2f+0x22>
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	2808      	cmp	r0, #8
 800157e:	dd2e      	ble.n	80015de <__aeabi_ui2f+0x76>
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	0260      	lsls	r0, r4, #9
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	e021      	b.n	80015ce <__aeabi_ui2f+0x66>
 800158a:	2a99      	cmp	r2, #153	; 0x99
 800158c:	dd09      	ble.n	80015a2 <__aeabi_ui2f+0x3a>
 800158e:	0003      	movs	r3, r0
 8001590:	0021      	movs	r1, r4
 8001592:	331b      	adds	r3, #27
 8001594:	4099      	lsls	r1, r3
 8001596:	1e4b      	subs	r3, r1, #1
 8001598:	4199      	sbcs	r1, r3
 800159a:	2305      	movs	r3, #5
 800159c:	1a1b      	subs	r3, r3, r0
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	430c      	orrs	r4, r1
 80015a2:	2805      	cmp	r0, #5
 80015a4:	dd01      	ble.n	80015aa <__aeabi_ui2f+0x42>
 80015a6:	1f43      	subs	r3, r0, #5
 80015a8:	409c      	lsls	r4, r3
 80015aa:	0023      	movs	r3, r4
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <__aeabi_ui2f+0x7c>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	0765      	lsls	r5, r4, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015b4:	250f      	movs	r5, #15
 80015b6:	402c      	ands	r4, r5
 80015b8:	2c04      	cmp	r4, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015bc:	3304      	adds	r3, #4
 80015be:	015c      	lsls	r4, r3, #5
 80015c0:	d502      	bpl.n	80015c8 <__aeabi_ui2f+0x60>
 80015c2:	229f      	movs	r2, #159	; 0x9f
 80015c4:	400b      	ands	r3, r1
 80015c6:	1a12      	subs	r2, r2, r0
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	0a58      	lsrs	r0, r3, #9
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	0240      	lsls	r0, r0, #9
 80015d0:	05d2      	lsls	r2, r2, #23
 80015d2:	0a40      	lsrs	r0, r0, #9
 80015d4:	4310      	orrs	r0, r2
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	2200      	movs	r2, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	e7f7      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015de:	0260      	lsls	r0, r4, #9
 80015e0:	0a40      	lsrs	r0, r0, #9
 80015e2:	e7f4      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	464f      	mov	r7, r9
 80015ec:	4646      	mov	r6, r8
 80015ee:	46d6      	mov	lr, sl
 80015f0:	000c      	movs	r4, r1
 80015f2:	0309      	lsls	r1, r1, #12
 80015f4:	b5c0      	push	{r6, r7, lr}
 80015f6:	0a49      	lsrs	r1, r1, #9
 80015f8:	0f47      	lsrs	r7, r0, #29
 80015fa:	005e      	lsls	r6, r3, #1
 80015fc:	4339      	orrs	r1, r7
 80015fe:	031f      	lsls	r7, r3, #12
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	469c      	mov	ip, r3
 8001604:	0065      	lsls	r5, r4, #1
 8001606:	0a7b      	lsrs	r3, r7, #9
 8001608:	0f57      	lsrs	r7, r2, #29
 800160a:	431f      	orrs	r7, r3
 800160c:	0d6d      	lsrs	r5, r5, #21
 800160e:	0fe4      	lsrs	r4, r4, #31
 8001610:	0d76      	lsrs	r6, r6, #21
 8001612:	46a1      	mov	r9, r4
 8001614:	00c0      	lsls	r0, r0, #3
 8001616:	46b8      	mov	r8, r7
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	1bab      	subs	r3, r5, r6
 800161c:	4564      	cmp	r4, ip
 800161e:	d07b      	beq.n	8001718 <__aeabi_dadd+0x130>
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd5f      	ble.n	80016e4 <__aeabi_dadd+0xfc>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x42>
 8001628:	e0a4      	b.n	8001774 <__aeabi_dadd+0x18c>
 800162a:	003e      	movs	r6, r7
 800162c:	4316      	orrs	r6, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x4a>
 8001630:	e112      	b.n	8001858 <__aeabi_dadd+0x270>
 8001632:	1e5e      	subs	r6, r3, #1
 8001634:	2e00      	cmp	r6, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x52>
 8001638:	e19e      	b.n	8001978 <__aeabi_dadd+0x390>
 800163a:	1a87      	subs	r7, r0, r2
 800163c:	4643      	mov	r3, r8
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	2501      	movs	r5, #1
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	4240      	negs	r0, r0
 8001648:	1a09      	subs	r1, r1, r0
 800164a:	020b      	lsls	r3, r1, #8
 800164c:	d400      	bmi.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e131      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001650:	0249      	lsls	r1, r1, #9
 8001652:	0a4e      	lsrs	r6, r1, #9
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x72>
 8001658:	e16e      	b.n	8001938 <__aeabi_dadd+0x350>
 800165a:	0030      	movs	r0, r6
 800165c:	f001 fe38 	bl	80032d0 <__clzsi2>
 8001660:	0003      	movs	r3, r0
 8001662:	3b08      	subs	r3, #8
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x82>
 8001668:	e161      	b.n	800192e <__aeabi_dadd+0x346>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	409e      	lsls	r6, r3
 8001672:	40d1      	lsrs	r1, r2
 8001674:	409f      	lsls	r7, r3
 8001676:	430e      	orrs	r6, r1
 8001678:	429d      	cmp	r5, r3
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x96>
 800167c:	e151      	b.n	8001922 <__aeabi_dadd+0x33a>
 800167e:	1b5d      	subs	r5, r3, r5
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	2b1f      	cmp	r3, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0xa0>
 8001686:	e17c      	b.n	8001982 <__aeabi_dadd+0x39a>
 8001688:	2120      	movs	r1, #32
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	003d      	movs	r5, r7
 800168e:	0030      	movs	r0, r6
 8001690:	408f      	lsls	r7, r1
 8001692:	4088      	lsls	r0, r1
 8001694:	40dd      	lsrs	r5, r3
 8001696:	1e79      	subs	r1, r7, #1
 8001698:	418f      	sbcs	r7, r1
 800169a:	0031      	movs	r1, r6
 800169c:	2207      	movs	r2, #7
 800169e:	4328      	orrs	r0, r5
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	2500      	movs	r5, #0
 80016a4:	4307      	orrs	r7, r0
 80016a6:	403a      	ands	r2, r7
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016ac:	230f      	movs	r3, #15
 80016ae:	403b      	ands	r3, r7
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	42bb      	cmp	r3, r7
 80016b8:	41bf      	sbcs	r7, r7
 80016ba:	427f      	negs	r7, r7
 80016bc:	19c9      	adds	r1, r1, r7
 80016be:	001f      	movs	r7, r3
 80016c0:	020b      	lsls	r3, r1, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0xde>
 80016c4:	e226      	b.n	8001b14 <__aeabi_dadd+0x52c>
 80016c6:	1c6a      	adds	r2, r5, #1
 80016c8:	4bc6      	ldr	r3, [pc, #792]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80016ca:	0555      	lsls	r5, r2, #21
 80016cc:	0d6d      	lsrs	r5, r5, #21
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0xec>
 80016d2:	e106      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 80016d4:	4ac4      	ldr	r2, [pc, #784]	; (80019e8 <__aeabi_dadd+0x400>)
 80016d6:	08ff      	lsrs	r7, r7, #3
 80016d8:	400a      	ands	r2, r1
 80016da:	0753      	lsls	r3, r2, #29
 80016dc:	0252      	lsls	r2, r2, #9
 80016de:	433b      	orrs	r3, r7
 80016e0:	0b12      	lsrs	r2, r2, #12
 80016e2:	e08e      	b.n	8001802 <__aeabi_dadd+0x21a>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x102>
 80016e8:	e0b8      	b.n	800185c <__aeabi_dadd+0x274>
 80016ea:	1c6b      	adds	r3, r5, #1
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	0d5b      	lsrs	r3, r3, #21
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	dc00      	bgt.n	80016f6 <__aeabi_dadd+0x10e>
 80016f4:	e130      	b.n	8001958 <__aeabi_dadd+0x370>
 80016f6:	1a87      	subs	r7, r0, r2
 80016f8:	4643      	mov	r3, r8
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	41b6      	sbcs	r6, r6
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	4276      	negs	r6, r6
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	0233      	lsls	r3, r6, #8
 8001706:	d500      	bpl.n	800170a <__aeabi_dadd+0x122>
 8001708:	e14c      	b.n	80019a4 <__aeabi_dadd+0x3bc>
 800170a:	003b      	movs	r3, r7
 800170c:	4333      	orrs	r3, r6
 800170e:	d1a1      	bne.n	8001654 <__aeabi_dadd+0x6c>
 8001710:	2200      	movs	r2, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	e070      	b.n	80017fa <__aeabi_dadd+0x212>
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc00      	bgt.n	800171e <__aeabi_dadd+0x136>
 800171c:	e0e5      	b.n	80018ea <__aeabi_dadd+0x302>
 800171e:	2e00      	cmp	r6, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x13c>
 8001722:	e083      	b.n	800182c <__aeabi_dadd+0x244>
 8001724:	4eaf      	ldr	r6, [pc, #700]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001726:	42b5      	cmp	r5, r6
 8001728:	d060      	beq.n	80017ec <__aeabi_dadd+0x204>
 800172a:	2680      	movs	r6, #128	; 0x80
 800172c:	0436      	lsls	r6, r6, #16
 800172e:	4337      	orrs	r7, r6
 8001730:	46b8      	mov	r8, r7
 8001732:	2b38      	cmp	r3, #56	; 0x38
 8001734:	dc00      	bgt.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e13e      	b.n	80019b6 <__aeabi_dadd+0x3ce>
 8001738:	4643      	mov	r3, r8
 800173a:	4313      	orrs	r3, r2
 800173c:	001f      	movs	r7, r3
 800173e:	1e7a      	subs	r2, r7, #1
 8001740:	4197      	sbcs	r7, r2
 8001742:	183f      	adds	r7, r7, r0
 8001744:	4287      	cmp	r7, r0
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	1809      	adds	r1, r1, r0
 800174c:	020b      	lsls	r3, r1, #8
 800174e:	d400      	bmi.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e0b0      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001752:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001754:	3501      	adds	r5, #1
 8001756:	429d      	cmp	r5, r3
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x174>
 800175a:	e0c3      	b.n	80018e4 <__aeabi_dadd+0x2fc>
 800175c:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <__aeabi_dadd+0x400>)
 800175e:	087b      	lsrs	r3, r7, #1
 8001760:	400a      	ands	r2, r1
 8001762:	2101      	movs	r1, #1
 8001764:	400f      	ands	r7, r1
 8001766:	431f      	orrs	r7, r3
 8001768:	0851      	lsrs	r1, r2, #1
 800176a:	07d3      	lsls	r3, r2, #31
 800176c:	2207      	movs	r2, #7
 800176e:	431f      	orrs	r7, r3
 8001770:	403a      	ands	r2, r7
 8001772:	e799      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001774:	4e9b      	ldr	r6, [pc, #620]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001776:	42b5      	cmp	r5, r6
 8001778:	d038      	beq.n	80017ec <__aeabi_dadd+0x204>
 800177a:	2680      	movs	r6, #128	; 0x80
 800177c:	0436      	lsls	r6, r6, #16
 800177e:	4337      	orrs	r7, r6
 8001780:	46b8      	mov	r8, r7
 8001782:	2b38      	cmp	r3, #56	; 0x38
 8001784:	dd00      	ble.n	8001788 <__aeabi_dadd+0x1a0>
 8001786:	e0dc      	b.n	8001942 <__aeabi_dadd+0x35a>
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dadd+0x1a6>
 800178c:	e130      	b.n	80019f0 <__aeabi_dadd+0x408>
 800178e:	001e      	movs	r6, r3
 8001790:	4647      	mov	r7, r8
 8001792:	3e20      	subs	r6, #32
 8001794:	40f7      	lsrs	r7, r6
 8001796:	46bc      	mov	ip, r7
 8001798:	2b20      	cmp	r3, #32
 800179a:	d004      	beq.n	80017a6 <__aeabi_dadd+0x1be>
 800179c:	2640      	movs	r6, #64	; 0x40
 800179e:	1af3      	subs	r3, r6, r3
 80017a0:	4646      	mov	r6, r8
 80017a2:	409e      	lsls	r6, r3
 80017a4:	4332      	orrs	r2, r6
 80017a6:	0017      	movs	r7, r2
 80017a8:	4663      	mov	r3, ip
 80017aa:	1e7a      	subs	r2, r7, #1
 80017ac:	4197      	sbcs	r7, r2
 80017ae:	431f      	orrs	r7, r3
 80017b0:	e0cc      	b.n	800194c <__aeabi_dadd+0x364>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x1d0>
 80017b6:	e204      	b.n	8001bc2 <__aeabi_dadd+0x5da>
 80017b8:	4643      	mov	r3, r8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dadd+0x1d8>
 80017be:	e159      	b.n	8001a74 <__aeabi_dadd+0x48c>
 80017c0:	074b      	lsls	r3, r1, #29
 80017c2:	08c0      	lsrs	r0, r0, #3
 80017c4:	4318      	orrs	r0, r3
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	4219      	tst	r1, r3
 80017ce:	d008      	beq.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d0:	4645      	mov	r5, r8
 80017d2:	08ed      	lsrs	r5, r5, #3
 80017d4:	421d      	tst	r5, r3
 80017d6:	d104      	bne.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d8:	4643      	mov	r3, r8
 80017da:	08d0      	lsrs	r0, r2, #3
 80017dc:	0759      	lsls	r1, r3, #29
 80017de:	4308      	orrs	r0, r1
 80017e0:	0029      	movs	r1, r5
 80017e2:	0f42      	lsrs	r2, r0, #29
 80017e4:	00c9      	lsls	r1, r1, #3
 80017e6:	4d7f      	ldr	r5, [pc, #508]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017e8:	4311      	orrs	r1, r2
 80017ea:	00c0      	lsls	r0, r0, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	08ca      	lsrs	r2, r1, #3
 80017f0:	497c      	ldr	r1, [pc, #496]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	4303      	orrs	r3, r0
 80017f6:	428d      	cmp	r5, r1
 80017f8:	d068      	beq.n	80018cc <__aeabi_dadd+0x2e4>
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	056d      	lsls	r5, r5, #21
 80017fe:	0b12      	lsrs	r2, r2, #12
 8001800:	0d6d      	lsrs	r5, r5, #21
 8001802:	2100      	movs	r1, #0
 8001804:	0312      	lsls	r2, r2, #12
 8001806:	0018      	movs	r0, r3
 8001808:	0b13      	lsrs	r3, r2, #12
 800180a:	0d0a      	lsrs	r2, r1, #20
 800180c:	0512      	lsls	r2, r2, #20
 800180e:	431a      	orrs	r2, r3
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <__aeabi_dadd+0x404>)
 8001812:	052d      	lsls	r5, r5, #20
 8001814:	4013      	ands	r3, r2
 8001816:	432b      	orrs	r3, r5
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	07e4      	lsls	r4, r4, #31
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	4323      	orrs	r3, r4
 8001820:	0019      	movs	r1, r3
 8001822:	bc1c      	pop	{r2, r3, r4}
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	46a2      	mov	sl, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	003e      	movs	r6, r7
 800182e:	4316      	orrs	r6, r2
 8001830:	d012      	beq.n	8001858 <__aeabi_dadd+0x270>
 8001832:	1e5e      	subs	r6, r3, #1
 8001834:	2e00      	cmp	r6, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dadd+0x252>
 8001838:	e100      	b.n	8001a3c <__aeabi_dadd+0x454>
 800183a:	1887      	adds	r7, r0, r2
 800183c:	4287      	cmp	r7, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	4441      	add	r1, r8
 8001842:	4240      	negs	r0, r0
 8001844:	1809      	adds	r1, r1, r0
 8001846:	2501      	movs	r5, #1
 8001848:	020b      	lsls	r3, r1, #8
 800184a:	d533      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 800184c:	2502      	movs	r5, #2
 800184e:	e785      	b.n	800175c <__aeabi_dadd+0x174>
 8001850:	4664      	mov	r4, ip
 8001852:	0033      	movs	r3, r6
 8001854:	4641      	mov	r1, r8
 8001856:	0010      	movs	r0, r2
 8001858:	001d      	movs	r5, r3
 800185a:	e7c7      	b.n	80017ec <__aeabi_dadd+0x204>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e0da      	b.n	8001a18 <__aeabi_dadd+0x430>
 8001862:	000c      	movs	r4, r1
 8001864:	4304      	orrs	r4, r0
 8001866:	d0f3      	beq.n	8001850 <__aeabi_dadd+0x268>
 8001868:	1c5c      	adds	r4, r3, #1
 800186a:	d100      	bne.n	800186e <__aeabi_dadd+0x286>
 800186c:	e19f      	b.n	8001bae <__aeabi_dadd+0x5c6>
 800186e:	4c5d      	ldr	r4, [pc, #372]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001870:	42a6      	cmp	r6, r4
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x28e>
 8001874:	e12f      	b.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001876:	43db      	mvns	r3, r3
 8001878:	2b38      	cmp	r3, #56	; 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_dadd+0x296>
 800187c:	e166      	b.n	8001b4c <__aeabi_dadd+0x564>
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dadd+0x29c>
 8001882:	e183      	b.n	8001b8c <__aeabi_dadd+0x5a4>
 8001884:	2420      	movs	r4, #32
 8001886:	0005      	movs	r5, r0
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	000f      	movs	r7, r1
 800188c:	40dd      	lsrs	r5, r3
 800188e:	40d9      	lsrs	r1, r3
 8001890:	40a0      	lsls	r0, r4
 8001892:	4643      	mov	r3, r8
 8001894:	40a7      	lsls	r7, r4
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	1e44      	subs	r4, r0, #1
 800189a:	41a0      	sbcs	r0, r4
 800189c:	4698      	mov	r8, r3
 800189e:	432f      	orrs	r7, r5
 80018a0:	4338      	orrs	r0, r7
 80018a2:	1a17      	subs	r7, r2, r0
 80018a4:	42ba      	cmp	r2, r7
 80018a6:	4192      	sbcs	r2, r2
 80018a8:	4643      	mov	r3, r8
 80018aa:	4252      	negs	r2, r2
 80018ac:	1a99      	subs	r1, r3, r2
 80018ae:	4664      	mov	r4, ip
 80018b0:	0035      	movs	r5, r6
 80018b2:	e6ca      	b.n	800164a <__aeabi_dadd+0x62>
 80018b4:	2207      	movs	r2, #7
 80018b6:	403a      	ands	r2, r7
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e6f6      	b.n	80016ac <__aeabi_dadd+0xc4>
 80018be:	074b      	lsls	r3, r1, #29
 80018c0:	08ca      	lsrs	r2, r1, #3
 80018c2:	4948      	ldr	r1, [pc, #288]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018c4:	08ff      	lsrs	r7, r7, #3
 80018c6:	433b      	orrs	r3, r7
 80018c8:	428d      	cmp	r5, r1
 80018ca:	d196      	bne.n	80017fa <__aeabi_dadd+0x212>
 80018cc:	0019      	movs	r1, r3
 80018ce:	4311      	orrs	r1, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x2ec>
 80018d2:	e19e      	b.n	8001c12 <__aeabi_dadd+0x62a>
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	430a      	orrs	r2, r1
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	4d41      	ldr	r5, [pc, #260]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018e0:	e78f      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018e2:	0015      	movs	r5, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	2300      	movs	r3, #0
 80018e8:	e78b      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dadd+0x308>
 80018ee:	e0c7      	b.n	8001a80 <__aeabi_dadd+0x498>
 80018f0:	1c6b      	adds	r3, r5, #1
 80018f2:	055f      	lsls	r7, r3, #21
 80018f4:	0d7f      	lsrs	r7, r7, #21
 80018f6:	2f01      	cmp	r7, #1
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dadd+0x314>
 80018fa:	e0f1      	b.n	8001ae0 <__aeabi_dadd+0x4f8>
 80018fc:	4d39      	ldr	r5, [pc, #228]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x31c>
 8001902:	e0b9      	b.n	8001a78 <__aeabi_dadd+0x490>
 8001904:	1885      	adds	r5, r0, r2
 8001906:	000a      	movs	r2, r1
 8001908:	4285      	cmp	r5, r0
 800190a:	4189      	sbcs	r1, r1
 800190c:	4442      	add	r2, r8
 800190e:	4249      	negs	r1, r1
 8001910:	1851      	adds	r1, r2, r1
 8001912:	2207      	movs	r2, #7
 8001914:	07cf      	lsls	r7, r1, #31
 8001916:	086d      	lsrs	r5, r5, #1
 8001918:	432f      	orrs	r7, r5
 800191a:	0849      	lsrs	r1, r1, #1
 800191c:	403a      	ands	r2, r7
 800191e:	001d      	movs	r5, r3
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	2207      	movs	r2, #7
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <__aeabi_dadd+0x400>)
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	4031      	ands	r1, r6
 800192a:	403a      	ands	r2, r7
 800192c:	e6bc      	b.n	80016a8 <__aeabi_dadd+0xc0>
 800192e:	003e      	movs	r6, r7
 8001930:	3828      	subs	r0, #40	; 0x28
 8001932:	4086      	lsls	r6, r0
 8001934:	2700      	movs	r7, #0
 8001936:	e69f      	b.n	8001678 <__aeabi_dadd+0x90>
 8001938:	0038      	movs	r0, r7
 800193a:	f001 fcc9 	bl	80032d0 <__clzsi2>
 800193e:	3020      	adds	r0, #32
 8001940:	e68e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001942:	4643      	mov	r3, r8
 8001944:	4313      	orrs	r3, r2
 8001946:	001f      	movs	r7, r3
 8001948:	1e7a      	subs	r2, r7, #1
 800194a:	4197      	sbcs	r7, r2
 800194c:	1bc7      	subs	r7, r0, r7
 800194e:	42b8      	cmp	r0, r7
 8001950:	4180      	sbcs	r0, r0
 8001952:	4240      	negs	r0, r0
 8001954:	1a09      	subs	r1, r1, r0
 8001956:	e678      	b.n	800164a <__aeabi_dadd+0x62>
 8001958:	000e      	movs	r6, r1
 800195a:	003b      	movs	r3, r7
 800195c:	4306      	orrs	r6, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	2d00      	cmp	r5, #0
 8001962:	d161      	bne.n	8001a28 <__aeabi_dadd+0x440>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d000      	beq.n	800196a <__aeabi_dadd+0x382>
 8001968:	e0f4      	b.n	8001b54 <__aeabi_dadd+0x56c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <__aeabi_dadd+0x388>
 800196e:	e11b      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001970:	4664      	mov	r4, ip
 8001972:	0039      	movs	r1, r7
 8001974:	0010      	movs	r0, r2
 8001976:	e739      	b.n	80017ec <__aeabi_dadd+0x204>
 8001978:	4f1a      	ldr	r7, [pc, #104]	; (80019e4 <__aeabi_dadd+0x3fc>)
 800197a:	42bb      	cmp	r3, r7
 800197c:	d07a      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 800197e:	0033      	movs	r3, r6
 8001980:	e6ff      	b.n	8001782 <__aeabi_dadd+0x19a>
 8001982:	0030      	movs	r0, r6
 8001984:	3d1f      	subs	r5, #31
 8001986:	40e8      	lsrs	r0, r5
 8001988:	2b20      	cmp	r3, #32
 800198a:	d003      	beq.n	8001994 <__aeabi_dadd+0x3ac>
 800198c:	2140      	movs	r1, #64	; 0x40
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	409e      	lsls	r6, r3
 8001992:	4337      	orrs	r7, r6
 8001994:	1e7b      	subs	r3, r7, #1
 8001996:	419f      	sbcs	r7, r3
 8001998:	2207      	movs	r2, #7
 800199a:	4307      	orrs	r7, r0
 800199c:	403a      	ands	r2, r7
 800199e:	2100      	movs	r1, #0
 80019a0:	2500      	movs	r5, #0
 80019a2:	e789      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 80019a4:	1a17      	subs	r7, r2, r0
 80019a6:	4643      	mov	r3, r8
 80019a8:	42ba      	cmp	r2, r7
 80019aa:	41b6      	sbcs	r6, r6
 80019ac:	1a59      	subs	r1, r3, r1
 80019ae:	4276      	negs	r6, r6
 80019b0:	1b8e      	subs	r6, r1, r6
 80019b2:	4664      	mov	r4, ip
 80019b4:	e64e      	b.n	8001654 <__aeabi_dadd+0x6c>
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dadd+0x3d4>
 80019ba:	e0ad      	b.n	8001b18 <__aeabi_dadd+0x530>
 80019bc:	2620      	movs	r6, #32
 80019be:	4647      	mov	r7, r8
 80019c0:	1af6      	subs	r6, r6, r3
 80019c2:	40b7      	lsls	r7, r6
 80019c4:	46b9      	mov	r9, r7
 80019c6:	0017      	movs	r7, r2
 80019c8:	46b2      	mov	sl, r6
 80019ca:	40df      	lsrs	r7, r3
 80019cc:	464e      	mov	r6, r9
 80019ce:	433e      	orrs	r6, r7
 80019d0:	0037      	movs	r7, r6
 80019d2:	4656      	mov	r6, sl
 80019d4:	40b2      	lsls	r2, r6
 80019d6:	1e56      	subs	r6, r2, #1
 80019d8:	41b2      	sbcs	r2, r6
 80019da:	4317      	orrs	r7, r2
 80019dc:	4642      	mov	r2, r8
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1889      	adds	r1, r1, r2
 80019e2:	e6ae      	b.n	8001742 <__aeabi_dadd+0x15a>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	ff7fffff 	.word	0xff7fffff
 80019ec:	800fffff 	.word	0x800fffff
 80019f0:	2620      	movs	r6, #32
 80019f2:	4647      	mov	r7, r8
 80019f4:	1af6      	subs	r6, r6, r3
 80019f6:	40b7      	lsls	r7, r6
 80019f8:	46b9      	mov	r9, r7
 80019fa:	0017      	movs	r7, r2
 80019fc:	46b2      	mov	sl, r6
 80019fe:	40df      	lsrs	r7, r3
 8001a00:	464e      	mov	r6, r9
 8001a02:	433e      	orrs	r6, r7
 8001a04:	0037      	movs	r7, r6
 8001a06:	4656      	mov	r6, sl
 8001a08:	40b2      	lsls	r2, r6
 8001a0a:	1e56      	subs	r6, r2, #1
 8001a0c:	41b2      	sbcs	r2, r6
 8001a0e:	4317      	orrs	r7, r2
 8001a10:	4642      	mov	r2, r8
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	1a89      	subs	r1, r1, r2
 8001a16:	e799      	b.n	800194c <__aeabi_dadd+0x364>
 8001a18:	4c7f      	ldr	r4, [pc, #508]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d05b      	beq.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001a1e:	2480      	movs	r4, #128	; 0x80
 8001a20:	0424      	lsls	r4, r4, #16
 8001a22:	425b      	negs	r3, r3
 8001a24:	4321      	orrs	r1, r4
 8001a26:	e727      	b.n	8001878 <__aeabi_dadd+0x290>
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	d10c      	bne.n	8001a46 <__aeabi_dadd+0x45e>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dadd+0x44a>
 8001a30:	e0cb      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001a32:	4664      	mov	r4, ip
 8001a34:	0039      	movs	r1, r7
 8001a36:	0010      	movs	r0, r2
 8001a38:	4d77      	ldr	r5, [pc, #476]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3a:	e6d7      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a3c:	4f76      	ldr	r7, [pc, #472]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3e:	42bb      	cmp	r3, r7
 8001a40:	d018      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a42:	0033      	movs	r3, r6
 8001a44:	e675      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d014      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a4a:	074b      	lsls	r3, r1, #29
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	08c9      	lsrs	r1, r1, #3
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d007      	beq.n	8001a6a <__aeabi_dadd+0x482>
 8001a5a:	08fc      	lsrs	r4, r7, #3
 8001a5c:	421c      	tst	r4, r3
 8001a5e:	d104      	bne.n	8001a6a <__aeabi_dadd+0x482>
 8001a60:	0779      	lsls	r1, r7, #29
 8001a62:	08d0      	lsrs	r0, r2, #3
 8001a64:	4308      	orrs	r0, r1
 8001a66:	46e1      	mov	r9, ip
 8001a68:	0021      	movs	r1, r4
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	0f42      	lsrs	r2, r0, #29
 8001a6e:	00c9      	lsls	r1, r1, #3
 8001a70:	4311      	orrs	r1, r2
 8001a72:	00c0      	lsls	r0, r0, #3
 8001a74:	4d68      	ldr	r5, [pc, #416]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a76:	e6b9      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a78:	001d      	movs	r5, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e6c0      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d15b      	bne.n	8001b3c <__aeabi_dadd+0x554>
 8001a84:	000d      	movs	r5, r1
 8001a86:	4305      	orrs	r5, r0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dadd+0x4a4>
 8001a8a:	e6e2      	b.n	8001852 <__aeabi_dadd+0x26a>
 8001a8c:	1c5d      	adds	r5, r3, #1
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x4aa>
 8001a90:	e0b0      	b.n	8001bf4 <__aeabi_dadd+0x60c>
 8001a92:	4d61      	ldr	r5, [pc, #388]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a94:	42ae      	cmp	r6, r5
 8001a96:	d01f      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	2b38      	cmp	r3, #56	; 0x38
 8001a9c:	dc71      	bgt.n	8001b82 <__aeabi_dadd+0x59a>
 8001a9e:	2b1f      	cmp	r3, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dadd+0x4bc>
 8001aa2:	e096      	b.n	8001bd2 <__aeabi_dadd+0x5ea>
 8001aa4:	2520      	movs	r5, #32
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	1aed      	subs	r5, r5, r3
 8001aaa:	40af      	lsls	r7, r5
 8001aac:	46b9      	mov	r9, r7
 8001aae:	0007      	movs	r7, r0
 8001ab0:	46aa      	mov	sl, r5
 8001ab2:	40df      	lsrs	r7, r3
 8001ab4:	464d      	mov	r5, r9
 8001ab6:	433d      	orrs	r5, r7
 8001ab8:	002f      	movs	r7, r5
 8001aba:	4655      	mov	r5, sl
 8001abc:	40a8      	lsls	r0, r5
 8001abe:	40d9      	lsrs	r1, r3
 8001ac0:	1e45      	subs	r5, r0, #1
 8001ac2:	41a8      	sbcs	r0, r5
 8001ac4:	4488      	add	r8, r1
 8001ac6:	4307      	orrs	r7, r0
 8001ac8:	18bf      	adds	r7, r7, r2
 8001aca:	4297      	cmp	r7, r2
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4251      	negs	r1, r2
 8001ad0:	4441      	add	r1, r8
 8001ad2:	0035      	movs	r5, r6
 8001ad4:	e63a      	b.n	800174c <__aeabi_dadd+0x164>
 8001ad6:	4664      	mov	r4, ip
 8001ad8:	0035      	movs	r5, r6
 8001ada:	4641      	mov	r1, r8
 8001adc:	0010      	movs	r0, r2
 8001ade:	e685      	b.n	80017ec <__aeabi_dadd+0x204>
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dadd+0x502>
 8001ae8:	e663      	b.n	80017b2 <__aeabi_dadd+0x1ca>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f5      	beq.n	8001ada <__aeabi_dadd+0x4f2>
 8001aee:	4643      	mov	r3, r8
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dadd+0x50e>
 8001af4:	e67a      	b.n	80017ec <__aeabi_dadd+0x204>
 8001af6:	1887      	adds	r7, r0, r2
 8001af8:	4287      	cmp	r7, r0
 8001afa:	4180      	sbcs	r0, r0
 8001afc:	2207      	movs	r2, #7
 8001afe:	4441      	add	r1, r8
 8001b00:	4240      	negs	r0, r0
 8001b02:	1809      	adds	r1, r1, r0
 8001b04:	403a      	ands	r2, r7
 8001b06:	020b      	lsls	r3, r1, #8
 8001b08:	d400      	bmi.n	8001b0c <__aeabi_dadd+0x524>
 8001b0a:	e6d5      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <__aeabi_dadd+0x634>)
 8001b0e:	3501      	adds	r5, #1
 8001b10:	4019      	ands	r1, r3
 8001b12:	e5c9      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b14:	0038      	movs	r0, r7
 8001b16:	e669      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b18:	001e      	movs	r6, r3
 8001b1a:	4647      	mov	r7, r8
 8001b1c:	3e20      	subs	r6, #32
 8001b1e:	40f7      	lsrs	r7, r6
 8001b20:	46bc      	mov	ip, r7
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x548>
 8001b26:	2640      	movs	r6, #64	; 0x40
 8001b28:	1af3      	subs	r3, r6, r3
 8001b2a:	4646      	mov	r6, r8
 8001b2c:	409e      	lsls	r6, r3
 8001b2e:	4332      	orrs	r2, r6
 8001b30:	0017      	movs	r7, r2
 8001b32:	4663      	mov	r3, ip
 8001b34:	1e7a      	subs	r2, r7, #1
 8001b36:	4197      	sbcs	r7, r2
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	e602      	b.n	8001742 <__aeabi_dadd+0x15a>
 8001b3c:	4d36      	ldr	r5, [pc, #216]	; (8001c18 <__aeabi_dadd+0x630>)
 8001b3e:	42ae      	cmp	r6, r5
 8001b40:	d0ca      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001b42:	2580      	movs	r5, #128	; 0x80
 8001b44:	042d      	lsls	r5, r5, #16
 8001b46:	425b      	negs	r3, r3
 8001b48:	4329      	orrs	r1, r5
 8001b4a:	e7a6      	b.n	8001a9a <__aeabi_dadd+0x4b2>
 8001b4c:	4308      	orrs	r0, r1
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	e6a6      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x572>
 8001b58:	e648      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b5a:	1a87      	subs	r7, r0, r2
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	42b8      	cmp	r0, r7
 8001b60:	41b6      	sbcs	r6, r6
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4276      	negs	r6, r6
 8001b66:	1b9e      	subs	r6, r3, r6
 8001b68:	0233      	lsls	r3, r6, #8
 8001b6a:	d54b      	bpl.n	8001c04 <__aeabi_dadd+0x61c>
 8001b6c:	1a17      	subs	r7, r2, r0
 8001b6e:	4643      	mov	r3, r8
 8001b70:	42ba      	cmp	r2, r7
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	1a59      	subs	r1, r3, r1
 8001b76:	4252      	negs	r2, r2
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4664      	mov	r4, ip
 8001b7e:	403a      	ands	r2, r7
 8001b80:	e592      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b82:	4301      	orrs	r1, r0
 8001b84:	000f      	movs	r7, r1
 8001b86:	1e79      	subs	r1, r7, #1
 8001b88:	418f      	sbcs	r7, r1
 8001b8a:	e79d      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001b8c:	001c      	movs	r4, r3
 8001b8e:	000f      	movs	r7, r1
 8001b90:	3c20      	subs	r4, #32
 8001b92:	40e7      	lsrs	r7, r4
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_dadd+0x5b8>
 8001b98:	2440      	movs	r4, #64	; 0x40
 8001b9a:	1ae3      	subs	r3, r4, r3
 8001b9c:	4099      	lsls	r1, r3
 8001b9e:	4308      	orrs	r0, r1
 8001ba0:	1e41      	subs	r1, r0, #1
 8001ba2:	4188      	sbcs	r0, r1
 8001ba4:	4338      	orrs	r0, r7
 8001ba6:	e67c      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2400      	movs	r4, #0
 8001bac:	e625      	b.n	80017fa <__aeabi_dadd+0x212>
 8001bae:	1a17      	subs	r7, r2, r0
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	42ba      	cmp	r2, r7
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	1a59      	subs	r1, r3, r1
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1a89      	subs	r1, r1, r2
 8001bbc:	4664      	mov	r4, ip
 8001bbe:	0035      	movs	r5, r6
 8001bc0:	e543      	b.n	800164a <__aeabi_dadd+0x62>
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4d14      	ldr	r5, [pc, #80]	; (8001c18 <__aeabi_dadd+0x630>)
 8001bc8:	e610      	b.n	80017ec <__aeabi_dadd+0x204>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	2400      	movs	r4, #0
 8001bce:	0312      	lsls	r2, r2, #12
 8001bd0:	e680      	b.n	80018d4 <__aeabi_dadd+0x2ec>
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	000f      	movs	r7, r1
 8001bd6:	3d20      	subs	r5, #32
 8001bd8:	40ef      	lsrs	r7, r5
 8001bda:	46bc      	mov	ip, r7
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x600>
 8001be0:	2540      	movs	r5, #64	; 0x40
 8001be2:	1aeb      	subs	r3, r5, r3
 8001be4:	4099      	lsls	r1, r3
 8001be6:	4308      	orrs	r0, r1
 8001be8:	0007      	movs	r7, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	1e78      	subs	r0, r7, #1
 8001bee:	4187      	sbcs	r7, r0
 8001bf0:	431f      	orrs	r7, r3
 8001bf2:	e769      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001bf4:	1887      	adds	r7, r0, r2
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	419b      	sbcs	r3, r3
 8001bfa:	4441      	add	r1, r8
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	18c9      	adds	r1, r1, r3
 8001c00:	0035      	movs	r5, r6
 8001c02:	e5a3      	b.n	800174c <__aeabi_dadd+0x164>
 8001c04:	003b      	movs	r3, r7
 8001c06:	4333      	orrs	r3, r6
 8001c08:	d0ce      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	0031      	movs	r1, r6
 8001c0e:	403a      	ands	r2, r7
 8001c10:	e652      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	001a      	movs	r2, r3
 8001c16:	e5f4      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff

08001c20 <__aeabi_ddiv>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4657      	mov	r7, sl
 8001c24:	46de      	mov	lr, fp
 8001c26:	464e      	mov	r6, r9
 8001c28:	4645      	mov	r5, r8
 8001c2a:	b5e0      	push	{r5, r6, r7, lr}
 8001c2c:	4683      	mov	fp, r0
 8001c2e:	0007      	movs	r7, r0
 8001c30:	030e      	lsls	r6, r1, #12
 8001c32:	0048      	lsls	r0, r1, #1
 8001c34:	b085      	sub	sp, #20
 8001c36:	4692      	mov	sl, r2
 8001c38:	001c      	movs	r4, r3
 8001c3a:	0b36      	lsrs	r6, r6, #12
 8001c3c:	0d40      	lsrs	r0, r0, #21
 8001c3e:	0fcd      	lsrs	r5, r1, #31
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0x26>
 8001c44:	e09d      	b.n	8001d82 <__aeabi_ddiv+0x162>
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c48:	4298      	cmp	r0, r3
 8001c4a:	d039      	beq.n	8001cc0 <__aeabi_ddiv+0xa0>
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00f6      	lsls	r6, r6, #3
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431e      	orrs	r6, r3
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c56:	0f7b      	lsrs	r3, r7, #29
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	4694      	mov	ip, r2
 8001c5e:	0003      	movs	r3, r0
 8001c60:	4463      	add	r3, ip
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2600      	movs	r6, #0
 8001c68:	00ff      	lsls	r7, r7, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	0323      	lsls	r3, r4, #12
 8001c6e:	0b1b      	lsrs	r3, r3, #12
 8001c70:	4698      	mov	r8, r3
 8001c72:	0063      	lsls	r3, r4, #1
 8001c74:	0fe4      	lsrs	r4, r4, #31
 8001c76:	4652      	mov	r2, sl
 8001c78:	0d5b      	lsrs	r3, r3, #21
 8001c7a:	9401      	str	r4, [sp, #4]
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x60>
 8001c7e:	e0b3      	b.n	8001de8 <__aeabi_ddiv+0x1c8>
 8001c80:	4986      	ldr	r1, [pc, #536]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c82:	428b      	cmp	r3, r1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x68>
 8001c86:	e09e      	b.n	8001dc6 <__aeabi_ddiv+0x1a6>
 8001c88:	4642      	mov	r2, r8
 8001c8a:	00d1      	lsls	r1, r2, #3
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4651      	mov	r1, sl
 8001c94:	0f49      	lsrs	r1, r1, #29
 8001c96:	4311      	orrs	r1, r2
 8001c98:	468b      	mov	fp, r1
 8001c9a:	4981      	ldr	r1, [pc, #516]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4463      	add	r3, ip
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	002b      	movs	r3, r5
 8001cae:	4063      	eors	r3, r4
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	2e0f      	cmp	r6, #15
 8001cb4:	d900      	bls.n	8001cb8 <__aeabi_ddiv+0x98>
 8001cb6:	e105      	b.n	8001ec4 <__aeabi_ddiv+0x2a4>
 8001cb8:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <__aeabi_ddiv+0x284>)
 8001cba:	00b6      	lsls	r6, r6, #2
 8001cbc:	599b      	ldr	r3, [r3, r6]
 8001cbe:	469f      	mov	pc, r3
 8001cc0:	465b      	mov	r3, fp
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	d000      	beq.n	8001cca <__aeabi_ddiv+0xaa>
 8001cc8:	e0b8      	b.n	8001e3c <__aeabi_ddiv+0x21c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	2608      	movs	r6, #8
 8001cce:	2700      	movs	r7, #0
 8001cd0:	9000      	str	r0, [sp, #0]
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	e7ca      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001cd6:	46cb      	mov	fp, r9
 8001cd8:	003a      	movs	r2, r7
 8001cda:	9902      	ldr	r1, [sp, #8]
 8001cdc:	9501      	str	r5, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	2902      	cmp	r1, #2
 8001ce4:	d027      	beq.n	8001d36 <__aeabi_ddiv+0x116>
 8001ce6:	2903      	cmp	r1, #3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_ddiv+0xcc>
 8001cea:	e280      	b.n	80021ee <__aeabi_ddiv+0x5ce>
 8001cec:	2901      	cmp	r1, #1
 8001cee:	d044      	beq.n	8001d7a <__aeabi_ddiv+0x15a>
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <__aeabi_ddiv+0x288>)
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	468c      	mov	ip, r1
 8001cf6:	4463      	add	r3, ip
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	dd38      	ble.n	8001d70 <__aeabi_ddiv+0x150>
 8001cfe:	0753      	lsls	r3, r2, #29
 8001d00:	d000      	beq.n	8001d04 <__aeabi_ddiv+0xe4>
 8001d02:	e213      	b.n	800212c <__aeabi_ddiv+0x50c>
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	465b      	mov	r3, fp
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	d509      	bpl.n	8001d20 <__aeabi_ddiv+0x100>
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <__aeabi_ddiv+0x28c>)
 8001d10:	4019      	ands	r1, r3
 8001d12:	468b      	mov	fp, r1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	468c      	mov	ip, r1
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	4463      	add	r3, ip
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <__aeabi_ddiv+0x290>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	dc07      	bgt.n	8001d36 <__aeabi_ddiv+0x116>
 8001d26:	465b      	mov	r3, fp
 8001d28:	0564      	lsls	r4, r4, #21
 8001d2a:	075f      	lsls	r7, r3, #29
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4317      	orrs	r7, r2
 8001d30:	0b1b      	lsrs	r3, r3, #12
 8001d32:	0d62      	lsrs	r2, r4, #21
 8001d34:	e002      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2700      	movs	r7, #0
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	0b1c      	lsrs	r4, r3, #12
 8001d42:	0d0b      	lsrs	r3, r1, #20
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	4323      	orrs	r3, r4
 8001d48:	0514      	lsls	r4, r2, #20
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <__aeabi_ddiv+0x294>)
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	431c      	orrs	r4, r3
 8001d52:	4653      	mov	r3, sl
 8001d54:	0064      	lsls	r4, r4, #1
 8001d56:	07db      	lsls	r3, r3, #31
 8001d58:	0864      	lsrs	r4, r4, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	b005      	add	sp, #20
 8001d60:	bc3c      	pop	{r2, r3, r4, r5}
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	46a2      	mov	sl, r4
 8001d68:	46ab      	mov	fp, r5
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	2301      	movs	r3, #1
 8001d72:	1b1b      	subs	r3, r3, r4
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x15a>
 8001d78:	e1ad      	b.n	80020d6 <__aeabi_ddiv+0x4b6>
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2700      	movs	r7, #0
 8001d80:	e7dc      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d82:	465b      	mov	r3, fp
 8001d84:	4333      	orrs	r3, r6
 8001d86:	4699      	mov	r9, r3
 8001d88:	d05e      	beq.n	8001e48 <__aeabi_ddiv+0x228>
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x170>
 8001d8e:	e18a      	b.n	80020a6 <__aeabi_ddiv+0x486>
 8001d90:	0030      	movs	r0, r6
 8001d92:	f001 fa9d 	bl	80032d0 <__clzsi2>
 8001d96:	0003      	movs	r3, r0
 8001d98:	3b0b      	subs	r3, #11
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_ddiv+0x180>
 8001d9e:	e17b      	b.n	8002098 <__aeabi_ddiv+0x478>
 8001da0:	221d      	movs	r2, #29
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	465a      	mov	r2, fp
 8001da6:	0001      	movs	r1, r0
 8001da8:	40da      	lsrs	r2, r3
 8001daa:	3908      	subs	r1, #8
 8001dac:	408e      	lsls	r6, r1
 8001dae:	0013      	movs	r3, r2
 8001db0:	465f      	mov	r7, fp
 8001db2:	4333      	orrs	r3, r6
 8001db4:	4699      	mov	r9, r3
 8001db6:	408f      	lsls	r7, r1
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <__aeabi_ddiv+0x298>)
 8001dba:	2600      	movs	r6, #0
 8001dbc:	1a1b      	subs	r3, r3, r0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	e752      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	4653      	mov	r3, sl
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	493b      	ldr	r1, [pc, #236]	; (8001ebc <__aeabi_ddiv+0x29c>)
 8001dce:	469b      	mov	fp, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	4463      	add	r3, ip
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	465b      	mov	r3, fp
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13b      	bne.n	8001e56 <__aeabi_ddiv+0x236>
 8001dde:	2302      	movs	r3, #2
 8001de0:	2200      	movs	r2, #0
 8001de2:	431e      	orrs	r6, r3
 8001de4:	2102      	movs	r1, #2
 8001de6:	e761      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001de8:	4643      	mov	r3, r8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	469b      	mov	fp, r3
 8001dee:	d037      	beq.n	8001e60 <__aeabi_ddiv+0x240>
 8001df0:	4643      	mov	r3, r8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_ddiv+0x1d8>
 8001df6:	e162      	b.n	80020be <__aeabi_ddiv+0x49e>
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f001 fa69 	bl	80032d0 <__clzsi2>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3b0b      	subs	r3, #11
 8001e02:	2b1c      	cmp	r3, #28
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_ddiv+0x1e8>
 8001e06:	e153      	b.n	80020b0 <__aeabi_ddiv+0x490>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	3a08      	subs	r2, #8
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	4688      	mov	r8, r1
 8001e12:	211d      	movs	r1, #29
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	4651      	mov	r1, sl
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	469b      	mov	fp, r3
 8001e22:	4653      	mov	r3, sl
 8001e24:	4093      	lsls	r3, r2
 8001e26:	001a      	movs	r2, r3
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <__aeabi_ddiv+0x2a0>)
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	4460      	add	r0, ip
 8001e30:	0003      	movs	r3, r0
 8001e32:	468c      	mov	ip, r1
 8001e34:	4463      	add	r3, ip
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	e737      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	46b1      	mov	r9, r6
 8001e40:	9000      	str	r0, [sp, #0]
 8001e42:	260c      	movs	r6, #12
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	e711      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2700      	movs	r7, #0
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	e70a      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e56:	2303      	movs	r3, #3
 8001e58:	46c3      	mov	fp, r8
 8001e5a:	431e      	orrs	r6, r3
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	e725      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	431e      	orrs	r6, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	2101      	movs	r1, #1
 8001e68:	e720      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	2700      	movs	r7, #0
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e76:	e761      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	4219      	tst	r1, r3
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x264>
 8001e82:	e0e2      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e84:	4659      	mov	r1, fp
 8001e86:	4219      	tst	r1, r3
 8001e88:	d000      	beq.n	8001e8c <__aeabi_ddiv+0x26c>
 8001e8a:	e0de      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	0017      	movs	r7, r2
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	46a2      	mov	sl, r4
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e98:	e750      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	fffffc01 	.word	0xfffffc01
 8001ea4:	08019c14 	.word	0x08019c14
 8001ea8:	000003ff 	.word	0x000003ff
 8001eac:	feffffff 	.word	0xfeffffff
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	800fffff 	.word	0x800fffff
 8001eb8:	fffffc0d 	.word	0xfffffc0d
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	45d9      	cmp	r9, fp
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x2aa>
 8001ec8:	e0cb      	b.n	8002062 <__aeabi_ddiv+0x442>
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x2ae>
 8001ecc:	e0c6      	b.n	800205c <__aeabi_ddiv+0x43c>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4648      	mov	r0, r9
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	465b      	mov	r3, fp
 8001edc:	0e16      	lsrs	r6, r2, #24
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	431e      	orrs	r6, r3
 8001ee2:	0213      	lsls	r3, r2, #8
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	0433      	lsls	r3, r6, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4699      	mov	r9, r3
 8001eec:	0c31      	lsrs	r1, r6, #16
 8001eee:	9101      	str	r1, [sp, #4]
 8001ef0:	f7fe f9b4 	bl	800025c <__aeabi_uidivmod>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	4342      	muls	r2, r0
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	0c21      	lsrs	r1, r4, #16
 8001efc:	0005      	movs	r5, r0
 8001efe:	4319      	orrs	r1, r3
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d907      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	3d01      	subs	r5, #1
 8001f08:	428e      	cmp	r6, r1
 8001f0a:	d803      	bhi.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d901      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f10:	1e85      	subs	r5, r0, #2
 8001f12:	1989      	adds	r1, r1, r6
 8001f14:	1a88      	subs	r0, r1, r2
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	f7fe f9a0 	bl	800025c <__aeabi_uidivmod>
 8001f1c:	0409      	lsls	r1, r1, #16
 8001f1e:	468c      	mov	ip, r1
 8001f20:	464a      	mov	r2, r9
 8001f22:	0421      	lsls	r1, r4, #16
 8001f24:	4664      	mov	r4, ip
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c09      	lsrs	r1, r1, #16
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	4321      	orrs	r1, r4
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d904      	bls.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f32:	1989      	adds	r1, r1, r6
 8001f34:	3b01      	subs	r3, #1
 8001f36:	428e      	cmp	r6, r1
 8001f38:	d800      	bhi.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f3a:	e0f1      	b.n	8002120 <__aeabi_ddiv+0x500>
 8001f3c:	042d      	lsls	r5, r5, #16
 8001f3e:	431d      	orrs	r5, r3
 8001f40:	46ab      	mov	fp, r5
 8001f42:	4643      	mov	r3, r8
 8001f44:	1a89      	subs	r1, r1, r2
 8001f46:	4642      	mov	r2, r8
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	0412      	lsls	r2, r2, #16
 8001f4c:	0c1d      	lsrs	r5, r3, #16
 8001f4e:	465b      	mov	r3, fp
 8001f50:	0c14      	lsrs	r4, r2, #16
 8001f52:	0022      	movs	r2, r4
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	435a      	muls	r2, r3
 8001f5a:	9403      	str	r4, [sp, #12]
 8001f5c:	436b      	muls	r3, r5
 8001f5e:	4344      	muls	r4, r0
 8001f60:	9502      	str	r5, [sp, #8]
 8001f62:	4368      	muls	r0, r5
 8001f64:	191b      	adds	r3, r3, r4
 8001f66:	0c15      	lsrs	r5, r2, #16
 8001f68:	18eb      	adds	r3, r5, r3
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d903      	bls.n	8001f76 <__aeabi_ddiv+0x356>
 8001f6e:	2480      	movs	r4, #128	; 0x80
 8001f70:	0264      	lsls	r4, r4, #9
 8001f72:	46a4      	mov	ip, r4
 8001f74:	4460      	add	r0, ip
 8001f76:	0c1c      	lsrs	r4, r3, #16
 8001f78:	0415      	lsls	r5, r2, #16
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	0c2d      	lsrs	r5, r5, #16
 8001f7e:	1820      	adds	r0, r4, r0
 8001f80:	195d      	adds	r5, r3, r5
 8001f82:	4281      	cmp	r1, r0
 8001f84:	d377      	bcc.n	8002076 <__aeabi_ddiv+0x456>
 8001f86:	d073      	beq.n	8002070 <__aeabi_ddiv+0x450>
 8001f88:	1a0c      	subs	r4, r1, r0
 8001f8a:	4aa2      	ldr	r2, [pc, #648]	; (8002214 <__aeabi_ddiv+0x5f4>)
 8001f8c:	1b7d      	subs	r5, r7, r5
 8001f8e:	42af      	cmp	r7, r5
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	4694      	mov	ip, r2
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	427f      	negs	r7, r7
 8001f98:	4463      	add	r3, ip
 8001f9a:	1be0      	subs	r0, r4, r7
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4286      	cmp	r6, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_ddiv+0x384>
 8001fa2:	e0db      	b.n	800215c <__aeabi_ddiv+0x53c>
 8001fa4:	9901      	ldr	r1, [sp, #4]
 8001fa6:	f7fe f959 	bl	800025c <__aeabi_uidivmod>
 8001faa:	464a      	mov	r2, r9
 8001fac:	4342      	muls	r2, r0
 8001fae:	040b      	lsls	r3, r1, #16
 8001fb0:	0c29      	lsrs	r1, r5, #16
 8001fb2:	0007      	movs	r7, r0
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d907      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fba:	1989      	adds	r1, r1, r6
 8001fbc:	3f01      	subs	r7, #1
 8001fbe:	428e      	cmp	r6, r1
 8001fc0:	d803      	bhi.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d901      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc6:	1e87      	subs	r7, r0, #2
 8001fc8:	1989      	adds	r1, r1, r6
 8001fca:	1a88      	subs	r0, r1, r2
 8001fcc:	9901      	ldr	r1, [sp, #4]
 8001fce:	f7fe f945 	bl	800025c <__aeabi_uidivmod>
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	4689      	mov	r9, r1
 8001fd8:	0429      	lsls	r1, r5, #16
 8001fda:	464d      	mov	r5, r9
 8001fdc:	4342      	muls	r2, r0
 8001fde:	0c09      	lsrs	r1, r1, #16
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	4329      	orrs	r1, r5
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	d907      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001fe8:	1989      	adds	r1, r1, r6
 8001fea:	3b01      	subs	r3, #1
 8001fec:	428e      	cmp	r6, r1
 8001fee:	d803      	bhi.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d901      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff4:	1e83      	subs	r3, r0, #2
 8001ff6:	1989      	adds	r1, r1, r6
 8001ff8:	043f      	lsls	r7, r7, #16
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	9f03      	ldr	r7, [sp, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	0038      	movs	r0, r7
 8002004:	0413      	lsls	r3, r2, #16
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	4358      	muls	r0, r3
 800200a:	4681      	mov	r9, r0
 800200c:	9802      	ldr	r0, [sp, #8]
 800200e:	0c15      	lsrs	r5, r2, #16
 8002010:	436f      	muls	r7, r5
 8002012:	4343      	muls	r3, r0
 8002014:	4345      	muls	r5, r0
 8002016:	4648      	mov	r0, r9
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	4684      	mov	ip, r0
 800201c:	19db      	adds	r3, r3, r7
 800201e:	4463      	add	r3, ip
 8002020:	429f      	cmp	r7, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x40c>
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	0240      	lsls	r0, r0, #9
 8002028:	4684      	mov	ip, r0
 800202a:	4465      	add	r5, ip
 800202c:	4648      	mov	r0, r9
 800202e:	0c1f      	lsrs	r7, r3, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	0c00      	lsrs	r0, r0, #16
 8002036:	197d      	adds	r5, r7, r5
 8002038:	1818      	adds	r0, r3, r0
 800203a:	42a9      	cmp	r1, r5
 800203c:	d200      	bcs.n	8002040 <__aeabi_ddiv+0x420>
 800203e:	e084      	b.n	800214a <__aeabi_ddiv+0x52a>
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x424>
 8002042:	e07f      	b.n	8002144 <__aeabi_ddiv+0x524>
 8002044:	2301      	movs	r3, #1
 8002046:	431a      	orrs	r2, r3
 8002048:	e657      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	464a      	mov	r2, r9
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4313      	orrs	r3, r2
 8002052:	031b      	lsls	r3, r3, #12
 8002054:	0b1b      	lsrs	r3, r3, #12
 8002056:	46aa      	mov	sl, r5
 8002058:	4a6f      	ldr	r2, [pc, #444]	; (8002218 <__aeabi_ddiv+0x5f8>)
 800205a:	e66f      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 800205c:	42ba      	cmp	r2, r7
 800205e:	d900      	bls.n	8002062 <__aeabi_ddiv+0x442>
 8002060:	e735      	b.n	8001ece <__aeabi_ddiv+0x2ae>
 8002062:	464b      	mov	r3, r9
 8002064:	07dc      	lsls	r4, r3, #31
 8002066:	0858      	lsrs	r0, r3, #1
 8002068:	087b      	lsrs	r3, r7, #1
 800206a:	431c      	orrs	r4, r3
 800206c:	07ff      	lsls	r7, r7, #31
 800206e:	e734      	b.n	8001eda <__aeabi_ddiv+0x2ba>
 8002070:	2400      	movs	r4, #0
 8002072:	42af      	cmp	r7, r5
 8002074:	d289      	bcs.n	8001f8a <__aeabi_ddiv+0x36a>
 8002076:	4447      	add	r7, r8
 8002078:	4547      	cmp	r7, r8
 800207a:	41a4      	sbcs	r4, r4
 800207c:	465b      	mov	r3, fp
 800207e:	4264      	negs	r4, r4
 8002080:	19a4      	adds	r4, r4, r6
 8002082:	1864      	adds	r4, r4, r1
 8002084:	3b01      	subs	r3, #1
 8002086:	42a6      	cmp	r6, r4
 8002088:	d21e      	bcs.n	80020c8 <__aeabi_ddiv+0x4a8>
 800208a:	42a0      	cmp	r0, r4
 800208c:	d86d      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x472>
 8002090:	e0b6      	b.n	8002200 <__aeabi_ddiv+0x5e0>
 8002092:	1a24      	subs	r4, r4, r0
 8002094:	469b      	mov	fp, r3
 8002096:	e778      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002098:	0003      	movs	r3, r0
 800209a:	465a      	mov	r2, fp
 800209c:	3b28      	subs	r3, #40	; 0x28
 800209e:	409a      	lsls	r2, r3
 80020a0:	2700      	movs	r7, #0
 80020a2:	4691      	mov	r9, r2
 80020a4:	e688      	b.n	8001db8 <__aeabi_ddiv+0x198>
 80020a6:	4658      	mov	r0, fp
 80020a8:	f001 f912 	bl	80032d0 <__clzsi2>
 80020ac:	3020      	adds	r0, #32
 80020ae:	e672      	b.n	8001d96 <__aeabi_ddiv+0x176>
 80020b0:	0003      	movs	r3, r0
 80020b2:	4652      	mov	r2, sl
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	4693      	mov	fp, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	e6b4      	b.n	8001e28 <__aeabi_ddiv+0x208>
 80020be:	4650      	mov	r0, sl
 80020c0:	f001 f906 	bl	80032d0 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e69a      	b.n	8001dfe <__aeabi_ddiv+0x1de>
 80020c8:	42a6      	cmp	r6, r4
 80020ca:	d1e2      	bne.n	8002092 <__aeabi_ddiv+0x472>
 80020cc:	45b8      	cmp	r8, r7
 80020ce:	d9dc      	bls.n	800208a <__aeabi_ddiv+0x46a>
 80020d0:	1a34      	subs	r4, r6, r0
 80020d2:	469b      	mov	fp, r3
 80020d4:	e759      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	dc65      	bgt.n	80021a6 <__aeabi_ddiv+0x586>
 80020da:	4c50      	ldr	r4, [pc, #320]	; (800221c <__aeabi_ddiv+0x5fc>)
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	46a4      	mov	ip, r4
 80020e0:	465c      	mov	r4, fp
 80020e2:	4461      	add	r1, ip
 80020e4:	0008      	movs	r0, r1
 80020e6:	408c      	lsls	r4, r1
 80020e8:	0011      	movs	r1, r2
 80020ea:	4082      	lsls	r2, r0
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	1e50      	subs	r0, r2, #1
 80020f0:	4182      	sbcs	r2, r0
 80020f2:	430c      	orrs	r4, r1
 80020f4:	4314      	orrs	r4, r2
 80020f6:	465a      	mov	r2, fp
 80020f8:	40da      	lsrs	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	d009      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002100:	220f      	movs	r2, #15
 8002102:	4022      	ands	r2, r4
 8002104:	2a04      	cmp	r2, #4
 8002106:	d005      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002108:	0022      	movs	r2, r4
 800210a:	1d14      	adds	r4, r2, #4
 800210c:	4294      	cmp	r4, r2
 800210e:	4189      	sbcs	r1, r1
 8002110:	4249      	negs	r1, r1
 8002112:	185b      	adds	r3, r3, r1
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	d562      	bpl.n	80021de <__aeabi_ddiv+0x5be>
 8002118:	2201      	movs	r2, #1
 800211a:	2300      	movs	r3, #0
 800211c:	2700      	movs	r7, #0
 800211e:	e60d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002120:	428a      	cmp	r2, r1
 8002122:	d800      	bhi.n	8002126 <__aeabi_ddiv+0x506>
 8002124:	e70a      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 8002126:	1e83      	subs	r3, r0, #2
 8002128:	1989      	adds	r1, r1, r6
 800212a:	e707      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 800212c:	230f      	movs	r3, #15
 800212e:	4013      	ands	r3, r2
 8002130:	2b04      	cmp	r3, #4
 8002132:	d100      	bne.n	8002136 <__aeabi_ddiv+0x516>
 8002134:	e5e6      	b.n	8001d04 <__aeabi_ddiv+0xe4>
 8002136:	1d17      	adds	r7, r2, #4
 8002138:	4297      	cmp	r7, r2
 800213a:	4192      	sbcs	r2, r2
 800213c:	4253      	negs	r3, r2
 800213e:	449b      	add	fp, r3
 8002140:	08fa      	lsrs	r2, r7, #3
 8002142:	e5e0      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_ddiv+0x52a>
 8002148:	e5d7      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800214a:	1871      	adds	r1, r6, r1
 800214c:	1e53      	subs	r3, r2, #1
 800214e:	42b1      	cmp	r1, r6
 8002150:	d327      	bcc.n	80021a2 <__aeabi_ddiv+0x582>
 8002152:	42a9      	cmp	r1, r5
 8002154:	d315      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 8002156:	d058      	beq.n	800220a <__aeabi_ddiv+0x5ea>
 8002158:	001a      	movs	r2, r3
 800215a:	e773      	b.n	8002044 <__aeabi_ddiv+0x424>
 800215c:	2b00      	cmp	r3, #0
 800215e:	dc00      	bgt.n	8002162 <__aeabi_ddiv+0x542>
 8002160:	e604      	b.n	8001d6c <__aeabi_ddiv+0x14c>
 8002162:	2301      	movs	r3, #1
 8002164:	2200      	movs	r2, #0
 8002166:	449b      	add	fp, r3
 8002168:	e5cd      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 800216a:	2302      	movs	r3, #2
 800216c:	4447      	add	r7, r8
 800216e:	4547      	cmp	r7, r8
 8002170:	4189      	sbcs	r1, r1
 8002172:	425b      	negs	r3, r3
 8002174:	469c      	mov	ip, r3
 8002176:	4249      	negs	r1, r1
 8002178:	1989      	adds	r1, r1, r6
 800217a:	190c      	adds	r4, r1, r4
 800217c:	44e3      	add	fp, ip
 800217e:	1a24      	subs	r4, r4, r0
 8002180:	e703      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002182:	4643      	mov	r3, r8
 8002184:	005f      	lsls	r7, r3, #1
 8002186:	4547      	cmp	r7, r8
 8002188:	419b      	sbcs	r3, r3
 800218a:	46b8      	mov	r8, r7
 800218c:	425b      	negs	r3, r3
 800218e:	199e      	adds	r6, r3, r6
 8002190:	3a02      	subs	r2, #2
 8002192:	1989      	adds	r1, r1, r6
 8002194:	42a9      	cmp	r1, r5
 8002196:	d000      	beq.n	800219a <__aeabi_ddiv+0x57a>
 8002198:	e754      	b.n	8002044 <__aeabi_ddiv+0x424>
 800219a:	4540      	cmp	r0, r8
 800219c:	d000      	beq.n	80021a0 <__aeabi_ddiv+0x580>
 800219e:	e751      	b.n	8002044 <__aeabi_ddiv+0x424>
 80021a0:	e5ab      	b.n	8001cfa <__aeabi_ddiv+0xda>
 80021a2:	001a      	movs	r2, r3
 80021a4:	e7f6      	b.n	8002194 <__aeabi_ddiv+0x574>
 80021a6:	211f      	movs	r1, #31
 80021a8:	465f      	mov	r7, fp
 80021aa:	4249      	negs	r1, r1
 80021ac:	1b0c      	subs	r4, r1, r4
 80021ae:	40e7      	lsrs	r7, r4
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d007      	beq.n	80021c4 <__aeabi_ddiv+0x5a4>
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <__aeabi_ddiv+0x600>)
 80021b6:	9b00      	ldr	r3, [sp, #0]
 80021b8:	468c      	mov	ip, r1
 80021ba:	4463      	add	r3, ip
 80021bc:	0018      	movs	r0, r3
 80021be:	465b      	mov	r3, fp
 80021c0:	4083      	lsls	r3, r0
 80021c2:	431a      	orrs	r2, r3
 80021c4:	1e50      	subs	r0, r2, #1
 80021c6:	4182      	sbcs	r2, r0
 80021c8:	433a      	orrs	r2, r7
 80021ca:	2707      	movs	r7, #7
 80021cc:	2300      	movs	r3, #0
 80021ce:	4017      	ands	r7, r2
 80021d0:	d009      	beq.n	80021e6 <__aeabi_ddiv+0x5c6>
 80021d2:	210f      	movs	r1, #15
 80021d4:	2300      	movs	r3, #0
 80021d6:	4011      	ands	r1, r2
 80021d8:	0014      	movs	r4, r2
 80021da:	2904      	cmp	r1, #4
 80021dc:	d195      	bne.n	800210a <__aeabi_ddiv+0x4ea>
 80021de:	0022      	movs	r2, r4
 80021e0:	075f      	lsls	r7, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	0b1b      	lsrs	r3, r3, #12
 80021e6:	08d2      	lsrs	r2, r2, #3
 80021e8:	4317      	orrs	r7, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	e5a6      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	4659      	mov	r1, fp
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	430b      	orrs	r3, r1
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	0017      	movs	r7, r2
 80021fa:	0b1b      	lsrs	r3, r3, #12
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <__aeabi_ddiv+0x5f8>)
 80021fe:	e59d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002200:	42bd      	cmp	r5, r7
 8002202:	d8b2      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 8002204:	469b      	mov	fp, r3
 8002206:	2400      	movs	r4, #0
 8002208:	e6bf      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 800220a:	4580      	cmp	r8, r0
 800220c:	d3b9      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 800220e:	001a      	movs	r2, r3
 8002210:	e7c3      	b.n	800219a <__aeabi_ddiv+0x57a>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000003ff 	.word	0x000003ff
 8002218:	000007ff 	.word	0x000007ff
 800221c:	0000041e 	.word	0x0000041e
 8002220:	0000043e 	.word	0x0000043e

08002224 <__eqdf2>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	464f      	mov	r7, r9
 8002228:	4646      	mov	r6, r8
 800222a:	46d6      	mov	lr, sl
 800222c:	4684      	mov	ip, r0
 800222e:	b5c0      	push	{r6, r7, lr}
 8002230:	4680      	mov	r8, r0
 8002232:	4e19      	ldr	r6, [pc, #100]	; (8002298 <__eqdf2+0x74>)
 8002234:	0318      	lsls	r0, r3, #12
 8002236:	030f      	lsls	r7, r1, #12
 8002238:	004d      	lsls	r5, r1, #1
 800223a:	0b00      	lsrs	r0, r0, #12
 800223c:	005c      	lsls	r4, r3, #1
 800223e:	4682      	mov	sl, r0
 8002240:	0b3f      	lsrs	r7, r7, #12
 8002242:	0d6d      	lsrs	r5, r5, #21
 8002244:	0fc9      	lsrs	r1, r1, #31
 8002246:	4691      	mov	r9, r2
 8002248:	0d64      	lsrs	r4, r4, #21
 800224a:	0fdb      	lsrs	r3, r3, #31
 800224c:	2001      	movs	r0, #1
 800224e:	42b5      	cmp	r5, r6
 8002250:	d00a      	beq.n	8002268 <__eqdf2+0x44>
 8002252:	42b4      	cmp	r4, r6
 8002254:	d003      	beq.n	800225e <__eqdf2+0x3a>
 8002256:	42a5      	cmp	r5, r4
 8002258:	d101      	bne.n	800225e <__eqdf2+0x3a>
 800225a:	4557      	cmp	r7, sl
 800225c:	d00c      	beq.n	8002278 <__eqdf2+0x54>
 800225e:	bc1c      	pop	{r2, r3, r4}
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	46a2      	mov	sl, r4
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	4666      	mov	r6, ip
 800226a:	433e      	orrs	r6, r7
 800226c:	d1f7      	bne.n	800225e <__eqdf2+0x3a>
 800226e:	42ac      	cmp	r4, r5
 8002270:	d1f5      	bne.n	800225e <__eqdf2+0x3a>
 8002272:	4654      	mov	r4, sl
 8002274:	4314      	orrs	r4, r2
 8002276:	d1f2      	bne.n	800225e <__eqdf2+0x3a>
 8002278:	2001      	movs	r0, #1
 800227a:	45c8      	cmp	r8, r9
 800227c:	d1ef      	bne.n	800225e <__eqdf2+0x3a>
 800227e:	4299      	cmp	r1, r3
 8002280:	d007      	beq.n	8002292 <__eqdf2+0x6e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1eb      	bne.n	800225e <__eqdf2+0x3a>
 8002286:	4663      	mov	r3, ip
 8002288:	431f      	orrs	r7, r3
 800228a:	0038      	movs	r0, r7
 800228c:	1e47      	subs	r7, r0, #1
 800228e:	41b8      	sbcs	r0, r7
 8002290:	e7e5      	b.n	800225e <__eqdf2+0x3a>
 8002292:	2000      	movs	r0, #0
 8002294:	e7e3      	b.n	800225e <__eqdf2+0x3a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff

0800229c <__gedf2>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	464f      	mov	r7, r9
 80022a0:	4646      	mov	r6, r8
 80022a2:	46d6      	mov	lr, sl
 80022a4:	004d      	lsls	r5, r1, #1
 80022a6:	b5c0      	push	{r6, r7, lr}
 80022a8:	030e      	lsls	r6, r1, #12
 80022aa:	0fc9      	lsrs	r1, r1, #31
 80022ac:	468a      	mov	sl, r1
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <__gedf2+0xc4>)
 80022b0:	031f      	lsls	r7, r3, #12
 80022b2:	005c      	lsls	r4, r3, #1
 80022b4:	4680      	mov	r8, r0
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d6d      	lsrs	r5, r5, #21
 80022ba:	4691      	mov	r9, r2
 80022bc:	0b3f      	lsrs	r7, r7, #12
 80022be:	0d64      	lsrs	r4, r4, #21
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	428d      	cmp	r5, r1
 80022c4:	d01e      	beq.n	8002304 <__gedf2+0x68>
 80022c6:	428c      	cmp	r4, r1
 80022c8:	d016      	beq.n	80022f8 <__gedf2+0x5c>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d11e      	bne.n	800230c <__gedf2+0x70>
 80022ce:	4330      	orrs	r0, r6
 80022d0:	4684      	mov	ip, r0
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d101      	bne.n	80022da <__gedf2+0x3e>
 80022d6:	433a      	orrs	r2, r7
 80022d8:	d023      	beq.n	8002322 <__gedf2+0x86>
 80022da:	4662      	mov	r2, ip
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d01a      	beq.n	8002316 <__gedf2+0x7a>
 80022e0:	459a      	cmp	sl, r3
 80022e2:	d029      	beq.n	8002338 <__gedf2+0x9c>
 80022e4:	4651      	mov	r1, sl
 80022e6:	2002      	movs	r0, #2
 80022e8:	3901      	subs	r1, #1
 80022ea:	4008      	ands	r0, r1
 80022ec:	3801      	subs	r0, #1
 80022ee:	bc1c      	pop	{r2, r3, r4}
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
 80022f4:	46a2      	mov	sl, r4
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	0039      	movs	r1, r7
 80022fa:	4311      	orrs	r1, r2
 80022fc:	d0e5      	beq.n	80022ca <__gedf2+0x2e>
 80022fe:	2002      	movs	r0, #2
 8002300:	4240      	negs	r0, r0
 8002302:	e7f4      	b.n	80022ee <__gedf2+0x52>
 8002304:	4330      	orrs	r0, r6
 8002306:	d1fa      	bne.n	80022fe <__gedf2+0x62>
 8002308:	42ac      	cmp	r4, r5
 800230a:	d00f      	beq.n	800232c <__gedf2+0x90>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d10f      	bne.n	8002330 <__gedf2+0x94>
 8002310:	433a      	orrs	r2, r7
 8002312:	d0e7      	beq.n	80022e4 <__gedf2+0x48>
 8002314:	e00c      	b.n	8002330 <__gedf2+0x94>
 8002316:	2201      	movs	r2, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	4393      	bics	r3, r2
 800231c:	0018      	movs	r0, r3
 800231e:	3001      	adds	r0, #1
 8002320:	e7e5      	b.n	80022ee <__gedf2+0x52>
 8002322:	4663      	mov	r3, ip
 8002324:	2000      	movs	r0, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0e1      	beq.n	80022ee <__gedf2+0x52>
 800232a:	e7db      	b.n	80022e4 <__gedf2+0x48>
 800232c:	433a      	orrs	r2, r7
 800232e:	d1e6      	bne.n	80022fe <__gedf2+0x62>
 8002330:	459a      	cmp	sl, r3
 8002332:	d1d7      	bne.n	80022e4 <__gedf2+0x48>
 8002334:	42a5      	cmp	r5, r4
 8002336:	dcd5      	bgt.n	80022e4 <__gedf2+0x48>
 8002338:	42a5      	cmp	r5, r4
 800233a:	db05      	blt.n	8002348 <__gedf2+0xac>
 800233c:	42be      	cmp	r6, r7
 800233e:	d8d1      	bhi.n	80022e4 <__gedf2+0x48>
 8002340:	d008      	beq.n	8002354 <__gedf2+0xb8>
 8002342:	2000      	movs	r0, #0
 8002344:	42be      	cmp	r6, r7
 8002346:	d2d2      	bcs.n	80022ee <__gedf2+0x52>
 8002348:	4650      	mov	r0, sl
 800234a:	2301      	movs	r3, #1
 800234c:	3801      	subs	r0, #1
 800234e:	4398      	bics	r0, r3
 8002350:	3001      	adds	r0, #1
 8002352:	e7cc      	b.n	80022ee <__gedf2+0x52>
 8002354:	45c8      	cmp	r8, r9
 8002356:	d8c5      	bhi.n	80022e4 <__gedf2+0x48>
 8002358:	2000      	movs	r0, #0
 800235a:	45c8      	cmp	r8, r9
 800235c:	d3f4      	bcc.n	8002348 <__gedf2+0xac>
 800235e:	e7c6      	b.n	80022ee <__gedf2+0x52>
 8002360:	000007ff 	.word	0x000007ff

08002364 <__ledf2>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	464f      	mov	r7, r9
 8002368:	4646      	mov	r6, r8
 800236a:	46d6      	mov	lr, sl
 800236c:	004d      	lsls	r5, r1, #1
 800236e:	b5c0      	push	{r6, r7, lr}
 8002370:	030e      	lsls	r6, r1, #12
 8002372:	0fc9      	lsrs	r1, r1, #31
 8002374:	468a      	mov	sl, r1
 8002376:	492e      	ldr	r1, [pc, #184]	; (8002430 <__ledf2+0xcc>)
 8002378:	031f      	lsls	r7, r3, #12
 800237a:	005c      	lsls	r4, r3, #1
 800237c:	4680      	mov	r8, r0
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d6d      	lsrs	r5, r5, #21
 8002382:	4691      	mov	r9, r2
 8002384:	0b3f      	lsrs	r7, r7, #12
 8002386:	0d64      	lsrs	r4, r4, #21
 8002388:	0fdb      	lsrs	r3, r3, #31
 800238a:	428d      	cmp	r5, r1
 800238c:	d018      	beq.n	80023c0 <__ledf2+0x5c>
 800238e:	428c      	cmp	r4, r1
 8002390:	d011      	beq.n	80023b6 <__ledf2+0x52>
 8002392:	2d00      	cmp	r5, #0
 8002394:	d118      	bne.n	80023c8 <__ledf2+0x64>
 8002396:	4330      	orrs	r0, r6
 8002398:	4684      	mov	ip, r0
 800239a:	2c00      	cmp	r4, #0
 800239c:	d11e      	bne.n	80023dc <__ledf2+0x78>
 800239e:	433a      	orrs	r2, r7
 80023a0:	d11c      	bne.n	80023dc <__ledf2+0x78>
 80023a2:	4663      	mov	r3, ip
 80023a4:	2000      	movs	r0, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <__ledf2+0xa8>
 80023aa:	4651      	mov	r1, sl
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e02a      	b.n	800240c <__ledf2+0xa8>
 80023b6:	0039      	movs	r1, r7
 80023b8:	4311      	orrs	r1, r2
 80023ba:	d0ea      	beq.n	8002392 <__ledf2+0x2e>
 80023bc:	2002      	movs	r0, #2
 80023be:	e025      	b.n	800240c <__ledf2+0xa8>
 80023c0:	4330      	orrs	r0, r6
 80023c2:	d1fb      	bne.n	80023bc <__ledf2+0x58>
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d026      	beq.n	8002416 <__ledf2+0xb2>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d126      	bne.n	800241a <__ledf2+0xb6>
 80023cc:	433a      	orrs	r2, r7
 80023ce:	d124      	bne.n	800241a <__ledf2+0xb6>
 80023d0:	4651      	mov	r1, sl
 80023d2:	2002      	movs	r0, #2
 80023d4:	3901      	subs	r1, #1
 80023d6:	4008      	ands	r0, r1
 80023d8:	3801      	subs	r0, #1
 80023da:	e017      	b.n	800240c <__ledf2+0xa8>
 80023dc:	4662      	mov	r2, ip
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d00f      	beq.n	8002402 <__ledf2+0x9e>
 80023e2:	459a      	cmp	sl, r3
 80023e4:	d1e1      	bne.n	80023aa <__ledf2+0x46>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	db05      	blt.n	80023f6 <__ledf2+0x92>
 80023ea:	42be      	cmp	r6, r7
 80023ec:	d8dd      	bhi.n	80023aa <__ledf2+0x46>
 80023ee:	d019      	beq.n	8002424 <__ledf2+0xc0>
 80023f0:	2000      	movs	r0, #0
 80023f2:	42be      	cmp	r6, r7
 80023f4:	d20a      	bcs.n	800240c <__ledf2+0xa8>
 80023f6:	4650      	mov	r0, sl
 80023f8:	2301      	movs	r3, #1
 80023fa:	3801      	subs	r0, #1
 80023fc:	4398      	bics	r0, r3
 80023fe:	3001      	adds	r0, #1
 8002400:	e004      	b.n	800240c <__ledf2+0xa8>
 8002402:	2201      	movs	r2, #1
 8002404:	3b01      	subs	r3, #1
 8002406:	4393      	bics	r3, r2
 8002408:	0018      	movs	r0, r3
 800240a:	3001      	adds	r0, #1
 800240c:	bc1c      	pop	{r2, r3, r4}
 800240e:	4690      	mov	r8, r2
 8002410:	4699      	mov	r9, r3
 8002412:	46a2      	mov	sl, r4
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	433a      	orrs	r2, r7
 8002418:	d1d0      	bne.n	80023bc <__ledf2+0x58>
 800241a:	459a      	cmp	sl, r3
 800241c:	d1c5      	bne.n	80023aa <__ledf2+0x46>
 800241e:	42a5      	cmp	r5, r4
 8002420:	dcc3      	bgt.n	80023aa <__ledf2+0x46>
 8002422:	e7e0      	b.n	80023e6 <__ledf2+0x82>
 8002424:	45c8      	cmp	r8, r9
 8002426:	d8c0      	bhi.n	80023aa <__ledf2+0x46>
 8002428:	2000      	movs	r0, #0
 800242a:	45c8      	cmp	r8, r9
 800242c:	d3e3      	bcc.n	80023f6 <__ledf2+0x92>
 800242e:	e7ed      	b.n	800240c <__ledf2+0xa8>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__aeabi_dmul>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	46de      	mov	lr, fp
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	4683      	mov	fp, r0
 8002442:	0006      	movs	r6, r0
 8002444:	030f      	lsls	r7, r1, #12
 8002446:	0048      	lsls	r0, r1, #1
 8002448:	b087      	sub	sp, #28
 800244a:	4692      	mov	sl, r2
 800244c:	001d      	movs	r5, r3
 800244e:	0b3f      	lsrs	r7, r7, #12
 8002450:	0d40      	lsrs	r0, r0, #21
 8002452:	0fcc      	lsrs	r4, r1, #31
 8002454:	2800      	cmp	r0, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dmul+0x26>
 8002458:	e06f      	b.n	800253a <__aeabi_dmul+0x106>
 800245a:	4bde      	ldr	r3, [pc, #888]	; (80027d4 <__aeabi_dmul+0x3a0>)
 800245c:	4298      	cmp	r0, r3
 800245e:	d038      	beq.n	80024d2 <__aeabi_dmul+0x9e>
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00ff      	lsls	r7, r7, #3
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431f      	orrs	r7, r3
 8002468:	0f73      	lsrs	r3, r6, #29
 800246a:	433b      	orrs	r3, r7
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	4bda      	ldr	r3, [pc, #872]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002470:	2700      	movs	r7, #0
 8002472:	4699      	mov	r9, r3
 8002474:	2300      	movs	r3, #0
 8002476:	469b      	mov	fp, r3
 8002478:	00f6      	lsls	r6, r6, #3
 800247a:	4481      	add	r9, r0
 800247c:	032b      	lsls	r3, r5, #12
 800247e:	0069      	lsls	r1, r5, #1
 8002480:	0b1b      	lsrs	r3, r3, #12
 8002482:	4652      	mov	r2, sl
 8002484:	4698      	mov	r8, r3
 8002486:	0d49      	lsrs	r1, r1, #21
 8002488:	0fed      	lsrs	r5, r5, #31
 800248a:	2900      	cmp	r1, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x5c>
 800248e:	e085      	b.n	800259c <__aeabi_dmul+0x168>
 8002490:	4bd0      	ldr	r3, [pc, #832]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002492:	4299      	cmp	r1, r3
 8002494:	d100      	bne.n	8002498 <__aeabi_dmul+0x64>
 8002496:	e073      	b.n	8002580 <__aeabi_dmul+0x14c>
 8002498:	4643      	mov	r3, r8
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4652      	mov	r2, sl
 80024a4:	48cc      	ldr	r0, [pc, #816]	; (80027d8 <__aeabi_dmul+0x3a4>)
 80024a6:	0f52      	lsrs	r2, r2, #29
 80024a8:	4684      	mov	ip, r0
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4652      	mov	r2, sl
 80024ae:	2000      	movs	r0, #0
 80024b0:	4461      	add	r1, ip
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	4489      	add	r9, r1
 80024b6:	0021      	movs	r1, r4
 80024b8:	4069      	eors	r1, r5
 80024ba:	9100      	str	r1, [sp, #0]
 80024bc:	468c      	mov	ip, r1
 80024be:	2101      	movs	r1, #1
 80024c0:	4449      	add	r1, r9
 80024c2:	468a      	mov	sl, r1
 80024c4:	2f0f      	cmp	r7, #15
 80024c6:	d900      	bls.n	80024ca <__aeabi_dmul+0x96>
 80024c8:	e090      	b.n	80025ec <__aeabi_dmul+0x1b8>
 80024ca:	49c4      	ldr	r1, [pc, #784]	; (80027dc <__aeabi_dmul+0x3a8>)
 80024cc:	00bf      	lsls	r7, r7, #2
 80024ce:	59cf      	ldr	r7, [r1, r7]
 80024d0:	46bf      	mov	pc, r7
 80024d2:	465b      	mov	r3, fp
 80024d4:	433b      	orrs	r3, r7
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0xa8>
 80024da:	e16a      	b.n	80027b2 <__aeabi_dmul+0x37e>
 80024dc:	2302      	movs	r3, #2
 80024de:	2708      	movs	r7, #8
 80024e0:	2600      	movs	r6, #0
 80024e2:	4681      	mov	r9, r0
 80024e4:	469b      	mov	fp, r3
 80024e6:	e7c9      	b.n	800247c <__aeabi_dmul+0x48>
 80024e8:	0032      	movs	r2, r6
 80024ea:	4658      	mov	r0, fp
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	4661      	mov	r1, ip
 80024f0:	9100      	str	r1, [sp, #0]
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0xc4>
 80024f6:	e075      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d100      	bne.n	80024fe <__aeabi_dmul+0xca>
 80024fc:	e1fe      	b.n	80028fc <__aeabi_dmul+0x4c8>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d000      	beq.n	8002504 <__aeabi_dmul+0xd0>
 8002502:	e12c      	b.n	800275e <__aeabi_dmul+0x32a>
 8002504:	2300      	movs	r3, #0
 8002506:	2700      	movs	r7, #0
 8002508:	2600      	movs	r6, #0
 800250a:	2500      	movs	r5, #0
 800250c:	033f      	lsls	r7, r7, #12
 800250e:	0d2a      	lsrs	r2, r5, #20
 8002510:	0b3f      	lsrs	r7, r7, #12
 8002512:	48b3      	ldr	r0, [pc, #716]	; (80027e0 <__aeabi_dmul+0x3ac>)
 8002514:	0512      	lsls	r2, r2, #20
 8002516:	433a      	orrs	r2, r7
 8002518:	4002      	ands	r2, r0
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	4313      	orrs	r3, r2
 800251e:	9a00      	ldr	r2, [sp, #0]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	07d1      	lsls	r1, r2, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	430b      	orrs	r3, r1
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	b007      	add	sp, #28
 800252e:	bc3c      	pop	{r2, r3, r4, r5}
 8002530:	4690      	mov	r8, r2
 8002532:	4699      	mov	r9, r3
 8002534:	46a2      	mov	sl, r4
 8002536:	46ab      	mov	fp, r5
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	465b      	mov	r3, fp
 800253c:	433b      	orrs	r3, r7
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	d100      	bne.n	8002544 <__aeabi_dmul+0x110>
 8002542:	e12f      	b.n	80027a4 <__aeabi_dmul+0x370>
 8002544:	2f00      	cmp	r7, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dmul+0x116>
 8002548:	e1a5      	b.n	8002896 <__aeabi_dmul+0x462>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 fec0 	bl	80032d0 <__clzsi2>
 8002550:	0003      	movs	r3, r0
 8002552:	3b0b      	subs	r3, #11
 8002554:	2b1c      	cmp	r3, #28
 8002556:	dd00      	ble.n	800255a <__aeabi_dmul+0x126>
 8002558:	e196      	b.n	8002888 <__aeabi_dmul+0x454>
 800255a:	221d      	movs	r2, #29
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	465a      	mov	r2, fp
 8002560:	0001      	movs	r1, r0
 8002562:	40da      	lsrs	r2, r3
 8002564:	465e      	mov	r6, fp
 8002566:	3908      	subs	r1, #8
 8002568:	408f      	lsls	r7, r1
 800256a:	0013      	movs	r3, r2
 800256c:	408e      	lsls	r6, r1
 800256e:	433b      	orrs	r3, r7
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <__aeabi_dmul+0x3b0>)
 8002574:	2700      	movs	r7, #0
 8002576:	1a1b      	subs	r3, r3, r0
 8002578:	4699      	mov	r9, r3
 800257a:	2300      	movs	r3, #0
 800257c:	469b      	mov	fp, r3
 800257e:	e77d      	b.n	800247c <__aeabi_dmul+0x48>
 8002580:	4641      	mov	r1, r8
 8002582:	4653      	mov	r3, sl
 8002584:	430b      	orrs	r3, r1
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002588:	468c      	mov	ip, r1
 800258a:	44e1      	add	r9, ip
 800258c:	2b00      	cmp	r3, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dmul+0x15e>
 8002590:	e11a      	b.n	80027c8 <__aeabi_dmul+0x394>
 8002592:	2202      	movs	r2, #2
 8002594:	2002      	movs	r0, #2
 8002596:	4317      	orrs	r7, r2
 8002598:	2200      	movs	r2, #0
 800259a:	e78c      	b.n	80024b6 <__aeabi_dmul+0x82>
 800259c:	4313      	orrs	r3, r2
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x16e>
 80025a0:	e10d      	b.n	80027be <__aeabi_dmul+0x38a>
 80025a2:	4643      	mov	r3, r8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x176>
 80025a8:	e181      	b.n	80028ae <__aeabi_dmul+0x47a>
 80025aa:	4640      	mov	r0, r8
 80025ac:	f000 fe90 	bl	80032d0 <__clzsi2>
 80025b0:	0002      	movs	r2, r0
 80025b2:	3a0b      	subs	r2, #11
 80025b4:	2a1c      	cmp	r2, #28
 80025b6:	dd00      	ble.n	80025ba <__aeabi_dmul+0x186>
 80025b8:	e172      	b.n	80028a0 <__aeabi_dmul+0x46c>
 80025ba:	0001      	movs	r1, r0
 80025bc:	4643      	mov	r3, r8
 80025be:	3908      	subs	r1, #8
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4698      	mov	r8, r3
 80025c4:	231d      	movs	r3, #29
 80025c6:	1a9a      	subs	r2, r3, r2
 80025c8:	4653      	mov	r3, sl
 80025ca:	40d3      	lsrs	r3, r2
 80025cc:	001a      	movs	r2, r3
 80025ce:	4643      	mov	r3, r8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	4652      	mov	r2, sl
 80025d4:	408a      	lsls	r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	1a08      	subs	r0, r1, r0
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <__aeabi_dmul+0x3b0>)
 80025dc:	4689      	mov	r9, r1
 80025de:	4481      	add	r9, r0
 80025e0:	2000      	movs	r0, #0
 80025e2:	e768      	b.n	80024b6 <__aeabi_dmul+0x82>
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <__aeabi_dmul+0x3a0>)
 80025e6:	2700      	movs	r7, #0
 80025e8:	2600      	movs	r6, #0
 80025ea:	e78e      	b.n	800250a <__aeabi_dmul+0xd6>
 80025ec:	0c14      	lsrs	r4, r2, #16
 80025ee:	0412      	lsls	r2, r2, #16
 80025f0:	0c12      	lsrs	r2, r2, #16
 80025f2:	0011      	movs	r1, r2
 80025f4:	0c37      	lsrs	r7, r6, #16
 80025f6:	0436      	lsls	r6, r6, #16
 80025f8:	0c35      	lsrs	r5, r6, #16
 80025fa:	4379      	muls	r1, r7
 80025fc:	0028      	movs	r0, r5
 80025fe:	468c      	mov	ip, r1
 8002600:	002e      	movs	r6, r5
 8002602:	4360      	muls	r0, r4
 8002604:	4460      	add	r0, ip
 8002606:	4683      	mov	fp, r0
 8002608:	4356      	muls	r6, r2
 800260a:	0021      	movs	r1, r4
 800260c:	0c30      	lsrs	r0, r6, #16
 800260e:	4680      	mov	r8, r0
 8002610:	4658      	mov	r0, fp
 8002612:	4379      	muls	r1, r7
 8002614:	4440      	add	r0, r8
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	4584      	cmp	ip, r0
 800261a:	d906      	bls.n	800262a <__aeabi_dmul+0x1f6>
 800261c:	4688      	mov	r8, r1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0249      	lsls	r1, r1, #9
 8002622:	468c      	mov	ip, r1
 8002624:	44e0      	add	r8, ip
 8002626:	4641      	mov	r1, r8
 8002628:	9102      	str	r1, [sp, #8]
 800262a:	0436      	lsls	r6, r6, #16
 800262c:	0c01      	lsrs	r1, r0, #16
 800262e:	0c36      	lsrs	r6, r6, #16
 8002630:	0400      	lsls	r0, r0, #16
 8002632:	468b      	mov	fp, r1
 8002634:	1981      	adds	r1, r0, r6
 8002636:	0c1e      	lsrs	r6, r3, #16
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	9103      	str	r1, [sp, #12]
 800263e:	0019      	movs	r1, r3
 8002640:	4379      	muls	r1, r7
 8002642:	468c      	mov	ip, r1
 8002644:	0028      	movs	r0, r5
 8002646:	4375      	muls	r5, r6
 8002648:	4465      	add	r5, ip
 800264a:	46a8      	mov	r8, r5
 800264c:	4358      	muls	r0, r3
 800264e:	0c05      	lsrs	r5, r0, #16
 8002650:	4445      	add	r5, r8
 8002652:	4377      	muls	r7, r6
 8002654:	42a9      	cmp	r1, r5
 8002656:	d903      	bls.n	8002660 <__aeabi_dmul+0x22c>
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0249      	lsls	r1, r1, #9
 800265c:	468c      	mov	ip, r1
 800265e:	4467      	add	r7, ip
 8002660:	0c29      	lsrs	r1, r5, #16
 8002662:	468c      	mov	ip, r1
 8002664:	0039      	movs	r1, r7
 8002666:	0400      	lsls	r0, r0, #16
 8002668:	0c00      	lsrs	r0, r0, #16
 800266a:	042d      	lsls	r5, r5, #16
 800266c:	182d      	adds	r5, r5, r0
 800266e:	4461      	add	r1, ip
 8002670:	44ab      	add	fp, r5
 8002672:	9105      	str	r1, [sp, #20]
 8002674:	4659      	mov	r1, fp
 8002676:	9104      	str	r1, [sp, #16]
 8002678:	9901      	ldr	r1, [sp, #4]
 800267a:	040f      	lsls	r7, r1, #16
 800267c:	0c3f      	lsrs	r7, r7, #16
 800267e:	0c08      	lsrs	r0, r1, #16
 8002680:	0039      	movs	r1, r7
 8002682:	4351      	muls	r1, r2
 8002684:	4342      	muls	r2, r0
 8002686:	4690      	mov	r8, r2
 8002688:	0002      	movs	r2, r0
 800268a:	468c      	mov	ip, r1
 800268c:	0c09      	lsrs	r1, r1, #16
 800268e:	468b      	mov	fp, r1
 8002690:	4362      	muls	r2, r4
 8002692:	437c      	muls	r4, r7
 8002694:	4444      	add	r4, r8
 8002696:	445c      	add	r4, fp
 8002698:	45a0      	cmp	r8, r4
 800269a:	d903      	bls.n	80026a4 <__aeabi_dmul+0x270>
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	4688      	mov	r8, r1
 80026a2:	4442      	add	r2, r8
 80026a4:	0c21      	lsrs	r1, r4, #16
 80026a6:	4688      	mov	r8, r1
 80026a8:	4661      	mov	r1, ip
 80026aa:	0409      	lsls	r1, r1, #16
 80026ac:	0c09      	lsrs	r1, r1, #16
 80026ae:	468c      	mov	ip, r1
 80026b0:	0039      	movs	r1, r7
 80026b2:	4359      	muls	r1, r3
 80026b4:	4343      	muls	r3, r0
 80026b6:	4370      	muls	r0, r6
 80026b8:	437e      	muls	r6, r7
 80026ba:	0c0f      	lsrs	r7, r1, #16
 80026bc:	18f6      	adds	r6, r6, r3
 80026be:	0424      	lsls	r4, r4, #16
 80026c0:	19be      	adds	r6, r7, r6
 80026c2:	4464      	add	r4, ip
 80026c4:	4442      	add	r2, r8
 80026c6:	468c      	mov	ip, r1
 80026c8:	42b3      	cmp	r3, r6
 80026ca:	d903      	bls.n	80026d4 <__aeabi_dmul+0x2a0>
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	4698      	mov	r8, r3
 80026d2:	4440      	add	r0, r8
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4661      	mov	r1, ip
 80026d8:	4698      	mov	r8, r3
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	0437      	lsls	r7, r6, #16
 80026de:	4443      	add	r3, r8
 80026e0:	469b      	mov	fp, r3
 80026e2:	45ab      	cmp	fp, r5
 80026e4:	41ad      	sbcs	r5, r5
 80026e6:	426b      	negs	r3, r5
 80026e8:	040d      	lsls	r5, r1, #16
 80026ea:	9905      	ldr	r1, [sp, #20]
 80026ec:	0c2d      	lsrs	r5, r5, #16
 80026ee:	468c      	mov	ip, r1
 80026f0:	197f      	adds	r7, r7, r5
 80026f2:	4467      	add	r7, ip
 80026f4:	18fd      	adds	r5, r7, r3
 80026f6:	46a8      	mov	r8, r5
 80026f8:	465d      	mov	r5, fp
 80026fa:	192d      	adds	r5, r5, r4
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	41a4      	sbcs	r4, r4
 8002700:	4693      	mov	fp, r2
 8002702:	4264      	negs	r4, r4
 8002704:	46a4      	mov	ip, r4
 8002706:	44c3      	add	fp, r8
 8002708:	44dc      	add	ip, fp
 800270a:	428f      	cmp	r7, r1
 800270c:	41bf      	sbcs	r7, r7
 800270e:	4598      	cmp	r8, r3
 8002710:	419b      	sbcs	r3, r3
 8002712:	4593      	cmp	fp, r2
 8002714:	4192      	sbcs	r2, r2
 8002716:	45a4      	cmp	ip, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	425b      	negs	r3, r3
 800271c:	427f      	negs	r7, r7
 800271e:	431f      	orrs	r7, r3
 8002720:	0c36      	lsrs	r6, r6, #16
 8002722:	4252      	negs	r2, r2
 8002724:	4264      	negs	r4, r4
 8002726:	19bf      	adds	r7, r7, r6
 8002728:	4322      	orrs	r2, r4
 800272a:	18bf      	adds	r7, r7, r2
 800272c:	4662      	mov	r2, ip
 800272e:	1838      	adds	r0, r7, r0
 8002730:	0243      	lsls	r3, r0, #9
 8002732:	0dd2      	lsrs	r2, r2, #23
 8002734:	9903      	ldr	r1, [sp, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	026a      	lsls	r2, r5, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	1e50      	subs	r0, r2, #1
 800273e:	4182      	sbcs	r2, r0
 8002740:	4661      	mov	r1, ip
 8002742:	0ded      	lsrs	r5, r5, #23
 8002744:	432a      	orrs	r2, r5
 8002746:	024e      	lsls	r6, r1, #9
 8002748:	4332      	orrs	r2, r6
 800274a:	01d9      	lsls	r1, r3, #7
 800274c:	d400      	bmi.n	8002750 <__aeabi_dmul+0x31c>
 800274e:	e0b3      	b.n	80028b8 <__aeabi_dmul+0x484>
 8002750:	2601      	movs	r6, #1
 8002752:	0850      	lsrs	r0, r2, #1
 8002754:	4032      	ands	r2, r6
 8002756:	4302      	orrs	r2, r0
 8002758:	07de      	lsls	r6, r3, #31
 800275a:	4332      	orrs	r2, r6
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	4c22      	ldr	r4, [pc, #136]	; (80027e8 <__aeabi_dmul+0x3b4>)
 8002760:	4454      	add	r4, sl
 8002762:	2c00      	cmp	r4, #0
 8002764:	dd62      	ble.n	800282c <__aeabi_dmul+0x3f8>
 8002766:	0751      	lsls	r1, r2, #29
 8002768:	d009      	beq.n	800277e <__aeabi_dmul+0x34a>
 800276a:	200f      	movs	r0, #15
 800276c:	4010      	ands	r0, r2
 800276e:	2804      	cmp	r0, #4
 8002770:	d005      	beq.n	800277e <__aeabi_dmul+0x34a>
 8002772:	1d10      	adds	r0, r2, #4
 8002774:	4290      	cmp	r0, r2
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	0002      	movs	r2, r0
 800277e:	01d9      	lsls	r1, r3, #7
 8002780:	d504      	bpl.n	800278c <__aeabi_dmul+0x358>
 8002782:	2480      	movs	r4, #128	; 0x80
 8002784:	4819      	ldr	r0, [pc, #100]	; (80027ec <__aeabi_dmul+0x3b8>)
 8002786:	00e4      	lsls	r4, r4, #3
 8002788:	4003      	ands	r3, r0
 800278a:	4454      	add	r4, sl
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <__aeabi_dmul+0x3bc>)
 800278e:	4284      	cmp	r4, r0
 8002790:	dd00      	ble.n	8002794 <__aeabi_dmul+0x360>
 8002792:	e727      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 8002794:	075e      	lsls	r6, r3, #29
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	0b1f      	lsrs	r7, r3, #12
 800279c:	0563      	lsls	r3, r4, #21
 800279e:	4316      	orrs	r6, r2
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	e6b2      	b.n	800250a <__aeabi_dmul+0xd6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	4699      	mov	r9, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	2704      	movs	r7, #4
 80027ac:	2600      	movs	r6, #0
 80027ae:	469b      	mov	fp, r3
 80027b0:	e664      	b.n	800247c <__aeabi_dmul+0x48>
 80027b2:	2303      	movs	r3, #3
 80027b4:	9701      	str	r7, [sp, #4]
 80027b6:	4681      	mov	r9, r0
 80027b8:	270c      	movs	r7, #12
 80027ba:	469b      	mov	fp, r3
 80027bc:	e65e      	b.n	800247c <__aeabi_dmul+0x48>
 80027be:	2201      	movs	r2, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	4317      	orrs	r7, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	e676      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027c8:	2303      	movs	r3, #3
 80027ca:	2003      	movs	r0, #3
 80027cc:	431f      	orrs	r7, r3
 80027ce:	4643      	mov	r3, r8
 80027d0:	e671      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	000007ff 	.word	0x000007ff
 80027d8:	fffffc01 	.word	0xfffffc01
 80027dc:	08019c54 	.word	0x08019c54
 80027e0:	800fffff 	.word	0x800fffff
 80027e4:	fffffc0d 	.word	0xfffffc0d
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2300      	movs	r3, #0
 80027f6:	2780      	movs	r7, #128	; 0x80
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	033f      	lsls	r7, r7, #12
 80027fc:	2600      	movs	r6, #0
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <__aeabi_dmul+0x4d8>)
 8002800:	e683      	b.n	800250a <__aeabi_dmul+0xd6>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0032      	movs	r2, r6
 8002806:	46a4      	mov	ip, r4
 8002808:	4658      	mov	r0, fp
 800280a:	e670      	b.n	80024ee <__aeabi_dmul+0xba>
 800280c:	46ac      	mov	ip, r5
 800280e:	e66e      	b.n	80024ee <__aeabi_dmul+0xba>
 8002810:	2780      	movs	r7, #128	; 0x80
 8002812:	9901      	ldr	r1, [sp, #4]
 8002814:	033f      	lsls	r7, r7, #12
 8002816:	4239      	tst	r1, r7
 8002818:	d02d      	beq.n	8002876 <__aeabi_dmul+0x442>
 800281a:	423b      	tst	r3, r7
 800281c:	d12b      	bne.n	8002876 <__aeabi_dmul+0x442>
 800281e:	431f      	orrs	r7, r3
 8002820:	033f      	lsls	r7, r7, #12
 8002822:	0b3f      	lsrs	r7, r7, #12
 8002824:	9500      	str	r5, [sp, #0]
 8002826:	0016      	movs	r6, r2
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <__aeabi_dmul+0x4d8>)
 800282a:	e66e      	b.n	800250a <__aeabi_dmul+0xd6>
 800282c:	2501      	movs	r5, #1
 800282e:	1b2d      	subs	r5, r5, r4
 8002830:	2d38      	cmp	r5, #56	; 0x38
 8002832:	dd00      	ble.n	8002836 <__aeabi_dmul+0x402>
 8002834:	e666      	b.n	8002504 <__aeabi_dmul+0xd0>
 8002836:	2d1f      	cmp	r5, #31
 8002838:	dc40      	bgt.n	80028bc <__aeabi_dmul+0x488>
 800283a:	4835      	ldr	r0, [pc, #212]	; (8002910 <__aeabi_dmul+0x4dc>)
 800283c:	001c      	movs	r4, r3
 800283e:	4450      	add	r0, sl
 8002840:	0016      	movs	r6, r2
 8002842:	4082      	lsls	r2, r0
 8002844:	4084      	lsls	r4, r0
 8002846:	40ee      	lsrs	r6, r5
 8002848:	1e50      	subs	r0, r2, #1
 800284a:	4182      	sbcs	r2, r0
 800284c:	4334      	orrs	r4, r6
 800284e:	4314      	orrs	r4, r2
 8002850:	40eb      	lsrs	r3, r5
 8002852:	0762      	lsls	r2, r4, #29
 8002854:	d009      	beq.n	800286a <__aeabi_dmul+0x436>
 8002856:	220f      	movs	r2, #15
 8002858:	4022      	ands	r2, r4
 800285a:	2a04      	cmp	r2, #4
 800285c:	d005      	beq.n	800286a <__aeabi_dmul+0x436>
 800285e:	0022      	movs	r2, r4
 8002860:	1d14      	adds	r4, r2, #4
 8002862:	4294      	cmp	r4, r2
 8002864:	4180      	sbcs	r0, r0
 8002866:	4240      	negs	r0, r0
 8002868:	181b      	adds	r3, r3, r0
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	d53e      	bpl.n	80028ec <__aeabi_dmul+0x4b8>
 800286e:	2301      	movs	r3, #1
 8002870:	2700      	movs	r7, #0
 8002872:	2600      	movs	r6, #0
 8002874:	e649      	b.n	800250a <__aeabi_dmul+0xd6>
 8002876:	2780      	movs	r7, #128	; 0x80
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	033f      	lsls	r7, r7, #12
 800287c:	431f      	orrs	r7, r3
 800287e:	033f      	lsls	r7, r7, #12
 8002880:	0b3f      	lsrs	r7, r7, #12
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <__aeabi_dmul+0x4d8>)
 8002886:	e640      	b.n	800250a <__aeabi_dmul+0xd6>
 8002888:	0003      	movs	r3, r0
 800288a:	465a      	mov	r2, fp
 800288c:	3b28      	subs	r3, #40	; 0x28
 800288e:	409a      	lsls	r2, r3
 8002890:	2600      	movs	r6, #0
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	e66d      	b.n	8002572 <__aeabi_dmul+0x13e>
 8002896:	4658      	mov	r0, fp
 8002898:	f000 fd1a 	bl	80032d0 <__clzsi2>
 800289c:	3020      	adds	r0, #32
 800289e:	e657      	b.n	8002550 <__aeabi_dmul+0x11c>
 80028a0:	0003      	movs	r3, r0
 80028a2:	4652      	mov	r2, sl
 80028a4:	3b28      	subs	r3, #40	; 0x28
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	e693      	b.n	80025d6 <__aeabi_dmul+0x1a2>
 80028ae:	4650      	mov	r0, sl
 80028b0:	f000 fd0e 	bl	80032d0 <__clzsi2>
 80028b4:	3020      	adds	r0, #32
 80028b6:	e67b      	b.n	80025b0 <__aeabi_dmul+0x17c>
 80028b8:	46ca      	mov	sl, r9
 80028ba:	e750      	b.n	800275e <__aeabi_dmul+0x32a>
 80028bc:	201f      	movs	r0, #31
 80028be:	001e      	movs	r6, r3
 80028c0:	4240      	negs	r0, r0
 80028c2:	1b04      	subs	r4, r0, r4
 80028c4:	40e6      	lsrs	r6, r4
 80028c6:	2d20      	cmp	r5, #32
 80028c8:	d003      	beq.n	80028d2 <__aeabi_dmul+0x49e>
 80028ca:	4c12      	ldr	r4, [pc, #72]	; (8002914 <__aeabi_dmul+0x4e0>)
 80028cc:	4454      	add	r4, sl
 80028ce:	40a3      	lsls	r3, r4
 80028d0:	431a      	orrs	r2, r3
 80028d2:	1e50      	subs	r0, r2, #1
 80028d4:	4182      	sbcs	r2, r0
 80028d6:	4332      	orrs	r2, r6
 80028d8:	2607      	movs	r6, #7
 80028da:	2700      	movs	r7, #0
 80028dc:	4016      	ands	r6, r2
 80028de:	d009      	beq.n	80028f4 <__aeabi_dmul+0x4c0>
 80028e0:	200f      	movs	r0, #15
 80028e2:	2300      	movs	r3, #0
 80028e4:	4010      	ands	r0, r2
 80028e6:	0014      	movs	r4, r2
 80028e8:	2804      	cmp	r0, #4
 80028ea:	d1b9      	bne.n	8002860 <__aeabi_dmul+0x42c>
 80028ec:	0022      	movs	r2, r4
 80028ee:	075e      	lsls	r6, r3, #29
 80028f0:	025b      	lsls	r3, r3, #9
 80028f2:	0b1f      	lsrs	r7, r3, #12
 80028f4:	08d2      	lsrs	r2, r2, #3
 80028f6:	4316      	orrs	r6, r2
 80028f8:	2300      	movs	r3, #0
 80028fa:	e606      	b.n	800250a <__aeabi_dmul+0xd6>
 80028fc:	2780      	movs	r7, #128	; 0x80
 80028fe:	033f      	lsls	r7, r7, #12
 8002900:	431f      	orrs	r7, r3
 8002902:	033f      	lsls	r7, r7, #12
 8002904:	0b3f      	lsrs	r7, r7, #12
 8002906:	0016      	movs	r6, r2
 8002908:	4b00      	ldr	r3, [pc, #0]	; (800290c <__aeabi_dmul+0x4d8>)
 800290a:	e5fe      	b.n	800250a <__aeabi_dmul+0xd6>
 800290c:	000007ff 	.word	0x000007ff
 8002910:	0000041e 	.word	0x0000041e
 8002914:	0000043e 	.word	0x0000043e

08002918 <__aeabi_dsub>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	4645      	mov	r5, r8
 8002920:	46de      	mov	lr, fp
 8002922:	000c      	movs	r4, r1
 8002924:	0309      	lsls	r1, r1, #12
 8002926:	b5e0      	push	{r5, r6, r7, lr}
 8002928:	0a49      	lsrs	r1, r1, #9
 800292a:	0f46      	lsrs	r6, r0, #29
 800292c:	005f      	lsls	r7, r3, #1
 800292e:	4331      	orrs	r1, r6
 8002930:	031e      	lsls	r6, r3, #12
 8002932:	0fdb      	lsrs	r3, r3, #31
 8002934:	0a76      	lsrs	r6, r6, #9
 8002936:	469b      	mov	fp, r3
 8002938:	0f53      	lsrs	r3, r2, #29
 800293a:	4333      	orrs	r3, r6
 800293c:	4ec8      	ldr	r6, [pc, #800]	; (8002c60 <__aeabi_dsub+0x348>)
 800293e:	0065      	lsls	r5, r4, #1
 8002940:	00c0      	lsls	r0, r0, #3
 8002942:	0fe4      	lsrs	r4, r4, #31
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	0d6d      	lsrs	r5, r5, #21
 8002948:	46a2      	mov	sl, r4
 800294a:	4681      	mov	r9, r0
 800294c:	0d7f      	lsrs	r7, r7, #21
 800294e:	469c      	mov	ip, r3
 8002950:	4690      	mov	r8, r2
 8002952:	42b7      	cmp	r7, r6
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x40>
 8002956:	e0b9      	b.n	8002acc <__aeabi_dsub+0x1b4>
 8002958:	465b      	mov	r3, fp
 800295a:	2601      	movs	r6, #1
 800295c:	4073      	eors	r3, r6
 800295e:	469b      	mov	fp, r3
 8002960:	1bee      	subs	r6, r5, r7
 8002962:	45a3      	cmp	fp, r4
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x50>
 8002966:	e083      	b.n	8002a70 <__aeabi_dsub+0x158>
 8002968:	2e00      	cmp	r6, #0
 800296a:	dd63      	ble.n	8002a34 <__aeabi_dsub+0x11c>
 800296c:	2f00      	cmp	r7, #0
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x5a>
 8002970:	e0b1      	b.n	8002ad6 <__aeabi_dsub+0x1be>
 8002972:	4663      	mov	r3, ip
 8002974:	4313      	orrs	r3, r2
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0x62>
 8002978:	e123      	b.n	8002bc2 <__aeabi_dsub+0x2aa>
 800297a:	1e73      	subs	r3, r6, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x6a>
 8002980:	e1ba      	b.n	8002cf8 <__aeabi_dsub+0x3e0>
 8002982:	1a86      	subs	r6, r0, r2
 8002984:	4663      	mov	r3, ip
 8002986:	42b0      	cmp	r0, r6
 8002988:	4180      	sbcs	r0, r0
 800298a:	2501      	movs	r5, #1
 800298c:	1ac9      	subs	r1, r1, r3
 800298e:	4240      	negs	r0, r0
 8002990:	1a09      	subs	r1, r1, r0
 8002992:	020b      	lsls	r3, r1, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x80>
 8002996:	e147      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	0a4b      	lsrs	r3, r1, #9
 800299c:	4698      	mov	r8, r3
 800299e:	4643      	mov	r3, r8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x8e>
 80029a4:	e189      	b.n	8002cba <__aeabi_dsub+0x3a2>
 80029a6:	4640      	mov	r0, r8
 80029a8:	f000 fc92 	bl	80032d0 <__clzsi2>
 80029ac:	0003      	movs	r3, r0
 80029ae:	3b08      	subs	r3, #8
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x9e>
 80029b4:	e17c      	b.n	8002cb0 <__aeabi_dsub+0x398>
 80029b6:	2220      	movs	r2, #32
 80029b8:	0030      	movs	r0, r6
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4641      	mov	r1, r8
 80029be:	40d0      	lsrs	r0, r2
 80029c0:	4099      	lsls	r1, r3
 80029c2:	0002      	movs	r2, r0
 80029c4:	409e      	lsls	r6, r3
 80029c6:	430a      	orrs	r2, r1
 80029c8:	429d      	cmp	r5, r3
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dsub+0xb6>
 80029cc:	e16a      	b.n	8002ca4 <__aeabi_dsub+0x38c>
 80029ce:	1b5d      	subs	r5, r3, r5
 80029d0:	1c6b      	adds	r3, r5, #1
 80029d2:	2b1f      	cmp	r3, #31
 80029d4:	dd00      	ble.n	80029d8 <__aeabi_dsub+0xc0>
 80029d6:	e194      	b.n	8002d02 <__aeabi_dsub+0x3ea>
 80029d8:	2120      	movs	r1, #32
 80029da:	0010      	movs	r0, r2
 80029dc:	0035      	movs	r5, r6
 80029de:	1ac9      	subs	r1, r1, r3
 80029e0:	408e      	lsls	r6, r1
 80029e2:	40da      	lsrs	r2, r3
 80029e4:	4088      	lsls	r0, r1
 80029e6:	40dd      	lsrs	r5, r3
 80029e8:	1e71      	subs	r1, r6, #1
 80029ea:	418e      	sbcs	r6, r1
 80029ec:	0011      	movs	r1, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	4328      	orrs	r0, r5
 80029f2:	2500      	movs	r5, #0
 80029f4:	4306      	orrs	r6, r0
 80029f6:	4032      	ands	r2, r6
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d009      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 80029fc:	230f      	movs	r3, #15
 80029fe:	4033      	ands	r3, r6
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 8002a04:	1d33      	adds	r3, r6, #4
 8002a06:	42b3      	cmp	r3, r6
 8002a08:	41b6      	sbcs	r6, r6
 8002a0a:	4276      	negs	r6, r6
 8002a0c:	1989      	adds	r1, r1, r6
 8002a0e:	001e      	movs	r6, r3
 8002a10:	020b      	lsls	r3, r1, #8
 8002a12:	d400      	bmi.n	8002a16 <__aeabi_dsub+0xfe>
 8002a14:	e23d      	b.n	8002e92 <__aeabi_dsub+0x57a>
 8002a16:	1c6a      	adds	r2, r5, #1
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a1a:	0555      	lsls	r5, r2, #21
 8002a1c:	0d6d      	lsrs	r5, r5, #21
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x10c>
 8002a22:	e119      	b.n	8002c58 <__aeabi_dsub+0x340>
 8002a24:	4a8f      	ldr	r2, [pc, #572]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002a26:	08f6      	lsrs	r6, r6, #3
 8002a28:	400a      	ands	r2, r1
 8002a2a:	0757      	lsls	r7, r2, #29
 8002a2c:	0252      	lsls	r2, r2, #9
 8002a2e:	4337      	orrs	r7, r6
 8002a30:	0b12      	lsrs	r2, r2, #12
 8002a32:	e09b      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d000      	beq.n	8002a3a <__aeabi_dsub+0x122>
 8002a38:	e0c5      	b.n	8002bc6 <__aeabi_dsub+0x2ae>
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	0576      	lsls	r6, r6, #21
 8002a3e:	0d76      	lsrs	r6, r6, #21
 8002a40:	2e01      	cmp	r6, #1
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dsub+0x12e>
 8002a44:	e148      	b.n	8002cd8 <__aeabi_dsub+0x3c0>
 8002a46:	4667      	mov	r7, ip
 8002a48:	1a86      	subs	r6, r0, r2
 8002a4a:	1bcb      	subs	r3, r1, r7
 8002a4c:	42b0      	cmp	r0, r6
 8002a4e:	41bf      	sbcs	r7, r7
 8002a50:	427f      	negs	r7, r7
 8002a52:	46b8      	mov	r8, r7
 8002a54:	001f      	movs	r7, r3
 8002a56:	4643      	mov	r3, r8
 8002a58:	1aff      	subs	r7, r7, r3
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	46b8      	mov	r8, r7
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	d500      	bpl.n	8002a64 <__aeabi_dsub+0x14c>
 8002a62:	e15f      	b.n	8002d24 <__aeabi_dsub+0x40c>
 8002a64:	4337      	orrs	r7, r6
 8002a66:	d19a      	bne.n	800299e <__aeabi_dsub+0x86>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	e079      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	dc00      	bgt.n	8002a76 <__aeabi_dsub+0x15e>
 8002a74:	e0fa      	b.n	8002c6c <__aeabi_dsub+0x354>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x164>
 8002a7a:	e08d      	b.n	8002b98 <__aeabi_dsub+0x280>
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	d067      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	4667      	mov	r7, ip
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431f      	orrs	r7, r3
 8002a8a:	46bc      	mov	ip, r7
 8002a8c:	2e38      	cmp	r6, #56	; 0x38
 8002a8e:	dc00      	bgt.n	8002a92 <__aeabi_dsub+0x17a>
 8002a90:	e152      	b.n	8002d38 <__aeabi_dsub+0x420>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	181e      	adds	r6, r3, r0
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4240      	negs	r0, r0
 8002aa2:	1809      	adds	r1, r1, r0
 8002aa4:	020b      	lsls	r3, r1, #8
 8002aa6:	d400      	bmi.n	8002aaa <__aeabi_dsub+0x192>
 8002aa8:	e0be      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <__aeabi_dsub+0x348>)
 8002aac:	3501      	adds	r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x19c>
 8002ab2:	e0d2      	b.n	8002c5a <__aeabi_dsub+0x342>
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002ab6:	0873      	lsrs	r3, r6, #1
 8002ab8:	400a      	ands	r2, r1
 8002aba:	2101      	movs	r1, #1
 8002abc:	400e      	ands	r6, r1
 8002abe:	431e      	orrs	r6, r3
 8002ac0:	0851      	lsrs	r1, r2, #1
 8002ac2:	07d3      	lsls	r3, r2, #31
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	4032      	ands	r2, r6
 8002aca:	e795      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002acc:	001e      	movs	r6, r3
 8002ace:	4316      	orrs	r6, r2
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x1bc>
 8002ad2:	e745      	b.n	8002960 <__aeabi_dsub+0x48>
 8002ad4:	e740      	b.n	8002958 <__aeabi_dsub+0x40>
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <__aeabi_dsub+0x348>)
 8002ad8:	429d      	cmp	r5, r3
 8002ada:	d03a      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	4667      	mov	r7, ip
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431f      	orrs	r7, r3
 8002ae4:	46bc      	mov	ip, r7
 8002ae6:	2e38      	cmp	r6, #56	; 0x38
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x1d4>
 8002aea:	e0eb      	b.n	8002cc4 <__aeabi_dsub+0x3ac>
 8002aec:	2e1f      	cmp	r6, #31
 8002aee:	dc00      	bgt.n	8002af2 <__aeabi_dsub+0x1da>
 8002af0:	e13a      	b.n	8002d68 <__aeabi_dsub+0x450>
 8002af2:	0033      	movs	r3, r6
 8002af4:	4667      	mov	r7, ip
 8002af6:	3b20      	subs	r3, #32
 8002af8:	40df      	lsrs	r7, r3
 8002afa:	003b      	movs	r3, r7
 8002afc:	2e20      	cmp	r6, #32
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dsub+0x1f4>
 8002b00:	2740      	movs	r7, #64	; 0x40
 8002b02:	1bbf      	subs	r7, r7, r6
 8002b04:	4666      	mov	r6, ip
 8002b06:	40be      	lsls	r6, r7
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4646      	mov	r6, r8
 8002b0e:	1e72      	subs	r2, r6, #1
 8002b10:	4196      	sbcs	r6, r2
 8002b12:	4333      	orrs	r3, r6
 8002b14:	e0da      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x204>
 8002b1a:	e214      	b.n	8002f46 <__aeabi_dsub+0x62e>
 8002b1c:	4663      	mov	r3, ip
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x20c>
 8002b22:	e168      	b.n	8002df6 <__aeabi_dsub+0x4de>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	074e      	lsls	r6, r1, #29
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	08c9      	lsrs	r1, r1, #3
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	4219      	tst	r1, r3
 8002b32:	d008      	beq.n	8002b46 <__aeabi_dsub+0x22e>
 8002b34:	4660      	mov	r0, ip
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	4218      	tst	r0, r3
 8002b3a:	d104      	bne.n	8002b46 <__aeabi_dsub+0x22e>
 8002b3c:	4663      	mov	r3, ip
 8002b3e:	0001      	movs	r1, r0
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	075e      	lsls	r6, r3, #29
 8002b44:	4316      	orrs	r6, r2
 8002b46:	00f3      	lsls	r3, r6, #3
 8002b48:	4699      	mov	r9, r3
 8002b4a:	00c9      	lsls	r1, r1, #3
 8002b4c:	0f72      	lsrs	r2, r6, #29
 8002b4e:	4d44      	ldr	r5, [pc, #272]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b50:	4311      	orrs	r1, r2
 8002b52:	464b      	mov	r3, r9
 8002b54:	08de      	lsrs	r6, r3, #3
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b58:	074f      	lsls	r7, r1, #29
 8002b5a:	4337      	orrs	r7, r6
 8002b5c:	08ca      	lsrs	r2, r1, #3
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x24c>
 8002b62:	e06e      	b.n	8002c42 <__aeabi_dsub+0x32a>
 8002b64:	0312      	lsls	r2, r2, #12
 8002b66:	056d      	lsls	r5, r5, #21
 8002b68:	0b12      	lsrs	r2, r2, #12
 8002b6a:	0d6d      	lsrs	r5, r5, #21
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0312      	lsls	r2, r2, #12
 8002b70:	0b13      	lsrs	r3, r2, #12
 8002b72:	0d0a      	lsrs	r2, r1, #20
 8002b74:	0512      	lsls	r2, r2, #20
 8002b76:	431a      	orrs	r2, r3
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <__aeabi_dsub+0x350>)
 8002b7a:	052d      	lsls	r5, r5, #20
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	432b      	orrs	r3, r5
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	07e4      	lsls	r4, r4, #31
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4323      	orrs	r3, r4
 8002b88:	0038      	movs	r0, r7
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bc3c      	pop	{r2, r3, r4, r5}
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	46ab      	mov	fp, r5
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b98:	4663      	mov	r3, ip
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d011      	beq.n	8002bc2 <__aeabi_dsub+0x2aa>
 8002b9e:	1e73      	subs	r3, r6, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x28e>
 8002ba4:	e107      	b.n	8002db6 <__aeabi_dsub+0x49e>
 8002ba6:	1886      	adds	r6, r0, r2
 8002ba8:	4286      	cmp	r6, r0
 8002baa:	4180      	sbcs	r0, r0
 8002bac:	4461      	add	r1, ip
 8002bae:	4240      	negs	r0, r0
 8002bb0:	1809      	adds	r1, r1, r0
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	020b      	lsls	r3, r1, #8
 8002bb6:	d537      	bpl.n	8002c28 <__aeabi_dsub+0x310>
 8002bb8:	2502      	movs	r5, #2
 8002bba:	e77b      	b.n	8002ab4 <__aeabi_dsub+0x19c>
 8002bbc:	003e      	movs	r6, r7
 8002bbe:	4661      	mov	r1, ip
 8002bc0:	4691      	mov	r9, r2
 8002bc2:	0035      	movs	r5, r6
 8002bc4:	e7c5      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002bc6:	465c      	mov	r4, fp
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d000      	beq.n	8002bce <__aeabi_dsub+0x2b6>
 8002bcc:	e0e1      	b.n	8002d92 <__aeabi_dsub+0x47a>
 8002bce:	000b      	movs	r3, r1
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	d0f3      	beq.n	8002bbc <__aeabi_dsub+0x2a4>
 8002bd4:	1c73      	adds	r3, r6, #1
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x2c2>
 8002bd8:	e1ac      	b.n	8002f34 <__aeabi_dsub+0x61c>
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <__aeabi_dsub+0x348>)
 8002bdc:	429f      	cmp	r7, r3
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x2ca>
 8002be0:	e13a      	b.n	8002e58 <__aeabi_dsub+0x540>
 8002be2:	43f3      	mvns	r3, r6
 8002be4:	2b38      	cmp	r3, #56	; 0x38
 8002be6:	dd00      	ble.n	8002bea <__aeabi_dsub+0x2d2>
 8002be8:	e16f      	b.n	8002eca <__aeabi_dsub+0x5b2>
 8002bea:	2b1f      	cmp	r3, #31
 8002bec:	dd00      	ble.n	8002bf0 <__aeabi_dsub+0x2d8>
 8002bee:	e18c      	b.n	8002f0a <__aeabi_dsub+0x5f2>
 8002bf0:	2520      	movs	r5, #32
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1aed      	subs	r5, r5, r3
 8002bf6:	40ae      	lsls	r6, r5
 8002bf8:	46b0      	mov	r8, r6
 8002bfa:	0006      	movs	r6, r0
 8002bfc:	46aa      	mov	sl, r5
 8002bfe:	40de      	lsrs	r6, r3
 8002c00:	4645      	mov	r5, r8
 8002c02:	4335      	orrs	r5, r6
 8002c04:	002e      	movs	r6, r5
 8002c06:	4655      	mov	r5, sl
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	40a8      	lsls	r0, r5
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	1e45      	subs	r5, r0, #1
 8002c10:	41a8      	sbcs	r0, r5
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	469c      	mov	ip, r3
 8002c16:	4330      	orrs	r0, r6
 8002c18:	1a16      	subs	r6, r2, r0
 8002c1a:	42b2      	cmp	r2, r6
 8002c1c:	4192      	sbcs	r2, r2
 8002c1e:	4663      	mov	r3, ip
 8002c20:	4252      	negs	r2, r2
 8002c22:	1a99      	subs	r1, r3, r2
 8002c24:	003d      	movs	r5, r7
 8002c26:	e6b4      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4032      	ands	r2, r6
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d000      	beq.n	8002c32 <__aeabi_dsub+0x31a>
 8002c30:	e6e4      	b.n	80029fc <__aeabi_dsub+0xe4>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c34:	08f6      	lsrs	r6, r6, #3
 8002c36:	074f      	lsls	r7, r1, #29
 8002c38:	4337      	orrs	r7, r6
 8002c3a:	08ca      	lsrs	r2, r1, #3
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x32a>
 8002c40:	e790      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002c42:	003b      	movs	r3, r7
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x332>
 8002c48:	e1a6      	b.n	8002f98 <__aeabi_dsub+0x680>
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	0312      	lsls	r2, r2, #12
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	4d02      	ldr	r5, [pc, #8]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c56:	e789      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c58:	0015      	movs	r5, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	e785      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c60:	000007ff 	.word	0x000007ff
 8002c64:	ff7fffff 	.word	0xff7fffff
 8002c68:	800fffff 	.word	0x800fffff
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d000      	beq.n	8002c72 <__aeabi_dsub+0x35a>
 8002c70:	e0c7      	b.n	8002e02 <__aeabi_dsub+0x4ea>
 8002c72:	1c6b      	adds	r3, r5, #1
 8002c74:	055e      	lsls	r6, r3, #21
 8002c76:	0d76      	lsrs	r6, r6, #21
 8002c78:	2e01      	cmp	r6, #1
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x366>
 8002c7c:	e0f0      	b.n	8002e60 <__aeabi_dsub+0x548>
 8002c7e:	4dc8      	ldr	r5, [pc, #800]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x36e>
 8002c84:	e0b9      	b.n	8002dfa <__aeabi_dsub+0x4e2>
 8002c86:	1885      	adds	r5, r0, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	4285      	cmp	r5, r0
 8002c8c:	4189      	sbcs	r1, r1
 8002c8e:	4462      	add	r2, ip
 8002c90:	4249      	negs	r1, r1
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	2207      	movs	r2, #7
 8002c96:	07ce      	lsls	r6, r1, #31
 8002c98:	086d      	lsrs	r5, r5, #1
 8002c9a:	432e      	orrs	r6, r5
 8002c9c:	0849      	lsrs	r1, r1, #1
 8002c9e:	4032      	ands	r2, r6
 8002ca0:	001d      	movs	r5, r3
 8002ca2:	e6a9      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002ca4:	49bf      	ldr	r1, [pc, #764]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002ca6:	1aed      	subs	r5, r5, r3
 8002ca8:	4011      	ands	r1, r2
 8002caa:	2207      	movs	r2, #7
 8002cac:	4032      	ands	r2, r6
 8002cae:	e6a3      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002cb0:	0032      	movs	r2, r6
 8002cb2:	3828      	subs	r0, #40	; 0x28
 8002cb4:	4082      	lsls	r2, r0
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	e686      	b.n	80029c8 <__aeabi_dsub+0xb0>
 8002cba:	0030      	movs	r0, r6
 8002cbc:	f000 fb08 	bl	80032d0 <__clzsi2>
 8002cc0:	3020      	adds	r0, #32
 8002cc2:	e673      	b.n	80029ac <__aeabi_dsub+0x94>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	4193      	sbcs	r3, r2
 8002ccc:	1ac6      	subs	r6, r0, r3
 8002cce:	42b0      	cmp	r0, r6
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	1a09      	subs	r1, r1, r0
 8002cd6:	e65c      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002cd8:	000e      	movs	r6, r1
 8002cda:	4667      	mov	r7, ip
 8002cdc:	4306      	orrs	r6, r0
 8002cde:	4317      	orrs	r7, r2
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d15e      	bne.n	8002da2 <__aeabi_dsub+0x48a>
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d000      	beq.n	8002cea <__aeabi_dsub+0x3d2>
 8002ce8:	e0f3      	b.n	8002ed2 <__aeabi_dsub+0x5ba>
 8002cea:	2f00      	cmp	r7, #0
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x3d8>
 8002cee:	e11e      	b.n	8002f2e <__aeabi_dsub+0x616>
 8002cf0:	465c      	mov	r4, fp
 8002cf2:	4661      	mov	r1, ip
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	e72c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002cf8:	4fa9      	ldr	r7, [pc, #676]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002cfa:	42be      	cmp	r6, r7
 8002cfc:	d07b      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002cfe:	001e      	movs	r6, r3
 8002d00:	e6f1      	b.n	8002ae6 <__aeabi_dsub+0x1ce>
 8002d02:	0010      	movs	r0, r2
 8002d04:	3d1f      	subs	r5, #31
 8002d06:	40e8      	lsrs	r0, r5
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <__aeabi_dsub+0x3fc>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	409a      	lsls	r2, r3
 8002d12:	4316      	orrs	r6, r2
 8002d14:	1e73      	subs	r3, r6, #1
 8002d16:	419e      	sbcs	r6, r3
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4306      	orrs	r6, r0
 8002d1c:	4032      	ands	r2, r6
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2500      	movs	r5, #0
 8002d22:	e783      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002d24:	1a16      	subs	r6, r2, r0
 8002d26:	4663      	mov	r3, ip
 8002d28:	42b2      	cmp	r2, r6
 8002d2a:	4180      	sbcs	r0, r0
 8002d2c:	1a59      	subs	r1, r3, r1
 8002d2e:	4240      	negs	r0, r0
 8002d30:	1a0b      	subs	r3, r1, r0
 8002d32:	4698      	mov	r8, r3
 8002d34:	465c      	mov	r4, fp
 8002d36:	e632      	b.n	800299e <__aeabi_dsub+0x86>
 8002d38:	2e1f      	cmp	r6, #31
 8002d3a:	dd00      	ble.n	8002d3e <__aeabi_dsub+0x426>
 8002d3c:	e0ab      	b.n	8002e96 <__aeabi_dsub+0x57e>
 8002d3e:	2720      	movs	r7, #32
 8002d40:	1bbb      	subs	r3, r7, r6
 8002d42:	469a      	mov	sl, r3
 8002d44:	4663      	mov	r3, ip
 8002d46:	4657      	mov	r7, sl
 8002d48:	40bb      	lsls	r3, r7
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	464f      	mov	r7, r9
 8002d50:	40f3      	lsrs	r3, r6
 8002d52:	431f      	orrs	r7, r3
 8002d54:	003b      	movs	r3, r7
 8002d56:	4657      	mov	r7, sl
 8002d58:	40ba      	lsls	r2, r7
 8002d5a:	1e57      	subs	r7, r2, #1
 8002d5c:	41ba      	sbcs	r2, r7
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4662      	mov	r2, ip
 8002d62:	40f2      	lsrs	r2, r6
 8002d64:	1889      	adds	r1, r1, r2
 8002d66:	e698      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002d68:	2720      	movs	r7, #32
 8002d6a:	1bbb      	subs	r3, r7, r6
 8002d6c:	469a      	mov	sl, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	4657      	mov	r7, sl
 8002d72:	40bb      	lsls	r3, r7
 8002d74:	4699      	mov	r9, r3
 8002d76:	0013      	movs	r3, r2
 8002d78:	464f      	mov	r7, r9
 8002d7a:	40f3      	lsrs	r3, r6
 8002d7c:	431f      	orrs	r7, r3
 8002d7e:	003b      	movs	r3, r7
 8002d80:	4657      	mov	r7, sl
 8002d82:	40ba      	lsls	r2, r7
 8002d84:	1e57      	subs	r7, r2, #1
 8002d86:	41ba      	sbcs	r2, r7
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40f2      	lsrs	r2, r6
 8002d8e:	1a89      	subs	r1, r1, r2
 8002d90:	e79c      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d05f      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002d98:	2580      	movs	r5, #128	; 0x80
 8002d9a:	042d      	lsls	r5, r5, #16
 8002d9c:	4273      	negs	r3, r6
 8002d9e:	4329      	orrs	r1, r5
 8002da0:	e720      	b.n	8002be4 <__aeabi_dsub+0x2cc>
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d10c      	bne.n	8002dc0 <__aeabi_dsub+0x4a8>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x494>
 8002daa:	e0d0      	b.n	8002f4e <__aeabi_dsub+0x636>
 8002dac:	465c      	mov	r4, fp
 8002dae:	4661      	mov	r1, ip
 8002db0:	4691      	mov	r9, r2
 8002db2:	4d7b      	ldr	r5, [pc, #492]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db4:	e6cd      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002db6:	4f7a      	ldr	r7, [pc, #488]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db8:	42be      	cmp	r6, r7
 8002dba:	d01c      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dbc:	001e      	movs	r6, r3
 8002dbe:	e665      	b.n	8002a8c <__aeabi_dsub+0x174>
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	d018      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dc4:	08c0      	lsrs	r0, r0, #3
 8002dc6:	074e      	lsls	r6, r1, #29
 8002dc8:	4306      	orrs	r6, r0
 8002dca:	2080      	movs	r0, #128	; 0x80
 8002dcc:	08c9      	lsrs	r1, r1, #3
 8002dce:	0300      	lsls	r0, r0, #12
 8002dd0:	4201      	tst	r1, r0
 8002dd2:	d008      	beq.n	8002de6 <__aeabi_dsub+0x4ce>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	08dc      	lsrs	r4, r3, #3
 8002dd8:	4204      	tst	r4, r0
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x4ce>
 8002ddc:	0021      	movs	r1, r4
 8002dde:	46da      	mov	sl, fp
 8002de0:	08d2      	lsrs	r2, r2, #3
 8002de2:	075e      	lsls	r6, r3, #29
 8002de4:	4316      	orrs	r6, r2
 8002de6:	00f3      	lsls	r3, r6, #3
 8002de8:	4699      	mov	r9, r3
 8002dea:	2401      	movs	r4, #1
 8002dec:	4653      	mov	r3, sl
 8002dee:	00c9      	lsls	r1, r1, #3
 8002df0:	0f72      	lsrs	r2, r6, #29
 8002df2:	4311      	orrs	r1, r2
 8002df4:	401c      	ands	r4, r3
 8002df6:	4d6a      	ldr	r5, [pc, #424]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002df8:	e6ab      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002dfa:	001d      	movs	r5, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e6b4      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	d159      	bne.n	8002eba <__aeabi_dsub+0x5a2>
 8002e06:	000b      	movs	r3, r1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x4f6>
 8002e0c:	e6d6      	b.n	8002bbc <__aeabi_dsub+0x2a4>
 8002e0e:	1c73      	adds	r3, r6, #1
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x4fc>
 8002e12:	e0b2      	b.n	8002f7a <__aeabi_dsub+0x662>
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002e16:	429f      	cmp	r7, r3
 8002e18:	d01e      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002e1a:	43f3      	mvns	r3, r6
 8002e1c:	2b38      	cmp	r3, #56	; 0x38
 8002e1e:	dc6f      	bgt.n	8002f00 <__aeabi_dsub+0x5e8>
 8002e20:	2b1f      	cmp	r3, #31
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x50e>
 8002e24:	e097      	b.n	8002f56 <__aeabi_dsub+0x63e>
 8002e26:	2520      	movs	r5, #32
 8002e28:	000e      	movs	r6, r1
 8002e2a:	1aed      	subs	r5, r5, r3
 8002e2c:	40ae      	lsls	r6, r5
 8002e2e:	46b0      	mov	r8, r6
 8002e30:	0006      	movs	r6, r0
 8002e32:	46aa      	mov	sl, r5
 8002e34:	40de      	lsrs	r6, r3
 8002e36:	4645      	mov	r5, r8
 8002e38:	4335      	orrs	r5, r6
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	4655      	mov	r5, sl
 8002e3e:	40a8      	lsls	r0, r5
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	1e45      	subs	r5, r0, #1
 8002e44:	41a8      	sbcs	r0, r5
 8002e46:	448c      	add	ip, r1
 8002e48:	4306      	orrs	r6, r0
 8002e4a:	18b6      	adds	r6, r6, r2
 8002e4c:	4296      	cmp	r6, r2
 8002e4e:	4192      	sbcs	r2, r2
 8002e50:	4251      	negs	r1, r2
 8002e52:	4461      	add	r1, ip
 8002e54:	003d      	movs	r5, r7
 8002e56:	e625      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002e58:	003d      	movs	r5, r7
 8002e5a:	4661      	mov	r1, ip
 8002e5c:	4691      	mov	r9, r2
 8002e5e:	e678      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e60:	000b      	movs	r3, r1
 8002e62:	4303      	orrs	r3, r0
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x552>
 8002e68:	e655      	b.n	8002b16 <__aeabi_dsub+0x1fe>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f5      	beq.n	8002e5a <__aeabi_dsub+0x542>
 8002e6e:	4663      	mov	r3, ip
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x55e>
 8002e74:	e66d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e76:	1886      	adds	r6, r0, r2
 8002e78:	4286      	cmp	r6, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	4461      	add	r1, ip
 8002e7e:	4240      	negs	r0, r0
 8002e80:	1809      	adds	r1, r1, r0
 8002e82:	2200      	movs	r2, #0
 8002e84:	020b      	lsls	r3, r1, #8
 8002e86:	d400      	bmi.n	8002e8a <__aeabi_dsub+0x572>
 8002e88:	e6d0      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	4019      	ands	r1, r3
 8002e90:	e5b2      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002e92:	46b1      	mov	r9, r6
 8002e94:	e65d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e96:	0033      	movs	r3, r6
 8002e98:	4667      	mov	r7, ip
 8002e9a:	3b20      	subs	r3, #32
 8002e9c:	40df      	lsrs	r7, r3
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2e20      	cmp	r6, #32
 8002ea2:	d005      	beq.n	8002eb0 <__aeabi_dsub+0x598>
 8002ea4:	2740      	movs	r7, #64	; 0x40
 8002ea6:	1bbf      	subs	r7, r7, r6
 8002ea8:	4666      	mov	r6, ip
 8002eaa:	40be      	lsls	r6, r7
 8002eac:	4332      	orrs	r2, r6
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4646      	mov	r6, r8
 8002eb2:	1e72      	subs	r2, r6, #1
 8002eb4:	4196      	sbcs	r6, r2
 8002eb6:	4333      	orrs	r3, r6
 8002eb8:	e5ef      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002ebc:	429f      	cmp	r7, r3
 8002ebe:	d0cb      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002ec0:	2580      	movs	r5, #128	; 0x80
 8002ec2:	042d      	lsls	r5, r5, #16
 8002ec4:	4273      	negs	r3, r6
 8002ec6:	4329      	orrs	r1, r5
 8002ec8:	e7a8      	b.n	8002e1c <__aeabi_dsub+0x504>
 8002eca:	4308      	orrs	r0, r1
 8002ecc:	1e41      	subs	r1, r0, #1
 8002ece:	4188      	sbcs	r0, r1
 8002ed0:	e6a2      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x5c0>
 8002ed6:	e63c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a86      	subs	r6, r0, r2
 8002edc:	1acf      	subs	r7, r1, r3
 8002ede:	42b0      	cmp	r0, r6
 8002ee0:	419b      	sbcs	r3, r3
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	1afb      	subs	r3, r7, r3
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	d54e      	bpl.n	8002f8a <__aeabi_dsub+0x672>
 8002eec:	1a16      	subs	r6, r2, r0
 8002eee:	4663      	mov	r3, ip
 8002ef0:	42b2      	cmp	r2, r6
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	1a59      	subs	r1, r3, r1
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	1a89      	subs	r1, r1, r2
 8002efa:	465c      	mov	r4, fp
 8002efc:	2200      	movs	r2, #0
 8002efe:	e57b      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002f00:	4301      	orrs	r1, r0
 8002f02:	000e      	movs	r6, r1
 8002f04:	1e71      	subs	r1, r6, #1
 8002f06:	418e      	sbcs	r6, r1
 8002f08:	e79f      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f0a:	001d      	movs	r5, r3
 8002f0c:	000e      	movs	r6, r1
 8002f0e:	3d20      	subs	r5, #32
 8002f10:	40ee      	lsrs	r6, r5
 8002f12:	46b0      	mov	r8, r6
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d004      	beq.n	8002f22 <__aeabi_dsub+0x60a>
 8002f18:	2540      	movs	r5, #64	; 0x40
 8002f1a:	1aeb      	subs	r3, r5, r3
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	4308      	orrs	r0, r1
 8002f20:	4681      	mov	r9, r0
 8002f22:	4648      	mov	r0, r9
 8002f24:	4643      	mov	r3, r8
 8002f26:	1e41      	subs	r1, r0, #1
 8002f28:	4188      	sbcs	r0, r1
 8002f2a:	4318      	orrs	r0, r3
 8002f2c:	e674      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2400      	movs	r4, #0
 8002f32:	e617      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002f34:	1a16      	subs	r6, r2, r0
 8002f36:	4663      	mov	r3, ip
 8002f38:	42b2      	cmp	r2, r6
 8002f3a:	4192      	sbcs	r2, r2
 8002f3c:	1a59      	subs	r1, r3, r1
 8002f3e:	4252      	negs	r2, r2
 8002f40:	1a89      	subs	r1, r1, r2
 8002f42:	003d      	movs	r5, r7
 8002f44:	e525      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002f46:	4661      	mov	r1, ip
 8002f48:	4691      	mov	r9, r2
 8002f4a:	4d15      	ldr	r5, [pc, #84]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002f4c:	e601      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	2400      	movs	r4, #0
 8002f52:	0312      	lsls	r2, r2, #12
 8002f54:	e679      	b.n	8002c4a <__aeabi_dsub+0x332>
 8002f56:	001d      	movs	r5, r3
 8002f58:	000e      	movs	r6, r1
 8002f5a:	3d20      	subs	r5, #32
 8002f5c:	40ee      	lsrs	r6, r5
 8002f5e:	46b0      	mov	r8, r6
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x656>
 8002f64:	2540      	movs	r5, #64	; 0x40
 8002f66:	1aeb      	subs	r3, r5, r3
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	4308      	orrs	r0, r1
 8002f6c:	4681      	mov	r9, r0
 8002f6e:	464e      	mov	r6, r9
 8002f70:	4643      	mov	r3, r8
 8002f72:	1e71      	subs	r1, r6, #1
 8002f74:	418e      	sbcs	r6, r1
 8002f76:	431e      	orrs	r6, r3
 8002f78:	e767      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f7a:	1886      	adds	r6, r0, r2
 8002f7c:	4296      	cmp	r6, r2
 8002f7e:	419b      	sbcs	r3, r3
 8002f80:	4461      	add	r1, ip
 8002f82:	425b      	negs	r3, r3
 8002f84:	18c9      	adds	r1, r1, r3
 8002f86:	003d      	movs	r5, r7
 8002f88:	e58c      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002f8a:	4647      	mov	r7, r8
 8002f8c:	4337      	orrs	r7, r6
 8002f8e:	d0ce      	beq.n	8002f2e <__aeabi_dsub+0x616>
 8002f90:	2207      	movs	r2, #7
 8002f92:	4641      	mov	r1, r8
 8002f94:	4032      	ands	r2, r6
 8002f96:	e649      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002f98:	2700      	movs	r7, #0
 8002f9a:	003a      	movs	r2, r7
 8002f9c:	e5e6      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff
 8002fa4:	ff7fffff 	.word	0xff7fffff

08002fa8 <__aeabi_dcmpun>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0c      	ldr	r6, [pc, #48]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fac:	030d      	lsls	r5, r1, #12
 8002fae:	031c      	lsls	r4, r3, #12
 8002fb0:	0049      	lsls	r1, r1, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	0b2d      	lsrs	r5, r5, #12
 8002fb6:	0d49      	lsrs	r1, r1, #21
 8002fb8:	0b24      	lsrs	r4, r4, #12
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	42b1      	cmp	r1, r6
 8002fbe:	d008      	beq.n	8002fd2 <__aeabi_dcmpun+0x2a>
 8002fc0:	4906      	ldr	r1, [pc, #24]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d103      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fc8:	4314      	orrs	r4, r2
 8002fca:	0020      	movs	r0, r4
 8002fcc:	1e44      	subs	r4, r0, #1
 8002fce:	41a0      	sbcs	r0, r4
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d1fa      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fda:	e7f1      	b.n	8002fc0 <__aeabi_dcmpun+0x18>
 8002fdc:	000007ff 	.word	0x000007ff

08002fe0 <__aeabi_d2iz>:
 8002fe0:	b530      	push	{r4, r5, lr}
 8002fe2:	4d14      	ldr	r5, [pc, #80]	; (8003034 <__aeabi_d2iz+0x54>)
 8002fe4:	030a      	lsls	r2, r1, #12
 8002fe6:	004b      	lsls	r3, r1, #1
 8002fe8:	0b12      	lsrs	r2, r2, #12
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	0fc9      	lsrs	r1, r1, #31
 8002fee:	2400      	movs	r4, #0
 8002ff0:	42ab      	cmp	r3, r5
 8002ff2:	dd11      	ble.n	8003018 <__aeabi_d2iz+0x38>
 8002ff4:	4c10      	ldr	r4, [pc, #64]	; (8003038 <__aeabi_d2iz+0x58>)
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	dc10      	bgt.n	800301c <__aeabi_d2iz+0x3c>
 8002ffa:	2480      	movs	r4, #128	; 0x80
 8002ffc:	0364      	lsls	r4, r4, #13
 8002ffe:	4322      	orrs	r2, r4
 8003000:	4c0e      	ldr	r4, [pc, #56]	; (800303c <__aeabi_d2iz+0x5c>)
 8003002:	1ae4      	subs	r4, r4, r3
 8003004:	2c1f      	cmp	r4, #31
 8003006:	dd0c      	ble.n	8003022 <__aeabi_d2iz+0x42>
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <__aeabi_d2iz+0x60>)
 800300a:	1ac3      	subs	r3, r0, r3
 800300c:	40da      	lsrs	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	425c      	negs	r4, r3
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_d2iz+0x38>
 8003016:	001c      	movs	r4, r3
 8003018:	0020      	movs	r0, r4
 800301a:	bd30      	pop	{r4, r5, pc}
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <__aeabi_d2iz+0x64>)
 800301e:	18cc      	adds	r4, r1, r3
 8003020:	e7fa      	b.n	8003018 <__aeabi_d2iz+0x38>
 8003022:	4d09      	ldr	r5, [pc, #36]	; (8003048 <__aeabi_d2iz+0x68>)
 8003024:	40e0      	lsrs	r0, r4
 8003026:	46ac      	mov	ip, r5
 8003028:	4463      	add	r3, ip
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	4303      	orrs	r3, r0
 8003030:	e7ee      	b.n	8003010 <__aeabi_d2iz+0x30>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	000003fe 	.word	0x000003fe
 8003038:	0000041d 	.word	0x0000041d
 800303c:	00000433 	.word	0x00000433
 8003040:	00000413 	.word	0x00000413
 8003044:	7fffffff 	.word	0x7fffffff
 8003048:	fffffbed 	.word	0xfffffbed

0800304c <__aeabi_i2d>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2800      	cmp	r0, #0
 8003050:	d02d      	beq.n	80030ae <__aeabi_i2d+0x62>
 8003052:	17c3      	asrs	r3, r0, #31
 8003054:	18c5      	adds	r5, r0, r3
 8003056:	405d      	eors	r5, r3
 8003058:	0fc4      	lsrs	r4, r0, #31
 800305a:	0028      	movs	r0, r5
 800305c:	f000 f938 	bl	80032d0 <__clzsi2>
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <__aeabi_i2d+0x6c>)
 8003062:	1a1b      	subs	r3, r3, r0
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	280a      	cmp	r0, #10
 800306a:	dd15      	ble.n	8003098 <__aeabi_i2d+0x4c>
 800306c:	380b      	subs	r0, #11
 800306e:	4085      	lsls	r5, r0
 8003070:	2200      	movs	r2, #0
 8003072:	032d      	lsls	r5, r5, #12
 8003074:	0b2d      	lsrs	r5, r5, #12
 8003076:	2100      	movs	r1, #0
 8003078:	0010      	movs	r0, r2
 800307a:	032d      	lsls	r5, r5, #12
 800307c:	0d0a      	lsrs	r2, r1, #20
 800307e:	0b2d      	lsrs	r5, r5, #12
 8003080:	0512      	lsls	r2, r2, #20
 8003082:	432a      	orrs	r2, r5
 8003084:	4d0d      	ldr	r5, [pc, #52]	; (80030bc <__aeabi_i2d+0x70>)
 8003086:	051b      	lsls	r3, r3, #20
 8003088:	402a      	ands	r2, r5
 800308a:	4313      	orrs	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	07e4      	lsls	r4, r4, #31
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	4323      	orrs	r3, r4
 8003094:	0019      	movs	r1, r3
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0002      	movs	r2, r0
 800309a:	0029      	movs	r1, r5
 800309c:	3215      	adds	r2, #21
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	210b      	movs	r1, #11
 80030a4:	1a08      	subs	r0, r1, r0
 80030a6:	40c5      	lsrs	r5, r0
 80030a8:	032d      	lsls	r5, r5, #12
 80030aa:	0b2d      	lsrs	r5, r5, #12
 80030ac:	e7e3      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030ae:	2400      	movs	r4, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	2500      	movs	r5, #0
 80030b4:	2200      	movs	r2, #0
 80030b6:	e7de      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030b8:	0000041e 	.word	0x0000041e
 80030bc:	800fffff 	.word	0x800fffff

080030c0 <__aeabi_ui2d>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	1e04      	subs	r4, r0, #0
 80030c4:	d025      	beq.n	8003112 <__aeabi_ui2d+0x52>
 80030c6:	f000 f903 	bl	80032d0 <__clzsi2>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <__aeabi_ui2d+0x5c>)
 80030cc:	1a1b      	subs	r3, r3, r0
 80030ce:	055b      	lsls	r3, r3, #21
 80030d0:	0d5b      	lsrs	r3, r3, #21
 80030d2:	280a      	cmp	r0, #10
 80030d4:	dd12      	ble.n	80030fc <__aeabi_ui2d+0x3c>
 80030d6:	380b      	subs	r0, #11
 80030d8:	4084      	lsls	r4, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	0324      	lsls	r4, r4, #12
 80030de:	0b24      	lsrs	r4, r4, #12
 80030e0:	2100      	movs	r1, #0
 80030e2:	0010      	movs	r0, r2
 80030e4:	0324      	lsls	r4, r4, #12
 80030e6:	0d0a      	lsrs	r2, r1, #20
 80030e8:	0b24      	lsrs	r4, r4, #12
 80030ea:	0512      	lsls	r2, r2, #20
 80030ec:	4322      	orrs	r2, r4
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__aeabi_ui2d+0x60>)
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	4022      	ands	r2, r4
 80030f4:	4313      	orrs	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	0859      	lsrs	r1, r3, #1
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	0002      	movs	r2, r0
 80030fe:	0021      	movs	r1, r4
 8003100:	3215      	adds	r2, #21
 8003102:	4091      	lsls	r1, r2
 8003104:	000a      	movs	r2, r1
 8003106:	210b      	movs	r1, #11
 8003108:	1a08      	subs	r0, r1, r0
 800310a:	40c4      	lsrs	r4, r0
 800310c:	0324      	lsls	r4, r4, #12
 800310e:	0b24      	lsrs	r4, r4, #12
 8003110:	e7e6      	b.n	80030e0 <__aeabi_ui2d+0x20>
 8003112:	2300      	movs	r3, #0
 8003114:	2400      	movs	r4, #0
 8003116:	2200      	movs	r2, #0
 8003118:	e7e2      	b.n	80030e0 <__aeabi_ui2d+0x20>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	0000041e 	.word	0x0000041e
 8003120:	800fffff 	.word	0x800fffff

08003124 <__aeabi_f2d>:
 8003124:	0041      	lsls	r1, r0, #1
 8003126:	0e09      	lsrs	r1, r1, #24
 8003128:	1c4b      	adds	r3, r1, #1
 800312a:	b570      	push	{r4, r5, r6, lr}
 800312c:	b2db      	uxtb	r3, r3
 800312e:	0246      	lsls	r6, r0, #9
 8003130:	0a75      	lsrs	r5, r6, #9
 8003132:	0fc4      	lsrs	r4, r0, #31
 8003134:	2b01      	cmp	r3, #1
 8003136:	dd14      	ble.n	8003162 <__aeabi_f2d+0x3e>
 8003138:	23e0      	movs	r3, #224	; 0xe0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	076d      	lsls	r5, r5, #29
 800313e:	0b36      	lsrs	r6, r6, #12
 8003140:	18cb      	adds	r3, r1, r3
 8003142:	2100      	movs	r1, #0
 8003144:	0d0a      	lsrs	r2, r1, #20
 8003146:	0028      	movs	r0, r5
 8003148:	0512      	lsls	r2, r2, #20
 800314a:	4d1c      	ldr	r5, [pc, #112]	; (80031bc <__aeabi_f2d+0x98>)
 800314c:	4332      	orrs	r2, r6
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	402a      	ands	r2, r5
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	4313      	orrs	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	07e4      	lsls	r4, r4, #31
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	4323      	orrs	r3, r4
 800315e:	0019      	movs	r1, r3
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	2900      	cmp	r1, #0
 8003164:	d114      	bne.n	8003190 <__aeabi_f2d+0x6c>
 8003166:	2d00      	cmp	r5, #0
 8003168:	d01e      	beq.n	80031a8 <__aeabi_f2d+0x84>
 800316a:	0028      	movs	r0, r5
 800316c:	f000 f8b0 	bl	80032d0 <__clzsi2>
 8003170:	280a      	cmp	r0, #10
 8003172:	dc1c      	bgt.n	80031ae <__aeabi_f2d+0x8a>
 8003174:	230b      	movs	r3, #11
 8003176:	002a      	movs	r2, r5
 8003178:	1a1b      	subs	r3, r3, r0
 800317a:	40da      	lsrs	r2, r3
 800317c:	0003      	movs	r3, r0
 800317e:	3315      	adds	r3, #21
 8003180:	409d      	lsls	r5, r3
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <__aeabi_f2d+0x9c>)
 8003184:	0312      	lsls	r2, r2, #12
 8003186:	1a1b      	subs	r3, r3, r0
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	0b16      	lsrs	r6, r2, #12
 800318c:	0d5b      	lsrs	r3, r3, #21
 800318e:	e7d8      	b.n	8003142 <__aeabi_f2d+0x1e>
 8003190:	2d00      	cmp	r5, #0
 8003192:	d006      	beq.n	80031a2 <__aeabi_f2d+0x7e>
 8003194:	0b32      	lsrs	r2, r6, #12
 8003196:	2680      	movs	r6, #128	; 0x80
 8003198:	0336      	lsls	r6, r6, #12
 800319a:	076d      	lsls	r5, r5, #29
 800319c:	4316      	orrs	r6, r2
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a0:	e7cf      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a4:	2600      	movs	r6, #0
 80031a6:	e7cc      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2600      	movs	r6, #0
 80031ac:	e7c9      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031ae:	0003      	movs	r3, r0
 80031b0:	002a      	movs	r2, r5
 80031b2:	3b0b      	subs	r3, #11
 80031b4:	409a      	lsls	r2, r3
 80031b6:	2500      	movs	r5, #0
 80031b8:	e7e3      	b.n	8003182 <__aeabi_f2d+0x5e>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	800fffff 	.word	0x800fffff
 80031c0:	00000389 	.word	0x00000389
 80031c4:	000007ff 	.word	0x000007ff

080031c8 <__aeabi_d2f>:
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	004c      	lsls	r4, r1, #1
 80031cc:	0d64      	lsrs	r4, r4, #21
 80031ce:	030b      	lsls	r3, r1, #12
 80031d0:	1c62      	adds	r2, r4, #1
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	0f46      	lsrs	r6, r0, #29
 80031d6:	0552      	lsls	r2, r2, #21
 80031d8:	0fc9      	lsrs	r1, r1, #31
 80031da:	431e      	orrs	r6, r3
 80031dc:	00c5      	lsls	r5, r0, #3
 80031de:	0d52      	lsrs	r2, r2, #21
 80031e0:	2a01      	cmp	r2, #1
 80031e2:	dd29      	ble.n	8003238 <__aeabi_d2f+0x70>
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <__aeabi_d2f+0xfc>)
 80031e6:	18e7      	adds	r7, r4, r3
 80031e8:	2ffe      	cmp	r7, #254	; 0xfe
 80031ea:	dc1c      	bgt.n	8003226 <__aeabi_d2f+0x5e>
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	dd3b      	ble.n	8003268 <__aeabi_d2f+0xa0>
 80031f0:	0180      	lsls	r0, r0, #6
 80031f2:	1e43      	subs	r3, r0, #1
 80031f4:	4198      	sbcs	r0, r3
 80031f6:	2207      	movs	r2, #7
 80031f8:	00f3      	lsls	r3, r6, #3
 80031fa:	0f6d      	lsrs	r5, r5, #29
 80031fc:	4303      	orrs	r3, r0
 80031fe:	432b      	orrs	r3, r5
 8003200:	401a      	ands	r2, r3
 8003202:	2a00      	cmp	r2, #0
 8003204:	d004      	beq.n	8003210 <__aeabi_d2f+0x48>
 8003206:	220f      	movs	r2, #15
 8003208:	401a      	ands	r2, r3
 800320a:	2a04      	cmp	r2, #4
 800320c:	d000      	beq.n	8003210 <__aeabi_d2f+0x48>
 800320e:	3304      	adds	r3, #4
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	04d2      	lsls	r2, r2, #19
 8003214:	401a      	ands	r2, r3
 8003216:	d024      	beq.n	8003262 <__aeabi_d2f+0x9a>
 8003218:	3701      	adds	r7, #1
 800321a:	b2fa      	uxtb	r2, r7
 800321c:	2fff      	cmp	r7, #255	; 0xff
 800321e:	d002      	beq.n	8003226 <__aeabi_d2f+0x5e>
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	0a58      	lsrs	r0, r3, #9
 8003224:	e001      	b.n	800322a <__aeabi_d2f+0x62>
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	2000      	movs	r0, #0
 800322a:	0240      	lsls	r0, r0, #9
 800322c:	05d2      	lsls	r2, r2, #23
 800322e:	0a40      	lsrs	r0, r0, #9
 8003230:	07c9      	lsls	r1, r1, #31
 8003232:	4310      	orrs	r0, r2
 8003234:	4308      	orrs	r0, r1
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003238:	4335      	orrs	r5, r6
 800323a:	2c00      	cmp	r4, #0
 800323c:	d104      	bne.n	8003248 <__aeabi_d2f+0x80>
 800323e:	2d00      	cmp	r5, #0
 8003240:	d10a      	bne.n	8003258 <__aeabi_d2f+0x90>
 8003242:	2200      	movs	r2, #0
 8003244:	2000      	movs	r0, #0
 8003246:	e7f0      	b.n	800322a <__aeabi_d2f+0x62>
 8003248:	2d00      	cmp	r5, #0
 800324a:	d0ec      	beq.n	8003226 <__aeabi_d2f+0x5e>
 800324c:	2080      	movs	r0, #128	; 0x80
 800324e:	03c0      	lsls	r0, r0, #15
 8003250:	4330      	orrs	r0, r6
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	e7e9      	b.n	800322a <__aeabi_d2f+0x62>
 8003256:	2400      	movs	r4, #0
 8003258:	2300      	movs	r3, #0
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	0a58      	lsrs	r0, r3, #9
 800325e:	b2e2      	uxtb	r2, r4
 8003260:	e7e3      	b.n	800322a <__aeabi_d2f+0x62>
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	003c      	movs	r4, r7
 8003266:	e7f8      	b.n	800325a <__aeabi_d2f+0x92>
 8003268:	003b      	movs	r3, r7
 800326a:	3317      	adds	r3, #23
 800326c:	dbf3      	blt.n	8003256 <__aeabi_d2f+0x8e>
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4333      	orrs	r3, r6
 8003274:	261e      	movs	r6, #30
 8003276:	1bf6      	subs	r6, r6, r7
 8003278:	2e1f      	cmp	r6, #31
 800327a:	dd14      	ble.n	80032a6 <__aeabi_d2f+0xde>
 800327c:	2202      	movs	r2, #2
 800327e:	4252      	negs	r2, r2
 8003280:	1bd7      	subs	r7, r2, r7
 8003282:	001a      	movs	r2, r3
 8003284:	40fa      	lsrs	r2, r7
 8003286:	0017      	movs	r7, r2
 8003288:	2e20      	cmp	r6, #32
 800328a:	d004      	beq.n	8003296 <__aeabi_d2f+0xce>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <__aeabi_d2f+0x100>)
 800328e:	4694      	mov	ip, r2
 8003290:	4464      	add	r4, ip
 8003292:	40a3      	lsls	r3, r4
 8003294:	431d      	orrs	r5, r3
 8003296:	002b      	movs	r3, r5
 8003298:	1e5d      	subs	r5, r3, #1
 800329a:	41ab      	sbcs	r3, r5
 800329c:	2207      	movs	r2, #7
 800329e:	433b      	orrs	r3, r7
 80032a0:	401a      	ands	r2, r3
 80032a2:	2700      	movs	r7, #0
 80032a4:	e7ad      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <__aeabi_d2f+0x104>)
 80032a8:	0028      	movs	r0, r5
 80032aa:	18a2      	adds	r2, r4, r2
 80032ac:	4095      	lsls	r5, r2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	1e6c      	subs	r4, r5, #1
 80032b2:	41a5      	sbcs	r5, r4
 80032b4:	40f0      	lsrs	r0, r6
 80032b6:	2207      	movs	r2, #7
 80032b8:	432b      	orrs	r3, r5
 80032ba:	4303      	orrs	r3, r0
 80032bc:	401a      	ands	r2, r3
 80032be:	2700      	movs	r7, #0
 80032c0:	e79f      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	fffffc80 	.word	0xfffffc80
 80032c8:	fffffca2 	.word	0xfffffca2
 80032cc:	fffffc82 	.word	0xfffffc82

080032d0 <__clzsi2>:
 80032d0:	211c      	movs	r1, #28
 80032d2:	2301      	movs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d301      	bcc.n	80032de <__clzsi2+0xe>
 80032da:	0c00      	lsrs	r0, r0, #16
 80032dc:	3910      	subs	r1, #16
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d301      	bcc.n	80032e8 <__clzsi2+0x18>
 80032e4:	0a00      	lsrs	r0, r0, #8
 80032e6:	3908      	subs	r1, #8
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d301      	bcc.n	80032f2 <__clzsi2+0x22>
 80032ee:	0900      	lsrs	r0, r0, #4
 80032f0:	3904      	subs	r1, #4
 80032f2:	a202      	add	r2, pc, #8	; (adr r2, 80032fc <__clzsi2+0x2c>)
 80032f4:	5c10      	ldrb	r0, [r2, r0]
 80032f6:	1840      	adds	r0, r0, r1
 80032f8:	4770      	bx	lr
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	02020304 	.word	0x02020304
 8003300:	01010101 	.word	0x01010101
	...

0800330c <__clzdi2>:
 800330c:	b510      	push	{r4, lr}
 800330e:	2900      	cmp	r1, #0
 8003310:	d103      	bne.n	800331a <__clzdi2+0xe>
 8003312:	f7ff ffdd 	bl	80032d0 <__clzsi2>
 8003316:	3020      	adds	r0, #32
 8003318:	e002      	b.n	8003320 <__clzdi2+0x14>
 800331a:	1c08      	adds	r0, r1, #0
 800331c:	f7ff ffd8 	bl	80032d0 <__clzsi2>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)

08003324 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <LoadROtopology+0x88>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <LoadROtopology+0x8c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00b      	beq.n	800334c <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8003334:	0a1a      	lsrs	r2, r3, #8
 8003336:	491f      	ldr	r1, [pc, #124]	; (80033b4 <LoadROtopology+0x90>)
 8003338:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 800333a:	d102      	bne.n	8003342 <LoadROtopology+0x1e>
			N =1;
 800333c:	000a      	movs	r2, r1
 800333e:	2101      	movs	r1, #1
 8003340:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <LoadROtopology+0x94>)
 8003344:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8003346:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8003348:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 800334a:	e023      	b.n	8003394 <LoadROtopology+0x70>
		N =1;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <LoadROtopology+0x90>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <LoadROtopology+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003358:	20fa      	movs	r0, #250	; 0xfa
 800335a:	e024      	b.n	80033a6 <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <LoadROtopology+0x88>)
 800335e:	18c3      	adds	r3, r0, r3
 8003360:	1e65      	subs	r5, r4, #1
 8003362:	466a      	mov	r2, sp
 8003364:	79d1      	ldrb	r1, [r2, #7]
 8003366:	881e      	ldrh	r6, [r3, #0]
 8003368:	00ab      	lsls	r3, r5, #2
 800336a:	195b      	adds	r3, r3, r5
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	195b      	adds	r3, r3, r5
 8003370:	18cb      	adds	r3, r1, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4911      	ldr	r1, [pc, #68]	; (80033bc <LoadROtopology+0x98>)
 8003376:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8003378:	3002      	adds	r0, #2
 800337a:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800337c:	79d3      	ldrb	r3, [r2, #7]
 800337e:	3301      	adds	r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	71d3      	strb	r3, [r2, #7]
 8003384:	466b      	mov	r3, sp
 8003386:	3307      	adds	r3, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d9e5      	bls.n	800335c <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8003390:	3401      	adds	r4, #1
 8003392:	b2e4      	uxtb	r4, r4
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <LoadROtopology+0x90>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	42a3      	cmp	r3, r4
 800339a:	d303      	bcc.n	80033a4 <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800339c:	466b      	mov	r3, sp
 800339e:	2200      	movs	r2, #0
 80033a0:	71da      	strb	r2, [r3, #7]
 80033a2:	e7ef      	b.n	8003384 <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	b002      	add	sp, #8
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	0801d800 	.word	0x0801d800
 80033b0:	0000ffff 	.word	0x0000ffff
 80033b4:	2000001c 	.word	0x2000001c
 80033b8:	20001066 	.word	0x20001066
 80033bc:	20000aa0 	.word	0x20000aa0

080033c0 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 80033c0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033c2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80033c4:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 80033c6:	e001      	b.n	80033cc <LoadEEportsDir+0xc>
 80033c8:	3401      	adds	r4, #1
 80033ca:	b2e4      	uxtb	r4, r4
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <LoadEEportsDir+0x30>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	42a3      	cmp	r3, r4
 80033d2:	d30b      	bcc.n	80033ec <LoadEEportsDir+0x2c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 80033d4:	1e61      	subs	r1, r4, #1
 80033d6:	0049      	lsls	r1, r1, #1
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <LoadEEportsDir+0x34>)
 80033da:	18c9      	adds	r1, r1, r3
 80033dc:	1c60      	adds	r0, r4, #1
 80033de:	f004 fc15 	bl	8007c0c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80033e2:	1ca3      	adds	r3, r4, #2
 80033e4:	2b1b      	cmp	r3, #27
 80033e6:	ddef      	ble.n	80033c8 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 80033e8:	250a      	movs	r5, #10
 80033ea:	e7ed      	b.n	80033c8 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 80033ec:	0028      	movs	r0, r5
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	2000001c 	.word	0x2000001c
 80033f4:	20007238 	.word	0x20007238

080033f8 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80033fc:	466b      	mov	r3, sp
 80033fe:	2200      	movs	r2, #0
 8003400:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003402:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003404:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003406:	e023      	b.n	8003450 <LoadEEalias+0x58>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8003408:	466b      	mov	r3, sp
 800340a:	1d9f      	adds	r7, r3, #6
 800340c:	0028      	movs	r0, r5
 800340e:	301c      	adds	r0, #28
 8003410:	b280      	uxth	r0, r0
 8003412:	0039      	movs	r1, r7
 8003414:	f004 fbfa 	bl	8007c0c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8003418:	8839      	ldrh	r1, [r7, #0]
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <LoadEEalias+0x6c>)
 800341c:	00b3      	lsls	r3, r6, #2
 800341e:	199f      	adds	r7, r3, r6
 8003420:	0078      	lsls	r0, r7, #1
 8003422:	1810      	adds	r0, r2, r0
 8003424:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003426:	1e67      	subs	r7, r4, #1
 8003428:	0a09      	lsrs	r1, r1, #8
 800342a:	199b      	adds	r3, r3, r6
 800342c:	0058      	lsls	r0, r3, #1
 800342e:	1812      	adds	r2, r2, r0
 8003430:	55d1      	strb	r1, [r2, r7]
			add++;
 8003432:	3501      	adds	r5, #1
 8003434:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003436:	3402      	adds	r4, #2
 8003438:	b2e4      	uxtb	r4, r4
 800343a:	2c09      	cmp	r4, #9
 800343c:	d9e4      	bls.n	8003408 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 800343e:	00b3      	lsls	r3, r6, #2
 8003440:	199b      	adds	r3, r3, r6
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <LoadEEalias+0x6c>)
 8003446:	189b      	adds	r3, r3, r2
 8003448:	2200      	movs	r2, #0
 800344a:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800344c:	3601      	adds	r6, #1
 800344e:	b2f6      	uxtb	r6, r6
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LoadEEalias+0x70>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	42b3      	cmp	r3, r6
 8003456:	d301      	bcc.n	800345c <LoadEEalias+0x64>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003458:	2401      	movs	r4, #1
 800345a:	e7ee      	b.n	800343a <LoadEEalias+0x42>
	}
	
	return result;
}
 800345c:	2000      	movs	r0, #0
 800345e:	b003      	add	sp, #12
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000f58 	.word	0x20000f58
 8003468:	2000001c 	.word	0x2000001c

0800346c <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003470:	466b      	mov	r3, sp
 8003472:	2200      	movs	r2, #0
 8003474:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003476:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 8003478:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 800347a:	e00b      	b.n	8003494 <LoadEEgroup+0x28>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800347c:	0063      	lsls	r3, r4, #1
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <LoadEEgroup+0x8c>)
 8003480:	18c9      	adds	r1, r1, r3
 8003482:	0028      	movs	r0, r5
 8003484:	30cb      	adds	r0, #203	; 0xcb
 8003486:	b280      	uxth	r0, r0
 8003488:	f004 fbc0 	bl	8007c0c <EE_ReadVariable>
		add++;
 800348c:	3501      	adds	r5, #1
 800348e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003490:	3401      	adds	r4, #1
 8003492:	b2e4      	uxtb	r4, r4
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <LoadEEgroup+0x90>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	42a3      	cmp	r3, r4
 800349a:	d8ef      	bhi.n	800347c <LoadEEgroup+0x10>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800349c:	2600      	movs	r6, #0
 800349e:	e023      	b.n	80034e8 <LoadEEgroup+0x7c>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 80034a0:	466b      	mov	r3, sp
 80034a2:	1d9f      	adds	r7, r3, #6
 80034a4:	0028      	movs	r0, r5
 80034a6:	3099      	adds	r0, #153	; 0x99
 80034a8:	b280      	uxth	r0, r0
 80034aa:	0039      	movs	r1, r7
 80034ac:	f004 fbae 	bl	8007c0c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 80034b0:	8839      	ldrh	r1, [r7, #0]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <LoadEEgroup+0x94>)
 80034b4:	00b3      	lsls	r3, r6, #2
 80034b6:	199f      	adds	r7, r3, r6
 80034b8:	0078      	lsls	r0, r7, #1
 80034ba:	1810      	adds	r0, r2, r0
 80034bc:	5501      	strb	r1, [r0, r4]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80034be:	1e67      	subs	r7, r4, #1
 80034c0:	0a09      	lsrs	r1, r1, #8
 80034c2:	199b      	adds	r3, r3, r6
 80034c4:	0058      	lsls	r0, r3, #1
 80034c6:	1812      	adds	r2, r2, r0
 80034c8:	55d1      	strb	r1, [r2, r7]
			add++;
 80034ca:	3501      	adds	r5, #1
 80034cc:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ce:	3402      	adds	r4, #2
 80034d0:	b2e4      	uxtb	r4, r4
 80034d2:	2c09      	cmp	r4, #9
 80034d4:	d9e4      	bls.n	80034a0 <LoadEEgroup+0x34>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	199b      	adds	r3, r3, r6
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <LoadEEgroup+0x94>)
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80034e4:	3601      	adds	r6, #1
 80034e6:	b2f6      	uxtb	r6, r6
 80034e8:	2e09      	cmp	r6, #9
 80034ea:	d801      	bhi.n	80034f0 <LoadEEgroup+0x84>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ec:	2401      	movs	r4, #1
 80034ee:	e7f0      	b.n	80034d2 <LoadEEgroup+0x66>
	}
	
	return result;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000eb0 	.word	0x20000eb0
 80034fc:	2000001c 	.word	0x2000001c
 8003500:	20000e4c 	.word	0x20000e4c

08003504 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003508:	210e      	movs	r1, #14
 800350a:	4469      	add	r1, sp
 800350c:	2300      	movs	r3, #0
 800350e:	800b      	strh	r3, [r1, #0]
 8003510:	aa03      	add	r2, sp, #12
 8003512:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003514:	20e4      	movs	r0, #228	; 0xe4
 8003516:	f004 fb79 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 800351a:	2800      	cmp	r0, #0
 800351c:	d000      	beq.n	8003520 <LoadEEstreams+0x1c>
 800351e:	e075      	b.n	800360c <LoadEEstreams+0x108>
		direction =(uint8_t )temp1;
 8003520:	230e      	movs	r3, #14
 8003522:	446b      	add	r3, sp
 8003524:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8003526:	210e      	movs	r1, #14
 8003528:	4469      	add	r1, sp
 800352a:	20e5      	movs	r0, #229	; 0xe5
 800352c:	f004 fb6e 	bl	8007c0c <EE_ReadVariable>
 8003530:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8003532:	a903      	add	r1, sp, #12
 8003534:	20e6      	movs	r0, #230	; 0xe6
 8003536:	f004 fb69 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 800353a:	4304      	orrs	r4, r0
 800353c:	b2a4      	uxth	r4, r4
 800353e:	2c00      	cmp	r4, #0
 8003540:	d000      	beq.n	8003544 <LoadEEstreams+0x40>
 8003542:	e065      	b.n	8003610 <LoadEEstreams+0x10c>
		count =((uint32_t )temp1 << 16) + temp2;
 8003544:	230e      	movs	r3, #14
 8003546:	446b      	add	r3, sp
 8003548:	881d      	ldrh	r5, [r3, #0]
 800354a:	042d      	lsls	r5, r5, #16
 800354c:	ab03      	add	r3, sp, #12
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003552:	210e      	movs	r1, #14
 8003554:	4469      	add	r1, sp
 8003556:	20e7      	movs	r0, #231	; 0xe7
 8003558:	f004 fb58 	bl	8007c0c <EE_ReadVariable>
 800355c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 800355e:	a903      	add	r1, sp, #12
 8003560:	20e8      	movs	r0, #232	; 0xe8
 8003562:	f004 fb53 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 8003566:	4304      	orrs	r4, r0
 8003568:	b2a4      	uxth	r4, r4
 800356a:	2c00      	cmp	r4, #0
 800356c:	d152      	bne.n	8003614 <LoadEEstreams+0x110>
		timeout =((uint32_t )temp1 << 16) + temp2;
 800356e:	230e      	movs	r3, #14
 8003570:	446b      	add	r3, sp
 8003572:	881c      	ldrh	r4, [r3, #0]
 8003574:	0424      	lsls	r4, r4, #16
 8003576:	ab03      	add	r3, sp, #12
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800357c:	210e      	movs	r1, #14
 800357e:	4469      	add	r1, sp
 8003580:	20e9      	movs	r0, #233	; 0xe9
 8003582:	f004 fb43 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 8003586:	2800      	cmp	r0, #0
 8003588:	d107      	bne.n	800359a <LoadEEstreams+0x96>
		src1 =(uint8_t )(temp1 >> 8);
 800358a:	230e      	movs	r3, #14
 800358c:	446b      	add	r3, sp
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	0a19      	lsrs	r1, r3, #8
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <LoadEEstreams+0x140>)
 8003594:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <LoadEEstreams+0x144>)
 8003598:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800359a:	210e      	movs	r1, #14
 800359c:	4469      	add	r1, sp
 800359e:	20ea      	movs	r0, #234	; 0xea
 80035a0:	f004 fb34 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d107      	bne.n	80035b8 <LoadEEstreams+0xb4>
		src2 =(uint8_t )(temp1 >> 8);
 80035a8:	230e      	movs	r3, #14
 80035aa:	446b      	add	r3, sp
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	0a19      	lsrs	r1, r3, #8
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <LoadEEstreams+0x148>)
 80035b2:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <LoadEEstreams+0x14c>)
 80035b6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 80035b8:	210e      	movs	r1, #14
 80035ba:	4469      	add	r1, sp
 80035bc:	20eb      	movs	r0, #235	; 0xeb
 80035be:	f004 fb25 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d107      	bne.n	80035d6 <LoadEEstreams+0xd2>
		src3 =(uint8_t )(temp1 >> 8);
 80035c6:	230e      	movs	r3, #14
 80035c8:	446b      	add	r3, sp
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	0a19      	lsrs	r1, r3, #8
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <LoadEEstreams+0x150>)
 80035d0:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <LoadEEstreams+0x154>)
 80035d4:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <LoadEEstreams+0x140>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <LoadEEstreams+0xe2>
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <LoadEEstreams+0x144>)
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d118      	bne.n	8003618 <LoadEEstreams+0x114>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <LoadEEstreams+0x148>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <LoadEEstreams+0xf2>
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <LoadEEstreams+0x14c>)
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d117      	bne.n	8003626 <LoadEEstreams+0x122>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <LoadEEstreams+0x150>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <LoadEEstreams+0x102>
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <LoadEEstreams+0x154>)
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	2a00      	cmp	r2, #0
 8003604:	d116      	bne.n	8003634 <LoadEEstreams+0x130>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003606:	2000      	movs	r0, #0
 8003608:	b004      	add	sp, #16
 800360a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 800360c:	2600      	movs	r6, #0
 800360e:	e78a      	b.n	8003526 <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 8003610:	2500      	movs	r5, #0
 8003612:	e79e      	b.n	8003552 <LoadEEstreams+0x4e>
 8003614:	2400      	movs	r4, #0
 8003616:	e7b1      	b.n	800357c <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	0022      	movs	r2, r4
 800361c:	0029      	movs	r1, r5
 800361e:	0030      	movs	r0, r6
 8003620:	f005 ff58 	bl	80094d4 <SetupDMAStreams>
 8003624:	e7df      	b.n	80035e6 <LoadEEstreams+0xe2>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003626:	9200      	str	r2, [sp, #0]
 8003628:	0022      	movs	r2, r4
 800362a:	0029      	movs	r1, r5
 800362c:	0030      	movs	r0, r6
 800362e:	f005 ff51 	bl	80094d4 <SetupDMAStreams>
 8003632:	e7e0      	b.n	80035f6 <LoadEEstreams+0xf2>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	0022      	movs	r2, r4
 8003638:	0029      	movs	r1, r5
 800363a:	0030      	movs	r0, r6
 800363c:	f005 ff4a 	bl	80094d4 <SetupDMAStreams>
 8003640:	e7e1      	b.n	8003606 <LoadEEstreams+0x102>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20001132 	.word	0x20001132
 8003648:	20000e49 	.word	0x20000e49
 800364c:	20001133 	.word	0x20001133
 8003650:	20000e4a 	.word	0x20000e4a
 8003654:	20001134 	.word	0x20001134
 8003658:	20000e4b 	.word	0x20000e4b

0800365c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800365c:	b510      	push	{r4, lr}
 800365e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003660:	208a      	movs	r0, #138	; 0x8a
 8003662:	466b      	mov	r3, sp
 8003664:	1d99      	adds	r1, r3, #6
 8003666:	0040      	lsls	r0, r0, #1
 8003668:	f004 fad0 	bl	8007c0c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800366c:	2800      	cmp	r0, #0
 800366e:	d000      	beq.n	8003672 <LoadEEparams+0x16>
 8003670:	e064      	b.n	800373c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 8003672:	466b      	mov	r3, sp
 8003674:	3306      	adds	r3, #6
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <LoadEEparams+0x144>)
 800367a:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003680:	2016      	movs	r0, #22
 8003682:	466b      	mov	r3, sp
 8003684:	1d99      	adds	r1, r3, #6
 8003686:	30ff      	adds	r0, #255	; 0xff
 8003688:	f004 fac0 	bl	8007c0c <EE_ReadVariable>
	if(!status1)
 800368c:	2800      	cmp	r0, #0
 800368e:	d15c      	bne.n	800374a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 8003690:	466b      	mov	r3, sp
 8003692:	88da      	ldrh	r2, [r3, #6]
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <LoadEEparams+0x144>)
 8003696:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003698:	208b      	movs	r0, #139	; 0x8b
 800369a:	466b      	mov	r3, sp
 800369c:	1d99      	adds	r1, r3, #6
 800369e:	0040      	lsls	r0, r0, #1
 80036a0:	f004 fab4 	bl	8007c0c <EE_ReadVariable>
	if(!status1)
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d155      	bne.n	8003754 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80036a8:	466b      	mov	r3, sp
 80036aa:	88da      	ldrh	r2, [r3, #6]
 80036ac:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <LoadEEparams+0x144>)
 80036ae:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80036b0:	2018      	movs	r0, #24
 80036b2:	466b      	mov	r3, sp
 80036b4:	1d99      	adds	r1, r3, #6
 80036b6:	30ff      	adds	r0, #255	; 0xff
 80036b8:	f004 faa8 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80036bc:	2800      	cmp	r0, #0
 80036be:	d14e      	bne.n	800375e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80036c0:	466b      	mov	r3, sp
 80036c2:	3306      	adds	r3, #6
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <LoadEEparams+0x144>)
 80036c8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80036ce:	208c      	movs	r0, #140	; 0x8c
 80036d0:	466b      	mov	r3, sp
 80036d2:	1d99      	adds	r1, r3, #6
 80036d4:	0040      	lsls	r0, r0, #1
 80036d6:	f004 fa99 	bl	8007c0c <EE_ReadVariable>
 80036da:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80036dc:	201a      	movs	r0, #26
 80036de:	a901      	add	r1, sp, #4
 80036e0:	30ff      	adds	r0, #255	; 0xff
 80036e2:	f004 fa93 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 80036e6:	4304      	orrs	r4, r0
 80036e8:	b2a4      	uxth	r4, r4
 80036ea:	2c00      	cmp	r4, #0
 80036ec:	d13e      	bne.n	800376c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80036ee:	466b      	mov	r3, sp
 80036f0:	3306      	adds	r3, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	aa01      	add	r2, sp, #4
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	0412      	lsls	r2, r2, #16
 80036fa:	4313      	orrs	r3, r2
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <LoadEEparams+0x144>)
 80036fe:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003700:	208d      	movs	r0, #141	; 0x8d
 8003702:	466b      	mov	r3, sp
 8003704:	1d99      	adds	r1, r3, #6
 8003706:	0040      	lsls	r0, r0, #1
 8003708:	f004 fa80 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 800370c:	2800      	cmp	r0, #0
 800370e:	d13b      	bne.n	8003788 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003710:	466b      	mov	r3, sp
 8003712:	3306      	adds	r3, #6
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <LoadEEparams+0x144>)
 8003718:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800371e:	201c      	movs	r0, #28
 8003720:	466b      	mov	r3, sp
 8003722:	1d99      	adds	r1, r3, #6
 8003724:	30ff      	adds	r0, #255	; 0xff
 8003726:	f004 fa71 	bl	8007c0c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800372a:	2800      	cmp	r0, #0
 800372c:	d032      	beq.n	8003794 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <LoadEEparams+0x148>)
 8003730:	7eda      	ldrb	r2, [r3, #27]
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <LoadEEparams+0x144>)
 8003734:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003736:	2000      	movs	r0, #0
 8003738:	b002      	add	sp, #8
 800373a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <LoadEEparams+0x148>)
 800373e:	7991      	ldrb	r1, [r2, #6]
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <LoadEEparams+0x144>)
 8003742:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003744:	79d2      	ldrb	r2, [r2, #7]
 8003746:	71da      	strb	r2, [r3, #7]
 8003748:	e79a      	b.n	8003680 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <LoadEEparams+0x148>)
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <LoadEEparams+0x144>)
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e7a1      	b.n	8003698 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <LoadEEparams+0x148>)
 8003756:	885a      	ldrh	r2, [r3, #2]
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <LoadEEparams+0x144>)
 800375a:	805a      	strh	r2, [r3, #2]
 800375c:	e7a8      	b.n	80036b0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <LoadEEparams+0x148>)
 8003760:	7911      	ldrb	r1, [r2, #4]
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <LoadEEparams+0x144>)
 8003764:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003766:	7952      	ldrb	r2, [r2, #5]
 8003768:	715a      	strb	r2, [r3, #5]
 800376a:	e7b0      	b.n	80036ce <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <LoadEEparams+0x14c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <LoadEEparams+0x144>)
 8003776:	22e1      	movs	r2, #225	; 0xe1
 8003778:	0252      	lsls	r2, r2, #9
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e7c0      	b.n	8003700 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <LoadEEparams+0x148>)
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <LoadEEparams+0x144>)
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	e7bb      	b.n	8003700 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <LoadEEparams+0x144>)
 800378a:	2218      	movs	r2, #24
 800378c:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 800378e:	2200      	movs	r2, #0
 8003790:	731a      	strb	r2, [r3, #12]
 8003792:	e7c4      	b.n	800371e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003794:	466b      	mov	r3, sp
 8003796:	799a      	ldrb	r2, [r3, #6]
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <LoadEEparams+0x144>)
 800379a:	76da      	strb	r2, [r3, #27]
 800379c:	e7cb      	b.n	8003736 <LoadEEparams+0xda>
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	20006da0 	.word	0x20006da0
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000a9e 	.word	0x20000a9e

080037ac <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ae:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80037b0:	231e      	movs	r3, #30
 80037b2:	446b      	add	r3, sp
 80037b4:	2200      	movs	r2, #0
 80037b6:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80037b8:	2400      	movs	r4, #0
 80037ba:	e001      	b.n	80037c0 <LoadEEbuttons+0x14>
 80037bc:	3401      	adds	r4, #1
 80037be:	b2e4      	uxtb	r4, r4
 80037c0:	2c05      	cmp	r4, #5
 80037c2:	d854      	bhi.n	800386e <LoadEEbuttons+0xc2>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80037c4:	0025      	movs	r5, r4
 80037c6:	353b      	adds	r5, #59	; 0x3b
 80037c8:	00ad      	lsls	r5, r5, #2
 80037ca:	b2ad      	uxth	r5, r5
 80037cc:	211e      	movs	r1, #30
 80037ce:	4469      	add	r1, sp
 80037d0:	0028      	movs	r0, r5
 80037d2:	f004 fa1b 	bl	8007c0c <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d1f0      	bne.n	80037bc <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80037da:	231e      	movs	r3, #30
 80037dc:	446b      	add	r3, sp
 80037de:	8819      	ldrh	r1, [r3, #0]
 80037e0:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80037e2:	0918      	lsrs	r0, r3, #4
 80037e4:	1c62      	adds	r2, r4, #1
 80037e6:	4290      	cmp	r0, r2
 80037e8:	d1e8      	bne.n	80037bc <LoadEEbuttons+0x10>
 80037ea:	200f      	movs	r0, #15
 80037ec:	4003      	ands	r3, r0
 80037ee:	d0e5      	beq.n	80037bc <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 80037f0:	00d7      	lsls	r7, r2, #3
 80037f2:	18ba      	adds	r2, r7, r2
 80037f4:	4f1f      	ldr	r7, [pc, #124]	; (8003874 <LoadEEbuttons+0xc8>)
 80037f6:	18bf      	adds	r7, r7, r2
 80037f8:	707b      	strb	r3, [r7, #1]
				button[i + 1].events =(uint8_t )temp16;
 80037fa:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80037fc:	261e      	movs	r6, #30
 80037fe:	446e      	add	r6, sp
 8003800:	1c68      	adds	r0, r5, #1
 8003802:	b280      	uxth	r0, r0
 8003804:	0031      	movs	r1, r6
 8003806:	f004 fa01 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800380a:	8833      	ldrh	r3, [r6, #0]
 800380c:	0a1a      	lsrs	r2, r3, #8
 800380e:	70ba      	strb	r2, [r7, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003810:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003812:	1ca8      	adds	r0, r5, #2
 8003814:	b280      	uxth	r0, r0
 8003816:	0031      	movs	r1, r6
 8003818:	f004 f9f8 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800381c:	8833      	ldrh	r3, [r6, #0]
 800381e:	0a1a      	lsrs	r2, r3, #8
 8003820:	70fa      	strb	r2, [r7, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003822:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003824:	3503      	adds	r5, #3
 8003826:	b2a8      	uxth	r0, r5
 8003828:	0031      	movs	r1, r6
 800382a:	f004 f9ef 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800382e:	8833      	ldrh	r3, [r6, #0]
 8003830:	0a1a      	lsrs	r2, r3, #8
 8003832:	713a      	strb	r2, [r7, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003834:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003836:	1c65      	adds	r5, r4, #1
 8003838:	b2ed      	uxtb	r5, r5
 800383a:	7878      	ldrb	r0, [r7, #1]
 800383c:	0029      	movs	r1, r5
 800383e:	f004 feb9 	bl	80085b4 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003842:	7a39      	ldrb	r1, [r7, #8]
 8003844:	084a      	lsrs	r2, r1, #1
 8003846:	78bb      	ldrb	r3, [r7, #2]
 8003848:	2001      	movs	r0, #1
 800384a:	4002      	ands	r2, r0
 800384c:	4001      	ands	r1, r0
 800384e:	2000      	movs	r0, #0
 8003850:	9005      	str	r0, [sp, #20]
 8003852:	79f8      	ldrb	r0, [r7, #7]
 8003854:	9004      	str	r0, [sp, #16]
 8003856:	79b8      	ldrb	r0, [r7, #6]
 8003858:	9003      	str	r0, [sp, #12]
 800385a:	7978      	ldrb	r0, [r7, #5]
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	7938      	ldrb	r0, [r7, #4]
 8003860:	9001      	str	r0, [sp, #4]
 8003862:	78f8      	ldrb	r0, [r7, #3]
 8003864:	9000      	str	r0, [sp, #0]
 8003866:	0028      	movs	r0, r5
 8003868:	f004 ffbc 	bl	80087e4 <SetButtonEvents>
 800386c:	e7a6      	b.n	80037bc <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 800386e:	2000      	movs	r0, #0
 8003870:	b009      	add	sp, #36	; 0x24
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003874:	200014b4 	.word	0x200014b4

08003878 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	46d6      	mov	lr, sl
 800387c:	464f      	mov	r7, r9
 800387e:	b580      	push	{r7, lr}
 8003880:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003882:	2032      	movs	r0, #50	; 0x32
 8003884:	f011 fafc 	bl	8014e80 <malloc>
 8003888:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 800388a:	d065      	beq.n	8003958 <LoadROsnippets+0xe0>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <LoadROsnippets+0xf0>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2bfe      	cmp	r3, #254	; 0xfe
 8003892:	d163      	bne.n	800395c <LoadROsnippets+0xe4>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003894:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 8003896:	4c34      	ldr	r4, [pc, #208]	; (8003968 <LoadROsnippets+0xf0>)
 8003898:	e04b      	b.n	8003932 <LoadROsnippets+0xba>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800389a:	7822      	ldrb	r2, [r4, #0]
 800389c:	54fa      	strb	r2, [r7, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 800389e:	3301      	adds	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80038a2:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80038a4:	2b13      	cmp	r3, #19
 80038a6:	d9f8      	bls.n	800389a <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80038a8:	46b2      	mov	sl, r6
 80038aa:	00b3      	lsls	r3, r6, #2
 80038ac:	199b      	adds	r3, r3, r6
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <LoadROsnippets+0xf4>)
 80038b2:	4691      	mov	r9, r2
 80038b4:	4499      	add	r9, r3
 80038b6:	1c79      	adds	r1, r7, #1
 80038b8:	2214      	movs	r2, #20
 80038ba:	4648      	mov	r0, r9
 80038bc:	f011 fd2d 	bl	801531a <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80038c0:	2214      	movs	r2, #20
 80038c2:	2100      	movs	r1, #0
 80038c4:	0038      	movs	r0, r7
 80038c6:	f011 fd31 	bl	801532c <memset>
		i =0;
 80038ca:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80038cc:	e003      	b.n	80038d6 <LoadROsnippets+0x5e>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80038ce:	557a      	strb	r2, [r7, r5]
			++currentAdd;
 80038d0:	3401      	adds	r4, #1
			++i;
 80038d2:	3501      	adds	r5, #1
 80038d4:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80038d6:	9401      	str	r4, [sp, #4]
 80038d8:	7822      	ldrb	r2, [r4, #0]
 80038da:	1c93      	adds	r3, r2, #2
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d901      	bls.n	80038e6 <LoadROsnippets+0x6e>
 80038e2:	2d31      	cmp	r5, #49	; 0x31
 80038e4:	d9f3      	bls.n	80038ce <LoadROsnippets+0x56>
		}
		if(snipBuffer[i - 1] != 0)
 80038e6:	197b      	adds	r3, r7, r5
 80038e8:	3b01      	subs	r3, #1
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 80038f0:	3501      	adds	r5, #1
 80038f2:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 80038f4:	0028      	movs	r0, r5
 80038f6:	f011 fac3 	bl	8014e80 <malloc>
 80038fa:	4653      	mov	r3, sl
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4453      	add	r3, sl
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <LoadROsnippets+0xf4>)
 8003904:	189b      	adds	r3, r3, r2
 8003906:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003908:	2800      	cmp	r0, #0
 800390a:	d016      	beq.n	800393a <LoadROsnippets+0xc2>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 800390c:	002a      	movs	r2, r5
 800390e:	0039      	movs	r1, r7
 8003910:	f011 fd03 	bl	801531a <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <LoadROsnippets+0xf8>)
 8003916:	7813      	ldrb	r3, [r2, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800391c:	002a      	movs	r2, r5
 800391e:	2100      	movs	r1, #0
 8003920:	0038      	movs	r0, r7
 8003922:	f011 fd03 	bl	801532c <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2bfe      	cmp	r3, #254	; 0xfe
 800392c:	d10f      	bne.n	800394e <LoadROsnippets+0xd6>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800392e:	3601      	adds	r6, #1
 8003930:	b2f6      	uxtb	r6, r6
 8003932:	2e04      	cmp	r6, #4
 8003934:	d80b      	bhi.n	800394e <LoadROsnippets+0xd6>
		for(i =0; i < sizeof(snippet_t); i++)
 8003936:	2300      	movs	r3, #0
 8003938:	e7b4      	b.n	80038a4 <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 800393a:	2214      	movs	r2, #20
 800393c:	2100      	movs	r1, #0
 800393e:	4648      	mov	r0, r9
 8003940:	f011 fcf4 	bl	801532c <memset>
			free(snipBuffer);
 8003944:	0038      	movs	r0, r7
 8003946:	f011 faa5 	bl	8014e94 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800394a:	200e      	movs	r0, #14
 800394c:	e007      	b.n	800395e <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 800394e:	0038      	movs	r0, r7
 8003950:	f011 faa0 	bl	8014e94 <free>
	return BOS_OK;
 8003954:	2000      	movs	r0, #0
 8003956:	e002      	b.n	800395e <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
 8003958:	20fb      	movs	r0, #251	; 0xfb
 800395a:	e000      	b.n	800395e <LoadROsnippets+0xe6>
		return BOS_ERROR;
 800395c:	20ff      	movs	r0, #255	; 0xff
}
 800395e:	b003      	add	sp, #12
 8003960:	bc0c      	pop	{r2, r3}
 8003962:	4691      	mov	r9, r2
 8003964:	469a      	mov	sl, r3
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003968:	0801dc00 	.word	0x0801dc00
 800396c:	20006dbc 	.word	0x20006dbc
 8003970:	20001207 	.word	0x20001207

08003974 <LoadEEvars>:
void LoadEEvars(void){
 8003974:	b510      	push	{r4, lr}
	LoadROtopology();
 8003976:	f7ff fcd5 	bl	8003324 <LoadROtopology>
	LoadEEportsDir();
 800397a:	f7ff fd21 	bl	80033c0 <LoadEEportsDir>
	LoadEEalias();
 800397e:	f7ff fd3b 	bl	80033f8 <LoadEEalias>
	LoadEEgroup();
 8003982:	f7ff fd73 	bl	800346c <LoadEEgroup>
	LoadEEstreams();
 8003986:	f7ff fdbd 	bl	8003504 <LoadEEstreams>
	LoadEEparams();
 800398a:	f7ff fe67 	bl	800365c <LoadEEparams>
	LoadEEbuttons();
 800398e:	f7ff ff0d 	bl	80037ac <LoadEEbuttons>
	LoadROsnippets();
 8003992:	f7ff ff71 	bl	8003878 <LoadROsnippets>
}
 8003996:	bd10      	pop	{r4, pc}

08003998 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003998:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800399a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800399c:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 800399e:	e005      	b.n	80039ac <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80039a0:	1c60      	adds	r0, r4, #1
 80039a2:	f004 f9e5 	bl	8007d70 <EE_WriteVariable>
 80039a6:	e00c      	b.n	80039c2 <SaveEEportsDir+0x2a>
	for(uint8_t i =1; i <= N; i++){
 80039a8:	3401      	adds	r4, #1
 80039aa:	b2e4      	uxtb	r4, r4
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <SaveEEportsDir+0x38>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d30b      	bcc.n	80039cc <SaveEEportsDir+0x34>
		if(arrayPortsDir[i - 1])
 80039b4:	0025      	movs	r5, r4
 80039b6:	1e63      	subs	r3, r4, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <SaveEEportsDir+0x3c>)
 80039bc:	5a99      	ldrh	r1, [r3, r2]
 80039be:	2900      	cmp	r1, #0
 80039c0:	d1ee      	bne.n	80039a0 <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80039c2:	3502      	adds	r5, #2
 80039c4:	2d1b      	cmp	r5, #27
 80039c6:	ddef      	ble.n	80039a8 <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 80039c8:	260a      	movs	r6, #10
 80039ca:	e7ed      	b.n	80039a8 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 80039cc:	0030      	movs	r0, r6
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	20007238 	.word	0x20007238

080039d8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80039da:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80039dc:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80039de:	e017      	b.n	8003a10 <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80039e0:	1e60      	subs	r0, r4, #1
 80039e2:	00ba      	lsls	r2, r7, #2
 80039e4:	19d2      	adds	r2, r2, r7
 80039e6:	0051      	lsls	r1, r2, #1
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <SaveEEalias+0x58>)
 80039ea:	185b      	adds	r3, r3, r1
 80039ec:	5c19      	ldrb	r1, [r3, r0]
 80039ee:	0209      	lsls	r1, r1, #8
 80039f0:	5d1b      	ldrb	r3, [r3, r4]
 80039f2:	18c9      	adds	r1, r1, r3
 80039f4:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80039f6:	0028      	movs	r0, r5
 80039f8:	301c      	adds	r0, #28
 80039fa:	b280      	uxth	r0, r0
 80039fc:	f004 f9b8 	bl	8007d70 <EE_WriteVariable>
				add++;
 8003a00:	3501      	adds	r5, #1
 8003a02:	b2ad      	uxth	r5, r5
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a04:	3402      	adds	r4, #2
 8003a06:	b2e4      	uxtb	r4, r4
 8003a08:	2c09      	cmp	r4, #9
 8003a0a:	d9e9      	bls.n	80039e0 <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	b2f6      	uxtb	r6, r6
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <SaveEEalias+0x5c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	42b3      	cmp	r3, r6
 8003a16:	d309      	bcc.n	8003a2c <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 8003a18:	0037      	movs	r7, r6
 8003a1a:	00b3      	lsls	r3, r6, #2
 8003a1c:	199b      	adds	r3, r3, r6
 8003a1e:	005a      	lsls	r2, r3, #1
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <SaveEEalias+0x58>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f1      	beq.n	8003a0c <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a28:	2401      	movs	r4, #1
 8003a2a:	e7ed      	b.n	8003a08 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a30:	20000f58 	.word	0x20000f58
 8003a34:	2000001c 	.word	0x2000001c

08003a38 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	46de      	mov	lr, fp
 8003a3c:	4657      	mov	r7, sl
 8003a3e:	464e      	mov	r6, r9
 8003a40:	4645      	mov	r5, r8
 8003a42:	b5e0      	push	{r5, r6, r7, lr}
 8003a44:	000f      	movs	r7, r1
 8003a46:	0016      	movs	r6, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	ab0a      	add	r3, sp, #40	; 0x28
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	469b      	mov	fp, r3
 8003a50:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a52:	781d      	ldrb	r5, [r3, #0]
 8003a54:	ab0c      	add	r3, sp, #48	; 0x30
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	469a      	mov	sl, r3
 8003a5a:	ab0d      	add	r3, sp, #52	; 0x34
 8003a5c:	781c      	ldrb	r4, [r3, #0]
 8003a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003a64:	b281      	uxth	r1, r0
 8003a66:	20e4      	movs	r0, #228	; 0xe4
 8003a68:	f004 f982 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003a6c:	0a39      	lsrs	r1, r7, #8
 8003a6e:	b289      	uxth	r1, r1
 8003a70:	20e5      	movs	r0, #229	; 0xe5
 8003a72:	f004 f97d 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003a76:	b2b9      	uxth	r1, r7
 8003a78:	20e6      	movs	r0, #230	; 0xe6
 8003a7a:	f004 f979 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003a7e:	0a31      	lsrs	r1, r6, #8
 8003a80:	b289      	uxth	r1, r1
 8003a82:	20e7      	movs	r0, #231	; 0xe7
 8003a84:	f004 f974 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003a88:	b2b1      	uxth	r1, r6
 8003a8a:	20e8      	movs	r0, #232	; 0xe8
 8003a8c:	f004 f970 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003a90:	464b      	mov	r3, r9
 8003a92:	0219      	lsls	r1, r3, #8
 8003a94:	4459      	add	r1, fp
 8003a96:	b289      	uxth	r1, r1
 8003a98:	20e9      	movs	r0, #233	; 0xe9
 8003a9a:	f004 f969 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003a9e:	022d      	lsls	r5, r5, #8
 8003aa0:	4455      	add	r5, sl
 8003aa2:	b2a9      	uxth	r1, r5
 8003aa4:	20ea      	movs	r0, #234	; 0xea
 8003aa6:	f004 f963 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003aaa:	0224      	lsls	r4, r4, #8
 8003aac:	4444      	add	r4, r8
 8003aae:	b2a1      	uxth	r1, r4
 8003ab0:	20eb      	movs	r0, #235	; 0xeb
 8003ab2:	f004 f95d 	bl	8007d70 <EE_WriteVariable>
	
	return result;
}
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	bc3c      	pop	{r2, r3, r4, r5}
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	46ab      	mov	fp, r5
 8003ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ac4 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003ac4:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 8003ac6:	4c1a      	ldr	r4, [pc, #104]	; (8003b30 <SaveEEparams+0x6c>)
 8003ac8:	79e3      	ldrb	r3, [r4, #7]
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	79a1      	ldrb	r1, [r4, #6]
 8003ace:	4319      	orrs	r1, r3
 8003ad0:	208a      	movs	r0, #138	; 0x8a
 8003ad2:	0040      	lsls	r0, r0, #1
 8003ad4:	f004 f94c 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003ad8:	8821      	ldrh	r1, [r4, #0]
 8003ada:	2016      	movs	r0, #22
 8003adc:	30ff      	adds	r0, #255	; 0xff
 8003ade:	f004 f947 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003ae2:	8861      	ldrh	r1, [r4, #2]
 8003ae4:	208b      	movs	r0, #139	; 0x8b
 8003ae6:	0040      	lsls	r0, r0, #1
 8003ae8:	f004 f942 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003aec:	7963      	ldrb	r3, [r4, #5]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	7b21      	ldrb	r1, [r4, #12]
 8003af2:	4319      	orrs	r1, r3
 8003af4:	2018      	movs	r0, #24
 8003af6:	30ff      	adds	r0, #255	; 0xff
 8003af8:	f004 f93a 	bl	8007d70 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003afc:	8921      	ldrh	r1, [r4, #8]
 8003afe:	208c      	movs	r0, #140	; 0x8c
 8003b00:	0040      	lsls	r0, r0, #1
 8003b02:	f004 f935 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003b06:	8961      	ldrh	r1, [r4, #10]
 8003b08:	201a      	movs	r0, #26
 8003b0a:	30ff      	adds	r0, #255	; 0xff
 8003b0c:	f004 f930 	bl	8007d70 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003b10:	7b63      	ldrb	r3, [r4, #13]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	7921      	ldrb	r1, [r4, #4]
 8003b16:	4319      	orrs	r1, r3
 8003b18:	208d      	movs	r0, #141	; 0x8d
 8003b1a:	0040      	lsls	r0, r0, #1
 8003b1c:	f004 f928 	bl	8007d70 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003b20:	7ee1      	ldrb	r1, [r4, #27]
 8003b22:	201c      	movs	r0, #28
 8003b24:	30ff      	adds	r0, #255	; 0xff
 8003b26:	f004 f923 	bl	8007d70 <EE_WriteVariable>
	
	return result;
}
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20006da0 	.word	0x20006da0

08003b34 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003b34:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003b36:	2234      	movs	r2, #52	; 0x34
 8003b38:	2100      	movs	r1, #0
 8003b3a:	480f      	ldr	r0, [pc, #60]	; (8003b78 <ClearEEportsDir+0x44>)
 8003b3c:	f011 fbf6 	bl	801532c <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003b40:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003b42:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 8003b44:	e005      	b.n	8003b52 <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003b46:	1c60      	adds	r0, r4, #1
 8003b48:	f004 f912 	bl	8007d70 <EE_WriteVariable>
 8003b4c:	e00c      	b.n	8003b68 <ClearEEportsDir+0x34>
	for(uint8_t i =1; i <= N; i++){
 8003b4e:	3401      	adds	r4, #1
 8003b50:	b2e4      	uxtb	r4, r4
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <ClearEEportsDir+0x48>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	d30b      	bcc.n	8003b72 <ClearEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 8003b5a:	0025      	movs	r5, r4
 8003b5c:	1e63      	subs	r3, r4, #1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <ClearEEportsDir+0x44>)
 8003b62:	5a99      	ldrh	r1, [r3, r2]
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d1ee      	bne.n	8003b46 <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003b68:	3502      	adds	r5, #2
 8003b6a:	2d1b      	cmp	r5, #27
 8003b6c:	ddef      	ble.n	8003b4e <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8003b6e:	260a      	movs	r6, #10
 8003b70:	e7ed      	b.n	8003b4e <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 8003b72:	0030      	movs	r0, r6
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20007238 	.word	0x20007238
 8003b7c:	2000001c 	.word	0x2000001c

08003b80 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003b80:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <EE_FormatForFactoryReset+0x1c>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <EE_FormatForFactoryReset+0x20>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d006      	beq.n	8003b9a <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003b8c:	f004 f906 	bl	8007d9c <EE_Format>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d102      	bne.n	8003b9a <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003b94:	4b01      	ldr	r3, [pc, #4]	; (8003b9c <EE_FormatForFactoryReset+0x1c>)
 8003b96:	4a02      	ldr	r2, [pc, #8]	; (8003ba0 <EE_FormatForFactoryReset+0x20>)
 8003b98:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003b9a:	bd10      	pop	{r4, pc}
 8003b9c:	20007ff0 	.word	0x20007ff0
 8003ba0:	beefdead 	.word	0xbeefdead

08003ba4 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003ba8:	2512      	movs	r5, #18
 8003baa:	446d      	add	r5, sp
 8003bac:	ab04      	add	r3, sp, #16
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	ab07      	add	r3, sp, #28
 8003bb2:	002a      	movs	r2, r5
 8003bb4:	a908      	add	r1, sp, #32
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f00b f900 	bl	800edbc <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003bbc:	ac03      	add	r4, sp, #12
 8003bbe:	9400      	str	r4, [sp, #0]
 8003bc0:	ab05      	add	r3, sp, #20
 8003bc2:	220e      	movs	r2, #14
 8003bc4:	446a      	add	r2, sp
 8003bc6:	a906      	add	r1, sp, #24
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f00b f8f7 	bl	800edbc <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003bd6:	882b      	ldrh	r3, [r5, #0]
 8003bd8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003bda:	a909      	add	r1, sp, #36	; 0x24
 8003bdc:	9808      	ldr	r0, [sp, #32]
 8003bde:	f00f fa99 	bl	8013114 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be2:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003be4:	2302      	movs	r3, #2
 8003be6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003be8:	8823      	ldrh	r3, [r4, #0]
 8003bea:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003bec:	a909      	add	r1, sp, #36	; 0x24
 8003bee:	9805      	ldr	r0, [sp, #20]
 8003bf0:	f00f fa90 	bl	8013114 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003bf4:	8829      	ldrh	r1, [r5, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	9808      	ldr	r0, [sp, #32]
 8003bfa:	f00f fbdc 	bl	80133b6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003bfe:	2005      	movs	r0, #5
 8003c00:	f00b fc72 	bl	800f4e8 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003c04:	8821      	ldrh	r1, [r4, #0]
 8003c06:	9805      	ldr	r0, [sp, #20]
 8003c08:	f00f fbce 	bl	80133a8 <HAL_GPIO_ReadPin>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d002      	beq.n	8003c16 <IsLowerCLIbaud+0x72>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003c10:	2000      	movs	r0, #0
}
 8003c12:	b00e      	add	sp, #56	; 0x38
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003c16:	2312      	movs	r3, #18
 8003c18:	446b      	add	r3, sp
 8003c1a:	8819      	ldrh	r1, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	9808      	ldr	r0, [sp, #32]
 8003c20:	f00f fbc9 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003c24:	2005      	movs	r0, #5
 8003c26:	f00b fc5f 	bl	800f4e8 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003c2a:	ab03      	add	r3, sp, #12
 8003c2c:	8819      	ldrh	r1, [r3, #0]
 8003c2e:	9805      	ldr	r0, [sp, #20]
 8003c30:	f00f fbba 	bl	80133a8 <HAL_GPIO_ReadPin>
 8003c34:	2801      	cmp	r0, #1
 8003c36:	d0ec      	beq.n	8003c12 <IsLowerCLIbaud+0x6e>
	return 0;
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e7ea      	b.n	8003c12 <IsLowerCLIbaud+0x6e>

08003c3c <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003c3c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003c3e:	f00b fde7 	bl	800f810 <GetUart>
 8003c42:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003c44:	23e1      	movs	r3, #225	; 0xe1
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003c56:	f010 ff6f 	bl	8014b38 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	2120      	movs	r1, #32
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bd10      	pop	{r4, pc}
	...

08003c68 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003c6c:	2400      	movs	r4, #0
 8003c6e:	2c02      	cmp	r4, #2
 8003c70:	d810      	bhi.n	8003c94 <IsModuleParameter+0x2c>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003c72:	0063      	lsls	r3, r4, #1
 8003c74:	191b      	adds	r3, r3, r4
 8003c76:	009a      	lsls	r2, r3, #2
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <IsModuleParameter+0x30>)
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	0028      	movs	r0, r5
 8003c80:	f7fc fa40 	bl	8000104 <strcmp>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d002      	beq.n	8003c8e <IsModuleParameter+0x26>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003c88:	3401      	adds	r4, #1
 8003c8a:	b2e4      	uxtb	r4, r4
 8003c8c:	e7ef      	b.n	8003c6e <IsModuleParameter+0x6>
			return i + 1;
 8003c8e:	3401      	adds	r4, #1
 8003c90:	b2e0      	uxtb	r0, r4
 8003c92:	e000      	b.n	8003c96 <IsModuleParameter+0x2e>
	}
	return 0;
 8003c94:	2000      	movs	r0, #0
}
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	20000090 	.word	0x20000090

08003c9c <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	e001      	b.n	8003ca8 <IsMathOperator+0xc>
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	b2ed      	uxtb	r5, r5
 8003ca8:	2d05      	cmp	r5, #5
 8003caa:	d825      	bhi.n	8003cf8 <IsMathOperator+0x5c>
		if(!strcmp(string,"="))
 8003cac:	4918      	ldr	r1, [pc, #96]	; (8003d10 <IsMathOperator+0x74>)
 8003cae:	0020      	movs	r0, r4
 8003cb0:	f7fc fa28 	bl	8000104 <strcmp>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d021      	beq.n	8003cfc <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003cb8:	4916      	ldr	r1, [pc, #88]	; (8003d14 <IsMathOperator+0x78>)
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f7fc fa22 	bl	8000104 <strcmp>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d01d      	beq.n	8003d00 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003cc4:	4914      	ldr	r1, [pc, #80]	; (8003d18 <IsMathOperator+0x7c>)
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f7fc fa1c 	bl	8000104 <strcmp>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d019      	beq.n	8003d04 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003cd0:	4912      	ldr	r1, [pc, #72]	; (8003d1c <IsMathOperator+0x80>)
 8003cd2:	0020      	movs	r0, r4
 8003cd4:	f7fc fa16 	bl	8000104 <strcmp>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d015      	beq.n	8003d08 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003cdc:	4910      	ldr	r1, [pc, #64]	; (8003d20 <IsMathOperator+0x84>)
 8003cde:	0020      	movs	r0, r4
 8003ce0:	f7fc fa10 	bl	8000104 <strcmp>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d011      	beq.n	8003d0c <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <IsMathOperator+0x88>)
 8003cea:	0020      	movs	r0, r4
 8003cec:	f7fc fa0a 	bl	8000104 <strcmp>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1d7      	bne.n	8003ca4 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8003cf4:	2006      	movs	r0, #6
 8003cf6:	e000      	b.n	8003cfa <IsMathOperator+0x5e>
	}
	return 0;
 8003cf8:	2000      	movs	r0, #0
}
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	e7fc      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003d00:	2002      	movs	r0, #2
 8003d02:	e7fa      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8003d04:	2003      	movs	r0, #3
 8003d06:	e7f8      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 8003d08:	2004      	movs	r0, #4
 8003d0a:	e7f6      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 8003d0c:	2005      	movs	r0, #5
 8003d0e:	e7f4      	b.n	8003cfa <IsMathOperator+0x5e>
 8003d10:	08019f00 	.word	0x08019f00
 8003d14:	08019f04 	.word	0x08019f04
 8003d18:	08019f08 	.word	0x08019f08
 8003d1c:	08019f0c 	.word	0x08019f0c
 8003d20:	08019f10 	.word	0x08019f10
 8003d24:	08019f14 	.word	0x08019f14

08003d28 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003d28:	b530      	push	{r4, r5, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003d2e:	2401      	movs	r4, #1
 8003d30:	e001      	b.n	8003d36 <ExploreNeighbors+0xe>
 8003d32:	3401      	adds	r4, #1
 8003d34:	b2e4      	uxtb	r4, r4
 8003d36:	2c05      	cmp	r4, #5
 8003d38:	d814      	bhi.n	8003d64 <ExploreNeighbors+0x3c>
		if(port != ignore){
 8003d3a:	42ac      	cmp	r4, r5
 8003d3c:	d0f9      	beq.n	8003d32 <ExploreNeighbors+0xa>
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <ExploreNeighbors+0x44>)
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	0a11      	lsrs	r1, r2, #8
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <ExploreNeighbors+0x48>)
 8003d46:	7019      	strb	r1, [r3, #0]
			messageParams[1] =(uint8_t )myPN;
 8003d48:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 8003d4a:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	3307      	adds	r3, #7
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	0020      	movs	r0, r4
 8003d58:	f005 fcd0 	bl	80096fc <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003d5c:	200a      	movs	r0, #10
 8003d5e:	f00b fea9 	bl	800fab4 <osDelay>
 8003d62:	e7e6      	b.n	8003d32 <ExploreNeighbors+0xa>
		}
	}
	
	return result;
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	b003      	add	sp, #12
 8003d68:	bd30      	pop	{r4, r5, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	20000050 	.word	0x20000050
 8003d70:	20000f28 	.word	0x20000f28

08003d74 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	46de      	mov	lr, fp
 8003d78:	4657      	mov	r7, sl
 8003d7a:	464e      	mov	r6, r9
 8003d7c:	4645      	mov	r5, r8
 8003d7e:	b5e0      	push	{r5, r6, r7, lr}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	3307      	adds	r3, #7
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	466a      	mov	r2, sp
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	469d      	mov	sp, r3
 8003d94:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003d96:	2300      	movs	r3, #0
 8003d98:	e006      	b.n	8003da8 <FindBroadcastRoutes+0x34>
		modules[m] =0;
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	54ea      	strb	r2, [r5, r3]
		bcastRoutes[m] =0;
 8003d9e:	005c      	lsls	r4, r3, #1
 8003da0:	493e      	ldr	r1, [pc, #248]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003da2:	5262      	strh	r2, [r4, r1]
	for(m =0; m < N; m++){
 8003da4:	3301      	adds	r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d3f4      	bcc.n	8003d9a <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] =++level;					// Tag the source
 8003db0:	3801      	subs	r0, #1
 8003db2:	2301      	movs	r3, #1
 8003db4:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
 8003db6:	2201      	movs	r2, #1
 8003db8:	e001      	b.n	8003dbe <FindBroadcastRoutes+0x4a>
 8003dba:	3201      	adds	r2, #1
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	2a05      	cmp	r2, #5
 8003dc0:	d819      	bhi.n	8003df6 <FindBroadcastRoutes+0x82>
		if(array[src - 1][p]){
 8003dc2:	0083      	lsls	r3, r0, #2
 8003dc4:	181b      	adds	r3, r3, r0
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	181b      	adds	r3, r3, r0
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4934      	ldr	r1, [pc, #208]	; (8003ea0 <FindBroadcastRoutes+0x12c>)
 8003dd0:	5a5b      	ldrh	r3, [r3, r1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f1      	beq.n	8003dba <FindBroadcastRoutes+0x46>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003dd6:	1e54      	subs	r4, r2, #1
 8003dd8:	2101      	movs	r1, #1
 8003dda:	40a1      	lsls	r1, r4
 8003ddc:	000c      	movs	r4, r1
 8003dde:	4e2f      	ldr	r6, [pc, #188]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003de0:	0041      	lsls	r1, r0, #1
 8003de2:	468c      	mov	ip, r1
 8003de4:	5b89      	ldrh	r1, [r1, r6]
 8003de6:	4321      	orrs	r1, r4
 8003de8:	4664      	mov	r4, ip
 8003dea:	53a1      	strh	r1, [r4, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2102      	movs	r1, #2
 8003df2:	54e9      	strb	r1, [r5, r3]
 8003df4:	e7e1      	b.n	8003dba <FindBroadcastRoutes+0x46>
	++level;												// Move one level
 8003df6:	2302      	movs	r3, #2
 8003df8:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003dfa:	465e      	mov	r6, fp
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	b2f3      	uxtb	r3, r6
 8003e00:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 8003e02:	2300      	movs	r3, #0
 8003e04:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003e06:	2000      	movs	r0, #0
 8003e08:	e02e      	b.n	8003e68 <FindBroadcastRoutes+0xf4>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	2a05      	cmp	r2, #5
 8003e10:	d828      	bhi.n	8003e64 <FindBroadcastRoutes+0xf0>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003e12:	00a3      	lsls	r3, r4, #2
 8003e14:	191b      	adds	r3, r3, r4
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	191b      	adds	r3, r3, r4
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <FindBroadcastRoutes+0x12c>)
 8003e20:	5a5b      	ldrh	r3, [r3, r1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f1      	beq.n	8003e0a <FindBroadcastRoutes+0x96>
 8003e26:	08db      	lsrs	r3, r3, #3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	5ce9      	ldrb	r1, [r5, r3]
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d1eb      	bne.n	8003e0a <FindBroadcastRoutes+0x96>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003e32:	0011      	movs	r1, r2
 8003e34:	3901      	subs	r1, #1
 8003e36:	2601      	movs	r6, #1
 8003e38:	408e      	lsls	r6, r1
 8003e3a:	46b0      	mov	r8, r6
 8003e3c:	4917      	ldr	r1, [pc, #92]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003e3e:	4689      	mov	r9, r1
 8003e40:	0061      	lsls	r1, r4, #1
 8003e42:	468a      	mov	sl, r1
 8003e44:	4649      	mov	r1, r9
 8003e46:	4656      	mov	r6, sl
 8003e48:	5a71      	ldrh	r1, [r6, r1]
 8003e4a:	4646      	mov	r6, r8
 8003e4c:	4331      	orrs	r1, r6
 8003e4e:	464e      	mov	r6, r9
 8003e50:	4653      	mov	r3, sl
 8003e52:	5399      	strh	r1, [r3, r6]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4659      	mov	r1, fp
 8003e58:	54e9      	strb	r1, [r5, r3]
						++untaged;
 8003e5a:	4663      	mov	r3, ip
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	469c      	mov	ip, r3
 8003e62:	e7d2      	b.n	8003e0a <FindBroadcastRoutes+0x96>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003e64:	3001      	adds	r0, #1
 8003e66:	b2c0      	uxtb	r0, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4298      	cmp	r0, r3
 8003e6e:	d207      	bcs.n	8003e80 <FindBroadcastRoutes+0x10c>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003e70:	0004      	movs	r4, r0
 8003e72:	5c2a      	ldrb	r2, [r5, r0]
 8003e74:	465b      	mov	r3, fp
 8003e76:	3b01      	subs	r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d1f3      	bne.n	8003e64 <FindBroadcastRoutes+0xf0>
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	e7c6      	b.n	8003e0e <FindBroadcastRoutes+0x9a>
					}
				}
			}
		}
	} while(untaged);
 8003e80:	4663      	mov	r3, ip
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1b9      	bne.n	8003dfa <FindBroadcastRoutes+0x86>
	
	return result;
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b003      	add	sp, #12
 8003e8c:	bc3c      	pop	{r2, r3, r4, r5}
 8003e8e:	4690      	mov	r8, r2
 8003e90:	4699      	mov	r9, r3
 8003e92:	46a2      	mov	sl, r4
 8003e94:	46ab      	mov	fp, r5
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	2000001c 	.word	0x2000001c
 8003e9c:	20000ce0 	.word	0x20000ce0
 8003ea0:	20000aa0 	.word	0x20000aa0

08003ea4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003ea4:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003ea6:	780b      	ldrb	r3, [r1, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <minArr+0x10>
		smallest =arr[0];
 8003eac:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	e002      	b.n	8003eba <minArr+0x16>
	uint8_t smallest =0xFF;
 8003eb4:	24ff      	movs	r4, #255	; 0xff
 8003eb6:	e7fa      	b.n	8003eae <minArr+0xa>
	for(int i =0; i < N; i++){
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <minArr+0x34>)
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	dd08      	ble.n	8003ed4 <minArr+0x30>
		if((arr[i] < smallest) && !Q[i]){
 8003ec2:	5cc2      	ldrb	r2, [r0, r3]
 8003ec4:	42a2      	cmp	r2, r4
 8003ec6:	d2f7      	bcs.n	8003eb8 <minArr+0x14>
 8003ec8:	5ccd      	ldrb	r5, [r1, r3]
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d1f4      	bne.n	8003eb8 <minArr+0x14>
			index =i;
 8003ece:	b2de      	uxtb	r6, r3
			smallest =arr[i];
 8003ed0:	0014      	movs	r4, r2
 8003ed2:	e7f1      	b.n	8003eb8 <minArr+0x14>
		}
	}
	
	return index;
}
 8003ed4:	0030      	movs	r0, r6
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	2000001c 	.word	0x2000001c

08003edc <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003edc:	2300      	movs	r3, #0
	char temp =1;
 8003ede:	2201      	movs	r2, #1
	for(int i =0; i < N; i++){
 8003ee0:	e002      	b.n	8003ee8 <QnotEmpty+0xc>
		temp &=Q[i];
 8003ee2:	5cc1      	ldrb	r1, [r0, r3]
 8003ee4:	400a      	ands	r2, r1
	for(int i =0; i < N; i++){
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4902      	ldr	r1, [pc, #8]	; (8003ef4 <QnotEmpty+0x18>)
 8003eea:	7809      	ldrb	r1, [r1, #0]
 8003eec:	4299      	cmp	r1, r3
 8003eee:	dcf8      	bgt.n	8003ee2 <QnotEmpty+0x6>
	}
	
	return temp;
}
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4770      	bx	lr
 8003ef4:	2000001c 	.word	0x2000001c

08003ef8 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b08f      	sub	sp, #60	; 0x3c
 8003efc:	0005      	movs	r5, r0
 8003efe:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 8003f00:	2232      	movs	r2, #50	; 0x32
 8003f02:	2100      	movs	r1, #0
 8003f04:	a801      	add	r0, sp, #4
 8003f06:	f011 fa11 	bl	801532c <memset>
	memset(route,0,sizeof(route));
 8003f0a:	221a      	movs	r2, #26
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4848      	ldr	r0, [pc, #288]	; (8004030 <FindRoute+0x138>)
 8003f10:	f011 fa0c 	bl	801532c <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003f14:	002a      	movs	r2, r5
 8003f16:	3d01      	subs	r5, #1
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4946      	ldr	r1, [pc, #280]	; (8004034 <FindRoute+0x13c>)
 8003f1c:	554b      	strb	r3, [r1, r5]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003f1e:	4946      	ldr	r1, [pc, #280]	; (8004038 <FindRoute+0x140>)
 8003f20:	554b      	strb	r3, [r1, r5]
	for(int col =1; col <= 6; col++){
 8003f22:	2001      	movs	r0, #1
 8003f24:	e000      	b.n	8003f28 <FindRoute+0x30>
 8003f26:	3001      	adds	r0, #1
 8003f28:	2806      	cmp	r0, #6
 8003f2a:	dc16      	bgt.n	8003f5a <FindRoute+0x62>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003f2c:	00ab      	lsls	r3, r5, #2
 8003f2e:	195b      	adds	r3, r3, r5
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	195b      	adds	r3, r3, r5
 8003f34:	181b      	adds	r3, r3, r0
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4940      	ldr	r1, [pc, #256]	; (800403c <FindRoute+0x144>)
 8003f3a:	5a5b      	ldrh	r3, [r3, r1]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f2      	beq.n	8003f26 <FindRoute+0x2e>
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	b2b1      	uxth	r1, r6
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d1ee      	bne.n	8003f26 <FindRoute+0x2e>
			routeDist[desID - 1] =1;
 8003f48:	1e73      	subs	r3, r6, #1
 8003f4a:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <FindRoute+0x13c>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	54d1      	strb	r1, [r2, r3]
			route[0] =desID;
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <FindRoute+0x138>)
 8003f52:	701e      	strb	r6, [r3, #0]
			return col;
 8003f54:	b2c0      	uxtb	r0, r0
}
 8003f56:	b00f      	add	sp, #60	; 0x3c
 8003f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <FindRoute+0x68>
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4937      	ldr	r1, [pc, #220]	; (8004040 <FindRoute+0x148>)
 8003f62:	7809      	ldrb	r1, [r1, #0]
 8003f64:	4299      	cmp	r1, r3
 8003f66:	db09      	blt.n	8003f7c <FindRoute+0x84>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d0f8      	beq.n	8003f5e <FindRoute+0x66>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003f6c:	1e59      	subs	r1, r3, #1
 8003f6e:	4831      	ldr	r0, [pc, #196]	; (8004034 <FindRoute+0x13c>)
 8003f70:	24ff      	movs	r4, #255	; 0xff
 8003f72:	5444      	strb	r4, [r0, r1]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003f74:	4830      	ldr	r0, [pc, #192]	; (8004038 <FindRoute+0x140>)
 8003f76:	2400      	movs	r4, #0
 8003f78:	5444      	strb	r4, [r0, r1]
 8003f7a:	e7f0      	b.n	8003f5e <FindRoute+0x66>
	uint8_t u =0;
 8003f7c:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003f7e:	a801      	add	r0, sp, #4
 8003f80:	f7ff ffac 	bl	8003edc <QnotEmpty>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d10c      	bne.n	8003fa2 <FindRoute+0xaa>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003f88:	a901      	add	r1, sp, #4
 8003f8a:	482a      	ldr	r0, [pc, #168]	; (8004034 <FindRoute+0x13c>)
 8003f8c:	f7ff ff8a 	bl	8003ea4 <minArr>
 8003f90:	3001      	adds	r0, #1
 8003f92:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003f94:	42b4      	cmp	r4, r6
 8003f96:	d004      	beq.n	8003fa2 <FindRoute+0xaa>
			Q[u - 1] =1;									// Remove u from Q
 8003f98:	1e61      	subs	r1, r4, #1
 8003f9a:	ab01      	add	r3, sp, #4
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003fa0:	e003      	b.n	8003faa <FindRoute+0xb2>
	uint8_t u =0;
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	e025      	b.n	8003ff2 <FindRoute+0xfa>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003fa6:	3201      	adds	r2, #1
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	2a06      	cmp	r2, #6
 8003fac:	d8e7      	bhi.n	8003f7e <FindRoute+0x86>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	185b      	adds	r3, r3, r1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	185b      	adds	r3, r3, r1
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4820      	ldr	r0, [pc, #128]	; (800403c <FindRoute+0x144>)
 8003fbc:	5a1b      	ldrh	r3, [r3, r0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f1      	beq.n	8003fa6 <FindRoute+0xae>
				v =(array[u - 1][n] >> 3);
 8003fc2:	08db      	lsrs	r3, r3, #3
 8003fc4:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	a801      	add	r0, sp, #4
 8003fca:	5cc0      	ldrb	r0, [r0, r3]
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1ea      	bne.n	8003fa6 <FindRoute+0xae>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003fd0:	4f18      	ldr	r7, [pc, #96]	; (8004034 <FindRoute+0x13c>)
 8003fd2:	5c78      	ldrb	r0, [r7, r1]
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003fd8:	5cff      	ldrb	r7, [r7, r3]
 8003fda:	4287      	cmp	r7, r0
 8003fdc:	d9e3      	bls.n	8003fa6 <FindRoute+0xae>
						routeDist[v - 1] =alt;
 8003fde:	4f15      	ldr	r7, [pc, #84]	; (8004034 <FindRoute+0x13c>)
 8003fe0:	54f8      	strb	r0, [r7, r3]
						routePrev[v - 1] =u;
 8003fe2:	4815      	ldr	r0, [pc, #84]	; (8004038 <FindRoute+0x140>)
 8003fe4:	54c4      	strb	r4, [r0, r3]
 8003fe6:	e7de      	b.n	8003fa6 <FindRoute+0xae>
		route[j++] =u;          			// Push the vertex onto the stack
 8003fe8:	1c53      	adds	r3, r2, #1
 8003fea:	4911      	ldr	r1, [pc, #68]	; (8004030 <FindRoute+0x138>)
 8003fec:	548c      	strb	r4, [r1, r2]
 8003fee:	b2da      	uxtb	r2, r3
		u =routePrev[u - 1];           	// Traverse from target to source
 8003ff0:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ff2:	1e63      	subs	r3, r4, #1
 8003ff4:	4910      	ldr	r1, [pc, #64]	; (8004038 <FindRoute+0x140>)
 8003ff6:	5cc8      	ldrb	r0, [r1, r3]
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1f5      	bne.n	8003fe8 <FindRoute+0xf0>
	for(int col =1; col <= 6; col++){
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	e000      	b.n	8004002 <FindRoute+0x10a>
 8004000:	3201      	adds	r2, #1
 8004002:	2a06      	cmp	r2, #6
 8004004:	dca7      	bgt.n	8003f56 <FindRoute+0x5e>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8004006:	00ab      	lsls	r3, r5, #2
 8004008:	195b      	adds	r3, r3, r5
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	195b      	adds	r3, r3, r5
 800400e:	189b      	adds	r3, r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <FindRoute+0x144>)
 8004014:	5a5b      	ldrh	r3, [r3, r1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f2      	beq.n	8004000 <FindRoute+0x108>
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	1e71      	subs	r1, r6, #1
 800401e:	4c05      	ldr	r4, [pc, #20]	; (8004034 <FindRoute+0x13c>)
 8004020:	5c61      	ldrb	r1, [r4, r1]
 8004022:	3901      	subs	r1, #1
 8004024:	4c02      	ldr	r4, [pc, #8]	; (8004030 <FindRoute+0x138>)
 8004026:	5c61      	ldrb	r1, [r4, r1]
 8004028:	428b      	cmp	r3, r1
 800402a:	d1e9      	bne.n	8004000 <FindRoute+0x108>
			return col;
 800402c:	b2d0      	uxtb	r0, r2
 800402e:	e792      	b.n	8003f56 <FindRoute+0x5e>
 8004030:	20006ea4 	.word	0x20006ea4
 8004034:	200010fc 	.word	0x200010fc
 8004038:	20001118 	.word	0x20001118
 800403c:	20000aa0 	.word	0x20000aa0
 8004040:	2000001c 	.word	0x2000001c

08004044 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8004044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004046:	b087      	sub	sp, #28
 8004048:	0007      	movs	r7, r0
 800404a:	000e      	movs	r6, r1
 800404c:	9205      	str	r2, [sp, #20]
 800404e:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 8004052:	7818      	ldrb	r0, [r3, #0]
 8004054:	f7ff ff50 	bl	8003ef8 <FindRoute>
 8004058:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800405a:	2c00      	cmp	r4, #0
 800405c:	d003      	beq.n	8004066 <remoteBootloaderUpdate+0x22>
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 8004060:	781d      	ldrb	r5, [r3, #0]
 8004062:	42b5      	cmp	r5, r6
 8004064:	d00d      	beq.n	8004082 <remoteBootloaderUpdate+0x3e>
	else if(outport == 0){ /* This is a remote update */
 8004066:	2c00      	cmp	r4, #0
 8004068:	d10d      	bne.n	8004086 <remoteBootloaderUpdate+0x42>
		if(NumberOfHops(dst)== 1)
 800406a:	1e73      	subs	r3, r6, #1
 800406c:	4a2b      	ldr	r2, [pc, #172]	; (800411c <remoteBootloaderUpdate+0xd8>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d003      	beq.n	800407c <remoteBootloaderUpdate+0x38>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8004074:	3b01      	subs	r3, #1
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <remoteBootloaderUpdate+0xdc>)
 8004078:	5cd5      	ldrb	r5, [r2, r3]
 800407a:	e005      	b.n	8004088 <remoteBootloaderUpdate+0x44>
		lastModule = myID;
 800407c:	4b26      	ldr	r3, [pc, #152]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800407e:	781d      	ldrb	r5, [r3, #0]
 8004080:	e002      	b.n	8004088 <remoteBootloaderUpdate+0x44>
		myOutport =outport;
 8004082:	9404      	str	r4, [sp, #16]
 8004084:	e000      	b.n	8004088 <remoteBootloaderUpdate+0x44>
	uint8_t myOutport =0, lastModule =0;
 8004086:	2500      	movs	r5, #0
	if(src == myID){
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	42bb      	cmp	r3, r7
 800408e:	d019      	beq.n	80040c4 <remoteBootloaderUpdate+0x80>
	SetupPortForRemoteBootloaderUpdate(inport);
 8004090:	9805      	ldr	r0, [sp, #20]
 8004092:	f7ff fdd3 	bl	8003c3c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8004096:	9804      	ldr	r0, [sp, #16]
 8004098:	f7ff fdd0 	bl	8003c3c <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	d032      	beq.n	800410a <remoteBootloaderUpdate+0xc6>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 80040a6:	7819      	ldrb	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9303      	str	r3, [sp, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	3303      	adds	r3, #3
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	000b      	movs	r3, r1
 80040b8:	9a04      	ldr	r2, [sp, #16]
 80040ba:	9805      	ldr	r0, [sp, #20]
 80040bc:	f005 fd54 	bl	8009b68 <StartScastDMAStream>
}
 80040c0:	b007      	add	sp, #28
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80040c4:	f00b fe18 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 80040c8:	0007      	movs	r7, r0
		if(outport == 0)		// This is a remote module update
 80040ca:	2c00      	cmp	r4, #0
 80040cc:	d116      	bne.n	80040fc <remoteBootloaderUpdate+0xb8>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <remoteBootloaderUpdate+0xe0>)
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	0032      	movs	r2, r6
 80040d4:	f011 fb24 	bl	8015720 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <remoteBootloaderUpdate+0xe4>)
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	0038      	movs	r0, r7
 80040de:	f011 fb3f 	bl	8015760 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 80040e2:	0038      	movs	r0, r7
 80040e4:	f7fc f818 	bl	8000118 <strlen>
 80040e8:	b282      	uxth	r2, r0
 80040ea:	2332      	movs	r3, #50	; 0x32
 80040ec:	0039      	movs	r1, r7
 80040ee:	9805      	ldr	r0, [sp, #20]
 80040f0:	f00b fbda 	bl	800f8a8 <writePxITMutex>
		Delay_ms(100);
 80040f4:	2064      	movs	r0, #100	; 0x64
 80040f6:	f00d fd59 	bl	8011bac <HAL_Delay>
 80040fa:	e7c9      	b.n	8004090 <remoteBootloaderUpdate+0x4c>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <remoteBootloaderUpdate+0xe8>)
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	0023      	movs	r3, r4
 8004102:	0032      	movs	r2, r6
 8004104:	f011 fb0c 	bl	8015720 <sprintf>
 8004108:	e7e6      	b.n	80040d8 <remoteBootloaderUpdate+0x94>
		SwapUartPins(GetUart(myOutport),REVERSED);
 800410a:	9804      	ldr	r0, [sp, #16]
 800410c:	f00b fb80 	bl	800f810 <GetUart>
 8004110:	2101      	movs	r1, #1
 8004112:	f00b fc15 	bl	800f940 <SwapUartPins>
 8004116:	e7c5      	b.n	80040a4 <remoteBootloaderUpdate+0x60>
 8004118:	20001066 	.word	0x20001066
 800411c:	200010fc 	.word	0x200010fc
 8004120:	20006ea4 	.word	0x20006ea4
 8004124:	20000078 	.word	0x20000078
 8004128:	20000080 	.word	0x20000080
 800412c:	2000007c 	.word	0x2000007c

08004130 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	0004      	movs	r4, r0
 8004136:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004138:	4d55      	ldr	r5, [pc, #340]	; (8004290 <DisplayTopology+0x160>)
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <DisplayTopology+0x164>)
 800413c:	002a      	movs	r2, r5
 800413e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004140:	c243      	stmia	r2!, {r0, r1, r6}
 8004142:	0019      	movs	r1, r3
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	888b      	ldrh	r3, [r1, #4]
 800414a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800414c:	0028      	movs	r0, r5
 800414e:	f7fb ffe3 	bl	8000118 <strlen>
 8004152:	b282      	uxth	r2, r0
 8004154:	2301      	movs	r3, #1
 8004156:	425b      	negs	r3, r3
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	3333      	adds	r3, #51	; 0x33
 800415c:	0029      	movs	r1, r5
 800415e:	0020      	movs	r0, r4
 8004160:	f00b fb74 	bl	800f84c <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004164:	2501      	movs	r5, #1
 8004166:	e013      	b.n	8004190 <DisplayTopology+0x60>
		sprintf(pcUserMessage,"P%d\t",i);
 8004168:	4e49      	ldr	r6, [pc, #292]	; (8004290 <DisplayTopology+0x160>)
 800416a:	002a      	movs	r2, r5
 800416c:	494a      	ldr	r1, [pc, #296]	; (8004298 <DisplayTopology+0x168>)
 800416e:	0030      	movs	r0, r6
 8004170:	f011 fad6 	bl	8015720 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004174:	0030      	movs	r0, r6
 8004176:	f7fb ffcf 	bl	8000118 <strlen>
 800417a:	b282      	uxth	r2, r0
 800417c:	2301      	movs	r3, #1
 800417e:	425b      	negs	r3, r3
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	3333      	adds	r3, #51	; 0x33
 8004184:	0031      	movs	r1, r6
 8004186:	9803      	ldr	r0, [sp, #12]
 8004188:	f00b fb60 	bl	800f84c <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800418c:	3501      	adds	r5, #1
 800418e:	b2ed      	uxtb	r5, r5
 8004190:	2d05      	cmp	r5, #5
 8004192:	d9e9      	bls.n	8004168 <DisplayTopology+0x38>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8004194:	2301      	movs	r3, #1
 8004196:	425b      	negs	r3, r3
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	3333      	adds	r3, #51	; 0x33
 800419c:	2203      	movs	r2, #3
 800419e:	493f      	ldr	r1, [pc, #252]	; (800429c <DisplayTopology+0x16c>)
 80041a0:	9803      	ldr	r0, [sp, #12]
 80041a2:	f00b fb53 	bl	800f84c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 80041a6:	2400      	movs	r4, #0
 80041a8:	e031      	b.n	800420e <DisplayTopology+0xde>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 80041aa:	2307      	movs	r3, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	08d2      	lsrs	r2, r2, #3
 80041b0:	493b      	ldr	r1, [pc, #236]	; (80042a0 <DisplayTopology+0x170>)
 80041b2:	4837      	ldr	r0, [pc, #220]	; (8004290 <DisplayTopology+0x160>)
 80041b4:	f011 fab4 	bl	8015720 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80041b8:	4f35      	ldr	r7, [pc, #212]	; (8004290 <DisplayTopology+0x160>)
 80041ba:	0038      	movs	r0, r7
 80041bc:	f7fb ffac 	bl	8000118 <strlen>
 80041c0:	b282      	uxth	r2, r0
 80041c2:	2301      	movs	r3, #1
 80041c4:	425b      	negs	r3, r3
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	3333      	adds	r3, #51	; 0x33
 80041ca:	0039      	movs	r1, r7
 80041cc:	9803      	ldr	r0, [sp, #12]
 80041ce:	f00b fb3d 	bl	800f84c <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80041d2:	3501      	adds	r5, #1
 80041d4:	b2ed      	uxtb	r5, r5
 80041d6:	2d05      	cmp	r5, #5
 80041d8:	d80e      	bhi.n	80041f8 <DisplayTopology+0xc8>
			if(!array[row][col])
 80041da:	00b3      	lsls	r3, r6, #2
 80041dc:	199b      	adds	r3, r3, r6
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	199b      	adds	r3, r3, r6
 80041e2:	195b      	adds	r3, r3, r5
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <DisplayTopology+0x174>)
 80041e8:	5a9a      	ldrh	r2, [r3, r2]
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1dd      	bne.n	80041aa <DisplayTopology+0x7a>
				sprintf(pcUserMessage,"%d\t",0);
 80041ee:	492e      	ldr	r1, [pc, #184]	; (80042a8 <DisplayTopology+0x178>)
 80041f0:	4827      	ldr	r0, [pc, #156]	; (8004290 <DisplayTopology+0x160>)
 80041f2:	f011 fa95 	bl	8015720 <sprintf>
 80041f6:	e7df      	b.n	80041b8 <DisplayTopology+0x88>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 80041f8:	2301      	movs	r3, #1
 80041fa:	425b      	negs	r3, r3
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	3333      	adds	r3, #51	; 0x33
 8004200:	2202      	movs	r2, #2
 8004202:	492a      	ldr	r1, [pc, #168]	; (80042ac <DisplayTopology+0x17c>)
 8004204:	9803      	ldr	r0, [sp, #12]
 8004206:	f00b fb21 	bl	800f84c <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800420a:	3401      	adds	r4, #1
 800420c:	b2e4      	uxtb	r4, r4
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <DisplayTopology+0x180>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	42a3      	cmp	r3, r4
 8004214:	d930      	bls.n	8004278 <DisplayTopology+0x148>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8004216:	0026      	movs	r6, r4
 8004218:	1c62      	adds	r2, r4, #1
 800421a:	4d1d      	ldr	r5, [pc, #116]	; (8004290 <DisplayTopology+0x160>)
 800421c:	4925      	ldr	r1, [pc, #148]	; (80042b4 <DisplayTopology+0x184>)
 800421e:	0028      	movs	r0, r5
 8004220:	f011 fa7e 	bl	8015720 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004224:	0028      	movs	r0, r5
 8004226:	f7fb ff77 	bl	8000118 <strlen>
 800422a:	b282      	uxth	r2, r0
 800422c:	2701      	movs	r7, #1
 800422e:	427f      	negs	r7, r7
 8004230:	9700      	str	r7, [sp, #0]
 8004232:	2332      	movs	r3, #50	; 0x32
 8004234:	0029      	movs	r1, r5
 8004236:	9803      	ldr	r0, [sp, #12]
 8004238:	f00b fb08 	bl	800f84c <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 800423c:	2316      	movs	r3, #22
 800423e:	4363      	muls	r3, r4
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <DisplayTopology+0x174>)
 8004242:	5a9a      	ldrh	r2, [r3, r2]
 8004244:	0053      	lsls	r3, r2, #1
 8004246:	189b      	adds	r3, r3, r2
 8004248:	0059      	lsls	r1, r3, #1
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <DisplayTopology+0x188>)
 800424c:	18c9      	adds	r1, r1, r3
 800424e:	2205      	movs	r2, #5
 8004250:	0028      	movs	r0, r5
 8004252:	f011 faba 	bl	80157ca <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004256:	9700      	str	r7, [sp, #0]
 8004258:	2332      	movs	r3, #50	; 0x32
 800425a:	2205      	movs	r2, #5
 800425c:	0029      	movs	r1, r5
 800425e:	9d03      	ldr	r5, [sp, #12]
 8004260:	0028      	movs	r0, r5
 8004262:	f00b faf3 	bl	800f84c <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8004266:	9700      	str	r7, [sp, #0]
 8004268:	2332      	movs	r3, #50	; 0x32
 800426a:	2201      	movs	r2, #1
 800426c:	4913      	ldr	r1, [pc, #76]	; (80042bc <DisplayTopology+0x18c>)
 800426e:	0028      	movs	r0, r5
 8004270:	f00b faec 	bl	800f84c <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004274:	2501      	movs	r5, #1
 8004276:	e7ae      	b.n	80041d6 <DisplayTopology+0xa6>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004278:	2301      	movs	r3, #1
 800427a:	425b      	negs	r3, r3
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	3333      	adds	r3, #51	; 0x33
 8004280:	2201      	movs	r2, #1
 8004282:	490f      	ldr	r1, [pc, #60]	; (80042c0 <DisplayTopology+0x190>)
 8004284:	9803      	ldr	r0, [sp, #12]
 8004286:	f00b fae1 	bl	800f84c <writePxMutex>
}
 800428a:	b005      	add	sp, #20
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	20001090 	.word	0x20001090
 8004294:	08019ec4 	.word	0x08019ec4
 8004298:	08019ed8 	.word	0x08019ed8
 800429c:	0801b358 	.word	0x0801b358
 80042a0:	08019ef0 	.word	0x08019ef0
 80042a4:	20000aa0 	.word	0x20000aa0
 80042a8:	08019eec 	.word	0x08019eec
 80042ac:	08019d6c 	.word	0x08019d6c
 80042b0:	2000001c 	.word	0x2000001c
 80042b4:	08019ee0 	.word	0x08019ee0
 80042b8:	08019f2c 	.word	0x08019f2c
 80042bc:	08019ed4 	.word	0x08019ed4
 80042c0:	0801b51c 	.word	0x0801b51c

080042c4 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	0005      	movs	r5, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80042ca:	4c2d      	ldr	r4, [pc, #180]	; (8004380 <DisplayPortsDir+0xbc>)
 80042cc:	492d      	ldr	r1, [pc, #180]	; (8004384 <DisplayPortsDir+0xc0>)
 80042ce:	0023      	movs	r3, r4
 80042d0:	000a      	movs	r2, r1
 80042d2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80042d4:	c343      	stmia	r3!, {r0, r1, r6}
 80042d6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80042d8:	c343      	stmia	r3!, {r0, r1, r6}
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	601a      	str	r2, [r3, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80042de:	0020      	movs	r0, r4
 80042e0:	f7fb ff1a 	bl	8000118 <strlen>
 80042e4:	b282      	uxth	r2, r0
 80042e6:	2301      	movs	r3, #1
 80042e8:	425b      	negs	r3, r3
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	3333      	adds	r3, #51	; 0x33
 80042ee:	0021      	movs	r1, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	f00b faab 	bl	800f84c <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80042f6:	2601      	movs	r6, #1
 80042f8:	e023      	b.n	8004342 <DisplayPortsDir+0x7e>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80042fa:	3401      	adds	r4, #1
 80042fc:	b2e4      	uxtb	r4, r4
 80042fe:	2c0a      	cmp	r4, #10
 8004300:	d81d      	bhi.n	800433e <DisplayPortsDir+0x7a>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004302:	1e73      	subs	r3, r6, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <DisplayPortsDir+0xc4>)
 8004308:	5a9a      	ldrh	r2, [r3, r2]
 800430a:	1e61      	subs	r1, r4, #1
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	410b      	asrs	r3, r1
 8004312:	4213      	tst	r3, r2
 8004314:	d0f1      	beq.n	80042fa <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8004316:	4f1a      	ldr	r7, [pc, #104]	; (8004380 <DisplayPortsDir+0xbc>)
 8004318:	0023      	movs	r3, r4
 800431a:	0032      	movs	r2, r6
 800431c:	491b      	ldr	r1, [pc, #108]	; (800438c <DisplayPortsDir+0xc8>)
 800431e:	0038      	movs	r0, r7
 8004320:	f011 f9fe 	bl	8015720 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004324:	0038      	movs	r0, r7
 8004326:	f7fb fef7 	bl	8000118 <strlen>
 800432a:	b282      	uxth	r2, r0
 800432c:	2301      	movs	r3, #1
 800432e:	425b      	negs	r3, r3
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	3333      	adds	r3, #51	; 0x33
 8004334:	0039      	movs	r1, r7
 8004336:	0028      	movs	r0, r5
 8004338:	f00b fa88 	bl	800f84c <writePxMutex>
 800433c:	e7dd      	b.n	80042fa <DisplayPortsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 800433e:	3601      	adds	r6, #1
 8004340:	b2f6      	uxtb	r6, r6
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <DisplayPortsDir+0xcc>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	42b3      	cmp	r3, r6
 8004348:	d301      	bcc.n	800434e <DisplayPortsDir+0x8a>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800434a:	2401      	movs	r4, #1
 800434c:	e7d7      	b.n	80042fe <DisplayPortsDir+0x3a>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 800434e:	4c0c      	ldr	r4, [pc, #48]	; (8004380 <DisplayPortsDir+0xbc>)
 8004350:	4910      	ldr	r1, [pc, #64]	; (8004394 <DisplayPortsDir+0xd0>)
 8004352:	0023      	movs	r3, r4
 8004354:	000a      	movs	r2, r1
 8004356:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004358:	c343      	stmia	r3!, {r0, r1, r6}
 800435a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800435c:	c343      	stmia	r3!, {r0, r1, r6}
 800435e:	ca03      	ldmia	r2!, {r0, r1}
 8004360:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004362:	0020      	movs	r0, r4
 8004364:	f7fb fed8 	bl	8000118 <strlen>
 8004368:	b282      	uxth	r2, r0
 800436a:	2301      	movs	r3, #1
 800436c:	425b      	negs	r3, r3
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	3333      	adds	r3, #51	; 0x33
 8004372:	0021      	movs	r1, r4
 8004374:	0028      	movs	r0, r5
 8004376:	f00b fa69 	bl	800f84c <writePxMutex>
	HAL_MAX_DELAY);
}
 800437a:	b003      	add	sp, #12
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20001090 	.word	0x20001090
 8004384:	08019e74 	.word	0x08019e74
 8004388:	20007238 	.word	0x20007238
 800438c:	08019e90 	.word	0x08019e90
 8004390:	2000001c 	.word	0x2000001c
 8004394:	08019ea4 	.word	0x08019ea4

08004398 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	46c6      	mov	lr, r8
 800439c:	b500      	push	{lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80043a2:	f00b fca9 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 80043a6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 80043a8:	2300      	movs	r3, #0
 80043aa:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 80043ac:	4b93      	ldr	r3, [pc, #588]	; (80045fc <DisplayModuleStatus+0x264>)
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	4d93      	ldr	r5, [pc, #588]	; (8004600 <DisplayModuleStatus+0x268>)
 80043b2:	4994      	ldr	r1, [pc, #592]	; (8004604 <DisplayModuleStatus+0x26c>)
 80043b4:	0028      	movs	r0, r5
 80043b6:	f011 f9b3 	bl	8015720 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043ba:	0029      	movs	r1, r5
 80043bc:	0020      	movs	r0, r4
 80043be:	f011 f9cf 	bl	8015760 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80043c2:	4b91      	ldr	r3, [pc, #580]	; (8004608 <DisplayModuleStatus+0x270>)
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	4991      	ldr	r1, [pc, #580]	; (800460c <DisplayModuleStatus+0x274>)
 80043c8:	0028      	movs	r0, r5
 80043ca:	f011 f9a9 	bl	8015720 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043ce:	0029      	movs	r1, r5
 80043d0:	0020      	movs	r0, r4
 80043d2:	f011 f9c5 	bl	8015760 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80043d6:	2305      	movs	r3, #5
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	3b03      	subs	r3, #3
 80043dc:	2200      	movs	r2, #0
 80043de:	498c      	ldr	r1, [pc, #560]	; (8004610 <DisplayModuleStatus+0x278>)
 80043e0:	0028      	movs	r0, r5
 80043e2:	f011 f99d 	bl	8015720 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80043e6:	0029      	movs	r1, r5
 80043e8:	0020      	movs	r0, r4
 80043ea:	f011 f9b9 	bl	8015760 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80043ee:	4a89      	ldr	r2, [pc, #548]	; (8004614 <DisplayModuleStatus+0x27c>)
 80043f0:	4989      	ldr	r1, [pc, #548]	; (8004618 <DisplayModuleStatus+0x280>)
 80043f2:	0028      	movs	r0, r5
 80043f4:	f011 f994 	bl	8015720 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043f8:	0029      	movs	r1, r5
 80043fa:	0020      	movs	r0, r4
 80043fc:	f011 f9b0 	bl	8015760 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8004400:	4a86      	ldr	r2, [pc, #536]	; (800461c <DisplayModuleStatus+0x284>)
 8004402:	4987      	ldr	r1, [pc, #540]	; (8004620 <DisplayModuleStatus+0x288>)
 8004404:	0028      	movs	r0, r5
 8004406:	f011 f98b 	bl	8015720 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800440a:	0029      	movs	r1, r5
 800440c:	0020      	movs	r0, r4
 800440e:	f011 f9a7 	bl	8015760 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004412:	4b84      	ldr	r3, [pc, #528]	; (8004624 <DisplayModuleStatus+0x28c>)
 8004414:	002a      	movs	r2, r5
 8004416:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004418:	c243      	stmia	r2!, {r0, r1, r6}
 800441a:	0019      	movs	r1, r3
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	888b      	ldrh	r3, [r1, #4]
 8004422:	8093      	strh	r3, [r2, #4]
 8004424:	798b      	ldrb	r3, [r1, #6]
 8004426:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004428:	0029      	movs	r1, r5
 800442a:	0020      	movs	r0, r4
 800442c:	f011 f998 	bl	8015760 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004430:	2501      	movs	r5, #1
 8004432:	e00d      	b.n	8004450 <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004434:	4b72      	ldr	r3, [pc, #456]	; (8004600 <DisplayModuleStatus+0x268>)
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <DisplayModuleStatus+0x290>)
 8004438:	6811      	ldr	r1, [r2, #0]
 800443a:	6019      	str	r1, [r3, #0]
 800443c:	8891      	ldrh	r1, [r2, #4]
 800443e:	8099      	strh	r1, [r3, #4]
 8004440:	7992      	ldrb	r2, [r2, #6]
 8004442:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004444:	496e      	ldr	r1, [pc, #440]	; (8004600 <DisplayModuleStatus+0x268>)
 8004446:	0020      	movs	r0, r4
 8004448:	f011 f98a 	bl	8015760 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800444c:	3501      	adds	r5, #1
 800444e:	b2ed      	uxtb	r5, r5
 8004450:	2d05      	cmp	r5, #5
 8004452:	d83b      	bhi.n	80044cc <DisplayModuleStatus+0x134>
		sprintf(pcUserMessage,"P%d: ",i);
 8004454:	4e6a      	ldr	r6, [pc, #424]	; (8004600 <DisplayModuleStatus+0x268>)
 8004456:	002a      	movs	r2, r5
 8004458:	4974      	ldr	r1, [pc, #464]	; (800462c <DisplayModuleStatus+0x294>)
 800445a:	0030      	movs	r0, r6
 800445c:	f011 f960 	bl	8015720 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004460:	0031      	movs	r1, r6
 8004462:	0020      	movs	r0, r4
 8004464:	f011 f97c 	bl	8015760 <strcat>
		switch(portStatus[i]){
 8004468:	4b71      	ldr	r3, [pc, #452]	; (8004630 <DisplayModuleStatus+0x298>)
 800446a:	5d5b      	ldrb	r3, [r3, r5]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d8e9      	bhi.n	8004444 <DisplayModuleStatus+0xac>
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a70      	ldr	r2, [pc, #448]	; (8004634 <DisplayModuleStatus+0x29c>)
 8004474:	58d3      	ldr	r3, [r2, r3]
 8004476:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004478:	4961      	ldr	r1, [pc, #388]	; (8004600 <DisplayModuleStatus+0x268>)
 800447a:	486f      	ldr	r0, [pc, #444]	; (8004638 <DisplayModuleStatus+0x2a0>)
 800447c:	000b      	movs	r3, r1
 800447e:	0002      	movs	r2, r0
 8004480:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004482:	c343      	stmia	r3!, {r0, r1, r6}
 8004484:	ca03      	ldmia	r2!, {r0, r1}
 8004486:	c303      	stmia	r3!, {r0, r1}
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	701a      	strb	r2, [r3, #0]
				break;
 800448c:	e7da      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Streaming\n\r");
 800448e:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <DisplayModuleStatus+0x268>)
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <DisplayModuleStatus+0x2a4>)
 8004492:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004494:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8004496:	e7d5      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004498:	4959      	ldr	r1, [pc, #356]	; (8004600 <DisplayModuleStatus+0x268>)
 800449a:	4869      	ldr	r0, [pc, #420]	; (8004640 <DisplayModuleStatus+0x2a8>)
 800449c:	000b      	movs	r3, r1
 800449e:	0002      	movs	r2, r0
 80044a0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044a2:	c343      	stmia	r3!, {r0, r1, r6}
 80044a4:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044a6:	c343      	stmia	r3!, {r0, r1, r6}
 80044a8:	8812      	ldrh	r2, [r2, #0]
 80044aa:	801a      	strh	r2, [r3, #0]
				break;
 80044ac:	e7ca      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80044ae:	4954      	ldr	r1, [pc, #336]	; (8004600 <DisplayModuleStatus+0x268>)
 80044b0:	4864      	ldr	r0, [pc, #400]	; (8004644 <DisplayModuleStatus+0x2ac>)
 80044b2:	000b      	movs	r3, r1
 80044b4:	0002      	movs	r2, r0
 80044b6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044b8:	c343      	stmia	r3!, {r0, r1, r6}
 80044ba:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044bc:	c343      	stmia	r3!, {r0, r1, r6}
 80044be:	6811      	ldr	r1, [r2, #0]
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	8891      	ldrh	r1, [r2, #4]
 80044c4:	8099      	strh	r1, [r3, #4]
 80044c6:	7992      	ldrb	r2, [r2, #6]
 80044c8:	719a      	strb	r2, [r3, #6]
				break;
 80044ca:	e7bb      	b.n	8004444 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80044cc:	494c      	ldr	r1, [pc, #304]	; (8004600 <DisplayModuleStatus+0x268>)
 80044ce:	485e      	ldr	r0, [pc, #376]	; (8004648 <DisplayModuleStatus+0x2b0>)
 80044d0:	000b      	movs	r3, r1
 80044d2:	0002      	movs	r2, r0
 80044d4:	ca61      	ldmia	r2!, {r0, r5, r6}
 80044d6:	c361      	stmia	r3!, {r0, r5, r6}
 80044d8:	ca61      	ldmia	r2!, {r0, r5, r6}
 80044da:	c361      	stmia	r3!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80044dc:	0020      	movs	r0, r4
 80044de:	f011 f93f 	bl	8015760 <strcat>
	for(char i =1; i <= 6; i++){
 80044e2:	2601      	movs	r6, #1
 80044e4:	e00b      	b.n	80044fe <DisplayModuleStatus+0x166>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80044e6:	4d46      	ldr	r5, [pc, #280]	; (8004600 <DisplayModuleStatus+0x268>)
 80044e8:	0032      	movs	r2, r6
 80044ea:	4958      	ldr	r1, [pc, #352]	; (800464c <DisplayModuleStatus+0x2b4>)
 80044ec:	0028      	movs	r0, r5
 80044ee:	f011 f917 	bl	8015720 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80044f2:	0029      	movs	r1, r5
 80044f4:	0020      	movs	r0, r4
 80044f6:	f011 f933 	bl	8015760 <strcat>
	for(char i =1; i <= 6; i++){
 80044fa:	3601      	adds	r6, #1
 80044fc:	b2f6      	uxtb	r6, r6
 80044fe:	2e06      	cmp	r6, #6
 8004500:	d822      	bhi.n	8004548 <DisplayModuleStatus+0x1b0>
		if(streamDMA[i - 1].Instance == 0){
 8004502:	1e75      	subs	r5, r6, #1
 8004504:	00eb      	lsls	r3, r5, #3
 8004506:	1b5b      	subs	r3, r3, r5
 8004508:	00da      	lsls	r2, r3, #3
 800450a:	4b51      	ldr	r3, [pc, #324]	; (8004650 <DisplayModuleStatus+0x2b8>)
 800450c:	58d3      	ldr	r3, [r2, r3]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e9      	beq.n	80044e6 <DisplayModuleStatus+0x14e>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004512:	00eb      	lsls	r3, r5, #3
 8004514:	1b5b      	subs	r3, r3, r5
 8004516:	00da      	lsls	r2, r3, #3
 8004518:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <DisplayModuleStatus+0x2b8>)
 800451a:	189b      	adds	r3, r3, r2
 800451c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800451e:	f007 fd43 	bl	800bfa8 <GetPort>
 8004522:	9003      	str	r0, [sp, #12]
 8004524:	00ad      	lsls	r5, r5, #2
 8004526:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <DisplayModuleStatus+0x2bc>)
 8004528:	58e8      	ldr	r0, [r5, r3]
 800452a:	f007 fd3d 	bl	800bfa8 <GetPort>
 800452e:	4d34      	ldr	r5, [pc, #208]	; (8004600 <DisplayModuleStatus+0x268>)
 8004530:	9000      	str	r0, [sp, #0]
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	0032      	movs	r2, r6
 8004536:	4948      	ldr	r1, [pc, #288]	; (8004658 <DisplayModuleStatus+0x2c0>)
 8004538:	0028      	movs	r0, r5
 800453a:	f011 f8f1 	bl	8015720 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800453e:	0029      	movs	r1, r5
 8004540:	0020      	movs	r0, r4
 8004542:	f011 f90d 	bl	8015760 <strcat>
 8004546:	e7d8      	b.n	80044fa <DisplayModuleStatus+0x162>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004548:	0020      	movs	r0, r4
 800454a:	f7fb fde5 	bl	8000118 <strlen>
 800454e:	1820      	adds	r0, r4, r0
 8004550:	2203      	movs	r2, #3
 8004552:	4942      	ldr	r1, [pc, #264]	; (800465c <DisplayModuleStatus+0x2c4>)
 8004554:	f010 fee1 	bl	801531a <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004558:	0020      	movs	r0, r4
 800455a:	f7fb fddd 	bl	8000118 <strlen>
 800455e:	1820      	adds	r0, r4, r0
 8004560:	221d      	movs	r2, #29
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <DisplayModuleStatus+0x2c8>)
 8004564:	f010 fed9 	bl	801531a <memcpy>
	temp =strlen((char* )pcOutputString);
 8004568:	0020      	movs	r0, r4
 800456a:	f7fb fdd5 	bl	8000118 <strlen>
 800456e:	4680      	mov	r8, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004570:	2501      	movs	r5, #1
 8004572:	e001      	b.n	8004578 <DisplayModuleStatus+0x1e0>
 8004574:	3501      	adds	r5, #1
 8004576:	b2ed      	uxtb	r5, r5
 8004578:	2d05      	cmp	r5, #5
 800457a:	d816      	bhi.n	80045aa <DisplayModuleStatus+0x212>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <DisplayModuleStatus+0x264>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	3b01      	subs	r3, #1
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4a37      	ldr	r2, [pc, #220]	; (8004664 <DisplayModuleStatus+0x2cc>)
 8004586:	5a9a      	ldrh	r2, [r3, r2]
 8004588:	1e69      	subs	r1, r5, #1
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	410b      	asrs	r3, r1
 8004590:	4213      	tst	r3, r2
 8004592:	d0ef      	beq.n	8004574 <DisplayModuleStatus+0x1dc>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004594:	4e1a      	ldr	r6, [pc, #104]	; (8004600 <DisplayModuleStatus+0x268>)
 8004596:	002a      	movs	r2, r5
 8004598:	4933      	ldr	r1, [pc, #204]	; (8004668 <DisplayModuleStatus+0x2d0>)
 800459a:	0030      	movs	r0, r6
 800459c:	f011 f8c0 	bl	8015720 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80045a0:	0031      	movs	r1, r6
 80045a2:	0020      	movs	r0, r4
 80045a4:	f011 f8dc 	bl	8015760 <strcat>
 80045a8:	e7e4      	b.n	8004574 <DisplayModuleStatus+0x1dc>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80045aa:	0020      	movs	r0, r4
 80045ac:	f7fb fdb4 	bl	8000118 <strlen>
 80045b0:	4643      	mov	r3, r8
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	4298      	cmp	r0, r3
 80045b8:	d00d      	beq.n	80045d6 <DisplayModuleStatus+0x23e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80045ba:	0020      	movs	r0, r4
 80045bc:	f7fb fdac 	bl	8000118 <strlen>
 80045c0:	1820      	adds	r0, r4, r0
 80045c2:	2203      	movs	r2, #3
 80045c4:	4925      	ldr	r1, [pc, #148]	; (800465c <DisplayModuleStatus+0x2c4>)
 80045c6:	f010 fea8 	bl	801531a <memcpy>
	
	/* Display output */
	if(port)
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d109      	bne.n	80045e2 <DisplayModuleStatus+0x24a>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80045ce:	b004      	add	sp, #16
 80045d0:	bc04      	pop	{r2}
 80045d2:	4690      	mov	r8, r2
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80045d6:	1820      	adds	r0, r4, r0
 80045d8:	2205      	movs	r2, #5
 80045da:	4924      	ldr	r1, [pc, #144]	; (800466c <DisplayModuleStatus+0x2d4>)
 80045dc:	f010 fe9d 	bl	801531a <memcpy>
 80045e0:	e7eb      	b.n	80045ba <DisplayModuleStatus+0x222>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80045e2:	0020      	movs	r0, r4
 80045e4:	f7fb fd98 	bl	8000118 <strlen>
 80045e8:	b282      	uxth	r2, r0
 80045ea:	2301      	movs	r3, #1
 80045ec:	425b      	negs	r3, r3
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	3333      	adds	r3, #51	; 0x33
 80045f2:	0021      	movs	r1, r4
 80045f4:	0038      	movs	r0, r7
 80045f6:	f00b f929 	bl	800f84c <writePxMutex>
}
 80045fa:	e7e8      	b.n	80045ce <DisplayModuleStatus+0x236>
 80045fc:	20001066 	.word	0x20001066
 8004600:	20001090 	.word	0x20001090
 8004604:	08019cb8 	.word	0x08019cb8
 8004608:	20000a9f 	.word	0x20000a9f
 800460c:	08019cd4 	.word	0x08019cd4
 8004610:	08019cf0 	.word	0x08019cf0
 8004614:	08019d10 	.word	0x08019d10
 8004618:	08019d1c 	.word	0x08019d1c
 800461c:	08019d34 	.word	0x08019d34
 8004620:	08019d40 	.word	0x08019d40
 8004624:	08019d5c 	.word	0x08019d5c
 8004628:	08019d78 	.word	0x08019d78
 800462c:	08019d70 	.word	0x08019d70
 8004630:	200010e0 	.word	0x200010e0
 8004634:	08019c94 	.word	0x08019c94
 8004638:	08019d80 	.word	0x08019d80
 800463c:	08019d98 	.word	0x08019d98
 8004640:	08019da4 	.word	0x08019da4
 8004644:	08019dc0 	.word	0x08019dc0
 8004648:	08019de0 	.word	0x08019de0
 800464c:	08019df8 	.word	0x08019df8
 8004650:	20001d70 	.word	0x20001d70
 8004654:	2000144c 	.word	0x2000144c
 8004658:	08019e14 	.word	0x08019e14
 800465c:	08019d6c 	.word	0x08019d6c
 8004660:	08019e44 	.word	0x08019e44
 8004664:	20007238 	.word	0x20007238
 8004668:	08019e64 	.word	0x08019e64
 800466c:	08019e6c 	.word	0x08019e6c

08004670 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004674:	4929      	ldr	r1, [pc, #164]	; (800471c <GetID+0xac>)
 8004676:	f7fb fd45 	bl	8000104 <strcmp>
 800467a:	2800      	cmp	r0, #0
 800467c:	d00a      	beq.n	8004694 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 800467e:	4928      	ldr	r1, [pc, #160]	; (8004720 <GetID+0xb0>)
 8004680:	0028      	movs	r0, r5
 8004682:	f7fb fd3f 	bl	8000104 <strcmp>
 8004686:	2800      	cmp	r0, #0
 8004688:	d044      	beq.n	8004714 <GetID+0xa4>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800468a:	782e      	ldrb	r6, [r5, #0]
 800468c:	2e23      	cmp	r6, #35	; 0x23
 800468e:	d004      	beq.n	800469a <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004690:	2400      	movs	r4, #0
 8004692:	e016      	b.n	80046c2 <GetID+0x52>
		return myID;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <GetID+0xb4>)
 8004696:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 800469a:	1c68      	adds	r0, r5, #1
 800469c:	f010 fbb3 	bl	8014e06 <atol>
 80046a0:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d003      	beq.n	80046ae <GetID+0x3e>
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <GetID+0xb8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	4283      	cmp	r3, r0
 80046ac:	d205      	bcs.n	80046ba <GetID+0x4a>
		else if(id == myID)
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <GetID+0xb4>)
 80046b0:	781c      	ldrb	r4, [r3, #0]
 80046b2:	4284      	cmp	r4, r0
 80046b4:	d130      	bne.n	8004718 <GetID+0xa8>
			return myID;
 80046b6:	b220      	sxth	r0, r4
 80046b8:	e7ee      	b.n	8004698 <GetID+0x28>
			return id;
 80046ba:	b200      	sxth	r0, r0
 80046bc:	e7ec      	b.n	8004698 <GetID+0x28>
		for(i =0; i < N; i++){
 80046be:	3401      	adds	r4, #1
 80046c0:	b2e4      	uxtb	r4, r4
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <GetID+0xb8>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90d      	bls.n	80046e6 <GetID+0x76>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80046ca:	00a3      	lsls	r3, r4, #2
 80046cc:	191b      	adds	r3, r3, r4
 80046ce:	0059      	lsls	r1, r3, #1
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <GetID+0xbc>)
 80046d2:	18c9      	adds	r1, r1, r3
 80046d4:	0028      	movs	r0, r5
 80046d6:	f7fb fd15 	bl	8000104 <strcmp>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d1ef      	bne.n	80046be <GetID+0x4e>
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d0ed      	beq.n	80046be <GetID+0x4e>
				return (i);
 80046e2:	b220      	sxth	r0, r4
 80046e4:	e7d8      	b.n	8004698 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 80046e6:	2600      	movs	r6, #0
 80046e8:	2e09      	cmp	r6, #9
 80046ea:	d811      	bhi.n	8004710 <GetID+0xa0>
			if(!strcmp(string,groupAlias[i]))
 80046ec:	00b3      	lsls	r3, r6, #2
 80046ee:	199b      	adds	r3, r3, r6
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	490f      	ldr	r1, [pc, #60]	; (8004730 <GetID+0xc0>)
 80046f4:	1889      	adds	r1, r1, r2
 80046f6:	0028      	movs	r0, r5
 80046f8:	f7fb fd04 	bl	8000104 <strcmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d002      	beq.n	8004706 <GetID+0x96>
		for(i =0; i < MaxNumOfGroups; i++){
 8004700:	3601      	adds	r6, #1
 8004702:	b2f6      	uxtb	r6, r6
 8004704:	e7f0      	b.n	80046e8 <GetID+0x78>
				return (BOS_MULTICAST | (i << 8));
 8004706:	0234      	lsls	r4, r6, #8
 8004708:	20fe      	movs	r0, #254	; 0xfe
 800470a:	4320      	orrs	r0, r4
 800470c:	b200      	sxth	r0, r0
 800470e:	e7c3      	b.n	8004698 <GetID+0x28>
		return BOS_ERR_WrongName;
 8004710:	2064      	movs	r0, #100	; 0x64
 8004712:	e7c1      	b.n	8004698 <GetID+0x28>
		return BOS_BROADCAST;
 8004714:	20ff      	movs	r0, #255	; 0xff
 8004716:	e7bf      	b.n	8004698 <GetID+0x28>
			return BOS_ERR_WrongID;
 8004718:	2066      	movs	r0, #102	; 0x66
 800471a:	e7bd      	b.n	8004698 <GetID+0x28>
 800471c:	08019ef8 	.word	0x08019ef8
 8004720:	08019efc 	.word	0x08019efc
 8004724:	20001066 	.word	0x20001066
 8004728:	2000001c 	.word	0x2000001c
 800472c:	20000f58 	.word	0x20000f58
 8004730:	20000e4c 	.word	0x20000e4c

08004734 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	0006      	movs	r6, r0
 8004738:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 800473a:	2400      	movs	r4, #0
 800473c:	2c03      	cmp	r4, #3
 800473e:	dc09      	bgt.n	8004754 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 8004740:	00a3      	lsls	r3, r4, #2
 8004742:	4929      	ldr	r1, [pc, #164]	; (80047e8 <NameModule+0xb4>)
 8004744:	18c9      	adds	r1, r1, r3
 8004746:	0028      	movs	r0, r5
 8004748:	f7fb fcdc 	bl	8000104 <strcmp>
 800474c:	2800      	cmp	r0, #0
 800474e:	d043      	beq.n	80047d8 <NameModule+0xa4>
	for(i =0; i < NumOfKeywords; i++){
 8004750:	3401      	adds	r4, #1
 8004752:	e7f3      	b.n	800473c <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004754:	2401      	movs	r4, #1
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <NameModule+0xb8>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	42a3      	cmp	r3, r4
 800475c:	dd0b      	ble.n	8004776 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 800475e:	00a3      	lsls	r3, r4, #2
 8004760:	191b      	adds	r3, r3, r4
 8004762:	0059      	lsls	r1, r3, #1
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <NameModule+0xbc>)
 8004766:	18c9      	adds	r1, r1, r3
 8004768:	0028      	movs	r0, r5
 800476a:	f7fb fccb 	bl	8000104 <strcmp>
 800476e:	2800      	cmp	r0, #0
 8004770:	d034      	beq.n	80047dc <NameModule+0xa8>
	for(i =1; i < N; i++){
 8004772:	3401      	adds	r4, #1
 8004774:	e7ef      	b.n	8004756 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 8004776:	2400      	movs	r4, #0
 8004778:	2c09      	cmp	r4, #9
 800477a:	dc0b      	bgt.n	8004794 <NameModule+0x60>
		if(!strcmp(alias,groupAlias[i]))
 800477c:	00a3      	lsls	r3, r4, #2
 800477e:	191b      	adds	r3, r3, r4
 8004780:	005a      	lsls	r2, r3, #1
 8004782:	491c      	ldr	r1, [pc, #112]	; (80047f4 <NameModule+0xc0>)
 8004784:	1889      	adds	r1, r1, r2
 8004786:	0028      	movs	r0, r5
 8004788:	f7fb fcbc 	bl	8000104 <strcmp>
 800478c:	2800      	cmp	r0, #0
 800478e:	d027      	beq.n	80047e0 <NameModule+0xac>
	for(i =0; i < MaxNumOfGroups; i++){
 8004790:	3401      	adds	r4, #1
 8004792:	e7f1      	b.n	8004778 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <NameModule+0xc4>)
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <NameModule+0xc8>)
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <NameModule+0xc4>)
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	2c00      	cmp	r4, #0
 80047a0:	d00f      	beq.n	80047c2 <NameModule+0x8e>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80047a6:	0038      	movs	r0, r7
 80047a8:	f7fb fcb6 	bl	8000118 <strlen>
 80047ac:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80047ae:	0039      	movs	r1, r7
 80047b0:	0028      	movs	r0, r5
 80047b2:	f010 fff9 	bl	80157a8 <strncmp>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d014      	beq.n	80047e4 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <NameModule+0xc4>)
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e7eb      	b.n	800479a <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80047c2:	00b3      	lsls	r3, r6, #2
 80047c4:	199e      	adds	r6, r3, r6
 80047c6:	0070      	lsls	r0, r6, #1
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <NameModule+0xbc>)
 80047ca:	18c0      	adds	r0, r0, r3
 80047cc:	0029      	movs	r1, r5
 80047ce:	f010 ffe3 	bl	8015798 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80047d2:	f7ff f901 	bl	80039d8 <SaveEEalias>
	
	return result;
 80047d6:	e002      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_Keyword;
 80047d8:	2006      	movs	r0, #6
 80047da:	e000      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 80047dc:	2007      	movs	r0, #7
}
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80047e0:	2007      	movs	r0, #7
 80047e2:	e7fc      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 80047e4:	2008      	movs	r0, #8
 80047e6:	e7fa      	b.n	80047de <NameModule+0xaa>
 80047e8:	08019ca8 	.word	0x08019ca8
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	20000f58 	.word	0x20000f58
 80047f4:	20000e4c 	.word	0x20000e4c
 80047f8:	200010e8 	.word	0x200010e8
 80047fc:	200000c0 	.word	0x200000c0

08004800 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	0006      	movs	r6, r0
 8004804:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004806:	2400      	movs	r4, #0
 8004808:	2c09      	cmp	r4, #9
 800480a:	dc14      	bgt.n	8004836 <AddModuleToGroup+0x36>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800480c:	00a3      	lsls	r3, r4, #2
 800480e:	191b      	adds	r3, r3, r4
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	4933      	ldr	r1, [pc, #204]	; (80048e0 <AddModuleToGroup+0xe0>)
 8004814:	1889      	adds	r1, r1, r2
 8004816:	0028      	movs	r0, r5
 8004818:	f7fb fc74 	bl	8000104 <strcmp>
 800481c:	2800      	cmp	r0, #0
 800481e:	d001      	beq.n	8004824 <AddModuleToGroup+0x24>
	for(i =0; i < MaxNumOfGroups; i++){
 8004820:	3401      	adds	r4, #1
 8004822:	e7f1      	b.n	8004808 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 8004824:	3e01      	subs	r6, #1
 8004826:	2201      	movs	r2, #1
 8004828:	40a2      	lsls	r2, r4
 800482a:	492e      	ldr	r1, [pc, #184]	; (80048e4 <AddModuleToGroup+0xe4>)
 800482c:	0076      	lsls	r6, r6, #1
 800482e:	5a73      	ldrh	r3, [r6, r1]
 8004830:	4313      	orrs	r3, r2
 8004832:	5273      	strh	r3, [r6, r1]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 8004836:	2400      	movs	r4, #0
 8004838:	2c03      	cmp	r4, #3
 800483a:	dc09      	bgt.n	8004850 <AddModuleToGroup+0x50>
		if(!strcmp(group,BOSkeywords[j]))
 800483c:	00a3      	lsls	r3, r4, #2
 800483e:	492a      	ldr	r1, [pc, #168]	; (80048e8 <AddModuleToGroup+0xe8>)
 8004840:	18c9      	adds	r1, r1, r3
 8004842:	0028      	movs	r0, r5
 8004844:	f7fb fc5e 	bl	8000104 <strcmp>
 8004848:	2800      	cmp	r0, #0
 800484a:	d045      	beq.n	80048d8 <AddModuleToGroup+0xd8>
	for(j =0; j < NumOfKeywords; j++){
 800484c:	3401      	adds	r4, #1
 800484e:	e7f3      	b.n	8004838 <AddModuleToGroup+0x38>
	for(j =1; j < N; j++){
 8004850:	2401      	movs	r4, #1
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <AddModuleToGroup+0xec>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	42a3      	cmp	r3, r4
 8004858:	dd0b      	ble.n	8004872 <AddModuleToGroup+0x72>
		if(!strcmp(group,moduleAlias[j]))
 800485a:	00a3      	lsls	r3, r4, #2
 800485c:	191b      	adds	r3, r3, r4
 800485e:	0059      	lsls	r1, r3, #1
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <AddModuleToGroup+0xf0>)
 8004862:	18c9      	adds	r1, r1, r3
 8004864:	0028      	movs	r0, r5
 8004866:	f7fb fc4d 	bl	8000104 <strcmp>
 800486a:	2800      	cmp	r0, #0
 800486c:	d036      	beq.n	80048dc <AddModuleToGroup+0xdc>
	for(j =1; j < N; j++){
 800486e:	3401      	adds	r4, #1
 8004870:	e7ef      	b.n	8004852 <AddModuleToGroup+0x52>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <AddModuleToGroup+0xf4>)
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <AddModuleToGroup+0xf8>)
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e002      	b.n	8004880 <AddModuleToGroup+0x80>
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <AddModuleToGroup+0xf4>)
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <AddModuleToGroup+0xf4>)
 8004882:	681c      	ldr	r4, [r3, #0]
 8004884:	2c00      	cmp	r4, #0
 8004886:	d01c      	beq.n	80048c2 <AddModuleToGroup+0xc2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800488c:	0038      	movs	r0, r7
 800488e:	f7fb fc43 	bl	8000118 <strlen>
 8004892:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004894:	0039      	movs	r1, r7
 8004896:	0028      	movs	r0, r5
 8004898:	f010 ff86 	bl	80157a8 <strncmp>
 800489c:	2800      	cmp	r0, #0
 800489e:	d1ec      	bne.n	800487a <AddModuleToGroup+0x7a>
			return BOS_ERR_ExistingCmd;
 80048a0:	2008      	movs	r0, #8
 80048a2:	e7c7      	b.n	8004834 <AddModuleToGroup+0x34>
			strcpy(groupAlias[i],group);
 80048a4:	480e      	ldr	r0, [pc, #56]	; (80048e0 <AddModuleToGroup+0xe0>)
 80048a6:	1880      	adds	r0, r0, r2
 80048a8:	0029      	movs	r1, r5
 80048aa:	f010 ff75 	bl	8015798 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80048ae:	3e01      	subs	r6, #1
 80048b0:	2201      	movs	r2, #1
 80048b2:	40a2      	lsls	r2, r4
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <AddModuleToGroup+0xe4>)
 80048b6:	0076      	lsls	r6, r6, #1
 80048b8:	5a73      	ldrh	r3, [r6, r1]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	5273      	strh	r3, [r6, r1]
	return result;
 80048be:	2000      	movs	r0, #0
 80048c0:	e7b8      	b.n	8004834 <AddModuleToGroup+0x34>
	for(i =0; i < MaxNumOfGroups; i++){
 80048c2:	2c09      	cmp	r4, #9
 80048c4:	dcf3      	bgt.n	80048ae <AddModuleToGroup+0xae>
		if(!groupAlias[i][0]){
 80048c6:	00a3      	lsls	r3, r4, #2
 80048c8:	191b      	adds	r3, r3, r4
 80048ca:	005a      	lsls	r2, r3, #1
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <AddModuleToGroup+0xe0>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0e7      	beq.n	80048a4 <AddModuleToGroup+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 80048d4:	3401      	adds	r4, #1
 80048d6:	e7f4      	b.n	80048c2 <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 80048d8:	2006      	movs	r0, #6
 80048da:	e7ab      	b.n	8004834 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 80048dc:	2007      	movs	r0, #7
 80048de:	e7a9      	b.n	8004834 <AddModuleToGroup+0x34>
 80048e0:	20000e4c 	.word	0x20000e4c
 80048e4:	20000eb0 	.word	0x20000eb0
 80048e8:	08019ca8 	.word	0x08019ca8
 80048ec:	2000001c 	.word	0x2000001c
 80048f0:	20000f58 	.word	0x20000f58
 80048f4:	200010ec 	.word	0x200010ec
 80048f8:	200000c0 	.word	0x200000c0

080048fc <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80048fc:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80048fe:	2601      	movs	r6, #1
	BOS_Status result =BOS_OK;
 8004900:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8004902:	e01d      	b.n	8004940 <ReadPortsDir+0x44>
				result =BOS_ERR_NoResponse;
			}
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004904:	3401      	adds	r4, #1
 8004906:	b2e4      	uxtb	r4, r4
 8004908:	2c05      	cmp	r4, #5
 800490a:	d817      	bhi.n	800493c <ReadPortsDir+0x40>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800490c:	0020      	movs	r0, r4
 800490e:	f00a ff7f 	bl	800f810 <GetUart>
 8004912:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	429a      	cmp	r2, r3
 800491a:	d1f3      	bne.n	8004904 <ReadPortsDir+0x8>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <ReadPortsDir+0x74>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	1e61      	subs	r1, r4, #1
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	0212      	lsls	r2, r2, #8
 8004928:	410a      	asrs	r2, r1
 800492a:	0011      	movs	r1, r2
 800492c:	4811      	ldr	r0, [pc, #68]	; (8004974 <ReadPortsDir+0x78>)
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	5a1a      	ldrh	r2, [r3, r0]
 8004932:	430a      	orrs	r2, r1
 8004934:	521a      	strh	r2, [r3, r0]
 8004936:	e7e5      	b.n	8004904 <ReadPortsDir+0x8>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004938:	2401      	movs	r4, #1
 800493a:	e7e5      	b.n	8004908 <ReadPortsDir+0xc>
	for(uint8_t i =1; i <= N; i++){
 800493c:	3601      	adds	r6, #1
 800493e:	b2f6      	uxtb	r6, r6
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <ReadPortsDir+0x7c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	42b3      	cmp	r3, r6
 8004946:	d311      	bcc.n	800496c <ReadPortsDir+0x70>
		if(i != myID){
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <ReadPortsDir+0x74>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	42b3      	cmp	r3, r6
 800494e:	d0f3      	beq.n	8004938 <ReadPortsDir+0x3c>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004950:	2200      	movs	r2, #0
 8004952:	2113      	movs	r1, #19
 8004954:	0030      	movs	r0, r6
 8004956:	f005 f8e1 	bl	8009b1c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800495a:	2032      	movs	r0, #50	; 0x32
 800495c:	f00a fdc4 	bl	800f4e8 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <ReadPortsDir+0x80>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e9      	beq.n	800493c <ReadPortsDir+0x40>
				result =BOS_ERR_NoResponse;
 8004968:	2502      	movs	r5, #2
 800496a:	e7e7      	b.n	800493c <ReadPortsDir+0x40>
			}
		}
	}
	
	return result;
}
 800496c:	0028      	movs	r0, r5
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	20001066 	.word	0x20001066
 8004974:	20007238 	.word	0x20007238
 8004978:	2000001c 	.word	0x2000001c
 800497c:	200010f8 	.word	0x200010f8

08004980 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004980:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004982:	2401      	movs	r4, #1
 8004984:	e007      	b.n	8004996 <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004986:	0020      	movs	r0, r4
 8004988:	f00a ff42 	bl	800f810 <GetUart>
 800498c:	2101      	movs	r1, #1
 800498e:	f00a ffd7 	bl	800f940 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004992:	3401      	adds	r4, #1
 8004994:	b2e4      	uxtb	r4, r4
 8004996:	2c05      	cmp	r4, #5
 8004998:	d812      	bhi.n	80049c0 <UpdateMyPortsDir+0x40>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <UpdateMyPortsDir+0x44>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <UpdateMyPortsDir+0x48>)
 80049a4:	5a9a      	ldrh	r2, [r3, r2]
 80049a6:	1e61      	subs	r1, r4, #1
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	410b      	asrs	r3, r1
 80049ae:	4213      	tst	r3, r2
 80049b0:	d1e9      	bne.n	8004986 <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p),NORMAL);
 80049b2:	0020      	movs	r0, r4
 80049b4:	f00a ff2c 	bl	800f810 <GetUart>
 80049b8:	2100      	movs	r1, #0
 80049ba:	f00a ffc1 	bl	800f940 <SwapUartPins>
 80049be:	e7e8      	b.n	8004992 <UpdateMyPortsDir+0x12>
		}
	}
	
	return result;
}
 80049c0:	2000      	movs	r0, #0
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	20001066 	.word	0x20001066
 80049c8:	20007238 	.word	0x20007238

080049cc <BOS_Init>:
void BOS_Init(void){
 80049cc:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80049ce:	f00a fc43 	bl	800f258 <RTC_Init>
	GetTimeDate();
 80049d2:	f00a fce1 	bl	800f398 <GetTimeDate>
	EE_Init();
 80049d6:	f003 fa45 	bl	8007e64 <EE_Init>
	GPIO_Init();
 80049da:	f00a f99d 	bl	800ed18 <GPIO_Init>
	DMA_Init();
 80049de:	f008 ff27 	bl	800d830 <DMA_Init>
	TIM_USEC_Init();
 80049e2:	f00a fd0d 	bl	800f400 <TIM_USEC_Init>
	CRC_Init();
 80049e6:	f00a f945 	bl	800ec74 <CRC_Init>
	TIM_MSEC_Init();
 80049ea:	f00a fd3b 	bl	800f464 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80049ee:	f00a fa47 	bl	800ee80 <IsFactoryReset>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d111      	bne.n	8004a1a <BOS_Init+0x4e>
	if(IsLowerCLIbaud()){
 80049f6:	f7ff f8d5 	bl	8003ba4 <IsLowerCLIbaud>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d053      	beq.n	8004aa6 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <BOS_Init+0x10c>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004a04:	2032      	movs	r0, #50	; 0x32
 8004a06:	f00a fd6f 	bl	800f4e8 <StartMilliDelay>
		Module_Peripheral_Init();
 8004a0a:	f007 f915 	bl	800bc38 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004a0e:	4b33      	ldr	r3, [pc, #204]	; (8004adc <BOS_Init+0x110>)
 8004a10:	22e1      	movs	r2, #225	; 0xe1
 8004a12:	0252      	lsls	r2, r2, #9
 8004a14:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a16:	2401      	movs	r4, #1
 8004a18:	e011      	b.n	8004a3e <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8004a1a:	f7ff f8b1 	bl	8003b80 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a1e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <BOS_Init+0x114>)
 8004a24:	4a2f      	ldr	r2, [pc, #188]	; (8004ae4 <BOS_Init+0x118>)
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	e7fd      	b.n	8004a2c <BOS_Init+0x60>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004a30:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <BOS_Init+0x110>)
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	0020      	movs	r0, r4
 8004a36:	f00a ff79 	bl	800f92c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a3a:	3401      	adds	r4, #1
 8004a3c:	b2e4      	uxtb	r4, r4
 8004a3e:	2c05      	cmp	r4, #5
 8004a40:	d9f6      	bls.n	8004a30 <BOS_Init+0x64>
	LoadEEvars();
 8004a42:	f7fe ff97 	bl	8003974 <LoadEEvars>
	UpdateMyPortsDir();
 8004a46:	f7ff ff9b 	bl	8004980 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004a4a:	f009 fc57 	bl	800e2fc <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <BOS_Init+0x11c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02d      	beq.n	8004ab2 <BOS_Init+0xe6>
		IND_ON();
 8004a56:	2580      	movs	r5, #128	; 0x80
 8004a58:	012d      	lsls	r5, r5, #4
 8004a5a:	2490      	movs	r4, #144	; 0x90
 8004a5c:	05e4      	lsls	r4, r4, #23
 8004a5e:	2201      	movs	r2, #1
 8004a60:	0029      	movs	r1, r5
 8004a62:	0020      	movs	r0, r4
 8004a64:	f00e fca7 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004a68:	20fa      	movs	r0, #250	; 0xfa
 8004a6a:	0040      	lsls	r0, r0, #1
 8004a6c:	f00a fd3c 	bl	800f4e8 <StartMilliDelay>
		IND_OFF();
 8004a70:	2200      	movs	r2, #0
 8004a72:	0029      	movs	r1, r5
 8004a74:	0020      	movs	r0, r4
 8004a76:	f00e fc9e 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004a7a:	2064      	movs	r0, #100	; 0x64
 8004a7c:	f00a fd34 	bl	800f4e8 <StartMilliDelay>
		IND_ON();
 8004a80:	2201      	movs	r2, #1
 8004a82:	0029      	movs	r1, r5
 8004a84:	0020      	movs	r0, r4
 8004a86:	f00e fc96 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004a8a:	2064      	movs	r0, #100	; 0x64
 8004a8c:	f00a fd2c 	bl	800f4e8 <StartMilliDelay>
		IND_OFF();
 8004a90:	2200      	movs	r2, #0
 8004a92:	0029      	movs	r1, r5
 8004a94:	0020      	movs	r0, r4
 8004a96:	f00e fc8e 	bl	80133b6 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004a9a:	f003 f81d 	bl	8007ad8 <ResetUartORE>
	BOS_initialized =1;
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <BOS_Init+0x120>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
}
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004aa6:	2032      	movs	r0, #50	; 0x32
 8004aa8:	f00a fd1e 	bl	800f4e8 <StartMilliDelay>
		Module_Peripheral_Init();
 8004aac:	f007 f8c4 	bl	800bc38 <Module_Peripheral_Init>
 8004ab0:	e7c7      	b.n	8004a42 <BOS_Init+0x76>
		IND_ON();
 8004ab2:	2580      	movs	r5, #128	; 0x80
 8004ab4:	012d      	lsls	r5, r5, #4
 8004ab6:	2490      	movs	r4, #144	; 0x90
 8004ab8:	05e4      	lsls	r4, r4, #23
 8004aba:	2201      	movs	r2, #1
 8004abc:	0029      	movs	r1, r5
 8004abe:	0020      	movs	r0, r4
 8004ac0:	f00e fc79 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004ac4:	20fa      	movs	r0, #250	; 0xfa
 8004ac6:	0040      	lsls	r0, r0, #1
 8004ac8:	f00a fd0e 	bl	800f4e8 <StartMilliDelay>
 8004acc:	2200      	movs	r2, #0
 8004ace:	0029      	movs	r1, r5
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	f00e fc70 	bl	80133b6 <HAL_GPIO_WritePin>
 8004ad6:	e7e0      	b.n	8004a9a <BOS_Init+0xce>
 8004ad8:	20000a9e 	.word	0x20000a9e
 8004adc:	20006da0 	.word	0x20006da0
 8004ae0:	e000ed00 	.word	0xe000ed00
 8004ae4:	05fa0004 	.word	0x05fa0004
 8004ae8:	20001066 	.word	0x20001066
 8004aec:	20000a9d 	.word	0x20000a9d

08004af0 <Module_Init>:
void Module_Init(void){
 8004af0:	b510      	push	{r4, lr}
	HAL_Init();
 8004af2:	f00d f83d 	bl	8011b70 <HAL_Init>
	SystemClock_Config();
 8004af6:	f007 f847 	bl	800bb88 <SystemClock_Config>
	BOS_Init();
 8004afa:	f7ff ff67 	bl	80049cc <BOS_Init>
	MX_FREERTOS_Init();
 8004afe:	f003 fbcf 	bl	80082a0 <MX_FREERTOS_Init>
	osKernelStart();
 8004b02:	f00a ffd2 	bl	800faaa <osKernelStart>
}
 8004b06:	bd10      	pop	{r4, pc}

08004b08 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004b08:	b530      	push	{r4, r5, lr}
 8004b0a:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004b0c:	201e      	movs	r0, #30
 8004b0e:	f010 f9b7 	bl	8014e80 <malloc>
 8004b12:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004b14:	221e      	movs	r2, #30
 8004b16:	2100      	movs	r1, #0
 8004b18:	f010 fc08 	bl	801532c <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004b1c:	4908      	ldr	r1, [pc, #32]	; (8004b40 <GetDateString+0x38>)
 8004b1e:	7d0a      	ldrb	r2, [r1, #20]
 8004b20:	3a01      	subs	r2, #1
 8004b22:	7d8b      	ldrb	r3, [r1, #22]
 8004b24:	7d48      	ldrb	r0, [r1, #21]
 8004b26:	8b09      	ldrh	r1, [r1, #24]
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <GetDateString+0x3c>)
 8004b2c:	5952      	ldr	r2, [r2, r5]
 8004b2e:	9101      	str	r1, [sp, #4]
 8004b30:	9000      	str	r0, [sp, #0]
 8004b32:	4905      	ldr	r1, [pc, #20]	; (8004b48 <GetDateString+0x40>)
 8004b34:	0020      	movs	r0, r4
 8004b36:	f010 fdf3 	bl	8015720 <sprintf>
	return buffer;
}
 8004b3a:	0020      	movs	r0, r4
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
 8004b40:	20006da0 	.word	0x20006da0
 8004b44:	0801a20c 	.word	0x0801a20c
 8004b48:	08019f18 	.word	0x08019f18

08004b4c <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004b4c:	b500      	push	{lr}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <Bridge+0x24>)
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	2301      	movs	r3, #1
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	3b02      	subs	r3, #2
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	3303      	adds	r3, #3
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	000b      	movs	r3, r1
 8004b66:	f004 ffff 	bl	8009b68 <StartScastDMAStream>
}
 8004b6a:	b005      	add	sp, #20
 8004b6c:	bd00      	pop	{pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20001066 	.word	0x20001066

08004b74 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004b74:	b530      	push	{r4, r5, lr}
 8004b76:	b087      	sub	sp, #28
 8004b78:	0004      	movs	r4, r0
 8004b7a:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9304      	str	r3, [sp, #16]
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7fe ff53 	bl	8003a38 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004b92:	1e62      	subs	r2, r4, #1
 8004b94:	00d3      	lsls	r3, r2, #3
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	00da      	lsls	r2, r3, #3
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <Unbridge+0x7c>)
 8004b9c:	58d2      	ldr	r2, [r2, r3]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d007      	beq.n	8004bb2 <Unbridge+0x3e>
 8004ba2:	1e69      	subs	r1, r5, #1
 8004ba4:	00cb      	lsls	r3, r1, #3
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	00d9      	lsls	r1, r3, #3
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <Unbridge+0x7c>)
 8004bac:	58cb      	ldr	r3, [r1, r3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	d115      	bne.n	8004be2 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004bb6:	1e6a      	subs	r2, r5, #1
 8004bb8:	00d3      	lsls	r3, r2, #3
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	00da      	lsls	r2, r3, #3
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <Unbridge+0x7c>)
 8004bc0:	58d3      	ldr	r3, [r2, r3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	f002 fef6 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e006      	b.n	8004bde <Unbridge+0x6a>
		SwitchStreamDMAToMsg(port1);
 8004bd0:	0020      	movs	r0, r4
 8004bd2:	f002 fef1 	bl	80079b8 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004bd6:	0028      	movs	r0, r5
 8004bd8:	f002 feee 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004bdc:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004bde:	b007      	add	sp, #28
 8004be0:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004be2:	0020      	movs	r0, r4
 8004be4:	f002 fee8 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7f8      	b.n	8004bde <Unbridge+0x6a>
		return BOS_ERR_WrongValue;
 8004bec:	2068      	movs	r0, #104	; 0x68
 8004bee:	e7f6      	b.n	8004bde <Unbridge+0x6a>
 8004bf0:	20001d70 	.word	0x20001d70

08004bf4 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	0007      	movs	r7, r0
	for(int i =0; string[i]; i++){
 8004bf8:	2500      	movs	r5, #0
 8004bfa:	e001      	b.n	8004c00 <StringToLowerCase+0xc>
		string[i] =tolower(string[i]);
 8004bfc:	7034      	strb	r4, [r6, #0]
	for(int i =0; string[i]; i++){
 8004bfe:	3501      	adds	r5, #1
 8004c00:	197e      	adds	r6, r7, r5
 8004c02:	7834      	ldrb	r4, [r6, #0]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d009      	beq.n	8004c1c <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 8004c08:	f010 f92c 	bl	8014e64 <__locale_ctype_ptr>
 8004c0c:	1900      	adds	r0, r0, r4
 8004c0e:	7842      	ldrb	r2, [r0, #1]
 8004c10:	2303      	movs	r3, #3
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d1f1      	bne.n	8004bfc <StringToLowerCase+0x8>
 8004c18:	3420      	adds	r4, #32
 8004c1a:	e7ef      	b.n	8004bfc <StringToLowerCase+0x8>
	}
}
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c20 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	46c6      	mov	lr, r8
 8004c24:	b500      	push	{lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c2a:	4bd7      	ldr	r3, [pc, #860]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004c2c:	781c      	ldrb	r4, [r3, #0]
 8004c2e:	2c05      	cmp	r4, #5
 8004c30:	d100      	bne.n	8004c34 <ParseSnippetCondition+0x14>
 8004c32:	e20d      	b.n	8005050 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004c34:	48d5      	ldr	r0, [pc, #852]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004c36:	00a3      	lsls	r3, r4, #2
 8004c38:	191a      	adds	r2, r3, r4
 8004c3a:	0091      	lsls	r1, r2, #2
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004c40:	1840      	adds	r0, r0, r1
 8004c42:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004c44:	3002      	adds	r0, #2
 8004c46:	3204      	adds	r2, #4
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f010 fb6f 	bl	801532c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004c4e:	782b      	ldrb	r3, [r5, #0]
 8004c50:	2b62      	cmp	r3, #98	; 0x62
 8004c52:	d102      	bne.n	8004c5a <ParseSnippetCondition+0x3a>
 8004c54:	78ab      	ldrb	r3, [r5, #2]
 8004c56:	2b2e      	cmp	r3, #46	; 0x2e
 8004c58:	d04f      	beq.n	8004cfa <ParseSnippetCondition+0xda>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004c5a:	4ecd      	ldr	r6, [pc, #820]	; (8004f90 <ParseSnippetCondition+0x370>)
 8004c5c:	0029      	movs	r1, r5
 8004c5e:	0030      	movs	r0, r6
 8004c60:	f010 fd9a 	bl	8015798 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004c64:	4ccb      	ldr	r4, [pc, #812]	; (8004f94 <ParseSnippetCondition+0x374>)
 8004c66:	0021      	movs	r1, r4
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f011 fc15 	bl	8016498 <strtok>
 8004c6e:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004c70:	0021      	movs	r1, r4
 8004c72:	2000      	movs	r0, #0
 8004c74:	f011 fc10 	bl	8016498 <strtok>
 8004c78:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f011 fc0b 	bl	8016498 <strtok>
 8004c82:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004c84:	2d00      	cmp	r5, #0
 8004c86:	d100      	bne.n	8004c8a <ParseSnippetCondition+0x6a>
 8004c88:	e1e9      	b.n	800505e <ParseSnippetCondition+0x43e>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004c8a:	0028      	movs	r0, r5
 8004c8c:	f7fe ffec 	bl	8003c68 <IsModuleParameter>
 8004c90:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004c92:	d002      	beq.n	8004c9a <ParseSnippetCondition+0x7a>
 8004c94:	2e00      	cmp	r6, #0
 8004c96:	d100      	bne.n	8004c9a <ParseSnippetCondition+0x7a>
 8004c98:	e1ac      	b.n	8004ff4 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d100      	bne.n	8004ca0 <ParseSnippetCondition+0x80>
 8004c9e:	e1e0      	b.n	8005062 <ParseSnippetCondition+0x442>
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d100      	bne.n	8004ca6 <ParseSnippetCondition+0x86>
 8004ca4:	e1df      	b.n	8005066 <ParseSnippetCondition+0x446>
				modPar2 =IsModuleParameter(thirdPart);
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fe ffde 	bl	8003c68 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d100      	bne.n	8004cb2 <ParseSnippetCondition+0x92>
 8004cb0:	e1b1      	b.n	8005016 <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004cb2:	4bb5      	ldr	r3, [pc, #724]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cb4:	7819      	ldrb	r1, [r3, #0]
 8004cb6:	4ab5      	ldr	r2, [pc, #724]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	185f      	adds	r7, r3, r1
 8004cbc:	00bc      	lsls	r4, r7, #2
 8004cbe:	2704      	movs	r7, #4
 8004cc0:	54a7      	strb	r7, [r4, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc2:	1914      	adds	r4, r2, r4
 8004cc4:	70e5      	strb	r5, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004cc6:	71e0      	strb	r0, [r4, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cc8:	4daf      	ldr	r5, [pc, #700]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cca:	782c      	ldrb	r4, [r5, #0]
 8004ccc:	0030      	movs	r0, r6
 8004cce:	f7fe ffe5 	bl	8003c9c <IsMathOperator>
 8004cd2:	4aae      	ldr	r2, [pc, #696]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004cd4:	00a1      	lsls	r1, r4, #2
 8004cd6:	1909      	adds	r1, r1, r4
 8004cd8:	008b      	lsls	r3, r1, #2
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cde:	782b      	ldrb	r3, [r5, #0]
 8004ce0:	0099      	lsls	r1, r3, #2
 8004ce2:	18c9      	adds	r1, r1, r3
 8004ce4:	0088      	lsls	r0, r1, #2
 8004ce6:	1812      	adds	r2, r2, r0
 8004ce8:	7852      	ldrb	r2, [r2, #1]
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d100      	bne.n	8004cf0 <ParseSnippetCondition+0xd0>
 8004cee:	e1bc      	b.n	800506a <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	4aa5      	ldr	r2, [pc, #660]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cf4:	7013      	strb	r3, [r2, #0]
				return BOS_OK;
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e1ab      	b.n	8005052 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004cfa:	786e      	ldrb	r6, [r5, #1]
 8004cfc:	3e30      	subs	r6, #48	; 0x30
 8004cfe:	b2f6      	uxtb	r6, r6
 8004d00:	2e05      	cmp	r6, #5
 8004d02:	d900      	bls.n	8004d06 <ParseSnippetCondition+0xe6>
 8004d04:	e1a9      	b.n	800505a <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d06:	4ba1      	ldr	r3, [pc, #644]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d08:	00a2      	lsls	r2, r4, #2
 8004d0a:	1910      	adds	r0, r2, r4
 8004d0c:	0081      	lsls	r1, r0, #2
 8004d0e:	2001      	movs	r0, #1
 8004d10:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004d12:	185b      	adds	r3, r3, r1
 8004d14:	2200      	movs	r2, #0
 8004d16:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004d18:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004d1a:	1cef      	adds	r7, r5, #3
 8004d1c:	3207      	adds	r2, #7
 8004d1e:	499e      	ldr	r1, [pc, #632]	; (8004f98 <ParseSnippetCondition+0x378>)
 8004d20:	0038      	movs	r0, r7
 8004d22:	f010 fd41 	bl	80157a8 <strncmp>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d122      	bne.n	8004d70 <ParseSnippetCondition+0x150>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004d2a:	00a3      	lsls	r3, r4, #2
 8004d2c:	191c      	adds	r4, r3, r4
 8004d2e:	00a2      	lsls	r2, r4, #2
 8004d30:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	2205      	movs	r2, #5
 8004d36:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004d38:	00f2      	lsls	r2, r6, #3
 8004d3a:	1992      	adds	r2, r2, r6
 8004d3c:	4b97      	ldr	r3, [pc, #604]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	7a1b      	ldrb	r3, [r3, #8]
 8004d42:	07db      	lsls	r3, r3, #31
 8004d44:	d505      	bpl.n	8004d52 <ParseSnippetCondition+0x132>
				status =BOS_OK;
 8004d46:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d48:	4a8f      	ldr	r2, [pc, #572]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004d4a:	7813      	ldrb	r3, [r2, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	7013      	strb	r3, [r2, #0]
 8004d50:	e17f      	b.n	8005052 <ParseSnippetCondition+0x432>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004d52:	2301      	movs	r3, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	0030      	movs	r0, r6
 8004d68:	f003 fd3c 	bl	80087e4 <SetButtonEvents>
				status =BOS_OK;
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e7eb      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004d70:	220e      	movs	r2, #14
 8004d72:	498b      	ldr	r1, [pc, #556]	; (8004fa0 <ParseSnippetCondition+0x380>)
 8004d74:	0038      	movs	r0, r7
 8004d76:	f010 fd17 	bl	80157a8 <strncmp>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d11e      	bne.n	8004dbc <ParseSnippetCondition+0x19c>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004d7e:	00a3      	lsls	r3, r4, #2
 8004d80:	191c      	adds	r4, r3, r4
 8004d82:	00a2      	lsls	r2, r4, #2
 8004d84:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	2206      	movs	r2, #6
 8004d8a:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004d8c:	00f2      	lsls	r2, r6, #3
 8004d8e:	1992      	adds	r2, r2, r6
 8004d90:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	7a1b      	ldrb	r3, [r3, #8]
 8004d96:	079b      	lsls	r3, r3, #30
 8004d98:	d501      	bpl.n	8004d9e <ParseSnippetCondition+0x17e>
				status =BOS_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e7d4      	b.n	8004d48 <ParseSnippetCondition+0x128>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004d9e:	2301      	movs	r3, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	2100      	movs	r1, #0
 8004db2:	0030      	movs	r0, r6
 8004db4:	f003 fd16 	bl	80087e4 <SetButtonEvents>
				status =BOS_OK;
 8004db8:	2000      	movs	r0, #0
 8004dba:	e7c5      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004dbc:	220c      	movs	r2, #12
 8004dbe:	4979      	ldr	r1, [pc, #484]	; (8004fa4 <ParseSnippetCondition+0x384>)
 8004dc0:	0038      	movs	r0, r7
 8004dc2:	f010 fcf1 	bl	80157a8 <strncmp>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d17b      	bne.n	8004ec2 <ParseSnippetCondition+0x2a2>
				if(!button[port].pressedX1Sec){
 8004dca:	00f2      	lsls	r2, r6, #3
 8004dcc:	1992      	adds	r2, r2, r6
 8004dce:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	789b      	ldrb	r3, [r3, #2]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <ParseSnippetCondition+0x1d8>
				else if(!button[port].pressedX2Sec){
 8004dd8:	00f2      	lsls	r2, r6, #3
 8004dda:	1992      	adds	r2, r2, r6
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d029      	beq.n	8004e3a <ParseSnippetCondition+0x21a>
				else if(!button[port].pressedX3Sec){
 8004de6:	00f2      	lsls	r2, r6, #3
 8004de8:	1992      	adds	r2, r2, r6
 8004dea:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d044      	beq.n	8004e7e <ParseSnippetCondition+0x25e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004df4:	200c      	movs	r0, #12
 8004df6:	e7a7      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004df8:	4f64      	ldr	r7, [pc, #400]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004dfa:	00a3      	lsls	r3, r4, #2
 8004dfc:	191c      	adds	r4, r3, r4
 8004dfe:	00a3      	lsls	r3, r4, #2
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2209      	movs	r2, #9
 8004e04:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e06:	0028      	movs	r0, r5
 8004e08:	300f      	adds	r0, #15
 8004e0a:	f00f fff6 	bl	8014dfa <atoi>
 8004e0e:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	b2c3      	uxtb	r3, r0
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	1852      	adds	r2, r2, r1
 8004e18:	0091      	lsls	r1, r2, #2
 8004e1a:	187f      	adds	r7, r7, r1
 8004e1c:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	9205      	str	r2, [sp, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	9204      	str	r2, [sp, #16]
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	9202      	str	r2, [sp, #8]
 8004e2a:	9201      	str	r2, [sp, #4]
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	0030      	movs	r0, r6
 8004e32:	f003 fcd7 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004e36:	2000      	movs	r0, #0
 8004e38:	e786      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e3a:	4f54      	ldr	r7, [pc, #336]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004e3c:	00a3      	lsls	r3, r4, #2
 8004e3e:	191c      	adds	r4, r3, r4
 8004e40:	00a3      	lsls	r3, r4, #2
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	220a      	movs	r2, #10
 8004e46:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e48:	0028      	movs	r0, r5
 8004e4a:	300f      	adds	r0, #15
 8004e4c:	f00f ffd5 	bl	8014dfa <atoi>
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	b2c0      	uxtb	r0, r0
 8004e56:	0093      	lsls	r3, r2, #2
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	18bf      	adds	r7, r7, r2
 8004e5e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e60:	2301      	movs	r3, #1
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	9000      	str	r0, [sp, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	0030      	movs	r0, r6
 8004e76:	f003 fcb5 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e764      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004e7e:	4f43      	ldr	r7, [pc, #268]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004e80:	00a3      	lsls	r3, r4, #2
 8004e82:	191c      	adds	r4, r3, r4
 8004e84:	00a3      	lsls	r3, r4, #2
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	220b      	movs	r2, #11
 8004e8a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	300f      	adds	r0, #15
 8004e90:	f00f ffb3 	bl	8014dfa <atoi>
 8004e94:	4b3c      	ldr	r3, [pc, #240]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	b2c0      	uxtb	r0, r0
 8004e9a:	0093      	lsls	r3, r2, #2
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	18bf      	adds	r7, r7, r2
 8004ea2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	9303      	str	r3, [sp, #12]
 8004eae:	9302      	str	r3, [sp, #8]
 8004eb0:	9001      	str	r0, [sp, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	0030      	movs	r0, r6
 8004eba:	f003 fc93 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e742      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004ec2:	220d      	movs	r2, #13
 8004ec4:	4938      	ldr	r1, [pc, #224]	; (8004fa8 <ParseSnippetCondition+0x388>)
 8004ec6:	0038      	movs	r0, r7
 8004ec8:	f010 fc6e 	bl	80157a8 <strncmp>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d000      	beq.n	8004ed2 <ParseSnippetCondition+0x2b2>
 8004ed0:	e08e      	b.n	8004ff0 <ParseSnippetCondition+0x3d0>
				if(!button[port].releasedY1Sec){
 8004ed2:	00f2      	lsls	r2, r6, #3
 8004ed4:	1992      	adds	r2, r2, r6
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	795b      	ldrb	r3, [r3, #5]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00f      	beq.n	8004f00 <ParseSnippetCondition+0x2e0>
				else if(!button[port].releasedY2Sec){
 8004ee0:	00f2      	lsls	r2, r6, #3
 8004ee2:	1992      	adds	r2, r2, r6
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	799b      	ldrb	r3, [r3, #6]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02a      	beq.n	8004f44 <ParseSnippetCondition+0x324>
				else if(!button[port].releasedY3Sec){
 8004eee:	00f2      	lsls	r2, r6, #3
 8004ef0:	1992      	adds	r2, r2, r6
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	79db      	ldrb	r3, [r3, #7]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d057      	beq.n	8004fac <ParseSnippetCondition+0x38c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004efc:	200d      	movs	r0, #13
 8004efe:	e723      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004f00:	4f22      	ldr	r7, [pc, #136]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004f02:	00a3      	lsls	r3, r4, #2
 8004f04:	191c      	adds	r4, r3, r4
 8004f06:	00a3      	lsls	r3, r4, #2
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f0e:	0028      	movs	r0, r5
 8004f10:	3010      	adds	r0, #16
 8004f12:	f00f ff72 	bl	8014dfa <atoi>
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	b2c0      	uxtb	r0, r0
 8004f1c:	0093      	lsls	r3, r2, #2
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	18bf      	adds	r7, r7, r2
 8004f24:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004f26:	2301      	movs	r3, #1
 8004f28:	9305      	str	r3, [sp, #20]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	9002      	str	r0, [sp, #8]
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	0030      	movs	r0, r6
 8004f3c:	f003 fc52 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004f40:	2000      	movs	r0, #0
 8004f42:	e701      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004f44:	4f11      	ldr	r7, [pc, #68]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004f46:	00a3      	lsls	r3, r4, #2
 8004f48:	191c      	adds	r4, r3, r4
 8004f4a:	00a3      	lsls	r3, r4, #2
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	220d      	movs	r2, #13
 8004f50:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f52:	0028      	movs	r0, r5
 8004f54:	3010      	adds	r0, #16
 8004f56:	f00f ff50 	bl	8014dfa <atoi>
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	b2c0      	uxtb	r0, r0
 8004f60:	0093      	lsls	r3, r2, #2
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	18bf      	adds	r7, r7, r2
 8004f68:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	9003      	str	r0, [sp, #12]
 8004f74:	9302      	str	r3, [sp, #8]
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	0030      	movs	r0, r6
 8004f80:	f003 fc30 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004f84:	2000      	movs	r0, #0
 8004f86:	e6df      	b.n	8004d48 <ParseSnippetCondition+0x128>
 8004f88:	20001207 	.word	0x20001207
 8004f8c:	20006dbc 	.word	0x20006dbc
 8004f90:	2000116c 	.word	0x2000116c
 8004f94:	08019d74 	.word	0x08019d74
 8004f98:	0801b38c 	.word	0x0801b38c
 8004f9c:	200014b4 	.word	0x200014b4
 8004fa0:	0801a410 	.word	0x0801a410
 8004fa4:	0801a420 	.word	0x0801a420
 8004fa8:	0801a430 	.word	0x0801a430
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004fac:	4f30      	ldr	r7, [pc, #192]	; (8005070 <ParseSnippetCondition+0x450>)
 8004fae:	3314      	adds	r3, #20
 8004fb0:	4698      	mov	r8, r3
 8004fb2:	435c      	muls	r4, r3
 8004fb4:	193c      	adds	r4, r7, r4
 8004fb6:	3b06      	subs	r3, #6
 8004fb8:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004fba:	0028      	movs	r0, r5
 8004fbc:	3010      	adds	r0, #16
 8004fbe:	f00f ff1c 	bl	8014dfa <atoi>
 8004fc2:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <ParseSnippetCondition+0x454>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	b2c0      	uxtb	r0, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	4353      	muls	r3, r2
 8004fcc:	18ff      	adds	r7, r7, r3
 8004fce:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	9004      	str	r0, [sp, #16]
 8004fd6:	2400      	movs	r4, #0
 8004fd8:	9403      	str	r4, [sp, #12]
 8004fda:	9402      	str	r4, [sp, #8]
 8004fdc:	9401      	str	r4, [sp, #4]
 8004fde:	9400      	str	r4, [sp, #0]
 8004fe0:	0023      	movs	r3, r4
 8004fe2:	0022      	movs	r2, r4
 8004fe4:	0021      	movs	r1, r4
 8004fe6:	0030      	movs	r0, r6
 8004fe8:	f003 fbfc 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004fec:	0020      	movs	r0, r4
 8004fee:	e6ab      	b.n	8004d48 <ParseSnippetCondition+0x128>
	BOS_Status status =BOS_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e6a9      	b.n	8004d48 <ParseSnippetCondition+0x128>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d000      	beq.n	8004ffa <ParseSnippetCondition+0x3da>
 8004ff8:	e64f      	b.n	8004c9a <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ffa:	481e      	ldr	r0, [pc, #120]	; (8005074 <ParseSnippetCondition+0x454>)
 8004ffc:	7803      	ldrb	r3, [r0, #0]
 8004ffe:	491c      	ldr	r1, [pc, #112]	; (8005070 <ParseSnippetCondition+0x450>)
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	18d6      	adds	r6, r2, r3
 8005004:	00b4      	lsls	r4, r6, #2
 8005006:	2602      	movs	r6, #2
 8005008:	5466      	strb	r6, [r4, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800500a:	1909      	adds	r1, r1, r4
 800500c:	70cd      	strb	r5, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800500e:	3301      	adds	r3, #1
 8005010:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 8005012:	2000      	movs	r0, #0
 8005014:	e01d      	b.n	8005052 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <ParseSnippetCondition+0x454>)
 8005018:	4698      	mov	r8, r3
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	4f14      	ldr	r7, [pc, #80]	; (8005070 <ParseSnippetCondition+0x450>)
 800501e:	0093      	lsls	r3, r2, #2
 8005020:	1898      	adds	r0, r3, r2
 8005022:	0081      	lsls	r1, r0, #2
 8005024:	2003      	movs	r0, #3
 8005026:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8005028:	187a      	adds	r2, r7, r1
 800502a:	70d5      	strb	r5, [r2, #3]
					float constant =atof(thirdPart);
 800502c:	0020      	movs	r0, r4
 800502e:	f00f fedf 	bl	8014df0 <atof>
 8005032:	f7fe f8c9 	bl	80031c8 <__aeabi_d2f>
 8005036:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005038:	4643      	mov	r3, r8
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	0093      	lsls	r3, r2, #2
 800503e:	189b      	adds	r3, r3, r2
 8005040:	0098      	lsls	r0, r3, #2
 8005042:	19c0      	adds	r0, r0, r7
 8005044:	3006      	adds	r0, #6
 8005046:	2204      	movs	r2, #4
 8005048:	a907      	add	r1, sp, #28
 800504a:	f010 f966 	bl	801531a <memcpy>
 800504e:	e63b      	b.n	8004cc8 <ParseSnippetCondition+0xa8>
		return BOS_ERR_SNIP_MEM_FULL;
 8005050:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8005052:	b008      	add	sp, #32
 8005054:	bc04      	pop	{r2}
 8005056:	4690      	mov	r8, r2
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status =BOS_OK;
 800505a:	2000      	movs	r0, #0
 800505c:	e7f9      	b.n	8005052 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 800505e:	2067      	movs	r0, #103	; 0x67
 8005060:	e7f7      	b.n	8005052 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 8005062:	2067      	movs	r0, #103	; 0x67
 8005064:	e7f5      	b.n	8005052 <ParseSnippetCondition+0x432>
 8005066:	2067      	movs	r0, #103	; 0x67
 8005068:	e7f3      	b.n	8005052 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 800506a:	2067      	movs	r0, #103	; 0x67
 800506c:	e7f1      	b.n	8005052 <ParseSnippetCondition+0x432>
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20006dbc 	.word	0x20006dbc
 8005074:	20001207 	.word	0x20001207

08005078 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	000c      	movs	r4, r1
	switch(code){
 800507c:	2802      	cmp	r0, #2
 800507e:	d017      	beq.n	80050b0 <AddSnippet+0x38>
 8005080:	2803      	cmp	r0, #3
 8005082:	d003      	beq.n	800508c <AddSnippet+0x14>
 8005084:	2801      	cmp	r0, #1
 8005086:	d00f      	beq.n	80050a8 <AddSnippet+0x30>
	return BOS_OK;
 8005088:	2000      	movs	r0, #0
 800508a:	e00c      	b.n	80050a6 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <AddSnippet+0xe8>)
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	3a01      	subs	r2, #1
 8005092:	0093      	lsls	r3, r2, #2
 8005094:	189b      	adds	r3, r3, r2
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <AddSnippet+0xec>)
 800509a:	189b      	adds	r3, r3, r2
 800509c:	2201      	movs	r2, #1
 800509e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 80050a0:	f006 fe46 	bl	800bd30 <SaveToRO>
	return BOS_OK;
 80050a4:	2000      	movs	r0, #0
}
 80050a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 80050a8:	0008      	movs	r0, r1
 80050aa:	f7ff fdb9 	bl	8004c20 <ParseSnippetCondition>
 80050ae:	e7fa      	b.n	80050a6 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <AddSnippet+0xe8>)
 80050b2:	781d      	ldrb	r5, [r3, #0]
 80050b4:	3d01      	subs	r5, #1
 80050b6:	00ab      	lsls	r3, r5, #2
 80050b8:	195b      	adds	r3, r3, r5
 80050ba:	009a      	lsls	r2, r3, #2
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <AddSnippet+0xec>)
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	68de      	ldr	r6, [r3, #12]
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	d034      	beq.n	8005130 <AddSnippet+0xb8>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80050c6:	0030      	movs	r0, r6
 80050c8:	f7fb f826 	bl	8000118 <strlen>
 80050cc:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80050ce:	0020      	movs	r0, r4
 80050d0:	f7fb f822 	bl	8000118 <strlen>
 80050d4:	1839      	adds	r1, r7, r0
 80050d6:	3102      	adds	r1, #2
 80050d8:	0030      	movs	r0, r6
 80050da:	f010 f959 	bl	8015390 <realloc>
 80050de:	4e21      	ldr	r6, [pc, #132]	; (8005164 <AddSnippet+0xec>)
 80050e0:	00ab      	lsls	r3, r5, #2
 80050e2:	195d      	adds	r5, r3, r5
 80050e4:	00ab      	lsls	r3, r5, #2
 80050e6:	18f3      	adds	r3, r6, r3
 80050e8:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80050ea:	4d1d      	ldr	r5, [pc, #116]	; (8005160 <AddSnippet+0xe8>)
 80050ec:	782b      	ldrb	r3, [r5, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	009a      	lsls	r2, r3, #2
 80050f2:	18d2      	adds	r2, r2, r3
 80050f4:	0093      	lsls	r3, r2, #2
 80050f6:	18f3      	adds	r3, r6, r3
 80050f8:	68d8      	ldr	r0, [r3, #12]
 80050fa:	1c7b      	adds	r3, r7, #1
 80050fc:	18c0      	adds	r0, r0, r3
 80050fe:	0021      	movs	r1, r4
 8005100:	f010 fb4a 	bl	8015798 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8005104:	782a      	ldrb	r2, [r5, #0]
 8005106:	3a01      	subs	r2, #1
 8005108:	0093      	lsls	r3, r2, #2
 800510a:	189b      	adds	r3, r3, r2
 800510c:	009a      	lsls	r2, r3, #2
 800510e:	18b6      	adds	r6, r6, r2
 8005110:	68f3      	ldr	r3, [r6, #12]
 8005112:	2213      	movs	r2, #19
 8005114:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <AddSnippet+0xe8>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	009a      	lsls	r2, r3, #2
 800511e:	18d2      	adds	r2, r2, r3
 8005120:	0091      	lsls	r1, r2, #2
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <AddSnippet+0xec>)
 8005124:	1852      	adds	r2, r2, r1
 8005126:	68d2      	ldr	r2, [r2, #12]
 8005128:	2a00      	cmp	r2, #0
 800512a:	d011      	beq.n	8005150 <AddSnippet+0xd8>
	return BOS_OK;
 800512c:	2000      	movs	r0, #0
 800512e:	e7ba      	b.n	80050a6 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8005130:	0008      	movs	r0, r1
 8005132:	f7fa fff1 	bl	8000118 <strlen>
 8005136:	3001      	adds	r0, #1
 8005138:	f00f fea2 	bl	8014e80 <malloc>
 800513c:	00ab      	lsls	r3, r5, #2
 800513e:	195d      	adds	r5, r3, r5
 8005140:	00aa      	lsls	r2, r5, #2
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <AddSnippet+0xec>)
 8005144:	189b      	adds	r3, r3, r2
 8005146:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8005148:	0021      	movs	r1, r4
 800514a:	f010 fb25 	bl	8015798 <strcpy>
 800514e:	e7e2      	b.n	8005116 <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <AddSnippet+0xec>)
 8005152:	18c8      	adds	r0, r1, r3
 8005154:	2214      	movs	r2, #20
 8005156:	2100      	movs	r1, #0
 8005158:	f010 f8e8 	bl	801532c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800515c:	200e      	movs	r0, #14
 800515e:	e7a2      	b.n	80050a6 <AddSnippet+0x2e>
 8005160:	20001207 	.word	0x20001207
 8005164:	20006dbc 	.word	0x20006dbc

08005168 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	46de      	mov	lr, fp
 800516c:	4657      	mov	r7, sl
 800516e:	464e      	mov	r6, r9
 8005170:	4645      	mov	r5, r8
 8005172:	b5e0      	push	{r5, r6, r7, lr}
 8005174:	b08b      	sub	sp, #44	; 0x2c
 8005176:	9004      	str	r0, [sp, #16]
 8005178:	9103      	str	r1, [sp, #12]
 800517a:	0015      	movs	r5, r2
 800517c:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 800517e:	2209      	movs	r2, #9
 8005180:	2100      	movs	r1, #0
 8005182:	a807      	add	r0, sp, #28
 8005184:	f010 f8d2 	bl	801532c <memset>
 8005188:	e160      	b.n	800544c <CLI_CommandParser+0x2e4>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 800518a:	1ce9      	adds	r1, r5, #3
 800518c:	3001      	adds	r0, #1
 800518e:	f7ff ff73 	bl	8005078 <AddSnippet>
 8005192:	2800      	cmp	r0, #0
 8005194:	d106      	bne.n	80051a4 <CLI_CommandParser+0x3c>
				recordSnippet = SNIPPET_COMMANDS;
 8005196:	4bcf      	ldr	r3, [pc, #828]	; (80054d4 <CLI_CommandParser+0x36c>)
 8005198:	2202      	movs	r2, #2
 800519a:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 800519c:	230d      	movs	r3, #13
 800519e:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80051a0:	2700      	movs	r7, #0
 80051a2:	e184      	b.n	80054ae <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051a4:	2252      	movs	r2, #82	; 0x52
 80051a6:	49cc      	ldr	r1, [pc, #816]	; (80054d8 <CLI_CommandParser+0x370>)
 80051a8:	0020      	movs	r0, r4
 80051aa:	f010 f8b6 	bl	801531a <memcpy>
				recordSnippet =0;
 80051ae:	4bc9      	ldr	r3, [pc, #804]	; (80054d4 <CLI_CommandParser+0x36c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 80051b4:	2700      	movs	r7, #0
 80051b6:	e17a      	b.n	80054ae <CLI_CommandParser+0x346>
			recordSnippet =0;
 80051b8:	4bc6      	ldr	r3, [pc, #792]	; (80054d4 <CLI_CommandParser+0x36c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 80051be:	49c7      	ldr	r1, [pc, #796]	; (80054dc <CLI_CommandParser+0x374>)
 80051c0:	3003      	adds	r0, #3
 80051c2:	f7ff ff59 	bl	8005078 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 80051c6:	2241      	movs	r2, #65	; 0x41
 80051c8:	49c5      	ldr	r1, [pc, #788]	; (80054e0 <CLI_CommandParser+0x378>)
 80051ca:	0020      	movs	r0, r4
 80051cc:	f010 f8a5 	bl	801531a <memcpy>
			xReturned = pdFALSE;
 80051d0:	2700      	movs	r7, #0
 80051d2:	e16c      	b.n	80054ae <CLI_CommandParser+0x346>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80051d4:	0029      	movs	r1, r5
 80051d6:	2002      	movs	r0, #2
 80051d8:	f7ff ff4e 	bl	8005078 <AddSnippet>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d103      	bne.n	80051e8 <CLI_CommandParser+0x80>
				pcOutputString[0] ='\r';
 80051e0:	230d      	movs	r3, #13
 80051e2:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80051e4:	2700      	movs	r7, #0
 80051e6:	e162      	b.n	80054ae <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051e8:	2252      	movs	r2, #82	; 0x52
 80051ea:	49bb      	ldr	r1, [pc, #748]	; (80054d8 <CLI_CommandParser+0x370>)
 80051ec:	0020      	movs	r0, r4
 80051ee:	f010 f894 	bl	801531a <memcpy>
			xReturned = pdFALSE;
 80051f2:	2700      	movs	r7, #0
 80051f4:	e15b      	b.n	80054ae <CLI_CommandParser+0x346>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80051f6:	f00f fe35 	bl	8014e64 <__locale_ctype_ptr>
 80051fa:	7873      	ldrb	r3, [r6, #1]
 80051fc:	18c0      	adds	r0, r0, r3
 80051fe:	7843      	ldrb	r3, [r0, #1]
 8005200:	075b      	lsls	r3, r3, #29
 8005202:	d500      	bpl.n	8005206 <CLI_CommandParser+0x9e>
 8005204:	e14c      	b.n	80054a0 <CLI_CommandParser+0x338>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005206:	1b72      	subs	r2, r6, r5
 8005208:	0029      	movs	r1, r5
 800520a:	a807      	add	r0, sp, #28
 800520c:	f010 fadd 	bl	80157ca <strncpy>
				id =GetID(idString);
 8005210:	a807      	add	r0, sp, #28
 8005212:	f7ff fa2d 	bl	8004670 <GetID>
 8005216:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8005218:	4ab2      	ldr	r2, [pc, #712]	; (80054e4 <CLI_CommandParser+0x37c>)
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	4691      	mov	r9, r2
 800521e:	4290      	cmp	r0, r2
 8005220:	d02c      	beq.n	800527c <CLI_CommandParser+0x114>
				else if(id == BOS_ERR_WrongName){
 8005222:	2864      	cmp	r0, #100	; 0x64
 8005224:	d032      	beq.n	800528c <CLI_CommandParser+0x124>
				else if(id == BOS_ERR_WrongID){
 8005226:	2866      	cmp	r0, #102	; 0x66
 8005228:	d037      	beq.n	800529a <CLI_CommandParser+0x132>
				else if(id == BOS_BROADCAST){
 800522a:	28ff      	cmp	r0, #255	; 0xff
 800522c:	d03c      	beq.n	80052a8 <CLI_CommandParser+0x140>
				else if((uint8_t )id == BOS_MULTICAST){
 800522e:	466b      	mov	r3, sp
 8005230:	7d1b      	ldrb	r3, [r3, #20]
 8005232:	469a      	mov	sl, r3
 8005234:	2bfe      	cmp	r3, #254	; 0xfe
 8005236:	d068      	beq.n	800530a <CLI_CommandParser+0x1a2>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005238:	3601      	adds	r6, #1
 800523a:	2206      	movs	r2, #6
 800523c:	49aa      	ldr	r1, [pc, #680]	; (80054e8 <CLI_CommandParser+0x380>)
 800523e:	0030      	movs	r0, r6
 8005240:	f010 fab2 	bl	80157a8 <strncmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	d000      	beq.n	800524a <CLI_CommandParser+0xe2>
 8005248:	e0a3      	b.n	8005392 <CLI_CommandParser+0x22a>
						BOS.response = BOS_RESPONSE_NONE;
 800524a:	4ba8      	ldr	r3, [pc, #672]	; (80054ec <CLI_CommandParser+0x384>)
 800524c:	2200      	movs	r2, #0
 800524e:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005250:	2119      	movs	r1, #25
 8005252:	4650      	mov	r0, sl
 8005254:	f004 fc62 	bl	8009b1c <SendMessageToModule>
						osDelay(100);
 8005258:	2064      	movs	r0, #100	; 0x64
 800525a:	f00a fc2b 	bl	800fab4 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800525e:	4ba4      	ldr	r3, [pc, #656]	; (80054f0 <CLI_CommandParser+0x388>)
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	4ba0      	ldr	r3, [pc, #640]	; (80054e4 <CLI_CommandParser+0x37c>)
 8005264:	7818      	ldrb	r0, [r3, #0]
 8005266:	2300      	movs	r3, #0
 8005268:	4651      	mov	r1, sl
 800526a:	f7fe feeb 	bl	8004044 <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 800526e:	4b9f      	ldr	r3, [pc, #636]	; (80054ec <CLI_CommandParser+0x384>)
 8005270:	799b      	ldrb	r3, [r3, #6]
 8005272:	2b60      	cmp	r3, #96	; 0x60
 8005274:	d100      	bne.n	8005278 <CLI_CommandParser+0x110>
 8005276:	e0c8      	b.n	800540a <CLI_CommandParser+0x2a2>
					xReturned = pdFALSE;
 8005278:	2700      	movs	r7, #0
 800527a:	e118      	b.n	80054ae <CLI_CommandParser+0x346>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800527c:	1c70      	adds	r0, r6, #1
 800527e:	2299      	movs	r2, #153	; 0x99
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	0021      	movs	r1, r4
 8005284:	f00a fcd2 	bl	800fc2c <FreeRTOS_CLIProcessCommand>
 8005288:	0007      	movs	r7, r0
 800528a:	e110      	b.n	80054ae <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 800528c:	2227      	movs	r2, #39	; 0x27
 800528e:	4999      	ldr	r1, [pc, #612]	; (80054f4 <CLI_CommandParser+0x38c>)
 8005290:	0020      	movs	r0, r4
 8005292:	f010 f842 	bl	801531a <memcpy>
					xReturned = pdFALSE;
 8005296:	2700      	movs	r7, #0
 8005298:	e109      	b.n	80054ae <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800529a:	2225      	movs	r2, #37	; 0x25
 800529c:	4996      	ldr	r1, [pc, #600]	; (80054f8 <CLI_CommandParser+0x390>)
 800529e:	0020      	movs	r0, r4
 80052a0:	f010 f83b 	bl	801531a <memcpy>
					xReturned = pdFALSE;
 80052a4:	2700      	movs	r7, #0
 80052a6:	e102      	b.n	80054ae <CLI_CommandParser+0x346>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80052a8:	221a      	movs	r2, #26
 80052aa:	2100      	movs	r1, #0
 80052ac:	4893      	ldr	r0, [pc, #588]	; (80054fc <CLI_CommandParser+0x394>)
 80052ae:	f010 f83d 	bl	801532c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80052b2:	3601      	adds	r6, #1
 80052b4:	0028      	movs	r0, r5
 80052b6:	f7fa ff2f 	bl	8000118 <strlen>
 80052ba:	0007      	movs	r7, r0
 80052bc:	a807      	add	r0, sp, #28
 80052be:	f7fa ff2b 	bl	8000118 <strlen>
 80052c2:	1a3a      	subs	r2, r7, r0
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0031      	movs	r1, r6
 80052c8:	488d      	ldr	r0, [pc, #564]	; (8005500 <CLI_CommandParser+0x398>)
 80052ca:	f010 fa7e 	bl	80157ca <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80052ce:	0028      	movs	r0, r5
 80052d0:	f7fa ff22 	bl	8000118 <strlen>
 80052d4:	0007      	movs	r7, r0
 80052d6:	a807      	add	r0, sp, #28
 80052d8:	f7fa ff1e 	bl	8000118 <strlen>
 80052dc:	1a3b      	subs	r3, r7, r0
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2217      	movs	r2, #23
 80052e2:	21ff      	movs	r1, #255	; 0xff
 80052e4:	4648      	mov	r0, r9
 80052e6:	f004 fbf1 	bl	8009acc <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052ea:	2299      	movs	r2, #153	; 0x99
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	0021      	movs	r1, r4
 80052f0:	0030      	movs	r0, r6
 80052f2:	f00a fc9b 	bl	800fc2c <FreeRTOS_CLIProcessCommand>
 80052f6:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80052f8:	0020      	movs	r0, r4
 80052fa:	f7fa ff0d 	bl	8000118 <strlen>
 80052fe:	1820      	adds	r0, r4, r0
 8005300:	221d      	movs	r2, #29
 8005302:	4980      	ldr	r1, [pc, #512]	; (8005504 <CLI_CommandParser+0x39c>)
 8005304:	f010 f809 	bl	801531a <memcpy>
 8005308:	e0d1      	b.n	80054ae <CLI_CommandParser+0x346>
					group =id >> 8;
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	121b      	asrs	r3, r3, #8
 800530e:	b2db      	uxtb	r3, r3
 8005310:	469a      	mov	sl, r3
 8005312:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <CLI_CommandParser+0x3a0>)
 8005314:	469b      	mov	fp, r3
 8005316:	4652      	mov	r2, sl
 8005318:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800531a:	221a      	movs	r2, #26
 800531c:	2100      	movs	r1, #0
 800531e:	4877      	ldr	r0, [pc, #476]	; (80054fc <CLI_CommandParser+0x394>)
 8005320:	f010 f804 	bl	801532c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005324:	1c73      	adds	r3, r6, #1
 8005326:	4698      	mov	r8, r3
 8005328:	0028      	movs	r0, r5
 800532a:	f7fa fef5 	bl	8000118 <strlen>
 800532e:	0006      	movs	r6, r0
 8005330:	a807      	add	r0, sp, #28
 8005332:	f7fa fef1 	bl	8000118 <strlen>
 8005336:	1a32      	subs	r2, r6, r0
 8005338:	3a01      	subs	r2, #1
 800533a:	4641      	mov	r1, r8
 800533c:	4870      	ldr	r0, [pc, #448]	; (8005500 <CLI_CommandParser+0x398>)
 800533e:	f010 fa44 	bl	80157ca <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005342:	0028      	movs	r0, r5
 8005344:	f7fa fee8 	bl	8000118 <strlen>
 8005348:	0006      	movs	r6, r0
 800534a:	a807      	add	r0, sp, #28
 800534c:	f7fa fee4 	bl	8000118 <strlen>
 8005350:	1a33      	subs	r3, r6, r0
 8005352:	b29b      	uxth	r3, r3
 8005354:	2217      	movs	r2, #23
 8005356:	4651      	mov	r1, sl
 8005358:	4648      	mov	r0, r9
 800535a:	f004 fbb7 	bl	8009acc <BroadcastMessage>
					if(InGroup(myID,group))
 800535e:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <CLI_CommandParser+0x37c>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4a69      	ldr	r2, [pc, #420]	; (800550c <CLI_CommandParser+0x3a4>)
 8005368:	5a9b      	ldrh	r3, [r3, r2]
 800536a:	465a      	mov	r2, fp
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	4113      	asrs	r3, r2
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d406      	bmi.n	8005382 <CLI_CommandParser+0x21a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005374:	ab07      	add	r3, sp, #28
 8005376:	0022      	movs	r2, r4
 8005378:	4965      	ldr	r1, [pc, #404]	; (8005510 <CLI_CommandParser+0x3a8>)
 800537a:	0020      	movs	r0, r4
 800537c:	f010 f9d0 	bl	8015720 <sprintf>
 8005380:	e095      	b.n	80054ae <CLI_CommandParser+0x346>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005382:	2299      	movs	r2, #153	; 0x99
 8005384:	0092      	lsls	r2, r2, #2
 8005386:	0021      	movs	r1, r4
 8005388:	4640      	mov	r0, r8
 800538a:	f00a fc4f 	bl	800fc2c <FreeRTOS_CLIProcessCommand>
 800538e:	0007      	movs	r7, r0
 8005390:	e7f0      	b.n	8005374 <CLI_CommandParser+0x20c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005392:	0028      	movs	r0, r5
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	0007      	movs	r7, r0
 800539a:	a807      	add	r0, sp, #28
 800539c:	f7fa febc 	bl	8000118 <strlen>
 80053a0:	1a3a      	subs	r2, r7, r0
 80053a2:	3a01      	subs	r2, #1
 80053a4:	0031      	movs	r1, r6
 80053a6:	4856      	ldr	r0, [pc, #344]	; (8005500 <CLI_CommandParser+0x398>)
 80053a8:	f010 fa0f 	bl	80157ca <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80053ac:	0028      	movs	r0, r5
 80053ae:	f7fa feb3 	bl	8000118 <strlen>
 80053b2:	0006      	movs	r6, r0
 80053b4:	a807      	add	r0, sp, #28
 80053b6:	f7fa feaf 	bl	8000118 <strlen>
 80053ba:	1a32      	subs	r2, r6, r0
 80053bc:	b292      	uxth	r2, r2
 80053be:	3a01      	subs	r2, #1
 80053c0:	b292      	uxth	r2, r2
 80053c2:	2117      	movs	r1, #23
 80053c4:	4650      	mov	r0, sl
 80053c6:	f004 fba9 	bl	8009b1c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 80053ca:	9a05      	ldr	r2, [sp, #20]
 80053cc:	4951      	ldr	r1, [pc, #324]	; (8005514 <CLI_CommandParser+0x3ac>)
 80053ce:	0020      	movs	r0, r4
 80053d0:	f010 f9a6 	bl	8015720 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 80053d4:	7823      	ldrb	r3, [r4, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <CLI_CommandParser+0x278>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <CLI_CommandParser+0x28a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80053e0:	0020      	movs	r0, r4
 80053e2:	f7fa fe99 	bl	8000118 <strlen>
 80053e6:	0002      	movs	r2, r0
 80053e8:	2100      	movs	r1, #0
 80053ea:	0020      	movs	r0, r4
 80053ec:	f00f ff9e 	bl	801532c <memset>
 80053f0:	e73d      	b.n	800526e <CLI_CommandParser+0x106>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80053f2:	0020      	movs	r0, r4
 80053f4:	f7fa fe90 	bl	8000118 <strlen>
 80053f8:	b282      	uxth	r2, r0
 80053fa:	2301      	movs	r3, #1
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	3331      	adds	r3, #49	; 0x31
 8005400:	0021      	movs	r1, r4
 8005402:	9804      	ldr	r0, [sp, #16]
 8005404:	f00a fa22 	bl	800f84c <writePxMutex>
 8005408:	e7ea      	b.n	80053e0 <CLI_CommandParser+0x278>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800540a:	21fa      	movs	r1, #250	; 0xfa
 800540c:	0089      	lsls	r1, r1, #2
 800540e:	2001      	movs	r0, #1
 8005410:	f00b ff46 	bl	80112a0 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005414:	4b40      	ldr	r3, [pc, #256]	; (8005518 <CLI_CommandParser+0x3b0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <CLI_CommandParser+0x2cc>
							++timedoutMsg;
 800541c:	4a3f      	ldr	r2, [pc, #252]	; (800551c <CLI_CommandParser+0x3b4>)
 800541e:	8813      	ldrh	r3, [r2, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005424:	9b05      	ldr	r3, [sp, #20]
 8005426:	0022      	movs	r2, r4
 8005428:	493d      	ldr	r1, [pc, #244]	; (8005520 <CLI_CommandParser+0x3b8>)
 800542a:	0020      	movs	r0, r4
 800542c:	f010 f978 	bl	8015720 <sprintf>
					xReturned = pdFALSE;
 8005430:	2700      	movs	r7, #0
 8005432:	e03c      	b.n	80054ae <CLI_CommandParser+0x346>
 8005434:	2700      	movs	r7, #0
 8005436:	e03a      	b.n	80054ae <CLI_CommandParser+0x346>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005438:	0020      	movs	r0, r4
 800543a:	f7fa fe6d 	bl	8000118 <strlen>
 800543e:	0002      	movs	r2, r0
 8005440:	2100      	movs	r1, #0
 8005442:	0020      	movs	r0, r4
 8005444:	f00f ff72 	bl	801532c <memset>
	} while(xReturned != pdFALSE);
 8005448:	2f00      	cmp	r7, #0
 800544a:	d071      	beq.n	8005530 <CLI_CommandParser+0x3c8>
		StringToLowerCase((char* )cInputString);
 800544c:	0028      	movs	r0, r5
 800544e:	f7ff fbd1 	bl	8004bf4 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <CLI_CommandParser+0x36c>)
 8005454:	781e      	ldrb	r6, [r3, #0]
 8005456:	2e00      	cmp	r6, #0
 8005458:	d107      	bne.n	800546a <CLI_CommandParser+0x302>
 800545a:	2203      	movs	r2, #3
 800545c:	4931      	ldr	r1, [pc, #196]	; (8005524 <CLI_CommandParser+0x3bc>)
 800545e:	0028      	movs	r0, r5
 8005460:	f010 f9a2 	bl	80157a8 <strncmp>
 8005464:	2800      	cmp	r0, #0
 8005466:	d100      	bne.n	800546a <CLI_CommandParser+0x302>
 8005468:	e68f      	b.n	800518a <CLI_CommandParser+0x22>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 800546a:	2e00      	cmp	r6, #0
 800546c:	d007      	beq.n	800547e <CLI_CommandParser+0x316>
 800546e:	2206      	movs	r2, #6
 8005470:	492d      	ldr	r1, [pc, #180]	; (8005528 <CLI_CommandParser+0x3c0>)
 8005472:	0028      	movs	r0, r5
 8005474:	f010 f998 	bl	80157a8 <strncmp>
 8005478:	2800      	cmp	r0, #0
 800547a:	d100      	bne.n	800547e <CLI_CommandParser+0x316>
 800547c:	e69c      	b.n	80051b8 <CLI_CommandParser+0x50>
		else if(recordSnippet == SNIPPET_COMMANDS){
 800547e:	2e02      	cmp	r6, #2
 8005480:	d100      	bne.n	8005484 <CLI_CommandParser+0x31c>
 8005482:	e6a7      	b.n	80051d4 <CLI_CommandParser+0x6c>
			loc =strchr((char* )cInputString,'.');
 8005484:	212e      	movs	r1, #46	; 0x2e
 8005486:	0028      	movs	r0, r5
 8005488:	f010 f978 	bl	801577c <strchr>
 800548c:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 800548e:	d007      	beq.n	80054a0 <CLI_CommandParser+0x338>
 8005490:	3803      	subs	r0, #3
 8005492:	2203      	movs	r2, #3
 8005494:	4925      	ldr	r1, [pc, #148]	; (800552c <CLI_CommandParser+0x3c4>)
 8005496:	f010 f987 	bl	80157a8 <strncmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	d000      	beq.n	80054a0 <CLI_CommandParser+0x338>
 800549e:	e6aa      	b.n	80051f6 <CLI_CommandParser+0x8e>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80054a0:	2299      	movs	r2, #153	; 0x99
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	0021      	movs	r1, r4
 80054a6:	0028      	movs	r0, r5
 80054a8:	f00a fbc0 	bl	800fc2c <FreeRTOS_CLIProcessCommand>
 80054ac:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80054ae:	7823      	ldrb	r3, [r4, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0c1      	beq.n	8005438 <CLI_CommandParser+0x2d0>
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0be      	beq.n	8005438 <CLI_CommandParser+0x2d0>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80054ba:	0020      	movs	r0, r4
 80054bc:	f7fa fe2c 	bl	8000118 <strlen>
 80054c0:	b282      	uxth	r2, r0
 80054c2:	2301      	movs	r3, #1
 80054c4:	425b      	negs	r3, r3
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	3333      	adds	r3, #51	; 0x33
 80054ca:	0021      	movs	r1, r4
 80054cc:	9804      	ldr	r0, [sp, #16]
 80054ce:	f00a f9bd 	bl	800f84c <writePxMutex>
 80054d2:	e7b1      	b.n	8005438 <CLI_CommandParser+0x2d0>
 80054d4:	20001234 	.word	0x20001234
 80054d8:	0801a248 	.word	0x0801a248
 80054dc:	08019edc 	.word	0x08019edc
 80054e0:	0801a2a4 	.word	0x0801a2a4
 80054e4:	20001066 	.word	0x20001066
 80054e8:	0801a388 	.word	0x0801a388
 80054ec:	20006da0 	.word	0x20006da0
 80054f0:	20000a9f 	.word	0x20000a9f
 80054f4:	0801a2ec 	.word	0x0801a2ec
 80054f8:	0801a314 	.word	0x0801a314
 80054fc:	20000d14 	.word	0x20000d14
 8005500:	20000f28 	.word	0x20000f28
 8005504:	0801a33c 	.word	0x0801a33c
 8005508:	20001206 	.word	0x20001206
 800550c:	20000eb0 	.word	0x20000eb0
 8005510:	0801a35c 	.word	0x0801a35c
 8005514:	0801a390 	.word	0x0801a390
 8005518:	200010f8 	.word	0x200010f8
 800551c:	2000171e 	.word	0x2000171e
 8005520:	0801a3b4 	.word	0x0801a3b4
 8005524:	0801a244 	.word	0x0801a244
 8005528:	0801a29c 	.word	0x0801a29c
 800552c:	0801a2e8 	.word	0x0801a2e8
	memset(idString,0x00,MaxLengthOfAlias);
 8005530:	2209      	movs	r2, #9
 8005532:	2100      	movs	r1, #0
 8005534:	a807      	add	r0, sp, #28
 8005536:	f00f fef9 	bl	801532c <memset>
	if(!recordSnippet && enableOutput)
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <CLI_CommandParser+0x404>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <CLI_CommandParser+0x3e0>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <CLI_CommandParser+0x3ee>
}
 8005548:	b00b      	add	sp, #44	; 0x2c
 800554a:	bc3c      	pop	{r2, r3, r4, r5}
 800554c:	4690      	mov	r8, r2
 800554e:	4699      	mov	r9, r3
 8005550:	46a2      	mov	sl, r4
 8005552:	46ab      	mov	fp, r5
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005556:	2301      	movs	r3, #1
 8005558:	425b      	negs	r3, r3
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	3333      	adds	r3, #51	; 0x33
 800555e:	2238      	movs	r2, #56	; 0x38
 8005560:	4903      	ldr	r1, [pc, #12]	; (8005570 <CLI_CommandParser+0x408>)
 8005562:	9804      	ldr	r0, [sp, #16]
 8005564:	f00a f972 	bl	800f84c <writePxMutex>
}
 8005568:	e7ee      	b.n	8005548 <CLI_CommandParser+0x3e0>
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	20001234 	.word	0x20001234
 8005570:	0801a3d4 	.word	0x0801a3d4

08005574 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005578:	2101      	movs	r1, #1
 800557a:	4249      	negs	r1, r1
 800557c:	2001      	movs	r0, #1
 800557e:	f00b fe8f 	bl	80112a0 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005582:	230f      	movs	r3, #15
 8005584:	446b      	add	r3, sp
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800558a:	f00a fbb5 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 800558e:	0005      	movs	r5, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005590:	4b51      	ldr	r3, [pc, #324]	; (80056d8 <prvCLITask+0x164>)
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	23e1      	movs	r3, #225	; 0xe1
 8005596:	031b      	lsls	r3, r3, #12
 8005598:	429a      	cmp	r2, r3
 800559a:	d122      	bne.n	80055e2 <prvCLITask+0x6e>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800559c:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <prvCLITask+0x168>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	18d2      	adds	r2, r2, r3
 80055a4:	0053      	lsls	r3, r2, #1
 80055a6:	4a4e      	ldr	r2, [pc, #312]	; (80056e0 <prvCLITask+0x16c>)
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	4a4e      	ldr	r2, [pc, #312]	; (80056e4 <prvCLITask+0x170>)
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	4c4e      	ldr	r4, [pc, #312]	; (80056e8 <prvCLITask+0x174>)
 80055b0:	4e4e      	ldr	r6, [pc, #312]	; (80056ec <prvCLITask+0x178>)
 80055b2:	7831      	ldrb	r1, [r6, #0]
 80055b4:	9100      	str	r1, [sp, #0]
 80055b6:	494e      	ldr	r1, [pc, #312]	; (80056f0 <prvCLITask+0x17c>)
 80055b8:	0020      	movs	r0, r4
 80055ba:	f010 f8b1 	bl	8015720 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80055be:	22a4      	movs	r2, #164	; 0xa4
 80055c0:	7830      	ldrb	r0, [r6, #0]
 80055c2:	230a      	movs	r3, #10
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	494b      	ldr	r1, [pc, #300]	; (80056f4 <prvCLITask+0x180>)
 80055c8:	f00a f96e 	bl	800f8a8 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80055cc:	0020      	movs	r0, r4
 80055ce:	f7fa fda3 	bl	8000118 <strlen>
 80055d2:	b282      	uxth	r2, r0
 80055d4:	7830      	ldrb	r0, [r6, #0]
 80055d6:	230a      	movs	r3, #10
 80055d8:	0021      	movs	r1, r4
 80055da:	f00a f965 	bl	800f8a8 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80055de:	2600      	movs	r6, #0
 80055e0:	e067      	b.n	80056b2 <prvCLITask+0x13e>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80055e2:	2401      	movs	r4, #1
 80055e4:	2c05      	cmp	r4, #5
 80055e6:	d8d9      	bhi.n	800559c <prvCLITask+0x28>
			if(port != PcPort)
 80055e8:	4b40      	ldr	r3, [pc, #256]	; (80056ec <prvCLITask+0x178>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d004      	beq.n	80055fa <prvCLITask+0x86>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80055f0:	21e1      	movs	r1, #225	; 0xe1
 80055f2:	0309      	lsls	r1, r1, #12
 80055f4:	0020      	movs	r0, r4
 80055f6:	f00a f999 	bl	800f92c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80055fa:	3401      	adds	r4, #1
 80055fc:	b2e4      	uxtb	r4, r4
 80055fe:	e7f1      	b.n	80055e4 <prvCLITask+0x70>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005600:	200f      	movs	r0, #15
 8005602:	4468      	add	r0, sp
 8005604:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005606:	0198      	lsls	r0, r3, #6
 8005608:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <prvCLITask+0x184>)
 800560a:	1812      	adds	r2, r2, r0
 800560c:	2000      	movs	r0, #0
 800560e:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005610:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <prvCLITask+0x188>)
 8005612:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005614:	240f      	movs	r4, #15
 8005616:	446c      	add	r4, sp
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <prvCLITask+0x178>)
 800561a:	7818      	ldrb	r0, [r3, #0]
 800561c:	230a      	movs	r3, #10
 800561e:	2201      	movs	r2, #1
 8005620:	0021      	movs	r1, r4
 8005622:	f00a f941 	bl	800f8a8 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005626:	7823      	ldrb	r3, [r4, #0]
 8005628:	2b0d      	cmp	r3, #13
 800562a:	d025      	beq.n	8005678 <prvCLITask+0x104>
			if(cRxedChar == '\n'){
 800562c:	2b0a      	cmp	r3, #10
 800562e:	d03e      	beq.n	80056ae <prvCLITask+0x13a>
			else if(cRxedChar == '\b'){
 8005630:	2b08      	cmp	r3, #8
 8005632:	d049      	beq.n	80056c8 <prvCLITask+0x154>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005634:	001a      	movs	r2, r3
 8005636:	3a20      	subs	r2, #32
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	2a5e      	cmp	r2, #94	; 0x5e
 800563c:	d837      	bhi.n	80056ae <prvCLITask+0x13a>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 800563e:	2e31      	cmp	r6, #49	; 0x31
 8005640:	dc35      	bgt.n	80056ae <prvCLITask+0x13a>
						cInputString[cInputIndex] =cRxedChar;
 8005642:	4a2f      	ldr	r2, [pc, #188]	; (8005700 <prvCLITask+0x18c>)
 8005644:	5593      	strb	r3, [r2, r6]
						cInputIndex++;
 8005646:	3601      	adds	r6, #1
 8005648:	b276      	sxtb	r6, r6
 800564a:	e030      	b.n	80056ae <prvCLITask+0x13a>
			taskYIELD();
 800564c:	f00c f91c 	bl	8011888 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005650:	3401      	adds	r4, #1
 8005652:	b2a4      	uxth	r4, r4
 8005654:	2c3f      	cmp	r4, #63	; 0x3f
 8005656:	d8dd      	bhi.n	8005614 <prvCLITask+0xa0>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005658:	4b24      	ldr	r3, [pc, #144]	; (80056ec <prvCLITask+0x178>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	0198      	lsls	r0, r3, #6
 8005660:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <prvCLITask+0x184>)
 8005662:	1812      	adds	r2, r2, r0
 8005664:	5d12      	ldrb	r2, [r2, r4]
 8005666:	2a00      	cmp	r2, #0
 8005668:	d1ca      	bne.n	8005600 <prvCLITask+0x8c>
			if(chr == MSG_RX_BUF_SIZE - 1){
 800566a:	2c3f      	cmp	r4, #63	; 0x3f
 800566c:	d1ee      	bne.n	800564c <prvCLITask+0xd8>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <prvCLITask+0x188>)
 8005670:	2100      	movs	r1, #0
 8005672:	54d1      	strb	r1, [r2, r3]
 8005674:	2400      	movs	r4, #0
 8005676:	e7e9      	b.n	800564c <prvCLITask+0xd8>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <prvCLITask+0x178>)
 800567a:	7818      	ldrb	r0, [r3, #0]
 800567c:	230a      	movs	r3, #10
 800567e:	2202      	movs	r2, #2
 8005680:	4920      	ldr	r1, [pc, #128]	; (8005704 <prvCLITask+0x190>)
 8005682:	f00a f911 	bl	800f8a8 <writePxITMutex>
			if(cInputIndex == 0){
 8005686:	2e00      	cmp	r6, #0
 8005688:	d019      	beq.n	80056be <prvCLITask+0x14a>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800568a:	4c1d      	ldr	r4, [pc, #116]	; (8005700 <prvCLITask+0x18c>)
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <prvCLITask+0x178>)
 800568e:	7818      	ldrb	r0, [r3, #0]
 8005690:	002b      	movs	r3, r5
 8005692:	0022      	movs	r2, r4
 8005694:	2101      	movs	r1, #1
 8005696:	f7ff fd67 	bl	8005168 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800569a:	0021      	movs	r1, r4
 800569c:	481a      	ldr	r0, [pc, #104]	; (8005708 <prvCLITask+0x194>)
 800569e:	f010 f87b 	bl	8015798 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80056a2:	2232      	movs	r2, #50	; 0x32
 80056a4:	2100      	movs	r1, #0
 80056a6:	0020      	movs	r0, r4
 80056a8:	f00f fe40 	bl	801532c <memset>
			cInputIndex =0;
 80056ac:	2600      	movs	r6, #0
		taskYIELD();
 80056ae:	f00c f8eb 	bl	8011888 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <prvCLITask+0x178>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <prvCLITask+0x188>)
 80056ba:	5cd4      	ldrb	r4, [r2, r3]
 80056bc:	e7ca      	b.n	8005654 <prvCLITask+0xe0>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80056be:	4912      	ldr	r1, [pc, #72]	; (8005708 <prvCLITask+0x194>)
 80056c0:	480f      	ldr	r0, [pc, #60]	; (8005700 <prvCLITask+0x18c>)
 80056c2:	f010 f869 	bl	8015798 <strcpy>
 80056c6:	e7e0      	b.n	800568a <prvCLITask+0x116>
				if(cInputIndex > 0){
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	ddf0      	ble.n	80056ae <prvCLITask+0x13a>
					cInputIndex--;
 80056cc:	3e01      	subs	r6, #1
 80056ce:	b276      	sxtb	r6, r6
					cInputString[cInputIndex] ='\0';
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <prvCLITask+0x18c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	559a      	strb	r2, [r3, r6]
 80056d6:	e7ea      	b.n	80056ae <prvCLITask+0x13a>
 80056d8:	20006da0 	.word	0x20006da0
 80056dc:	20000050 	.word	0x20000050
 80056e0:	08019f2c 	.word	0x08019f2c
 80056e4:	20001066 	.word	0x20001066
 80056e8:	20001208 	.word	0x20001208
 80056ec:	20000a9f 	.word	0x20000a9f
 80056f0:	0801a440 	.word	0x0801a440
 80056f4:	0801a46c 	.word	0x0801a46c
 80056f8:	200012b8 	.word	0x200012b8
 80056fc:	200013f8 	.word	0x200013f8
 8005700:	20001138 	.word	0x20001138
 8005704:	0801bd28 	.word	0x0801bd28
 8005708:	200011d4 	.word	0x200011d4

0800570c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <ParseSnippetCommand+0x78>)
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	3a01      	subs	r2, #1
 8005716:	0093      	lsls	r3, r2, #2
 8005718:	189b      	adds	r3, r3, r2
 800571a:	009a      	lsls	r2, r3, #2
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <ParseSnippetCommand+0x7c>)
 800571e:	189b      	adds	r3, r3, r2
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02c      	beq.n	8005780 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <ParseSnippetCommand+0x80>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800572e:	4b17      	ldr	r3, [pc, #92]	; (800578c <ParseSnippetCommand+0x80>)
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	782b      	ldrb	r3, [r5, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005738:	2113      	movs	r1, #19
 800573a:	0028      	movs	r0, r5
 800573c:	f010 f81e 	bl	801577c <strchr>
 8005740:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005742:	d011      	beq.n	8005768 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005744:	1b42      	subs	r2, r0, r5
 8005746:	0029      	movs	r1, r5
 8005748:	0020      	movs	r0, r4
 800574a:	f010 f83e 	bl	80157ca <strncpy>
		ptrStart =ptrEnd + 1;
 800574e:	3601      	adds	r6, #1
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <ParseSnippetCommand+0x80>)
 8005752:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005754:	2001      	movs	r0, #1
 8005756:	e006      	b.n	8005766 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <ParseSnippetCommand+0x80>)
 800575a:	6018      	str	r0, [r3, #0]
 800575c:	e7e7      	b.n	800572e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <ParseSnippetCommand+0x80>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		return false;
 8005764:	2000      	movs	r0, #0
}
 8005766:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005768:	0029      	movs	r1, r5
 800576a:	0020      	movs	r0, r4
 800576c:	f010 f814 	bl	8015798 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005770:	0020      	movs	r0, r4
 8005772:	f7fa fcd1 	bl	8000118 <strlen>
 8005776:	182d      	adds	r5, r5, r0
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <ParseSnippetCommand+0x80>)
 800577a:	601d      	str	r5, [r3, #0]
	return true;
 800577c:	2001      	movs	r0, #1
 800577e:	e7f2      	b.n	8005766 <ParseSnippetCommand+0x5a>
		return false;
 8005780:	2000      	movs	r0, #0
 8005782:	e7f0      	b.n	8005766 <ParseSnippetCommand+0x5a>
 8005784:	20001207 	.word	0x20001207
 8005788:	20006dbc 	.word	0x20006dbc
 800578c:	20001230 	.word	0x20001230

08005790 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b083      	sub	sp, #12
 8005794:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005796:	0083      	lsls	r3, r0, #2
 8005798:	181b      	adds	r3, r3, r0
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <CheckSnippetCondition+0x128>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d004      	beq.n	80057ae <CheckSnippetCondition+0x1e>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d015      	beq.n	80057d4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80057a8:	2000      	movs	r0, #0
}
 80057aa:	b003      	add	sp, #12
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80057ae:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <CheckSnippetCondition+0x128>)
 80057b0:	0083      	lsls	r3, r0, #2
 80057b2:	1818      	adds	r0, r3, r0
 80057b4:	0081      	lsls	r1, r0, #2
 80057b6:	0008      	movs	r0, r1
 80057b8:	1851      	adds	r1, r2, r1
 80057ba:	7889      	ldrb	r1, [r1, #2]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80057bc:	1812      	adds	r2, r2, r0
 80057be:	78d2      	ldrb	r2, [r2, #3]
 80057c0:	00cb      	lsls	r3, r1, #3
 80057c2:	185b      	adds	r3, r3, r1
 80057c4:	493d      	ldr	r1, [pc, #244]	; (80058bc <CheckSnippetCondition+0x12c>)
 80057c6:	5c5b      	ldrb	r3, [r3, r1]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <CheckSnippetCondition+0x40>
				return false;
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7ec      	b.n	80057aa <CheckSnippetCondition+0x1a>
				return true;
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7ea      	b.n	80057aa <CheckSnippetCondition+0x1a>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80057d4:	4e38      	ldr	r6, [pc, #224]	; (80058b8 <CheckSnippetCondition+0x128>)
 80057d6:	0085      	lsls	r5, r0, #2
 80057d8:	182b      	adds	r3, r5, r0
 80057da:	0099      	lsls	r1, r3, #2
 80057dc:	1871      	adds	r1, r6, r1
 80057de:	78ca      	ldrb	r2, [r1, #3]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0053      	lsls	r3, r2, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	009a      	lsls	r2, r3, #2
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <CheckSnippetCondition+0x130>)
 80057ea:	58d3      	ldr	r3, [r2, r3]
 80057ec:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057ee:	3106      	adds	r1, #6
 80057f0:	2204      	movs	r2, #4
 80057f2:	a801      	add	r0, sp, #4
 80057f4:	f00f fd91 	bl	801531a <memcpy>
			switch(snippets[index].cond.mathOperator){
 80057f8:	192c      	adds	r4, r5, r4
 80057fa:	00a3      	lsls	r3, r4, #2
 80057fc:	18f6      	adds	r6, r6, r3
 80057fe:	7873      	ldrb	r3, [r6, #1]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d847      	bhi.n	8005894 <CheckSnippetCondition+0x104>
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <CheckSnippetCondition+0x134>)
 8005808:	58d3      	ldr	r3, [r2, r3]
 800580a:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800580c:	1c39      	adds	r1, r7, #0
 800580e:	9801      	ldr	r0, [sp, #4]
 8005810:	f7fa fe5e 	bl	80004d0 <__aeabi_fcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d03f      	beq.n	8005898 <CheckSnippetCondition+0x108>
						return true;
 8005818:	2001      	movs	r0, #1
 800581a:	e7c6      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 > flt2)
 800581c:	1c39      	adds	r1, r7, #0
 800581e:	9801      	ldr	r0, [sp, #4]
 8005820:	f7fa fe5c 	bl	80004dc <__aeabi_fcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	d101      	bne.n	800582c <CheckSnippetCondition+0x9c>
	return false;
 8005828:	2000      	movs	r0, #0
 800582a:	e7be      	b.n	80057aa <CheckSnippetCondition+0x1a>
						return true;
 800582c:	2001      	movs	r0, #1
 800582e:	e7bc      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005830:	1c39      	adds	r1, r7, #0
 8005832:	9801      	ldr	r0, [sp, #4]
 8005834:	f7fa fe66 	bl	8000504 <__aeabi_fcmpgt>
 8005838:	2800      	cmp	r0, #0
 800583a:	d02f      	beq.n	800589c <CheckSnippetCondition+0x10c>
 800583c:	2100      	movs	r1, #0
 800583e:	1c38      	adds	r0, r7, #0
 8005840:	f7fa fe46 	bl	80004d0 <__aeabi_fcmpeq>
 8005844:	2800      	cmp	r0, #0
 8005846:	d12b      	bne.n	80058a0 <CheckSnippetCondition+0x110>
						return true;
 8005848:	3001      	adds	r0, #1
 800584a:	e7ae      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 >= flt2)
 800584c:	1c39      	adds	r1, r7, #0
 800584e:	9801      	ldr	r0, [sp, #4]
 8005850:	f7fa fe4e 	bl	80004f0 <__aeabi_fcmple>
 8005854:	2800      	cmp	r0, #0
 8005856:	d025      	beq.n	80058a4 <CheckSnippetCondition+0x114>
						return true;
 8005858:	2001      	movs	r0, #1
 800585a:	e7a6      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800585c:	1c39      	adds	r1, r7, #0
 800585e:	9801      	ldr	r0, [sp, #4]
 8005860:	f7fa fe5a 	bl	8000518 <__aeabi_fcmpge>
 8005864:	2800      	cmp	r0, #0
 8005866:	d01f      	beq.n	80058a8 <CheckSnippetCondition+0x118>
 8005868:	2100      	movs	r1, #0
 800586a:	1c38      	adds	r0, r7, #0
 800586c:	f7fa fe30 	bl	80004d0 <__aeabi_fcmpeq>
 8005870:	2800      	cmp	r0, #0
 8005872:	d11b      	bne.n	80058ac <CheckSnippetCondition+0x11c>
						return true;
 8005874:	3001      	adds	r0, #1
 8005876:	e798      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005878:	1c39      	adds	r1, r7, #0
 800587a:	9801      	ldr	r0, [sp, #4]
 800587c:	f7fa fe28 	bl	80004d0 <__aeabi_fcmpeq>
 8005880:	2800      	cmp	r0, #0
 8005882:	d115      	bne.n	80058b0 <CheckSnippetCondition+0x120>
 8005884:	2100      	movs	r1, #0
 8005886:	1c38      	adds	r0, r7, #0
 8005888:	f7fa fe22 	bl	80004d0 <__aeabi_fcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d111      	bne.n	80058b4 <CheckSnippetCondition+0x124>
						return true;
 8005890:	3001      	adds	r0, #1
 8005892:	e78a      	b.n	80057aa <CheckSnippetCondition+0x1a>
	return false;
 8005894:	2000      	movs	r0, #0
 8005896:	e788      	b.n	80057aa <CheckSnippetCondition+0x1a>
 8005898:	2000      	movs	r0, #0
 800589a:	e786      	b.n	80057aa <CheckSnippetCondition+0x1a>
 800589c:	2000      	movs	r0, #0
 800589e:	e784      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a0:	2000      	movs	r0, #0
 80058a2:	e782      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e780      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e77e      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e77c      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e77a      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e778      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b8:	20006dbc 	.word	0x20006dbc
 80058bc:	200014b4 	.word	0x200014b4
 80058c0:	20000090 	.word	0x20000090
 80058c4:	0801a228 	.word	0x0801a228

080058c8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80058c8:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80058ca:	f00a fa15 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 80058ce:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80058d0:	2400      	movs	r4, #0
 80058d2:	e01b      	b.n	800590c <ExecuteSnippet+0x44>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <ExecuteSnippet+0x74>)
 80058d6:	7818      	ldrb	r0, [r3, #0]
 80058d8:	002b      	movs	r3, r5
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <ExecuteSnippet+0x78>)
 80058dc:	2100      	movs	r1, #0
 80058de:	f7ff fc43 	bl	8005168 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80058e2:	0028      	movs	r0, r5
 80058e4:	f7fa fc18 	bl	8000118 <strlen>
 80058e8:	0002      	movs	r2, r0
 80058ea:	2100      	movs	r1, #0
 80058ec:	0028      	movs	r0, r5
 80058ee:	f00f fd1d 	bl	801532c <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80058f2:	00b3      	lsls	r3, r6, #2
 80058f4:	199b      	adds	r3, r3, r6
 80058f6:	009a      	lsls	r2, r3, #2
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <ExecuteSnippet+0x7c>)
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	68d8      	ldr	r0, [r3, #12]
 80058fe:	4910      	ldr	r1, [pc, #64]	; (8005940 <ExecuteSnippet+0x78>)
 8005900:	f7ff ff04 	bl	800570c <ParseSnippetCommand>
 8005904:	2800      	cmp	r0, #0
 8005906:	d1e5      	bne.n	80058d4 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005908:	3401      	adds	r4, #1
 800590a:	b2a4      	uxth	r4, r4
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <ExecuteSnippet+0x80>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	42a3      	cmp	r3, r4
 8005912:	d911      	bls.n	8005938 <ExecuteSnippet+0x70>
		if(snippets[s].state)								// Check for activated Snippets
 8005914:	0026      	movs	r6, r4
 8005916:	00a3      	lsls	r3, r4, #2
 8005918:	191b      	adds	r3, r3, r4
 800591a:	009a      	lsls	r2, r3, #2
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <ExecuteSnippet+0x7c>)
 800591e:	189b      	adds	r3, r3, r2
 8005920:	7c1b      	ldrb	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005926:	b2e0      	uxtb	r0, r4
 8005928:	f7ff ff32 	bl	8005790 <CheckSnippetCondition>
 800592c:	2800      	cmp	r0, #0
 800592e:	d0eb      	beq.n	8005908 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <ExecuteSnippet+0x84>)
 8005932:	2220      	movs	r2, #32
 8005934:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005936:	e7dc      	b.n	80058f2 <ExecuteSnippet+0x2a>
			}
		}
	}
	
	return result;
}
 8005938:	2000      	movs	r0, #0
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	20000a9f 	.word	0x20000a9f
 8005940:	200011a0 	.word	0x200011a0
 8005944:	20006dbc 	.word	0x20006dbc
 8005948:	20001207 	.word	0x20001207
 800594c:	20006da0 	.word	0x20006da0

08005950 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr

08005954 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	b083      	sub	sp, #12
 8005958:	0005      	movs	r5, r0
 800595a:	0016      	movs	r6, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 800595c:	2300      	movs	r3, #0
 800595e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005960:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005962:	2800      	cmp	r0, #0
 8005964:	d101      	bne.n	800596a <setBaudrateCommand+0x16>
 8005966:	b672      	cpsid	i
 8005968:	e7fe      	b.n	8005968 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800596a:	aa01      	add	r2, sp, #4
 800596c:	2101      	movs	r1, #1
 800596e:	0030      	movs	r0, r6
 8005970:	f00a f9c6 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005974:	2300      	movs	r3, #0
 8005976:	56c3      	ldrsb	r3, [r0, r3]
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d017      	beq.n	80059ac <setBaudrateCommand+0x58>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 800597c:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800597e:	466a      	mov	r2, sp
 8005980:	2102      	movs	r1, #2
 8005982:	0030      	movs	r0, r6
 8005984:	f00a f9bc 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005988:	f00f fa3d 	bl	8014e06 <atol>
 800598c:	0006      	movs	r6, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800598e:	2f68      	cmp	r7, #104	; 0x68
 8005990:	d012      	beq.n	80059b8 <setBaudrateCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 8005992:	0001      	movs	r1, r0
 8005994:	0020      	movs	r0, r4
 8005996:	f009 ffc9 	bl	800f92c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800599a:	0023      	movs	r3, r4
 800599c:	0032      	movs	r2, r6
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <setBaudrateCommand+0x70>)
 80059a0:	0028      	movs	r0, r5
 80059a2:	f00f febd 	bl	8015720 <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 80059a6:	2000      	movs	r0, #0
 80059a8:	b003      	add	sp, #12
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059ac:	3001      	adds	r0, #1
 80059ae:	f00f fa2a 	bl	8014e06 <atol>
 80059b2:	b2c4      	uxtb	r4, r0
	BOS_Status result =BOS_OK;
 80059b4:	2700      	movs	r7, #0
 80059b6:	e7e2      	b.n	800597e <setBaudrateCommand+0x2a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80059b8:	2213      	movs	r2, #19
 80059ba:	4903      	ldr	r1, [pc, #12]	; (80059c8 <setBaudrateCommand+0x74>)
 80059bc:	0028      	movs	r0, r5
 80059be:	f00f fcac 	bl	801531a <memcpy>
 80059c2:	e7f0      	b.n	80059a6 <setBaudrateCommand+0x52>
 80059c4:	0801b0e4 	.word	0x0801b0e4
 80059c8:	0801b0d0 	.word	0x0801b0d0

080059cc <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059cc:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d101      	bne.n	80059d6 <flashsizeCommand+0xa>
 80059d2:	b672      	cpsid	i
 80059d4:	e7fe      	b.n	80059d4 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <flashsizeCommand+0x1c>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	0412      	lsls	r2, r2, #16
 80059dc:	0c12      	lsrs	r2, r2, #16
 80059de:	4903      	ldr	r1, [pc, #12]	; (80059ec <flashsizeCommand+0x20>)
 80059e0:	f00f fe9e 	bl	8015720 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	1ffff7cc 	.word	0x1ffff7cc
 80059ec:	0801aac4 	.word	0x0801aac4

080059f0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059f0:	b510      	push	{r4, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	0004      	movs	r4, r0
 80059f6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d101      	bne.n	8005a08 <GetReadPrecentageCommand+0x18>
 8005a04:	b672      	cpsid	i
 8005a06:	e7fe      	b.n	8005a06 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a08:	aa01      	add	r2, sp, #4
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f00a f978 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005a10:	2300      	movs	r3, #0
 8005a12:	56c3      	ldrsb	r3, [r0, r3]
 8005a14:	3b32      	subs	r3, #50	; 0x32
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d907      	bls.n	8005a2c <GetReadPrecentageCommand+0x3c>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a1c:	2215      	movs	r2, #21
 8005a1e:	490b      	ldr	r1, [pc, #44]	; (8005a4c <GetReadPrecentageCommand+0x5c>)
 8005a20:	0020      	movs	r0, r4
 8005a22:	f00f fc7a 	bl	801531a <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005a26:	2000      	movs	r0, #0
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005a2c:	f00f f9eb 	bl	8014e06 <atol>
 8005a30:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005a32:	4669      	mov	r1, sp
 8005a34:	f003 f9a0 	bl	8008d78 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005a38:	9800      	ldr	r0, [sp, #0]
 8005a3a:	f7fd fb73 	bl	8003124 <__aeabi_f2d>
 8005a3e:	0002      	movs	r2, r0
 8005a40:	000b      	movs	r3, r1
 8005a42:	4903      	ldr	r1, [pc, #12]	; (8005a50 <GetReadPrecentageCommand+0x60>)
 8005a44:	0020      	movs	r0, r4
 8005a46:	f00f fe6b 	bl	8015720 <sprintf>
 8005a4a:	e7ec      	b.n	8005a26 <GetReadPrecentageCommand+0x36>
 8005a4c:	0801a7c0 	.word	0x0801a7c0
 8005a50:	0801a79c 	.word	0x0801a79c

08005a54 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a54:	b510      	push	{r4, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d101      	bne.n	8005a68 <ReadVrefCommand+0x14>
 8005a64:	b672      	cpsid	i
 8005a66:	e7fe      	b.n	8005a66 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005a68:	4669      	mov	r1, sp
 8005a6a:	a801      	add	r0, sp, #4
 8005a6c:	f003 f8c8 	bl	8008c00 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005a70:	a901      	add	r1, sp, #4
 8005a72:	0020      	movs	r0, r4
 8005a74:	f00f fe90 	bl	8015798 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005a78:	9800      	ldr	r0, [sp, #0]
 8005a7a:	f7fd fb53 	bl	8003124 <__aeabi_f2d>
 8005a7e:	0002      	movs	r2, r0
 8005a80:	000b      	movs	r3, r1
 8005a82:	4903      	ldr	r1, [pc, #12]	; (8005a90 <ReadVrefCommand+0x3c>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00f fe4b 	bl	8015720 <sprintf>
}
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd10      	pop	{r4, pc}
 8005a90:	0801a80c 	.word	0x0801a80c

08005a94 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a94:	b510      	push	{r4, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d101      	bne.n	8005aa8 <ReadTempCommand+0x14>
 8005aa4:	b672      	cpsid	i
 8005aa6:	e7fe      	b.n	8005aa6 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005aa8:	4669      	mov	r1, sp
 8005aaa:	a801      	add	r0, sp, #4
 8005aac:	f003 f8a8 	bl	8008c00 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005ab0:	a901      	add	r1, sp, #4
 8005ab2:	0020      	movs	r0, r4
 8005ab4:	f00f fe70 	bl	8015798 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005ab8:	9801      	ldr	r0, [sp, #4]
 8005aba:	f7fd fb33 	bl	8003124 <__aeabi_f2d>
 8005abe:	0002      	movs	r2, r0
 8005ac0:	000b      	movs	r3, r1
 8005ac2:	4903      	ldr	r1, [pc, #12]	; (8005ad0 <ReadTempCommand+0x3c>)
 8005ac4:	0020      	movs	r0, r4
 8005ac6:	f00f fe2b 	bl	8015720 <sprintf>
}
 8005aca:	2000      	movs	r0, #0
 8005acc:	b002      	add	sp, #8
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	0801a7d8 	.word	0x0801a7d8

08005ad4 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	0004      	movs	r4, r0
 8005ada:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005ae0:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d101      	bne.n	8005aee <ADCReadCommand+0x1a>
 8005aea:	b672      	cpsid	i
 8005aec:	e7fe      	b.n	8005aec <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	2101      	movs	r1, #1
 8005af2:	0028      	movs	r0, r5
 8005af4:	f00a f904 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8005af8:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005afa:	aa02      	add	r2, sp, #8
 8005afc:	2102      	movs	r1, #2
 8005afe:	0028      	movs	r0, r5
 8005b00:	f00a f8fe 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8005b04:	0005      	movs	r5, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005b06:	2300      	movs	r3, #0
 8005b08:	56f3      	ldrsb	r3, [r6, r3]
 8005b0a:	3b32      	subs	r3, #50	; 0x32
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d907      	bls.n	8005b22 <ADCReadCommand+0x4e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b12:	2215      	movs	r2, #21
 8005b14:	4919      	ldr	r1, [pc, #100]	; (8005b7c <ADCReadCommand+0xa8>)
 8005b16:	0020      	movs	r0, r4
 8005b18:	f00f fbff 	bl	801531a <memcpy>
}
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005b22:	0030      	movs	r0, r6
 8005b24:	f00f f96f 	bl	8014e06 <atol>
 8005b28:	b2c6      	uxtb	r6, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005b2a:	4915      	ldr	r1, [pc, #84]	; (8005b80 <ADCReadCommand+0xac>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f7fa fae9 	bl	8000104 <strcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d005      	beq.n	8005b42 <ADCReadCommand+0x6e>
 8005b36:	4913      	ldr	r1, [pc, #76]	; (8005b84 <ADCReadCommand+0xb0>)
 8005b38:	0028      	movs	r0, r5
 8005b3a:	f7fa fae3 	bl	8000104 <strcmp>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d116      	bne.n	8005b70 <ADCReadCommand+0x9c>
			ADCSelectChannel(ADCports,ADC_Side);
 8005b42:	4d0f      	ldr	r5, [pc, #60]	; (8005b80 <ADCReadCommand+0xac>)
 8005b44:	0029      	movs	r1, r5
 8005b46:	0030      	movs	r0, r6
 8005b48:	f003 f9e4 	bl	8008f14 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005b4c:	aa01      	add	r2, sp, #4
 8005b4e:	0029      	movs	r1, r5
 8005b50:	0030      	movs	r0, r6
 8005b52:	f003 fa0d 	bl	8008f70 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005b56:	a901      	add	r1, sp, #4
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f00f fe1d 	bl	8015798 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005b5e:	9801      	ldr	r0, [sp, #4]
 8005b60:	f7fa fd38 	bl	80005d4 <__aeabi_f2uiz>
 8005b64:	b282      	uxth	r2, r0
 8005b66:	4908      	ldr	r1, [pc, #32]	; (8005b88 <ADCReadCommand+0xb4>)
 8005b68:	0020      	movs	r0, r4
 8005b6a:	f00f fdd9 	bl	8015720 <sprintf>
 8005b6e:	e7d5      	b.n	8005b1c <ADCReadCommand+0x48>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b70:	2212      	movs	r2, #18
 8005b72:	4906      	ldr	r1, [pc, #24]	; (8005b8c <ADCReadCommand+0xb8>)
 8005b74:	0020      	movs	r0, r4
 8005b76:	f00f fbd0 	bl	801531a <memcpy>
 8005b7a:	e7cf      	b.n	8005b1c <ADCReadCommand+0x48>
 8005b7c:	0801a7c0 	.word	0x0801a7c0
 8005b80:	0801a74c 	.word	0x0801a74c
 8005b84:	0801a750 	.word	0x0801a750
 8005b88:	0801a758 	.word	0x0801a758
 8005b8c:	0801a768 	.word	0x0801a768

08005b90 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	b085      	sub	sp, #20
 8005b94:	0004      	movs	r4, r0
 8005b96:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005b9c:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <testportCommand+0x18c>)
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	ab02      	add	r3, sp, #8
 8005ba2:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	d101      	bne.n	8005bac <testportCommand+0x1c>
 8005ba8:	b672      	cpsid	i
 8005baa:	e7fe      	b.n	8005baa <testportCommand+0x1a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bac:	aa03      	add	r2, sp, #12
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f00a f8a6 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8005bb4:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005bb6:	495a      	ldr	r1, [pc, #360]	; (8005d20 <testportCommand+0x190>)
 8005bb8:	f7fa faa4 	bl	8000104 <strcmp>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d000      	beq.n	8005bc2 <testportCommand+0x32>
 8005bc0:	e06a      	b.n	8005c98 <testportCommand+0x108>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005bc2:	4b58      	ldr	r3, [pc, #352]	; (8005d24 <testportCommand+0x194>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <testportCommand+0x198>)
 8005bca:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 8005bcc:	2501      	movs	r5, #1
 8005bce:	e005      	b.n	8005bdc <testportCommand+0x4c>
			if(PcPort != ports){
 8005bd0:	4b54      	ldr	r3, [pc, #336]	; (8005d24 <testportCommand+0x194>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	42ab      	cmp	r3, r5
 8005bd6:	d106      	bne.n	8005be6 <testportCommand+0x56>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005bd8:	3501      	adds	r5, #1
 8005bda:	b2ed      	uxtb	r5, r5
 8005bdc:	2d05      	cmp	r5, #5
 8005bde:	d9f7      	bls.n	8005bd0 <testportCommand+0x40>
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	b005      	add	sp, #20
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] =rand();
 8005be6:	f00f fbb9 	bl	801535c <rand>
 8005bea:	af02      	add	r7, sp, #8
 8005bec:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005bee:	2364      	movs	r3, #100	; 0x64
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	3b5a      	subs	r3, #90	; 0x5a
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	0039      	movs	r1, r7
 8005bf8:	0028      	movs	r0, r5
 8005bfa:	f009 fe27 	bl	800f84c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005bfe:	0028      	movs	r0, r5
 8005c00:	f009 fe06 	bl	800f810 <GetUart>
 8005c04:	6803      	ldr	r3, [r0, #0]
 8005c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c08:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 8005c0a:	783a      	ldrb	r2, [r7, #0]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <testportCommand+0xc6>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005c10:	002a      	movs	r2, r5
 8005c12:	4946      	ldr	r1, [pc, #280]	; (8005d2c <testportCommand+0x19c>)
 8005c14:	0020      	movs	r0, r4
 8005c16:	f00f fd83 	bl	8015720 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	f7fa fa7c 	bl	8000118 <strlen>
 8005c20:	b282      	uxth	r2, r0
 8005c22:	4b40      	ldr	r3, [pc, #256]	; (8005d24 <testportCommand+0x194>)
 8005c24:	7818      	ldrb	r0, [r3, #0]
 8005c26:	2364      	movs	r3, #100	; 0x64
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	3b5a      	subs	r3, #90	; 0x5a
 8005c2c:	0021      	movs	r1, r4
 8005c2e:	f009 fe0d 	bl	800f84c <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005c32:	2254      	movs	r2, #84	; 0x54
 8005c34:	493e      	ldr	r1, [pc, #248]	; (8005d30 <testportCommand+0x1a0>)
 8005c36:	0020      	movs	r0, r4
 8005c38:	f00f fb6f 	bl	801531a <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c3c:	0020      	movs	r0, r4
 8005c3e:	f7fa fa6b 	bl	8000118 <strlen>
 8005c42:	b282      	uxth	r2, r0
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <testportCommand+0x194>)
 8005c46:	7818      	ldrb	r0, [r3, #0]
 8005c48:	2364      	movs	r3, #100	; 0x64
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	3b5a      	subs	r3, #90	; 0x5a
 8005c4e:	0021      	movs	r1, r4
 8005c50:	f009 fdfc 	bl	800f84c <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c54:	e014      	b.n	8005c80 <testportCommand+0xf0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005c56:	002a      	movs	r2, r5
 8005c58:	4936      	ldr	r1, [pc, #216]	; (8005d34 <testportCommand+0x1a4>)
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f00f fd60 	bl	8015720 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c60:	0020      	movs	r0, r4
 8005c62:	f7fa fa59 	bl	8000118 <strlen>
 8005c66:	b282      	uxth	r2, r0
 8005c68:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <testportCommand+0x194>)
 8005c6a:	7818      	ldrb	r0, [r3, #0]
 8005c6c:	2364      	movs	r3, #100	; 0x64
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	3b5a      	subs	r3, #90	; 0x5a
 8005c72:	0021      	movs	r1, r4
 8005c74:	f009 fdea 	bl	800f84c <writePxMutex>
 8005c78:	e7db      	b.n	8005c32 <testportCommand+0xa2>
					Delay_ms(1);
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f00b ff96 	bl	8011bac <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c80:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <testportCommand+0x194>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	1c71      	adds	r1, r6, #1
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <testportCommand+0x1a8>)
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	5c5b      	ldrb	r3, [r3, r1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f2      	beq.n	8005c7a <testportCommand+0xea>
				LastEnter++;
 8005c94:	000e      	movs	r6, r1
 8005c96:	e79f      	b.n	8005bd8 <testportCommand+0x48>
	else if(pcParameterString1[0] == 'p'){
 8005c98:	2300      	movs	r3, #0
 8005c9a:	56eb      	ldrsb	r3, [r5, r3]
 8005c9c:	2b70      	cmp	r3, #112	; 0x70
 8005c9e:	d005      	beq.n	8005cac <testportCommand+0x11c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	4926      	ldr	r1, [pc, #152]	; (8005d3c <testportCommand+0x1ac>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00f fb38 	bl	801531a <memcpy>
 8005caa:	e799      	b.n	8005be0 <testportCommand+0x50>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005cac:	1c68      	adds	r0, r5, #1
 8005cae:	f00f f8aa 	bl	8014e06 <atol>
 8005cb2:	0005      	movs	r5, r0
 8005cb4:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005cb6:	1e7b      	subs	r3, r7, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d81a      	bhi.n	8005cf4 <testportCommand+0x164>
				WriteVaule[0] =rand();
 8005cbe:	f00f fb4d 	bl	801535c <rand>
 8005cc2:	ae02      	add	r6, sp, #8
 8005cc4:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005cc6:	2364      	movs	r3, #100	; 0x64
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	3b32      	subs	r3, #50	; 0x32
 8005ccc:	2201      	movs	r2, #1
 8005cce:	0031      	movs	r1, r6
 8005cd0:	0038      	movs	r0, r7
 8005cd2:	f009 fdbb 	bl	800f84c <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005cd6:	0038      	movs	r0, r7
 8005cd8:	f009 fd9a 	bl	800f810 <GetUart>
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ce0:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005ce2:	7832      	ldrb	r2, [r6, #0]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10e      	bne.n	8005d06 <testportCommand+0x176>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005ce8:	b2ea      	uxtb	r2, r5
 8005cea:	4912      	ldr	r1, [pc, #72]	; (8005d34 <testportCommand+0x1a4>)
 8005cec:	0020      	movs	r0, r4
 8005cee:	f00f fd17 	bl	8015720 <sprintf>
 8005cf2:	e775      	b.n	8005be0 <testportCommand+0x50>
			result =BOS_ERR_WrongID;
 8005cf4:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005cf6:	2b66      	cmp	r3, #102	; 0x66
 8005cf8:	d107      	bne.n	8005d0a <testportCommand+0x17a>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005cfa:	221b      	movs	r2, #27
 8005cfc:	4910      	ldr	r1, [pc, #64]	; (8005d40 <testportCommand+0x1b0>)
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f00f fb0b 	bl	801531a <memcpy>
 8005d04:	e76c      	b.n	8005be0 <testportCommand+0x50>
				result =BOS_ERR_Keyword;
 8005d06:	2306      	movs	r3, #6
 8005d08:	e7f5      	b.n	8005cf6 <testportCommand+0x166>
		else if(result == BOS_ERR_Keyword)
 8005d0a:	2b06      	cmp	r3, #6
 8005d0c:	d000      	beq.n	8005d10 <testportCommand+0x180>
 8005d0e:	e767      	b.n	8005be0 <testportCommand+0x50>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005d10:	b2ea      	uxtb	r2, r5
 8005d12:	4906      	ldr	r1, [pc, #24]	; (8005d2c <testportCommand+0x19c>)
 8005d14:	0020      	movs	r0, r4
 8005d16:	f00f fd03 	bl	8015720 <sprintf>
 8005d1a:	e761      	b.n	8005be0 <testportCommand+0x50>
 8005d1c:	08019b20 	.word	0x08019b20
 8005d20:	08019efc 	.word	0x08019efc
 8005d24:	20000a9f 	.word	0x20000a9f
 8005d28:	200013f8 	.word	0x200013f8
 8005d2c:	0801c3d4 	.word	0x0801c3d4
 8005d30:	0801c3e8 	.word	0x0801c3e8
 8005d34:	0801c3b8 	.word	0x0801c3b8
 8005d38:	200012b8 	.word	0x200012b8
 8005d3c:	0801c458 	.word	0x0801c458
 8005d40:	0801c43c 	.word	0x0801c43c

08005d44 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	b085      	sub	sp, #20
 8005d48:	0004      	movs	r4, r0
 8005d4a:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d101      	bne.n	8005d5a <unbridgeCommand+0x16>
 8005d56:	b672      	cpsid	i
 8005d58:	e7fe      	b.n	8005d58 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	9801      	ldr	r0, [sp, #4]
 8005d60:	f009 ffce 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005d64:	2300      	movs	r3, #0
 8005d66:	56c3      	ldrsb	r3, [r0, r3]
 8005d68:	2b70      	cmp	r3, #112	; 0x70
 8005d6a:	d016      	beq.n	8005d9a <unbridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005d6c:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d6e:	aa02      	add	r2, sp, #8
 8005d70:	2102      	movs	r1, #2
 8005d72:	9801      	ldr	r0, [sp, #4]
 8005d74:	f009 ffc4 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005d78:	2300      	movs	r3, #0
 8005d7a:	56c3      	ldrsb	r3, [r0, r3]
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d012      	beq.n	8005da6 <unbridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005d80:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d01a      	beq.n	8005dbc <unbridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005d86:	2867      	cmp	r0, #103	; 0x67
 8005d88:	d021      	beq.n	8005dce <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005d8a:	2219      	movs	r2, #25
 8005d8c:	4913      	ldr	r1, [pc, #76]	; (8005ddc <unbridgeCommand+0x98>)
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f00f fac3 	bl	801531a <memcpy>
}
 8005d94:	2000      	movs	r0, #0
 8005d96:	b005      	add	sp, #20
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f00f f833 	bl	8014e06 <atol>
 8005da0:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005da2:	2700      	movs	r7, #0
 8005da4:	e7e3      	b.n	8005d6e <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005da6:	3001      	adds	r0, #1
 8005da8:	f00f f82d 	bl	8014e06 <atol>
 8005dac:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	d10b      	bne.n	8005dca <unbridgeCommand+0x86>
		result =Unbridge(port1,port2);
 8005db2:	0031      	movs	r1, r6
 8005db4:	0028      	movs	r0, r5
 8005db6:	f7fe fedd 	bl	8004b74 <Unbridge>
 8005dba:	e7e2      	b.n	8005d82 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005dbc:	0033      	movs	r3, r6
 8005dbe:	002a      	movs	r2, r5
 8005dc0:	4907      	ldr	r1, [pc, #28]	; (8005de0 <unbridgeCommand+0x9c>)
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	f00f fcac 	bl	8015720 <sprintf>
 8005dc8:	e7e4      	b.n	8005d94 <unbridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005dca:	2067      	movs	r0, #103	; 0x67
 8005dcc:	e7db      	b.n	8005d86 <unbridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005dce:	220f      	movs	r2, #15
 8005dd0:	4904      	ldr	r1, [pc, #16]	; (8005de4 <unbridgeCommand+0xa0>)
 8005dd2:	0020      	movs	r0, r4
 8005dd4:	f00f faa1 	bl	801531a <memcpy>
 8005dd8:	e7dc      	b.n	8005d94 <unbridgeCommand+0x50>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	0801c504 	.word	0x0801c504
 8005de0:	0801c4e4 	.word	0x0801c4e4
 8005de4:	0801c458 	.word	0x0801c458

08005de8 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b085      	sub	sp, #20
 8005dec:	0004      	movs	r4, r0
 8005dee:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d101      	bne.n	8005dfe <bridgeCommand+0x16>
 8005dfa:	b672      	cpsid	i
 8005dfc:	e7fe      	b.n	8005dfc <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dfe:	aa03      	add	r2, sp, #12
 8005e00:	2101      	movs	r1, #1
 8005e02:	9801      	ldr	r0, [sp, #4]
 8005e04:	f009 ff7c 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005e08:	2300      	movs	r3, #0
 8005e0a:	56c3      	ldrsb	r3, [r0, r3]
 8005e0c:	2b70      	cmp	r3, #112	; 0x70
 8005e0e:	d016      	beq.n	8005e3e <bridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005e10:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e12:	aa02      	add	r2, sp, #8
 8005e14:	2102      	movs	r1, #2
 8005e16:	9801      	ldr	r0, [sp, #4]
 8005e18:	f009 ff72 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	56c3      	ldrsb	r3, [r0, r3]
 8005e20:	2b70      	cmp	r3, #112	; 0x70
 8005e22:	d012      	beq.n	8005e4a <bridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005e24:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d01a      	beq.n	8005e60 <bridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005e2a:	2867      	cmp	r0, #103	; 0x67
 8005e2c:	d021      	beq.n	8005e72 <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005e2e:	2217      	movs	r2, #23
 8005e30:	4913      	ldr	r1, [pc, #76]	; (8005e80 <bridgeCommand+0x98>)
 8005e32:	0020      	movs	r0, r4
 8005e34:	f00f fa71 	bl	801531a <memcpy>
}
 8005e38:	2000      	movs	r0, #0
 8005e3a:	b005      	add	sp, #20
 8005e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f00e ffe1 	bl	8014e06 <atol>
 8005e44:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005e46:	2700      	movs	r7, #0
 8005e48:	e7e3      	b.n	8005e12 <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f00e ffdb 	bl	8014e06 <atol>
 8005e50:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	d10b      	bne.n	8005e6e <bridgeCommand+0x86>
		result =Bridge(port1,port2);
 8005e56:	0031      	movs	r1, r6
 8005e58:	0028      	movs	r0, r5
 8005e5a:	f7fe fe77 	bl	8004b4c <Bridge>
 8005e5e:	e7e2      	b.n	8005e26 <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005e60:	0033      	movs	r3, r6
 8005e62:	002a      	movs	r2, r5
 8005e64:	4907      	ldr	r1, [pc, #28]	; (8005e84 <bridgeCommand+0x9c>)
 8005e66:	0020      	movs	r0, r4
 8005e68:	f00f fc5a 	bl	8015720 <sprintf>
 8005e6c:	e7e4      	b.n	8005e38 <bridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005e6e:	2067      	movs	r0, #103	; 0x67
 8005e70:	e7db      	b.n	8005e2a <bridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e72:	220f      	movs	r2, #15
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <bridgeCommand+0xa0>)
 8005e76:	0020      	movs	r0, r4
 8005e78:	f00f fa4f 	bl	801531a <memcpy>
 8005e7c:	e7dc      	b.n	8005e38 <bridgeCommand+0x50>
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	0801a960 	.word	0x0801a960
 8005e84:	0801a93c 	.word	0x0801a93c
 8005e88:	0801c458 	.word	0x0801c458

08005e8c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	0006      	movs	r6, r0
 8005e92:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	d101      	bne.n	8005ea0 <delSnipCommand+0x14>
 8005e9c:	b672      	cpsid	i
 8005e9e:	e7fe      	b.n	8005e9e <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ea0:	aa01      	add	r2, sp, #4
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	f009 ff2c 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ea8:	f00e ffa7 	bl	8014dfa <atoi>
 8005eac:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	d03f      	beq.n	8005f32 <delSnipCommand+0xa6>
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <delSnipCommand+0xc8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	d201      	bcs.n	8005ebe <delSnipCommand+0x32>
 8005eba:	23ff      	movs	r3, #255	; 0xff
 8005ebc:	e03a      	b.n	8005f34 <delSnipCommand+0xa8>
		snippets[index - 1].cond.conditionType =0;
 8005ebe:	b2c0      	uxtb	r0, r0
 8005ec0:	3801      	subs	r0, #1
 8005ec2:	4d25      	ldr	r5, [pc, #148]	; (8005f58 <delSnipCommand+0xcc>)
 8005ec4:	2314      	movs	r3, #20
 8005ec6:	4358      	muls	r0, r3
 8005ec8:	2700      	movs	r7, #0
 8005eca:	5547      	strb	r7, [r0, r5]
		snippets[index - 1].cond.mathOperator =0;
 8005ecc:	182d      	adds	r5, r5, r0
 8005ece:	706f      	strb	r7, [r5, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ed0:	1ca8      	adds	r0, r5, #2
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	0039      	movs	r1, r7
 8005ed6:	f00f fa29 	bl	801532c <memset>
		snippets[index - 1].state = false;
 8005eda:	742f      	strb	r7, [r5, #16]
		free(snippets[index - 1].cmd);
 8005edc:	68e8      	ldr	r0, [r5, #12]
 8005ede:	f00e ffd9 	bl	8014e94 <free>
		snippets[index - 1].cmd = NULL;
 8005ee2:	60ef      	str	r7, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ee4:	e008      	b.n	8005ef8 <delSnipCommand+0x6c>
			if(snippets[s].cond.conditionType){
 8005ee6:	00a3      	lsls	r3, r4, #2
 8005ee8:	191b      	adds	r3, r3, r4
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <delSnipCommand+0xcc>)
 8005eee:	5cd3      	ldrb	r3, [r2, r3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <delSnipCommand+0x82>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ef4:	3401      	adds	r4, #1
 8005ef6:	b2e4      	uxtb	r4, r4
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <delSnipCommand+0xc8>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d8f2      	bhi.n	8005ee6 <delSnipCommand+0x5a>
		--numOfRecordedSnippets;
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <delSnipCommand+0xc8>)
 8005f04:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005f06:	f005 ff13 	bl	800bd30 <SaveToRO>
	BOS_Status result =BOS_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e012      	b.n	8005f34 <delSnipCommand+0xa8>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005f0e:	1e60      	subs	r0, r4, #1
 8005f10:	2714      	movs	r7, #20
 8005f12:	4378      	muls	r0, r7
 8005f14:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <delSnipCommand+0xcc>)
 8005f16:	18c0      	adds	r0, r0, r3
 8005f18:	003d      	movs	r5, r7
 8005f1a:	4365      	muls	r5, r4
 8005f1c:	18ed      	adds	r5, r5, r3
 8005f1e:	003a      	movs	r2, r7
 8005f20:	0029      	movs	r1, r5
 8005f22:	f00f f9fa 	bl	801531a <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005f26:	003a      	movs	r2, r7
 8005f28:	2100      	movs	r1, #0
 8005f2a:	0028      	movs	r0, r5
 8005f2c:	f00f f9fe 	bl	801532c <memset>
 8005f30:	e7e0      	b.n	8005ef4 <delSnipCommand+0x68>
 8005f32:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <delSnipCommand+0xb8>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f38:	2223      	movs	r2, #35	; 0x23
 8005f3a:	4908      	ldr	r1, [pc, #32]	; (8005f5c <delSnipCommand+0xd0>)
 8005f3c:	0030      	movs	r0, r6
 8005f3e:	f00f f9ec 	bl	801531a <memcpy>
 8005f42:	e004      	b.n	8005f4e <delSnipCommand+0xc2>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005f44:	2236      	movs	r2, #54	; 0x36
 8005f46:	4906      	ldr	r1, [pc, #24]	; (8005f60 <delSnipCommand+0xd4>)
 8005f48:	0030      	movs	r0, r6
 8005f4a:	f00f f9e6 	bl	801531a <memcpy>
}
 8005f4e:	2000      	movs	r0, #0
 8005f50:	b003      	add	sp, #12
 8005f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f54:	20001207 	.word	0x20001207
 8005f58:	20006dbc 	.word	0x20006dbc
 8005f5c:	0801aa80 	.word	0x0801aa80
 8005f60:	0801aa48 	.word	0x0801aa48

08005f64 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f64:	b510      	push	{r4, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	0004      	movs	r4, r0
 8005f6a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	d101      	bne.n	8005f78 <pauseSnipCommand+0x14>
 8005f74:	b672      	cpsid	i
 8005f76:	e7fe      	b.n	8005f76 <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f78:	aa01      	add	r2, sp, #4
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f009 fec0 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005f80:	f00e ff3b 	bl	8014dfa <atoi>
 8005f84:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <pauseSnipCommand+0x2e>
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <pauseSnipCommand+0x60>)
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d207      	bcs.n	8005fa2 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f92:	2223      	movs	r2, #35	; 0x23
 8005f94:	490c      	ldr	r1, [pc, #48]	; (8005fc8 <pauseSnipCommand+0x64>)
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00f f9bf 	bl	801531a <memcpy>
}
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005fa2:	b2c0      	uxtb	r0, r0
 8005fa4:	3801      	subs	r0, #1
 8005fa6:	2314      	movs	r3, #20
 8005fa8:	4343      	muls	r3, r0
 8005faa:	4808      	ldr	r0, [pc, #32]	; (8005fcc <pauseSnipCommand+0x68>)
 8005fac:	18c0      	adds	r0, r0, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005fb2:	f005 febd 	bl	800bd30 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005fb6:	2235      	movs	r2, #53	; 0x35
 8005fb8:	4905      	ldr	r1, [pc, #20]	; (8005fd0 <pauseSnipCommand+0x6c>)
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f00f f9ad 	bl	801531a <memcpy>
 8005fc0:	e7ec      	b.n	8005f9c <pauseSnipCommand+0x38>
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	20001207 	.word	0x20001207
 8005fc8:	0801aa80 	.word	0x0801aa80
 8005fcc:	20006dbc 	.word	0x20006dbc
 8005fd0:	0801ae90 	.word	0x0801ae90

08005fd4 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	0004      	movs	r4, r0
 8005fda:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005fe0:	2c00      	cmp	r4, #0
 8005fe2:	d101      	bne.n	8005fe8 <actSnipCommand+0x14>
 8005fe4:	b672      	cpsid	i
 8005fe6:	e7fe      	b.n	8005fe6 <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fe8:	aa01      	add	r2, sp, #4
 8005fea:	2101      	movs	r1, #1
 8005fec:	f009 fe88 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ff0:	f00e ff03 	bl	8014dfa <atoi>
 8005ff4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <actSnipCommand+0x2e>
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <actSnipCommand+0x60>)
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d207      	bcs.n	8006012 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8006002:	2223      	movs	r2, #35	; 0x23
 8006004:	490c      	ldr	r1, [pc, #48]	; (8006038 <actSnipCommand+0x64>)
 8006006:	0020      	movs	r0, r4
 8006008:	f00f f987 	bl	801531a <memcpy>
}
 800600c:	2000      	movs	r0, #0
 800600e:	b002      	add	sp, #8
 8006010:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8006012:	b2c0      	uxtb	r0, r0
 8006014:	3801      	subs	r0, #1
 8006016:	2314      	movs	r3, #20
 8006018:	4343      	muls	r3, r0
 800601a:	4808      	ldr	r0, [pc, #32]	; (800603c <actSnipCommand+0x68>)
 800601c:	18c0      	adds	r0, r0, r3
 800601e:	2301      	movs	r3, #1
 8006020:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8006022:	f005 fe85 	bl	800bd30 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8006026:	2238      	movs	r2, #56	; 0x38
 8006028:	4905      	ldr	r1, [pc, #20]	; (8006040 <actSnipCommand+0x6c>)
 800602a:	0020      	movs	r0, r4
 800602c:	f00f f975 	bl	801531a <memcpy>
 8006030:	e7ec      	b.n	800600c <actSnipCommand+0x38>
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	20001207 	.word	0x20001207
 8006038:	0801aa80 	.word	0x0801aa80
 800603c:	20006dbc 	.word	0x20006dbc
 8006040:	0801a844 	.word	0x0801a844

08006044 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	46ce      	mov	lr, r9
 8006048:	4647      	mov	r7, r8
 800604a:	b580      	push	{r7, lr}
 800604c:	b08b      	sub	sp, #44	; 0x2c
 800604e:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8006050:	aa06      	add	r2, sp, #24
 8006052:	4b74      	ldr	r3, [pc, #464]	; (8006224 <snipCommand+0x1e0>)
 8006054:	3304      	adds	r3, #4
 8006056:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006058:	c223      	stmia	r2!, {r0, r1, r5}
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2c00      	cmp	r4, #0
 8006060:	d101      	bne.n	8006066 <snipCommand+0x22>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <snipCommand+0x20>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8006066:	4b70      	ldr	r3, [pc, #448]	; (8006228 <snipCommand+0x1e4>)
 8006068:	7818      	ldrb	r0, [r3, #0]
 800606a:	2301      	movs	r3, #1
 800606c:	425b      	negs	r3, r3
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	3333      	adds	r3, #51	; 0x33
 8006072:	2237      	movs	r2, #55	; 0x37
 8006074:	496d      	ldr	r1, [pc, #436]	; (800622c <snipCommand+0x1e8>)
 8006076:	f009 fbe9 	bl	800f84c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800607a:	2700      	movs	r7, #0
	uint8_t count =1;
 800607c:	2301      	movs	r3, #1
 800607e:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006080:	e088      	b.n	8006194 <snipCommand+0x150>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8006082:	4b6b      	ldr	r3, [pc, #428]	; (8006230 <snipCommand+0x1ec>)
 8006084:	189b      	adds	r3, r3, r2
 8006086:	7c1a      	ldrb	r2, [r3, #16]
 8006088:	00d3      	lsls	r3, r2, #3
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	aa06      	add	r2, sp, #24
 800608e:	4694      	mov	ip, r2
 8006090:	4463      	add	r3, ip
 8006092:	4642      	mov	r2, r8
 8006094:	4967      	ldr	r1, [pc, #412]	; (8006234 <snipCommand+0x1f0>)
 8006096:	0020      	movs	r0, r4
 8006098:	f00f fb42 	bl	8015720 <sprintf>
 800609c:	e087      	b.n	80061ae <snipCommand+0x16a>
				switch(snippets[s].cond.buffer1[1]){
 800609e:	00ab      	lsls	r3, r5, #2
 80060a0:	195b      	adds	r3, r3, r5
 80060a2:	009a      	lsls	r2, r3, #2
 80060a4:	4b62      	ldr	r3, [pc, #392]	; (8006230 <snipCommand+0x1ec>)
 80060a6:	189b      	adds	r3, r3, r2
 80060a8:	78db      	ldrb	r3, [r3, #3]
 80060aa:	3b05      	subs	r3, #5
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	2a09      	cmp	r2, #9
 80060b0:	d84a      	bhi.n	8006148 <snipCommand+0x104>
 80060b2:	0093      	lsls	r3, r2, #2
 80060b4:	4a60      	ldr	r2, [pc, #384]	; (8006238 <snipCommand+0x1f4>)
 80060b6:	58d3      	ldr	r3, [r2, r3]
 80060b8:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80060ba:	2314      	movs	r3, #20
 80060bc:	436b      	muls	r3, r5
 80060be:	4a5c      	ldr	r2, [pc, #368]	; (8006230 <snipCommand+0x1ec>)
 80060c0:	18d2      	adds	r2, r2, r3
 80060c2:	7893      	ldrb	r3, [r2, #2]
 80060c4:	68d2      	ldr	r2, [r2, #12]
 80060c6:	9200      	str	r2, [sp, #0]
 80060c8:	0022      	movs	r2, r4
 80060ca:	495c      	ldr	r1, [pc, #368]	; (800623c <snipCommand+0x1f8>)
 80060cc:	0020      	movs	r0, r4
 80060ce:	f00f fb27 	bl	8015720 <sprintf>
						break;
 80060d2:	e039      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80060d4:	2314      	movs	r3, #20
 80060d6:	436b      	muls	r3, r5
 80060d8:	4a55      	ldr	r2, [pc, #340]	; (8006230 <snipCommand+0x1ec>)
 80060da:	18d2      	adds	r2, r2, r3
 80060dc:	7893      	ldrb	r3, [r2, #2]
 80060de:	68d2      	ldr	r2, [r2, #12]
 80060e0:	9200      	str	r2, [sp, #0]
 80060e2:	0022      	movs	r2, r4
 80060e4:	4956      	ldr	r1, [pc, #344]	; (8006240 <snipCommand+0x1fc>)
 80060e6:	0020      	movs	r0, r4
 80060e8:	f00f fb1a 	bl	8015720 <sprintf>
						break;
 80060ec:	e02c      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 80060ee:	2314      	movs	r3, #20
 80060f0:	436b      	muls	r3, r5
 80060f2:	4a4f      	ldr	r2, [pc, #316]	; (8006230 <snipCommand+0x1ec>)
 80060f4:	18d2      	adds	r2, r2, r3
 80060f6:	7893      	ldrb	r3, [r2, #2]
 80060f8:	7911      	ldrb	r1, [r2, #4]
 80060fa:	68d2      	ldr	r2, [r2, #12]
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	0022      	movs	r2, r4
 8006102:	4950      	ldr	r1, [pc, #320]	; (8006244 <snipCommand+0x200>)
 8006104:	0020      	movs	r0, r4
 8006106:	f00f fb0b 	bl	8015720 <sprintf>
						break;
 800610a:	e01d      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800610c:	2314      	movs	r3, #20
 800610e:	436b      	muls	r3, r5
 8006110:	4a47      	ldr	r2, [pc, #284]	; (8006230 <snipCommand+0x1ec>)
 8006112:	18d2      	adds	r2, r2, r3
 8006114:	7893      	ldrb	r3, [r2, #2]
 8006116:	7911      	ldrb	r1, [r2, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	9201      	str	r2, [sp, #4]
 800611c:	9100      	str	r1, [sp, #0]
 800611e:	0022      	movs	r2, r4
 8006120:	4949      	ldr	r1, [pc, #292]	; (8006248 <snipCommand+0x204>)
 8006122:	0020      	movs	r0, r4
 8006124:	f00f fafc 	bl	8015720 <sprintf>
						break;
 8006128:	e00e      	b.n	8006148 <snipCommand+0x104>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 800612a:	4e48      	ldr	r6, [pc, #288]	; (800624c <snipCommand+0x208>)
 800612c:	0033      	movs	r3, r6
 800612e:	0022      	movs	r2, r4
 8006130:	4947      	ldr	r1, [pc, #284]	; (8006250 <snipCommand+0x20c>)
 8006132:	0020      	movs	r0, r4
 8006134:	f00f faf4 	bl	8015720 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8006138:	0030      	movs	r0, r6
 800613a:	f7f9 ffed 	bl	8000118 <strlen>
 800613e:	0002      	movs	r2, r0
 8006140:	2100      	movs	r1, #0
 8006142:	0030      	movs	r0, r6
 8006144:	f00f f8f2 	bl	801532c <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8006148:	00ab      	lsls	r3, r5, #2
 800614a:	195b      	adds	r3, r3, r5
 800614c:	009a      	lsls	r2, r3, #2
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <snipCommand+0x1ec>)
 8006150:	189b      	adds	r3, r3, r2
 8006152:	68d8      	ldr	r0, [r3, #12]
 8006154:	493d      	ldr	r1, [pc, #244]	; (800624c <snipCommand+0x208>)
 8006156:	f7ff fad9 	bl	800570c <ParseSnippetCommand>
 800615a:	2800      	cmp	r0, #0
 800615c:	d1e5      	bne.n	800612a <snipCommand+0xe6>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 800615e:	0020      	movs	r0, r4
 8006160:	f7f9 ffda 	bl	8000118 <strlen>
 8006164:	1820      	adds	r0, r4, r0
 8006166:	220c      	movs	r2, #12
 8006168:	493a      	ldr	r1, [pc, #232]	; (8006254 <snipCommand+0x210>)
 800616a:	f00f f8d6 	bl	801531a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800616e:	0020      	movs	r0, r4
 8006170:	f7f9 ffd2 	bl	8000118 <strlen>
 8006174:	b282      	uxth	r2, r0
 8006176:	4b2c      	ldr	r3, [pc, #176]	; (8006228 <snipCommand+0x1e4>)
 8006178:	7818      	ldrb	r0, [r3, #0]
 800617a:	2301      	movs	r3, #1
 800617c:	425b      	negs	r3, r3
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	3333      	adds	r3, #51	; 0x33
 8006182:	0021      	movs	r1, r4
 8006184:	f009 fb62 	bl	800f84c <writePxMutex>
		++count;
 8006188:	4643      	mov	r3, r8
 800618a:	3301      	adds	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006190:	3701      	adds	r7, #1
 8006192:	b2ff      	uxtb	r7, r7
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <snipCommand+0x214>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	42bb      	cmp	r3, r7
 800619a:	d938      	bls.n	800620e <snipCommand+0x1ca>
		if(snippets[s].cond.conditionType)
 800619c:	003d      	movs	r5, r7
 800619e:	00bb      	lsls	r3, r7, #2
 80061a0:	19db      	adds	r3, r3, r7
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <snipCommand+0x1ec>)
 80061a6:	5cd3      	ldrb	r3, [r2, r3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d000      	beq.n	80061ae <snipCommand+0x16a>
 80061ac:	e769      	b.n	8006082 <snipCommand+0x3e>
		switch(snippets[s].cond.conditionType){
 80061ae:	00ab      	lsls	r3, r5, #2
 80061b0:	195b      	adds	r3, r3, r5
 80061b2:	009a      	lsls	r2, r3, #2
 80061b4:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <snipCommand+0x1ec>)
 80061b6:	5cd3      	ldrb	r3, [r2, r3]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d100      	bne.n	80061be <snipCommand+0x17a>
 80061bc:	e76f      	b.n	800609e <snipCommand+0x5a>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d1c2      	bne.n	8006148 <snipCommand+0x104>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80061c2:	00ab      	lsls	r3, r5, #2
 80061c4:	195b      	adds	r3, r3, r5
 80061c6:	009e      	lsls	r6, r3, #2
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <snipCommand+0x1ec>)
 80061ca:	18f6      	adds	r6, r6, r3
 80061cc:	1db1      	adds	r1, r6, #6
 80061ce:	2204      	movs	r2, #4
 80061d0:	a805      	add	r0, sp, #20
 80061d2:	f00f f8a2 	bl	801531a <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 80061d6:	78f2      	ldrb	r2, [r6, #3]
 80061d8:	3a01      	subs	r2, #1
 80061da:	7873      	ldrb	r3, [r6, #1]
 80061dc:	3b01      	subs	r3, #1
 80061de:	005e      	lsls	r6, r3, #1
 80061e0:	18f3      	adds	r3, r6, r3
 80061e2:	4e1e      	ldr	r6, [pc, #120]	; (800625c <snipCommand+0x218>)
 80061e4:	18f6      	adds	r6, r6, r3
 80061e6:	0053      	lsls	r3, r2, #1
 80061e8:	189b      	adds	r3, r3, r2
 80061ea:	009a      	lsls	r2, r3, #2
 80061ec:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <snipCommand+0x21c>)
 80061ee:	189b      	adds	r3, r3, r2
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4699      	mov	r9, r3
 80061f4:	9805      	ldr	r0, [sp, #20]
 80061f6:	f7fc ff95 	bl	8003124 <__aeabi_f2d>
 80061fa:	9002      	str	r0, [sp, #8]
 80061fc:	9103      	str	r1, [sp, #12]
 80061fe:	9600      	str	r6, [sp, #0]
 8006200:	464b      	mov	r3, r9
 8006202:	0022      	movs	r2, r4
 8006204:	4917      	ldr	r1, [pc, #92]	; (8006264 <snipCommand+0x220>)
 8006206:	0020      	movs	r0, r4
 8006208:	f00f fa8a 	bl	8015720 <sprintf>
				break;
 800620c:	e79c      	b.n	8006148 <snipCommand+0x104>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 800620e:	22b5      	movs	r2, #181	; 0xb5
 8006210:	4915      	ldr	r1, [pc, #84]	; (8006268 <snipCommand+0x224>)
 8006212:	0020      	movs	r0, r4
 8006214:	f00f f881 	bl	801531a <memcpy>
}
 8006218:	2000      	movs	r0, #0
 800621a:	b00b      	add	sp, #44	; 0x2c
 800621c:	bc0c      	pop	{r2, r3}
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	08019b20 	.word	0x08019b20
 8006228:	20000a9f 	.word	0x20000a9f
 800622c:	0801b324 	.word	0x0801b324
 8006230:	20006dbc 	.word	0x20006dbc
 8006234:	0801b35c 	.word	0x0801b35c
 8006238:	0801a700 	.word	0x0801a700
 800623c:	0801b368 	.word	0x0801b368
 8006240:	0801b37c 	.word	0x0801b37c
 8006244:	0801b394 	.word	0x0801b394
 8006248:	0801b3ac 	.word	0x0801b3ac
 800624c:	20001238 	.word	0x20001238
 8006250:	0801b3d8 	.word	0x0801b3d8
 8006254:	0801b3e0 	.word	0x0801b3e0
 8006258:	20001207 	.word	0x20001207
 800625c:	0801ae54 	.word	0x0801ae54
 8006260:	20000090 	.word	0x20000090
 8006264:	0801b3c8 	.word	0x0801b3c8
 8006268:	0801b3ec 	.word	0x0801b3ec

0800626c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800626c:	b510      	push	{r4, lr}
 800626e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006270:	d101      	bne.n	8006276 <idcodeCommand+0xa>
 8006272:	b672      	cpsid	i
 8006274:	e7fe      	b.n	8006274 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8006276:	f00b fcad 	bl	8011bd4 <HAL_GetDEVID>
	switch(dev){
 800627a:	0403      	lsls	r3, r0, #16
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <idcodeCommand+0x80>)
 8006280:	4694      	mov	ip, r2
 8006282:	4463      	add	r3, ip
 8006284:	2b08      	cmp	r3, #8
 8006286:	d82a      	bhi.n	80062de <idcodeCommand+0x72>
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <idcodeCommand+0x84>)
 800628c:	58d3      	ldr	r3, [r2, r3]
 800628e:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <idcodeCommand+0x88>)
 8006292:	4919      	ldr	r1, [pc, #100]	; (80062f8 <idcodeCommand+0x8c>)
 8006294:	0020      	movs	r0, r4
 8006296:	f00f fa43 	bl	8015720 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800629a:	f00b fc95 	bl	8011bc8 <HAL_GetREVID>
 800629e:	0b03      	lsrs	r3, r0, #12
 80062a0:	0022      	movs	r2, r4
 80062a2:	4916      	ldr	r1, [pc, #88]	; (80062fc <idcodeCommand+0x90>)
 80062a4:	0020      	movs	r0, r4
 80062a6:	f00f fa3b 	bl	8015720 <sprintf>
}
 80062aa:	2000      	movs	r0, #0
 80062ac:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 80062ae:	4a14      	ldr	r2, [pc, #80]	; (8006300 <idcodeCommand+0x94>)
 80062b0:	4911      	ldr	r1, [pc, #68]	; (80062f8 <idcodeCommand+0x8c>)
 80062b2:	0020      	movs	r0, r4
 80062b4:	f00f fa34 	bl	8015720 <sprintf>
			break;
 80062b8:	e7ef      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 80062ba:	4a12      	ldr	r2, [pc, #72]	; (8006304 <idcodeCommand+0x98>)
 80062bc:	490e      	ldr	r1, [pc, #56]	; (80062f8 <idcodeCommand+0x8c>)
 80062be:	0020      	movs	r0, r4
 80062c0:	f00f fa2e 	bl	8015720 <sprintf>
			break;
 80062c4:	e7e9      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <idcodeCommand+0x9c>)
 80062c8:	490b      	ldr	r1, [pc, #44]	; (80062f8 <idcodeCommand+0x8c>)
 80062ca:	0020      	movs	r0, r4
 80062cc:	f00f fa28 	bl	8015720 <sprintf>
			break;
 80062d0:	e7e3      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80062d2:	4a0e      	ldr	r2, [pc, #56]	; (800630c <idcodeCommand+0xa0>)
 80062d4:	4908      	ldr	r1, [pc, #32]	; (80062f8 <idcodeCommand+0x8c>)
 80062d6:	0020      	movs	r0, r4
 80062d8:	f00f fa22 	bl	8015720 <sprintf>
			break;
 80062dc:	e7dd      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <idcodeCommand+0xa4>)
 80062e0:	4905      	ldr	r1, [pc, #20]	; (80062f8 <idcodeCommand+0x8c>)
 80062e2:	0020      	movs	r0, r4
 80062e4:	f00f fa1c 	bl	8015720 <sprintf>
			break;
 80062e8:	e7d7      	b.n	800629a <idcodeCommand+0x2e>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	fffffbc0 	.word	0xfffffbc0
 80062f0:	0801a728 	.word	0x0801a728
 80062f4:	0801ad50 	.word	0x0801ad50
 80062f8:	0801ad5c 	.word	0x0801ad5c
 80062fc:	0801ada8 	.word	0x0801ada8
 8006300:	0801ad70 	.word	0x0801ad70
 8006304:	0801ad7c 	.word	0x0801ad7c
 8006308:	0801ad88 	.word	0x0801ad88
 800630c:	0801ad94 	.word	0x0801ad94
 8006310:	0801ada0 	.word	0x0801ada0

08006314 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006318:	d101      	bne.n	800631e <uuidCommand+0xa>
 800631a:	b672      	cpsid	i
 800631c:	e7fe      	b.n	800631c <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 800631e:	220e      	movs	r2, #14
 8006320:	490d      	ldr	r1, [pc, #52]	; (8006358 <uuidCommand+0x44>)
 8006322:	f00e fffa 	bl	801531a <memcpy>
	for(uint8_t i =0; i < 3; i++){
 8006326:	2500      	movs	r5, #0
 8006328:	2d02      	cmp	r5, #2
 800632a:	d80b      	bhi.n	8006344 <uuidCommand+0x30>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <uuidCommand+0x48>)
 800632e:	18eb      	adds	r3, r5, r3
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0022      	movs	r2, r4
 8006336:	490a      	ldr	r1, [pc, #40]	; (8006360 <uuidCommand+0x4c>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00f f9f1 	bl	8015720 <sprintf>
	for(uint8_t i =0; i < 3; i++){
 800633e:	3501      	adds	r5, #1
 8006340:	b2ed      	uxtb	r5, r5
 8006342:	e7f1      	b.n	8006328 <uuidCommand+0x14>
	strcat((char* )pcWriteBuffer,"\r\n");
 8006344:	0020      	movs	r0, r4
 8006346:	f7f9 fee7 	bl	8000118 <strlen>
 800634a:	1820      	adds	r0, r4, r0
 800634c:	2203      	movs	r2, #3
 800634e:	4905      	ldr	r1, [pc, #20]	; (8006364 <uuidCommand+0x50>)
 8006350:	f00e ffe3 	bl	801531a <memcpy>
}
 8006354:	2000      	movs	r0, #0
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	0801c530 	.word	0x0801c530
 800635c:	07fffdeb 	.word	0x07fffdeb
 8006360:	0801c540 	.word	0x0801c540
 8006364:	0801bd28 	.word	0x0801bd28

08006368 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006368:	b530      	push	{r4, r5, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800636e:	d101      	bne.n	8006374 <timeCommand+0xc>
 8006370:	b672      	cpsid	i
 8006372:	e7fe      	b.n	8006372 <timeCommand+0xa>
	GetTimeDate();
 8006374:	f009 f810 	bl	800f398 <GetTimeDate>
	if(BOS.hourformat == 24)
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <timeCommand+0x80>)
 800637a:	7b5b      	ldrb	r3, [r3, #13]
 800637c:	2b18      	cmp	r3, #24
 800637e:	d004      	beq.n	800638a <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d00e      	beq.n	80063a2 <timeCommand+0x3a>
}
 8006384:	2000      	movs	r0, #0
 8006386:	b005      	add	sp, #20
 8006388:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800638a:	4917      	ldr	r1, [pc, #92]	; (80063e8 <timeCommand+0x80>)
 800638c:	7c8a      	ldrb	r2, [r1, #18]
 800638e:	7c4b      	ldrb	r3, [r1, #17]
 8006390:	7c08      	ldrb	r0, [r1, #16]
 8006392:	89c9      	ldrh	r1, [r1, #14]
 8006394:	9101      	str	r1, [sp, #4]
 8006396:	9000      	str	r0, [sp, #0]
 8006398:	4914      	ldr	r1, [pc, #80]	; (80063ec <timeCommand+0x84>)
 800639a:	0020      	movs	r0, r4
 800639c:	f00f f9c0 	bl	8015720 <sprintf>
 80063a0:	e7f0      	b.n	8006384 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <timeCommand+0x80>)
 80063a4:	7cdb      	ldrb	r3, [r3, #19]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d10d      	bne.n	80063c6 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80063aa:	490f      	ldr	r1, [pc, #60]	; (80063e8 <timeCommand+0x80>)
 80063ac:	7c8a      	ldrb	r2, [r1, #18]
 80063ae:	7c4b      	ldrb	r3, [r1, #17]
 80063b0:	7c08      	ldrb	r0, [r1, #16]
 80063b2:	89c9      	ldrh	r1, [r1, #14]
 80063b4:	4d0e      	ldr	r5, [pc, #56]	; (80063f0 <timeCommand+0x88>)
 80063b6:	9502      	str	r5, [sp, #8]
 80063b8:	9101      	str	r1, [sp, #4]
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	490d      	ldr	r1, [pc, #52]	; (80063f4 <timeCommand+0x8c>)
 80063be:	0020      	movs	r0, r4
 80063c0:	f00f f9ae 	bl	8015720 <sprintf>
 80063c4:	e7de      	b.n	8006384 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d1dc      	bne.n	8006384 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 80063ca:	4907      	ldr	r1, [pc, #28]	; (80063e8 <timeCommand+0x80>)
 80063cc:	7c8a      	ldrb	r2, [r1, #18]
 80063ce:	7c4b      	ldrb	r3, [r1, #17]
 80063d0:	7c08      	ldrb	r0, [r1, #16]
 80063d2:	89c9      	ldrh	r1, [r1, #14]
 80063d4:	4d08      	ldr	r5, [pc, #32]	; (80063f8 <timeCommand+0x90>)
 80063d6:	9502      	str	r5, [sp, #8]
 80063d8:	9101      	str	r1, [sp, #4]
 80063da:	9000      	str	r0, [sp, #0]
 80063dc:	4905      	ldr	r1, [pc, #20]	; (80063f4 <timeCommand+0x8c>)
 80063de:	0020      	movs	r0, r4
 80063e0:	f00f f99e 	bl	8015720 <sprintf>
 80063e4:	e7ce      	b.n	8006384 <timeCommand+0x1c>
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	20006da0 	.word	0x20006da0
 80063ec:	0801c478 	.word	0x0801c478
 80063f0:	0801c4cc 	.word	0x0801c4cc
 80063f4:	0801c4a0 	.word	0x0801c4a0
 80063f8:	0801c4d0 	.word	0x0801c4d0

080063fc <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063fc:	b510      	push	{r4, lr}
 80063fe:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006400:	d101      	bne.n	8006406 <dateCommand+0xa>
 8006402:	b672      	cpsid	i
 8006404:	e7fe      	b.n	8006404 <dateCommand+0x8>
	GetTimeDate();
 8006406:	f008 ffc7 	bl	800f398 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 800640a:	f7fe fb7d 	bl	8004b08 <GetDateString>
 800640e:	0002      	movs	r2, r0
 8006410:	4902      	ldr	r1, [pc, #8]	; (800641c <dateCommand+0x20>)
 8006412:	0020      	movs	r0, r4
 8006414:	f00f f984 	bl	8015720 <sprintf>
}
 8006418:	2000      	movs	r0, #0
 800641a:	bd10      	pop	{r4, pc}
 800641c:	0801a988 	.word	0x0801a988

08006420 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	b083      	sub	sp, #12
 8006424:	0004      	movs	r4, r0
 8006426:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006428:	2300      	movs	r3, #0
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800642e:	2800      	cmp	r0, #0
 8006430:	d101      	bne.n	8006436 <getCommand+0x16>
 8006432:	b672      	cpsid	i
 8006434:	e7fe      	b.n	8006434 <getCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006436:	aa01      	add	r2, sp, #4
 8006438:	2101      	movs	r1, #1
 800643a:	0030      	movs	r0, r6
 800643c:	f009 fc60 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006440:	0005      	movs	r5, r0
 8006442:	4b7d      	ldr	r3, [pc, #500]	; (8006638 <getCommand+0x218>)
 8006444:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006446:	2204      	movs	r2, #4
 8006448:	497c      	ldr	r1, [pc, #496]	; (800663c <getCommand+0x21c>)
 800644a:	f00f f9ad 	bl	80157a8 <strncmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d000      	beq.n	8006454 <getCommand+0x34>
 8006452:	e09c      	b.n	800658e <getCommand+0x16e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006454:	3504      	adds	r5, #4
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	1f1e      	subs	r6, r3, #4
 800645a:	0032      	movs	r2, r6
 800645c:	4978      	ldr	r1, [pc, #480]	; (8006640 <getCommand+0x220>)
 800645e:	0028      	movs	r0, r5
 8006460:	f00f f9a2 	bl	80157a8 <strncmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	d122      	bne.n	80064ae <getCommand+0x8e>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006468:	4b76      	ldr	r3, [pc, #472]	; (8006644 <getCommand+0x224>)
 800646a:	799b      	ldrb	r3, [r3, #6]
 800646c:	2b60      	cmp	r3, #96	; 0x60
 800646e:	d10b      	bne.n	8006488 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006470:	4a75      	ldr	r2, [pc, #468]	; (8006648 <getCommand+0x228>)
 8006472:	4976      	ldr	r1, [pc, #472]	; (800664c <getCommand+0x22c>)
 8006474:	0020      	movs	r0, r4
 8006476:	f00f f953 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 800647a:	2300      	movs	r3, #0
	else if(result == BOS_ERR_WrongValue)
 800647c:	2b68      	cmp	r3, #104	; 0x68
 800647e:	d100      	bne.n	8006482 <getCommand+0x62>
 8006480:	e0d3      	b.n	800662a <getCommand+0x20a>
}
 8006482:	2000      	movs	r0, #0
 8006484:	b003      	add	sp, #12
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 8006488:	2b20      	cmp	r3, #32
 800648a:	d106      	bne.n	800649a <getCommand+0x7a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800648c:	4a70      	ldr	r2, [pc, #448]	; (8006650 <getCommand+0x230>)
 800648e:	496f      	ldr	r1, [pc, #444]	; (800664c <getCommand+0x22c>)
 8006490:	0020      	movs	r0, r4
 8006492:	f00f f945 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e7f0      	b.n	800647c <getCommand+0x5c>
			else if(BOS.response == BOS_RESPONSE_NONE)
 800649a:	2b00      	cmp	r3, #0
 800649c:	d000      	beq.n	80064a0 <getCommand+0x80>
 800649e:	e0c0      	b.n	8006622 <getCommand+0x202>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80064a0:	4a6c      	ldr	r2, [pc, #432]	; (8006654 <getCommand+0x234>)
 80064a2:	496a      	ldr	r1, [pc, #424]	; (800664c <getCommand+0x22c>)
 80064a4:	0020      	movs	r0, r4
 80064a6:	f00f f93b 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e7e6      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064ae:	0032      	movs	r2, r6
 80064b0:	4969      	ldr	r1, [pc, #420]	; (8006658 <getCommand+0x238>)
 80064b2:	0028      	movs	r0, r5
 80064b4:	f00f f978 	bl	80157a8 <strncmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d11d      	bne.n	80064f8 <getCommand+0xd8>
			if(BOS.trace == TRACE_BOTH)
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <getCommand+0x224>)
 80064be:	79db      	ldrb	r3, [r3, #7]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d106      	bne.n	80064d2 <getCommand+0xb2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80064c4:	4a60      	ldr	r2, [pc, #384]	; (8006648 <getCommand+0x228>)
 80064c6:	4961      	ldr	r1, [pc, #388]	; (800664c <getCommand+0x22c>)
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00f f929 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e7d4      	b.n	800647c <getCommand+0x5c>
			else if(BOS.trace == TRACE_MESSAGE)
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d106      	bne.n	80064e4 <getCommand+0xc4>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80064d6:	4a5e      	ldr	r2, [pc, #376]	; (8006650 <getCommand+0x230>)
 80064d8:	495c      	ldr	r1, [pc, #368]	; (800664c <getCommand+0x22c>)
 80064da:	0020      	movs	r0, r4
 80064dc:	f00f f920 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e7cb      	b.n	800647c <getCommand+0x5c>
			else if(BOS.trace == TRACE_NONE)
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d000      	beq.n	80064ea <getCommand+0xca>
 80064e8:	e09d      	b.n	8006626 <getCommand+0x206>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80064ea:	4a5a      	ldr	r2, [pc, #360]	; (8006654 <getCommand+0x234>)
 80064ec:	4957      	ldr	r1, [pc, #348]	; (800664c <getCommand+0x22c>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	f00f f916 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e7c1      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80064f8:	0032      	movs	r2, r6
 80064fa:	4958      	ldr	r1, [pc, #352]	; (800665c <getCommand+0x23c>)
 80064fc:	0028      	movs	r0, r5
 80064fe:	f00f f953 	bl	80157a8 <strncmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	d107      	bne.n	8006516 <getCommand+0xf6>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <getCommand+0x224>)
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	4955      	ldr	r1, [pc, #340]	; (8006660 <getCommand+0x240>)
 800650c:	0020      	movs	r0, r4
 800650e:	f00f f907 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e7b2      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006516:	0032      	movs	r2, r6
 8006518:	4952      	ldr	r1, [pc, #328]	; (8006664 <getCommand+0x244>)
 800651a:	0028      	movs	r0, r5
 800651c:	f00f f944 	bl	80157a8 <strncmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	d107      	bne.n	8006534 <getCommand+0x114>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <getCommand+0x224>)
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	494d      	ldr	r1, [pc, #308]	; (8006660 <getCommand+0x240>)
 800652a:	0020      	movs	r0, r4
 800652c:	f00f f8f8 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e7a3      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006534:	0032      	movs	r2, r6
 8006536:	494c      	ldr	r1, [pc, #304]	; (8006668 <getCommand+0x248>)
 8006538:	0028      	movs	r0, r5
 800653a:	f00f f935 	bl	80157a8 <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d107      	bne.n	8006552 <getCommand+0x132>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006542:	4b40      	ldr	r3, [pc, #256]	; (8006644 <getCommand+0x224>)
 8006544:	885a      	ldrh	r2, [r3, #2]
 8006546:	4946      	ldr	r1, [pc, #280]	; (8006660 <getCommand+0x240>)
 8006548:	0020      	movs	r0, r4
 800654a:	f00f f8e9 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e794      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006552:	0032      	movs	r2, r6
 8006554:	4945      	ldr	r1, [pc, #276]	; (800666c <getCommand+0x24c>)
 8006556:	0028      	movs	r0, r5
 8006558:	f00f f926 	bl	80157a8 <strncmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	d107      	bne.n	8006570 <getCommand+0x150>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006560:	4b38      	ldr	r3, [pc, #224]	; (8006644 <getCommand+0x224>)
 8006562:	791a      	ldrb	r2, [r3, #4]
 8006564:	493e      	ldr	r1, [pc, #248]	; (8006660 <getCommand+0x240>)
 8006566:	0020      	movs	r0, r4
 8006568:	f00f f8da 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e785      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006570:	0032      	movs	r2, r6
 8006572:	493f      	ldr	r1, [pc, #252]	; (8006670 <getCommand+0x250>)
 8006574:	0028      	movs	r0, r5
 8006576:	f00f f917 	bl	80157a8 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d10e      	bne.n	800659c <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <getCommand+0x224>)
 8006580:	795a      	ldrb	r2, [r3, #5]
 8006582:	4937      	ldr	r1, [pc, #220]	; (8006660 <getCommand+0x240>)
 8006584:	0020      	movs	r0, r4
 8006586:	f00f f8cb 	bl	8015720 <sprintf>
	BOS_Status result =BOS_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e776      	b.n	800647c <getCommand+0x5c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800658e:	2205      	movs	r2, #5
 8006590:	4938      	ldr	r1, [pc, #224]	; (8006674 <getCommand+0x254>)
 8006592:	0028      	movs	r0, r5
 8006594:	f00f f908 	bl	80157a8 <strncmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	d005      	beq.n	80065a8 <getCommand+0x188>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800659c:	2213      	movs	r2, #19
 800659e:	4936      	ldr	r1, [pc, #216]	; (8006678 <getCommand+0x258>)
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00e feba 	bl	801531a <memcpy>
 80065a6:	e76c      	b.n	8006482 <getCommand+0x62>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065a8:	466a      	mov	r2, sp
 80065aa:	2102      	movs	r1, #2
 80065ac:	0030      	movs	r0, r6
 80065ae:	f009 fba7 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80065b2:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 80065b4:	2600      	movs	r6, #0
 80065b6:	e00b      	b.n	80065d0 <getCommand+0x1b0>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80065b8:	00b3      	lsls	r3, r6, #2
 80065ba:	199b      	adds	r3, r3, r6
 80065bc:	0059      	lsls	r1, r3, #1
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <getCommand+0x25c>)
 80065c0:	18c9      	adds	r1, r1, r3
 80065c2:	0038      	movs	r0, r7
 80065c4:	f7f9 fd9e 	bl	8000104 <strcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d00c      	beq.n	80065e6 <getCommand+0x1c6>
		for(i =0; i < MaxNumOfGroups; i++){
 80065cc:	3601      	adds	r6, #1
 80065ce:	b2f6      	uxtb	r6, r6
 80065d0:	2e09      	cmp	r6, #9
 80065d2:	d9f1      	bls.n	80065b8 <getCommand+0x198>
		temp8 =0;
 80065d4:	2500      	movs	r5, #0
		if(!temp8){
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	d107      	bne.n	80065ea <getCommand+0x1ca>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80065da:	003a      	movs	r2, r7
 80065dc:	4928      	ldr	r1, [pc, #160]	; (8006680 <getCommand+0x260>)
 80065de:	0020      	movs	r0, r4
 80065e0:	f00f f89e 	bl	8015720 <sprintf>
			return pdFALSE;
 80065e4:	e74d      	b.n	8006482 <getCommand+0x62>
				temp8 =1;
 80065e6:	2501      	movs	r5, #1
 80065e8:	e7f5      	b.n	80065d6 <getCommand+0x1b6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80065ea:	003a      	movs	r2, r7
 80065ec:	4925      	ldr	r1, [pc, #148]	; (8006684 <getCommand+0x264>)
 80065ee:	0020      	movs	r0, r4
 80065f0:	f00f f896 	bl	8015720 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80065f4:	e008      	b.n	8006608 <getCommand+0x1e8>
				if(InGroup(j,i)){
 80065f6:	1e6b      	subs	r3, r5, #1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4a23      	ldr	r2, [pc, #140]	; (8006688 <getCommand+0x268>)
 80065fc:	5a9b      	ldrh	r3, [r3, r2]
 80065fe:	4133      	asrs	r3, r6
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d407      	bmi.n	8006614 <getCommand+0x1f4>
			for(j =1; j <= N; j++)						// N modules
 8006604:	3501      	adds	r5, #1
 8006606:	b2ed      	uxtb	r5, r5
 8006608:	4b20      	ldr	r3, [pc, #128]	; (800668c <getCommand+0x26c>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	42ab      	cmp	r3, r5
 800660e:	d2f2      	bcs.n	80065f6 <getCommand+0x1d6>
	BOS_Status result =BOS_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e733      	b.n	800647c <getCommand+0x5c>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006614:	002b      	movs	r3, r5
 8006616:	0022      	movs	r2, r4
 8006618:	491d      	ldr	r1, [pc, #116]	; (8006690 <getCommand+0x270>)
 800661a:	0020      	movs	r0, r4
 800661c:	f00f f880 	bl	8015720 <sprintf>
 8006620:	e7f0      	b.n	8006604 <getCommand+0x1e4>
				result =BOS_ERR_WrongValue;
 8006622:	2368      	movs	r3, #104	; 0x68
 8006624:	e72a      	b.n	800647c <getCommand+0x5c>
				result =BOS_ERR_WrongValue;
 8006626:	2368      	movs	r3, #104	; 0x68
 8006628:	e728      	b.n	800647c <getCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <getCommand+0x218>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4919      	ldr	r1, [pc, #100]	; (8006694 <getCommand+0x274>)
 8006630:	0020      	movs	r0, r4
 8006632:	f00f f875 	bl	8015720 <sprintf>
 8006636:	e724      	b.n	8006482 <getCommand+0x62>
 8006638:	2000127c 	.word	0x2000127c
 800663c:	0801aaf4 	.word	0x0801aaf4
 8006640:	0801aafc 	.word	0x0801aafc
 8006644:	20006da0 	.word	0x20006da0
 8006648:	08019efc 	.word	0x08019efc
 800664c:	08019d54 	.word	0x08019d54
 8006650:	0801ab08 	.word	0x0801ab08
 8006654:	0801ab0c 	.word	0x0801ab0c
 8006658:	0801ab14 	.word	0x0801ab14
 800665c:	0801ab1c 	.word	0x0801ab1c
 8006660:	0801a3ac 	.word	0x0801a3ac
 8006664:	0801ab28 	.word	0x0801ab28
 8006668:	0801ab34 	.word	0x0801ab34
 800666c:	0801ab44 	.word	0x0801ab44
 8006670:	0801ab58 	.word	0x0801ab58
 8006674:	0801ab6c 	.word	0x0801ab6c
 8006678:	0801abac 	.word	0x0801abac
 800667c:	20000e4c 	.word	0x20000e4c
 8006680:	0801ab74 	.word	0x0801ab74
 8006684:	0801ab90 	.word	0x0801ab90
 8006688:	20000eb0 	.word	0x20000eb0
 800668c:	2000001c 	.word	0x2000001c
 8006690:	0801aba4 	.word	0x0801aba4
 8006694:	0801abc0 	.word	0x0801abc0

08006698 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	0004      	movs	r4, r0
 800669e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80066a4:	2c00      	cmp	r4, #0
 80066a6:	d101      	bne.n	80066ac <defaultCommand+0x14>
 80066a8:	b672      	cpsid	i
 80066aa:	e7fe      	b.n	80066aa <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80066ac:	aa01      	add	r2, sp, #4
 80066ae:	2101      	movs	r1, #1
 80066b0:	f009 fb26 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80066b4:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80066b6:	9e01      	ldr	r6, [sp, #4]
 80066b8:	0032      	movs	r2, r6
 80066ba:	491f      	ldr	r1, [pc, #124]	; (8006738 <defaultCommand+0xa0>)
 80066bc:	f00f f874 	bl	80157a8 <strncmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d01e      	beq.n	8006702 <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80066c4:	0032      	movs	r2, r6
 80066c6:	491d      	ldr	r1, [pc, #116]	; (800673c <defaultCommand+0xa4>)
 80066c8:	0028      	movs	r0, r5
 80066ca:	f00f f86d 	bl	80157a8 <strncmp>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d12b      	bne.n	800672a <defaultCommand+0x92>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2116      	movs	r1, #22
 80066d6:	20ff      	movs	r0, #255	; 0xff
 80066d8:	f003 fa20 	bl	8009b1c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <defaultCommand+0xa8>)
 80066de:	2202      	movs	r2, #2
 80066e0:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80066e2:	2064      	movs	r0, #100	; 0x64
 80066e4:	f009 f9e6 	bl	800fab4 <osDelay>
		ClearEEportsDir();
 80066e8:	f7fd fa24 	bl	8003b34 <ClearEEportsDir>
		ClearROtopology();
 80066ec:	f005 fc0c 	bl	800bf08 <ClearROtopology>
		osDelay(100);
 80066f0:	2064      	movs	r0, #100	; 0x64
 80066f2:	f009 f9df 	bl	800fab4 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80066f6:	2240      	movs	r2, #64	; 0x40
 80066f8:	4912      	ldr	r1, [pc, #72]	; (8006744 <defaultCommand+0xac>)
 80066fa:	0020      	movs	r0, r4
 80066fc:	f00e fe0d 	bl	801531a <memcpy>
 8006700:	e010      	b.n	8006724 <defaultCommand+0x8c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006702:	4911      	ldr	r1, [pc, #68]	; (8006748 <defaultCommand+0xb0>)
 8006704:	4811      	ldr	r0, [pc, #68]	; (800674c <defaultCommand+0xb4>)
 8006706:	000b      	movs	r3, r1
 8006708:	0002      	movs	r2, r0
 800670a:	ca23      	ldmia	r2!, {r0, r1, r5}
 800670c:	c323      	stmia	r3!, {r0, r1, r5}
 800670e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006710:	c323      	stmia	r3!, {r0, r1, r5}
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 8006716:	f7fd f9d5 	bl	8003ac4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 800671a:	2227      	movs	r2, #39	; 0x27
 800671c:	490c      	ldr	r1, [pc, #48]	; (8006750 <defaultCommand+0xb8>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00e fdfb 	bl	801531a <memcpy>
}
 8006724:	2000      	movs	r0, #0
 8006726:	b002      	add	sp, #8
 8006728:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800672a:	220f      	movs	r2, #15
 800672c:	4909      	ldr	r1, [pc, #36]	; (8006754 <defaultCommand+0xbc>)
 800672e:	0020      	movs	r0, r4
 8006730:	f00e fdf3 	bl	801531a <memcpy>
 8006734:	e7f6      	b.n	8006724 <defaultCommand+0x8c>
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	0801a9b0 	.word	0x0801a9b0
 800673c:	0801a9e0 	.word	0x0801a9e0
 8006740:	20000ee4 	.word	0x20000ee4
 8006744:	0801a9f8 	.word	0x0801a9f8
 8006748:	20006da0 	.word	0x20006da0
 800674c:	20000000 	.word	0x20000000
 8006750:	0801a9b8 	.word	0x0801a9b8
 8006754:	0801a9e8 	.word	0x0801a9e8

08006758 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	46ce      	mov	lr, r9
 800675c:	4647      	mov	r7, r8
 800675e:	b580      	push	{r7, lr}
 8006760:	b08f      	sub	sp, #60	; 0x3c
 8006762:	9007      	str	r0, [sp, #28]
 8006764:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006766:	2300      	movs	r3, #0
 8006768:	930d      	str	r3, [sp, #52]	; 0x34
 800676a:	930c      	str	r3, [sp, #48]	; 0x30
 800676c:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800676e:	930a      	str	r3, [sp, #40]	; 0x28
 8006770:	9309      	str	r3, [sp, #36]	; 0x24
	configASSERT(pcWriteBuffer);
 8006772:	2800      	cmp	r0, #0
 8006774:	d101      	bne.n	800677a <setCommand+0x22>
 8006776:	b672      	cpsid	i
 8006778:	e7fe      	b.n	8006778 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800677a:	aa0d      	add	r2, sp, #52	; 0x34
 800677c:	2101      	movs	r1, #1
 800677e:	0020      	movs	r0, r4
 8006780:	f009 fabe 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006784:	0005      	movs	r5, r0
 8006786:	4bba      	ldr	r3, [pc, #744]	; (8006a70 <setCommand+0x318>)
 8006788:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800678a:	2204      	movs	r2, #4
 800678c:	49b9      	ldr	r1, [pc, #740]	; (8006a74 <setCommand+0x31c>)
 800678e:	f00f f80b 	bl	80157a8 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d01c      	beq.n	80067d0 <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006796:	2204      	movs	r2, #4
 8006798:	49b7      	ldr	r1, [pc, #732]	; (8006a78 <setCommand+0x320>)
 800679a:	0028      	movs	r0, r5
 800679c:	f00f f804 	bl	80157a8 <strncmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d100      	bne.n	80067a6 <setCommand+0x4e>
 80067a4:	e18c      	b.n	8006ac0 <setCommand+0x368>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80067a6:	2204      	movs	r2, #4
 80067a8:	49b4      	ldr	r1, [pc, #720]	; (8006a7c <setCommand+0x324>)
 80067aa:	0028      	movs	r0, r5
 80067ac:	f00e fffc 	bl	80157a8 <strncmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d100      	bne.n	80067b6 <setCommand+0x5e>
 80067b4:	e1e2      	b.n	8006b7c <setCommand+0x424>
		result =BOS_ERR_WrongParam;
 80067b6:	2467      	movs	r4, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80067b8:	2c67      	cmp	r4, #103	; 0x67
 80067ba:	d100      	bne.n	80067be <setCommand+0x66>
 80067bc:	e3da      	b.n	8006f74 <setCommand+0x81c>
	else if(result == BOS_ERR_WrongValue)
 80067be:	2c68      	cmp	r4, #104	; 0x68
 80067c0:	d100      	bne.n	80067c4 <setCommand+0x6c>
 80067c2:	e3dd      	b.n	8006f80 <setCommand+0x828>
}
 80067c4:	2000      	movs	r0, #0
 80067c6:	b00f      	add	sp, #60	; 0x3c
 80067c8:	bc0c      	pop	{r2, r3}
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067d0:	aa0c      	add	r2, sp, #48	; 0x30
 80067d2:	2102      	movs	r1, #2
 80067d4:	0020      	movs	r0, r4
 80067d6:	f009 fa93 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80067da:	0004      	movs	r4, r0
 80067dc:	4ba8      	ldr	r3, [pc, #672]	; (8006a80 <setCommand+0x328>)
 80067de:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80067e0:	4ba3      	ldr	r3, [pc, #652]	; (8006a70 <setCommand+0x318>)
 80067e2:	681d      	ldr	r5, [r3, #0]
 80067e4:	3504      	adds	r5, #4
 80067e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e8:	1f1f      	subs	r7, r3, #4
 80067ea:	003a      	movs	r2, r7
 80067ec:	49a5      	ldr	r1, [pc, #660]	; (8006a84 <setCommand+0x32c>)
 80067ee:	0028      	movs	r0, r5
 80067f0:	f00e ffda 	bl	80157a8 <strncmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d162      	bne.n	80068be <setCommand+0x166>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80067f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067fa:	002a      	movs	r2, r5
 80067fc:	49a2      	ldr	r1, [pc, #648]	; (8006a88 <setCommand+0x330>)
 80067fe:	0020      	movs	r0, r4
 8006800:	f00e ffd2 	bl	80157a8 <strncmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	d122      	bne.n	800684e <setCommand+0xf6>
				BOS.response = BOS_RESPONSE_ALL;
 8006808:	4ba0      	ldr	r3, [pc, #640]	; (8006a8c <setCommand+0x334>)
 800680a:	2160      	movs	r1, #96	; 0x60
 800680c:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800680e:	79db      	ldrb	r3, [r3, #7]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	4319      	orrs	r1, r3
 8006814:	308a      	adds	r0, #138	; 0x8a
 8006816:	0040      	lsls	r0, r0, #1
 8006818:	f001 faaa 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800681c:	2400      	movs	r4, #0
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800681e:	4b94      	ldr	r3, [pc, #592]	; (8006a70 <setCommand+0x318>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006824:	18d3      	adds	r3, r2, r3
 8006826:	2100      	movs	r1, #0
 8006828:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800682a:	4b95      	ldr	r3, [pc, #596]	; (8006a80 <setCommand+0x328>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4998      	ldr	r1, [pc, #608]	; (8006a90 <setCommand+0x338>)
 8006830:	9807      	ldr	r0, [sp, #28]
 8006832:	f00e ff75 	bl	8015720 <sprintf>
		if(extraMessage == 1){
 8006836:	2c01      	cmp	r4, #1
 8006838:	d1c4      	bne.n	80067c4 <setCommand+0x6c>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800683a:	4996      	ldr	r1, [pc, #600]	; (8006a94 <setCommand+0x33c>)
 800683c:	9c07      	ldr	r4, [sp, #28]
 800683e:	0020      	movs	r0, r4
 8006840:	f00e ff8e 	bl	8015760 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006844:	4994      	ldr	r1, [pc, #592]	; (8006a98 <setCommand+0x340>)
 8006846:	0020      	movs	r0, r4
 8006848:	f00e ff8a 	bl	8015760 <strcat>
 800684c:	e7ba      	b.n	80067c4 <setCommand+0x6c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800684e:	002a      	movs	r2, r5
 8006850:	4992      	ldr	r1, [pc, #584]	; (8006a9c <setCommand+0x344>)
 8006852:	0020      	movs	r0, r4
 8006854:	f00e ffa8 	bl	80157a8 <strncmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	d10b      	bne.n	8006874 <setCommand+0x11c>
				BOS.response = BOS_RESPONSE_MSG;
 800685c:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <setCommand+0x334>)
 800685e:	2120      	movs	r1, #32
 8006860:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006862:	79db      	ldrb	r3, [r3, #7]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	4319      	orrs	r1, r3
 8006868:	308a      	adds	r0, #138	; 0x8a
 800686a:	0040      	lsls	r0, r0, #1
 800686c:	f001 fa80 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006870:	2400      	movs	r4, #0
 8006872:	e7d4      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006874:	002a      	movs	r2, r5
 8006876:	498a      	ldr	r1, [pc, #552]	; (8006aa0 <setCommand+0x348>)
 8006878:	0020      	movs	r0, r4
 800687a:	f00e ff95 	bl	80157a8 <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d10b      	bne.n	800689a <setCommand+0x142>
				BOS.response = BOS_RESPONSE_CLI;
 8006882:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <setCommand+0x334>)
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006888:	79db      	ldrb	r3, [r3, #7]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	4319      	orrs	r1, r3
 800688e:	308a      	adds	r0, #138	; 0x8a
 8006890:	0040      	lsls	r0, r0, #1
 8006892:	f001 fa6d 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006896:	2400      	movs	r4, #0
 8006898:	e7c1      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800689a:	002a      	movs	r2, r5
 800689c:	4981      	ldr	r1, [pc, #516]	; (8006aa4 <setCommand+0x34c>)
 800689e:	0020      	movs	r0, r4
 80068a0:	f00e ff82 	bl	80157a8 <strncmp>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d000      	beq.n	80068aa <setCommand+0x152>
 80068a8:	e348      	b.n	8006f3c <setCommand+0x7e4>
				BOS.response = BOS_RESPONSE_NONE;
 80068aa:	4b78      	ldr	r3, [pc, #480]	; (8006a8c <setCommand+0x334>)
 80068ac:	2400      	movs	r4, #0
 80068ae:	719c      	strb	r4, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80068b0:	79d9      	ldrb	r1, [r3, #7]
 80068b2:	0209      	lsls	r1, r1, #8
 80068b4:	308a      	adds	r0, #138	; 0x8a
 80068b6:	0040      	lsls	r0, r0, #1
 80068b8:	f001 fa5a 	bl	8007d70 <EE_WriteVariable>
 80068bc:	e7af      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80068be:	003a      	movs	r2, r7
 80068c0:	4979      	ldr	r1, [pc, #484]	; (8006aa8 <setCommand+0x350>)
 80068c2:	0028      	movs	r0, r5
 80068c4:	f00e ff70 	bl	80157a8 <strncmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d14d      	bne.n	8006968 <setCommand+0x210>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80068cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068ce:	002a      	movs	r2, r5
 80068d0:	496d      	ldr	r1, [pc, #436]	; (8006a88 <setCommand+0x330>)
 80068d2:	0020      	movs	r0, r4
 80068d4:	f00e ff68 	bl	80157a8 <strncmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d10c      	bne.n	80068f6 <setCommand+0x19e>
				BOS.trace =TRACE_BOTH;
 80068dc:	4b6b      	ldr	r3, [pc, #428]	; (8006a8c <setCommand+0x334>)
 80068de:	2203      	movs	r2, #3
 80068e0:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80068e2:	799b      	ldrb	r3, [r3, #6]
 80068e4:	21c0      	movs	r1, #192	; 0xc0
 80068e6:	0089      	lsls	r1, r1, #2
 80068e8:	4319      	orrs	r1, r3
 80068ea:	308a      	adds	r0, #138	; 0x8a
 80068ec:	0040      	lsls	r0, r0, #1
 80068ee:	f001 fa3f 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80068f2:	2400      	movs	r4, #0
 80068f4:	e793      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80068f6:	002a      	movs	r2, r5
 80068f8:	4968      	ldr	r1, [pc, #416]	; (8006a9c <setCommand+0x344>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00e ff54 	bl	80157a8 <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d10c      	bne.n	800691e <setCommand+0x1c6>
				BOS.trace =TRACE_MESSAGE;
 8006904:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <setCommand+0x334>)
 8006906:	2201      	movs	r2, #1
 8006908:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800690a:	799b      	ldrb	r3, [r3, #6]
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	0049      	lsls	r1, r1, #1
 8006910:	4319      	orrs	r1, r3
 8006912:	308a      	adds	r0, #138	; 0x8a
 8006914:	4090      	lsls	r0, r2
 8006916:	f001 fa2b 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800691a:	2400      	movs	r4, #0
 800691c:	e77f      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800691e:	002a      	movs	r2, r5
 8006920:	4958      	ldr	r1, [pc, #352]	; (8006a84 <setCommand+0x32c>)
 8006922:	0020      	movs	r0, r4
 8006924:	f00e ff40 	bl	80157a8 <strncmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d10c      	bne.n	8006946 <setCommand+0x1ee>
				BOS.trace =TRACE_RESPONSE;
 800692c:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <setCommand+0x334>)
 800692e:	2202      	movs	r2, #2
 8006930:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006932:	799b      	ldrb	r3, [r3, #6]
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	0089      	lsls	r1, r1, #2
 8006938:	4319      	orrs	r1, r3
 800693a:	308a      	adds	r0, #138	; 0x8a
 800693c:	0040      	lsls	r0, r0, #1
 800693e:	f001 fa17 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006942:	2400      	movs	r4, #0
 8006944:	e76b      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006946:	002a      	movs	r2, r5
 8006948:	4956      	ldr	r1, [pc, #344]	; (8006aa4 <setCommand+0x34c>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00e ff2c 	bl	80157a8 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d000      	beq.n	8006956 <setCommand+0x1fe>
 8006954:	e2f4      	b.n	8006f40 <setCommand+0x7e8>
				BOS.trace =TRACE_NONE;
 8006956:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <setCommand+0x334>)
 8006958:	2400      	movs	r4, #0
 800695a:	71dc      	strb	r4, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800695c:	7999      	ldrb	r1, [r3, #6]
 800695e:	308a      	adds	r0, #138	; 0x8a
 8006960:	0040      	lsls	r0, r0, #1
 8006962:	f001 fa05 	bl	8007d70 <EE_WriteVariable>
 8006966:	e75a      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006968:	003a      	movs	r2, r7
 800696a:	4950      	ldr	r1, [pc, #320]	; (8006aac <setCommand+0x354>)
 800696c:	0028      	movs	r0, r5
 800696e:	f00e ff1b 	bl	80157a8 <strncmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	d116      	bne.n	80069a4 <setCommand+0x24c>
			temp2 =atoi((const char* )pcParameterString2);
 8006976:	0020      	movs	r0, r4
 8006978:	f00e fa3f 	bl	8014dfa <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800697c:	23e1      	movs	r3, #225	; 0xe1
 800697e:	031b      	lsls	r3, r3, #12
 8006980:	4298      	cmp	r0, r3
 8006982:	d900      	bls.n	8006986 <setCommand+0x22e>
 8006984:	e2de      	b.n	8006f44 <setCommand+0x7ec>
				BOS.clibaudrate =temp2;
 8006986:	4c41      	ldr	r4, [pc, #260]	; (8006a8c <setCommand+0x334>)
 8006988:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800698a:	b281      	uxth	r1, r0
 800698c:	208c      	movs	r0, #140	; 0x8c
 800698e:	0040      	lsls	r0, r0, #1
 8006990:	f001 f9ee 	bl	8007d70 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006994:	68a1      	ldr	r1, [r4, #8]
 8006996:	0c09      	lsrs	r1, r1, #16
 8006998:	201a      	movs	r0, #26
 800699a:	30ff      	adds	r0, #255	; 0xff
 800699c:	f001 f9e8 	bl	8007d70 <EE_WriteVariable>
				extraMessage =1;
 80069a0:	2401      	movs	r4, #1
 80069a2:	e73c      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069a4:	003a      	movs	r2, r7
 80069a6:	4942      	ldr	r1, [pc, #264]	; (8006ab0 <setCommand+0x358>)
 80069a8:	0028      	movs	r0, r5
 80069aa:	f00e fefd 	bl	80157a8 <strncmp>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d10e      	bne.n	80069d0 <setCommand+0x278>
			temp16 =atoi((const char* )pcParameterString2);
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00e fa21 	bl	8014dfa <atoi>
 80069b8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069ba:	2900      	cmp	r1, #0
 80069bc:	d100      	bne.n	80069c0 <setCommand+0x268>
 80069be:	e2c3      	b.n	8006f48 <setCommand+0x7f0>
				BOS.buttons.debounce =temp16;
 80069c0:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <setCommand+0x334>)
 80069c2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80069c4:	2016      	movs	r0, #22
 80069c6:	30ff      	adds	r0, #255	; 0xff
 80069c8:	f001 f9d2 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80069cc:	2400      	movs	r4, #0
 80069ce:	e726      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069d0:	003a      	movs	r2, r7
 80069d2:	4938      	ldr	r1, [pc, #224]	; (8006ab4 <setCommand+0x35c>)
 80069d4:	0028      	movs	r0, r5
 80069d6:	f00e fee7 	bl	80157a8 <strncmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d10e      	bne.n	80069fc <setCommand+0x2a4>
			temp16 =atoi((const char* )pcParameterString2);
 80069de:	0020      	movs	r0, r4
 80069e0:	f00e fa0b 	bl	8014dfa <atoi>
 80069e4:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d100      	bne.n	80069ec <setCommand+0x294>
 80069ea:	e2af      	b.n	8006f4c <setCommand+0x7f4>
				BOS.buttons.singleClickTime =temp16;
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <setCommand+0x334>)
 80069ee:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069f0:	208b      	movs	r0, #139	; 0x8b
 80069f2:	0040      	lsls	r0, r0, #1
 80069f4:	f001 f9bc 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80069f8:	2400      	movs	r4, #0
 80069fa:	e710      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069fc:	003a      	movs	r2, r7
 80069fe:	492e      	ldr	r1, [pc, #184]	; (8006ab8 <setCommand+0x360>)
 8006a00:	0028      	movs	r0, r5
 8006a02:	f00e fed1 	bl	80157a8 <strncmp>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d114      	bne.n	8006a34 <setCommand+0x2dc>
			temp16 =atoi((const char* )pcParameterString2);
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f00e f9f5 	bl	8014dfa <atoi>
 8006a10:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2bfe      	cmp	r3, #254	; 0xfe
 8006a18:	d900      	bls.n	8006a1c <setCommand+0x2c4>
 8006a1a:	e299      	b.n	8006f50 <setCommand+0x7f8>
				BOS.buttons.minInterClickTime =temp16;
 8006a1c:	b2c0      	uxtb	r0, r0
 8006a1e:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <setCommand+0x334>)
 8006a20:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a22:	7959      	ldrb	r1, [r3, #5]
 8006a24:	0209      	lsls	r1, r1, #8
 8006a26:	4301      	orrs	r1, r0
 8006a28:	2018      	movs	r0, #24
 8006a2a:	30ff      	adds	r0, #255	; 0xff
 8006a2c:	f001 f9a0 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a30:	2400      	movs	r4, #0
 8006a32:	e6f4      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006a34:	003a      	movs	r2, r7
 8006a36:	4921      	ldr	r1, [pc, #132]	; (8006abc <setCommand+0x364>)
 8006a38:	0028      	movs	r0, r5
 8006a3a:	f00e feb5 	bl	80157a8 <strncmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d000      	beq.n	8006a44 <setCommand+0x2ec>
 8006a42:	e287      	b.n	8006f54 <setCommand+0x7fc>
			temp16 =atoi((const char* )pcParameterString2);
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00e f9d8 	bl	8014dfa <atoi>
 8006a4a:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2bfe      	cmp	r3, #254	; 0xfe
 8006a52:	d900      	bls.n	8006a56 <setCommand+0x2fe>
 8006a54:	e280      	b.n	8006f58 <setCommand+0x800>
				BOS.buttons.maxInterClickTime =temp16;
 8006a56:	b2c0      	uxtb	r0, r0
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <setCommand+0x334>)
 8006a5a:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a5c:	0200      	lsls	r0, r0, #8
 8006a5e:	7919      	ldrb	r1, [r3, #4]
 8006a60:	4301      	orrs	r1, r0
 8006a62:	2018      	movs	r0, #24
 8006a64:	30ff      	adds	r0, #255	; 0xff
 8006a66:	f001 f983 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a6a:	2400      	movs	r4, #0
 8006a6c:	e6d7      	b.n	800681e <setCommand+0xc6>
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20001278 	.word	0x20001278
 8006a74:	0801aaf4 	.word	0x0801aaf4
 8006a78:	0801b128 	.word	0x0801b128
 8006a7c:	0801b134 	.word	0x0801b134
 8006a80:	20001284 	.word	0x20001284
 8006a84:	0801aafc 	.word	0x0801aafc
 8006a88:	08019efc 	.word	0x08019efc
 8006a8c:	20006da0 	.word	0x20006da0
 8006a90:	0801b21c 	.word	0x0801b21c
 8006a94:	0801b230 	.word	0x0801b230
 8006a98:	0801b260 	.word	0x0801b260
 8006a9c:	0801b11c 	.word	0x0801b11c
 8006aa0:	0801b124 	.word	0x0801b124
 8006aa4:	0801ab0c 	.word	0x0801ab0c
 8006aa8:	0801ab14 	.word	0x0801ab14
 8006aac:	0801ab1c 	.word	0x0801ab1c
 8006ab0:	0801ab28 	.word	0x0801ab28
 8006ab4:	0801ab34 	.word	0x0801ab34
 8006ab8:	0801ab44 	.word	0x0801ab44
 8006abc:	0801ab58 	.word	0x0801ab58
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006ac0:	aa0c      	add	r2, sp, #48	; 0x30
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	0020      	movs	r0, r4
 8006ac6:	f009 f91b 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006aca:	4edf      	ldr	r6, [pc, #892]	; (8006e48 <setCommand+0x6f0>)
 8006acc:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ad0:	2103      	movs	r1, #3
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f009 f914 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006ad8:	4fdc      	ldr	r7, [pc, #880]	; (8006e4c <setCommand+0x6f4>)
 8006ada:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006adc:	aa0a      	add	r2, sp, #40	; 0x28
 8006ade:	2104      	movs	r1, #4
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f009 f90d 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006ae6:	4dda      	ldr	r5, [pc, #872]	; (8006e50 <setCommand+0x6f8>)
 8006ae8:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006aea:	aa09      	add	r2, sp, #36	; 0x24
 8006aec:	2105      	movs	r1, #5
 8006aee:	0020      	movs	r0, r4
 8006af0:	f009 f906 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006af4:	4cd7      	ldr	r4, [pc, #860]	; (8006e54 <setCommand+0x6fc>)
 8006af6:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006af8:	6830      	ldr	r0, [r6, #0]
 8006afa:	f00e f97e 	bl	8014dfa <atoi>
 8006afe:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006b00:	6838      	ldr	r0, [r7, #0]
 8006b02:	f00e f97a 	bl	8014dfa <atoi>
 8006b06:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	f00e f976 	bl	8014dfa <atoi>
 8006b0e:	b2c5      	uxtb	r5, r0
		if(pcParameterString5 != NULL){
 8006b10:	6824      	ldr	r4, [r4, #0]
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	d010      	beq.n	8006b38 <setCommand+0x3e0>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006b16:	2202      	movs	r2, #2
 8006b18:	49cf      	ldr	r1, [pc, #828]	; (8006e58 <setCommand+0x700>)
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f00e fe44 	bl	80157a8 <strncmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d028      	beq.n	8006b76 <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006b24:	2202      	movs	r2, #2
 8006b26:	49cd      	ldr	r1, [pc, #820]	; (8006e5c <setCommand+0x704>)
 8006b28:	0020      	movs	r0, r4
 8006b2a:	f00e fe3d 	bl	80157a8 <strncmp>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d000      	beq.n	8006b34 <setCommand+0x3dc>
 8006b32:	e1ff      	b.n	8006f34 <setCommand+0x7dc>
				temp84 =RTC_PM;
 8006b34:	2302      	movs	r3, #2
 8006b36:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006b38:	2e17      	cmp	r6, #23
 8006b3a:	d900      	bls.n	8006b3e <setCommand+0x3e6>
 8006b3c:	e20e      	b.n	8006f5c <setCommand+0x804>
 8006b3e:	2f3b      	cmp	r7, #59	; 0x3b
 8006b40:	d900      	bls.n	8006b44 <setCommand+0x3ec>
 8006b42:	e20d      	b.n	8006f60 <setCommand+0x808>
 8006b44:	2d3b      	cmp	r5, #59	; 0x3b
 8006b46:	d900      	bls.n	8006b4a <setCommand+0x3f2>
 8006b48:	e20c      	b.n	8006f64 <setCommand+0x80c>
				GetTimeDate();
 8006b4a:	f008 fc25 	bl	800f398 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006b4e:	4cc4      	ldr	r4, [pc, #784]	; (8006e60 <setCommand+0x708>)
 8006b50:	7da0      	ldrb	r0, [r4, #22]
 8006b52:	7d61      	ldrb	r1, [r4, #21]
 8006b54:	8b22      	ldrh	r2, [r4, #24]
 8006b56:	7d23      	ldrb	r3, [r4, #20]
 8006b58:	7b24      	ldrb	r4, [r4, #12]
 8006b5a:	b264      	sxtb	r4, r4
 8006b5c:	9404      	str	r4, [sp, #16]
 8006b5e:	4644      	mov	r4, r8
 8006b60:	9403      	str	r4, [sp, #12]
 8006b62:	9602      	str	r6, [sp, #8]
 8006b64:	9701      	str	r7, [sp, #4]
 8006b66:	9500      	str	r5, [sp, #0]
 8006b68:	f008 fbbc 	bl	800f2e4 <BOS_CalendarConfig>
 8006b6c:	0004      	movs	r4, r0
	if(result == BOS_OK){
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d000      	beq.n	8006b74 <setCommand+0x41c>
 8006b72:	e621      	b.n	80067b8 <setCommand+0x60>
 8006b74:	e653      	b.n	800681e <setCommand+0xc6>
				temp84 =RTC_AM;
 8006b76:	2301      	movs	r3, #1
 8006b78:	4698      	mov	r8, r3
 8006b7a:	e7dd      	b.n	8006b38 <setCommand+0x3e0>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b7c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b7e:	2102      	movs	r1, #2
 8006b80:	0020      	movs	r0, r4
 8006b82:	f009 f8bd 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006b86:	4db0      	ldr	r5, [pc, #704]	; (8006e48 <setCommand+0x6f0>)
 8006b88:	6028      	str	r0, [r5, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006b8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b8c:	2103      	movs	r1, #3
 8006b8e:	0020      	movs	r0, r4
 8006b90:	f009 f8b6 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006b94:	4bad      	ldr	r3, [pc, #692]	; (8006e4c <setCommand+0x6f4>)
 8006b96:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006b98:	aa0a      	add	r2, sp, #40	; 0x28
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	0020      	movs	r0, r4
 8006b9e:	f009 f8af 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006ba2:	4eab      	ldr	r6, [pc, #684]	; (8006e50 <setCommand+0x6f8>)
 8006ba4:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006ba6:	aa09      	add	r2, sp, #36	; 0x24
 8006ba8:	2105      	movs	r1, #5
 8006baa:	0020      	movs	r0, r4
 8006bac:	f009 f8a8 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8006bb0:	4ca8      	ldr	r4, [pc, #672]	; (8006e54 <setCommand+0x6fc>)
 8006bb2:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006bb4:	6830      	ldr	r0, [r6, #0]
 8006bb6:	f00e f920 	bl	8014dfa <atoi>
 8006bba:	b2c3      	uxtb	r3, r0
 8006bbc:	4699      	mov	r9, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	f00e f91b 	bl	8014dfa <atoi>
 8006bc4:	b286      	uxth	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006bc6:	682c      	ldr	r4, [r5, #0]
 8006bc8:	2206      	movs	r2, #6
 8006bca:	49a6      	ldr	r1, [pc, #664]	; (8006e64 <setCommand+0x70c>)
 8006bcc:	0020      	movs	r0, r4
 8006bce:	f00e fdeb 	bl	80157a8 <strncmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d100      	bne.n	8006bd8 <setCommand+0x480>
 8006bd6:	e11b      	b.n	8006e10 <setCommand+0x6b8>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006bd8:	2207      	movs	r2, #7
 8006bda:	49a3      	ldr	r1, [pc, #652]	; (8006e68 <setCommand+0x710>)
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f00e fde3 	bl	80157a8 <strncmp>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d100      	bne.n	8006be8 <setCommand+0x490>
 8006be6:	e116      	b.n	8006e16 <setCommand+0x6be>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006be8:	2209      	movs	r2, #9
 8006bea:	49a0      	ldr	r1, [pc, #640]	; (8006e6c <setCommand+0x714>)
 8006bec:	0020      	movs	r0, r4
 8006bee:	f00e fddb 	bl	80157a8 <strncmp>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d100      	bne.n	8006bf8 <setCommand+0x4a0>
 8006bf6:	e111      	b.n	8006e1c <setCommand+0x6c4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	499d      	ldr	r1, [pc, #628]	; (8006e70 <setCommand+0x718>)
 8006bfc:	0020      	movs	r0, r4
 8006bfe:	f00e fdd3 	bl	80157a8 <strncmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d100      	bne.n	8006c08 <setCommand+0x4b0>
 8006c06:	e10c      	b.n	8006e22 <setCommand+0x6ca>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006c08:	2206      	movs	r2, #6
 8006c0a:	499a      	ldr	r1, [pc, #616]	; (8006e74 <setCommand+0x71c>)
 8006c0c:	0020      	movs	r0, r4
 8006c0e:	f00e fdcb 	bl	80157a8 <strncmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d100      	bne.n	8006c18 <setCommand+0x4c0>
 8006c16:	e107      	b.n	8006e28 <setCommand+0x6d0>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4997      	ldr	r1, [pc, #604]	; (8006e78 <setCommand+0x720>)
 8006c1c:	0020      	movs	r0, r4
 8006c1e:	f00e fdc3 	bl	80157a8 <strncmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d100      	bne.n	8006c28 <setCommand+0x4d0>
 8006c26:	e102      	b.n	8006e2e <setCommand+0x6d6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006c28:	2206      	movs	r2, #6
 8006c2a:	4994      	ldr	r1, [pc, #592]	; (8006e7c <setCommand+0x724>)
 8006c2c:	0020      	movs	r0, r4
 8006c2e:	f00e fdbb 	bl	80157a8 <strncmp>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d000      	beq.n	8006c38 <setCommand+0x4e0>
 8006c36:	e0fd      	b.n	8006e34 <setCommand+0x6dc>
			temp81 =SUNDAY;
 8006c38:	2707      	movs	r7, #7
	BOS_Status result =BOS_OK;
 8006c3a:	2400      	movs	r4, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c3c:	4b83      	ldr	r3, [pc, #524]	; (8006e4c <setCommand+0x6f4>)
 8006c3e:	681d      	ldr	r5, [r3, #0]
 8006c40:	2207      	movs	r2, #7
 8006c42:	498f      	ldr	r1, [pc, #572]	; (8006e80 <setCommand+0x728>)
 8006c44:	0028      	movs	r0, r5
 8006c46:	f00e fdaf 	bl	80157a8 <strncmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d100      	bne.n	8006c50 <setCommand+0x4f8>
 8006c4e:	e0f3      	b.n	8006e38 <setCommand+0x6e0>
 8006c50:	2202      	movs	r2, #2
 8006c52:	498c      	ldr	r1, [pc, #560]	; (8006e84 <setCommand+0x72c>)
 8006c54:	0028      	movs	r0, r5
 8006c56:	f00e fda7 	bl	80157a8 <strncmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d100      	bne.n	8006c60 <setCommand+0x508>
 8006c5e:	e0ed      	b.n	8006e3c <setCommand+0x6e4>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006c60:	2208      	movs	r2, #8
 8006c62:	4989      	ldr	r1, [pc, #548]	; (8006e88 <setCommand+0x730>)
 8006c64:	0028      	movs	r0, r5
 8006c66:	f00e fd9f 	bl	80157a8 <strncmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d100      	bne.n	8006c70 <setCommand+0x518>
 8006c6e:	e0e7      	b.n	8006e40 <setCommand+0x6e8>
 8006c70:	2202      	movs	r2, #2
 8006c72:	4986      	ldr	r1, [pc, #536]	; (8006e8c <setCommand+0x734>)
 8006c74:	0028      	movs	r0, r5
 8006c76:	f00e fd97 	bl	80157a8 <strncmp>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d100      	bne.n	8006c80 <setCommand+0x528>
 8006c7e:	e0e1      	b.n	8006e44 <setCommand+0x6ec>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006c80:	2205      	movs	r2, #5
 8006c82:	4983      	ldr	r1, [pc, #524]	; (8006e90 <setCommand+0x738>)
 8006c84:	0028      	movs	r0, r5
 8006c86:	f00e fd8f 	bl	80157a8 <strncmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d100      	bne.n	8006c90 <setCommand+0x538>
 8006c8e:	e12b      	b.n	8006ee8 <setCommand+0x790>
 8006c90:	2202      	movs	r2, #2
 8006c92:	4980      	ldr	r1, [pc, #512]	; (8006e94 <setCommand+0x73c>)
 8006c94:	0028      	movs	r0, r5
 8006c96:	f00e fd87 	bl	80157a8 <strncmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d100      	bne.n	8006ca0 <setCommand+0x548>
 8006c9e:	e125      	b.n	8006eec <setCommand+0x794>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	497d      	ldr	r1, [pc, #500]	; (8006e98 <setCommand+0x740>)
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	f00e fd7f 	bl	80157a8 <strncmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d100      	bne.n	8006cb0 <setCommand+0x558>
 8006cae:	e11f      	b.n	8006ef0 <setCommand+0x798>
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	497a      	ldr	r1, [pc, #488]	; (8006e9c <setCommand+0x744>)
 8006cb4:	0028      	movs	r0, r5
 8006cb6:	f00e fd77 	bl	80157a8 <strncmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d100      	bne.n	8006cc0 <setCommand+0x568>
 8006cbe:	e119      	b.n	8006ef4 <setCommand+0x79c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4977      	ldr	r1, [pc, #476]	; (8006ea0 <setCommand+0x748>)
 8006cc4:	0028      	movs	r0, r5
 8006cc6:	f00e fd6f 	bl	80157a8 <strncmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d100      	bne.n	8006cd0 <setCommand+0x578>
 8006cce:	e113      	b.n	8006ef8 <setCommand+0x7a0>
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	4974      	ldr	r1, [pc, #464]	; (8006ea4 <setCommand+0x74c>)
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	f00e fd67 	bl	80157a8 <strncmp>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d100      	bne.n	8006ce0 <setCommand+0x588>
 8006cde:	e10d      	b.n	8006efc <setCommand+0x7a4>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	4971      	ldr	r1, [pc, #452]	; (8006ea8 <setCommand+0x750>)
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f00e fd5f 	bl	80157a8 <strncmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d100      	bne.n	8006cf0 <setCommand+0x598>
 8006cee:	e107      	b.n	8006f00 <setCommand+0x7a8>
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	496e      	ldr	r1, [pc, #440]	; (8006eac <setCommand+0x754>)
 8006cf4:	0028      	movs	r0, r5
 8006cf6:	f00e fd57 	bl	80157a8 <strncmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d100      	bne.n	8006d00 <setCommand+0x5a8>
 8006cfe:	e101      	b.n	8006f04 <setCommand+0x7ac>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006d00:	2204      	movs	r2, #4
 8006d02:	496b      	ldr	r1, [pc, #428]	; (8006eb0 <setCommand+0x758>)
 8006d04:	0028      	movs	r0, r5
 8006d06:	f00e fd4f 	bl	80157a8 <strncmp>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d100      	bne.n	8006d10 <setCommand+0x5b8>
 8006d0e:	e0fb      	b.n	8006f08 <setCommand+0x7b0>
 8006d10:	2202      	movs	r2, #2
 8006d12:	4968      	ldr	r1, [pc, #416]	; (8006eb4 <setCommand+0x75c>)
 8006d14:	0028      	movs	r0, r5
 8006d16:	f00e fd47 	bl	80157a8 <strncmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d100      	bne.n	8006d20 <setCommand+0x5c8>
 8006d1e:	e0f5      	b.n	8006f0c <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006d20:	2205      	movs	r2, #5
 8006d22:	4965      	ldr	r1, [pc, #404]	; (8006eb8 <setCommand+0x760>)
 8006d24:	0028      	movs	r0, r5
 8006d26:	f00e fd3f 	bl	80157a8 <strncmp>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d100      	bne.n	8006d30 <setCommand+0x5d8>
 8006d2e:	e0ef      	b.n	8006f10 <setCommand+0x7b8>
 8006d30:	2202      	movs	r2, #2
 8006d32:	4962      	ldr	r1, [pc, #392]	; (8006ebc <setCommand+0x764>)
 8006d34:	0028      	movs	r0, r5
 8006d36:	f00e fd37 	bl	80157a8 <strncmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d100      	bne.n	8006d40 <setCommand+0x5e8>
 8006d3e:	e0e9      	b.n	8006f14 <setCommand+0x7bc>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006d40:	2209      	movs	r2, #9
 8006d42:	495f      	ldr	r1, [pc, #380]	; (8006ec0 <setCommand+0x768>)
 8006d44:	0028      	movs	r0, r5
 8006d46:	f00e fd2f 	bl	80157a8 <strncmp>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d100      	bne.n	8006d50 <setCommand+0x5f8>
 8006d4e:	e0e3      	b.n	8006f18 <setCommand+0x7c0>
 8006d50:	2202      	movs	r2, #2
 8006d52:	495c      	ldr	r1, [pc, #368]	; (8006ec4 <setCommand+0x76c>)
 8006d54:	0028      	movs	r0, r5
 8006d56:	f00e fd27 	bl	80157a8 <strncmp>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d100      	bne.n	8006d60 <setCommand+0x608>
 8006d5e:	e0dd      	b.n	8006f1c <setCommand+0x7c4>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006d60:	2207      	movs	r2, #7
 8006d62:	4959      	ldr	r1, [pc, #356]	; (8006ec8 <setCommand+0x770>)
 8006d64:	0028      	movs	r0, r5
 8006d66:	f00e fd1f 	bl	80157a8 <strncmp>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d100      	bne.n	8006d70 <setCommand+0x618>
 8006d6e:	e0d7      	b.n	8006f20 <setCommand+0x7c8>
 8006d70:	2202      	movs	r2, #2
 8006d72:	4956      	ldr	r1, [pc, #344]	; (8006ecc <setCommand+0x774>)
 8006d74:	0028      	movs	r0, r5
 8006d76:	f00e fd17 	bl	80157a8 <strncmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d100      	bne.n	8006d80 <setCommand+0x628>
 8006d7e:	e0d1      	b.n	8006f24 <setCommand+0x7cc>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006d80:	2208      	movs	r2, #8
 8006d82:	4953      	ldr	r1, [pc, #332]	; (8006ed0 <setCommand+0x778>)
 8006d84:	0028      	movs	r0, r5
 8006d86:	f00e fd0f 	bl	80157a8 <strncmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d100      	bne.n	8006d90 <setCommand+0x638>
 8006d8e:	e0cb      	b.n	8006f28 <setCommand+0x7d0>
 8006d90:	2202      	movs	r2, #2
 8006d92:	4950      	ldr	r1, [pc, #320]	; (8006ed4 <setCommand+0x77c>)
 8006d94:	0028      	movs	r0, r5
 8006d96:	f00e fd07 	bl	80157a8 <strncmp>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d100      	bne.n	8006da0 <setCommand+0x648>
 8006d9e:	e0c5      	b.n	8006f2c <setCommand+0x7d4>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006da0:	2208      	movs	r2, #8
 8006da2:	494d      	ldr	r1, [pc, #308]	; (8006ed8 <setCommand+0x780>)
 8006da4:	0028      	movs	r0, r5
 8006da6:	f00e fcff 	bl	80157a8 <strncmp>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d100      	bne.n	8006db0 <setCommand+0x658>
 8006dae:	e0bf      	b.n	8006f30 <setCommand+0x7d8>
 8006db0:	2202      	movs	r2, #2
 8006db2:	494a      	ldr	r1, [pc, #296]	; (8006edc <setCommand+0x784>)
 8006db4:	0028      	movs	r0, r5
 8006db6:	f00e fcf7 	bl	80157a8 <strncmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d000      	beq.n	8006dc0 <setCommand+0x668>
 8006dbe:	e0bb      	b.n	8006f38 <setCommand+0x7e0>
			temp82 =DECEMBER;
 8006dc0:	250c      	movs	r5, #12
		if(result == BOS_OK){
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d000      	beq.n	8006dc8 <setCommand+0x670>
 8006dc6:	e6d2      	b.n	8006b6e <setCommand+0x416>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006dc8:	464b      	mov	r3, r9
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b1e      	cmp	r3, #30
 8006dd0:	d900      	bls.n	8006dd4 <setCommand+0x67c>
 8006dd2:	e0c9      	b.n	8006f68 <setCommand+0x810>
 8006dd4:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <setCommand+0x788>)
 8006dd6:	429e      	cmp	r6, r3
 8006dd8:	d800      	bhi.n	8006ddc <setCommand+0x684>
 8006dda:	e0c7      	b.n	8006f6c <setCommand+0x814>
 8006ddc:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <setCommand+0x78c>)
 8006dde:	429e      	cmp	r6, r3
 8006de0:	d900      	bls.n	8006de4 <setCommand+0x68c>
 8006de2:	e0c5      	b.n	8006f70 <setCommand+0x818>
				GetTimeDate();
 8006de4:	f008 fad8 	bl	800f398 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <setCommand+0x708>)
 8006dea:	7c1a      	ldrb	r2, [r3, #16]
 8006dec:	7c59      	ldrb	r1, [r3, #17]
 8006dee:	7c98      	ldrb	r0, [r3, #18]
 8006df0:	7cdc      	ldrb	r4, [r3, #19]
 8006df2:	7b1b      	ldrb	r3, [r3, #12]
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	9403      	str	r4, [sp, #12]
 8006dfa:	9002      	str	r0, [sp, #8]
 8006dfc:	9101      	str	r1, [sp, #4]
 8006dfe:	9200      	str	r2, [sp, #0]
 8006e00:	003b      	movs	r3, r7
 8006e02:	0032      	movs	r2, r6
 8006e04:	4649      	mov	r1, r9
 8006e06:	0028      	movs	r0, r5
 8006e08:	f008 fa6c 	bl	800f2e4 <BOS_CalendarConfig>
 8006e0c:	0004      	movs	r4, r0
 8006e0e:	e6ae      	b.n	8006b6e <setCommand+0x416>
			temp81 =MONDAY;
 8006e10:	2701      	movs	r7, #1
	BOS_Status result =BOS_OK;
 8006e12:	2400      	movs	r4, #0
 8006e14:	e712      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =TUESDAY;
 8006e16:	2702      	movs	r7, #2
	BOS_Status result =BOS_OK;
 8006e18:	2400      	movs	r4, #0
 8006e1a:	e70f      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =WEDNESDAY;
 8006e1c:	2703      	movs	r7, #3
	BOS_Status result =BOS_OK;
 8006e1e:	2400      	movs	r4, #0
 8006e20:	e70c      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =THURSDAY;
 8006e22:	2704      	movs	r7, #4
	BOS_Status result =BOS_OK;
 8006e24:	2400      	movs	r4, #0
 8006e26:	e709      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =FRIDAY;
 8006e28:	2705      	movs	r7, #5
	BOS_Status result =BOS_OK;
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	e706      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =SATURDAY;
 8006e2e:	2706      	movs	r7, #6
	BOS_Status result =BOS_OK;
 8006e30:	2400      	movs	r4, #0
 8006e32:	e703      	b.n	8006c3c <setCommand+0x4e4>
			result =BOS_ERR_WrongValue;
 8006e34:	2468      	movs	r4, #104	; 0x68
 8006e36:	e701      	b.n	8006c3c <setCommand+0x4e4>
			temp82 =JANUARY;
 8006e38:	2501      	movs	r5, #1
 8006e3a:	e7c2      	b.n	8006dc2 <setCommand+0x66a>
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	e7c0      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =FEBRUARY;
 8006e40:	2502      	movs	r5, #2
 8006e42:	e7be      	b.n	8006dc2 <setCommand+0x66a>
 8006e44:	2502      	movs	r5, #2
 8006e46:	e7bc      	b.n	8006dc2 <setCommand+0x66a>
 8006e48:	20001284 	.word	0x20001284
 8006e4c:	2000128c 	.word	0x2000128c
 8006e50:	20001290 	.word	0x20001290
 8006e54:	20001294 	.word	0x20001294
 8006e58:	0801cd58 	.word	0x0801cd58
 8006e5c:	0801b130 	.word	0x0801b130
 8006e60:	20006da0 	.word	0x20006da0
 8006e64:	0801b13c 	.word	0x0801b13c
 8006e68:	0801b144 	.word	0x0801b144
 8006e6c:	0801b14c 	.word	0x0801b14c
 8006e70:	0801b158 	.word	0x0801b158
 8006e74:	0801b164 	.word	0x0801b164
 8006e78:	0801b16c 	.word	0x0801b16c
 8006e7c:	0801b178 	.word	0x0801b178
 8006e80:	0801b180 	.word	0x0801b180
 8006e84:	0801b188 	.word	0x0801b188
 8006e88:	0801b18c 	.word	0x0801b18c
 8006e8c:	0801b198 	.word	0x0801b198
 8006e90:	0801b19c 	.word	0x0801b19c
 8006e94:	0801b1a4 	.word	0x0801b1a4
 8006e98:	0801b1a8 	.word	0x0801b1a8
 8006e9c:	0801b1b0 	.word	0x0801b1b0
 8006ea0:	0801b1b4 	.word	0x0801b1b4
 8006ea4:	0801b1b8 	.word	0x0801b1b8
 8006ea8:	0801b1bc 	.word	0x0801b1bc
 8006eac:	0801b1c4 	.word	0x0801b1c4
 8006eb0:	0801b1c8 	.word	0x0801b1c8
 8006eb4:	0801b1d0 	.word	0x0801b1d0
 8006eb8:	0801b1d4 	.word	0x0801b1d4
 8006ebc:	0801b1dc 	.word	0x0801b1dc
 8006ec0:	0801b1e0 	.word	0x0801b1e0
 8006ec4:	0801b1ec 	.word	0x0801b1ec
 8006ec8:	0801b1f0 	.word	0x0801b1f0
 8006ecc:	0801b1f8 	.word	0x0801b1f8
 8006ed0:	0801b1fc 	.word	0x0801b1fc
 8006ed4:	0801b208 	.word	0x0801b208
 8006ed8:	0801b20c 	.word	0x0801b20c
 8006edc:	0801b218 	.word	0x0801b218
 8006ee0:	000007cf 	.word	0x000007cf
 8006ee4:	00000834 	.word	0x00000834
			temp82 =MARCH;
 8006ee8:	2503      	movs	r5, #3
 8006eea:	e76a      	b.n	8006dc2 <setCommand+0x66a>
 8006eec:	2503      	movs	r5, #3
 8006eee:	e768      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =APRIL;
 8006ef0:	2504      	movs	r5, #4
 8006ef2:	e766      	b.n	8006dc2 <setCommand+0x66a>
 8006ef4:	2504      	movs	r5, #4
 8006ef6:	e764      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =MAY;
 8006ef8:	2505      	movs	r5, #5
 8006efa:	e762      	b.n	8006dc2 <setCommand+0x66a>
 8006efc:	2505      	movs	r5, #5
 8006efe:	e760      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =JUNE;
 8006f00:	2506      	movs	r5, #6
 8006f02:	e75e      	b.n	8006dc2 <setCommand+0x66a>
 8006f04:	2506      	movs	r5, #6
 8006f06:	e75c      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =JULY;
 8006f08:	2507      	movs	r5, #7
 8006f0a:	e75a      	b.n	8006dc2 <setCommand+0x66a>
 8006f0c:	2507      	movs	r5, #7
 8006f0e:	e758      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =AUGUST;
 8006f10:	2508      	movs	r5, #8
 8006f12:	e756      	b.n	8006dc2 <setCommand+0x66a>
 8006f14:	2508      	movs	r5, #8
 8006f16:	e754      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =SEPTEMBER;
 8006f18:	2509      	movs	r5, #9
 8006f1a:	e752      	b.n	8006dc2 <setCommand+0x66a>
 8006f1c:	2509      	movs	r5, #9
 8006f1e:	e750      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =OCTOBER;
 8006f20:	250a      	movs	r5, #10
 8006f22:	e74e      	b.n	8006dc2 <setCommand+0x66a>
 8006f24:	250a      	movs	r5, #10
 8006f26:	e74c      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =NOVEMBER;
 8006f28:	250b      	movs	r5, #11
 8006f2a:	e74a      	b.n	8006dc2 <setCommand+0x66a>
 8006f2c:	250b      	movs	r5, #11
 8006f2e:	e748      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =DECEMBER;
 8006f30:	250c      	movs	r5, #12
 8006f32:	e746      	b.n	8006dc2 <setCommand+0x66a>
				result =BOS_ERR_WrongValue;
 8006f34:	2468      	movs	r4, #104	; 0x68
 8006f36:	e61a      	b.n	8006b6e <setCommand+0x416>
			result =BOS_ERR_WrongValue;
 8006f38:	2468      	movs	r4, #104	; 0x68
 8006f3a:	e618      	b.n	8006b6e <setCommand+0x416>
				result =BOS_ERR_WrongValue;
 8006f3c:	2468      	movs	r4, #104	; 0x68
 8006f3e:	e43b      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f40:	2468      	movs	r4, #104	; 0x68
 8006f42:	e439      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f44:	2468      	movs	r4, #104	; 0x68
 8006f46:	e437      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f48:	2468      	movs	r4, #104	; 0x68
 8006f4a:	e435      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f4c:	2468      	movs	r4, #104	; 0x68
 8006f4e:	e433      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f50:	2468      	movs	r4, #104	; 0x68
 8006f52:	e431      	b.n	80067b8 <setCommand+0x60>
			result =BOS_ERR_WrongParam;
 8006f54:	2467      	movs	r4, #103	; 0x67
 8006f56:	e42f      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f58:	2468      	movs	r4, #104	; 0x68
 8006f5a:	e42d      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f5c:	2468      	movs	r4, #104	; 0x68
 8006f5e:	e42b      	b.n	80067b8 <setCommand+0x60>
 8006f60:	2468      	movs	r4, #104	; 0x68
 8006f62:	e429      	b.n	80067b8 <setCommand+0x60>
 8006f64:	2468      	movs	r4, #104	; 0x68
 8006f66:	e427      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f68:	2468      	movs	r4, #104	; 0x68
 8006f6a:	e425      	b.n	80067b8 <setCommand+0x60>
 8006f6c:	2468      	movs	r4, #104	; 0x68
 8006f6e:	e423      	b.n	80067b8 <setCommand+0x60>
 8006f70:	2468      	movs	r4, #104	; 0x68
 8006f72:	e421      	b.n	80067b8 <setCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006f74:	2213      	movs	r2, #19
 8006f76:	4905      	ldr	r1, [pc, #20]	; (8006f8c <setCommand+0x834>)
 8006f78:	9807      	ldr	r0, [sp, #28]
 8006f7a:	f00e f9ce 	bl	801531a <memcpy>
 8006f7e:	e421      	b.n	80067c4 <setCommand+0x6c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006f80:	220f      	movs	r2, #15
 8006f82:	4903      	ldr	r1, [pc, #12]	; (8006f90 <setCommand+0x838>)
 8006f84:	9807      	ldr	r0, [sp, #28]
 8006f86:	f00e f9c8 	bl	801531a <memcpy>
 8006f8a:	e41b      	b.n	80067c4 <setCommand+0x6c>
 8006f8c:	0801abac 	.word	0x0801abac
 8006f90:	0801a9e8 	.word	0x0801a9e8

08006f94 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	b083      	sub	sp, #12
 8006f98:	0005      	movs	r5, r0
 8006f9a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	d101      	bne.n	8006fa8 <removebuttonCommand+0x14>
 8006fa4:	b672      	cpsid	i
 8006fa6:	e7fe      	b.n	8006fa6 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fa8:	aa01      	add	r2, sp, #4
 8006faa:	2101      	movs	r1, #1
 8006fac:	f008 fea8 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	56c3      	ldrsb	r3, [r0, r3]
 8006fb4:	2b70      	cmp	r3, #112	; 0x70
 8006fb6:	d008      	beq.n	8006fca <removebuttonCommand+0x36>
	uint8_t port =0;
 8006fb8:	2400      	movs	r4, #0
	result =RemovePortButton(port);
 8006fba:	0020      	movs	r0, r4
 8006fbc:	f001 fb8c 	bl	80086d8 <RemovePortButton>
	if(result == BOS_OK){
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d007      	beq.n	8006fd4 <removebuttonCommand+0x40>
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	b003      	add	sp, #12
 8006fc8:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f00d ff1b 	bl	8014e06 <atol>
 8006fd0:	b2c4      	uxtb	r4, r0
 8006fd2:	e7f2      	b.n	8006fba <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	0022      	movs	r2, r4
 8006fd8:	4902      	ldr	r1, [pc, #8]	; (8006fe4 <removebuttonCommand+0x50>)
 8006fda:	0028      	movs	r0, r5
 8006fdc:	f00e fba0 	bl	8015720 <sprintf>
 8006fe0:	e7f0      	b.n	8006fc4 <removebuttonCommand+0x30>
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	0801afcc 	.word	0x0801afcc

08006fe8 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b085      	sub	sp, #20
 8006fec:	0006      	movs	r6, r0
 8006fee:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d101      	bne.n	8006ffe <addbuttonCommand+0x16>
 8006ffa:	b672      	cpsid	i
 8006ffc:	e7fe      	b.n	8006ffc <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ffe:	aa03      	add	r2, sp, #12
 8007000:	2101      	movs	r1, #1
 8007002:	0038      	movs	r0, r7
 8007004:	f008 fe7c 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8007008:	0004      	movs	r4, r0
 800700a:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <addbuttonCommand+0xbc>)
 800700c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800700e:	9d03      	ldr	r5, [sp, #12]
 8007010:	002a      	movs	r2, r5
 8007012:	4925      	ldr	r1, [pc, #148]	; (80070a8 <addbuttonCommand+0xc0>)
 8007014:	f00e fbc8 	bl	80157a8 <strncmp>
 8007018:	2800      	cmp	r0, #0
 800701a:	d016      	beq.n	800704a <addbuttonCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800701c:	002a      	movs	r2, r5
 800701e:	4923      	ldr	r1, [pc, #140]	; (80070ac <addbuttonCommand+0xc4>)
 8007020:	0020      	movs	r0, r4
 8007022:	f00e fbc1 	bl	80157a8 <strncmp>
 8007026:	2800      	cmp	r0, #0
 8007028:	d023      	beq.n	8007072 <addbuttonCommand+0x8a>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 800702a:	002a      	movs	r2, r5
 800702c:	4920      	ldr	r1, [pc, #128]	; (80070b0 <addbuttonCommand+0xc8>)
 800702e:	0020      	movs	r0, r4
 8007030:	f00e fbba 	bl	80157a8 <strncmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	d01e      	beq.n	8007076 <addbuttonCommand+0x8e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8007038:	002a      	movs	r2, r5
 800703a:	491e      	ldr	r1, [pc, #120]	; (80070b4 <addbuttonCommand+0xcc>)
 800703c:	0020      	movs	r0, r4
 800703e:	f00e fbb3 	bl	80157a8 <strncmp>
 8007042:	2800      	cmp	r0, #0
 8007044:	d019      	beq.n	800707a <addbuttonCommand+0x92>
	uint8_t port =0, type =0;
 8007046:	2500      	movs	r5, #0
 8007048:	e000      	b.n	800704c <addbuttonCommand+0x64>
		type =MOMENTARY_NO;
 800704a:	2501      	movs	r5, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800704c:	aa02      	add	r2, sp, #8
 800704e:	2102      	movs	r1, #2
 8007050:	0038      	movs	r0, r7
 8007052:	f008 fe55 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8007056:	2300      	movs	r3, #0
 8007058:	56c3      	ldrsb	r3, [r0, r3]
 800705a:	2b70      	cmp	r3, #112	; 0x70
 800705c:	d00f      	beq.n	800707e <addbuttonCommand+0x96>
	uint8_t port =0, type =0;
 800705e:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8007060:	0021      	movs	r1, r4
 8007062:	0028      	movs	r0, r5
 8007064:	f001 faa6 	bl	80085b4 <AddPortButton>
	if(result == BOS_OK){
 8007068:	2800      	cmp	r0, #0
 800706a:	d00d      	beq.n	8007088 <addbuttonCommand+0xa0>
}
 800706c:	2000      	movs	r0, #0
 800706e:	b005      	add	sp, #20
 8007070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8007072:	2502      	movs	r5, #2
 8007074:	e7ea      	b.n	800704c <addbuttonCommand+0x64>
		type =ONOFF_NO;
 8007076:	2503      	movs	r5, #3
 8007078:	e7e8      	b.n	800704c <addbuttonCommand+0x64>
		type =ONOFF_NC;
 800707a:	2504      	movs	r5, #4
 800707c:	e7e6      	b.n	800704c <addbuttonCommand+0x64>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 800707e:	3001      	adds	r0, #1
 8007080:	f00d fec1 	bl	8014e06 <atol>
 8007084:	b2c4      	uxtb	r4, r0
 8007086:	e7eb      	b.n	8007060 <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <addbuttonCommand+0xbc>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	18d3      	adds	r3, r2, r3
 8007090:	2100      	movs	r1, #0
 8007092:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8007094:	9400      	str	r4, [sp, #0]
 8007096:	0023      	movs	r3, r4
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <addbuttonCommand+0xd0>)
 800709a:	0030      	movs	r0, r6
 800709c:	f00e fb40 	bl	8015720 <sprintf>
 80070a0:	e7e4      	b.n	800706c <addbuttonCommand+0x84>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	20001274 	.word	0x20001274
 80070a8:	0801a88c 	.word	0x0801a88c
 80070ac:	0801a89c 	.word	0x0801a89c
 80070b0:	0801a8ac 	.word	0x0801a8ac
 80070b4:	0801a8b8 	.word	0x0801a8b8
 80070b8:	0801a8c4 	.word	0x0801a8c4

080070bc <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	46de      	mov	lr, fp
 80070c0:	4657      	mov	r7, sl
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b09b      	sub	sp, #108	; 0x6c
 80070c6:	0005      	movs	r5, r0
 80070c8:	9009      	str	r0, [sp, #36]	; 0x24
 80070ca:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	9319      	str	r3, [sp, #100]	; 0x64
 80070d0:	9318      	str	r3, [sp, #96]	; 0x60
 80070d2:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 80070d4:	9316      	str	r3, [sp, #88]	; 0x58
 80070d6:	9315      	str	r3, [sp, #84]	; 0x54
 80070d8:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 80070da:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80070dc:	220a      	movs	r2, #10
 80070de:	2100      	movs	r1, #0
 80070e0:	a810      	add	r0, sp, #64	; 0x40
 80070e2:	f00e f923 	bl	801532c <memset>
 80070e6:	220a      	movs	r2, #10
 80070e8:	2100      	movs	r1, #0
 80070ea:	a80d      	add	r0, sp, #52	; 0x34
 80070ec:	f00e f91e 	bl	801532c <memset>
 80070f0:	220a      	movs	r2, #10
 80070f2:	2100      	movs	r1, #0
 80070f4:	a80a      	add	r0, sp, #40	; 0x28
 80070f6:	f00e f919 	bl	801532c <memset>
	configASSERT(pcWriteBuffer);
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	d101      	bne.n	8007102 <scastCommand+0x46>
 80070fe:	b672      	cpsid	i
 8007100:	e7fe      	b.n	8007100 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007102:	aa19      	add	r2, sp, #100	; 0x64
 8007104:	2101      	movs	r1, #1
 8007106:	0020      	movs	r0, r4
 8007108:	f008 fdfa 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 800710c:	2300      	movs	r3, #0
 800710e:	56c3      	ldrsb	r3, [r0, r3]
 8007110:	2b50      	cmp	r3, #80	; 0x50
 8007112:	d047      	beq.n	80071a4 <scastCommand+0xe8>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007114:	2300      	movs	r3, #0
 8007116:	9307      	str	r3, [sp, #28]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007118:	aa18      	add	r2, sp, #96	; 0x60
 800711a:	2102      	movs	r1, #2
 800711c:	0020      	movs	r0, r4
 800711e:	f008 fdef 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8007122:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8007124:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007126:	a810      	add	r0, sp, #64	; 0x40
 8007128:	f00e fb4f 	bl	80157ca <strncpy>
	srcM =(uint8_t )GetID(par1);
 800712c:	a810      	add	r0, sp, #64	; 0x40
 800712e:	f7fd fa9f 	bl	8004670 <GetID>
 8007132:	b2c3      	uxtb	r3, r0
 8007134:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007136:	aa17      	add	r2, sp, #92	; 0x5c
 8007138:	2103      	movs	r1, #3
 800713a:	0020      	movs	r0, r4
 800713c:	f008 fde0 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8007140:	2300      	movs	r3, #0
 8007142:	56c3      	ldrsb	r3, [r0, r3]
 8007144:	2b70      	cmp	r3, #112	; 0x70
 8007146:	d033      	beq.n	80071b0 <scastCommand+0xf4>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007148:	2700      	movs	r7, #0
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800714a:	aa16      	add	r2, sp, #88	; 0x58
 800714c:	2104      	movs	r1, #4
 800714e:	0020      	movs	r0, r4
 8007150:	f008 fdd6 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8007154:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8007156:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007158:	a80d      	add	r0, sp, #52	; 0x34
 800715a:	f00e fb36 	bl	80157ca <strncpy>
	dstM =(uint8_t )GetID(par2);
 800715e:	a80d      	add	r0, sp, #52	; 0x34
 8007160:	f7fd fa86 	bl	8004670 <GetID>
 8007164:	b2c3      	uxtb	r3, r0
 8007166:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8007168:	aa15      	add	r2, sp, #84	; 0x54
 800716a:	2105      	movs	r1, #5
 800716c:	0020      	movs	r0, r4
 800716e:	f008 fdc7 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8007172:	0005      	movs	r5, r0
 8007174:	9008      	str	r0, [sp, #32]
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8007176:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007178:	0032      	movs	r2, r6
 800717a:	492d      	ldr	r1, [pc, #180]	; (8007230 <scastCommand+0x174>)
 800717c:	f00e fb14 	bl	80157a8 <strncmp>
 8007180:	2800      	cmp	r0, #0
 8007182:	d01a      	beq.n	80071ba <scastCommand+0xfe>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007184:	0032      	movs	r2, r6
 8007186:	492b      	ldr	r1, [pc, #172]	; (8007234 <scastCommand+0x178>)
 8007188:	0028      	movs	r0, r5
 800718a:	f00e fb0d 	bl	80157a8 <strncmp>
 800718e:	2800      	cmp	r0, #0
 8007190:	d03c      	beq.n	800720c <scastCommand+0x150>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8007192:	0032      	movs	r2, r6
 8007194:	4928      	ldr	r1, [pc, #160]	; (8007238 <scastCommand+0x17c>)
 8007196:	0028      	movs	r0, r5
 8007198:	f00e fb06 	bl	80157a8 <strncmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	d037      	beq.n	8007210 <scastCommand+0x154>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 80071a0:	2500      	movs	r5, #0
 80071a2:	e00b      	b.n	80071bc <scastCommand+0x100>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 80071a4:	3001      	adds	r0, #1
 80071a6:	f00d fe2e 	bl	8014e06 <atol>
 80071aa:	b2c3      	uxtb	r3, r0
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	e7b3      	b.n	8007118 <scastCommand+0x5c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 80071b0:	3001      	adds	r0, #1
 80071b2:	f00d fe28 	bl	8014e06 <atol>
 80071b6:	b2c7      	uxtb	r7, r0
 80071b8:	e7c7      	b.n	800714a <scastCommand+0x8e>
		direction =FORWARD;
 80071ba:	2500      	movs	r5, #0
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 80071bc:	0032      	movs	r2, r6
 80071be:	9908      	ldr	r1, [sp, #32]
 80071c0:	a80a      	add	r0, sp, #40	; 0x28
 80071c2:	f00e fb02 	bl	80157ca <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 80071c6:	aa14      	add	r2, sp, #80	; 0x50
 80071c8:	2106      	movs	r1, #6
 80071ca:	0020      	movs	r0, r4
 80071cc:	f008 fd98 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 80071d0:	f00d fe19 	bl	8014e06 <atol>
 80071d4:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 80071d6:	aa13      	add	r2, sp, #76	; 0x4c
 80071d8:	2107      	movs	r1, #7
 80071da:	0020      	movs	r0, r4
 80071dc:	f008 fd90 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 80071e0:	f00d fe11 	bl	8014e06 <atol>
 80071e4:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 80071e6:	2300      	movs	r3, #0
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	9002      	str	r0, [sp, #8]
 80071ec:	9601      	str	r6, [sp, #4]
 80071ee:	9500      	str	r5, [sp, #0]
 80071f0:	465b      	mov	r3, fp
 80071f2:	003a      	movs	r2, r7
 80071f4:	4651      	mov	r1, sl
 80071f6:	9807      	ldr	r0, [sp, #28]
 80071f8:	f002 fcb6 	bl	8009b68 <StartScastDMAStream>
	if(result == BOS_OK){
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d009      	beq.n	8007214 <scastCommand+0x158>
}
 8007200:	2000      	movs	r0, #0
 8007202:	b01b      	add	sp, #108	; 0x6c
 8007204:	bc0c      	pop	{r2, r3}
 8007206:	4692      	mov	sl, r2
 8007208:	469b      	mov	fp, r3
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 800720c:	2501      	movs	r5, #1
 800720e:	e7d5      	b.n	80071bc <scastCommand+0x100>
		direction =BIDIRECTIONAL;
 8007210:	2502      	movs	r5, #2
 8007212:	e7d3      	b.n	80071bc <scastCommand+0x100>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8007214:	9404      	str	r4, [sp, #16]
 8007216:	9603      	str	r6, [sp, #12]
 8007218:	ab0d      	add	r3, sp, #52	; 0x34
 800721a:	9302      	str	r3, [sp, #8]
 800721c:	9701      	str	r7, [sp, #4]
 800721e:	ab10      	add	r3, sp, #64	; 0x40
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	aa0a      	add	r2, sp, #40	; 0x28
 8007226:	4905      	ldr	r1, [pc, #20]	; (800723c <scastCommand+0x180>)
 8007228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722a:	f00e fa79 	bl	8015720 <sprintf>
 800722e:	e7e7      	b.n	8007200 <scastCommand+0x144>
 8007230:	0801b014 	.word	0x0801b014
 8007234:	0801b01c 	.word	0x0801b01c
 8007238:	0801b028 	.word	0x0801b028
 800723c:	0801b038 	.word	0x0801b038

08007240 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007242:	b083      	sub	sp, #12
 8007244:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007246:	d038      	beq.n	80072ba <infoCommand+0x7a>
	if(N > 1)
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <infoCommand+0xa8>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d936      	bls.n	80072be <infoCommand+0x7e>
		result =ReadPortsDir();
 8007250:	f7fd fb54 	bl	80048fc <ReadPortsDir>
 8007254:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <infoCommand+0xa8>)
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	4924      	ldr	r1, [pc, #144]	; (80072ec <infoCommand+0xac>)
 800725c:	0020      	movs	r0, r4
 800725e:	f00e fa5f 	bl	8015720 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007262:	0020      	movs	r0, r4
 8007264:	f7f8 ff58 	bl	8000118 <strlen>
 8007268:	b282      	uxth	r2, r0
 800726a:	4e21      	ldr	r6, [pc, #132]	; (80072f0 <infoCommand+0xb0>)
 800726c:	7830      	ldrb	r0, [r6, #0]
 800726e:	2701      	movs	r7, #1
 8007270:	427f      	negs	r7, r7
 8007272:	9700      	str	r7, [sp, #0]
 8007274:	2332      	movs	r3, #50	; 0x32
 8007276:	0021      	movs	r1, r4
 8007278:	f008 fae8 	bl	800f84c <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 800727c:	2213      	movs	r2, #19
 800727e:	491d      	ldr	r1, [pc, #116]	; (80072f4 <infoCommand+0xb4>)
 8007280:	0020      	movs	r0, r4
 8007282:	f00e f84a 	bl	801531a <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007286:	0020      	movs	r0, r4
 8007288:	f7f8 ff46 	bl	8000118 <strlen>
 800728c:	b282      	uxth	r2, r0
 800728e:	7830      	ldrb	r0, [r6, #0]
 8007290:	9700      	str	r7, [sp, #0]
 8007292:	2332      	movs	r3, #50	; 0x32
 8007294:	0021      	movs	r1, r4
 8007296:	f008 fad9 	bl	800f84c <writePxMutex>
	DisplayTopology(PcPort);
 800729a:	7830      	ldrb	r0, [r6, #0]
 800729c:	f7fc ff48 	bl	8004130 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80072a0:	7830      	ldrb	r0, [r6, #0]
 80072a2:	f7fd f80f 	bl	80042c4 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 80072a6:	2d02      	cmp	r5, #2
 80072a8:	d00b      	beq.n	80072c2 <infoCommand+0x82>
	sprintf((char* )pcWriteBuffer," ");
 80072aa:	2202      	movs	r2, #2
 80072ac:	4912      	ldr	r1, [pc, #72]	; (80072f8 <infoCommand+0xb8>)
 80072ae:	0020      	movs	r0, r4
 80072b0:	f00e f833 	bl	801531a <memcpy>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	b003      	add	sp, #12
 80072b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 80072ba:	b672      	cpsid	i
 80072bc:	e7fe      	b.n	80072bc <infoCommand+0x7c>
	BOS_Status result =BOS_OK;
 80072be:	2500      	movs	r5, #0
 80072c0:	e7c9      	b.n	8007256 <infoCommand+0x16>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 80072c2:	2244      	movs	r2, #68	; 0x44
 80072c4:	490d      	ldr	r1, [pc, #52]	; (80072fc <infoCommand+0xbc>)
 80072c6:	0020      	movs	r0, r4
 80072c8:	f00e f827 	bl	801531a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80072cc:	0020      	movs	r0, r4
 80072ce:	f7f8 ff23 	bl	8000118 <strlen>
 80072d2:	b282      	uxth	r2, r0
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <infoCommand+0xb0>)
 80072d6:	7818      	ldrb	r0, [r3, #0]
 80072d8:	003b      	movs	r3, r7
 80072da:	9700      	str	r7, [sp, #0]
 80072dc:	3333      	adds	r3, #51	; 0x33
 80072de:	0021      	movs	r1, r4
 80072e0:	f008 fab4 	bl	800f84c <writePxMutex>
 80072e4:	e7e1      	b.n	80072aa <infoCommand+0x6a>
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	2000001c 	.word	0x2000001c
 80072ec:	0801add0 	.word	0x0801add0
 80072f0:	20000a9f 	.word	0x20000a9f
 80072f4:	0801adec 	.word	0x0801adec
 80072f8:	08019d74 	.word	0x08019d74
 80072fc:	0801ae00 	.word	0x0801ae00

08007300 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007300:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007302:	2800      	cmp	r0, #0
 8007304:	d101      	bne.n	800730a <statusCommand+0xa>
 8007306:	b672      	cpsid	i
 8007308:	e7fe      	b.n	8007308 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800730a:	2000      	movs	r0, #0
 800730c:	f7fd f844 	bl	8004398 <DisplayModuleStatus>
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd10      	pop	{r4, pc}

08007314 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	46ce      	mov	lr, r9
 8007318:	b500      	push	{lr}
 800731a:	b090      	sub	sp, #64	; 0x40
 800731c:	0004      	movs	r4, r0
 800731e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8007320:	2227      	movs	r2, #39	; 0x27
 8007322:	2100      	movs	r1, #0
 8007324:	a806      	add	r0, sp, #24
 8007326:	f00e f801 	bl	801532c <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 800732a:	220a      	movs	r2, #10
 800732c:	2100      	movs	r1, #0
 800732e:	a803      	add	r0, sp, #12
 8007330:	f00d fffc 	bl	801532c <memset>
	configASSERT(pcWriteBuffer);
 8007334:	2c00      	cmp	r4, #0
 8007336:	d101      	bne.n	800733c <groupCommand+0x28>
 8007338:	b672      	cpsid	i
 800733a:	e7fe      	b.n	800733a <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800733c:	4d59      	ldr	r5, [pc, #356]	; (80074a4 <groupCommand+0x190>)
 800733e:	002a      	movs	r2, r5
 8007340:	2101      	movs	r1, #1
 8007342:	9801      	ldr	r0, [sp, #4]
 8007344:	f008 fcdc 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 8007348:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 800734a:	682a      	ldr	r2, [r5, #0]
 800734c:	a803      	add	r0, sp, #12
 800734e:	f00e fa3c 	bl	80157ca <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8007352:	2500      	movs	r5, #0
 8007354:	e00b      	b.n	800736e <groupCommand+0x5a>
		if(!strcmp(alias,groupAlias[i])){
 8007356:	00ab      	lsls	r3, r5, #2
 8007358:	195b      	adds	r3, r3, r5
 800735a:	0059      	lsls	r1, r3, #1
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <groupCommand+0x194>)
 800735e:	18c9      	adds	r1, r1, r3
 8007360:	a803      	add	r0, sp, #12
 8007362:	f7f8 fecf 	bl	8000104 <strcmp>
 8007366:	2800      	cmp	r0, #0
 8007368:	d017      	beq.n	800739a <groupCommand+0x86>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 800736a:	3501      	adds	r5, #1
 800736c:	b2ed      	uxtb	r5, r5
 800736e:	2d09      	cmp	r5, #9
 8007370:	d9f1      	bls.n	8007356 <groupCommand+0x42>
	type =1;
 8007372:	2601      	movs	r6, #1
	count =2;
 8007374:	4b4d      	ldr	r3, [pc, #308]	; (80074ac <groupCommand+0x198>)
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 800737a:	3208      	adds	r2, #8
 800737c:	494c      	ldr	r1, [pc, #304]	; (80074b0 <groupCommand+0x19c>)
 800737e:	0020      	movs	r0, r4
 8007380:	f00d ffcb 	bl	801531a <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8007384:	4a4b      	ldr	r2, [pc, #300]	; (80074b4 <groupCommand+0x1a0>)
 8007386:	2102      	movs	r1, #2
 8007388:	9801      	ldr	r0, [sp, #4]
 800738a:	f008 fcb9 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800738e:	4b4a      	ldr	r3, [pc, #296]	; (80074b8 <groupCommand+0x1a4>)
 8007390:	6018      	str	r0, [r3, #0]
	int16_t modID =0, type =0;
 8007392:	2300      	movs	r3, #0
 8007394:	4699      	mov	r9, r3
	BOS_Status result =BOS_OK;
 8007396:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 8007398:	e00f      	b.n	80073ba <groupCommand+0xa6>
			type =0;
 800739a:	2600      	movs	r6, #0
 800739c:	e7ea      	b.n	8007374 <groupCommand+0x60>
		strcat((char* )pcWriteBuffer,module);
 800739e:	a906      	add	r1, sp, #24
 80073a0:	0020      	movs	r0, r4
 80073a2:	f00e f9dd 	bl	8015760 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 80073a6:	1c79      	adds	r1, r7, #1
 80073a8:	b249      	sxtb	r1, r1
 80073aa:	4b40      	ldr	r3, [pc, #256]	; (80074ac <groupCommand+0x198>)
 80073ac:	7019      	strb	r1, [r3, #0]
 80073ae:	4a41      	ldr	r2, [pc, #260]	; (80074b4 <groupCommand+0x1a0>)
 80073b0:	9801      	ldr	r0, [sp, #4]
 80073b2:	f008 fca5 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80073b6:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <groupCommand+0x1a4>)
 80073b8:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 80073ba:	4b3f      	ldr	r3, [pc, #252]	; (80074b8 <groupCommand+0x1a4>)
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	2900      	cmp	r1, #0
 80073c0:	d024      	beq.n	800740c <groupCommand+0xf8>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80073c2:	4b3c      	ldr	r3, [pc, #240]	; (80074b4 <groupCommand+0x1a0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4699      	mov	r9, r3
 80073c8:	af06      	add	r7, sp, #24
 80073ca:	001a      	movs	r2, r3
 80073cc:	0038      	movs	r0, r7
 80073ce:	f00e f9fc 	bl	80157ca <strncpy>
		module[xParameterStringLength] ='\0';
 80073d2:	2300      	movs	r3, #0
 80073d4:	464a      	mov	r2, r9
 80073d6:	54bb      	strb	r3, [r7, r2]
		modID =GetID(module);
 80073d8:	0038      	movs	r0, r7
 80073da:	f7fd f949 	bl	8004670 <GetID>
 80073de:	4681      	mov	r9, r0
		if(modID < 0)
 80073e0:	2800      	cmp	r0, #0
 80073e2:	db13      	blt.n	800740c <groupCommand+0xf8>
		result =AddModuleToGroup(modID,alias);
 80073e4:	b2c0      	uxtb	r0, r0
 80073e6:	a903      	add	r1, sp, #12
 80073e8:	f7fd fa0a 	bl	8004800 <AddModuleToGroup>
 80073ec:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 80073ee:	d10d      	bne.n	800740c <groupCommand+0xf8>
		if(count > 2)
 80073f0:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <groupCommand+0x198>)
 80073f2:	2700      	movs	r7, #0
 80073f4:	57df      	ldrsb	r7, [r3, r7]
 80073f6:	2f02      	cmp	r7, #2
 80073f8:	ddd1      	ble.n	800739e <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 80073fa:	0020      	movs	r0, r4
 80073fc:	f7f8 fe8c 	bl	8000118 <strlen>
 8007400:	1820      	adds	r0, r4, r0
 8007402:	2203      	movs	r2, #3
 8007404:	492d      	ldr	r1, [pc, #180]	; (80074bc <groupCommand+0x1a8>)
 8007406:	f00d ff88 	bl	801531a <memcpy>
 800740a:	e7c8      	b.n	800739e <groupCommand+0x8a>
	if(modID < 0)
 800740c:	464b      	mov	r3, r9
 800740e:	2b00      	cmp	r3, #0
 8007410:	db12      	blt.n	8007438 <groupCommand+0x124>
	else if(count == 2)
 8007412:	4b26      	ldr	r3, [pc, #152]	; (80074ac <groupCommand+0x198>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b25b      	sxtb	r3, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d017      	beq.n	800744c <groupCommand+0x138>
	else if(result == BOS_OK && type){
 800741c:	2d00      	cmp	r5, #0
 800741e:	d11b      	bne.n	8007458 <groupCommand+0x144>
 8007420:	2e00      	cmp	r6, #0
 8007422:	d019      	beq.n	8007458 <groupCommand+0x144>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007424:	aa03      	add	r2, sp, #12
 8007426:	4926      	ldr	r1, [pc, #152]	; (80074c0 <groupCommand+0x1ac>)
 8007428:	a806      	add	r0, sp, #24
 800742a:	f00e f979 	bl	8015720 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800742e:	a906      	add	r1, sp, #24
 8007430:	0020      	movs	r0, r4
 8007432:	f00e f995 	bl	8015760 <strcat>
 8007436:	e004      	b.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007438:	aa06      	add	r2, sp, #24
 800743a:	4922      	ldr	r1, [pc, #136]	; (80074c4 <groupCommand+0x1b0>)
 800743c:	0020      	movs	r0, r4
 800743e:	f00e f96f 	bl	8015720 <sprintf>
}
 8007442:	2000      	movs	r0, #0
 8007444:	b010      	add	sp, #64	; 0x40
 8007446:	bc04      	pop	{r2}
 8007448:	4691      	mov	r9, r2
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 800744c:	aa03      	add	r2, sp, #12
 800744e:	491e      	ldr	r1, [pc, #120]	; (80074c8 <groupCommand+0x1b4>)
 8007450:	0020      	movs	r0, r4
 8007452:	f00e f965 	bl	8015720 <sprintf>
 8007456:	e7f4      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_OK && !type){
 8007458:	2d00      	cmp	r5, #0
 800745a:	d10b      	bne.n	8007474 <groupCommand+0x160>
 800745c:	2e00      	cmp	r6, #0
 800745e:	d109      	bne.n	8007474 <groupCommand+0x160>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007460:	aa03      	add	r2, sp, #12
 8007462:	491a      	ldr	r1, [pc, #104]	; (80074cc <groupCommand+0x1b8>)
 8007464:	a806      	add	r0, sp, #24
 8007466:	f00e f95b 	bl	8015720 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800746a:	a906      	add	r1, sp, #24
 800746c:	0020      	movs	r0, r4
 800746e:	f00e f977 	bl	8015760 <strcat>
 8007472:	e7e6      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_ERR_Keyword)
 8007474:	2d06      	cmp	r5, #6
 8007476:	d007      	beq.n	8007488 <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 8007478:	2d07      	cmp	r5, #7
 800747a:	d10b      	bne.n	8007494 <groupCommand+0x180>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800747c:	aa03      	add	r2, sp, #12
 800747e:	4914      	ldr	r1, [pc, #80]	; (80074d0 <groupCommand+0x1bc>)
 8007480:	0020      	movs	r0, r4
 8007482:	f00e f94d 	bl	8015720 <sprintf>
 8007486:	e7dc      	b.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007488:	aa03      	add	r2, sp, #12
 800748a:	4912      	ldr	r1, [pc, #72]	; (80074d4 <groupCommand+0x1c0>)
 800748c:	0020      	movs	r0, r4
 800748e:	f00e f947 	bl	8015720 <sprintf>
 8007492:	e7d6      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_ERR_ExistingCmd)
 8007494:	2d08      	cmp	r5, #8
 8007496:	d1d4      	bne.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007498:	aa03      	add	r2, sp, #12
 800749a:	490f      	ldr	r1, [pc, #60]	; (80074d8 <groupCommand+0x1c4>)
 800749c:	0020      	movs	r0, r4
 800749e:	f00e f93f 	bl	8015720 <sprintf>
 80074a2:	e7ce      	b.n	8007442 <groupCommand+0x12e>
 80074a4:	200012a4 	.word	0x200012a4
 80074a8:	20000e4c 	.word	0x20000e4c
 80074ac:	2000126a 	.word	0x2000126a
 80074b0:	0801abf0 	.word	0x0801abf0
 80074b4:	20001298 	.word	0x20001298
 80074b8:	2000126c 	.word	0x2000126c
 80074bc:	0801abfc 	.word	0x0801abfc
 80074c0:	0801ac50 	.word	0x0801ac50
 80074c4:	0801ac00 	.word	0x0801ac00
 80074c8:	0801ac24 	.word	0x0801ac24
 80074cc:	0801ac6c 	.word	0x0801ac6c
 80074d0:	0801accc 	.word	0x0801accc
 80074d4:	0801ac8c 	.word	0x0801ac8c
 80074d8:	0801ad00 	.word	0x0801ad00

080074dc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	0004      	movs	r4, r0
 80074e0:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d101      	bne.n	80074ea <nameCommand+0xe>
 80074e6:	b672      	cpsid	i
 80074e8:	e7fe      	b.n	80074e8 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80074ea:	4d1c      	ldr	r5, [pc, #112]	; (800755c <nameCommand+0x80>)
 80074ec:	002a      	movs	r2, r5
 80074ee:	2101      	movs	r1, #1
 80074f0:	f008 fc06 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80074f4:	0001      	movs	r1, r0
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <nameCommand+0x84>)
 80074f8:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	dd01      	ble.n	8007504 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007500:	2300      	movs	r3, #0
 8007502:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <nameCommand+0x88>)
 8007506:	7818      	ldrb	r0, [r3, #0]
 8007508:	f7fd f914 	bl	8004734 <NameModule>
	if(result == BOS_OK)
 800750c:	2800      	cmp	r0, #0
 800750e:	d007      	beq.n	8007520 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007510:	2806      	cmp	r0, #6
 8007512:	d00e      	beq.n	8007532 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007514:	2807      	cmp	r0, #7
 8007516:	d013      	beq.n	8007540 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007518:	2808      	cmp	r0, #8
 800751a:	d018      	beq.n	800754e <nameCommand+0x72>
}
 800751c:	2000      	movs	r0, #0
 800751e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007520:	4b10      	ldr	r3, [pc, #64]	; (8007564 <nameCommand+0x88>)
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <nameCommand+0x84>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	490f      	ldr	r1, [pc, #60]	; (8007568 <nameCommand+0x8c>)
 800752a:	0020      	movs	r0, r4
 800752c:	f00e f8f8 	bl	8015720 <sprintf>
 8007530:	e7f4      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <nameCommand+0x84>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	490d      	ldr	r1, [pc, #52]	; (800756c <nameCommand+0x90>)
 8007538:	0020      	movs	r0, r4
 800753a:	f00e f8f1 	bl	8015720 <sprintf>
 800753e:	e7ed      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <nameCommand+0x84>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	490a      	ldr	r1, [pc, #40]	; (8007570 <nameCommand+0x94>)
 8007546:	0020      	movs	r0, r4
 8007548:	f00e f8ea 	bl	8015720 <sprintf>
 800754c:	e7e6      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <nameCommand+0x84>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4908      	ldr	r1, [pc, #32]	; (8007574 <nameCommand+0x98>)
 8007554:	0020      	movs	r0, r4
 8007556:	f00e f8e3 	bl	8015720 <sprintf>
 800755a:	e7df      	b.n	800751c <nameCommand+0x40>
 800755c:	200012a0 	.word	0x200012a0
 8007560:	20001270 	.word	0x20001270
 8007564:	20001066 	.word	0x20001066
 8007568:	0801ae68 	.word	0x0801ae68
 800756c:	0801ac8c 	.word	0x0801ac8c
 8007570:	0801accc 	.word	0x0801accc
 8007574:	0801ad00 	.word	0x0801ad00

08007578 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	b085      	sub	sp, #20
 800757c:	1e04      	subs	r4, r0, #0
 800757e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007580:	d101      	bne.n	8007586 <bootloaderUpdateCommand+0xe>
 8007582:	b672      	cpsid	i
 8007584:	e7fe      	b.n	8007584 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007586:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <bootloaderUpdateCommand+0x13c>)
 8007588:	2101      	movs	r1, #1
 800758a:	9803      	ldr	r0, [sp, #12]
 800758c:	f008 fbb8 	bl	800fd00 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007590:	2800      	cmp	r0, #0
 8007592:	d040      	beq.n	8007616 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007594:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <bootloaderUpdateCommand+0x13c>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4947      	ldr	r1, [pc, #284]	; (80076b8 <bootloaderUpdateCommand+0x140>)
 800759a:	f00e f905 	bl	80157a8 <strncmp>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d000      	beq.n	80075a4 <bootloaderUpdateCommand+0x2c>
 80075a2:	e080      	b.n	80076a6 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80075a4:	4a45      	ldr	r2, [pc, #276]	; (80076bc <bootloaderUpdateCommand+0x144>)
 80075a6:	2102      	movs	r1, #2
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f008 fba9 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80075ae:	4f44      	ldr	r7, [pc, #272]	; (80076c0 <bootloaderUpdateCommand+0x148>)
 80075b0:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80075b2:	4a44      	ldr	r2, [pc, #272]	; (80076c4 <bootloaderUpdateCommand+0x14c>)
 80075b4:	2103      	movs	r1, #3
 80075b6:	9803      	ldr	r0, [sp, #12]
 80075b8:	f008 fba2 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 80075bc:	4b42      	ldr	r3, [pc, #264]	; (80076c8 <bootloaderUpdateCommand+0x150>)
 80075be:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 80075c0:	6838      	ldr	r0, [r7, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	56c3      	ldrsb	r3, [r0, r3]
 80075c6:	2b23      	cmp	r3, #35	; 0x23
 80075c8:	d04f      	beq.n	800766a <bootloaderUpdateCommand+0xf2>
				result =BOS_ERR_WrongValue;
 80075ca:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 80075cc:	4b3e      	ldr	r3, [pc, #248]	; (80076c8 <bootloaderUpdateCommand+0x150>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	56c3      	ldrsb	r3, [r0, r3]
 80075d4:	2b70      	cmp	r3, #112	; 0x70
 80075d6:	d04e      	beq.n	8007676 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 80075d8:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80075da:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <bootloaderUpdateCommand+0x154>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	42b3      	cmp	r3, r6
 80075e0:	d04e      	beq.n	8007680 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 80075e2:	4b3b      	ldr	r3, [pc, #236]	; (80076d0 <bootloaderUpdateCommand+0x158>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 80075e8:	4b3a      	ldr	r3, [pc, #232]	; (80076d4 <bootloaderUpdateCommand+0x15c>)
 80075ea:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80075ec:	3201      	adds	r2, #1
 80075ee:	211a      	movs	r1, #26
 80075f0:	0030      	movs	r0, r6
 80075f2:	f002 fa93 	bl	8009b1c <SendMessageToModule>
				osDelay(100);
 80075f6:	2064      	movs	r0, #100	; 0x64
 80075f8:	f008 fa5c 	bl	800fab4 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80075fc:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	4b32      	ldr	r3, [pc, #200]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007602:	7818      	ldrb	r0, [r3, #0]
 8007604:	002b      	movs	r3, r5
 8007606:	0031      	movs	r1, r6
 8007608:	f7fc fd1c 	bl	8004044 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800760c:	2f68      	cmp	r7, #104	; 0x68
 800760e:	d04a      	beq.n	80076a6 <bootloaderUpdateCommand+0x12e>
}
 8007610:	2000      	movs	r0, #0
 8007612:	b005      	add	sp, #20
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007616:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	4930      	ldr	r1, [pc, #192]	; (80076dc <bootloaderUpdateCommand+0x164>)
 800761c:	0020      	movs	r0, r4
 800761e:	f00e f87f 	bl	8015720 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007622:	4b2f      	ldr	r3, [pc, #188]	; (80076e0 <bootloaderUpdateCommand+0x168>)
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	0020      	movs	r0, r4
 8007628:	f00e f89a 	bl	8015760 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800762c:	0020      	movs	r0, r4
 800762e:	f7f8 fd73 	bl	8000118 <strlen>
 8007632:	b282      	uxth	r2, r0
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 8007636:	7818      	ldrb	r0, [r3, #0]
 8007638:	2301      	movs	r3, #1
 800763a:	425b      	negs	r3, r3
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	3333      	adds	r3, #51	; 0x33
 8007640:	0021      	movs	r1, r4
 8007642:	f008 f903 	bl	800f84c <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <bootloaderUpdateCommand+0x16c>)
 8007648:	4a27      	ldr	r2, [pc, #156]	; (80076e8 <bootloaderUpdateCommand+0x170>)
 800764a:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 800764c:	4b27      	ldr	r3, [pc, #156]	; (80076ec <bootloaderUpdateCommand+0x174>)
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007652:	200a      	movs	r0, #10
 8007654:	f008 fa2e 	bl	800fab4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	4b24      	ldr	r3, [pc, #144]	; (80076f0 <bootloaderUpdateCommand+0x178>)
 800765e:	4a25      	ldr	r2, [pc, #148]	; (80076f4 <bootloaderUpdateCommand+0x17c>)
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	e7fd      	b.n	8007666 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800766a:	3001      	adds	r0, #1
 800766c:	f00d fbcb 	bl	8014e06 <atol>
 8007670:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007672:	2700      	movs	r7, #0
 8007674:	e7aa      	b.n	80075cc <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007676:	3001      	adds	r0, #1
 8007678:	f00d fbc5 	bl	8014e06 <atol>
 800767c:	b2c5      	uxtb	r5, r0
 800767e:	e7ac      	b.n	80075da <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007680:	2100      	movs	r1, #0
 8007682:	9100      	str	r1, [sp, #0]
 8007684:	2319      	movs	r3, #25
 8007686:	000a      	movs	r2, r1
 8007688:	0028      	movs	r0, r5
 800768a:	f002 f837 	bl	80096fc <SendMessageFromPort>
				osDelay(100);
 800768e:	2064      	movs	r0, #100	; 0x64
 8007690:	f008 fa10 	bl	800fab4 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007696:	7818      	ldrb	r0, [r3, #0]
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	002b      	movs	r3, r5
 800769e:	0001      	movs	r1, r0
 80076a0:	f7fc fcd0 	bl	8004044 <remoteBootloaderUpdate>
 80076a4:	e7b2      	b.n	800760c <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80076a6:	220f      	movs	r2, #15
 80076a8:	4913      	ldr	r1, [pc, #76]	; (80076f8 <bootloaderUpdateCommand+0x180>)
 80076aa:	0020      	movs	r0, r4
 80076ac:	f00d fe35 	bl	801531a <memcpy>
 80076b0:	e7ae      	b.n	8007610 <bootloaderUpdateCommand+0x98>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	2000129c 	.word	0x2000129c
 80076b8:	0801a928 	.word	0x0801a928
 80076bc:	200012a8 	.word	0x200012a8
 80076c0:	20001280 	.word	0x20001280
 80076c4:	200012ac 	.word	0x200012ac
 80076c8:	20001288 	.word	0x20001288
 80076cc:	20001066 	.word	0x20001066
 80076d0:	20006da0 	.word	0x20006da0
 80076d4:	20000f28 	.word	0x20000f28
 80076d8:	20000a9f 	.word	0x20000a9f
 80076dc:	0801a908 	.word	0x0801a908
 80076e0:	20000074 	.word	0x20000074
 80076e4:	20007ff0 	.word	0x20007ff0
 80076e8:	deadbeef 	.word	0xdeadbeef
 80076ec:	20000ee4 	.word	0x20000ee4
 80076f0:	e000ed00 	.word	0xe000ed00
 80076f4:	05fa0004 	.word	0x05fa0004
 80076f8:	0801a9e8 	.word	0x0801a9e8

080076fc <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80076fc:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 80076fe:	2800      	cmp	r0, #0
 8007700:	d01e      	beq.n	8007740 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <pingCommand+0x5c>)
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	0093      	lsls	r3, r2, #2
 8007708:	189b      	adds	r3, r3, r2
 800770a:	0059      	lsls	r1, r3, #1
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <pingCommand+0x60>)
 800770e:	5ccb      	ldrb	r3, [r1, r3]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d117      	bne.n	8007744 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007714:	4912      	ldr	r1, [pc, #72]	; (8007760 <pingCommand+0x64>)
 8007716:	f00e f803 	bl	8015720 <sprintf>
	RTOS_IND_blink(200);
 800771a:	2580      	movs	r5, #128	; 0x80
 800771c:	012d      	lsls	r5, r5, #4
 800771e:	2490      	movs	r4, #144	; 0x90
 8007720:	05e4      	lsls	r4, r4, #23
 8007722:	2201      	movs	r2, #1
 8007724:	0029      	movs	r1, r5
 8007726:	0020      	movs	r0, r4
 8007728:	f00b fe45 	bl	80133b6 <HAL_GPIO_WritePin>
 800772c:	20c8      	movs	r0, #200	; 0xc8
 800772e:	f008 f9c1 	bl	800fab4 <osDelay>
 8007732:	2200      	movs	r2, #0
 8007734:	0029      	movs	r1, r5
 8007736:	0020      	movs	r0, r4
 8007738:	f00b fe3d 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800773c:	2000      	movs	r0, #0
 800773e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007740:	b672      	cpsid	i
 8007742:	e7fe      	b.n	8007742 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007744:	0091      	lsls	r1, r2, #2
 8007746:	1889      	adds	r1, r1, r2
 8007748:	004b      	lsls	r3, r1, #1
 800774a:	4904      	ldr	r1, [pc, #16]	; (800775c <pingCommand+0x60>)
 800774c:	185b      	adds	r3, r3, r1
 800774e:	4905      	ldr	r1, [pc, #20]	; (8007764 <pingCommand+0x68>)
 8007750:	f00d ffe6 	bl	8015720 <sprintf>
 8007754:	e7e1      	b.n	800771a <pingCommand+0x1e>
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	20001066 	.word	0x20001066
 800775c:	20000f58 	.word	0x20000f58
 8007760:	0801aed8 	.word	0x0801aed8
 8007764:	0801aeec 	.word	0x0801aeec

08007768 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007768:	b510      	push	{r4, lr}
 800776a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800776c:	d101      	bne.n	8007772 <prvRunTimeStatsCommand+0xa>
 800776e:	b672      	cpsid	i
 8007770:	e7fe      	b.n	8007770 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007772:	2241      	movs	r2, #65	; 0x41
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <prvRunTimeStatsCommand+0x20>)
 8007776:	f00d fdd0 	bl	801531a <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800777a:	0020      	movs	r0, r4
 800777c:	3040      	adds	r0, #64	; 0x40
 800777e:	f009 fd2b 	bl	80111d8 <vTaskGetRunTimeStats>
}
 8007782:	2000      	movs	r0, #0
 8007784:	bd10      	pop	{r4, pc}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	0801af18 	.word	0x0801af18

0800778c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800778c:	b510      	push	{r4, lr}
 800778e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007790:	d101      	bne.n	8007796 <prvTaskStatsCommand+0xa>
 8007792:	b672      	cpsid	i
 8007794:	e7fe      	b.n	8007794 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007796:	2250      	movs	r2, #80	; 0x50
 8007798:	4904      	ldr	r1, [pc, #16]	; (80077ac <prvTaskStatsCommand+0x20>)
 800779a:	f00d fdbe 	bl	801531a <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800779e:	0020      	movs	r0, r4
 80077a0:	304f      	adds	r0, #79	; 0x4f
 80077a2:	f009 fcbf 	bl	8011124 <vTaskList>
}
 80077a6:	2000      	movs	r0, #0
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	0801af6c 	.word	0x0801af6c

080077b0 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d101      	bne.n	80077b8 <resetCommand+0x8>
 80077b4:	b672      	cpsid	i
 80077b6:	e7fe      	b.n	80077b6 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <resetCommand+0x1c>)
 80077be:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <resetCommand+0x20>)
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	e7fd      	b.n	80077c6 <resetCommand+0x16>
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	e000ed00 	.word	0xe000ed00
 80077d0:	05fa0004 	.word	0x05fa0004

080077d4 <RegisterUserCLICommands>:
}
 80077d4:	4770      	bx	lr
	...

080077d8 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80077d8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80077da:	4835      	ldr	r0, [pc, #212]	; (80078b0 <vRegisterCLICommands+0xd8>)
 80077dc:	f008 fa0a 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80077e0:	4834      	ldr	r0, [pc, #208]	; (80078b4 <vRegisterCLICommands+0xdc>)
 80077e2:	f008 fa07 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80077e6:	4834      	ldr	r0, [pc, #208]	; (80078b8 <vRegisterCLICommands+0xe0>)
 80077e8:	f008 fa04 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80077ec:	4833      	ldr	r0, [pc, #204]	; (80078bc <vRegisterCLICommands+0xe4>)
 80077ee:	f008 fa01 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80077f2:	4833      	ldr	r0, [pc, #204]	; (80078c0 <vRegisterCLICommands+0xe8>)
 80077f4:	f008 f9fe 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80077f8:	4832      	ldr	r0, [pc, #200]	; (80078c4 <vRegisterCLICommands+0xec>)
 80077fa:	f008 f9fb 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80077fe:	4832      	ldr	r0, [pc, #200]	; (80078c8 <vRegisterCLICommands+0xf0>)
 8007800:	f008 f9f8 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007804:	4831      	ldr	r0, [pc, #196]	; (80078cc <vRegisterCLICommands+0xf4>)
 8007806:	f008 f9f5 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800780a:	4831      	ldr	r0, [pc, #196]	; (80078d0 <vRegisterCLICommands+0xf8>)
 800780c:	f008 f9f2 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007810:	4830      	ldr	r0, [pc, #192]	; (80078d4 <vRegisterCLICommands+0xfc>)
 8007812:	f008 f9ef 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007816:	4830      	ldr	r0, [pc, #192]	; (80078d8 <vRegisterCLICommands+0x100>)
 8007818:	f008 f9ec 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800781c:	482f      	ldr	r0, [pc, #188]	; (80078dc <vRegisterCLICommands+0x104>)
 800781e:	f008 f9e9 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007822:	482f      	ldr	r0, [pc, #188]	; (80078e0 <vRegisterCLICommands+0x108>)
 8007824:	f008 f9e6 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007828:	482e      	ldr	r0, [pc, #184]	; (80078e4 <vRegisterCLICommands+0x10c>)
 800782a:	f008 f9e3 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800782e:	482e      	ldr	r0, [pc, #184]	; (80078e8 <vRegisterCLICommands+0x110>)
 8007830:	f008 f9e0 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007834:	482d      	ldr	r0, [pc, #180]	; (80078ec <vRegisterCLICommands+0x114>)
 8007836:	f008 f9dd 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800783a:	482d      	ldr	r0, [pc, #180]	; (80078f0 <vRegisterCLICommands+0x118>)
 800783c:	f008 f9da 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007840:	482c      	ldr	r0, [pc, #176]	; (80078f4 <vRegisterCLICommands+0x11c>)
 8007842:	f008 f9d7 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007846:	482c      	ldr	r0, [pc, #176]	; (80078f8 <vRegisterCLICommands+0x120>)
 8007848:	f008 f9d4 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800784c:	482b      	ldr	r0, [pc, #172]	; (80078fc <vRegisterCLICommands+0x124>)
 800784e:	f008 f9d1 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007852:	482b      	ldr	r0, [pc, #172]	; (8007900 <vRegisterCLICommands+0x128>)
 8007854:	f008 f9ce 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007858:	482a      	ldr	r0, [pc, #168]	; (8007904 <vRegisterCLICommands+0x12c>)
 800785a:	f008 f9cb 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800785e:	482a      	ldr	r0, [pc, #168]	; (8007908 <vRegisterCLICommands+0x130>)
 8007860:	f008 f9c8 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007864:	4829      	ldr	r0, [pc, #164]	; (800790c <vRegisterCLICommands+0x134>)
 8007866:	f008 f9c5 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800786a:	4829      	ldr	r0, [pc, #164]	; (8007910 <vRegisterCLICommands+0x138>)
 800786c:	f008 f9c2 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007870:	4828      	ldr	r0, [pc, #160]	; (8007914 <vRegisterCLICommands+0x13c>)
 8007872:	f008 f9bf 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007876:	4828      	ldr	r0, [pc, #160]	; (8007918 <vRegisterCLICommands+0x140>)
 8007878:	f008 f9bc 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800787c:	4827      	ldr	r0, [pc, #156]	; (800791c <vRegisterCLICommands+0x144>)
 800787e:	f008 f9b9 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007882:	4827      	ldr	r0, [pc, #156]	; (8007920 <vRegisterCLICommands+0x148>)
 8007884:	f008 f9b6 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007888:	4826      	ldr	r0, [pc, #152]	; (8007924 <vRegisterCLICommands+0x14c>)
 800788a:	f008 f9b3 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800788e:	4826      	ldr	r0, [pc, #152]	; (8007928 <vRegisterCLICommands+0x150>)
 8007890:	f008 f9b0 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007894:	4825      	ldr	r0, [pc, #148]	; (800792c <vRegisterCLICommands+0x154>)
 8007896:	f008 f9ad 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800789a:	4825      	ldr	r0, [pc, #148]	; (8007930 <vRegisterCLICommands+0x158>)
 800789c:	f008 f9aa 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <vRegisterCLICommands+0x15c>)
 80078a2:	2223      	movs	r2, #35	; 0x23
 80078a4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80078a6:	f004 fb45 	bl	800bf34 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80078aa:	f7ff ff93 	bl	80077d4 <RegisterUserCLICommands>
}
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	0801afbc 	.word	0x0801afbc
 80078b4:	0801af5c 	.word	0x0801af5c
 80078b8:	0801af08 	.word	0x0801af08
 80078bc:	0801a92c 	.word	0x0801a92c
 80078c0:	0801aab4 	.word	0x0801aab4
 80078c4:	0801b004 	.word	0x0801b004
 80078c8:	0801ae80 	.word	0x0801ae80
 80078cc:	0801ad40 	.word	0x0801ad40
 80078d0:	0801b4b4 	.word	0x0801b4b4
 80078d4:	0801ae44 	.word	0x0801ae44
 80078d8:	0801b0c0 	.word	0x0801b0c0
 80078dc:	0801a8f8 	.word	0x0801a8f8
 80078e0:	0801aff4 	.word	0x0801aff4
 80078e4:	0801b314 	.word	0x0801b314
 80078e8:	0801abe0 	.word	0x0801abe0
 80078ec:	0801aa38 	.word	0x0801aa38
 80078f0:	0801c4d4 	.word	0x0801c4d4
 80078f4:	0801a9a0 	.word	0x0801a9a0
 80078f8:	0801b10c 	.word	0x0801b10c
 80078fc:	0801c548 	.word	0x0801c548
 8007900:	0801adc0 	.word	0x0801adc0
 8007904:	0801aae4 	.word	0x0801aae4
 8007908:	0801b4a4 	.word	0x0801b4a4
 800790c:	0801a87c 	.word	0x0801a87c
 8007910:	0801aec8 	.word	0x0801aec8
 8007914:	0801aaa4 	.word	0x0801aaa4
 8007918:	0801a978 	.word	0x0801a978
 800791c:	0801c520 	.word	0x0801c520
 8007920:	0801c468 	.word	0x0801c468
 8007924:	0801a77c 	.word	0x0801a77c
 8007928:	0801a7fc 	.word	0x0801a7fc
 800792c:	0801a834 	.word	0x0801a834
 8007930:	0801a78c 	.word	0x0801a78c
 8007934:	20006d24 	.word	0x20006d24

08007938 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 8007938:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800793a:	1e45      	subs	r5, r0, #1
 800793c:	00ec      	lsls	r4, r5, #3
 800793e:	1b63      	subs	r3, r4, r5
 8007940:	00d8      	lsls	r0, r3, #3
 8007942:	4e05      	ldr	r6, [pc, #20]	; (8007958 <StopMsgDMA+0x20>)
 8007944:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007946:	f00a fe5e 	bl	8012606 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	00e3      	lsls	r3, r4, #3
 800794e:	599b      	ldr	r3, [r3, r6]
 8007950:	2200      	movs	r2, #0
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	20001b78 	.word	0x20001b78

0800795c <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 800795c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 800795e:	1e44      	subs	r4, r0, #1
 8007960:	00e5      	lsls	r5, r4, #3
 8007962:	1b2b      	subs	r3, r5, r4
 8007964:	00d8      	lsls	r0, r3, #3
 8007966:	4e07      	ldr	r6, [pc, #28]	; (8007984 <StopStreamDMA+0x28>)
 8007968:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800796a:	f00a fe4c 	bl	8012606 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800796e:	1b2d      	subs	r5, r5, r4
 8007970:	00eb      	lsls	r3, r5, #3
 8007972:	599a      	ldr	r2, [r3, r6]
 8007974:	2300      	movs	r3, #0
 8007976:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007978:	00a4      	lsls	r4, r4, #2
 800797a:	4a03      	ldr	r2, [pc, #12]	; (8007988 <StopStreamDMA+0x2c>)
 800797c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800797e:	4a03      	ldr	r2, [pc, #12]	; (800798c <StopStreamDMA+0x30>)
 8007980:	50a3      	str	r3, [r4, r2]
	
}
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	20001d70 	.word	0x20001d70
 8007988:	20001438 	.word	0x20001438
 800798c:	20001460 	.word	0x20001460

08007990 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007990:	b510      	push	{r4, lr}
 8007992:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007994:	f7ff ffd0 	bl	8007938 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007998:	3c01      	subs	r4, #1
 800799a:	00e3      	lsls	r3, r4, #3
 800799c:	1b19      	subs	r1, r3, r4
 800799e:	00ca      	lsls	r2, r1, #3
 80079a0:	4903      	ldr	r1, [pc, #12]	; (80079b0 <SwitchMsgDMAToStream+0x20>)
 80079a2:	5851      	ldr	r1, [r2, r1]
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <SwitchMsgDMAToStream+0x24>)
 80079a6:	18d0      	adds	r0, r2, r3
 80079a8:	f005 ff96 	bl	800d8d8 <DMA_STREAM_CH_Init>
}
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20001b78 	.word	0x20001b78
 80079b4:	20001d70 	.word	0x20001d70

080079b8 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80079b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ba:	b083      	sub	sp, #12
 80079bc:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80079be:	f7ff ffcd 	bl	800795c <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80079c2:	9401      	str	r4, [sp, #4]
 80079c4:	3c01      	subs	r4, #1
 80079c6:	00e7      	lsls	r7, r4, #3
 80079c8:	1b3b      	subs	r3, r7, r4
 80079ca:	00dd      	lsls	r5, r3, #3
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <SwitchStreamDMAToMsg+0x54>)
 80079ce:	18ed      	adds	r5, r5, r3
 80079d0:	4e0f      	ldr	r6, [pc, #60]	; (8007a10 <SwitchStreamDMAToMsg+0x58>)
 80079d2:	1b3a      	subs	r2, r7, r4
 80079d4:	00d3      	lsls	r3, r2, #3
 80079d6:	5999      	ldr	r1, [r3, r6]
 80079d8:	0028      	movs	r0, r5
 80079da:	f005 ff07 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80079de:	1b3a      	subs	r2, r7, r4
 80079e0:	00d3      	lsls	r3, r2, #3
 80079e2:	18f3      	adds	r3, r6, r3
 80079e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079e6:	f004 fadf 	bl	800bfa8 <GetPort>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <SwitchStreamDMAToMsg+0x5c>)
 80079ee:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 80079f0:	1b3f      	subs	r7, r7, r4
 80079f2:	00fa      	lsls	r2, r7, #3
 80079f4:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port - 1] =0;
 80079f6:	00a4      	lsls	r4, r4, #2
 80079f8:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <SwitchStreamDMAToMsg+0x60>)
 80079fa:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	f007 ff07 	bl	800f810 <GetUart>
 8007a02:	0029      	movs	r1, r5
 8007a04:	f006 fc62 	bl	800e2cc <DMA_MSG_RX_Setup>
	
}
 8007a08:	b003      	add	sp, #12
 8007a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0c:	20001b78 	.word	0x20001b78
 8007a10:	20001d70 	.word	0x20001d70
 8007a14:	200010e0 	.word	0x200010e0
 8007a18:	2000144c 	.word	0x2000144c

08007a1c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	0005      	movs	r5, r0
 8007a20:	000e      	movs	r6, r1
 8007a22:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007a24:	f004 fac0 	bl	800bfa8 <GetPort>
 8007a28:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <StartDMAstream+0x48>)
 8007a2c:	5c1b      	ldrb	r3, [r3, r0]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d901      	bls.n	8007a36 <StartDMAstream+0x1a>
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d113      	bne.n	8007a5e <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 8007a36:	0020      	movs	r0, r4
 8007a38:	f7ff ffaa 	bl	8007990 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007a3c:	1e63      	subs	r3, r4, #1
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <StartDMAstream+0x4c>)
 8007a42:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007a44:	4a07      	ldr	r2, [pc, #28]	; (8007a64 <StartDMAstream+0x48>)
 8007a46:	2102      	movs	r1, #2
 8007a48:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007a4a:	4a08      	ldr	r2, [pc, #32]	; (8007a6c <StartDMAstream+0x50>)
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007a50:	003a      	movs	r2, r7
 8007a52:	0031      	movs	r1, r6
 8007a54:	0028      	movs	r0, r5
 8007a56:	f006 fc97 	bl	800e388 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007a5a:	2000      	movs	r0, #0
}
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007a5e:	2017      	movs	r0, #23
 8007a60:	e7fc      	b.n	8007a5c <StartDMAstream+0x40>
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	200010e0 	.word	0x200010e0
 8007a68:	2000144c 	.word	0x2000144c
 8007a6c:	20001438 	.word	0x20001438

08007a70 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007a74:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <DMA_IRQHandler+0x54>)
 8007a76:	5c1b      	ldrb	r3, [r3, r0]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d008      	beq.n	8007a8e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007a7c:	3c01      	subs	r4, #1
 8007a7e:	00e3      	lsls	r3, r4, #3
 8007a80:	1b1c      	subs	r4, r3, r4
 8007a82:	00e0      	lsls	r0, r4, #3
 8007a84:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <DMA_IRQHandler+0x58>)
 8007a86:	18c0      	adds	r0, r0, r3
 8007a88:	f00a fde6 	bl	8012658 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007a8e:	1e45      	subs	r5, r0, #1
 8007a90:	00eb      	lsls	r3, r5, #3
 8007a92:	1b5b      	subs	r3, r3, r5
 8007a94:	00d8      	lsls	r0, r3, #3
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <DMA_IRQHandler+0x5c>)
 8007a98:	18c0      	adds	r0, r0, r3
 8007a9a:	f00a fddd 	bl	8012658 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007a9e:	00aa      	lsls	r2, r5, #2
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <DMA_IRQHandler+0x60>)
 8007aa2:	58d3      	ldr	r3, [r2, r3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <DMA_IRQHandler+0x42>
			++dmaStreamCount[port - 1];
 8007aa8:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <DMA_IRQHandler+0x64>)
 8007aaa:	0010      	movs	r0, r2
 8007aac:	5852      	ldr	r2, [r2, r1]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	5042      	str	r2, [r0, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007ab2:	00ad      	lsls	r5, r5, #2
 8007ab4:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <DMA_IRQHandler+0x64>)
 8007ab6:	58aa      	ldr	r2, [r5, r2]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d8e7      	bhi.n	8007a8c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007abc:	0020      	movs	r0, r4
 8007abe:	f7ff ff4d 	bl	800795c <StopStreamDMA>
}
 8007ac2:	e7e3      	b.n	8007a8c <DMA_IRQHandler+0x1c>
 8007ac4:	200010e0 	.word	0x200010e0
 8007ac8:	20001b78 	.word	0x20001b78
 8007acc:	20001d70 	.word	0x20001d70
 8007ad0:	20001460 	.word	0x20001460
 8007ad4:	20001438 	.word	0x20001438

08007ad8 <ResetUartORE>:
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007ad8:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <ResetUartORE+0x1c>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	2308      	movs	r3, #8
 8007ade:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007ae0:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <ResetUartORE+0x20>)
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007ae6:	4a05      	ldr	r2, [pc, #20]	; (8007afc <ResetUartORE+0x24>)
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007aec:	4a04      	ldr	r2, [pc, #16]	; (8007b00 <ResetUartORE+0x28>)
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	6213      	str	r3, [r2, #32]
#endif
}
 8007af2:	4770      	bx	lr
 8007af4:	20007104 	.word	0x20007104
 8007af8:	20006ec4 	.word	0x20006ec4
 8007afc:	20006f38 	.word	0x20006f38
 8007b00:	20007020 	.word	0x20007020

08007b04 <EE_FindValidPage>:
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <EE_FindValidPage+0x50>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b0a:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <EE_FindValidPage+0x54>)
 8007b0c:	8812      	ldrh	r2, [r2, #0]
 8007b0e:	b292      	uxth	r2, r2
	
	/* Write or read operation */
	switch(Operation){
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d00f      	beq.n	8007b34 <EE_FindValidPage+0x30>
 8007b14:	2801      	cmp	r0, #1
 8007b16:	d113      	bne.n	8007b40 <EE_FindValidPage+0x3c>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	d104      	bne.n	8007b26 <EE_FindValidPage+0x22>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 8007b1c:	490f      	ldr	r1, [pc, #60]	; (8007b5c <EE_FindValidPage+0x58>)
 8007b1e:	428b      	cmp	r3, r1
 8007b20:	d111      	bne.n	8007b46 <EE_FindValidPage+0x42>
					return PAGEA; /* PageA valid */
 8007b22:	0013      	movs	r3, r2
 8007b24:	e00d      	b.n	8007b42 <EE_FindValidPage+0x3e>
				}
				else{
					return PAGEB; /* PageB valid */
				}
			}
			else if(PageStatusA == VALID_PAGE){
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 8007b2a:	490c      	ldr	r1, [pc, #48]	; (8007b5c <EE_FindValidPage+0x58>)
 8007b2c:	428a      	cmp	r2, r1
 8007b2e:	d108      	bne.n	8007b42 <EE_FindValidPage+0x3e>
					return PAGEB; /* PageB valid */
 8007b30:	3302      	adds	r3, #2
 8007b32:	e006      	b.n	8007b42 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <EE_FindValidPage+0x3e>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	d108      	bne.n	8007b4e <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e000      	b.n	8007b42 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		default:
			return PAGEA; /* PageA valid */
 8007b40:	2300      	movs	r3, #0
	}
}
 8007b42:	0018      	movs	r0, r3
 8007b44:	4770      	bx	lr
					return PAGEB; /* PageB valid */
 8007b46:	2302      	movs	r3, #2
 8007b48:	e7fb      	b.n	8007b42 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007b4a:	23ab      	movs	r3, #171	; 0xab
 8007b4c:	e7f9      	b.n	8007b42 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007b4e:	23ab      	movs	r3, #171	; 0xab
 8007b50:	e7f7      	b.n	8007b42 <EE_FindValidPage+0x3e>
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	0801e000 	.word	0x0801e000
 8007b58:	0801f000 	.word	0x0801f000
 8007b5c:	0000eeee 	.word	0x0000eeee

08007b60 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	0005      	movs	r5, r0
 8007b64:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007b66:	f00b f9c3 	bl	8012ef0 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	f7ff ffca 	bl	8007b04 <EE_FindValidPage>
 8007b70:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 8007b72:	28ab      	cmp	r0, #171	; 0xab
 8007b74:	d03d      	beq.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007b76:	4b20      	ldr	r3, [pc, #128]	; (8007bf8 <EE_VerifyPageFullWriteVariable+0x98>)
 8007b78:	18c4      	adds	r4, r0, r3
 8007b7a:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007b7c:	3002      	adds	r0, #2
 8007b7e:	02c0      	lsls	r0, r0, #11
 8007b80:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <EE_VerifyPageFullWriteVariable+0x9c>)
 8007b82:	469c      	mov	ip, r3
 8007b84:	4460      	add	r0, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 8007b86:	4284      	cmp	r4, r0
 8007b88:	d230      	bcs.n	8007bec <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007b90:	3404      	adds	r4, #4
 8007b92:	e7f8      	b.n	8007b86 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007b94:	0032      	movs	r2, r6
 8007b96:	2300      	movs	r3, #0
 8007b98:	0021      	movs	r1, r4
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	f00b f9f4 	bl	8012f88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba0:	4817      	ldr	r0, [pc, #92]	; (8007c00 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007ba2:	f00b f9c3 	bl	8012f2c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d003      	beq.n	8007bb2 <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	e01f      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bb2:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007bb4:	6913      	ldr	r3, [r2, #16]
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	438b      	bics	r3, r1
 8007bba:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007bbc:	1ca1      	adds	r1, r4, #2
 8007bbe:	002a      	movs	r2, r5
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f00b f9e0 	bl	8012f88 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc8:	480d      	ldr	r0, [pc, #52]	; (8007c00 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007bca:	f00b f9af 	bl	8012f2c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d003      	beq.n	8007bda <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	e00b      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007bdc:	6913      	ldr	r3, [r2, #16]
 8007bde:	2101      	movs	r1, #1
 8007be0:	438b      	bics	r3, r1
 8007be2:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	e002      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 8007bec:	f00b f994 	bl	8012f18 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007bf0:	2380      	movs	r3, #128	; 0x80
}
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	0001003c 	.word	0x0001003c
 8007bfc:	0801dffe 	.word	0x0801dffe
 8007c00:	0000c350 	.word	0x0000c350
 8007c04:	200072b0 	.word	0x200072b0
 8007c08:	40022000 	.word	0x40022000

08007c0c <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	0005      	movs	r5, r0
 8007c10:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ff76 	bl	8007b04 <EE_FindValidPage>
 8007c18:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 8007c1a:	28ab      	cmp	r0, #171	; 0xab
 8007c1c:	d016      	beq.n	8007c4c <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <EE_ReadVariable+0x44>)
 8007c20:	18c2      	adds	r2, r0, r3
 8007c22:	02d2      	lsls	r2, r2, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007c24:	3002      	adds	r0, #2
 8007c26:	02c0      	lsls	r0, r0, #11
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <EE_ReadVariable+0x48>)
 8007c2a:	469c      	mov	ip, r3
 8007c2c:	4460      	add	r0, ip
	while(Address > (PageStartAddress + 2)){
 8007c2e:	1c93      	adds	r3, r2, #2
 8007c30:	4283      	cmp	r3, r0
 8007c32:	d20a      	bcs.n	8007c4a <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 8007c34:	8803      	ldrh	r3, [r0, #0]
 8007c36:	b29b      	uxth	r3, r3
		if(AddressValue == VirtAddress){
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	d001      	beq.n	8007c40 <EE_ReadVariable+0x34>
			Address =Address - 4;
 8007c3c:	3804      	subs	r0, #4
 8007c3e:	e7f6      	b.n	8007c2e <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007c40:	3802      	subs	r0, #2
 8007c42:	8803      	ldrh	r3, [r0, #0]
 8007c44:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 8007c46:	2300      	movs	r3, #0
			break;
 8007c48:	e000      	b.n	8007c4c <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007c4a:	2301      	movs	r3, #1
}
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	0001003c 	.word	0x0001003c
 8007c54:	0801dffe 	.word	0x0801dffe

08007c58 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	0006      	movs	r6, r0
 8007c5c:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007c5e:	f00b f947 	bl	8012ef0 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007c62:	2000      	movs	r0, #0
 8007c64:	f7ff ff4e 	bl	8007b04 <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 8007c68:	2802      	cmp	r0, #2
 8007c6a:	d013      	beq.n	8007c94 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d000      	beq.n	8007c72 <EE_PageTransfer+0x1a>
 8007c70:	e06d      	b.n	8007d4e <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007c72:	4f38      	ldr	r7, [pc, #224]	; (8007d54 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007c74:	4d38      	ldr	r5, [pc, #224]	; (8007d58 <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007c76:	4a39      	ldr	r2, [pc, #228]	; (8007d5c <EE_PageTransfer+0x104>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	0029      	movs	r1, r5
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f00b f983 	bl	8012f88 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c82:	4837      	ldr	r0, [pc, #220]	; (8007d60 <EE_PageTransfer+0x108>)
 8007c84:	f00b f952 	bl	8012f2c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d006      	beq.n	8007c9a <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 8007c8c:	4b35      	ldr	r3, [pc, #212]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007c8e:	69d8      	ldr	r0, [r3, #28]
 8007c90:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007c94:	4f30      	ldr	r7, [pc, #192]	; (8007d58 <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007c96:	4d2f      	ldr	r5, [pc, #188]	; (8007d54 <EE_PageTransfer+0xfc>)
 8007c98:	e7ed      	b.n	8007c76 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c9a:	4a33      	ldr	r2, [pc, #204]	; (8007d68 <EE_PageTransfer+0x110>)
 8007c9c:	6913      	ldr	r3, [r2, #16]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	438b      	bics	r3, r1
 8007ca2:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007ca4:	0021      	movs	r1, r4
 8007ca6:	0030      	movs	r0, r6
 8007ca8:	f7ff ff5a 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1f0      	bne.n	8007c92 <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	e001      	b.n	8007cb8 <EE_PageTransfer+0x60>
 8007cb4:	3401      	adds	r4, #1
 8007cb6:	b2a4      	uxth	r4, r4
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d80f      	bhi.n	8007ce0 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007cc0:	42b4      	cmp	r4, r6
 8007cc2:	d0f7      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cc4:	4929      	ldr	r1, [pc, #164]	; (8007d6c <EE_PageTransfer+0x114>)
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	f7ff ffa0 	bl	8007c0c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007ccc:	2801      	cmp	r0, #1
 8007cce:	d0f1      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cd0:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <EE_PageTransfer+0x114>)
 8007cd2:	8819      	ldrh	r1, [r3, #0]
 8007cd4:	0020      	movs	r0, r4
 8007cd6:	f7ff ff43 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0ea      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
 8007cde:	e7d8      	b.n	8007c92 <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 8007ce0:	0038      	movs	r0, r7
 8007ce2:	f00b f9b3 	bl	801304c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce6:	481e      	ldr	r0, [pc, #120]	; (8007d60 <EE_PageTransfer+0x108>)
 8007ce8:	f00b f920 	bl	8012f2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d003      	beq.n	8007cf8 <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007cf2:	69d8      	ldr	r0, [r3, #28]
 8007cf4:	b280      	uxth	r0, r0
 8007cf6:	e7cc      	b.n	8007c92 <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	18f8      	adds	r0, r7, r3
 8007cfe:	f00b f9a5 	bl	801304c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d02:	4817      	ldr	r0, [pc, #92]	; (8007d60 <EE_PageTransfer+0x108>)
 8007d04:	f00b f912 	bl	8012f2c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d003      	beq.n	8007d14 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007d0e:	69d8      	ldr	r0, [r3, #28]
 8007d10:	b280      	uxth	r0, r0
 8007d12:	e7be      	b.n	8007c92 <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d14:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <EE_PageTransfer+0x110>)
 8007d16:	6913      	ldr	r3, [r2, #16]
 8007d18:	2102      	movs	r1, #2
 8007d1a:	438b      	bics	r3, r1
 8007d1c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	0029      	movs	r1, r5
 8007d24:	2001      	movs	r0, #1
 8007d26:	f00b f92f 	bl	8012f88 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d2a:	480d      	ldr	r0, [pc, #52]	; (8007d60 <EE_PageTransfer+0x108>)
 8007d2c:	f00b f8fe 	bl	8012f2c <FLASH_WaitForLastOperation>
 8007d30:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 8007d32:	d003      	beq.n	8007d3c <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007d36:	69d8      	ldr	r0, [r3, #28]
 8007d38:	b280      	uxth	r0, r0
 8007d3a:	e7aa      	b.n	8007c92 <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <EE_PageTransfer+0x110>)
 8007d3e:	6913      	ldr	r3, [r2, #16]
 8007d40:	2101      	movs	r1, #1
 8007d42:	438b      	bics	r3, r1
 8007d44:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007d46:	f00b f8e7 	bl	8012f18 <HAL_FLASH_Lock>
	return FlashStatus;
 8007d4a:	b2a0      	uxth	r0, r4
 8007d4c:	e7a1      	b.n	8007c92 <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 8007d4e:	20ab      	movs	r0, #171	; 0xab
 8007d50:	e79f      	b.n	8007c92 <EE_PageTransfer+0x3a>
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	0801e000 	.word	0x0801e000
 8007d58:	0801f000 	.word	0x0801f000
 8007d5c:	0000eeee 	.word	0x0000eeee
 8007d60:	0000c350 	.word	0x0000c350
 8007d64:	200072b0 	.word	0x200072b0
 8007d68:	40022000 	.word	0x40022000
 8007d6c:	20001474 	.word	0x20001474

08007d70 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	0005      	movs	r5, r0
 8007d74:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007d76:	f00b f8bb 	bl	8012ef0 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007d7a:	0031      	movs	r1, r6
 8007d7c:	0028      	movs	r0, r5
 8007d7e:	f7ff feef 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 8007d82:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007d84:	2880      	cmp	r0, #128	; 0x80
 8007d86:	d003      	beq.n	8007d90 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8007d88:	f00b f8c6 	bl	8012f18 <HAL_FLASH_Lock>
}
 8007d8c:	0020      	movs	r0, r4
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 8007d90:	0031      	movs	r1, r6
 8007d92:	0028      	movs	r0, r5
 8007d94:	f7ff ff60 	bl	8007c58 <EE_PageTransfer>
 8007d98:	0004      	movs	r4, r0
 8007d9a:	e7f5      	b.n	8007d88 <EE_WriteVariable+0x18>

08007d9c <EE_Format>:
uint16_t EE_Format(void){
 8007d9c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007d9e:	f00b f8a7 	bl	8012ef0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007da2:	4829      	ldr	r0, [pc, #164]	; (8007e48 <EE_Format+0xac>)
 8007da4:	f00b f952 	bl	801304c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007da8:	4828      	ldr	r0, [pc, #160]	; (8007e4c <EE_Format+0xb0>)
 8007daa:	f00b f8bf 	bl	8012f2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d003      	beq.n	8007dba <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007db2:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <EE_Format+0xb4>)
 8007db4:	69d8      	ldr	r0, [r3, #28]
 8007db6:	b280      	uxth	r0, r0
}
 8007db8:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007dba:	4826      	ldr	r0, [pc, #152]	; (8007e54 <EE_Format+0xb8>)
 8007dbc:	f00b f946 	bl	801304c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dc0:	4822      	ldr	r0, [pc, #136]	; (8007e4c <EE_Format+0xb0>)
 8007dc2:	f00b f8b3 	bl	8012f2c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d003      	beq.n	8007dd2 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <EE_Format+0xb4>)
 8007dcc:	69d8      	ldr	r0, [r3, #28]
 8007dce:	b280      	uxth	r0, r0
 8007dd0:	e7f2      	b.n	8007db8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007dd2:	4a21      	ldr	r2, [pc, #132]	; (8007e58 <EE_Format+0xbc>)
 8007dd4:	6913      	ldr	r3, [r2, #16]
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	438b      	bics	r3, r1
 8007dda:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	4919      	ldr	r1, [pc, #100]	; (8007e48 <EE_Format+0xac>)
 8007de2:	2001      	movs	r0, #1
 8007de4:	f00b f8d0 	bl	8012f88 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007de8:	4818      	ldr	r0, [pc, #96]	; (8007e4c <EE_Format+0xb0>)
 8007dea:	f00b f89f 	bl	8012f2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d003      	beq.n	8007dfa <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <EE_Format+0xb4>)
 8007df4:	69d8      	ldr	r0, [r3, #28]
 8007df6:	b280      	uxth	r0, r0
 8007df8:	e7de      	b.n	8007db8 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <EE_Format+0xbc>)
 8007dfc:	6913      	ldr	r3, [r2, #16]
 8007dfe:	2101      	movs	r1, #1
 8007e00:	438b      	bics	r3, r1
 8007e02:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e04:	4815      	ldr	r0, [pc, #84]	; (8007e5c <EE_Format+0xc0>)
 8007e06:	f00b f921 	bl	801304c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e0a:	4810      	ldr	r0, [pc, #64]	; (8007e4c <EE_Format+0xb0>)
 8007e0c:	f00b f88e 	bl	8012f2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d003      	beq.n	8007e1c <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007e14:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <EE_Format+0xb4>)
 8007e16:	69d8      	ldr	r0, [r3, #28]
 8007e18:	b280      	uxth	r0, r0
 8007e1a:	e7cd      	b.n	8007db8 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e1c:	4810      	ldr	r0, [pc, #64]	; (8007e60 <EE_Format+0xc4>)
 8007e1e:	f00b f915 	bl	801304c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e22:	480a      	ldr	r0, [pc, #40]	; (8007e4c <EE_Format+0xb0>)
 8007e24:	f00b f882 	bl	8012f2c <FLASH_WaitForLastOperation>
 8007e28:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 8007e2a:	d003      	beq.n	8007e34 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <EE_Format+0xb4>)
 8007e2e:	69d8      	ldr	r0, [r3, #28]
 8007e30:	b280      	uxth	r0, r0
 8007e32:	e7c1      	b.n	8007db8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e34:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <EE_Format+0xbc>)
 8007e36:	6913      	ldr	r3, [r2, #16]
 8007e38:	2101      	movs	r1, #1
 8007e3a:	438b      	bics	r3, r1
 8007e3c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007e3e:	f00b f86b 	bl	8012f18 <HAL_FLASH_Lock>
	return FlashStatus;
 8007e42:	b2a0      	uxth	r0, r4
 8007e44:	e7b8      	b.n	8007db8 <EE_Format+0x1c>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	0801e000 	.word	0x0801e000
 8007e4c:	0000c350 	.word	0x0000c350
 8007e50:	200072b0 	.word	0x200072b0
 8007e54:	0801e800 	.word	0x0801e800
 8007e58:	40022000 	.word	0x40022000
 8007e5c:	0801f000 	.word	0x0801f000
 8007e60:	0801f800 	.word	0x0801f800

08007e64 <EE_Init>:
uint16_t EE_Init(void){
 8007e64:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007e66:	f00b f843 	bl	8012ef0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007e6a:	4bbc      	ldr	r3, [pc, #752]	; (800815c <EE_Init+0x2f8>)
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007e70:	4abb      	ldr	r2, [pc, #748]	; (8008160 <EE_Init+0x2fc>)
 8007e72:	8812      	ldrh	r2, [r2, #0]
 8007e74:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007e76:	49bb      	ldr	r1, [pc, #748]	; (8008164 <EE_Init+0x300>)
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	d100      	bne.n	8007e7e <EE_Init+0x1a>
 8007e7c:	e072      	b.n	8007f64 <EE_Init+0x100>
 8007e7e:	49ba      	ldr	r1, [pc, #744]	; (8008168 <EE_Init+0x304>)
 8007e80:	428b      	cmp	r3, r1
 8007e82:	d00f      	beq.n	8007ea4 <EE_Init+0x40>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d100      	bne.n	8007e8a <EE_Init+0x26>
 8007e88:	e106      	b.n	8008098 <EE_Init+0x234>
			FlashStatus =EE_Format();
 8007e8a:	f7ff ff87 	bl	8007d9c <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e8e:	48b7      	ldr	r0, [pc, #732]	; (800816c <EE_Init+0x308>)
 8007e90:	f00b f84c 	bl	8012f2c <FLASH_WaitForLastOperation>
 8007e94:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	d102      	bne.n	8007ea0 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8007e9a:	f00b f83d 	bl	8012f18 <HAL_FLASH_Lock>
	return HAL_OK;
 8007e9e:	2500      	movs	r5, #0
}
 8007ea0:	0028      	movs	r0, r5
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d00d      	beq.n	8007ec4 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007ea8:	4bae      	ldr	r3, [pc, #696]	; (8008164 <EE_Init+0x300>)
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d028      	beq.n	8007f00 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 8007eae:	f7ff ff75 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eb2:	48ae      	ldr	r0, [pc, #696]	; (800816c <EE_Init+0x308>)
 8007eb4:	f00b f83a 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0ee      	beq.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007ebc:	4bac      	ldr	r3, [pc, #688]	; (8008170 <EE_Init+0x30c>)
 8007ebe:	69dd      	ldr	r5, [r3, #28]
 8007ec0:	b2ad      	uxth	r5, r5
 8007ec2:	e7ed      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ec4:	48a5      	ldr	r0, [pc, #660]	; (800815c <EE_Init+0x2f8>)
 8007ec6:	f00b f8c1 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eca:	48a8      	ldr	r0, [pc, #672]	; (800816c <EE_Init+0x308>)
 8007ecc:	f00b f82e 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d003      	beq.n	8007edc <EE_Init+0x78>
					return pFlash.ErrorCode;
 8007ed4:	4ba6      	ldr	r3, [pc, #664]	; (8008170 <EE_Init+0x30c>)
 8007ed6:	69dd      	ldr	r5, [r3, #28]
 8007ed8:	b2ad      	uxth	r5, r5
 8007eda:	e7e1      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007edc:	48a5      	ldr	r0, [pc, #660]	; (8008174 <EE_Init+0x310>)
 8007ede:	f00b f8b5 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ee2:	48a2      	ldr	r0, [pc, #648]	; (800816c <EE_Init+0x308>)
 8007ee4:	f00b f822 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d105      	bne.n	8007ef8 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007eec:	4aa2      	ldr	r2, [pc, #648]	; (8008178 <EE_Init+0x314>)
 8007eee:	6913      	ldr	r3, [r2, #16]
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	438b      	bics	r3, r1
 8007ef4:	6113      	str	r3, [r2, #16]
 8007ef6:	e7d0      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007ef8:	4b9d      	ldr	r3, [pc, #628]	; (8008170 <EE_Init+0x30c>)
 8007efa:	69dd      	ldr	r5, [r3, #28]
 8007efc:	b2ad      	uxth	r5, r5
 8007efe:	e7cf      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f00:	4896      	ldr	r0, [pc, #600]	; (800815c <EE_Init+0x2f8>)
 8007f02:	f00b f8a3 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f06:	4899      	ldr	r0, [pc, #612]	; (800816c <EE_Init+0x308>)
 8007f08:	f00b f810 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d003      	beq.n	8007f18 <EE_Init+0xb4>
					return pFlash.ErrorCode;
 8007f10:	4b97      	ldr	r3, [pc, #604]	; (8008170 <EE_Init+0x30c>)
 8007f12:	69dd      	ldr	r5, [r3, #28]
 8007f14:	b2ad      	uxth	r5, r5
 8007f16:	e7c3      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f18:	4896      	ldr	r0, [pc, #600]	; (8008174 <EE_Init+0x310>)
 8007f1a:	f00b f897 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f1e:	4893      	ldr	r0, [pc, #588]	; (800816c <EE_Init+0x308>)
 8007f20:	f00b f804 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d003      	beq.n	8007f30 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 8007f28:	4b91      	ldr	r3, [pc, #580]	; (8008170 <EE_Init+0x30c>)
 8007f2a:	69dd      	ldr	r5, [r3, #28]
 8007f2c:	b2ad      	uxth	r5, r5
 8007f2e:	e7b7      	b.n	8007ea0 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f30:	4a91      	ldr	r2, [pc, #580]	; (8008178 <EE_Init+0x314>)
 8007f32:	6913      	ldr	r3, [r2, #16]
 8007f34:	2102      	movs	r1, #2
 8007f36:	438b      	bics	r3, r1
 8007f38:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4988      	ldr	r1, [pc, #544]	; (8008160 <EE_Init+0x2fc>)
 8007f40:	2001      	movs	r0, #1
 8007f42:	f00b f821 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f46:	4889      	ldr	r0, [pc, #548]	; (800816c <EE_Init+0x308>)
 8007f48:	f00a fff0 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d105      	bne.n	8007f5c <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f50:	4a89      	ldr	r2, [pc, #548]	; (8008178 <EE_Init+0x314>)
 8007f52:	6913      	ldr	r3, [r2, #16]
 8007f54:	2101      	movs	r1, #1
 8007f56:	438b      	bics	r3, r1
 8007f58:	6113      	str	r3, [r2, #16]
 8007f5a:	e79e      	b.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007f5c:	4b84      	ldr	r3, [pc, #528]	; (8008170 <EE_Init+0x30c>)
 8007f5e:	69dd      	ldr	r5, [r3, #28]
 8007f60:	b2ad      	uxth	r5, r5
 8007f62:	e79d      	b.n	8007ea0 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007f64:	2a00      	cmp	r2, #0
 8007f66:	d02f      	beq.n	8007fc8 <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007f68:	4b7f      	ldr	r3, [pc, #508]	; (8008168 <EE_Init+0x304>)
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d062      	beq.n	8008034 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 8007f6e:	f7ff ff15 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f72:	487e      	ldr	r0, [pc, #504]	; (800816c <EE_Init+0x308>)
 8007f74:	f00a ffda 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d100      	bne.n	8007f7e <EE_Init+0x11a>
 8007f7c:	e78d      	b.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007f7e:	4b7c      	ldr	r3, [pc, #496]	; (8008170 <EE_Init+0x30c>)
 8007f80:	69dd      	ldr	r5, [r3, #28]
 8007f82:	b2ad      	uxth	r5, r5
 8007f84:	e78c      	b.n	8007ea0 <EE_Init+0x3c>
						x =VarIdx;
 8007f86:	b226      	sxth	r6, r4
 8007f88:	e00a      	b.n	8007fa0 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007f8a:	3401      	adds	r4, #1
 8007f8c:	b2a4      	uxth	r4, r4
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d81c      	bhi.n	8007fd0 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007f96:	4b79      	ldr	r3, [pc, #484]	; (800817c <EE_Init+0x318>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d0f2      	beq.n	8007f86 <EE_Init+0x122>
					if(VarIdx != x){
 8007fa0:	42b4      	cmp	r4, r6
 8007fa2:	d0f2      	beq.n	8007f8a <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007fa4:	4976      	ldr	r1, [pc, #472]	; (8008180 <EE_Init+0x31c>)
 8007fa6:	0020      	movs	r0, r4
 8007fa8:	f7ff fe30 	bl	8007c0c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007fac:	2801      	cmp	r0, #1
 8007fae:	d0ec      	beq.n	8007f8a <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007fb0:	4b73      	ldr	r3, [pc, #460]	; (8008180 <EE_Init+0x31c>)
 8007fb2:	8819      	ldrh	r1, [r3, #0]
 8007fb4:	0020      	movs	r0, r4
 8007fb6:	f7ff fdd3 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 8007fba:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fbc:	486b      	ldr	r0, [pc, #428]	; (800816c <EE_Init+0x308>)
 8007fbe:	f00a ffb5 	bl	8012f2c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d0e1      	beq.n	8007f8a <EE_Init+0x126>
 8007fc6:	e76b      	b.n	8007ea0 <EE_Init+0x3c>
	int16_t x =-1;
 8007fc8:	2601      	movs	r6, #1
 8007fca:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007fcc:	2401      	movs	r4, #1
 8007fce:	e7de      	b.n	8007f8e <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4961      	ldr	r1, [pc, #388]	; (800815c <EE_Init+0x2f8>)
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	f00a ffd6 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fdc:	4863      	ldr	r0, [pc, #396]	; (800816c <EE_Init+0x308>)
 8007fde:	f00a ffa5 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d003      	beq.n	8007fee <EE_Init+0x18a>
					return pFlash.ErrorCode;
 8007fe6:	4b62      	ldr	r3, [pc, #392]	; (8008170 <EE_Init+0x30c>)
 8007fe8:	69dd      	ldr	r5, [r3, #28]
 8007fea:	b2ad      	uxth	r5, r5
 8007fec:	e758      	b.n	8007ea0 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007fee:	4a62      	ldr	r2, [pc, #392]	; (8008178 <EE_Init+0x314>)
 8007ff0:	6913      	ldr	r3, [r2, #16]
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	438b      	bics	r3, r1
 8007ff6:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007ff8:	4859      	ldr	r0, [pc, #356]	; (8008160 <EE_Init+0x2fc>)
 8007ffa:	f00b f827 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ffe:	485b      	ldr	r0, [pc, #364]	; (800816c <EE_Init+0x308>)
 8008000:	f00a ff94 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008004:	2800      	cmp	r0, #0
 8008006:	d003      	beq.n	8008010 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 8008008:	4b59      	ldr	r3, [pc, #356]	; (8008170 <EE_Init+0x30c>)
 800800a:	69dd      	ldr	r5, [r3, #28]
 800800c:	b2ad      	uxth	r5, r5
 800800e:	e747      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008010:	485c      	ldr	r0, [pc, #368]	; (8008184 <EE_Init+0x320>)
 8008012:	f00b f81b 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008016:	4855      	ldr	r0, [pc, #340]	; (800816c <EE_Init+0x308>)
 8008018:	f00a ff88 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800801c:	2800      	cmp	r0, #0
 800801e:	d105      	bne.n	800802c <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008020:	4a55      	ldr	r2, [pc, #340]	; (8008178 <EE_Init+0x314>)
 8008022:	6913      	ldr	r3, [r2, #16]
 8008024:	2102      	movs	r1, #2
 8008026:	438b      	bics	r3, r1
 8008028:	6113      	str	r3, [r2, #16]
 800802a:	e736      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 800802c:	4b50      	ldr	r3, [pc, #320]	; (8008170 <EE_Init+0x30c>)
 800802e:	69dd      	ldr	r5, [r3, #28]
 8008030:	b2ad      	uxth	r5, r5
 8008032:	e735      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008034:	484a      	ldr	r0, [pc, #296]	; (8008160 <EE_Init+0x2fc>)
 8008036:	f00b f809 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800803a:	484c      	ldr	r0, [pc, #304]	; (800816c <EE_Init+0x308>)
 800803c:	f00a ff76 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008040:	2800      	cmp	r0, #0
 8008042:	d003      	beq.n	800804c <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 8008044:	4b4a      	ldr	r3, [pc, #296]	; (8008170 <EE_Init+0x30c>)
 8008046:	69dd      	ldr	r5, [r3, #28]
 8008048:	b2ad      	uxth	r5, r5
 800804a:	e729      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800804c:	484d      	ldr	r0, [pc, #308]	; (8008184 <EE_Init+0x320>)
 800804e:	f00a fffd 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008052:	4846      	ldr	r0, [pc, #280]	; (800816c <EE_Init+0x308>)
 8008054:	f00a ff6a 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008058:	2800      	cmp	r0, #0
 800805a:	d003      	beq.n	8008064 <EE_Init+0x200>
						return pFlash.ErrorCode;
 800805c:	4b44      	ldr	r3, [pc, #272]	; (8008170 <EE_Init+0x30c>)
 800805e:	69dd      	ldr	r5, [r3, #28]
 8008060:	b2ad      	uxth	r5, r5
 8008062:	e71d      	b.n	8007ea0 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008064:	4a44      	ldr	r2, [pc, #272]	; (8008178 <EE_Init+0x314>)
 8008066:	6913      	ldr	r3, [r2, #16]
 8008068:	2102      	movs	r1, #2
 800806a:	438b      	bics	r3, r1
 800806c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800806e:	2200      	movs	r2, #0
 8008070:	2300      	movs	r3, #0
 8008072:	493a      	ldr	r1, [pc, #232]	; (800815c <EE_Init+0x2f8>)
 8008074:	2001      	movs	r0, #1
 8008076:	f00a ff87 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800807a:	483c      	ldr	r0, [pc, #240]	; (800816c <EE_Init+0x308>)
 800807c:	f00a ff56 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008080:	2800      	cmp	r0, #0
 8008082:	d003      	beq.n	800808c <EE_Init+0x228>
					return pFlash.ErrorCode;
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <EE_Init+0x30c>)
 8008086:	69dd      	ldr	r5, [r3, #28]
 8008088:	b2ad      	uxth	r5, r5
 800808a:	e709      	b.n	8007ea0 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800808c:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <EE_Init+0x314>)
 800808e:	6913      	ldr	r3, [r2, #16]
 8008090:	2101      	movs	r1, #1
 8008092:	438b      	bics	r3, r1
 8008094:	6113      	str	r3, [r2, #16]
 8008096:	e700      	b.n	8007e9a <EE_Init+0x36>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8008098:	2a00      	cmp	r2, #0
 800809a:	d006      	beq.n	80080aa <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800809c:	4b32      	ldr	r3, [pc, #200]	; (8008168 <EE_Init+0x304>)
 800809e:	429a      	cmp	r2, r3
 80080a0:	d00d      	beq.n	80080be <EE_Init+0x25a>
	int16_t x =-1;
 80080a2:	2601      	movs	r6, #1
 80080a4:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80080a6:	2401      	movs	r4, #1
 80080a8:	e02b      	b.n	8008102 <EE_Init+0x29e>
				FlashStatus =EE_Format();
 80080aa:	f7ff fe77 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080ae:	482f      	ldr	r0, [pc, #188]	; (800816c <EE_Init+0x308>)
 80080b0:	f00a ff3c 	bl	8012f2c <FLASH_WaitForLastOperation>
 80080b4:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	d100      	bne.n	80080bc <EE_Init+0x258>
 80080ba:	e6ee      	b.n	8007e9a <EE_Init+0x36>
 80080bc:	e6f0      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80080be:	4828      	ldr	r0, [pc, #160]	; (8008160 <EE_Init+0x2fc>)
 80080c0:	f00a ffc4 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080c4:	4829      	ldr	r0, [pc, #164]	; (800816c <EE_Init+0x308>)
 80080c6:	f00a ff31 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d003      	beq.n	80080d6 <EE_Init+0x272>
					return pFlash.ErrorCode;
 80080ce:	4b28      	ldr	r3, [pc, #160]	; (8008170 <EE_Init+0x30c>)
 80080d0:	69dd      	ldr	r5, [r3, #28]
 80080d2:	b2ad      	uxth	r5, r5
 80080d4:	e6e4      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80080d6:	482b      	ldr	r0, [pc, #172]	; (8008184 <EE_Init+0x320>)
 80080d8:	f00a ffb8 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080dc:	4823      	ldr	r0, [pc, #140]	; (800816c <EE_Init+0x308>)
 80080de:	f00a ff25 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d105      	bne.n	80080f2 <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080e6:	4a24      	ldr	r2, [pc, #144]	; (8008178 <EE_Init+0x314>)
 80080e8:	6913      	ldr	r3, [r2, #16]
 80080ea:	2102      	movs	r1, #2
 80080ec:	438b      	bics	r3, r1
 80080ee:	6113      	str	r3, [r2, #16]
 80080f0:	e6d3      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <EE_Init+0x30c>)
 80080f4:	69dd      	ldr	r5, [r3, #28]
 80080f6:	b2ad      	uxth	r5, r5
 80080f8:	e6d2      	b.n	8007ea0 <EE_Init+0x3c>
						x =VarIdx;
 80080fa:	b226      	sxth	r6, r4
 80080fc:	e00a      	b.n	8008114 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80080fe:	3401      	adds	r4, #1
 8008100:	b2a4      	uxth	r4, r4
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	429c      	cmp	r4, r3
 8008108:	d818      	bhi.n	800813c <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800810a:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <EE_Init+0x324>)
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	42a3      	cmp	r3, r4
 8008112:	d0f2      	beq.n	80080fa <EE_Init+0x296>
					if(VarIdx != x){
 8008114:	42b4      	cmp	r4, r6
 8008116:	d0f2      	beq.n	80080fe <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008118:	4919      	ldr	r1, [pc, #100]	; (8008180 <EE_Init+0x31c>)
 800811a:	0020      	movs	r0, r4
 800811c:	f7ff fd76 	bl	8007c0c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8008120:	2801      	cmp	r0, #1
 8008122:	d0ec      	beq.n	80080fe <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008124:	4b16      	ldr	r3, [pc, #88]	; (8008180 <EE_Init+0x31c>)
 8008126:	8819      	ldrh	r1, [r3, #0]
 8008128:	0020      	movs	r0, r4
 800812a:	f7ff fd19 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 800812e:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008130:	480e      	ldr	r0, [pc, #56]	; (800816c <EE_Init+0x308>)
 8008132:	f00a fefb 	bl	8012f2c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8008136:	2800      	cmp	r0, #0
 8008138:	d0e1      	beq.n	80080fe <EE_Init+0x29a>
 800813a:	e6b1      	b.n	8007ea0 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4907      	ldr	r1, [pc, #28]	; (8008160 <EE_Init+0x2fc>)
 8008142:	2001      	movs	r0, #1
 8008144:	f00a ff20 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <EE_Init+0x308>)
 800814a:	f00a feef 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800814e:	2800      	cmp	r0, #0
 8008150:	d01c      	beq.n	800818c <EE_Init+0x328>
					return pFlash.ErrorCode;
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <EE_Init+0x30c>)
 8008154:	69dd      	ldr	r5, [r3, #28]
 8008156:	b2ad      	uxth	r5, r5
 8008158:	e6a2      	b.n	8007ea0 <EE_Init+0x3c>
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	0801e000 	.word	0x0801e000
 8008160:	0801f000 	.word	0x0801f000
 8008164:	0000eeee 	.word	0x0000eeee
 8008168:	0000ffff 	.word	0x0000ffff
 800816c:	0000c350 	.word	0x0000c350
 8008170:	200072b0 	.word	0x200072b0
 8008174:	0801e800 	.word	0x0801e800
 8008178:	40022000 	.word	0x40022000
 800817c:	0801e006 	.word	0x0801e006
 8008180:	20001474 	.word	0x20001474
 8008184:	0801f800 	.word	0x0801f800
 8008188:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800818c:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <EE_Init+0x370>)
 800818e:	6913      	ldr	r3, [r2, #16]
 8008190:	2101      	movs	r1, #1
 8008192:	438b      	bics	r3, r1
 8008194:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8008196:	4810      	ldr	r0, [pc, #64]	; (80081d8 <EE_Init+0x374>)
 8008198:	f00a ff58 	bl	801304c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800819c:	480f      	ldr	r0, [pc, #60]	; (80081dc <EE_Init+0x378>)
 800819e:	f00a fec5 	bl	8012f2c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d003      	beq.n	80081ae <EE_Init+0x34a>
					return pFlash.ErrorCode;
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <EE_Init+0x37c>)
 80081a8:	69dd      	ldr	r5, [r3, #28]
 80081aa:	b2ad      	uxth	r5, r5
 80081ac:	e678      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80081ae:	480d      	ldr	r0, [pc, #52]	; (80081e4 <EE_Init+0x380>)
 80081b0:	f00a ff4c 	bl	801304c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80081b4:	4809      	ldr	r0, [pc, #36]	; (80081dc <EE_Init+0x378>)
 80081b6:	f00a feb9 	bl	8012f2c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d105      	bne.n	80081ca <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80081be:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <EE_Init+0x370>)
 80081c0:	6913      	ldr	r3, [r2, #16]
 80081c2:	2102      	movs	r1, #2
 80081c4:	438b      	bics	r3, r1
 80081c6:	6113      	str	r3, [r2, #16]
 80081c8:	e667      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <EE_Init+0x37c>)
 80081cc:	69dd      	ldr	r5, [r3, #28]
 80081ce:	b2ad      	uxth	r5, r5
 80081d0:	e666      	b.n	8007ea0 <EE_Init+0x3c>
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	40022000 	.word	0x40022000
 80081d8:	0801e000 	.word	0x0801e000
 80081dc:	0000c350 	.word	0x0000c350
 80081e0:	200072b0 	.word	0x200072b0
 80081e4:	0801e800 	.word	0x0801e800

080081e8 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	e020      	b.n	800822e <StartDefaultTask+0x46>
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
			case IND_PING:
				RTOS_IND_blink(200);
 80081ec:	2580      	movs	r5, #128	; 0x80
 80081ee:	012d      	lsls	r5, r5, #4
 80081f0:	2490      	movs	r4, #144	; 0x90
 80081f2:	05e4      	lsls	r4, r4, #23
 80081f4:	2201      	movs	r2, #1
 80081f6:	0029      	movs	r1, r5
 80081f8:	0020      	movs	r0, r4
 80081fa:	f00b f8dc 	bl	80133b6 <HAL_GPIO_WritePin>
 80081fe:	20c8      	movs	r0, #200	; 0xc8
 8008200:	f007 fc58 	bl	800fab4 <osDelay>
 8008204:	2200      	movs	r2, #0
 8008206:	0029      	movs	r1, r5
 8008208:	0020      	movs	r0, r4
 800820a:	f00b f8d4 	bl	80133b6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800820e:	4b21      	ldr	r3, [pc, #132]	; (8008294 <StartDefaultTask+0xac>)
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008214:	f000 ff12 	bl	800903c <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008218:	f7fd fb56 	bl	80058c8 <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <StartDefaultTask+0xb0>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <StartDefaultTask+0xb4>)
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 800822a:	f009 fb2d 	bl	8011888 <vPortYield>
		switch(indMode){
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <StartDefaultTask+0xac>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d004      	beq.n	8008240 <StartDefaultTask+0x58>
 8008236:	2b03      	cmp	r3, #3
 8008238:	d017      	beq.n	800826a <StartDefaultTask+0x82>
 800823a:	2b01      	cmp	r3, #1
 800823c:	d1ea      	bne.n	8008214 <StartDefaultTask+0x2c>
 800823e:	e7d5      	b.n	80081ec <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 8008240:	2580      	movs	r5, #128	; 0x80
 8008242:	012d      	lsls	r5, r5, #4
 8008244:	2490      	movs	r4, #144	; 0x90
 8008246:	05e4      	lsls	r4, r4, #23
 8008248:	2201      	movs	r2, #1
 800824a:	0029      	movs	r1, r5
 800824c:	0020      	movs	r0, r4
 800824e:	f00b f8b2 	bl	80133b6 <HAL_GPIO_WritePin>
 8008252:	2064      	movs	r0, #100	; 0x64
 8008254:	f007 fc2e 	bl	800fab4 <osDelay>
 8008258:	2200      	movs	r2, #0
 800825a:	0029      	movs	r1, r5
 800825c:	0020      	movs	r0, r4
 800825e:	f00b f8aa 	bl	80133b6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <StartDefaultTask+0xac>)
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
				break;
 8008268:	e7d4      	b.n	8008214 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 800826a:	2580      	movs	r5, #128	; 0x80
 800826c:	012d      	lsls	r5, r5, #4
 800826e:	2490      	movs	r4, #144	; 0x90
 8008270:	05e4      	lsls	r4, r4, #23
 8008272:	2201      	movs	r2, #1
 8008274:	0029      	movs	r1, r5
 8008276:	0020      	movs	r0, r4
 8008278:	f00b f89d 	bl	80133b6 <HAL_GPIO_WritePin>
 800827c:	201e      	movs	r0, #30
 800827e:	f007 fc19 	bl	800fab4 <osDelay>
 8008282:	2200      	movs	r2, #0
 8008284:	0029      	movs	r1, r5
 8008286:	0020      	movs	r0, r4
 8008288:	f00b f895 	bl	80133b6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800828c:	4b01      	ldr	r3, [pc, #4]	; (8008294 <StartDefaultTask+0xac>)
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
				break;
 8008292:	e7bf      	b.n	8008214 <StartDefaultTask+0x2c>
 8008294:	20000ee4 	.word	0x20000ee4
 8008298:	200014f7 	.word	0x200014f7
 800829c:	200014f6 	.word	0x200014f6

080082a0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80082a4:	25a0      	movs	r5, #160	; 0xa0
 80082a6:	006d      	lsls	r5, r5, #1
 80082a8:	2400      	movs	r4, #0
 80082aa:	9403      	str	r4, [sp, #12]
 80082ac:	9402      	str	r4, [sp, #8]
 80082ae:	4b53      	ldr	r3, [pc, #332]	; (80083fc <MX_FREERTOS_Init+0x15c>)
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	2603      	movs	r6, #3
 80082b4:	9600      	str	r6, [sp, #0]
 80082b6:	2300      	movs	r3, #0
 80082b8:	002a      	movs	r2, r5
 80082ba:	4951      	ldr	r1, [pc, #324]	; (8008400 <MX_FREERTOS_Init+0x160>)
 80082bc:	4851      	ldr	r0, [pc, #324]	; (8008404 <MX_FREERTOS_Init+0x164>)
 80082be:	f008 fa8d 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80082c2:	9403      	str	r4, [sp, #12]
 80082c4:	9402      	str	r4, [sp, #8]
 80082c6:	4b50      	ldr	r3, [pc, #320]	; (8008408 <MX_FREERTOS_Init+0x168>)
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	9600      	str	r6, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	002a      	movs	r2, r5
 80082d0:	494e      	ldr	r1, [pc, #312]	; (800840c <MX_FREERTOS_Init+0x16c>)
 80082d2:	484f      	ldr	r0, [pc, #316]	; (8008410 <MX_FREERTOS_Init+0x170>)
 80082d4:	f008 fa82 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80082d8:	9403      	str	r4, [sp, #12]
 80082da:	9402      	str	r4, [sp, #8]
 80082dc:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <MX_FREERTOS_Init+0x174>)
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	9600      	str	r6, [sp, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	002a      	movs	r2, r5
 80082e6:	494c      	ldr	r1, [pc, #304]	; (8008418 <MX_FREERTOS_Init+0x178>)
 80082e8:	484c      	ldr	r0, [pc, #304]	; (800841c <MX_FREERTOS_Init+0x17c>)
 80082ea:	f008 fa77 	bl	80107dc <xTaskGenericCreate>
	vRegisterCLICommands();
 80082ee:	f7ff fa73 	bl	80077d8 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80082f2:	9403      	str	r4, [sp, #12]
 80082f4:	9402      	str	r4, [sp, #8]
 80082f6:	4b4a      	ldr	r3, [pc, #296]	; (8008420 <MX_FREERTOS_Init+0x180>)
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	9600      	str	r6, [sp, #0]
 80082fc:	2300      	movs	r3, #0
 80082fe:	002a      	movs	r2, r5
 8008300:	4948      	ldr	r1, [pc, #288]	; (8008424 <MX_FREERTOS_Init+0x184>)
 8008302:	4849      	ldr	r0, [pc, #292]	; (8008428 <MX_FREERTOS_Init+0x188>)
 8008304:	f008 fa6a 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008308:	4d48      	ldr	r5, [pc, #288]	; (800842c <MX_FREERTOS_Init+0x18c>)
 800830a:	9403      	str	r4, [sp, #12]
 800830c:	9402      	str	r4, [sp, #8]
 800830e:	4b48      	ldr	r3, [pc, #288]	; (8008430 <MX_FREERTOS_Init+0x190>)
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	3601      	adds	r6, #1
 8008314:	9600      	str	r6, [sp, #0]
 8008316:	2301      	movs	r3, #1
 8008318:	22a0      	movs	r2, #160	; 0xa0
 800831a:	4946      	ldr	r1, [pc, #280]	; (8008434 <MX_FREERTOS_Init+0x194>)
 800831c:	0028      	movs	r0, r5
 800831e:	f008 fa5d 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8008322:	9403      	str	r4, [sp, #12]
 8008324:	9402      	str	r4, [sp, #8]
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <MX_FREERTOS_Init+0x198>)
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	9600      	str	r6, [sp, #0]
 800832c:	2302      	movs	r3, #2
 800832e:	22a0      	movs	r2, #160	; 0xa0
 8008330:	4942      	ldr	r1, [pc, #264]	; (800843c <MX_FREERTOS_Init+0x19c>)
 8008332:	0028      	movs	r0, r5
 8008334:	f008 fa52 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8008338:	9403      	str	r4, [sp, #12]
 800833a:	9402      	str	r4, [sp, #8]
 800833c:	4b40      	ldr	r3, [pc, #256]	; (8008440 <MX_FREERTOS_Init+0x1a0>)
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9600      	str	r6, [sp, #0]
 8008342:	2303      	movs	r3, #3
 8008344:	22a0      	movs	r2, #160	; 0xa0
 8008346:	493f      	ldr	r1, [pc, #252]	; (8008444 <MX_FREERTOS_Init+0x1a4>)
 8008348:	0028      	movs	r0, r5
 800834a:	f008 fa47 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800834e:	9403      	str	r4, [sp, #12]
 8008350:	9402      	str	r4, [sp, #8]
 8008352:	4b3d      	ldr	r3, [pc, #244]	; (8008448 <MX_FREERTOS_Init+0x1a8>)
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	9600      	str	r6, [sp, #0]
 8008358:	2304      	movs	r3, #4
 800835a:	22a0      	movs	r2, #160	; 0xa0
 800835c:	493b      	ldr	r1, [pc, #236]	; (800844c <MX_FREERTOS_Init+0x1ac>)
 800835e:	0028      	movs	r0, r5
 8008360:	f008 fa3c 	bl	80107dc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8008364:	9403      	str	r4, [sp, #12]
 8008366:	9402      	str	r4, [sp, #8]
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <MX_FREERTOS_Init+0x1b0>)
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	9600      	str	r6, [sp, #0]
 800836e:	2305      	movs	r3, #5
 8008370:	22a0      	movs	r2, #160	; 0xa0
 8008372:	4938      	ldr	r1, [pc, #224]	; (8008454 <MX_FREERTOS_Init+0x1b4>)
 8008374:	0028      	movs	r0, r5
 8008376:	f008 fa31 	bl	80107dc <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 800837a:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 800837c:	2101      	movs	r1, #1
 800837e:	a80d      	add	r0, sp, #52	; 0x34
 8008380:	f007 fba0 	bl	800fac4 <osSemaphoreCreate>
 8008384:	4e34      	ldr	r6, [pc, #208]	; (8008458 <MX_FREERTOS_Init+0x1b8>)
 8008386:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8008388:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 800838a:	2101      	movs	r1, #1
 800838c:	a80c      	add	r0, sp, #48	; 0x30
 800838e:	f007 fb99 	bl	800fac4 <osSemaphoreCreate>
 8008392:	4d32      	ldr	r5, [pc, #200]	; (800845c <MX_FREERTOS_Init+0x1bc>)
 8008394:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8008396:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008398:	2101      	movs	r1, #1
 800839a:	a80b      	add	r0, sp, #44	; 0x2c
 800839c:	f007 fb92 	bl	800fac4 <osSemaphoreCreate>
 80083a0:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 80083a2:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80083a4:	2101      	movs	r1, #1
 80083a6:	a80a      	add	r0, sp, #40	; 0x28
 80083a8:	f007 fb8c 	bl	800fac4 <osSemaphoreCreate>
 80083ac:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 80083ae:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80083b0:	2101      	movs	r1, #1
 80083b2:	a809      	add	r0, sp, #36	; 0x24
 80083b4:	f007 fb86 	bl	800fac4 <osSemaphoreCreate>
 80083b8:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 80083ba:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80083bc:	2101      	movs	r1, #1
 80083be:	a808      	add	r0, sp, #32
 80083c0:	f007 fb80 	bl	800fac4 <osSemaphoreCreate>
 80083c4:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 80083c6:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80083c8:	2101      	movs	r1, #1
 80083ca:	a807      	add	r0, sp, #28
 80083cc:	f007 fb7a 	bl	800fac4 <osSemaphoreCreate>
 80083d0:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 80083d2:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80083d4:	2101      	movs	r1, #1
 80083d6:	a806      	add	r0, sp, #24
 80083d8:	f007 fb74 	bl	800fac4 <osSemaphoreCreate>
 80083dc:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 80083de:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 80083e0:	2101      	movs	r1, #1
 80083e2:	a805      	add	r0, sp, #20
 80083e4:	f007 fb6e 	bl	800fac4 <osSemaphoreCreate>
 80083e8:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 80083ea:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80083ec:	2101      	movs	r1, #1
 80083ee:	a804      	add	r0, sp, #16
 80083f0:	f007 fb68 	bl	800fac4 <osSemaphoreCreate>
 80083f4:	6168      	str	r0, [r5, #20]
}
 80083f6:	b00e      	add	sp, #56	; 0x38
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	20001494 	.word	0x20001494
 8008400:	0801c558 	.word	0x0801c558
 8008404:	080081e9 	.word	0x080081e9
 8008408:	20001478 	.word	0x20001478
 800840c:	0801c564 	.word	0x0801c564
 8008410:	08009cd5 	.word	0x08009cd5
 8008414:	20001490 	.word	0x20001490
 8008418:	0801c570 	.word	0x0801c570
 800841c:	08014def 	.word	0x08014def
 8008420:	2000149c 	.word	0x2000149c
 8008424:	0801c57c 	.word	0x0801c57c
 8008428:	08005575 	.word	0x08005575
 800842c:	0800a059 	.word	0x0800a059
 8008430:	2000147c 	.word	0x2000147c
 8008434:	0801c584 	.word	0x0801c584
 8008438:	20001480 	.word	0x20001480
 800843c:	0801c590 	.word	0x0801c590
 8008440:	20001484 	.word	0x20001484
 8008444:	0801c59c 	.word	0x0801c59c
 8008448:	20001488 	.word	0x20001488
 800844c:	0801c5a8 	.word	0x0801c5a8
 8008450:	2000148c 	.word	0x2000148c
 8008454:	0801c5b4 	.word	0x0801c5b4
 8008458:	20006e3c 	.word	0x20006e3c
 800845c:	20006e20 	.word	0x20006e20

08008460 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008460:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	4904      	ldr	r1, [pc, #16]	; (8008478 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008468:	f7f7 fe72 	bl	8000150 <__udivsi3>
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800846e:	6018      	str	r0, [r3, #0]
}
 8008470:	bd10      	pop	{r4, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	200000b8 	.word	0x200000b8
 8008478:	00002710 	.word	0x00002710
 800847c:	20001498 	.word	0x20001498

08008480 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008480:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <ulMainGetRunTimeCounterValue+0x40>)
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	21fa      	movs	r1, #250	; 0xfa
 8008488:	0089      	lsls	r1, r1, #2
 800848a:	f7f7 fe61 	bl	8000150 <__udivsi3>
 800848e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <ulMainGetRunTimeCounterValue+0x44>)
 8008492:	681c      	ldr	r4, [r3, #0]
 8008494:	1b2c      	subs	r4, r5, r4
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008496:	f008 facb 	bl	8010a30 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <ulMainGetRunTimeCounterValue+0x48>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	015b      	lsls	r3, r3, #5
 80084a0:	d503      	bpl.n	80084aa <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80084a2:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <ulMainGetRunTimeCounterValue+0x44>)
 80084a6:	681c      	ldr	r4, [r3, #0]
 80084a8:	1b2c      	subs	r4, r5, r4
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 80084aa:	0083      	lsls	r3, r0, #2
 80084ac:	1818      	adds	r0, r3, r0
 80084ae:	0045      	lsls	r5, r0, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <ulMainGetRunTimeCounterValue+0x4c>)
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	0020      	movs	r0, r4
 80084b6:	f7f7 fe4b 	bl	8000150 <__udivsi3>
 80084ba:	1940      	adds	r0, r0, r5
	
	return ulReturn;
}
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	200000b8 	.word	0x200000b8
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	e000ed04 	.word	0xe000ed04
 80084cc:	20001498 	.word	0x20001498

080084d0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80084d0:	4770      	bx	lr
	...

080084d4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80084d4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80084d6:	00c2      	lsls	r2, r0, #3
 80084d8:	1812      	adds	r2, r2, r0
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <CheckForTimedButtonPress+0x68>)
 80084dc:	189b      	adds	r3, r3, r2
 80084de:	789a      	ldrb	r2, [r3, #2]
 80084e0:	78de      	ldrb	r6, [r3, #3]
 80084e2:	791c      	ldrb	r4, [r3, #4]
	
	/* Convert to ms */
	t1 *=1000;
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	1a89      	subs	r1, r1, r2
 80084e8:	0089      	lsls	r1, r1, #2
 80084ea:	1889      	adds	r1, r1, r2
 80084ec:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 80084ee:	0172      	lsls	r2, r6, #5
 80084f0:	1b92      	subs	r2, r2, r6
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	1992      	adds	r2, r2, r6
 80084f6:	00d3      	lsls	r3, r2, #3
 80084f8:	001a      	movs	r2, r3
	t3 *=1000;
 80084fa:	0163      	lsls	r3, r4, #5
 80084fc:	1b1b      	subs	r3, r3, r4
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	191b      	adds	r3, r3, r4
 8008502:	00d9      	lsls	r1, r3, #3
	
	if(pressCounter[port] == t1){
 8008504:	0084      	lsls	r4, r0, #2
 8008506:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <CheckForTimedButtonPress+0x6c>)
 8008508:	58e3      	ldr	r3, [r4, r3]
 800850a:	42ab      	cmp	r3, r5
 800850c:	d009      	beq.n	8008522 <CheckForTimedButtonPress+0x4e>
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 800850e:	4293      	cmp	r3, r2
 8008510:	d00e      	beq.n	8008530 <CheckForTimedButtonPress+0x5c>
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008512:	428b      	cmp	r3, r1
 8008514:	d10a      	bne.n	800852c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008516:	00c3      	lsls	r3, r0, #3
 8008518:	1818      	adds	r0, r3, r0
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <CheckForTimedButtonPress+0x68>)
 800851c:	220a      	movs	r2, #10
 800851e:	54c2      	strb	r2, [r0, r3]
 8008520:	e004      	b.n	800852c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X1_SEC;
 8008522:	00c3      	lsls	r3, r0, #3
 8008524:	1818      	adds	r0, r3, r0
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <CheckForTimedButtonPress+0x68>)
 8008528:	2209      	movs	r2, #9
 800852a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800852c:	2000      	movs	r0, #0
 800852e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008530:	00c3      	lsls	r3, r0, #3
 8008532:	1818      	adds	r0, r3, r0
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <CheckForTimedButtonPress+0x68>)
 8008536:	220a      	movs	r2, #10
 8008538:	54c2      	strb	r2, [r0, r3]
 800853a:	e7f7      	b.n	800852c <CheckForTimedButtonPress+0x58>
 800853c:	200014b4 	.word	0x200014b4
 8008540:	200014fc 	.word	0x200014fc

08008544 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008544:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008546:	00c2      	lsls	r2, r0, #3
 8008548:	1812      	adds	r2, r2, r0
 800854a:	4b18      	ldr	r3, [pc, #96]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 800854c:	189b      	adds	r3, r3, r2
 800854e:	795a      	ldrb	r2, [r3, #5]
 8008550:	799e      	ldrb	r6, [r3, #6]
 8008552:	79dc      	ldrb	r4, [r3, #7]
	
	/* Convert to ms */
	t1 *=1000;
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	1a89      	subs	r1, r1, r2
 8008558:	0089      	lsls	r1, r1, #2
 800855a:	1889      	adds	r1, r1, r2
 800855c:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 800855e:	0172      	lsls	r2, r6, #5
 8008560:	1b92      	subs	r2, r2, r6
 8008562:	0092      	lsls	r2, r2, #2
 8008564:	1992      	adds	r2, r2, r6
 8008566:	00d3      	lsls	r3, r2, #3
 8008568:	001a      	movs	r2, r3
	t3 *=1000;
 800856a:	0163      	lsls	r3, r4, #5
 800856c:	1b1b      	subs	r3, r3, r4
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	191b      	adds	r3, r3, r4
 8008572:	00d9      	lsls	r1, r3, #3
	
	if(releaseCounter[port] == t1){
 8008574:	0084      	lsls	r4, r0, #2
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <CheckForTimedButtonRelease+0x6c>)
 8008578:	58e3      	ldr	r3, [r4, r3]
 800857a:	42ab      	cmp	r3, r5
 800857c:	d009      	beq.n	8008592 <CheckForTimedButtonRelease+0x4e>
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 800857e:	4293      	cmp	r3, r2
 8008580:	d00e      	beq.n	80085a0 <CheckForTimedButtonRelease+0x5c>
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 8008582:	428b      	cmp	r3, r1
 8008584:	d10a      	bne.n	800859c <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008586:	00c3      	lsls	r3, r0, #3
 8008588:	1818      	adds	r0, r3, r0
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 800858c:	220d      	movs	r2, #13
 800858e:	54c2      	strb	r2, [r0, r3]
 8008590:	e004      	b.n	800859c <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y1_SEC;
 8008592:	00c3      	lsls	r3, r0, #3
 8008594:	1818      	adds	r0, r3, r0
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 8008598:	220c      	movs	r2, #12
 800859a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800859c:	2000      	movs	r0, #0
 800859e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 80085a0:	00c3      	lsls	r3, r0, #3
 80085a2:	1818      	adds	r0, r3, r0
 80085a4:	4b01      	ldr	r3, [pc, #4]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 80085a6:	220d      	movs	r2, #13
 80085a8:	54c2      	strb	r2, [r0, r3]
 80085aa:	e7f7      	b.n	800859c <CheckForTimedButtonRelease+0x58>
 80085ac:	200014b4 	.word	0x200014b4
 80085b0:	20001514 	.word	0x20001514

080085b4 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	b08d      	sub	sp, #52	; 0x34
 80085b8:	0006      	movs	r6, r0
 80085ba:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <AddPortButton+0x110>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d157      	bne.n	8008674 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80085c4:	4b40      	ldr	r3, [pc, #256]	; (80086c8 <AddPortButton+0x114>)
 80085c6:	2204      	movs	r2, #4
 80085c8:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80085ca:	4b3e      	ldr	r3, [pc, #248]	; (80086c4 <AddPortButton+0x110>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d15a      	bne.n	8008688 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80085d2:	2512      	movs	r5, #18
 80085d4:	446d      	add	r5, sp
 80085d6:	af04      	add	r7, sp, #16
 80085d8:	9700      	str	r7, [sp, #0]
 80085da:	ab05      	add	r3, sp, #20
 80085dc:	002a      	movs	r2, r5
 80085de:	a906      	add	r1, sp, #24
 80085e0:	0020      	movs	r0, r4
 80085e2:	f006 fbeb 	bl	800edbc <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80085e6:	882b      	ldrh	r3, [r5, #0]
 80085e8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ea:	2301      	movs	r3, #1
 80085ec:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2500      	movs	r5, #0
 80085f0:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80085f2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80085f4:	a907      	add	r1, sp, #28
 80085f6:	9806      	ldr	r0, [sp, #24]
 80085f8:	f00a fd8c 	bl	8013114 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80085fc:	883b      	ldrh	r3, [r7, #0]
 80085fe:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008600:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008602:	2302      	movs	r3, #2
 8008604:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008606:	a907      	add	r1, sp, #28
 8008608:	9805      	ldr	r0, [sp, #20]
 800860a:	f00a fd83 	bl	8013114 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 800860e:	00e2      	lsls	r2, r4, #3
 8008610:	1912      	adds	r2, r2, r4
 8008612:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <AddPortButton+0x118>)
 8008614:	189b      	adds	r3, r3, r2
 8008616:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008618:	0025      	movs	r5, r4
 800861a:	353a      	adds	r5, #58	; 0x3a
 800861c:	00ad      	lsls	r5, r5, #2
 800861e:	210e      	movs	r1, #14
 8008620:	4469      	add	r1, sp
 8008622:	0028      	movs	r0, r5
 8008624:	f7ff faf2 	bl	8007c0c <EE_ReadVariable>
	if(!res)											// This variable exists
 8008628:	2800      	cmp	r0, #0
 800862a:	d133      	bne.n	8008694 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 800862c:	230e      	movs	r3, #14
 800862e:	446b      	add	r3, sp
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008634:	091a      	lsrs	r2, r3, #4
 8008636:	42a2      	cmp	r2, r4
 8008638:	d103      	bne.n	8008642 <AddPortButton+0x8e>
 800863a:	220f      	movs	r2, #15
 800863c:	4013      	ands	r3, r2
 800863e:	42b3      	cmp	r3, r6
 8008640:	d015      	beq.n	800866e <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008642:	0324      	lsls	r4, r4, #12
 8008644:	0231      	lsls	r1, r6, #8
 8008646:	4321      	orrs	r1, r4
 8008648:	b289      	uxth	r1, r1
 800864a:	230e      	movs	r3, #14
 800864c:	446b      	add	r3, sp
 800864e:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008650:	0028      	movs	r0, r5
 8008652:	f7ff fb8d 	bl	8007d70 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008656:	1c68      	adds	r0, r5, #1
 8008658:	2100      	movs	r1, #0
 800865a:	f7ff fb89 	bl	8007d70 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800865e:	1ca8      	adds	r0, r5, #2
 8008660:	2100      	movs	r1, #0
 8008662:	f7ff fb85 	bl	8007d70 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008666:	1ce8      	adds	r0, r5, #3
 8008668:	2100      	movs	r1, #0
 800866a:	f7ff fb81 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 800866e:	2000      	movs	r0, #0
 8008670:	b00d      	add	sp, #52	; 0x34
 8008672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008674:	008d      	lsls	r5, r1, #2
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <AddPortButton+0x11c>)
 8008678:	58e8      	ldr	r0, [r5, r3]
 800867a:	f007 fa6f 	bl	800fb5c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <AddPortButton+0x120>)
 8008680:	58e8      	ldr	r0, [r5, r3]
 8008682:	f007 fa6b 	bl	800fb5c <osSemaphoreRelease>
 8008686:	e79d      	b.n	80085c4 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008688:	0020      	movs	r0, r4
 800868a:	f007 f8c1 	bl	800f810 <GetUart>
 800868e:	f00b fdf4 	bl	801427a <HAL_UART_DeInit>
 8008692:	e79e      	b.n	80085d2 <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008694:	0324      	lsls	r4, r4, #12
 8008696:	0231      	lsls	r1, r6, #8
 8008698:	4321      	orrs	r1, r4
 800869a:	b289      	uxth	r1, r1
 800869c:	230e      	movs	r3, #14
 800869e:	446b      	add	r3, sp
 80086a0:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80086a2:	0028      	movs	r0, r5
 80086a4:	f7ff fb64 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80086a8:	1c68      	adds	r0, r5, #1
 80086aa:	2100      	movs	r1, #0
 80086ac:	f7ff fb60 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80086b0:	1ca8      	adds	r0, r5, #2
 80086b2:	2100      	movs	r1, #0
 80086b4:	f7ff fb5c 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80086b8:	1ce8      	adds	r0, r5, #3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f7ff fb58 	bl	8007d70 <EE_WriteVariable>
 80086c0:	e7d5      	b.n	800866e <AddPortButton+0xba>
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	20000a9d 	.word	0x20000a9d
 80086c8:	200010e0 	.word	0x200010e0
 80086cc:	200014b4 	.word	0x200014b4
 80086d0:	20006e3c 	.word	0x20006e3c
 80086d4:	20006e20 	.word	0x20006e20

080086d8 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80086de:	4836      	ldr	r0, [pc, #216]	; (80087b8 <RemovePortButton+0xe0>)
 80086e0:	00e1      	lsls	r1, r4, #3
 80086e2:	1909      	adds	r1, r1, r4
 80086e4:	1842      	adds	r2, r0, r1
 80086e6:	2300      	movs	r3, #0
 80086e8:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80086ea:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80086ec:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80086ee:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80086f0:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80086f2:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80086f4:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80086f6:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80086f8:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80086fa:	0025      	movs	r5, r4
 80086fc:	353a      	adds	r5, #58	; 0x3a
 80086fe:	00ad      	lsls	r5, r5, #2
 8008700:	466b      	mov	r3, sp
 8008702:	1d99      	adds	r1, r3, #6
 8008704:	0028      	movs	r0, r5
 8008706:	f7ff fa81 	bl	8007c0c <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 800870a:	2800      	cmp	r0, #0
 800870c:	d01e      	beq.n	800874c <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 800870e:	0020      	movs	r0, r4
 8008710:	f007 f87e 	bl	800f810 <GetUart>
 8008714:	0005      	movs	r5, r0
	
	if(huart->Instance == USART1){
 8008716:	6803      	ldr	r3, [r0, #0]
 8008718:	4a28      	ldr	r2, [pc, #160]	; (80087bc <RemovePortButton+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d03d      	beq.n	800879a <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 800871e:	4a28      	ldr	r2, [pc, #160]	; (80087c0 <RemovePortButton+0xe8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d024      	beq.n	800876e <RemovePortButton+0x96>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008724:	4a27      	ldr	r2, [pc, #156]	; (80087c4 <RemovePortButton+0xec>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d025      	beq.n	8008776 <RemovePortButton+0x9e>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800872a:	4a27      	ldr	r2, [pc, #156]	; (80087c8 <RemovePortButton+0xf0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d026      	beq.n	800877e <RemovePortButton+0xa6>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <RemovePortButton+0xf4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d027      	beq.n	8008786 <RemovePortButton+0xae>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 8008736:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <RemovePortButton+0xf8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d028      	beq.n	800878e <RemovePortButton+0xb6>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 800873c:	4a25      	ldr	r2, [pc, #148]	; (80087d4 <RemovePortButton+0xfc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d037      	beq.n	80087b2 <RemovePortButton+0xda>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 8008742:	4a25      	ldr	r2, [pc, #148]	; (80087d8 <RemovePortButton+0x100>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d026      	beq.n	8008796 <RemovePortButton+0xbe>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	}
	else
		result =BOS_ERROR;
 8008748:	26ff      	movs	r6, #255	; 0xff
 800874a:	e027      	b.n	800879c <RemovePortButton+0xc4>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800874c:	2100      	movs	r1, #0
 800874e:	0028      	movs	r0, r5
 8008750:	f7ff fb0e 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008754:	1c68      	adds	r0, r5, #1
 8008756:	2100      	movs	r1, #0
 8008758:	f7ff fb0a 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800875c:	1ca8      	adds	r0, r5, #2
 800875e:	2100      	movs	r1, #0
 8008760:	f7ff fb06 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008764:	1ce8      	adds	r0, r5, #3
 8008766:	2100      	movs	r1, #0
 8008768:	f7ff fb02 	bl	8007d70 <EE_WriteVariable>
 800876c:	e7cf      	b.n	800870e <RemovePortButton+0x36>
		MX_USART2_UART_Init();
 800876e:	f006 fecd 	bl	800f50c <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008772:	2600      	movs	r6, #0
 8008774:	e012      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART3_UART_Init();
 8008776:	f006 fee1 	bl	800f53c <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 800877a:	2600      	movs	r6, #0
 800877c:	e00e      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART4_UART_Init();
 800877e:	f006 fef5 	bl	800f56c <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 8008782:	2600      	movs	r6, #0
 8008784:	e00a      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART5_UART_Init();
 8008786:	f006 ff09 	bl	800f59c <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 800878a:	2600      	movs	r6, #0
 800878c:	e006      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART6_UART_Init();
 800878e:	f006 ff1d 	bl	800f5cc <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 8008792:	2600      	movs	r6, #0
 8008794:	e002      	b.n	800879c <RemovePortButton+0xc4>
 8008796:	2600      	movs	r6, #0
 8008798:	e000      	b.n	800879c <RemovePortButton+0xc4>
 800879a:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <RemovePortButton+0x104>)
 800879e:	2200      	movs	r2, #0
 80087a0:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80087a2:	3201      	adds	r2, #1
 80087a4:	490e      	ldr	r1, [pc, #56]	; (80087e0 <RemovePortButton+0x108>)
 80087a6:	0028      	movs	r0, r5
 80087a8:	f00b fdc0 	bl	801432c <HAL_UART_Receive_IT>
	
	return result;
}
 80087ac:	0030      	movs	r0, r6
 80087ae:	b002      	add	sp, #8
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result =BOS_OK;
 80087b2:	2600      	movs	r6, #0
 80087b4:	e7f2      	b.n	800879c <RemovePortButton+0xc4>
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	200014b4 	.word	0x200014b4
 80087bc:	40013800 	.word	0x40013800
 80087c0:	40004400 	.word	0x40004400
 80087c4:	40004800 	.word	0x40004800
 80087c8:	40004c00 	.word	0x40004c00
 80087cc:	40005000 	.word	0x40005000
 80087d0:	40011400 	.word	0x40011400
 80087d4:	40011800 	.word	0x40011800
 80087d8:	40011c00 	.word	0x40011c00
 80087dc:	200010e0 	.word	0x200010e0
 80087e0:	20000e48 	.word	0x20000e48

080087e4 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	46de      	mov	lr, fp
 80087e8:	4657      	mov	r7, sl
 80087ea:	464e      	mov	r6, r9
 80087ec:	4645      	mov	r5, r8
 80087ee:	b5e0      	push	{r5, r6, r7, lr}
 80087f0:	b085      	sub	sp, #20
 80087f2:	0007      	movs	r7, r0
 80087f4:	469b      	mov	fp, r3
 80087f6:	ab0e      	add	r3, sp, #56	; 0x38
 80087f8:	781e      	ldrb	r6, [r3, #0]
 80087fa:	ab0f      	add	r3, sp, #60	; 0x3c
 80087fc:	781d      	ldrb	r5, [r3, #0]
 80087fe:	ab10      	add	r3, sp, #64	; 0x40
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	469a      	mov	sl, r3
 8008804:	ab11      	add	r3, sp, #68	; 0x44
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4699      	mov	r9, r3
 800880a:	ab12      	add	r3, sp, #72	; 0x48
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4698      	mov	r8, r3
 8008810:	ab13      	add	r3, sp, #76	; 0x4c
 8008812:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008814:	00c4      	lsls	r4, r0, #3
 8008816:	1824      	adds	r4, r4, r0
 8008818:	48b3      	ldr	r0, [pc, #716]	; (8008ae8 <SetButtonEvents+0x304>)
 800881a:	1900      	adds	r0, r0, r4
 800881c:	7840      	ldrb	r0, [r0, #1]
 800881e:	2800      	cmp	r0, #0
 8008820:	d100      	bne.n	8008824 <SetButtonEvents+0x40>
 8008822:	e155      	b.n	8008ad0 <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008824:	00fc      	lsls	r4, r7, #3
 8008826:	19e4      	adds	r4, r4, r7
 8008828:	48af      	ldr	r0, [pc, #700]	; (8008ae8 <SetButtonEvents+0x304>)
 800882a:	1900      	adds	r0, r0, r4
 800882c:	465c      	mov	r4, fp
 800882e:	7084      	strb	r4, [r0, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008830:	70c6      	strb	r6, [r0, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 8008832:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008834:	4654      	mov	r4, sl
 8008836:	7144      	strb	r4, [r0, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008838:	464c      	mov	r4, r9
 800883a:	7184      	strb	r4, [r0, #6]
	button[port].releasedY3Sec =released_y3sec;
 800883c:	4644      	mov	r4, r8
 800883e:	71c4      	strb	r4, [r0, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 8008840:	2b01      	cmp	r3, #1
 8008842:	d005      	beq.n	8008850 <SetButtonEvents+0x6c>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d000      	beq.n	800884a <SetButtonEvents+0x66>
 8008848:	e0ca      	b.n	80089e0 <SetButtonEvents+0x1fc>
 800884a:	2900      	cmp	r1, #0
 800884c:	d100      	bne.n	8008850 <SetButtonEvents+0x6c>
 800884e:	e0c7      	b.n	80089e0 <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008850:	00f8      	lsls	r0, r7, #3
 8008852:	19c0      	adds	r0, r0, r7
 8008854:	49a4      	ldr	r1, [pc, #656]	; (8008ae8 <SetButtonEvents+0x304>)
 8008856:	1809      	adds	r1, r1, r0
 8008858:	7a08      	ldrb	r0, [r1, #8]
 800885a:	2401      	movs	r4, #1
 800885c:	4320      	orrs	r0, r4
 800885e:	7208      	strb	r0, [r1, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008860:	2b01      	cmp	r3, #1
 8008862:	d005      	beq.n	8008870 <SetButtonEvents+0x8c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d000      	beq.n	800886a <SetButtonEvents+0x86>
 8008868:	e0c6      	b.n	80089f8 <SetButtonEvents+0x214>
 800886a:	2a00      	cmp	r2, #0
 800886c:	d100      	bne.n	8008870 <SetButtonEvents+0x8c>
 800886e:	e0c3      	b.n	80089f8 <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008870:	00f9      	lsls	r1, r7, #3
 8008872:	19c9      	adds	r1, r1, r7
 8008874:	4a9c      	ldr	r2, [pc, #624]	; (8008ae8 <SetButtonEvents+0x304>)
 8008876:	1852      	adds	r2, r2, r1
 8008878:	7a11      	ldrb	r1, [r2, #8]
 800887a:	2002      	movs	r0, #2
 800887c:	4301      	orrs	r1, r0
 800887e:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008880:	2b01      	cmp	r3, #1
 8008882:	d006      	beq.n	8008892 <SetButtonEvents+0xae>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d000      	beq.n	800888a <SetButtonEvents+0xa6>
 8008888:	e0c2      	b.n	8008a10 <SetButtonEvents+0x22c>
 800888a:	465a      	mov	r2, fp
 800888c:	2a00      	cmp	r2, #0
 800888e:	d100      	bne.n	8008892 <SetButtonEvents+0xae>
 8008890:	e0be      	b.n	8008a10 <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008892:	00f9      	lsls	r1, r7, #3
 8008894:	19c9      	adds	r1, r1, r7
 8008896:	4a94      	ldr	r2, [pc, #592]	; (8008ae8 <SetButtonEvents+0x304>)
 8008898:	1852      	adds	r2, r2, r1
 800889a:	7a11      	ldrb	r1, [r2, #8]
 800889c:	2004      	movs	r0, #4
 800889e:	4301      	orrs	r1, r0
 80088a0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d005      	beq.n	80088b2 <SetButtonEvents+0xce>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d000      	beq.n	80088ac <SetButtonEvents+0xc8>
 80088aa:	e0be      	b.n	8008a2a <SetButtonEvents+0x246>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d100      	bne.n	80088b2 <SetButtonEvents+0xce>
 80088b0:	e0bb      	b.n	8008a2a <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80088b2:	00f9      	lsls	r1, r7, #3
 80088b4:	19c9      	adds	r1, r1, r7
 80088b6:	4a8c      	ldr	r2, [pc, #560]	; (8008ae8 <SetButtonEvents+0x304>)
 80088b8:	1852      	adds	r2, r2, r1
 80088ba:	7a11      	ldrb	r1, [r2, #8]
 80088bc:	2008      	movs	r0, #8
 80088be:	4301      	orrs	r1, r0
 80088c0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d005      	beq.n	80088d2 <SetButtonEvents+0xee>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d000      	beq.n	80088cc <SetButtonEvents+0xe8>
 80088ca:	e0bb      	b.n	8008a44 <SetButtonEvents+0x260>
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	d100      	bne.n	80088d2 <SetButtonEvents+0xee>
 80088d0:	e0b8      	b.n	8008a44 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80088d2:	00f9      	lsls	r1, r7, #3
 80088d4:	19c9      	adds	r1, r1, r7
 80088d6:	4a84      	ldr	r2, [pc, #528]	; (8008ae8 <SetButtonEvents+0x304>)
 80088d8:	1852      	adds	r2, r2, r1
 80088da:	7a11      	ldrb	r1, [r2, #8]
 80088dc:	2010      	movs	r0, #16
 80088de:	4301      	orrs	r1, r0
 80088e0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d006      	beq.n	80088f4 <SetButtonEvents+0x110>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d000      	beq.n	80088ec <SetButtonEvents+0x108>
 80088ea:	e0b8      	b.n	8008a5e <SetButtonEvents+0x27a>
 80088ec:	4652      	mov	r2, sl
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d100      	bne.n	80088f4 <SetButtonEvents+0x110>
 80088f2:	e0b4      	b.n	8008a5e <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80088f4:	00f9      	lsls	r1, r7, #3
 80088f6:	19c9      	adds	r1, r1, r7
 80088f8:	4a7b      	ldr	r2, [pc, #492]	; (8008ae8 <SetButtonEvents+0x304>)
 80088fa:	1852      	adds	r2, r2, r1
 80088fc:	7a11      	ldrb	r1, [r2, #8]
 80088fe:	2020      	movs	r0, #32
 8008900:	4301      	orrs	r1, r0
 8008902:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008904:	2b01      	cmp	r3, #1
 8008906:	d006      	beq.n	8008916 <SetButtonEvents+0x132>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d000      	beq.n	800890e <SetButtonEvents+0x12a>
 800890c:	e0b4      	b.n	8008a78 <SetButtonEvents+0x294>
 800890e:	464a      	mov	r2, r9
 8008910:	2a00      	cmp	r2, #0
 8008912:	d100      	bne.n	8008916 <SetButtonEvents+0x132>
 8008914:	e0b0      	b.n	8008a78 <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008916:	00f9      	lsls	r1, r7, #3
 8008918:	19c9      	adds	r1, r1, r7
 800891a:	4a73      	ldr	r2, [pc, #460]	; (8008ae8 <SetButtonEvents+0x304>)
 800891c:	1852      	adds	r2, r2, r1
 800891e:	7a11      	ldrb	r1, [r2, #8]
 8008920:	2040      	movs	r0, #64	; 0x40
 8008922:	4301      	orrs	r1, r0
 8008924:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008926:	2b01      	cmp	r3, #1
 8008928:	d006      	beq.n	8008938 <SetButtonEvents+0x154>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d000      	beq.n	8008930 <SetButtonEvents+0x14c>
 800892e:	e0b0      	b.n	8008a92 <SetButtonEvents+0x2ae>
 8008930:	4642      	mov	r2, r8
 8008932:	2a00      	cmp	r2, #0
 8008934:	d100      	bne.n	8008938 <SetButtonEvents+0x154>
 8008936:	e0ac      	b.n	8008a92 <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008938:	00fa      	lsls	r2, r7, #3
 800893a:	19d2      	adds	r2, r2, r7
 800893c:	4b6a      	ldr	r3, [pc, #424]	; (8008ae8 <SetButtonEvents+0x304>)
 800893e:	189b      	adds	r3, r3, r2
 8008940:	7a19      	ldrb	r1, [r3, #8]
 8008942:	2280      	movs	r2, #128	; 0x80
 8008944:	4252      	negs	r2, r2
 8008946:	430a      	orrs	r2, r1
 8008948:	721a      	strb	r2, [r3, #8]
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	
	/* Add to EEPROM */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800894a:	003c      	movs	r4, r7
 800894c:	343a      	adds	r4, #58	; 0x3a
 800894e:	00a4      	lsls	r4, r4, #2
 8008950:	ab02      	add	r3, sp, #8
 8008952:	1d99      	adds	r1, r3, #6
 8008954:	0020      	movs	r0, r4
 8008956:	f7ff f959 	bl	8007c0c <EE_ReadVariable>
	if(!res)											// This variable exists
 800895a:	2800      	cmp	r0, #0
 800895c:	d000      	beq.n	8008960 <SetButtonEvents+0x17c>
 800895e:	e0bf      	b.n	8008ae0 <SetButtonEvents+0x2fc>
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 8008960:	ab02      	add	r3, sp, #8
 8008962:	3306      	adds	r3, #6
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 8008968:	b2db      	uxtb	r3, r3
 800896a:	00fa      	lsls	r2, r7, #3
 800896c:	19d2      	adds	r2, r2, r7
 800896e:	4f5e      	ldr	r7, [pc, #376]	; (8008ae8 <SetButtonEvents+0x304>)
 8008970:	18bf      	adds	r7, r7, r2
 8008972:	7a39      	ldrb	r1, [r7, #8]
 8008974:	428b      	cmp	r3, r1
 8008976:	d000      	beq.n	800897a <SetButtonEvents+0x196>
 8008978:	e098      	b.n	8008aac <SetButtonEvents+0x2c8>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 800897a:	1c63      	adds	r3, r4, #1
 800897c:	aa02      	add	r2, sp, #8
 800897e:	1d97      	adds	r7, r2, #6
 8008980:	0039      	movs	r1, r7
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	0018      	movs	r0, r3
 8008986:	f7ff f941 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 800898a:	883a      	ldrh	r2, [r7, #0]
 800898c:	4659      	mov	r1, fp
 800898e:	0209      	lsls	r1, r1, #8
 8008990:	4653      	mov	r3, sl
 8008992:	430b      	orrs	r3, r1
 8008994:	429a      	cmp	r2, r3
 8008996:	d000      	beq.n	800899a <SetButtonEvents+0x1b6>
 8008998:	e090      	b.n	8008abc <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800899a:	1ca3      	adds	r3, r4, #2
 800899c:	aa02      	add	r2, sp, #8
 800899e:	1d97      	adds	r7, r2, #6
 80089a0:	0039      	movs	r1, r7
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7ff f931 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80089aa:	883a      	ldrh	r2, [r7, #0]
 80089ac:	0236      	lsls	r6, r6, #8
 80089ae:	464b      	mov	r3, r9
 80089b0:	4333      	orrs	r3, r6
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d000      	beq.n	80089b8 <SetButtonEvents+0x1d4>
 80089b6:	e086      	b.n	8008ac6 <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 80089b8:	3403      	adds	r4, #3
 80089ba:	ab02      	add	r3, sp, #8
 80089bc:	1d9e      	adds	r6, r3, #6
 80089be:	0031      	movs	r1, r6
 80089c0:	0020      	movs	r0, r4
 80089c2:	f7ff f923 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80089c6:	8832      	ldrh	r2, [r6, #0]
 80089c8:	022d      	lsls	r5, r5, #8
 80089ca:	4643      	mov	r3, r8
 80089cc:	432b      	orrs	r3, r5
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d100      	bne.n	80089d4 <SetButtonEvents+0x1f0>
 80089d2:	e087      	b.n	8008ae4 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 80089d4:	0019      	movs	r1, r3
 80089d6:	0020      	movs	r0, r4
 80089d8:	f7ff f9ca 	bl	8007d70 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
 80089dc:	2000      	movs	r0, #0
 80089de:	e078      	b.n	8008ad2 <SetButtonEvents+0x2ee>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
 80089e0:	4319      	orrs	r1, r3
 80089e2:	d000      	beq.n	80089e6 <SetButtonEvents+0x202>
 80089e4:	e73c      	b.n	8008860 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80089e6:	00f8      	lsls	r0, r7, #3
 80089e8:	19c0      	adds	r0, r0, r7
 80089ea:	493f      	ldr	r1, [pc, #252]	; (8008ae8 <SetButtonEvents+0x304>)
 80089ec:	1809      	adds	r1, r1, r0
 80089ee:	7a08      	ldrb	r0, [r1, #8]
 80089f0:	2401      	movs	r4, #1
 80089f2:	43a0      	bics	r0, r4
 80089f4:	7208      	strb	r0, [r1, #8]
 80089f6:	e733      	b.n	8008860 <SetButtonEvents+0x7c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
 80089f8:	431a      	orrs	r2, r3
 80089fa:	d000      	beq.n	80089fe <SetButtonEvents+0x21a>
 80089fc:	e740      	b.n	8008880 <SetButtonEvents+0x9c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80089fe:	00f9      	lsls	r1, r7, #3
 8008a00:	19c9      	adds	r1, r1, r7
 8008a02:	4a39      	ldr	r2, [pc, #228]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a04:	1852      	adds	r2, r2, r1
 8008a06:	7a11      	ldrb	r1, [r2, #8]
 8008a08:	2002      	movs	r0, #2
 8008a0a:	4381      	bics	r1, r0
 8008a0c:	7211      	strb	r1, [r2, #8]
 8008a0e:	e737      	b.n	8008880 <SetButtonEvents+0x9c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
 8008a10:	465a      	mov	r2, fp
 8008a12:	431a      	orrs	r2, r3
 8008a14:	d000      	beq.n	8008a18 <SetButtonEvents+0x234>
 8008a16:	e744      	b.n	80088a2 <SetButtonEvents+0xbe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008a18:	00f9      	lsls	r1, r7, #3
 8008a1a:	19c9      	adds	r1, r1, r7
 8008a1c:	4a32      	ldr	r2, [pc, #200]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a1e:	1852      	adds	r2, r2, r1
 8008a20:	7a11      	ldrb	r1, [r2, #8]
 8008a22:	2004      	movs	r0, #4
 8008a24:	4381      	bics	r1, r0
 8008a26:	7211      	strb	r1, [r2, #8]
 8008a28:	e73b      	b.n	80088a2 <SetButtonEvents+0xbe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
 8008a2a:	0032      	movs	r2, r6
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	d000      	beq.n	8008a32 <SetButtonEvents+0x24e>
 8008a30:	e747      	b.n	80088c2 <SetButtonEvents+0xde>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008a32:	00f9      	lsls	r1, r7, #3
 8008a34:	19c9      	adds	r1, r1, r7
 8008a36:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a38:	1852      	adds	r2, r2, r1
 8008a3a:	7a11      	ldrb	r1, [r2, #8]
 8008a3c:	2008      	movs	r0, #8
 8008a3e:	4381      	bics	r1, r0
 8008a40:	7211      	strb	r1, [r2, #8]
 8008a42:	e73e      	b.n	80088c2 <SetButtonEvents+0xde>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
 8008a44:	002a      	movs	r2, r5
 8008a46:	431a      	orrs	r2, r3
 8008a48:	d000      	beq.n	8008a4c <SetButtonEvents+0x268>
 8008a4a:	e74a      	b.n	80088e2 <SetButtonEvents+0xfe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008a4c:	00f9      	lsls	r1, r7, #3
 8008a4e:	19c9      	adds	r1, r1, r7
 8008a50:	4a25      	ldr	r2, [pc, #148]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a52:	1852      	adds	r2, r2, r1
 8008a54:	7a11      	ldrb	r1, [r2, #8]
 8008a56:	2010      	movs	r0, #16
 8008a58:	4381      	bics	r1, r0
 8008a5a:	7211      	strb	r1, [r2, #8]
 8008a5c:	e741      	b.n	80088e2 <SetButtonEvents+0xfe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
 8008a5e:	4652      	mov	r2, sl
 8008a60:	431a      	orrs	r2, r3
 8008a62:	d000      	beq.n	8008a66 <SetButtonEvents+0x282>
 8008a64:	e74e      	b.n	8008904 <SetButtonEvents+0x120>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008a66:	00f9      	lsls	r1, r7, #3
 8008a68:	19c9      	adds	r1, r1, r7
 8008a6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a6c:	1852      	adds	r2, r2, r1
 8008a6e:	7a11      	ldrb	r1, [r2, #8]
 8008a70:	2020      	movs	r0, #32
 8008a72:	4381      	bics	r1, r0
 8008a74:	7211      	strb	r1, [r2, #8]
 8008a76:	e745      	b.n	8008904 <SetButtonEvents+0x120>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
 8008a78:	464a      	mov	r2, r9
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	d000      	beq.n	8008a80 <SetButtonEvents+0x29c>
 8008a7e:	e752      	b.n	8008926 <SetButtonEvents+0x142>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a80:	00f9      	lsls	r1, r7, #3
 8008a82:	19c9      	adds	r1, r1, r7
 8008a84:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a86:	1852      	adds	r2, r2, r1
 8008a88:	7a11      	ldrb	r1, [r2, #8]
 8008a8a:	2040      	movs	r0, #64	; 0x40
 8008a8c:	4381      	bics	r1, r0
 8008a8e:	7211      	strb	r1, [r2, #8]
 8008a90:	e749      	b.n	8008926 <SetButtonEvents+0x142>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
 8008a92:	4642      	mov	r2, r8
 8008a94:	4313      	orrs	r3, r2
 8008a96:	d000      	beq.n	8008a9a <SetButtonEvents+0x2b6>
 8008a98:	e757      	b.n	800894a <SetButtonEvents+0x166>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008a9a:	00fa      	lsls	r2, r7, #3
 8008a9c:	19d2      	adds	r2, r2, r7
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <SetButtonEvents+0x304>)
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	7a19      	ldrb	r1, [r3, #8]
 8008aa4:	227f      	movs	r2, #127	; 0x7f
 8008aa6:	400a      	ands	r2, r1
 8008aa8:	721a      	strb	r2, [r3, #8]
 8008aaa:	e74e      	b.n	800894a <SetButtonEvents+0x166>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008aac:	0200      	lsls	r0, r0, #8
 8008aae:	4301      	orrs	r1, r0
 8008ab0:	ab02      	add	r3, sp, #8
 8008ab2:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008ab4:	0020      	movs	r0, r4
 8008ab6:	f7ff f95b 	bl	8007d70 <EE_WriteVariable>
 8008aba:	e75e      	b.n	800897a <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 8008abc:	0019      	movs	r1, r3
 8008abe:	9801      	ldr	r0, [sp, #4]
 8008ac0:	f7ff f956 	bl	8007d70 <EE_WriteVariable>
 8008ac4:	e769      	b.n	800899a <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	9801      	ldr	r0, [sp, #4]
 8008aca:	f7ff f951 	bl	8007d70 <EE_WriteVariable>
 8008ace:	e773      	b.n	80089b8 <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008ad0:	200b      	movs	r0, #11
}
 8008ad2:	b005      	add	sp, #20
 8008ad4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ad6:	4690      	mov	r8, r2
 8008ad8:	4699      	mov	r9, r3
 8008ada:	46a2      	mov	sl, r4
 8008adc:	46ab      	mov	fp, r5
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008ae0:	200b      	movs	r0, #11
 8008ae2:	e7f6      	b.n	8008ad2 <SetButtonEvents+0x2ee>
	return result;
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e7f4      	b.n	8008ad2 <SetButtonEvents+0x2ee>
 8008ae8:	200014b4 	.word	0x200014b4

08008aec <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008af2:	2214      	movs	r2, #20
 8008af4:	2100      	movs	r1, #0
 8008af6:	a803      	add	r0, sp, #12
 8008af8:	f00c fc18 	bl	801532c <memset>
	if(adcHandle->Instance == ADC1){
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <HAL_ADC_MspInit+0x58>)
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008b04:	b008      	add	sp, #32
 8008b06:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <HAL_ADC_MspInit+0x5c>)
 8008b0a:	6999      	ldr	r1, [r3, #24]
 8008b0c:	2080      	movs	r0, #128	; 0x80
 8008b0e:	0080      	lsls	r0, r0, #2
 8008b10:	4301      	orrs	r1, r0
 8008b12:	6199      	str	r1, [r3, #24]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	4002      	ands	r2, r0
 8008b18:	9201      	str	r2, [sp, #4]
 8008b1a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1c:	695a      	ldr	r2, [r3, #20]
 8008b1e:	2180      	movs	r1, #128	; 0x80
 8008b20:	0289      	lsls	r1, r1, #10
 8008b22:	430a      	orrs	r2, r1
 8008b24:	615a      	str	r2, [r3, #20]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	400b      	ands	r3, r1
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008b2e:	233c      	movs	r3, #60	; 0x3c
 8008b30:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b32:	3b39      	subs	r3, #57	; 0x39
 8008b34:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008b36:	3871      	subs	r0, #113	; 0x71
 8008b38:	38ff      	subs	r0, #255	; 0xff
 8008b3a:	a903      	add	r1, sp, #12
 8008b3c:	05c0      	lsls	r0, r0, #23
 8008b3e:	f00a fae9 	bl	8013114 <HAL_GPIO_Init>
}
 8008b42:	e7df      	b.n	8008b04 <HAL_ADC_MspInit+0x18>
 8008b44:	40012400 	.word	0x40012400
 8008b48:	40021000 	.word	0x40021000

08008b4c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	4a10      	ldr	r2, [pc, #64]	; (8008b90 <Get_channel+0x44>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d009      	beq.n	8008b68 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
 8008b54:	4a0e      	ldr	r2, [pc, #56]	; (8008b90 <Get_channel+0x44>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00b      	beq.n	8008b72 <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 8008b5a:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <Get_channel+0x48>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00d      	beq.n	8008b7c <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
 8008b60:	4a0c      	ldr	r2, [pc, #48]	; (8008b94 <Get_channel+0x48>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 8008b66:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008b68:	4a0b      	ldr	r2, [pc, #44]	; (8008b98 <Get_channel+0x4c>)
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	d1f2      	bne.n	8008b54 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 8008b6e:	2002      	movs	r0, #2
 8008b70:	e7f9      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART2 && side == "bottom")
 8008b72:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <Get_channel+0x50>)
 8008b74:	4291      	cmp	r1, r2
 8008b76:	d1f0      	bne.n	8008b5a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008b78:	2003      	movs	r0, #3
 8008b7a:	e7f4      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "top")
 8008b7c:	4a06      	ldr	r2, [pc, #24]	; (8008b98 <Get_channel+0x4c>)
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	d1ee      	bne.n	8008b60 <Get_channel+0x14>
		return ADC_CHANNEL_4;
 8008b82:	2004      	movs	r0, #4
 8008b84:	e7ef      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "bottom")
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <Get_channel+0x50>)
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d1ec      	bne.n	8008b66 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 8008b8c:	2005      	movs	r0, #5
 8008b8e:	e7ea      	b.n	8008b66 <Get_channel+0x1a>
 8008b90:	40004400 	.word	0x40004400
 8008b94:	40011400 	.word	0x40011400
 8008b98:	0801a74c 	.word	0x0801a74c
 8008b9c:	0801a750 	.word	0x0801a750

08008ba0 <Error_Handler>:

void Error_Handler(void){
 8008ba0:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 8008ba2:	2064      	movs	r0, #100	; 0x64
 8008ba4:	f009 f802 	bl	8011bac <HAL_Delay>
	
}
 8008ba8:	bd10      	pop	{r4, pc}
	...

08008bac <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008bac:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008bae:	4811      	ldr	r0, [pc, #68]	; (8008bf4 <MX_ADC_Init+0x48>)
 8008bb0:	4b11      	ldr	r3, [pc, #68]	; (8008bf8 <MX_ADC_Init+0x4c>)
 8008bb2:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	061b      	lsls	r3, r3, #24
 8008bb8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008bbe:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008bc4:	2104      	movs	r1, #4
 8008bc6:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008bc8:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008bca:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008bcc:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008bce:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008bd0:	21c2      	movs	r1, #194	; 0xc2
 8008bd2:	31ff      	adds	r1, #255	; 0xff
 8008bd4:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008bd6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008bd8:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008bda:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008bdc:	f009 f8c0 	bl	8011d60 <HAL_ADC_Init>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d103      	bne.n	8008bec <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <MX_ADC_Init+0x50>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
}
 8008bea:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008bec:	f7ff ffd8 	bl	8008ba0 <Error_Handler>
 8008bf0:	e7f8      	b.n	8008be4 <MX_ADC_Init+0x38>
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	20006e58 	.word	0x20006e58
 8008bf8:	40012400 	.word	0x40012400
 8008bfc:	200014a0 	.word	0x200014a0

08008c00 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	0005      	movs	r5, r0
 8008c06:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 8008c08:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <ReadTempAndVref+0x13c>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d100      	bne.n	8008c12 <ReadTempAndVref+0x12>
 8008c10:	e085      	b.n	8008d1e <ReadTempAndVref+0x11e>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c12:	494b      	ldr	r1, [pc, #300]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c14:	2310      	movs	r3, #16
 8008c16:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	015b      	lsls	r3, r3, #5
 8008c1c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c22:	4848      	ldr	r0, [pc, #288]	; (8008d44 <ReadTempAndVref+0x144>)
 8008c24:	f009 fa0a 	bl	801203c <HAL_ADC_ConfigChannel>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d000      	beq.n	8008c2e <ReadTempAndVref+0x2e>
 8008c2c:	e07a      	b.n	8008d24 <ReadTempAndVref+0x124>
	HAL_ADC_Start(&hadc);
 8008c2e:	4c45      	ldr	r4, [pc, #276]	; (8008d44 <ReadTempAndVref+0x144>)
 8008c30:	0020      	movs	r0, r4
 8008c32:	f009 f949 	bl	8011ec8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008c36:	2164      	movs	r1, #100	; 0x64
 8008c38:	0020      	movs	r0, r4
 8008c3a:	f009 f997 	bl	8011f6c <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008c3e:	0020      	movs	r0, r4
 8008c40:	f009 f9f6 	bl	8012030 <HAL_ADC_GetValue>
 8008c44:	b280      	uxth	r0, r0
 8008c46:	4b40      	ldr	r3, [pc, #256]	; (8008d48 <ReadTempAndVref+0x148>)
 8008c48:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008c4a:	f7fa f9ff 	bl	800304c <__aeabi_i2d>
 8008c4e:	4a3f      	ldr	r2, [pc, #252]	; (8008d4c <ReadTempAndVref+0x14c>)
 8008c50:	4b3f      	ldr	r3, [pc, #252]	; (8008d50 <ReadTempAndVref+0x150>)
 8008c52:	f7f9 fbef 	bl	8002434 <__aeabi_dmul>
 8008c56:	2200      	movs	r2, #0
 8008c58:	4b3e      	ldr	r3, [pc, #248]	; (8008d54 <ReadTempAndVref+0x154>)
 8008c5a:	f7f8 ffe1 	bl	8001c20 <__aeabi_ddiv>
 8008c5e:	4a3e      	ldr	r2, [pc, #248]	; (8008d58 <ReadTempAndVref+0x158>)
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <ReadTempAndVref+0x15c>)
 8008c62:	f7f9 fe59 	bl	8002918 <__aeabi_dsub>
 8008c66:	4a3e      	ldr	r2, [pc, #248]	; (8008d60 <ReadTempAndVref+0x160>)
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <ReadTempAndVref+0x164>)
 8008c6a:	f7f8 ffd9 	bl	8001c20 <__aeabi_ddiv>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4b3d      	ldr	r3, [pc, #244]	; (8008d68 <ReadTempAndVref+0x168>)
 8008c72:	f7f8 fcb9 	bl	80015e8 <__aeabi_dadd>
 8008c76:	f7fa faa7 	bl	80031c8 <__aeabi_d2f>
 8008c7a:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008c7c:	0020      	movs	r0, r4
 8008c7e:	f009 f953 	bl	8011f28 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c82:	492f      	ldr	r1, [pc, #188]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c84:	2310      	movs	r3, #16
 8008c86:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c88:	4b38      	ldr	r3, [pc, #224]	; (8008d6c <ReadTempAndVref+0x16c>)
 8008c8a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c90:	0020      	movs	r0, r4
 8008c92:	f009 f9d3 	bl	801203c <HAL_ADC_ConfigChannel>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d147      	bne.n	8008d2a <ReadTempAndVref+0x12a>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c9a:	4929      	ldr	r1, [pc, #164]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c9c:	2311      	movs	r3, #17
 8008c9e:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008ca0:	2380      	movs	r3, #128	; 0x80
 8008ca2:	015b      	lsls	r3, r3, #5
 8008ca4:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008ca6:	2305      	movs	r3, #5
 8008ca8:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008caa:	4826      	ldr	r0, [pc, #152]	; (8008d44 <ReadTempAndVref+0x144>)
 8008cac:	f009 f9c6 	bl	801203c <HAL_ADC_ConfigChannel>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d13d      	bne.n	8008d30 <ReadTempAndVref+0x130>
	HAL_ADC_Start(&hadc);
 8008cb4:	4c23      	ldr	r4, [pc, #140]	; (8008d44 <ReadTempAndVref+0x144>)
 8008cb6:	0020      	movs	r0, r4
 8008cb8:	f009 f906 	bl	8011ec8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008cbc:	2164      	movs	r1, #100	; 0x64
 8008cbe:	0020      	movs	r0, r4
 8008cc0:	f009 f954 	bl	8011f6c <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008cc4:	0020      	movs	r0, r4
 8008cc6:	f009 f9b3 	bl	8012030 <HAL_ADC_GetValue>
 8008cca:	b285      	uxth	r5, r0
 8008ccc:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <ReadTempAndVref+0x170>)
 8008cce:	801d      	strh	r5, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <ReadTempAndVref+0x174>)
 8008cd2:	8818      	ldrh	r0, [r3, #0]
 8008cd4:	f7fa f9ba 	bl	800304c <__aeabi_i2d>
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <ReadTempAndVref+0x14c>)
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <ReadTempAndVref+0x150>)
 8008cdc:	f7f9 fbaa 	bl	8002434 <__aeabi_dmul>
 8008ce0:	9000      	str	r0, [sp, #0]
 8008ce2:	9101      	str	r1, [sp, #4]
 8008ce4:	0028      	movs	r0, r5
 8008ce6:	f7fa f9b1 	bl	800304c <__aeabi_i2d>
 8008cea:	0002      	movs	r2, r0
 8008cec:	000b      	movs	r3, r1
 8008cee:	9800      	ldr	r0, [sp, #0]
 8008cf0:	9901      	ldr	r1, [sp, #4]
 8008cf2:	f7f8 ff95 	bl	8001c20 <__aeabi_ddiv>
 8008cf6:	f7fa fa67 	bl	80031c8 <__aeabi_d2f>
 8008cfa:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008cfc:	0020      	movs	r0, r4
 8008cfe:	f009 f913 	bl	8011f28 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008d02:	490f      	ldr	r1, [pc, #60]	; (8008d40 <ReadTempAndVref+0x140>)
 8008d04:	2311      	movs	r3, #17
 8008d06:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008d08:	4b18      	ldr	r3, [pc, #96]	; (8008d6c <ReadTempAndVref+0x16c>)
 8008d0a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d10:	0020      	movs	r0, r4
 8008d12:	f009 f993 	bl	801203c <HAL_ADC_ConfigChannel>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d10d      	bne.n	8008d36 <ReadTempAndVref+0x136>
}
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008d1e:	f7ff ff45 	bl	8008bac <MX_ADC_Init>
 8008d22:	e776      	b.n	8008c12 <ReadTempAndVref+0x12>
		Error_Handler();
 8008d24:	f7ff ff3c 	bl	8008ba0 <Error_Handler>
 8008d28:	e781      	b.n	8008c2e <ReadTempAndVref+0x2e>
		Error_Handler();
 8008d2a:	f7ff ff39 	bl	8008ba0 <Error_Handler>
 8008d2e:	e7b4      	b.n	8008c9a <ReadTempAndVref+0x9a>
		Error_Handler();
 8008d30:	f7ff ff36 	bl	8008ba0 <Error_Handler>
 8008d34:	e7be      	b.n	8008cb4 <ReadTempAndVref+0xb4>
		Error_Handler();
 8008d36:	f7ff ff33 	bl	8008ba0 <Error_Handler>
}
 8008d3a:	e7ee      	b.n	8008d1a <ReadTempAndVref+0x11a>
 8008d3c:	200014a0 	.word	0x200014a0
 8008d40:	2000152c 	.word	0x2000152c
 8008d44:	20006e58 	.word	0x20006e58
 8008d48:	200014a4 	.word	0x200014a4
 8008d4c:	66666666 	.word	0x66666666
 8008d50:	400a6666 	.word	0x400a6666
 8008d54:	40affe00 	.word	0x40affe00
 8008d58:	28f5c28f 	.word	0x28f5c28f
 8008d5c:	3ff68f5c 	.word	0x3ff68f5c
 8008d60:	33333333 	.word	0x33333333
 8008d64:	40113333 	.word	0x40113333
 8008d68:	40390000 	.word	0x40390000
 8008d6c:	00001001 	.word	0x00001001
 8008d70:	200014a2 	.word	0x200014a2
 8008d74:	1ffff7ba 	.word	0x1ffff7ba

08008d78 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	0004      	movs	r4, r0
 8008d7e:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008d80:	1e83      	subs	r3, r0, #2
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d901      	bls.n	8008d8c <GetReadPrecentage+0x14>
}
 8008d88:	b006      	add	sp, #24
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008d8c:	4b3d      	ldr	r3, [pc, #244]	; (8008e84 <GetReadPrecentage+0x10c>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d055      	beq.n	8008e40 <GetReadPrecentage+0xc8>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008d94:	2090      	movs	r0, #144	; 0x90
 8008d96:	2201      	movs	r2, #1
 8008d98:	2110      	movs	r1, #16
 8008d9a:	05c0      	lsls	r0, r0, #23
 8008d9c:	f00a fb0b 	bl	80133b6 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008da0:	0020      	movs	r0, r4
 8008da2:	f006 fd35 	bl	800f810 <GetUart>
 8008da6:	4938      	ldr	r1, [pc, #224]	; (8008e88 <GetReadPrecentage+0x110>)
 8008da8:	f7ff fed0 	bl	8008b4c <Get_channel>
 8008dac:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <GetReadPrecentage+0x114>)
 8008dae:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008db0:	4937      	ldr	r1, [pc, #220]	; (8008e90 <GetReadPrecentage+0x118>)
 8008db2:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008db4:	2380      	movs	r3, #128	; 0x80
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dbe:	4835      	ldr	r0, [pc, #212]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008dc0:	f009 f93c 	bl	801203c <HAL_ADC_ConfigChannel>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d15a      	bne.n	8008e7e <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008dc8:	4c32      	ldr	r4, [pc, #200]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008dca:	0020      	movs	r0, r4
 8008dcc:	f009 f87c 	bl	8011ec8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008dd0:	2164      	movs	r1, #100	; 0x64
 8008dd2:	0020      	movs	r0, r4
 8008dd4:	f009 f8ca 	bl	8011f6c <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008dd8:	0020      	movs	r0, r4
 8008dda:	f009 f929 	bl	8012030 <HAL_ADC_GetValue>
 8008dde:	f7f8 fbc3 	bl	8001568 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008de2:	f7fa f99f 	bl	8003124 <__aeabi_f2d>
 8008de6:	4a2c      	ldr	r2, [pc, #176]	; (8008e98 <GetReadPrecentage+0x120>)
 8008de8:	4b2c      	ldr	r3, [pc, #176]	; (8008e9c <GetReadPrecentage+0x124>)
 8008dea:	f7f9 fb23 	bl	8002434 <__aeabi_dmul>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b2b      	ldr	r3, [pc, #172]	; (8008ea0 <GetReadPrecentage+0x128>)
 8008df2:	f7f8 ff15 	bl	8001c20 <__aeabi_ddiv>
 8008df6:	f7fa f9e7 	bl	80031c8 <__aeabi_d2f>
 8008dfa:	4b2a      	ldr	r3, [pc, #168]	; (8008ea4 <GetReadPrecentage+0x12c>)
 8008dfc:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008dfe:	492a      	ldr	r1, [pc, #168]	; (8008ea8 <GetReadPrecentage+0x130>)
 8008e00:	f7f8 f852 	bl	8000ea8 <__aeabi_fmul>
 8008e04:	f7fa f98e 	bl	8003124 <__aeabi_f2d>
 8008e08:	4a23      	ldr	r2, [pc, #140]	; (8008e98 <GetReadPrecentage+0x120>)
 8008e0a:	4b24      	ldr	r3, [pc, #144]	; (8008e9c <GetReadPrecentage+0x124>)
 8008e0c:	f7f8 ff08 	bl	8001c20 <__aeabi_ddiv>
 8008e10:	f7fa f9da 	bl	80031c8 <__aeabi_d2f>
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <GetReadPrecentage+0x134>)
 8008e16:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008e18:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008e1a:	0020      	movs	r0, r4
 8008e1c:	f009 f884 	bl	8011f28 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e20:	491b      	ldr	r1, [pc, #108]	; (8008e90 <GetReadPrecentage+0x118>)
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <GetReadPrecentage+0x114>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <GetReadPrecentage+0x138>)
 8008e2a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e30:	0020      	movs	r0, r4
 8008e32:	f009 f903 	bl	801203c <HAL_ADC_ConfigChannel>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0a6      	beq.n	8008d88 <GetReadPrecentage+0x10>
			Error_Handler();
 8008e3a:	f7ff feb1 	bl	8008ba0 <Error_Handler>
 8008e3e:	e7a3      	b.n	8008d88 <GetReadPrecentage+0x10>
			MX_ADC_Init();
 8008e40:	f7ff feb4 	bl	8008bac <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008e44:	0020      	movs	r0, r4
 8008e46:	f006 fce3 	bl	800f810 <GetUart>
 8008e4a:	f00b fa16 	bl	801427a <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008e4e:	2690      	movs	r6, #144	; 0x90
 8008e50:	05f6      	lsls	r6, r6, #23
 8008e52:	2110      	movs	r1, #16
 8008e54:	0030      	movs	r0, r6
 8008e56:	f00a fa25 	bl	80132a4 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008e5a:	480e      	ldr	r0, [pc, #56]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008e5c:	f009 f994 	bl	8012188 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e60:	2310      	movs	r3, #16
 8008e62:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e64:	3b0f      	subs	r3, #15
 8008e66:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008e68:	3302      	adds	r3, #2
 8008e6a:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008e6c:	a901      	add	r1, sp, #4
 8008e6e:	0030      	movs	r0, r6
 8008e70:	f00a f950 	bl	8013114 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008e74:	1e63      	subs	r3, r4, #1
 8008e76:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <GetReadPrecentage+0x13c>)
 8008e78:	2106      	movs	r1, #6
 8008e7a:	54d1      	strb	r1, [r2, r3]
 8008e7c:	e78a      	b.n	8008d94 <GetReadPrecentage+0x1c>
			Error_Handler();
 8008e7e:	f7ff fe8f 	bl	8008ba0 <Error_Handler>
 8008e82:	e7a1      	b.n	8008dc8 <GetReadPrecentage+0x50>
 8008e84:	200014a0 	.word	0x200014a0
 8008e88:	0801a750 	.word	0x0801a750
 8008e8c:	200014b0 	.word	0x200014b0
 8008e90:	2000152c 	.word	0x2000152c
 8008e94:	20006e58 	.word	0x20006e58
 8008e98:	66666666 	.word	0x66666666
 8008e9c:	400a6666 	.word	0x400a6666
 8008ea0:	40affe00 	.word	0x40affe00
 8008ea4:	200014f8 	.word	0x200014f8
 8008ea8:	42c80000 	.word	0x42c80000
 8008eac:	200014ec 	.word	0x200014ec
 8008eb0:	00001001 	.word	0x00001001
 8008eb4:	200010e0 	.word	0x200010e0

08008eb8 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008eb8:	2802      	cmp	r0, #2
 8008eba:	d008      	beq.n	8008ece <Get_Rank+0x16>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
 8008ebc:	2802      	cmp	r0, #2
 8008ebe:	d00d      	beq.n	8008edc <Get_Rank+0x24>
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008ec0:	2803      	cmp	r0, #3
 8008ec2:	d012      	beq.n	8008eea <Get_Rank+0x32>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
 8008ec4:	2803      	cmp	r0, #3
 8008ec6:	d017      	beq.n	8008ef8 <Get_Rank+0x40>
		Rank_t =3;
	return Rank_t;
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <Get_Rank+0x50>)
 8008eca:	7818      	ldrb	r0, [r3, #0]
}
 8008ecc:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <Get_Rank+0x54>)
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	d1f3      	bne.n	8008ebc <Get_Rank+0x4>
		Rank_t =0;
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <Get_Rank+0x50>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e7f5      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 2 && side == "bottom")
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <Get_Rank+0x58>)
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	d1ee      	bne.n	8008ec0 <Get_Rank+0x8>
		Rank_t =1;
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <Get_Rank+0x50>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 3 && side == "top")
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <Get_Rank+0x54>)
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d1e9      	bne.n	8008ec4 <Get_Rank+0xc>
		Rank_t =2;
 8008ef0:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <Get_Rank+0x50>)
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e7e7      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 3 && side == "bottom")
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <Get_Rank+0x58>)
 8008efa:	4299      	cmp	r1, r3
 8008efc:	d1e4      	bne.n	8008ec8 <Get_Rank+0x10>
		Rank_t =3;
 8008efe:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <Get_Rank+0x50>)
 8008f00:	2203      	movs	r2, #3
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e7e0      	b.n	8008ec8 <Get_Rank+0x10>
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	200014b1 	.word	0x200014b1
 8008f0c:	0801a74c 	.word	0x0801a74c
 8008f10:	0801a750 	.word	0x0801a750

08008f14 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	0004      	movs	r4, r0
 8008f18:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008f1a:	1e83      	subs	r3, r0, #2
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d900      	bls.n	8008f24 <ADCSelectChannel+0x10>
}
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008f24:	f006 fc74 	bl	800f810 <GetUart>
 8008f28:	f00b f9a7 	bl	801427a <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008f2c:	1e63      	subs	r3, r4, #1
 8008f2e:	4a0c      	ldr	r2, [pc, #48]	; (8008f60 <ADCSelectChannel+0x4c>)
 8008f30:	2106      	movs	r1, #6
 8008f32:	54d1      	strb	r1, [r2, r3]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008f34:	0020      	movs	r0, r4
 8008f36:	f006 fc6b 	bl	800f810 <GetUart>
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	f7ff fe06 	bl	8008b4c <Get_channel>
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <ADCSelectChannel+0x50>)
 8008f42:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008f44:	0029      	movs	r1, r5
 8008f46:	0020      	movs	r0, r4
 8008f48:	f7ff ffb6 	bl	8008eb8 <Get_Rank>
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <ADCSelectChannel+0x54>)
 8008f4e:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <ADCSelectChannel+0x58>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e4      	bne.n	8008f22 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 8008f58:	f7ff fe28 	bl	8008bac <MX_ADC_Init>
}
 8008f5c:	e7e1      	b.n	8008f22 <ADCSelectChannel+0xe>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	200010e0 	.word	0x200010e0
 8008f64:	200014b0 	.word	0x200014b0
 8008f68:	200014b1 	.word	0x200014b1
 8008f6c:	200014a0 	.word	0x200014a0

08008f70 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	0005      	movs	r5, r0
 8008f74:	000e      	movs	r6, r1
 8008f76:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008f78:	4b26      	ldr	r3, [pc, #152]	; (8009014 <ReadADCChannel+0xa4>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d008      	beq.n	8008f92 <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <ReadADCChannel+0xa8>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4a25      	ldr	r2, [pc, #148]	; (800901c <ReadADCChannel+0xac>)
 8008f88:	5a98      	ldrh	r0, [r3, r2]
 8008f8a:	f7f8 faed 	bl	8001568 <__aeabi_ui2f>
 8008f8e:	6020      	str	r0, [r4, #0]
}
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008f92:	f006 fc3d 	bl	800f810 <GetUart>
 8008f96:	0031      	movs	r1, r6
 8008f98:	f7ff fdd8 	bl	8008b4c <Get_channel>
 8008f9c:	4f20      	ldr	r7, [pc, #128]	; (8009020 <ReadADCChannel+0xb0>)
 8008f9e:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008fa0:	0031      	movs	r1, r6
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	f7ff ff88 	bl	8008eb8 <Get_Rank>
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <ReadADCChannel+0xa8>)
 8008faa:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008fac:	491d      	ldr	r1, [pc, #116]	; (8009024 <ReadADCChannel+0xb4>)
 8008fae:	783b      	ldrb	r3, [r7, #0]
 8008fb0:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008fb2:	2380      	movs	r3, #128	; 0x80
 8008fb4:	015b      	lsls	r3, r3, #5
 8008fb6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008fbc:	481a      	ldr	r0, [pc, #104]	; (8009028 <ReadADCChannel+0xb8>)
 8008fbe:	f009 f83d 	bl	801203c <HAL_ADC_ConfigChannel>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d122      	bne.n	800900c <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008fc6:	4d18      	ldr	r5, [pc, #96]	; (8009028 <ReadADCChannel+0xb8>)
 8008fc8:	0028      	movs	r0, r5
 8008fca:	f008 ff7d 	bl	8011ec8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	0028      	movs	r0, r5
 8008fd2:	f008 ffcb 	bl	8011f6c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008fd6:	0028      	movs	r0, r5
 8008fd8:	f009 f82a 	bl	8012030 <HAL_ADC_GetValue>
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <ReadADCChannel+0xa8>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	; (800901c <ReadADCChannel+0xac>)
 8008fe4:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008fe6:	0028      	movs	r0, r5
 8008fe8:	f008 ff9e 	bl	8011f28 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008fec:	490d      	ldr	r1, [pc, #52]	; (8009024 <ReadADCChannel+0xb4>)
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <ReadADCChannel+0xb0>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <ReadADCChannel+0xbc>)
 8008ff6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ffc:	0028      	movs	r0, r5
 8008ffe:	f009 f81d 	bl	801203c <HAL_ADC_ConfigChannel>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0bc      	beq.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 8009006:	f7ff fdcb 	bl	8008ba0 <Error_Handler>
 800900a:	e7b9      	b.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 800900c:	f7ff fdc8 	bl	8008ba0 <Error_Handler>
 8009010:	e7d9      	b.n	8008fc6 <ReadADCChannel+0x56>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	200014a0 	.word	0x200014a0
 8009018:	200014b1 	.word	0x200014b1
 800901c:	200014a8 	.word	0x200014a8
 8009020:	200014b0 	.word	0x200014b0
 8009024:	2000152c 	.word	0x2000152c
 8009028:	20006e58 	.word	0x20006e58
 800902c:	00001001 	.word	0x00001001

08009030 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8009030:	4770      	bx	lr

08009032 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8009032:	4770      	bx	lr

08009034 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8009034:	4770      	bx	lr

08009036 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8009036:	4770      	bx	lr

08009038 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8009038:	4770      	bx	lr
	...

0800903c <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	46ce      	mov	lr, r9
 8009040:	4647      	mov	r7, r8
 8009042:	b580      	push	{r7, lr}
 8009044:	b087      	sub	sp, #28
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009046:	2401      	movs	r4, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8009048:	2600      	movs	r6, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800904e:	e11e      	b.n	800928e <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8009050:	230e      	movs	r3, #14
 8009052:	446b      	add	r3, sp
 8009054:	8819      	ldrh	r1, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	f00a f9ac 	bl	80133b6 <HAL_GPIO_WritePin>
				Delay_us(10);
 800905e:	200a      	movs	r0, #10
 8009060:	f006 fa30 	bl	800f4c4 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8009064:	ab03      	add	r3, sp, #12
 8009066:	8819      	ldrh	r1, [r3, #0]
 8009068:	9804      	ldr	r0, [sp, #16]
 800906a:	f00a f99d 	bl	80133a8 <HAL_GPIO_ReadPin>
 800906e:	4680      	mov	r8, r0
 8009070:	e13b      	b.n	80092ea <CheckAttachedButtons+0x2ae>
			switch(button[i].type){
 8009072:	2b01      	cmp	r3, #1
 8009074:	d104      	bne.n	8009080 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 8009076:	4643      	mov	r3, r8
 8009078:	2b01      	cmp	r3, #1
 800907a:	d043      	beq.n	8009104 <CheckAttachedButtons+0xc8>
					else if(connected == GPIO_PIN_RESET)
 800907c:	2b00      	cmp	r3, #0
 800907e:	d03b      	beq.n	80090f8 <CheckAttachedButtons+0xbc>
			if(state == CLOSED || state == ON){
 8009080:	2e04      	cmp	r6, #4
 8009082:	d040      	beq.n	8009106 <CheckAttachedButtons+0xca>
 8009084:	2e02      	cmp	r6, #2
 8009086:	d03e      	beq.n	8009106 <CheckAttachedButtons+0xca>
			if(state == OPEN || state == OFF){
 8009088:	2e03      	cmp	r6, #3
 800908a:	d04e      	beq.n	800912a <CheckAttachedButtons+0xee>
 800908c:	2e01      	cmp	r6, #1
 800908e:	d04c      	beq.n	800912a <CheckAttachedButtons+0xee>
			if(pressCounter[i] < BOS.buttons.debounce){
 8009090:	00ab      	lsls	r3, r5, #2
 8009092:	4abc      	ldr	r2, [pc, #752]	; (8009384 <CheckAttachedButtons+0x348>)
 8009094:	589b      	ldr	r3, [r3, r2]
 8009096:	4abc      	ldr	r2, [pc, #752]	; (8009388 <CheckAttachedButtons+0x34c>)
 8009098:	8812      	ldrh	r2, [r2, #0]
 800909a:	4293      	cmp	r3, r2
 800909c:	d200      	bcs.n	80090a0 <CheckAttachedButtons+0x64>
 800909e:	e099      	b.n	80091d4 <CheckAttachedButtons+0x198>
				if(pressCounter[i] == BOS.buttons.debounce){
 80090a0:	d06c      	beq.n	800917c <CheckAttachedButtons+0x140>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80090a2:	00ab      	lsls	r3, r5, #2
 80090a4:	49b9      	ldr	r1, [pc, #740]	; (800938c <CheckAttachedButtons+0x350>)
 80090a6:	585b      	ldr	r3, [r3, r1]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d203      	bcs.n	80090b4 <CheckAttachedButtons+0x78>
					releaseCounter[i] =0;
 80090ac:	00ab      	lsls	r3, r5, #2
 80090ae:	000a      	movs	r2, r1
 80090b0:	2100      	movs	r1, #0
 80090b2:	5099      	str	r1, [r3, r2]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 80090b4:	00ab      	lsls	r3, r5, #2
 80090b6:	4ab3      	ldr	r2, [pc, #716]	; (8009384 <CheckAttachedButtons+0x348>)
 80090b8:	589b      	ldr	r3, [r3, r2]
 80090ba:	4ab3      	ldr	r2, [pc, #716]	; (8009388 <CheckAttachedButtons+0x34c>)
 80090bc:	8852      	ldrh	r2, [r2, #2]
 80090be:	4293      	cmp	r3, r2
 80090c0:	d979      	bls.n	80091b6 <CheckAttachedButtons+0x17a>
 80090c2:	22f4      	movs	r2, #244	; 0xf4
 80090c4:	32ff      	adds	r2, #255	; 0xff
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d875      	bhi.n	80091b6 <CheckAttachedButtons+0x17a>
					if(clicked == 0)
 80090ca:	4bb1      	ldr	r3, [pc, #708]	; (8009390 <CheckAttachedButtons+0x354>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d15e      	bne.n	8009190 <CheckAttachedButtons+0x154>
						clicked =1;		// Record a possible single click
 80090d2:	4baf      	ldr	r3, [pc, #700]	; (8009390 <CheckAttachedButtons+0x354>)
 80090d4:	3af3      	subs	r2, #243	; 0xf3
 80090d6:	3aff      	subs	r2, #255	; 0xff
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e07b      	b.n	80091d4 <CheckAttachedButtons+0x198>
					if(connected == GPIO_PIN_SET)
 80090dc:	4643      	mov	r3, r8
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d01c      	beq.n	800911c <CheckAttachedButtons+0xe0>
					else if(connected == GPIO_PIN_RESET)
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1cc      	bne.n	8009080 <CheckAttachedButtons+0x44>
						state =OPEN;
 80090e6:	2603      	movs	r6, #3
 80090e8:	e7cc      	b.n	8009084 <CheckAttachedButtons+0x48>
					if(connected == GPIO_PIN_SET)
 80090ea:	4643      	mov	r3, r8
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d005      	beq.n	80090fc <CheckAttachedButtons+0xc0>
					else if(connected == GPIO_PIN_RESET)
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1c5      	bne.n	8009080 <CheckAttachedButtons+0x44>
						state =OFF;
 80090f4:	2601      	movs	r6, #1
 80090f6:	e7c5      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =OPEN;
 80090f8:	2603      	movs	r6, #3
 80090fa:	e7c3      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =ON;
 80090fc:	2602      	movs	r6, #2
 80090fe:	e7c1      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =OFF;
 8009100:	4646      	mov	r6, r8
 8009102:	e7bf      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =CLOSED;
 8009104:	2604      	movs	r6, #4
				if(pressCounter[i] < 0xFFFF)
 8009106:	00ab      	lsls	r3, r5, #2
 8009108:	4a9e      	ldr	r2, [pc, #632]	; (8009384 <CheckAttachedButtons+0x348>)
 800910a:	589b      	ldr	r3, [r3, r2]
 800910c:	4aa1      	ldr	r2, [pc, #644]	; (8009394 <CheckAttachedButtons+0x358>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d806      	bhi.n	8009120 <CheckAttachedButtons+0xe4>
					++pressCounter[i];			// Advance the debounce counter
 8009112:	00aa      	lsls	r2, r5, #2
 8009114:	3301      	adds	r3, #1
 8009116:	499b      	ldr	r1, [pc, #620]	; (8009384 <CheckAttachedButtons+0x348>)
 8009118:	5053      	str	r3, [r2, r1]
 800911a:	e7b5      	b.n	8009088 <CheckAttachedButtons+0x4c>
						state =CLOSED;
 800911c:	2604      	movs	r6, #4
 800911e:	e7f2      	b.n	8009106 <CheckAttachedButtons+0xca>
					pressCounter[i] =0;			// Reset debounce counter
 8009120:	00ab      	lsls	r3, r5, #2
 8009122:	4a98      	ldr	r2, [pc, #608]	; (8009384 <CheckAttachedButtons+0x348>)
 8009124:	2100      	movs	r1, #0
 8009126:	5099      	str	r1, [r3, r2]
 8009128:	e7ae      	b.n	8009088 <CheckAttachedButtons+0x4c>
				if(releaseCounter[i] < 0xFFFF)
 800912a:	00ab      	lsls	r3, r5, #2
 800912c:	4a97      	ldr	r2, [pc, #604]	; (800938c <CheckAttachedButtons+0x350>)
 800912e:	589b      	ldr	r3, [r3, r2]
 8009130:	4a98      	ldr	r2, [pc, #608]	; (8009394 <CheckAttachedButtons+0x358>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d813      	bhi.n	800915e <CheckAttachedButtons+0x122>
					++releaseCounter[i];		// Advance the debounce counter
 8009136:	00aa      	lsls	r2, r5, #2
 8009138:	3301      	adds	r3, #1
 800913a:	4994      	ldr	r1, [pc, #592]	; (800938c <CheckAttachedButtons+0x350>)
 800913c:	5053      	str	r3, [r2, r1]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 800913e:	4b94      	ldr	r3, [pc, #592]	; (8009390 <CheckAttachedButtons+0x354>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d010      	beq.n	8009168 <CheckAttachedButtons+0x12c>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8009146:	4b94      	ldr	r3, [pc, #592]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009148:	5d5a      	ldrb	r2, [r3, r5]
 800914a:	4b8f      	ldr	r3, [pc, #572]	; (8009388 <CheckAttachedButtons+0x34c>)
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	429a      	cmp	r2, r3
 8009150:	d99e      	bls.n	8009090 <CheckAttachedButtons+0x54>
					clicked =0;
 8009152:	2300      	movs	r3, #0
 8009154:	4a8e      	ldr	r2, [pc, #568]	; (8009390 <CheckAttachedButtons+0x354>)
 8009156:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8009158:	4a8f      	ldr	r2, [pc, #572]	; (8009398 <CheckAttachedButtons+0x35c>)
 800915a:	5553      	strb	r3, [r2, r5]
 800915c:	e798      	b.n	8009090 <CheckAttachedButtons+0x54>
					releaseCounter[i] =0;		// Reset debounce counter
 800915e:	00ab      	lsls	r3, r5, #2
 8009160:	4a8a      	ldr	r2, [pc, #552]	; (800938c <CheckAttachedButtons+0x350>)
 8009162:	2100      	movs	r1, #0
 8009164:	5099      	str	r1, [r3, r2]
 8009166:	e7ea      	b.n	800913e <CheckAttachedButtons+0x102>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8009168:	4b8b      	ldr	r3, [pc, #556]	; (8009398 <CheckAttachedButtons+0x35c>)
 800916a:	5d5b      	ldrb	r3, [r3, r5]
 800916c:	4a86      	ldr	r2, [pc, #536]	; (8009388 <CheckAttachedButtons+0x34c>)
 800916e:	7952      	ldrb	r2, [r2, #5]
 8009170:	4293      	cmp	r3, r2
 8009172:	d8e8      	bhi.n	8009146 <CheckAttachedButtons+0x10a>
					++dblCounter[i];
 8009174:	3301      	adds	r3, #1
 8009176:	4a88      	ldr	r2, [pc, #544]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009178:	5553      	strb	r3, [r2, r5]
 800917a:	e789      	b.n	8009090 <CheckAttachedButtons+0x54>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 800917c:	00e9      	lsls	r1, r5, #3
 800917e:	1949      	adds	r1, r1, r5
 8009180:	4886      	ldr	r0, [pc, #536]	; (800939c <CheckAttachedButtons+0x360>)
 8009182:	2707      	movs	r7, #7
 8009184:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 8009186:	00a9      	lsls	r1, r5, #2
 8009188:	3301      	adds	r3, #1
 800918a:	487e      	ldr	r0, [pc, #504]	; (8009384 <CheckAttachedButtons+0x348>)
 800918c:	500b      	str	r3, [r1, r0]
 800918e:	e788      	b.n	80090a2 <CheckAttachedButtons+0x66>
					else if(clicked == 2){
 8009190:	2b02      	cmp	r3, #2
 8009192:	d11f      	bne.n	80091d4 <CheckAttachedButtons+0x198>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8009194:	4b80      	ldr	r3, [pc, #512]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009196:	5d5b      	ldrb	r3, [r3, r5]
 8009198:	4a7b      	ldr	r2, [pc, #492]	; (8009388 <CheckAttachedButtons+0x34c>)
 800919a:	7912      	ldrb	r2, [r2, #4]
 800919c:	4293      	cmp	r3, r2
 800919e:	d919      	bls.n	80091d4 <CheckAttachedButtons+0x198>
 80091a0:	4a79      	ldr	r2, [pc, #484]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091a2:	7952      	ldrb	r2, [r2, #5]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d215      	bcs.n	80091d4 <CheckAttachedButtons+0x198>
							clicked =3;	// Record a possible double click
 80091a8:	4b79      	ldr	r3, [pc, #484]	; (8009390 <CheckAttachedButtons+0x354>)
 80091aa:	2203      	movs	r2, #3
 80091ac:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 80091ae:	4b7a      	ldr	r3, [pc, #488]	; (8009398 <CheckAttachedButtons+0x35c>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	555a      	strb	r2, [r3, r5]
 80091b4:	e00e      	b.n	80091d4 <CheckAttachedButtons+0x198>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 80091b6:	3bf5      	subs	r3, #245	; 0xf5
 80091b8:	3bff      	subs	r3, #255	; 0xff
 80091ba:	4a79      	ldr	r2, [pc, #484]	; (80093a0 <CheckAttachedButtons+0x364>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d809      	bhi.n	80091d4 <CheckAttachedButtons+0x198>
					if(clicked)
 80091c0:	4b73      	ldr	r3, [pc, #460]	; (8009390 <CheckAttachedButtons+0x354>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <CheckAttachedButtons+0x192>
						clicked =0;						// Cannot be a click
 80091c8:	4b71      	ldr	r3, [pc, #452]	; (8009390 <CheckAttachedButtons+0x354>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 80091ce:	0020      	movs	r0, r4
 80091d0:	f7ff f980 	bl	80084d4 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 80091d4:	00ab      	lsls	r3, r5, #2
 80091d6:	4a6d      	ldr	r2, [pc, #436]	; (800938c <CheckAttachedButtons+0x350>)
 80091d8:	589b      	ldr	r3, [r3, r2]
 80091da:	4a6b      	ldr	r2, [pc, #428]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	4293      	cmp	r3, r2
 80091e0:	d33b      	bcc.n	800925a <CheckAttachedButtons+0x21e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 80091e2:	d022      	beq.n	800922a <CheckAttachedButtons+0x1ee>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 80091e4:	00ab      	lsls	r3, r5, #2
 80091e6:	4967      	ldr	r1, [pc, #412]	; (8009384 <CheckAttachedButtons+0x348>)
 80091e8:	585b      	ldr	r3, [r3, r1]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <CheckAttachedButtons+0x1ba>
					pressCounter[i] =0;
 80091ee:	00ab      	lsls	r3, r5, #2
 80091f0:	000a      	movs	r2, r1
 80091f2:	2100      	movs	r1, #0
 80091f4:	5099      	str	r1, [r3, r2]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 80091f6:	00ab      	lsls	r3, r5, #2
 80091f8:	4a64      	ldr	r2, [pc, #400]	; (800938c <CheckAttachedButtons+0x350>)
 80091fa:	589b      	ldr	r3, [r3, r2]
 80091fc:	4a62      	ldr	r2, [pc, #392]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091fe:	8852      	ldrh	r2, [r2, #2]
 8009200:	4293      	cmp	r3, r2
 8009202:	d925      	bls.n	8009250 <CheckAttachedButtons+0x214>
 8009204:	22f4      	movs	r2, #244	; 0xf4
 8009206:	32ff      	adds	r2, #255	; 0xff
 8009208:	4293      	cmp	r3, r2
 800920a:	d821      	bhi.n	8009250 <CheckAttachedButtons+0x214>
					if(clicked == 1){
 800920c:	4b60      	ldr	r3, [pc, #384]	; (8009390 <CheckAttachedButtons+0x354>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d014      	beq.n	800923e <CheckAttachedButtons+0x202>
					else if(clicked == 3){
 8009214:	2b03      	cmp	r3, #3
 8009216:	d120      	bne.n	800925a <CheckAttachedButtons+0x21e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8009218:	00eb      	lsls	r3, r5, #3
 800921a:	195b      	adds	r3, r3, r5
 800921c:	4a5f      	ldr	r2, [pc, #380]	; (800939c <CheckAttachedButtons+0x360>)
 800921e:	2106      	movs	r1, #6
 8009220:	5499      	strb	r1, [r3, r2]
						clicked =0;			// Prepare for a single click
 8009222:	4b5b      	ldr	r3, [pc, #364]	; (8009390 <CheckAttachedButtons+0x354>)
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e017      	b.n	800925a <CheckAttachedButtons+0x21e>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800922a:	00e9      	lsls	r1, r5, #3
 800922c:	1949      	adds	r1, r1, r5
 800922e:	485b      	ldr	r0, [pc, #364]	; (800939c <CheckAttachedButtons+0x360>)
 8009230:	2708      	movs	r7, #8
 8009232:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 8009234:	00a9      	lsls	r1, r5, #2
 8009236:	3301      	adds	r3, #1
 8009238:	4854      	ldr	r0, [pc, #336]	; (800938c <CheckAttachedButtons+0x350>)
 800923a:	500b      	str	r3, [r1, r0]
 800923c:	e7d2      	b.n	80091e4 <CheckAttachedButtons+0x1a8>
						button[i].state =CLICKED;	// Record a single button click event
 800923e:	00eb      	lsls	r3, r5, #3
 8009240:	195b      	adds	r3, r3, r5
 8009242:	4a56      	ldr	r2, [pc, #344]	; (800939c <CheckAttachedButtons+0x360>)
 8009244:	2105      	movs	r1, #5
 8009246:	5499      	strb	r1, [r3, r2]
						clicked =2;			// Prepare for a double click
 8009248:	4b51      	ldr	r3, [pc, #324]	; (8009390 <CheckAttachedButtons+0x354>)
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e004      	b.n	800925a <CheckAttachedButtons+0x21e>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8009250:	3bf5      	subs	r3, #245	; 0xf5
 8009252:	3bff      	subs	r3, #255	; 0xff
 8009254:	4a52      	ldr	r2, [pc, #328]	; (80093a0 <CheckAttachedButtons+0x364>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d90b      	bls.n	8009272 <CheckAttachedButtons+0x236>
			switch(button[i].state){
 800925a:	00eb      	lsls	r3, r5, #3
 800925c:	195b      	adds	r3, r3, r5
 800925e:	4a4f      	ldr	r2, [pc, #316]	; (800939c <CheckAttachedButtons+0x360>)
 8009260:	5c9b      	ldrb	r3, [r3, r2]
 8009262:	3b05      	subs	r3, #5
 8009264:	b2da      	uxtb	r2, r3
 8009266:	2a09      	cmp	r2, #9
 8009268:	d80f      	bhi.n	800928a <CheckAttachedButtons+0x24e>
 800926a:	0093      	lsls	r3, r2, #2
 800926c:	4a4d      	ldr	r2, [pc, #308]	; (80093a4 <CheckAttachedButtons+0x368>)
 800926e:	58d3      	ldr	r3, [r2, r3]
 8009270:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8009272:	0020      	movs	r0, r4
 8009274:	f7ff f966 	bl	8008544 <CheckForTimedButtonRelease>
 8009278:	e7ef      	b.n	800925a <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 800927a:	0020      	movs	r0, r4
 800927c:	f7ff f928 	bl	80084d0 <buttonPressedCallback>
					button[i].state =NONE;
 8009280:	00eb      	lsls	r3, r5, #3
 8009282:	195d      	adds	r5, r3, r5
 8009284:	4b45      	ldr	r3, [pc, #276]	; (800939c <CheckAttachedButtons+0x360>)
 8009286:	2200      	movs	r2, #0
 8009288:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800928a:	3401      	adds	r4, #1
 800928c:	b2e4      	uxtb	r4, r4
 800928e:	2c05      	cmp	r4, #5
 8009290:	d900      	bls.n	8009294 <CheckAttachedButtons+0x258>
 8009292:	e10a      	b.n	80094aa <CheckAttachedButtons+0x46e>
		if(button[i].type)			// Only check defined butons
 8009294:	0025      	movs	r5, r4
 8009296:	00e2      	lsls	r2, r4, #3
 8009298:	1912      	adds	r2, r2, r4
 800929a:	4b40      	ldr	r3, [pc, #256]	; (800939c <CheckAttachedButtons+0x360>)
 800929c:	189b      	adds	r3, r3, r2
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f2      	beq.n	800928a <CheckAttachedButtons+0x24e>
			if(delayButtonStateReset == false)
 80092a4:	4b40      	ldr	r3, [pc, #256]	; (80093a8 <CheckAttachedButtons+0x36c>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d103      	bne.n	80092b4 <CheckAttachedButtons+0x278>
				button[i].state =NONE;
 80092ac:	0013      	movs	r3, r2
 80092ae:	4a3b      	ldr	r2, [pc, #236]	; (800939c <CheckAttachedButtons+0x360>)
 80092b0:	2100      	movs	r1, #0
 80092b2:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80092b4:	230e      	movs	r3, #14
 80092b6:	446b      	add	r3, sp
 80092b8:	4699      	mov	r9, r3
 80092ba:	af03      	add	r7, sp, #12
 80092bc:	9700      	str	r7, [sp, #0]
 80092be:	ab04      	add	r3, sp, #16
 80092c0:	464a      	mov	r2, r9
 80092c2:	a905      	add	r1, sp, #20
 80092c4:	0020      	movs	r0, r4
 80092c6:	f005 fd79 	bl	800edbc <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80092ca:	464b      	mov	r3, r9
 80092cc:	8819      	ldrh	r1, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	9805      	ldr	r0, [sp, #20]
 80092d2:	f00a f870 	bl	80133b6 <HAL_GPIO_WritePin>
			Delay_us(10);
 80092d6:	200a      	movs	r0, #10
 80092d8:	f006 f8f4 	bl	800f4c4 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 80092dc:	8839      	ldrh	r1, [r7, #0]
 80092de:	9804      	ldr	r0, [sp, #16]
 80092e0:	f00a f862 	bl	80133a8 <HAL_GPIO_ReadPin>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d100      	bne.n	80092ea <CheckAttachedButtons+0x2ae>
 80092e8:	e6b2      	b.n	8009050 <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80092ea:	230e      	movs	r3, #14
 80092ec:	446b      	add	r3, sp
 80092ee:	8819      	ldrh	r1, [r3, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	f00a f85f 	bl	80133b6 <HAL_GPIO_WritePin>
			switch(button[i].type){
 80092f8:	00ea      	lsls	r2, r5, #3
 80092fa:	1952      	adds	r2, r2, r5
 80092fc:	4b27      	ldr	r3, [pc, #156]	; (800939c <CheckAttachedButtons+0x360>)
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	785b      	ldrb	r3, [r3, #1]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d100      	bne.n	8009308 <CheckAttachedButtons+0x2cc>
 8009306:	e6e9      	b.n	80090dc <CheckAttachedButtons+0xa0>
 8009308:	d800      	bhi.n	800930c <CheckAttachedButtons+0x2d0>
 800930a:	e6b2      	b.n	8009072 <CheckAttachedButtons+0x36>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d100      	bne.n	8009312 <CheckAttachedButtons+0x2d6>
 8009310:	e6eb      	b.n	80090ea <CheckAttachedButtons+0xae>
 8009312:	2b04      	cmp	r3, #4
 8009314:	d000      	beq.n	8009318 <CheckAttachedButtons+0x2dc>
 8009316:	e6b3      	b.n	8009080 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 8009318:	4643      	mov	r3, r8
 800931a:	2b01      	cmp	r3, #1
 800931c:	d100      	bne.n	8009320 <CheckAttachedButtons+0x2e4>
 800931e:	e6ef      	b.n	8009100 <CheckAttachedButtons+0xc4>
					else if(connected == GPIO_PIN_RESET)
 8009320:	2b00      	cmp	r3, #0
 8009322:	d000      	beq.n	8009326 <CheckAttachedButtons+0x2ea>
 8009324:	e6ac      	b.n	8009080 <CheckAttachedButtons+0x44>
						state =ON;
 8009326:	2602      	movs	r6, #2
 8009328:	e6ac      	b.n	8009084 <CheckAttachedButtons+0x48>
					buttonReleasedCallback(i);
 800932a:	0020      	movs	r0, r4
 800932c:	f7ff fe80 	bl	8009030 <buttonReleasedCallback>
					button[i].state =NONE;
 8009330:	00eb      	lsls	r3, r5, #3
 8009332:	195d      	adds	r5, r3, r5
 8009334:	4b19      	ldr	r3, [pc, #100]	; (800939c <CheckAttachedButtons+0x360>)
 8009336:	2200      	movs	r2, #0
 8009338:	54ea      	strb	r2, [r5, r3]
					break;
 800933a:	e7a6      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <CheckAttachedButtons+0x36c>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1a2      	bne.n	800928a <CheckAttachedButtons+0x24e>
 8009344:	00eb      	lsls	r3, r5, #3
 8009346:	195b      	adds	r3, r3, r5
 8009348:	4d14      	ldr	r5, [pc, #80]	; (800939c <CheckAttachedButtons+0x360>)
 800934a:	18ed      	adds	r5, r5, r3
 800934c:	7a2b      	ldrb	r3, [r5, #8]
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d59b      	bpl.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8009358:	0020      	movs	r0, r4
 800935a:	f7ff fe6a 	bl	8009032 <buttonClickedCallback>
 800935e:	e794      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d190      	bne.n	800928a <CheckAttachedButtons+0x24e>
 8009368:	00eb      	lsls	r3, r5, #3
 800936a:	195b      	adds	r3, r3, r5
 800936c:	4d0b      	ldr	r5, [pc, #44]	; (800939c <CheckAttachedButtons+0x360>)
 800936e:	18ed      	adds	r5, r5, r3
 8009370:	7a2b      	ldrb	r3, [r5, #8]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d589      	bpl.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009378:	2201      	movs	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800937c:	0020      	movs	r0, r4
 800937e:	f7ff fe59 	bl	8009034 <buttonDblClickedCallback>
 8009382:	e782      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009384:	200014fc 	.word	0x200014fc
 8009388:	20006da0 	.word	0x20006da0
 800938c:	20001514 	.word	0x20001514
 8009390:	200014ea 	.word	0x200014ea
 8009394:	0000fffe 	.word	0x0000fffe
 8009398:	200014f0 	.word	0x200014f0
 800939c:	200014b4 	.word	0x200014b4
 80093a0:	0000fe0a 	.word	0x0000fe0a
 80093a4:	0801c5c0 	.word	0x0801c5c0
 80093a8:	200014f6 	.word	0x200014f6
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 80093ac:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d000      	beq.n	80093b6 <CheckAttachedButtons+0x37a>
 80093b4:	e769      	b.n	800928a <CheckAttachedButtons+0x24e>
 80093b6:	00eb      	lsls	r3, r5, #3
 80093b8:	195b      	adds	r3, r3, r5
 80093ba:	4d3f      	ldr	r5, [pc, #252]	; (80094b8 <CheckAttachedButtons+0x47c>)
 80093bc:	18ed      	adds	r5, r5, r3
 80093be:	7a2b      	ldrb	r3, [r5, #8]
 80093c0:	075b      	lsls	r3, r3, #29
 80093c2:	d400      	bmi.n	80093c6 <CheckAttachedButtons+0x38a>
 80093c4:	e761      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80093cc:	2101      	movs	r1, #1
 80093ce:	0020      	movs	r0, r4
 80093d0:	f7ff fe31 	bl	8009036 <buttonPressedForXCallback>
 80093d4:	e759      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 80093d6:	4b37      	ldr	r3, [pc, #220]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d000      	beq.n	80093e0 <CheckAttachedButtons+0x3a4>
 80093de:	e754      	b.n	800928a <CheckAttachedButtons+0x24e>
 80093e0:	00eb      	lsls	r3, r5, #3
 80093e2:	195b      	adds	r3, r3, r5
 80093e4:	4d34      	ldr	r5, [pc, #208]	; (80094b8 <CheckAttachedButtons+0x47c>)
 80093e6:	18ed      	adds	r5, r5, r3
 80093e8:	7a2b      	ldrb	r3, [r5, #8]
 80093ea:	071b      	lsls	r3, r3, #28
 80093ec:	d400      	bmi.n	80093f0 <CheckAttachedButtons+0x3b4>
 80093ee:	e74c      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093f0:	4b30      	ldr	r3, [pc, #192]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 80093f6:	2102      	movs	r1, #2
 80093f8:	0020      	movs	r0, r4
 80093fa:	f7ff fe1c 	bl	8009036 <buttonPressedForXCallback>
 80093fe:	e744      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009400:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d000      	beq.n	800940a <CheckAttachedButtons+0x3ce>
 8009408:	e73f      	b.n	800928a <CheckAttachedButtons+0x24e>
 800940a:	00eb      	lsls	r3, r5, #3
 800940c:	195b      	adds	r3, r3, r5
 800940e:	4d2a      	ldr	r5, [pc, #168]	; (80094b8 <CheckAttachedButtons+0x47c>)
 8009410:	18ed      	adds	r5, r5, r3
 8009412:	7a2b      	ldrb	r3, [r5, #8]
 8009414:	06db      	lsls	r3, r3, #27
 8009416:	d400      	bmi.n	800941a <CheckAttachedButtons+0x3de>
 8009418:	e737      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800941a:	4b26      	ldr	r3, [pc, #152]	; (80094b4 <CheckAttachedButtons+0x478>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009420:	2103      	movs	r1, #3
 8009422:	0020      	movs	r0, r4
 8009424:	f7ff fe07 	bl	8009036 <buttonPressedForXCallback>
 8009428:	e72f      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 800942a:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <CheckAttachedButtons+0x478>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d000      	beq.n	8009434 <CheckAttachedButtons+0x3f8>
 8009432:	e72a      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009434:	00eb      	lsls	r3, r5, #3
 8009436:	195b      	adds	r3, r3, r5
 8009438:	4d1f      	ldr	r5, [pc, #124]	; (80094b8 <CheckAttachedButtons+0x47c>)
 800943a:	18ed      	adds	r5, r5, r3
 800943c:	7a2b      	ldrb	r3, [r5, #8]
 800943e:	069b      	lsls	r3, r3, #26
 8009440:	d400      	bmi.n	8009444 <CheckAttachedButtons+0x408>
 8009442:	e722      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 800944a:	2101      	movs	r1, #1
 800944c:	0020      	movs	r0, r4
 800944e:	f7ff fdf3 	bl	8009038 <buttonReleasedForYCallback>
 8009452:	e71a      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8009454:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d000      	beq.n	800945e <CheckAttachedButtons+0x422>
 800945c:	e715      	b.n	800928a <CheckAttachedButtons+0x24e>
 800945e:	00eb      	lsls	r3, r5, #3
 8009460:	195b      	adds	r3, r3, r5
 8009462:	4d15      	ldr	r5, [pc, #84]	; (80094b8 <CheckAttachedButtons+0x47c>)
 8009464:	18ed      	adds	r5, r5, r3
 8009466:	7a2b      	ldrb	r3, [r5, #8]
 8009468:	065b      	lsls	r3, r3, #25
 800946a:	d400      	bmi.n	800946e <CheckAttachedButtons+0x432>
 800946c:	e70d      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8009474:	2102      	movs	r1, #2
 8009476:	0020      	movs	r0, r4
 8009478:	f7ff fdde 	bl	8009038 <buttonReleasedForYCallback>
 800947c:	e705      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 800947e:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d000      	beq.n	8009488 <CheckAttachedButtons+0x44c>
 8009486:	e700      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009488:	00eb      	lsls	r3, r5, #3
 800948a:	195b      	adds	r3, r3, r5
 800948c:	4d0a      	ldr	r5, [pc, #40]	; (80094b8 <CheckAttachedButtons+0x47c>)
 800948e:	18ed      	adds	r5, r5, r3
 8009490:	2308      	movs	r3, #8
 8009492:	56eb      	ldrsb	r3, [r5, r3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	db00      	blt.n	800949a <CheckAttachedButtons+0x45e>
 8009498:	e6f7      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <CheckAttachedButtons+0x478>)
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 80094a0:	2103      	movs	r1, #3
 80094a2:	0020      	movs	r0, r4
 80094a4:	f7ff fdc8 	bl	8009038 <buttonReleasedForYCallback>
 80094a8:	e6ef      	b.n	800928a <CheckAttachedButtons+0x24e>
}
 80094aa:	b007      	add	sp, #28
 80094ac:	bc0c      	pop	{r2, r3}
 80094ae:	4690      	mov	r8, r2
 80094b0:	4699      	mov	r9, r3
 80094b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b4:	200014f6 	.word	0x200014f6
 80094b8:	200014b4 	.word	0x200014b4

080094bc <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80094bc:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80094be:	f008 f97c 	bl	80117ba <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80094c2:	b2c4      	uxtb	r4, r0
 80094c4:	0020      	movs	r0, r4
 80094c6:	f7fe fa49 	bl	800795c <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80094ca:	0020      	movs	r0, r4
 80094cc:	f7fe fa74 	bl	80079b8 <SwitchStreamDMAToMsg>
}
 80094d0:	bd10      	pop	{r4, pc}
	...

080094d4 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80094d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d6:	b085      	sub	sp, #20
 80094d8:	000d      	movs	r5, r1
 80094da:	0014      	movs	r4, r2
 80094dc:	220f      	movs	r2, #15
 80094de:	446a      	add	r2, sp
 80094e0:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80094e2:	aa0a      	add	r2, sp, #40	; 0x28
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00d      	beq.n	8009506 <SetupDMAStreams+0x32>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d100      	bne.n	80094f0 <SetupDMAStreams+0x1c>
 80094ee:	e0b9      	b.n	8009664 <SetupDMAStreams+0x190>
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d100      	bne.n	80094f6 <SetupDMAStreams+0x22>
 80094f4:	e0b9      	b.n	800966a <SetupDMAStreams+0x196>
	if(direction == FORWARD){
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d00a      	beq.n	8009510 <SetupDMAStreams+0x3c>
	else if(direction == BACKWARD){
 80094fa:	2801      	cmp	r0, #1
 80094fc:	d041      	beq.n	8009582 <SetupDMAStreams+0xae>
	else if(direction == BIDIRECTIONAL){
 80094fe:	2802      	cmp	r0, #2
 8009500:	d069      	beq.n	80095d6 <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 8009502:	2067      	movs	r0, #103	; 0x67
 8009504:	e0af      	b.n	8009666 <SetupDMAStreams+0x192>
		portStatus[src] =STREAM;
 8009506:	4a5b      	ldr	r2, [pc, #364]	; (8009674 <SetupDMAStreams+0x1a0>)
 8009508:	2102      	movs	r1, #2
 800950a:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800950c:	2067      	movs	r0, #103	; 0x67
 800950e:	e0aa      	b.n	8009666 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009510:	0018      	movs	r0, r3
 8009512:	f006 f97d 	bl	800f810 <GetUart>
 8009516:	0006      	movs	r6, r0
 8009518:	ab0a      	add	r3, sp, #40	; 0x28
 800951a:	7818      	ldrb	r0, [r3, #0]
 800951c:	f006 f978 	bl	800f810 <GetUart>
 8009520:	0001      	movs	r1, r0
 8009522:	2201      	movs	r2, #1
 8009524:	0030      	movs	r0, r6
 8009526:	f7fe fa79 	bl	8007a1c <StartDMAstream>
 800952a:	2817      	cmp	r0, #23
 800952c:	d100      	bne.n	8009530 <SetupDMAStreams+0x5c>
 800952e:	e09a      	b.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009530:	0160      	lsls	r0, r4, #5
 8009532:	1b00      	subs	r0, r0, r4
 8009534:	0080      	lsls	r0, r0, #2
 8009536:	1900      	adds	r0, r0, r4
 8009538:	00c0      	lsls	r0, r0, #3
 800953a:	21fa      	movs	r1, #250	; 0xfa
 800953c:	0089      	lsls	r1, r1, #2
 800953e:	f7f6 fe07 	bl	8000150 <__udivsi3>
 8009542:	0001      	movs	r1, r0
 8009544:	260f      	movs	r6, #15
 8009546:	446e      	add	r6, sp
 8009548:	4b4b      	ldr	r3, [pc, #300]	; (8009678 <SetupDMAStreams+0x1a4>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	0033      	movs	r3, r6
 800954e:	2200      	movs	r2, #0
 8009550:	484a      	ldr	r0, [pc, #296]	; (800967c <SetupDMAStreams+0x1a8>)
 8009552:	f007 ffd5 	bl	8011500 <xTimerCreate>
 8009556:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8009558:	7833      	ldrb	r3, [r6, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4a48      	ldr	r2, [pc, #288]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009560:	509d      	str	r5, [r3, r2]
	if(xTimerStream != NULL)
 8009562:	2c00      	cmp	r4, #0
 8009564:	d100      	bne.n	8009568 <SetupDMAStreams+0x94>
 8009566:	e082      	b.n	800966e <SetupDMAStreams+0x19a>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009568:	f007 fa5c 	bl	8010a24 <xTaskGetTickCount>
 800956c:	0002      	movs	r2, r0
 800956e:	2301      	movs	r3, #1
 8009570:	425b      	negs	r3, r3
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	2101      	movs	r1, #1
 8009578:	0020      	movs	r0, r4
 800957a:	f007 ffe5 	bl	8011548 <xTimerGenericCommand>
	return BOS_OK;
 800957e:	2000      	movs	r0, #0
 8009580:	e071      	b.n	8009666 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009582:	0010      	movs	r0, r2
 8009584:	f006 f944 	bl	800f810 <GetUart>
 8009588:	0006      	movs	r6, r0
 800958a:	230f      	movs	r3, #15
 800958c:	446b      	add	r3, sp
 800958e:	7818      	ldrb	r0, [r3, #0]
 8009590:	f006 f93e 	bl	800f810 <GetUart>
 8009594:	0001      	movs	r1, r0
 8009596:	2201      	movs	r2, #1
 8009598:	0030      	movs	r0, r6
 800959a:	f7fe fa3f 	bl	8007a1c <StartDMAstream>
 800959e:	2817      	cmp	r0, #23
 80095a0:	d061      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80095a2:	0160      	lsls	r0, r4, #5
 80095a4:	1b00      	subs	r0, r0, r4
 80095a6:	0080      	lsls	r0, r0, #2
 80095a8:	1900      	adds	r0, r0, r4
 80095aa:	00c0      	lsls	r0, r0, #3
 80095ac:	21fa      	movs	r1, #250	; 0xfa
 80095ae:	0089      	lsls	r1, r1, #2
 80095b0:	f7f6 fdce 	bl	8000150 <__udivsi3>
 80095b4:	0001      	movs	r1, r0
 80095b6:	4b30      	ldr	r3, [pc, #192]	; (8009678 <SetupDMAStreams+0x1a4>)
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	ab0a      	add	r3, sp, #40	; 0x28
 80095bc:	2200      	movs	r2, #0
 80095be:	482f      	ldr	r0, [pc, #188]	; (800967c <SetupDMAStreams+0x1a8>)
 80095c0:	f007 ff9e 	bl	8011500 <xTimerCreate>
 80095c4:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80095c6:	230f      	movs	r3, #15
 80095c8:	446b      	add	r3, sp
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a2b      	ldr	r2, [pc, #172]	; (8009680 <SetupDMAStreams+0x1ac>)
 80095d2:	509d      	str	r5, [r3, r2]
 80095d4:	e7c5      	b.n	8009562 <SetupDMAStreams+0x8e>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80095d6:	0018      	movs	r0, r3
 80095d8:	f006 f91a 	bl	800f810 <GetUart>
 80095dc:	0006      	movs	r6, r0
 80095de:	ab0a      	add	r3, sp, #40	; 0x28
 80095e0:	7818      	ldrb	r0, [r3, #0]
 80095e2:	f006 f915 	bl	800f810 <GetUart>
 80095e6:	0001      	movs	r1, r0
 80095e8:	2201      	movs	r2, #1
 80095ea:	0030      	movs	r0, r6
 80095ec:	f7fe fa16 	bl	8007a1c <StartDMAstream>
 80095f0:	2817      	cmp	r0, #23
 80095f2:	d038      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80095f4:	0160      	lsls	r0, r4, #5
 80095f6:	1b00      	subs	r0, r0, r4
 80095f8:	0080      	lsls	r0, r0, #2
 80095fa:	1900      	adds	r0, r0, r4
 80095fc:	00c0      	lsls	r0, r0, #3
 80095fe:	21fa      	movs	r1, #250	; 0xfa
 8009600:	0089      	lsls	r1, r1, #2
 8009602:	f7f6 fda5 	bl	8000150 <__udivsi3>
 8009606:	0004      	movs	r4, r0
 8009608:	260f      	movs	r6, #15
 800960a:	446e      	add	r6, sp
 800960c:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <SetupDMAStreams+0x1a4>)
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	0033      	movs	r3, r6
 8009612:	2200      	movs	r2, #0
 8009614:	0001      	movs	r1, r0
 8009616:	4819      	ldr	r0, [pc, #100]	; (800967c <SetupDMAStreams+0x1a8>)
 8009618:	f007 ff72 	bl	8011500 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800961c:	7833      	ldrb	r3, [r6, #0]
 800961e:	3b01      	subs	r3, #1
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4a17      	ldr	r2, [pc, #92]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009624:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009626:	ab0a      	add	r3, sp, #40	; 0x28
 8009628:	7818      	ldrb	r0, [r3, #0]
 800962a:	f006 f8f1 	bl	800f810 <GetUart>
 800962e:	0007      	movs	r7, r0
 8009630:	7830      	ldrb	r0, [r6, #0]
 8009632:	f006 f8ed 	bl	800f810 <GetUart>
 8009636:	0001      	movs	r1, r0
 8009638:	2201      	movs	r2, #1
 800963a:	0038      	movs	r0, r7
 800963c:	f7fe f9ee 	bl	8007a1c <StartDMAstream>
 8009640:	2817      	cmp	r0, #23
 8009642:	d010      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009644:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <SetupDMAStreams+0x1a4>)
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	ab0a      	add	r3, sp, #40	; 0x28
 800964a:	2200      	movs	r2, #0
 800964c:	0021      	movs	r1, r4
 800964e:	480b      	ldr	r0, [pc, #44]	; (800967c <SetupDMAStreams+0x1a8>)
 8009650:	f007 ff56 	bl	8011500 <xTimerCreate>
 8009654:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8009656:	ab0a      	add	r3, sp, #40	; 0x28
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	3b01      	subs	r3, #1
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a08      	ldr	r2, [pc, #32]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009660:	509d      	str	r5, [r3, r2]
 8009662:	e77e      	b.n	8009562 <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 8009664:	2067      	movs	r0, #103	; 0x67
}
 8009666:	b005      	add	sp, #20
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 800966a:	2067      	movs	r0, #103	; 0x67
 800966c:	e7fb      	b.n	8009666 <SetupDMAStreams+0x192>
	return BOS_OK;
 800966e:	2000      	movs	r0, #0
 8009670:	e7f9      	b.n	8009666 <SetupDMAStreams+0x192>
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	200010e0 	.word	0x200010e0
 8009678:	080094bd 	.word	0x080094bd
 800967c:	0801c600 	.word	0x0801c600
 8009680:	20001460 	.word	0x20001460

08009684 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009684:	b510      	push	{r4, lr}
	switch(port){
 8009686:	2805      	cmp	r0, #5
 8009688:	d80a      	bhi.n	80096a0 <NotifyMessagingTask+0x1c>
 800968a:	0080      	lsls	r0, r0, #2
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <NotifyMessagingTask+0x60>)
 800968e:	581b      	ldr	r3, [r3, r0]
 8009690:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <NotifyMessagingTask+0x64>)
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	2202      	movs	r2, #2
 800969a:	2100      	movs	r1, #0
 800969c:	f007 fe4c 	bl	8011338 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 80096a0:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <NotifyMessagingTask+0x68>)
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	2300      	movs	r3, #0
 80096a8:	2202      	movs	r2, #2
 80096aa:	2100      	movs	r1, #0
 80096ac:	f007 fe44 	bl	8011338 <xTaskGenericNotify>
			break;
 80096b0:	e7f6      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <NotifyMessagingTask+0x6c>)
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	2202      	movs	r2, #2
 80096ba:	2100      	movs	r1, #0
 80096bc:	f007 fe3c 	bl	8011338 <xTaskGenericNotify>
			break;
 80096c0:	e7ee      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <NotifyMessagingTask+0x70>)
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	2202      	movs	r2, #2
 80096ca:	2100      	movs	r1, #0
 80096cc:	f007 fe34 	bl	8011338 <xTaskGenericNotify>
			break;
 80096d0:	e7e6      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <NotifyMessagingTask+0x74>)
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	2202      	movs	r2, #2
 80096da:	2100      	movs	r1, #0
 80096dc:	f007 fe2c 	bl	8011338 <xTaskGenericNotify>
}
 80096e0:	e7de      	b.n	80096a0 <NotifyMessagingTask+0x1c>
 80096e2:	46c0      	nop			; (mov r8, r8)
 80096e4:	0801c5e8 	.word	0x0801c5e8
 80096e8:	2000147c 	.word	0x2000147c
 80096ec:	20001480 	.word	0x20001480
 80096f0:	20001484 	.word	0x20001484
 80096f4:	20001488 	.word	0x20001488
 80096f8:	2000148c 	.word	0x2000148c

080096fc <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	46de      	mov	lr, fp
 8009700:	4657      	mov	r7, sl
 8009702:	464e      	mov	r6, r9
 8009704:	4645      	mov	r5, r8
 8009706:	b5e0      	push	{r5, r6, r7, lr}
 8009708:	b085      	sub	sp, #20
 800970a:	0007      	movs	r7, r0
 800970c:	4688      	mov	r8, r1
 800970e:	0015      	movs	r5, r2
 8009710:	4699      	mov	r9, r3
 8009712:	ab0e      	add	r3, sp, #56	; 0x38
 8009714:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009716:	0003      	movs	r3, r0
 8009718:	4313      	orrs	r3, r2
 800971a:	d100      	bne.n	800971e <SendMessageFromPort+0x22>
 800971c:	e167      	b.n	80099ee <SendMessageFromPort+0x2f2>
 800971e:	2800      	cmp	r0, #0
 8009720:	d104      	bne.n	800972c <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009722:	2aff      	cmp	r2, #255	; 0xff
 8009724:	d002      	beq.n	800972c <SendMessageFromPort+0x30>
 8009726:	2afe      	cmp	r2, #254	; 0xfe
 8009728:	d000      	beq.n	800972c <SendMessageFromPort+0x30>
 800972a:	e162      	b.n	80099f2 <SendMessageFromPort+0x2f6>
 800972c:	2f00      	cmp	r7, #0
 800972e:	d005      	beq.n	800973c <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009730:	4643      	mov	r3, r8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <SendMessageFromPort+0x40>
 8009736:	2d00      	cmp	r5, #0
 8009738:	d100      	bne.n	800973c <SendMessageFromPort+0x40>
 800973a:	e15c      	b.n	80099f6 <SendMessageFromPort+0x2fa>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 800973c:	2000      	movs	r0, #0
 800973e:	f007 f8d5 	bl	80108ec <uxTaskPriorityGet>
 8009742:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009744:	2105      	movs	r1, #5
 8009746:	2000      	movs	r0, #0
 8009748:	f007 f8e0 	bl	801090c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 800974c:	4bae      	ldr	r3, [pc, #696]	; (8009a08 <SendMessageFromPort+0x30c>)
 800974e:	2248      	movs	r2, #72	; 0x48
 8009750:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009752:	3212      	adds	r2, #18
 8009754:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009756:	4643      	mov	r3, r8
 8009758:	433b      	orrs	r3, r7
 800975a:	d103      	bne.n	8009764 <SendMessageFromPort+0x68>
 800975c:	1cab      	adds	r3, r5, #2
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d902      	bls.n	800976a <SendMessageFromPort+0x6e>
 8009764:	464b      	mov	r3, r9
 8009766:	2b00      	cmp	r3, #0
 8009768:	d134      	bne.n	80097d4 <SendMessageFromPort+0xd8>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 800976a:	3e01      	subs	r6, #1
 800976c:	4ba7      	ldr	r3, [pc, #668]	; (8009a0c <SendMessageFromPort+0x310>)
 800976e:	5d9c      	ldrb	r4, [r3, r6]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009770:	00f3      	lsls	r3, r6, #3
 8009772:	1b9e      	subs	r6, r3, r6
 8009774:	00f1      	lsls	r1, r6, #3
 8009776:	4ba6      	ldr	r3, [pc, #664]	; (8009a10 <SendMessageFromPort+0x314>)
 8009778:	18c9      	adds	r1, r1, r3
 800977a:	0022      	movs	r2, r4
 800977c:	48a5      	ldr	r0, [pc, #660]	; (8009a14 <SendMessageFromPort+0x318>)
 800977e:	f00b fdcc 	bl	801531a <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8009782:	4ba1      	ldr	r3, [pc, #644]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009784:	469a      	mov	sl, r3
 8009786:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8009788:	1ce6      	adds	r6, r4, #3
 800978a:	0032      	movs	r2, r6
 800978c:	0019      	movs	r1, r3
 800978e:	48a2      	ldr	r0, [pc, #648]	; (8009a18 <SendMessageFromPort+0x31c>)
 8009790:	f00b fdc3 	bl	801531a <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009794:	b2a4      	uxth	r4, r4
 8009796:	1ce1      	adds	r1, r4, #3
 8009798:	b289      	uxth	r1, r1
 800979a:	489f      	ldr	r0, [pc, #636]	; (8009a18 <SendMessageFromPort+0x31c>)
 800979c:	f005 fa8c 	bl	800ecb8 <CalculateCRC8>
 80097a0:	4653      	mov	r3, sl
 80097a2:	5598      	strb	r0, [r3, r6]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80097a4:	2238      	movs	r2, #56	; 0x38
 80097a6:	2100      	movs	r1, #0
 80097a8:	489b      	ldr	r0, [pc, #620]	; (8009a18 <SendMessageFromPort+0x31c>)
 80097aa:	f00b fdbf 	bl	801532c <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80097ae:	3502      	adds	r5, #2
 80097b0:	b2ed      	uxtb	r5, r5
 80097b2:	2d01      	cmp	r5, #1
 80097b4:	d900      	bls.n	80097b8 <SendMessageFromPort+0xbc>
 80097b6:	e0eb      	b.n	8009990 <SendMessageFromPort+0x294>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80097b8:	464b      	mov	r3, r9
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <SendMessageFromPort+0xce>
 80097be:	4643      	mov	r3, r8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SendMessageFromPort+0xce>
			src =message[4];
 80097c4:	4b90      	ldr	r3, [pc, #576]	; (8009a08 <SendMessageFromPort+0x30c>)
 80097c6:	791b      	ldrb	r3, [r3, #4]
 80097c8:	4698      	mov	r8, r3
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80097ca:	4640      	mov	r0, r8
 80097cc:	f7fa fad2 	bl	8003d74 <FindBroadcastRoutes>
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80097d0:	2501      	movs	r5, #1
 80097d2:	e0f5      	b.n	80099c0 <SendMessageFromPort+0x2c4>
		if(src == 0)
 80097d4:	4643      	mov	r3, r8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <SendMessageFromPort+0xe4>
			src =myID;
 80097da:	4b90      	ldr	r3, [pc, #576]	; (8009a1c <SendMessageFromPort+0x320>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	4698      	mov	r8, r3
		if(code > 0xFF)
 80097e0:	464b      	mov	r3, r9
 80097e2:	2bff      	cmp	r3, #255	; 0xff
 80097e4:	d84b      	bhi.n	800987e <SendMessageFromPort+0x182>
	bool extendOptions = false, extendCode = false;
 80097e6:	2100      	movs	r1, #0
		message[2] =length;
 80097e8:	4a87      	ldr	r2, [pc, #540]	; (8009a08 <SendMessageFromPort+0x30c>)
 80097ea:	2300      	movs	r3, #0
 80097ec:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 80097ee:	70d5      	strb	r5, [r2, #3]
		message[4] =src;
 80097f0:	4643      	mov	r3, r8
 80097f2:	7113      	strb	r3, [r2, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 80097f4:	488a      	ldr	r0, [pc, #552]	; (8009a20 <SendMessageFromPort+0x324>)
 80097f6:	2306      	movs	r3, #6
 80097f8:	56c3      	ldrsb	r3, [r0, r3]
 80097fa:	79c0      	ldrb	r0, [r0, #7]
 80097fc:	0080      	lsls	r0, r0, #2
 80097fe:	4303      	orrs	r3, r0
 8009800:	b25b      	sxtb	r3, r3
 8009802:	0048      	lsls	r0, r1, #1
 8009804:	4303      	orrs	r3, r0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 800980a:	4648      	mov	r0, r9
 800980c:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 800980e:	2900      	cmp	r1, #0
 8009810:	d037      	beq.n	8009882 <SendMessageFromPort+0x186>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009812:	0a02      	lsrs	r2, r0, #8
 8009814:	497c      	ldr	r1, [pc, #496]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009816:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009818:	2201      	movs	r2, #1
 800981a:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800981c:	2e2e      	cmp	r6, #46	; 0x2e
 800981e:	d933      	bls.n	8009888 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 8009820:	2280      	movs	r2, #128	; 0x80
 8009822:	4252      	negs	r2, r2
 8009824:	4313      	orrs	r3, r2
 8009826:	4a78      	ldr	r2, [pc, #480]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009828:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 800982a:	4b7e      	ldr	r3, [pc, #504]	; (8009a24 <SendMessageFromPort+0x328>)
 800982c:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 800982e:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009830:	262e      	movs	r6, #46	; 0x2e
			while(totalNumberOfParams != 0){
 8009832:	4b7c      	ldr	r3, [pc, #496]	; (8009a24 <SendMessageFromPort+0x328>)
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	469a      	mov	sl, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d035      	beq.n	80098a8 <SendMessageFromPort+0x1ac>
				if((totalNumberOfParams / numberOfParams) >= 1){
 800983c:	0031      	movs	r1, r6
 800983e:	4650      	mov	r0, sl
 8009840:	f7f6 fc86 	bl	8000150 <__udivsi3>
 8009844:	b280      	uxth	r0, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d13b      	bne.n	80098c2 <SendMessageFromPort+0x1c6>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800984a:	486f      	ldr	r0, [pc, #444]	; (8009a08 <SendMessageFromPort+0x30c>)
 800984c:	7942      	ldrb	r2, [r0, #5]
 800984e:	237f      	movs	r3, #127	; 0x7f
 8009850:	4013      	ands	r3, r2
 8009852:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009854:	465b      	mov	r3, fp
 8009856:	3307      	adds	r3, #7
 8009858:	1818      	adds	r0, r3, r0
 800985a:	4c73      	ldr	r4, [pc, #460]	; (8009a28 <SendMessageFromPort+0x32c>)
 800985c:	8821      	ldrh	r1, [r4, #0]
 800985e:	4b73      	ldr	r3, [pc, #460]	; (8009a2c <SendMessageFromPort+0x330>)
 8009860:	18c9      	adds	r1, r1, r3
 8009862:	4652      	mov	r2, sl
 8009864:	f00b fd59 	bl	801531a <memcpy>
					ptrShift =0;
 8009868:	2300      	movs	r3, #0
 800986a:	8023      	strh	r3, [r4, #0]
					totalNumberOfParams =0;
 800986c:	4a6d      	ldr	r2, [pc, #436]	; (8009a24 <SendMessageFromPort+0x328>)
 800986e:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8009870:	465c      	mov	r4, fp
 8009872:	4454      	add	r4, sl
 8009874:	b2e4      	uxtb	r4, r4
 8009876:	3404      	adds	r4, #4
 8009878:	b2e4      	uxtb	r4, r4
					numberOfParams =totalNumberOfParams;
 800987a:	4656      	mov	r6, sl
 800987c:	e7d9      	b.n	8009832 <SendMessageFromPort+0x136>
			extendCode = true;
 800987e:	2101      	movs	r1, #1
 8009880:	e7b2      	b.n	80097e8 <SendMessageFromPort+0xec>
 8009882:	2200      	movs	r2, #0
 8009884:	4693      	mov	fp, r2
 8009886:	e7c9      	b.n	800981c <SendMessageFromPort+0x120>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009888:	465b      	mov	r3, fp
 800988a:	3307      	adds	r3, #7
 800988c:	485e      	ldr	r0, [pc, #376]	; (8009a08 <SendMessageFromPort+0x30c>)
 800988e:	1818      	adds	r0, r3, r0
 8009890:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <SendMessageFromPort+0x32c>)
 8009892:	8819      	ldrh	r1, [r3, #0]
 8009894:	4b65      	ldr	r3, [pc, #404]	; (8009a2c <SendMessageFromPort+0x330>)
 8009896:	18c9      	adds	r1, r1, r3
 8009898:	0032      	movs	r2, r6
 800989a:	f00b fd3e 	bl	801531a <memcpy>
			length =numberOfParams + shift + 4;
 800989e:	465b      	mov	r3, fp
 80098a0:	199c      	adds	r4, r3, r6
 80098a2:	b2e4      	uxtb	r4, r4
 80098a4:	3404      	adds	r4, #4
 80098a6:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true){
 80098a8:	4b61      	ldr	r3, [pc, #388]	; (8009a30 <SendMessageFromPort+0x334>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d100      	bne.n	80098b2 <SendMessageFromPort+0x1b6>
 80098b0:	e767      	b.n	8009782 <SendMessageFromPort+0x86>
			if(dstGroupID < BOS_BROADCAST){
 80098b2:	4b60      	ldr	r3, [pc, #384]	; (8009a34 <SendMessageFromPort+0x338>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	469a      	mov	sl, r3
 80098b8:	2bff      	cmp	r3, #255	; 0xff
 80098ba:	d015      	beq.n	80098e8 <SendMessageFromPort+0x1ec>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098bc:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 80098be:	2200      	movs	r2, #0
 80098c0:	e016      	b.n	80098f0 <SendMessageFromPort+0x1f4>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80098c2:	9600      	str	r6, [sp, #0]
 80098c4:	464b      	mov	r3, r9
 80098c6:	002a      	movs	r2, r5
 80098c8:	4641      	mov	r1, r8
 80098ca:	0038      	movs	r0, r7
 80098cc:	f7ff ff16 	bl	80096fc <SendMessageFromPort>
					osDelay(10);
 80098d0:	200a      	movs	r0, #10
 80098d2:	f006 f8ef 	bl	800fab4 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80098d6:	4a53      	ldr	r2, [pc, #332]	; (8009a24 <SendMessageFromPort+0x328>)
 80098d8:	8813      	ldrh	r3, [r2, #0]
 80098da:	1b9b      	subs	r3, r3, r6
 80098dc:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80098de:	4a52      	ldr	r2, [pc, #328]	; (8009a28 <SendMessageFromPort+0x32c>)
 80098e0:	8813      	ldrh	r3, [r2, #0]
 80098e2:	18f3      	adds	r3, r6, r3
 80098e4:	8013      	strh	r3, [r2, #0]
 80098e6:	e7a4      	b.n	8009832 <SendMessageFromPort+0x136>
			uint8_t groupMembers =0;
 80098e8:	2200      	movs	r2, #0
 80098ea:	e022      	b.n	8009932 <SendMessageFromPort+0x236>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098ec:	3301      	adds	r3, #1
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	4851      	ldr	r0, [pc, #324]	; (8009a38 <SendMessageFromPort+0x33c>)
 80098f2:	7800      	ldrb	r0, [r0, #0]
 80098f4:	4298      	cmp	r0, r3
 80098f6:	d316      	bcc.n	8009926 <SendMessageFromPort+0x22a>
					if(InGroup(i,dstGroupID)){
 80098f8:	1e58      	subs	r0, r3, #1
 80098fa:	0040      	lsls	r0, r0, #1
 80098fc:	494f      	ldr	r1, [pc, #316]	; (8009a3c <SendMessageFromPort+0x340>)
 80098fe:	5a40      	ldrh	r0, [r0, r1]
 8009900:	4651      	mov	r1, sl
 8009902:	4108      	asrs	r0, r1
 8009904:	07c1      	lsls	r1, r0, #31
 8009906:	d5f1      	bpl.n	80098ec <SendMessageFromPort+0x1f0>
						++groupMembers;							// Add this member
 8009908:	3201      	adds	r2, #1
 800990a:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800990c:	18b0      	adds	r0, r6, r2
 800990e:	3001      	adds	r0, #1
 8009910:	282d      	cmp	r0, #45	; 0x2d
 8009912:	dd00      	ble.n	8009916 <SendMessageFromPort+0x21a>
 8009914:	e071      	b.n	80099fa <SendMessageFromPort+0x2fe>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009916:	4659      	mov	r1, fp
 8009918:	1dc8      	adds	r0, r1, #7
 800991a:	1830      	adds	r0, r6, r0
 800991c:	1810      	adds	r0, r2, r0
 800991e:	3801      	subs	r0, #1
 8009920:	4939      	ldr	r1, [pc, #228]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009922:	540b      	strb	r3, [r1, r0]
 8009924:	e7e2      	b.n	80098ec <SendMessageFromPort+0x1f0>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009926:	465b      	mov	r3, fp
 8009928:	3307      	adds	r3, #7
 800992a:	18f3      	adds	r3, r6, r3
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	4836      	ldr	r0, [pc, #216]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009930:	54c2      	strb	r2, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009932:	4653      	mov	r3, sl
 8009934:	2bff      	cmp	r3, #255	; 0xff
 8009936:	d01a      	beq.n	800996e <SendMessageFromPort+0x272>
			else if(dstGroupID == BOS_BROADCAST)
 8009938:	4653      	mov	r3, sl
 800993a:	2bff      	cmp	r3, #255	; 0xff
 800993c:	d05f      	beq.n	80099fe <SendMessageFromPort+0x302>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800993e:	18b3      	adds	r3, r6, r2
 8009940:	3302      	adds	r3, #2
 8009942:	2b2d      	cmp	r3, #45	; 0x2d
 8009944:	dc5d      	bgt.n	8009a02 <SendMessageFromPort+0x306>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009946:	483e      	ldr	r0, [pc, #248]	; (8009a40 <SendMessageFromPort+0x344>)
 8009948:	7803      	ldrb	r3, [r0, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	b2db      	uxtb	r3, r3
 800994e:	7003      	strb	r3, [r0, #0]
 8009950:	4658      	mov	r0, fp
 8009952:	3007      	adds	r0, #7
 8009954:	1836      	adds	r6, r6, r0
 8009956:	1996      	adds	r6, r2, r6
 8009958:	3601      	adds	r6, #1
 800995a:	482b      	ldr	r0, [pc, #172]	; (8009a08 <SendMessageFromPort+0x30c>)
 800995c:	5583      	strb	r3, [r0, r6]
			if(dstGroupID == BOS_BROADCAST)
 800995e:	4653      	mov	r3, sl
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d012      	beq.n	800998a <SendMessageFromPort+0x28e>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009964:	18a4      	adds	r4, r4, r2
 8009966:	b2e4      	uxtb	r4, r4
 8009968:	3402      	adds	r4, #2
 800996a:	b2e4      	uxtb	r4, r4
 800996c:	e709      	b.n	8009782 <SendMessageFromPort+0x86>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800996e:	1c73      	adds	r3, r6, #1
 8009970:	2b2d      	cmp	r3, #45	; 0x2d
 8009972:	dce1      	bgt.n	8009938 <SendMessageFromPort+0x23c>
				message[7 + shift + numberOfParams] =++bcastID;
 8009974:	4832      	ldr	r0, [pc, #200]	; (8009a40 <SendMessageFromPort+0x344>)
 8009976:	7803      	ldrb	r3, [r0, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	b2db      	uxtb	r3, r3
 800997c:	7003      	strb	r3, [r0, #0]
 800997e:	4658      	mov	r0, fp
 8009980:	3007      	adds	r0, #7
 8009982:	1836      	adds	r6, r6, r0
 8009984:	4820      	ldr	r0, [pc, #128]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009986:	5583      	strb	r3, [r0, r6]
 8009988:	e7e9      	b.n	800995e <SendMessageFromPort+0x262>
				length +=1;		// + bcastID
 800998a:	3401      	adds	r4, #1
 800998c:	b2e4      	uxtb	r4, r4
 800998e:	e6f8      	b.n	8009782 <SendMessageFromPort+0x86>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009990:	3404      	adds	r4, #4
 8009992:	b2a2      	uxth	r2, r4
 8009994:	2332      	movs	r3, #50	; 0x32
 8009996:	491c      	ldr	r1, [pc, #112]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009998:	0038      	movs	r0, r7
 800999a:	f005 ffa5 	bl	800f8e8 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	2000      	movs	r0, #0
 80099a2:	f006 ffb3 	bl	801090c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <SendMessageFromPort+0x348>)
 80099a8:	2202      	movs	r2, #2
 80099aa:	701a      	strb	r2, [r3, #0]
	
	return result;
 80099ac:	2000      	movs	r0, #0
}
 80099ae:	b005      	add	sp, #20
 80099b0:	bc3c      	pop	{r2, r3, r4, r5}
 80099b2:	4690      	mov	r8, r2
 80099b4:	4699      	mov	r9, r3
 80099b6:	46a2      	mov	sl, r4
 80099b8:	46ab      	mov	fp, r5
 80099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80099bc:	3501      	adds	r5, #1
 80099be:	b2ed      	uxtb	r5, r5
 80099c0:	2d05      	cmp	r5, #5
 80099c2:	d8ec      	bhi.n	800999e <SendMessageFromPort+0x2a2>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80099c4:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <SendMessageFromPort+0x320>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <SendMessageFromPort+0x34c>)
 80099ce:	5a9b      	ldrh	r3, [r3, r2]
 80099d0:	1e6a      	subs	r2, r5, #1
 80099d2:	4113      	asrs	r3, r2
 80099d4:	07db      	lsls	r3, r3, #31
 80099d6:	d5f1      	bpl.n	80099bc <SendMessageFromPort+0x2c0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80099d8:	1d22      	adds	r2, r4, #4
 80099da:	b292      	uxth	r2, r2
 80099dc:	2332      	movs	r3, #50	; 0x32
 80099de:	490a      	ldr	r1, [pc, #40]	; (8009a08 <SendMessageFromPort+0x30c>)
 80099e0:	0028      	movs	r0, r5
 80099e2:	f005 ff81 	bl	800f8e8 <writePxDMAMutex>
				Delay_ms(1);
 80099e6:	2001      	movs	r0, #1
 80099e8:	f008 f8e0 	bl	8011bac <HAL_Delay>
 80099ec:	e7e6      	b.n	80099bc <SendMessageFromPort+0x2c0>
		return BOS_ERR_WrongParam;
 80099ee:	2067      	movs	r0, #103	; 0x67
 80099f0:	e7dd      	b.n	80099ae <SendMessageFromPort+0x2b2>
 80099f2:	2067      	movs	r0, #103	; 0x67
 80099f4:	e7db      	b.n	80099ae <SendMessageFromPort+0x2b2>
 80099f6:	2067      	movs	r0, #103	; 0x67
 80099f8:	e7d9      	b.n	80099ae <SendMessageFromPort+0x2b2>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80099fa:	2069      	movs	r0, #105	; 0x69
 80099fc:	e7d7      	b.n	80099ae <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80099fe:	2069      	movs	r0, #105	; 0x69
 8009a00:	e7d5      	b.n	80099ae <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a02:	2069      	movs	r0, #105	; 0x69
 8009a04:	e7d3      	b.n	80099ae <SendMessageFromPort+0x2b2>
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	20000ee8 	.word	0x20000ee8
 8009a0c:	20000f20 	.word	0x20000f20
 8009a10:	20000d30 	.word	0x20000d30
 8009a14:	20000eeb 	.word	0x20000eeb
 8009a18:	20001400 	.word	0x20001400
 8009a1c:	20001066 	.word	0x20001066
 8009a20:	20006da0 	.word	0x20006da0
 8009a24:	2000153a 	.word	0x2000153a
 8009a28:	20001538 	.word	0x20001538
 8009a2c:	20000f28 	.word	0x20000f28
 8009a30:	20000a9c 	.word	0x20000a9c
 8009a34:	2000001d 	.word	0x2000001d
 8009a38:	2000001c 	.word	0x2000001c
 8009a3c:	20000eb0 	.word	0x20000eb0
 8009a40:	20000cdc 	.word	0x20000cdc
 8009a44:	200010f8 	.word	0x200010f8
 8009a48:	20000ce0 	.word	0x20000ce0

08009a4c <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a4c:	b530      	push	{r4, r5, lr}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <ForwardReceivedMessage+0x34>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009a58:	1e42      	subs	r2, r0, #1
 8009a5a:	00d3      	lsls	r3, r2, #3
 8009a5c:	1a9b      	subs	r3, r3, r2
 8009a5e:	00da      	lsls	r2, r3, #3
 8009a60:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <ForwardReceivedMessage+0x38>)
 8009a62:	5cd4      	ldrb	r4, [r2, r3]
	port =FindRoute(myID,dst);
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <ForwardReceivedMessage+0x3c>)
 8009a66:	7818      	ldrb	r0, [r3, #0]
 8009a68:	0021      	movs	r1, r4
 8009a6a:	f7fa fa45 	bl	8003ef8 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009a6e:	9500      	str	r5, [sp, #0]
 8009a70:	2300      	movs	r3, #0
 8009a72:	0022      	movs	r2, r4
 8009a74:	2100      	movs	r1, #0
 8009a76:	f7ff fe41 	bl	80096fc <SendMessageFromPort>
}
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bd30      	pop	{r4, r5, pc}
 8009a80:	20000a9c 	.word	0x20000a9c
 8009a84:	20000d30 	.word	0x20000d30
 8009a88:	20001066 	.word	0x20001066

08009a8c <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009a8c:	b500      	push	{lr}
 8009a8e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009a90:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <BroadcastReceivedMessage+0x38>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <BroadcastReceivedMessage+0x3c>)
 8009a98:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009a9a:	28ff      	cmp	r0, #255	; 0xff
 8009a9c:	d009      	beq.n	8009ab2 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009a9e:	9100      	str	r1, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	22fe      	movs	r2, #254	; 0xfe
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f7ff fe28 	bl	80096fc <SendMessageFromPort>
}
 8009aac:	2000      	movs	r0, #0
 8009aae:	b003      	add	sp, #12
 8009ab0:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009ab2:	9100      	str	r1, [sp, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	32ff      	adds	r2, #255	; 0xff
 8009ab8:	2100      	movs	r1, #0
 8009aba:	2000      	movs	r0, #0
 8009abc:	f7ff fe1e 	bl	80096fc <SendMessageFromPort>
 8009ac0:	e7f4      	b.n	8009aac <BroadcastReceivedMessage+0x20>
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	20000a9c 	.word	0x20000a9c
 8009ac8:	2000001d 	.word	0x2000001d

08009acc <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009acc:	b530      	push	{r4, r5, lr}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <BroadcastMessage+0x44>)
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <BroadcastMessage+0x48>)
 8009ada:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009adc:	29ff      	cmp	r1, #255	; 0xff
 8009ade:	d00e      	beq.n	8009afe <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009ae0:	9400      	str	r4, [sp, #0]
 8009ae2:	0013      	movs	r3, r2
 8009ae4:	22fe      	movs	r2, #254	; 0xfe
 8009ae6:	0001      	movs	r1, r0
 8009ae8:	2000      	movs	r0, #0
 8009aea:	f7ff fe07 	bl	80096fc <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009aee:	0022      	movs	r2, r4
 8009af0:	2100      	movs	r1, #0
 8009af2:	4809      	ldr	r0, [pc, #36]	; (8009b18 <BroadcastMessage+0x4c>)
 8009af4:	f00b fc1a 	bl	801532c <memset>
}
 8009af8:	2000      	movs	r0, #0
 8009afa:	b003      	add	sp, #12
 8009afc:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009afe:	9400      	str	r4, [sp, #0]
 8009b00:	0013      	movs	r3, r2
 8009b02:	22ff      	movs	r2, #255	; 0xff
 8009b04:	0001      	movs	r1, r0
 8009b06:	2000      	movs	r0, #0
 8009b08:	f7ff fdf8 	bl	80096fc <SendMessageFromPort>
 8009b0c:	e7ef      	b.n	8009aee <BroadcastMessage+0x22>
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	20000a9c 	.word	0x20000a9c
 8009b14:	2000001d 	.word	0x2000001d
 8009b18:	20000f28 	.word	0x20000f28

08009b1c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	0004      	movs	r4, r0
 8009b22:	000e      	movs	r6, r1
 8009b24:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009b26:	28ff      	cmp	r0, #255	; 0xff
 8009b28:	d012      	beq.n	8009b50 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009b2a:	4f0d      	ldr	r7, [pc, #52]	; (8009b60 <SendMessageToModule+0x44>)
 8009b2c:	7838      	ldrb	r0, [r7, #0]
 8009b2e:	0021      	movs	r1, r4
 8009b30:	f7fa f9e2 	bl	8003ef8 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009b34:	7839      	ldrb	r1, [r7, #0]
 8009b36:	9500      	str	r5, [sp, #0]
 8009b38:	0033      	movs	r3, r6
 8009b3a:	0022      	movs	r2, r4
 8009b3c:	f7ff fdde 	bl	80096fc <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009b40:	002a      	movs	r2, r5
 8009b42:	2100      	movs	r1, #0
 8009b44:	4807      	ldr	r0, [pc, #28]	; (8009b64 <SendMessageToModule+0x48>)
 8009b46:	f00b fbf1 	bl	801532c <memset>
}
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <SendMessageToModule+0x44>)
 8009b52:	7818      	ldrb	r0, [r3, #0]
 8009b54:	0013      	movs	r3, r2
 8009b56:	000a      	movs	r2, r1
 8009b58:	21ff      	movs	r1, #255	; 0xff
 8009b5a:	f7ff ffb7 	bl	8009acc <BroadcastMessage>
 8009b5e:	e7f4      	b.n	8009b4a <SendMessageToModule+0x2e>
 8009b60:	20001066 	.word	0x20001066
 8009b64:	20000f28 	.word	0x20000f28

08009b68 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	46de      	mov	lr, fp
 8009b6c:	4657      	mov	r7, sl
 8009b6e:	464e      	mov	r6, r9
 8009b70:	b5c0      	push	{r6, r7, lr}
 8009b72:	b08a      	sub	sp, #40	; 0x28
 8009b74:	9009      	str	r0, [sp, #36]	; 0x24
 8009b76:	000c      	movs	r4, r1
 8009b78:	9107      	str	r1, [sp, #28]
 8009b7a:	9208      	str	r2, [sp, #32]
 8009b7c:	001d      	movs	r5, r3
 8009b7e:	9306      	str	r3, [sp, #24]
 8009b80:	ab12      	add	r3, sp, #72	; 0x48
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	469a      	mov	sl, r3
 8009b86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009b88:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b8a:	ab15      	add	r3, sp, #84	; 0x54
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009b90:	4b4d      	ldr	r3, [pc, #308]	; (8009cc8 <StartScastDMAStream+0x160>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	428b      	cmp	r3, r1
 8009b96:	d103      	bne.n	8009ba0 <StartScastDMAStream+0x38>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b98:	2400      	movs	r4, #0
 8009b9a:	003d      	movs	r5, r7
 8009b9c:	0037      	movs	r7, r6
 8009b9e:	e055      	b.n	8009c4c <StartScastDMAStream+0xe4>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009ba0:	0e32      	lsrs	r2, r6, #24
 8009ba2:	4b4a      	ldr	r3, [pc, #296]	; (8009ccc <StartScastDMAStream+0x164>)
 8009ba4:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009ba6:	0c32      	lsrs	r2, r6, #16
 8009ba8:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009baa:	0a32      	lsrs	r2, r6, #8
 8009bac:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009bae:	70de      	strb	r6, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009bb0:	0e3a      	lsrs	r2, r7, #24
 8009bb2:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009bb4:	0c3a      	lsrs	r2, r7, #16
 8009bb6:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009bb8:	0a3a      	lsrs	r2, r7, #8
 8009bba:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009bbc:	71df      	strb	r7, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009bbe:	4651      	mov	r1, sl
 8009bc0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009bc2:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009bc4:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009bca:	465a      	mov	r2, fp
 8009bcc:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009bce:	220d      	movs	r2, #13
 8009bd0:	211c      	movs	r1, #28
 8009bd2:	0020      	movs	r0, r4
 8009bd4:	f7ff ffa2 	bl	8009b1c <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009bd8:	2000      	movs	r0, #0
 8009bda:	b00a      	add	sp, #40	; 0x28
 8009bdc:	bc1c      	pop	{r2, r3, r4}
 8009bde:	4691      	mov	r9, r2
 8009be0:	469a      	mov	sl, r3
 8009be2:	46a3      	mov	fp, r4
 8009be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009be6:	9907      	ldr	r1, [sp, #28]
 8009be8:	f7fa f986 	bl	8003ef8 <FindRoute>
 8009bec:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009bee:	9906      	ldr	r1, [sp, #24]
 8009bf0:	9807      	ldr	r0, [sp, #28]
 8009bf2:	f7fa f981 	bl	8003ef8 <FindRoute>
			if(route[i] == dstM){
 8009bf6:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009bf8:	5d98      	ldrb	r0, [r3, r6]
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	d139      	bne.n	8009c74 <StartScastDMAStream+0x10c>
				temp2 =dstP;
 8009c00:	9808      	ldr	r0, [sp, #32]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c02:	0e3a      	lsrs	r2, r7, #24
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <StartScastDMAStream+0x164>)
 8009c06:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009c08:	0c3a      	lsrs	r2, r7, #16
 8009c0a:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009c0c:	0a3a      	lsrs	r2, r7, #8
 8009c0e:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8009c10:	70df      	strb	r7, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c12:	0e2a      	lsrs	r2, r5, #24
 8009c14:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009c16:	0c2a      	lsrs	r2, r5, #16
 8009c18:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009c1a:	0a2a      	lsrs	r2, r5, #8
 8009c1c:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8009c1e:	71dd      	strb	r5, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 8009c20:	4652      	mov	r2, sl
 8009c22:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 8009c24:	464a      	mov	r2, r9
 8009c26:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8009c28:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009c2a:	465a      	mov	r2, fp
 8009c2c:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8009c2e:	9906      	ldr	r1, [sp, #24]
 8009c30:	9807      	ldr	r0, [sp, #28]
 8009c32:	f7fa f961 	bl	8003ef8 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009c36:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c38:	5d98      	ldrb	r0, [r3, r6]
 8009c3a:	220c      	movs	r2, #12
 8009c3c:	211b      	movs	r1, #27
 8009c3e:	f7ff ff6d 	bl	8009b1c <SendMessageToModule>
			osDelay(10);
 8009c42:	200a      	movs	r0, #10
 8009c44:	f005 ff36 	bl	800fab4 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8009c48:	3401      	adds	r4, #1
 8009c4a:	b2e4      	uxtb	r4, r4
 8009c4c:	2c19      	cmp	r4, #25
 8009c4e:	d817      	bhi.n	8009c80 <StartScastDMAStream+0x118>
		FindRoute(srcM,dstM);
 8009c50:	9906      	ldr	r1, [sp, #24]
 8009c52:	9807      	ldr	r0, [sp, #28]
 8009c54:	f7fa f950 	bl	8003ef8 <FindRoute>
		if(route[i]){
 8009c58:	0026      	movs	r6, r4
 8009c5a:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c5c:	5d18      	ldrb	r0, [r3, r4]
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0f2      	beq.n	8009c48 <StartScastDMAStream+0xe0>
			if(route[i + 1]){
 8009c62:	1c63      	adds	r3, r4, #1
 8009c64:	4a1a      	ldr	r2, [pc, #104]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c66:	5cd1      	ldrb	r1, [r2, r3]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d0bc      	beq.n	8009be6 <StartScastDMAStream+0x7e>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009c6c:	f7fa f944 	bl	8003ef8 <FindRoute>
 8009c70:	4681      	mov	r9, r0
 8009c72:	e7bc      	b.n	8009bee <StartScastDMAStream+0x86>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009c74:	1e73      	subs	r3, r6, #1
 8009c76:	4a16      	ldr	r2, [pc, #88]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c78:	5cd1      	ldrb	r1, [r2, r3]
 8009c7a:	f7fa f93d 	bl	8003ef8 <FindRoute>
 8009c7e:	e7c0      	b.n	8009c02 <StartScastDMAStream+0x9a>
 8009c80:	003e      	movs	r6, r7
 8009c82:	002f      	movs	r7, r5
	if(srcM == dstM)
 8009c84:	9807      	ldr	r0, [sp, #28]
 8009c86:	9906      	ldr	r1, [sp, #24]
 8009c88:	4288      	cmp	r0, r1
 8009c8a:	d118      	bne.n	8009cbe <StartScastDMAStream+0x156>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c92:	003a      	movs	r2, r7
 8009c94:	0031      	movs	r1, r6
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7ff fc1c 	bl	80094d4 <SetupDMAStreams>
	if(stored){
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d09a      	beq.n	8009bd8 <StartScastDMAStream+0x70>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9302      	str	r3, [sp, #8]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	9b08      	ldr	r3, [sp, #32]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb2:	003a      	movs	r2, r7
 8009cb4:	0031      	movs	r1, r6
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	f7f9 febe 	bl	8003a38 <SaveEEstreams>
 8009cbc:	e78c      	b.n	8009bd8 <StartScastDMAStream+0x70>
		port =FindRoute(srcM,dstM);
 8009cbe:	f7fa f91b 	bl	8003ef8 <FindRoute>
 8009cc2:	9008      	str	r0, [sp, #32]
 8009cc4:	e7e2      	b.n	8009c8c <StartScastDMAStream+0x124>
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	20001066 	.word	0x20001066
 8009ccc:	20000f28 	.word	0x20000f28
 8009cd0:	20006ea4 	.word	0x20006ea4

08009cd4 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	46de      	mov	lr, fp
 8009cd8:	4657      	mov	r7, sl
 8009cda:	464e      	mov	r6, r9
 8009cdc:	4645      	mov	r5, r8
 8009cde:	b5e0      	push	{r5, r6, r7, lr}
 8009ce0:	b085      	sub	sp, #20
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
	uint8_t port;
	bool emptyBuffer = false;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9301      	str	r3, [sp, #4]
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009ce6:	469b      	mov	fp, r3
 8009ce8:	e19a      	b.n	800a020 <BackEndTask+0x34c>
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cea:	1e65      	subs	r5, r4, #1
 8009cec:	4bcd      	ldr	r3, [pc, #820]	; (800a024 <BackEndTask+0x350>)
 8009cee:	5d5f      	ldrb	r7, [r3, r5]
 8009cf0:	e004      	b.n	8009cfc <BackEndTask+0x28>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
						packetStart =i;
						break;
					}
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009cf2:	2f3f      	cmp	r7, #63	; 0x3f
 8009cf4:	d02b      	beq.n	8009d4e <BackEndTask+0x7a>
						packetStart = MSG_RX_BUF_SIZE - 1;
						break;
					}
					else{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if(i == MSG_RX_BUF_SIZE - 1){
 8009cf6:	2f3f      	cmp	r7, #63	; 0x3f
 8009cf8:	d037      	beq.n	8009d6a <BackEndTask+0x96>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cfa:	3701      	adds	r7, #1
 8009cfc:	2f3f      	cmp	r7, #63	; 0x3f
 8009cfe:	dc0f      	bgt.n	8009d20 <BackEndTask+0x4c>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009d00:	2f3e      	cmp	r7, #62	; 0x3e
 8009d02:	dcf6      	bgt.n	8009cf2 <BackEndTask+0x1e>
 8009d04:	01aa      	lsls	r2, r5, #6
 8009d06:	4bc8      	ldr	r3, [pc, #800]	; (800a028 <BackEndTask+0x354>)
 8009d08:	189b      	adds	r3, r3, r2
 8009d0a:	5ddb      	ldrb	r3, [r3, r7]
 8009d0c:	2b48      	cmp	r3, #72	; 0x48
 8009d0e:	d1f0      	bne.n	8009cf2 <BackEndTask+0x1e>
 8009d10:	1c7b      	adds	r3, r7, #1
 8009d12:	0011      	movs	r1, r2
 8009d14:	4ac4      	ldr	r2, [pc, #784]	; (800a028 <BackEndTask+0x354>)
 8009d16:	1852      	adds	r2, r2, r1
 8009d18:	5cd3      	ldrb	r3, [r2, r3]
 8009d1a:	2b5a      	cmp	r3, #90	; 0x5a
 8009d1c:	d1e9      	bne.n	8009cf2 <BackEndTask+0x1e>
						packetStart =i;
 8009d1e:	46bb      	mov	fp, r7
						}
					}
				}
				
				/* Check parse status */
				if(emptyBuffer){
 8009d20:	9b01      	ldr	r3, [sp, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d000      	beq.n	8009d28 <BackEndTask+0x54>
 8009d26:	e176      	b.n	800a016 <BackEndTask+0x342>
					emptyBuffer = false;
					continue;
				}
				
				/* A.2. Parse the length byte */
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009d28:	465b      	mov	r3, fp
 8009d2a:	2b3d      	cmp	r3, #61	; 0x3d
 8009d2c:	d05d      	beq.n	8009dea <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
					parseStart =0;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d30:	d100      	bne.n	8009d34 <BackEndTask+0x60>
 8009d32:	e084      	b.n	8009e3e <BackEndTask+0x16a>
					packetLength =UARTRxBuf[port - 1][0];
					parseStart =1;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009d34:	2b3f      	cmp	r3, #63	; 0x3f
 8009d36:	d100      	bne.n	8009d3a <BackEndTask+0x66>
 8009d38:	e088      	b.n	8009e4c <BackEndTask+0x178>
					packetLength =UARTRxBuf[port - 1][1];
					parseStart =2;
				}
				else{
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	01a9      	lsls	r1, r5, #6
 8009d3e:	4aba      	ldr	r2, [pc, #744]	; (800a028 <BackEndTask+0x354>)
 8009d40:	1852      	adds	r2, r2, r1
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	4699      	mov	r9, r3
					parseStart =packetStart + 3;
 8009d46:	2303      	movs	r3, #3
 8009d48:	445b      	add	r3, fp
 8009d4a:	469a      	mov	sl, r3
 8009d4c:	e055      	b.n	8009dfa <BackEndTask+0x126>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009d4e:	01aa      	lsls	r2, r5, #6
 8009d50:	4bb5      	ldr	r3, [pc, #724]	; (800a028 <BackEndTask+0x354>)
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	333f      	adds	r3, #63	; 0x3f
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b48      	cmp	r3, #72	; 0x48
 8009d5a:	d1cc      	bne.n	8009cf6 <BackEndTask+0x22>
 8009d5c:	0013      	movs	r3, r2
 8009d5e:	4ab2      	ldr	r2, [pc, #712]	; (800a028 <BackEndTask+0x354>)
 8009d60:	5c9b      	ldrb	r3, [r3, r2]
 8009d62:	2b5a      	cmp	r3, #90	; 0x5a
 8009d64:	d1c7      	bne.n	8009cf6 <BackEndTask+0x22>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009d66:	46bb      	mov	fp, r7
 8009d68:	e7da      	b.n	8009d20 <BackEndTask+0x4c>
							if(BOS.disableCLI == false){
 8009d6a:	4bb0      	ldr	r3, [pc, #704]	; (800a02c <BackEndTask+0x358>)
 8009d6c:	7edb      	ldrb	r3, [r3, #27]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <BackEndTask+0xa4>
							emptyBuffer = true;
 8009d72:	2301      	movs	r3, #1
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	e7c0      	b.n	8009cfa <BackEndTask+0x26>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009d78:	4baa      	ldr	r3, [pc, #680]	; (800a024 <BackEndTask+0x350>)
 8009d7a:	5d5b      	ldrb	r3, [r3, r5]
 8009d7c:	e002      	b.n	8009d84 <BackEndTask+0xb0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009d7e:	2b3f      	cmp	r3, #63	; 0x3f
 8009d80:	d02a      	beq.n	8009dd8 <BackEndTask+0x104>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009d82:	3301      	adds	r3, #1
 8009d84:	2b3f      	cmp	r3, #63	; 0x3f
 8009d86:	dc2d      	bgt.n	8009de4 <BackEndTask+0x110>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009d88:	01a9      	lsls	r1, r5, #6
 8009d8a:	4aa7      	ldr	r2, [pc, #668]	; (800a028 <BackEndTask+0x354>)
 8009d8c:	1852      	adds	r2, r2, r1
 8009d8e:	5cd2      	ldrb	r2, [r2, r3]
 8009d90:	2a0d      	cmp	r2, #13
 8009d92:	d1f6      	bne.n	8009d82 <BackEndTask+0xae>
 8009d94:	2b3e      	cmp	r3, #62	; 0x3e
 8009d96:	dcf2      	bgt.n	8009d7e <BackEndTask+0xaa>
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	0008      	movs	r0, r1
 8009d9c:	49a2      	ldr	r1, [pc, #648]	; (800a028 <BackEndTask+0x354>)
 8009d9e:	1809      	adds	r1, r1, r0
 8009da0:	5c8a      	ldrb	r2, [r1, r2]
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1eb      	bne.n	8009d7e <BackEndTask+0xaa>
										UARTRxBuf[port - 1][j] =0;
 8009da6:	01a9      	lsls	r1, r5, #6
 8009da8:	4a9f      	ldr	r2, [pc, #636]	; (800a028 <BackEndTask+0x354>)
 8009daa:	1852      	adds	r2, r2, r1
 8009dac:	2100      	movs	r1, #0
 8009dae:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009db0:	3301      	adds	r3, #1
 8009db2:	4a9c      	ldr	r2, [pc, #624]	; (800a024 <BackEndTask+0x350>)
 8009db4:	5553      	strb	r3, [r2, r5]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009db6:	4b9e      	ldr	r3, [pc, #632]	; (800a030 <BackEndTask+0x35c>)
 8009db8:	7818      	ldrb	r0, [r3, #0]
 8009dba:	4a9e      	ldr	r2, [pc, #632]	; (800a034 <BackEndTask+0x360>)
 8009dbc:	5411      	strb	r1, [r2, r0]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009dbe:	3103      	adds	r1, #3
 8009dc0:	5591      	strb	r1, [r2, r6]
										PcPort =port;
 8009dc2:	701c      	strb	r4, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009dc4:	4b9c      	ldr	r3, [pc, #624]	; (800a038 <BackEndTask+0x364>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	2202      	movs	r2, #2
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f007 fab3 	bl	8011338 <xTaskGenericNotify>
							emptyBuffer = true;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	9301      	str	r3, [sp, #4]
										break;
 8009dd6:	e790      	b.n	8009cfa <BackEndTask+0x26>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009dd8:	01aa      	lsls	r2, r5, #6
 8009dda:	4993      	ldr	r1, [pc, #588]	; (800a028 <BackEndTask+0x354>)
 8009ddc:	5c52      	ldrb	r2, [r2, r1]
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	d1cf      	bne.n	8009d82 <BackEndTask+0xae>
 8009de2:	e7e0      	b.n	8009da6 <BackEndTask+0xd2>
							emptyBuffer = true;
 8009de4:	2301      	movs	r3, #1
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	e787      	b.n	8009cfa <BackEndTask+0x26>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009dea:	01aa      	lsls	r2, r5, #6
 8009dec:	4b8e      	ldr	r3, [pc, #568]	; (800a028 <BackEndTask+0x354>)
 8009dee:	189b      	adds	r3, r3, r2
 8009df0:	333f      	adds	r3, #63	; 0x3f
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	4699      	mov	r9, r3
					parseStart =0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	469a      	mov	sl, r3
				}
				
				/* A.3. Set packet end from packet start and length */
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009dfa:	464b      	mov	r3, r9
 8009dfc:	1cdf      	adds	r7, r3, #3
 8009dfe:	46b8      	mov	r8, r7
 8009e00:	44d8      	add	r8, fp
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009e02:	4643      	mov	r3, r8
 8009e04:	2b3f      	cmp	r3, #63	; 0x3f
 8009e06:	dd03      	ble.n	8009e10 <BackEndTask+0x13c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	425b      	negs	r3, r3
 8009e0c:	469c      	mov	ip, r3
 8009e0e:	44e0      	add	r8, ip
				
				if(packetStart != packetEnd) // Non-empty packet
 8009e10:	45c3      	cmp	fp, r8
 8009e12:	d123      	bne.n	8009e5c <BackEndTask+0x188>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009e14:	45c3      	cmp	fp, r8
 8009e16:	db00      	blt.n	8009e1a <BackEndTask+0x146>
 8009e18:	e0c3      	b.n	8009fa2 <BackEndTask+0x2ce>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009e1a:	01a8      	lsls	r0, r5, #6
 8009e1c:	4458      	add	r0, fp
 8009e1e:	4b82      	ldr	r3, [pc, #520]	; (800a028 <BackEndTask+0x354>)
 8009e20:	18c0      	adds	r0, r0, r3
 8009e22:	464a      	mov	r2, r9
 8009e24:	3204      	adds	r2, #4
 8009e26:	2100      	movs	r1, #0
 8009e28:	f00b fa80 	bl	801532c <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009e2c:	4643      	mov	r3, r8
 8009e2e:	3301      	adds	r3, #1
 8009e30:	4a7c      	ldr	r2, [pc, #496]	; (800a024 <BackEndTask+0x350>)
 8009e32:	5553      	strb	r3, [r2, r5]
				++rejectedMsg;
 8009e34:	4a81      	ldr	r2, [pc, #516]	; (800a03c <BackEndTask+0x368>)
 8009e36:	8813      	ldrh	r3, [r2, #0]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	8013      	strh	r3, [r2, #0]
 8009e3c:	e0dc      	b.n	8009ff8 <BackEndTask+0x324>
					packetLength =UARTRxBuf[port - 1][0];
 8009e3e:	01ab      	lsls	r3, r5, #6
 8009e40:	4a79      	ldr	r2, [pc, #484]	; (800a028 <BackEndTask+0x354>)
 8009e42:	5c9b      	ldrb	r3, [r3, r2]
 8009e44:	4699      	mov	r9, r3
					parseStart =1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	469a      	mov	sl, r3
 8009e4a:	e7d6      	b.n	8009dfa <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009e4c:	01aa      	lsls	r2, r5, #6
 8009e4e:	4b76      	ldr	r3, [pc, #472]	; (800a028 <BackEndTask+0x354>)
 8009e50:	189b      	adds	r3, r3, r2
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	4699      	mov	r9, r3
					parseStart =2;
 8009e56:	2302      	movs	r3, #2
 8009e58:	469a      	mov	sl, r3
 8009e5a:	e7ce      	b.n	8009dfa <BackEndTask+0x126>
					Delay_ms(1);
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f007 fea5 	bl	8011bac <HAL_Delay>
					if(packetStart < packetEnd){
 8009e62:	45c3      	cmp	fp, r8
 8009e64:	da49      	bge.n	8009efa <BackEndTask+0x226>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009e66:	01a9      	lsls	r1, r5, #6
 8009e68:	4459      	add	r1, fp
 8009e6a:	4b6f      	ldr	r3, [pc, #444]	; (800a028 <BackEndTask+0x354>)
 8009e6c:	18c9      	adds	r1, r1, r3
 8009e6e:	003a      	movs	r2, r7
 8009e70:	4873      	ldr	r0, [pc, #460]	; (800a040 <BackEndTask+0x36c>)
 8009e72:	f00b fa52 	bl	801531a <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009e76:	464b      	mov	r3, r9
 8009e78:	1cd9      	adds	r1, r3, #3
 8009e7a:	4f71      	ldr	r7, [pc, #452]	; (800a040 <BackEndTask+0x36c>)
 8009e7c:	0038      	movs	r0, r7
 8009e7e:	f004 ff1b 	bl	800ecb8 <CalculateCRC8>
 8009e82:	9002      	str	r0, [sp, #8]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009e84:	2238      	movs	r2, #56	; 0x38
 8009e86:	2100      	movs	r1, #0
 8009e88:	0038      	movs	r0, r7
 8009e8a:	f00b fa4f 	bl	801532c <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009e8e:	01aa      	lsls	r2, r5, #6
 8009e90:	4b65      	ldr	r3, [pc, #404]	; (800a028 <BackEndTask+0x354>)
 8009e92:	189b      	adds	r3, r3, r2
 8009e94:	4642      	mov	r2, r8
 8009e96:	5c9b      	ldrb	r3, [r3, r2]
 8009e98:	9a02      	ldr	r2, [sp, #8]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d1ba      	bne.n	8009e14 <BackEndTask+0x140>
						portStatus[port] =MSG;
 8009e9e:	4b65      	ldr	r3, [pc, #404]	; (800a034 <BackEndTask+0x360>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009ea4:	4b67      	ldr	r3, [pc, #412]	; (800a044 <BackEndTask+0x370>)
 8009ea6:	464a      	mov	r2, r9
 8009ea8:	555a      	strb	r2, [r3, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009eaa:	233f      	movs	r3, #63	; 0x3f
 8009eac:	4652      	mov	r2, sl
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	454b      	cmp	r3, r9
 8009eb2:	db3f      	blt.n	8009f34 <BackEndTask+0x260>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009eb4:	00eb      	lsls	r3, r5, #3
 8009eb6:	1b5b      	subs	r3, r3, r5
 8009eb8:	00d8      	lsls	r0, r3, #3
 8009eba:	4b63      	ldr	r3, [pc, #396]	; (800a048 <BackEndTask+0x374>)
 8009ebc:	18c0      	adds	r0, r0, r3
 8009ebe:	01a9      	lsls	r1, r5, #6
 8009ec0:	4451      	add	r1, sl
 8009ec2:	4b59      	ldr	r3, [pc, #356]	; (800a028 <BackEndTask+0x354>)
 8009ec4:	18c9      	adds	r1, r1, r3
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	f00b fa27 	bl	801531a <memcpy>
						if(packetStart < packetEnd){
 8009ecc:	45c3      	cmp	fp, r8
 8009ece:	da52      	bge.n	8009f76 <BackEndTask+0x2a2>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ed0:	01a8      	lsls	r0, r5, #6
 8009ed2:	4458      	add	r0, fp
 8009ed4:	4b54      	ldr	r3, [pc, #336]	; (800a028 <BackEndTask+0x354>)
 8009ed6:	18c0      	adds	r0, r0, r3
 8009ed8:	464a      	mov	r2, r9
 8009eda:	3204      	adds	r2, #4
 8009edc:	2100      	movs	r1, #0
 8009ede:	f00b fa25 	bl	801532c <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	4b4f      	ldr	r3, [pc, #316]	; (800a024 <BackEndTask+0x350>)
 8009ee8:	555a      	strb	r2, [r3, r5]
						++acceptedMsg;
 8009eea:	4a58      	ldr	r2, [pc, #352]	; (800a04c <BackEndTask+0x378>)
 8009eec:	8813      	ldrh	r3, [r2, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009ef2:	0020      	movs	r0, r4
 8009ef4:	f7ff fbc6 	bl	8009684 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009ef8:	e074      	b.n	8009fe4 <BackEndTask+0x310>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009efa:	01ab      	lsls	r3, r5, #6
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	0019      	movs	r1, r3
 8009f00:	4459      	add	r1, fp
 8009f02:	4849      	ldr	r0, [pc, #292]	; (800a028 <BackEndTask+0x354>)
 8009f04:	4684      	mov	ip, r0
 8009f06:	4461      	add	r1, ip
						MSG_RX_BUF_SIZE - packetStart);
 8009f08:	2240      	movs	r2, #64	; 0x40
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	1a10      	subs	r0, r2, r0
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009f0e:	9002      	str	r0, [sp, #8]
 8009f10:	0002      	movs	r2, r0
 8009f12:	484b      	ldr	r0, [pc, #300]	; (800a040 <BackEndTask+0x36c>)
 8009f14:	f00b fa01 	bl	801531a <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009f18:	4949      	ldr	r1, [pc, #292]	; (800a040 <BackEndTask+0x36c>)
 8009f1a:	0008      	movs	r0, r1
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	469c      	mov	ip, r3
 8009f20:	4460      	add	r0, ip
 8009f22:	9a03      	ldr	r2, [sp, #12]
 8009f24:	4940      	ldr	r1, [pc, #256]	; (800a028 <BackEndTask+0x354>)
 8009f26:	468c      	mov	ip, r1
 8009f28:	4462      	add	r2, ip
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	1afa      	subs	r2, r7, r3
 8009f2e:	f00b f9f4 	bl	801531a <memcpy>
 8009f32:	e7a0      	b.n	8009e76 <BackEndTask+0x1a2>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f34:	00ee      	lsls	r6, r5, #3
 8009f36:	1b73      	subs	r3, r6, r5
 8009f38:	00d8      	lsls	r0, r3, #3
 8009f3a:	4f43      	ldr	r7, [pc, #268]	; (800a048 <BackEndTask+0x374>)
 8009f3c:	19c0      	adds	r0, r0, r7
 8009f3e:	01ab      	lsls	r3, r5, #6
 8009f40:	9302      	str	r3, [sp, #8]
 8009f42:	0019      	movs	r1, r3
 8009f44:	4451      	add	r1, sl
 8009f46:	4a38      	ldr	r2, [pc, #224]	; (800a028 <BackEndTask+0x354>)
 8009f48:	4694      	mov	ip, r2
 8009f4a:	4461      	add	r1, ip
							MSG_RX_BUF_SIZE - parseStart);
 8009f4c:	2240      	movs	r2, #64	; 0x40
 8009f4e:	4653      	mov	r3, sl
 8009f50:	1ad2      	subs	r2, r2, r3
 8009f52:	4692      	mov	sl, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f54:	f00b f9e1 	bl	801531a <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009f58:	1b76      	subs	r6, r6, r5
 8009f5a:	00f3      	lsls	r3, r6, #3
 8009f5c:	4453      	add	r3, sl
 8009f5e:	19d8      	adds	r0, r3, r7
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	4a31      	ldr	r2, [pc, #196]	; (800a028 <BackEndTask+0x354>)
 8009f64:	4694      	mov	ip, r2
 8009f66:	4463      	add	r3, ip
 8009f68:	0019      	movs	r1, r3
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	1a9a      	subs	r2, r3, r2
 8009f70:	f00b f9d3 	bl	801531a <memcpy>
 8009f74:	e7aa      	b.n	8009ecc <BackEndTask+0x1f8>
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f76:	01ae      	lsls	r6, r5, #6
 8009f78:	465b      	mov	r3, fp
 8009f7a:	18f0      	adds	r0, r6, r3
 8009f7c:	4b2a      	ldr	r3, [pc, #168]	; (800a028 <BackEndTask+0x354>)
 8009f7e:	469a      	mov	sl, r3
 8009f80:	4450      	add	r0, sl
							MSG_RX_BUF_SIZE - packetStart);
 8009f82:	2740      	movs	r7, #64	; 0x40
 8009f84:	465b      	mov	r3, fp
 8009f86:	1aff      	subs	r7, r7, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f88:	003a      	movs	r2, r7
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f00b f9ce 	bl	801532c <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f90:	0030      	movs	r0, r6
 8009f92:	4450      	add	r0, sl
 8009f94:	464a      	mov	r2, r9
 8009f96:	3204      	adds	r2, #4
 8009f98:	1bd2      	subs	r2, r2, r7
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f00b f9c6 	bl	801532c <memset>
 8009fa0:	e79f      	b.n	8009ee2 <BackEndTask+0x20e>
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009fa2:	01af      	lsls	r7, r5, #6
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	18f8      	adds	r0, r7, r3
 8009fa8:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <BackEndTask+0x354>)
 8009faa:	469a      	mov	sl, r3
 8009fac:	4450      	add	r0, sl
					MSG_RX_BUF_SIZE - packetStart);
 8009fae:	2240      	movs	r2, #64	; 0x40
 8009fb0:	465b      	mov	r3, fp
 8009fb2:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f00b f9b7 	bl	801532c <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009fbe:	0038      	movs	r0, r7
 8009fc0:	4450      	add	r0, sl
 8009fc2:	464a      	mov	r2, r9
 8009fc4:	3204      	adds	r2, #4
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	2100      	movs	r1, #0
 8009fcc:	f00b f9ae 	bl	801532c <memset>
 8009fd0:	e72c      	b.n	8009e2c <BackEndTask+0x158>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009fd2:	0020      	movs	r0, r4
 8009fd4:	f005 fc1c 	bl	800f810 <GetUart>
 8009fd8:	01ad      	lsls	r5, r5, #6
 8009fda:	4913      	ldr	r1, [pc, #76]	; (800a028 <BackEndTask+0x354>)
 8009fdc:	1869      	adds	r1, r5, r1
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	f00a fa68 	bl	80144b4 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	b2e4      	uxtb	r4, r4
 8009fe8:	2c05      	cmp	r4, #5
 8009fea:	d817      	bhi.n	800a01c <BackEndTask+0x348>
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009fec:	0026      	movs	r6, r4
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <BackEndTask+0x360>)
 8009ff0:	5d1b      	ldrb	r3, [r3, r4]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d800      	bhi.n	8009ff8 <BackEndTask+0x324>
 8009ff6:	e678      	b.n	8009cea <BackEndTask+0x16>
			if(MsgDMAStopped[port - 1] == true){
 8009ff8:	1e75      	subs	r5, r6, #1
 8009ffa:	4b15      	ldr	r3, [pc, #84]	; (800a050 <BackEndTask+0x37c>)
 8009ffc:	5d5b      	ldrb	r3, [r3, r5]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f0      	beq.n	8009fe4 <BackEndTask+0x310>
				MsgDMAStopped[port - 1] = false;
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <BackEndTask+0x37c>)
 800a004:	2200      	movs	r2, #0
 800a006:	555a      	strb	r2, [r3, r5]
				if(portStatus[port] == OVERRUN)
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <BackEndTask+0x360>)
 800a00a:	5d9b      	ldrb	r3, [r3, r6]
 800a00c:	2b05      	cmp	r3, #5
 800a00e:	d1e0      	bne.n	8009fd2 <BackEndTask+0x2fe>
					portStatus[port] =FREE;
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <BackEndTask+0x360>)
 800a012:	559a      	strb	r2, [r3, r6]
 800a014:	e7dd      	b.n	8009fd2 <BackEndTask+0x2fe>
					emptyBuffer = false;
 800a016:	2300      	movs	r3, #0
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	e7e3      	b.n	8009fe4 <BackEndTask+0x310>
			}
		}

		taskYIELD();
 800a01c:	f007 fc34 	bl	8011888 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 800a020:	2401      	movs	r4, #1
 800a022:	e7e1      	b.n	8009fe8 <BackEndTask+0x314>
 800a024:	200013f8 	.word	0x200013f8
 800a028:	200012b8 	.word	0x200012b8
 800a02c:	20006da0 	.word	0x20006da0
 800a030:	20000a9f 	.word	0x20000a9f
 800a034:	200010e0 	.word	0x200010e0
 800a038:	2000149c 	.word	0x2000149c
 800a03c:	2000171c 	.word	0x2000171c
 800a040:	20001400 	.word	0x20001400
 800a044:	20000f20 	.word	0x20000f20
 800a048:	20000d30 	.word	0x20000d30
 800a04c:	20001574 	.word	0x20001574
 800a050:	200012b0 	.word	0x200012b0

0800a054 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a054:	2001      	movs	r0, #1
 800a056:	4770      	bx	lr

0800a058 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05a:	46de      	mov	lr, fp
 800a05c:	4657      	mov	r7, sl
 800a05e:	464e      	mov	r6, r9
 800a060:	4645      	mov	r5, r8
 800a062:	b5e0      	push	{r5, r6, r7, lr}
 800a064:	b095      	sub	sp, #84	; 0x54
 800a066:	9006      	str	r0, [sp, #24]
	port =(int8_t )(unsigned )argument;
 800a068:	b2c3      	uxtb	r3, r0
 800a06a:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
 800a070:	469b      	mov	fp, r3
 800a072:	46c1      	mov	r9, r8
 800a074:	e05c      	b.n	800a130 <PxMessagingTask+0xd8>
				longMessage =1;
 800a076:	4ad0      	ldr	r2, [pc, #832]	; (800a3b8 <PxMessagingTask+0x360>)
 800a078:	2101      	movs	r1, #1
 800a07a:	7011      	strb	r1, [r2, #0]
 800a07c:	e072      	b.n	800a164 <PxMessagingTask+0x10c>
				++shift;
 800a07e:	2401      	movs	r4, #1
 800a080:	e07b      	b.n	800a17a <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a082:	1ce2      	adds	r2, r4, #3
 800a084:	00eb      	lsls	r3, r5, #3
 800a086:	1b5b      	subs	r3, r3, r5
 800a088:	00d9      	lsls	r1, r3, #3
 800a08a:	4bcc      	ldr	r3, [pc, #816]	; (800a3bc <PxMessagingTask+0x364>)
 800a08c:	185b      	adds	r3, r3, r1
 800a08e:	5c9b      	ldrb	r3, [r3, r2]
 800a090:	469a      	mov	sl, r3
 800a092:	e08c      	b.n	800a1ae <PxMessagingTask+0x156>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a094:	2bfc      	cmp	r3, #252	; 0xfc
 800a096:	d805      	bhi.n	800a0a4 <PxMessagingTask+0x4c>
 800a098:	4bc9      	ldr	r3, [pc, #804]	; (800a3c0 <PxMessagingTask+0x368>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	42bb      	cmp	r3, r7
 800a09e:	d001      	beq.n	800a0a4 <PxMessagingTask+0x4c>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d01e      	beq.n	800a0e2 <PxMessagingTask+0x8a>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0a4:	2fff      	cmp	r7, #255	; 0xff
 800a0a6:	d100      	bne.n	800a0aa <PxMessagingTask+0x52>
 800a0a8:	e0b2      	b.n	800a210 <PxMessagingTask+0x1b8>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a0aa:	2fff      	cmp	r7, #255	; 0xff
 800a0ac:	d100      	bne.n	800a0b0 <PxMessagingTask+0x58>
 800a0ae:	e0ce      	b.n	800a24e <PxMessagingTask+0x1f6>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0b0:	2ffe      	cmp	r7, #254	; 0xfe
 800a0b2:	d100      	bne.n	800a0b6 <PxMessagingTask+0x5e>
 800a0b4:	e0da      	b.n	800a26c <PxMessagingTask+0x214>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a0b6:	2ffe      	cmp	r7, #254	; 0xfe
 800a0b8:	d100      	bne.n	800a0bc <PxMessagingTask+0x64>
 800a0ba:	e111      	b.n	800a2e0 <PxMessagingTask+0x288>
				shift +=4;
 800a0bc:	3404      	adds	r4, #4
 800a0be:	b2e4      	uxtb	r4, r4
				numOfParams =messageLength[port - 1] - shift;
 800a0c0:	4bc0      	ldr	r3, [pc, #768]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a0c2:	5d5b      	ldrb	r3, [r3, r5]
 800a0c4:	1b1a      	subs	r2, r3, r4
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	9205      	str	r2, [sp, #20]
				if(result == BOS_OK){
 800a0ca:	465a      	mov	r2, fp
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d111      	bne.n	800a0f4 <PxMessagingTask+0x9c>
					switch(code){
 800a0d0:	4652      	mov	r2, sl
 800a0d2:	2a24      	cmp	r2, #36	; 0x24
 800a0d4:	d901      	bls.n	800a0da <PxMessagingTask+0x82>
 800a0d6:	f001 fc2c 	bl	800b932 <PxMessagingTask+0x18da>
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	49ba      	ldr	r1, [pc, #744]	; (800a3c8 <PxMessagingTask+0x370>)
 800a0de:	588a      	ldr	r2, [r1, r2]
 800a0e0:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a0e2:	4653      	mov	r3, sl
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d16f      	bne.n	800a1c8 <PxMessagingTask+0x170>
 800a0e8:	e7dc      	b.n	800a0a4 <PxMessagingTask+0x4c>
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a0ea:	4653      	mov	r3, sl
 800a0ec:	2b19      	cmp	r3, #25
 800a0ee:	d076      	beq.n	800a1de <PxMessagingTask+0x186>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a0f0:	2b1a      	cmp	r3, #26
 800a0f2:	d07e      	beq.n	800a1f2 <PxMessagingTask+0x19a>
		if(result == BOS_ERR_UnknownMessage){
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d101      	bne.n	800a0fe <PxMessagingTask+0xa6>
 800a0fa:	f001 fc3d 	bl	800b978 <PxMessagingTask+0x1920>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a0fe:	00eb      	lsls	r3, r5, #3
 800a100:	1b5b      	subs	r3, r3, r5
 800a102:	00d8      	lsls	r0, r3, #3
 800a104:	4bad      	ldr	r3, [pc, #692]	; (800a3bc <PxMessagingTask+0x364>)
 800a106:	18c0      	adds	r0, r0, r3
 800a108:	4cae      	ldr	r4, [pc, #696]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a10a:	5d62      	ldrb	r2, [r4, r5]
 800a10c:	2100      	movs	r1, #0
 800a10e:	f00b f90d 	bl	801532c <memset>
		messageLength[port - 1] =0;
 800a112:	2300      	movs	r3, #0
 800a114:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a116:	4bad      	ldr	r3, [pc, #692]	; (800a3cc <PxMessagingTask+0x374>)
 800a118:	4642      	mov	r2, r8
 800a11a:	5c9b      	ldrb	r3, [r3, r2]
 800a11c:	3b02      	subs	r3, #2
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d903      	bls.n	800a12c <PxMessagingTask+0xd4>
			portStatus[port] =FREE;
 800a124:	4ba9      	ldr	r3, [pc, #676]	; (800a3cc <PxMessagingTask+0x374>)
 800a126:	2200      	movs	r2, #0
 800a128:	4641      	mov	r1, r8
 800a12a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a12c:	f007 fbac 	bl	8011888 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a130:	2101      	movs	r1, #1
 800a132:	4249      	negs	r1, r1
 800a134:	2001      	movs	r0, #1
 800a136:	f007 f8b3 	bl	80112a0 <ulTaskNotifyTake>
 800a13a:	23ff      	movs	r3, #255	; 0xff
 800a13c:	9a06      	ldr	r2, [sp, #24]
 800a13e:	401a      	ands	r2, r3
 800a140:	4690      	mov	r8, r2
		if(messageLength[port - 1]){
 800a142:	1e55      	subs	r5, r2, #1
 800a144:	4b9f      	ldr	r3, [pc, #636]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a146:	5d58      	ldrb	r0, [r3, r5]
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0d3      	beq.n	800a0f4 <PxMessagingTask+0x9c>
			if(cMessage[port - 1][2] >> 7){
 800a14c:	00eb      	lsls	r3, r5, #3
 800a14e:	1b5b      	subs	r3, r3, r5
 800a150:	00da      	lsls	r2, r3, #3
 800a152:	4b9a      	ldr	r3, [pc, #616]	; (800a3bc <PxMessagingTask+0x364>)
 800a154:	189b      	adds	r3, r3, r2
 800a156:	789b      	ldrb	r3, [r3, #2]
 800a158:	b25a      	sxtb	r2, r3
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	db8b      	blt.n	800a076 <PxMessagingTask+0x1e>
				longMessage =0;
 800a15e:	4a96      	ldr	r2, [pc, #600]	; (800a3b8 <PxMessagingTask+0x360>)
 800a160:	2100      	movs	r1, #0
 800a162:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a164:	4995      	ldr	r1, [pc, #596]	; (800a3bc <PxMessagingTask+0x364>)
 800a166:	00ea      	lsls	r2, r5, #3
 800a168:	1b56      	subs	r6, r2, r5
 800a16a:	00f4      	lsls	r4, r6, #3
 800a16c:	5c67      	ldrb	r7, [r4, r1]
			src =cMessage[port - 1][1];
 800a16e:	1909      	adds	r1, r1, r4
 800a170:	784a      	ldrb	r2, [r1, #1]
 800a172:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d482      	bmi.n	800a07e <PxMessagingTask+0x26>
			shift =0;
 800a178:	2400      	movs	r4, #0
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 800a17a:	0899      	lsrs	r1, r3, #2
 800a17c:	2203      	movs	r2, #3
 800a17e:	400a      	ands	r2, r1
 800a180:	4993      	ldr	r1, [pc, #588]	; (800a3d0 <PxMessagingTask+0x378>)
 800a182:	71ca      	strb	r2, [r1, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 800a184:	2260      	movs	r2, #96	; 0x60
 800a186:	401a      	ands	r2, r3
 800a188:	718a      	strb	r2, [r1, #6]
			if(extendCode == true){
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d400      	bmi.n	800a190 <PxMessagingTask+0x138>
 800a18e:	e778      	b.n	800a082 <PxMessagingTask+0x2a>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a190:	1d21      	adds	r1, r4, #4
 800a192:	00eb      	lsls	r3, r5, #3
 800a194:	1b5b      	subs	r3, r3, r5
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	4b88      	ldr	r3, [pc, #544]	; (800a3bc <PxMessagingTask+0x364>)
 800a19a:	189a      	adds	r2, r3, r2
 800a19c:	5c53      	ldrb	r3, [r2, r1]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	1ce1      	adds	r1, r4, #3
 800a1a2:	5c52      	ldrb	r2, [r2, r1]
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	469a      	mov	sl, r3
				++shift;
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	b2e4      	uxtb	r4, r4
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a1ae:	1e7b      	subs	r3, r7, #1
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2bfc      	cmp	r3, #252	; 0xfc
 800a1b4:	d900      	bls.n	800a1b8 <PxMessagingTask+0x160>
 800a1b6:	e76d      	b.n	800a094 <PxMessagingTask+0x3c>
 800a1b8:	4a81      	ldr	r2, [pc, #516]	; (800a3c0 <PxMessagingTask+0x368>)
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	42ba      	cmp	r2, r7
 800a1be:	d100      	bne.n	800a1c2 <PxMessagingTask+0x16a>
 800a1c0:	e768      	b.n	800a094 <PxMessagingTask+0x3c>
 800a1c2:	2a01      	cmp	r2, #1
 800a1c4:	d100      	bne.n	800a1c8 <PxMessagingTask+0x170>
 800a1c6:	e765      	b.n	800a094 <PxMessagingTask+0x3c>
				ForwardReceivedMessage(port);
 800a1c8:	9807      	ldr	r0, [sp, #28]
 800a1ca:	f7ff fc3f 	bl	8009a4c <ForwardReceivedMessage>
				if(BOS.trace)
 800a1ce:	4b80      	ldr	r3, [pc, #512]	; (800a3d0 <PxMessagingTask+0x378>)
 800a1d0:	79db      	ldrb	r3, [r3, #7]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d089      	beq.n	800a0ea <PxMessagingTask+0x92>
					indMode =IND_SHORT_BLINK;
 800a1d6:	4b7f      	ldr	r3, [pc, #508]	; (800a3d4 <PxMessagingTask+0x37c>)
 800a1d8:	2203      	movs	r2, #3
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e785      	b.n	800a0ea <PxMessagingTask+0x92>
					Delay_ms(100);
 800a1de:	2064      	movs	r0, #100	; 0x64
 800a1e0:	f007 fce4 	bl	8011bac <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9a07      	ldr	r2, [sp, #28]
 800a1e8:	0039      	movs	r1, r7
 800a1ea:	9804      	ldr	r0, [sp, #16]
 800a1ec:	f7f9 ff2a 	bl	8004044 <remoteBootloaderUpdate>
 800a1f0:	e780      	b.n	800a0f4 <PxMessagingTask+0x9c>
					Delay_ms(100);
 800a1f2:	2064      	movs	r0, #100	; 0x64
 800a1f4:	f007 fcda 	bl	8011bac <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a1f8:	00eb      	lsls	r3, r5, #3
 800a1fa:	1b5b      	subs	r3, r3, r5
 800a1fc:	00da      	lsls	r2, r3, #3
 800a1fe:	4b6f      	ldr	r3, [pc, #444]	; (800a3bc <PxMessagingTask+0x364>)
 800a200:	189b      	adds	r3, r3, r2
 800a202:	5d1b      	ldrb	r3, [r3, r4]
 800a204:	9a07      	ldr	r2, [sp, #28]
 800a206:	0039      	movs	r1, r7
 800a208:	9804      	ldr	r0, [sp, #16]
 800a20a:	f7f9 ff1b 	bl	8004044 <remoteBootloaderUpdate>
 800a20e:	e771      	b.n	800a0f4 <PxMessagingTask+0x9c>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a210:	1e42      	subs	r2, r0, #1
 800a212:	00eb      	lsls	r3, r5, #3
 800a214:	1b5b      	subs	r3, r3, r5
 800a216:	00d9      	lsls	r1, r3, #3
 800a218:	4b68      	ldr	r3, [pc, #416]	; (800a3bc <PxMessagingTask+0x364>)
 800a21a:	185b      	adds	r3, r3, r1
 800a21c:	5c9b      	ldrb	r3, [r3, r2]
 800a21e:	4a6e      	ldr	r2, [pc, #440]	; (800a3d8 <PxMessagingTask+0x380>)
 800a220:	7812      	ldrb	r2, [r2, #0]
 800a222:	4293      	cmp	r3, r2
 800a224:	d100      	bne.n	800a228 <PxMessagingTask+0x1d0>
 800a226:	e740      	b.n	800a0aa <PxMessagingTask+0x52>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a228:	4a6b      	ldr	r2, [pc, #428]	; (800a3d8 <PxMessagingTask+0x380>)
 800a22a:	7013      	strb	r3, [r2, #0]
 800a22c:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <PxMessagingTask+0x384>)
 800a22e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a230:	9907      	ldr	r1, [sp, #28]
 800a232:	20ff      	movs	r0, #255	; 0xff
 800a234:	f7ff fc2a 	bl	8009a8c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a238:	4b62      	ldr	r3, [pc, #392]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a23a:	5d5a      	ldrb	r2, [r3, r5]
 800a23c:	3a01      	subs	r2, #1
 800a23e:	00eb      	lsls	r3, r5, #3
 800a240:	1b5b      	subs	r3, r3, r5
 800a242:	00d9      	lsls	r1, r3, #3
 800a244:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <PxMessagingTask+0x364>)
 800a246:	185b      	adds	r3, r3, r1
 800a248:	2100      	movs	r1, #0
 800a24a:	5499      	strb	r1, [r3, r2]
 800a24c:	e730      	b.n	800a0b0 <PxMessagingTask+0x58>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a24e:	3801      	subs	r0, #1
 800a250:	00eb      	lsls	r3, r5, #3
 800a252:	1b5b      	subs	r3, r3, r5
 800a254:	00da      	lsls	r2, r3, #3
 800a256:	4b59      	ldr	r3, [pc, #356]	; (800a3bc <PxMessagingTask+0x364>)
 800a258:	189b      	adds	r3, r3, r2
 800a25a:	5c1a      	ldrb	r2, [r3, r0]
 800a25c:	4b5e      	ldr	r3, [pc, #376]	; (800a3d8 <PxMessagingTask+0x380>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d000      	beq.n	800a266 <PxMessagingTask+0x20e>
 800a264:	e724      	b.n	800a0b0 <PxMessagingTask+0x58>
					result =BOS_ERR_MSG_Reflection;
 800a266:	2303      	movs	r3, #3
 800a268:	469b      	mov	fp, r3
 800a26a:	e721      	b.n	800a0b0 <PxMessagingTask+0x58>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a26c:	4b55      	ldr	r3, [pc, #340]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a26e:	5d5a      	ldrb	r2, [r3, r5]
 800a270:	3a01      	subs	r2, #1
 800a272:	00eb      	lsls	r3, r5, #3
 800a274:	1b5b      	subs	r3, r3, r5
 800a276:	00d9      	lsls	r1, r3, #3
 800a278:	4b50      	ldr	r3, [pc, #320]	; (800a3bc <PxMessagingTask+0x364>)
 800a27a:	185b      	adds	r3, r3, r1
 800a27c:	5c9b      	ldrb	r3, [r3, r2]
 800a27e:	4a56      	ldr	r2, [pc, #344]	; (800a3d8 <PxMessagingTask+0x380>)
 800a280:	7812      	ldrb	r2, [r2, #0]
 800a282:	4293      	cmp	r3, r2
 800a284:	d100      	bne.n	800a288 <PxMessagingTask+0x230>
 800a286:	e716      	b.n	800a0b6 <PxMessagingTask+0x5e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a288:	4a53      	ldr	r2, [pc, #332]	; (800a3d8 <PxMessagingTask+0x380>)
 800a28a:	7013      	strb	r3, [r2, #0]
 800a28c:	4a53      	ldr	r2, [pc, #332]	; (800a3dc <PxMessagingTask+0x384>)
 800a28e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a290:	9907      	ldr	r1, [sp, #28]
 800a292:	20fe      	movs	r0, #254	; 0xfe
 800a294:	f7ff fbfa 	bl	8009a8c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a298:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a29a:	5d58      	ldrb	r0, [r3, r5]
 800a29c:	1e41      	subs	r1, r0, #1
 800a29e:	00ea      	lsls	r2, r5, #3
 800a2a0:	1b52      	subs	r2, r2, r5
 800a2a2:	00d6      	lsls	r6, r2, #3
 800a2a4:	4b45      	ldr	r3, [pc, #276]	; (800a3bc <PxMessagingTask+0x364>)
 800a2a6:	199b      	adds	r3, r3, r6
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	545a      	strb	r2, [r3, r1]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a2ac:	3802      	subs	r0, #2
 800a2ae:	5c1b      	ldrb	r3, [r3, r0]
 800a2b0:	001e      	movs	r6, r3
 800a2b2:	46a4      	mov	ip, r4
					for(i =0; i < temp; i++){
 800a2b4:	42b2      	cmp	r2, r6
 800a2b6:	d20e      	bcs.n	800a2d6 <PxMessagingTask+0x27e>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800a2b8:	1b81      	subs	r1, r0, r6
 800a2ba:	1851      	adds	r1, r2, r1
 800a2bc:	00eb      	lsls	r3, r5, #3
 800a2be:	1b5b      	subs	r3, r3, r5
 800a2c0:	00dc      	lsls	r4, r3, #3
 800a2c2:	4b3e      	ldr	r3, [pc, #248]	; (800a3bc <PxMessagingTask+0x364>)
 800a2c4:	191b      	adds	r3, r3, r4
 800a2c6:	5c59      	ldrb	r1, [r3, r1]
 800a2c8:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <PxMessagingTask+0x368>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d018      	beq.n	800a302 <PxMessagingTask+0x2aa>
					for(i =0; i < temp; i++){
 800a2d0:	3201      	adds	r2, #1
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	e7ee      	b.n	800a2b4 <PxMessagingTask+0x25c>
 800a2d6:	46b1      	mov	r9, r6
 800a2d8:	4664      	mov	r4, ip
					result =BOS_ERR_WrongID;
 800a2da:	2366      	movs	r3, #102	; 0x66
 800a2dc:	469b      	mov	fp, r3
 800a2de:	e6ed      	b.n	800a0bc <PxMessagingTask+0x64>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a2e0:	4b38      	ldr	r3, [pc, #224]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a2e2:	5d5a      	ldrb	r2, [r3, r5]
 800a2e4:	3a01      	subs	r2, #1
 800a2e6:	00eb      	lsls	r3, r5, #3
 800a2e8:	1b5b      	subs	r3, r3, r5
 800a2ea:	00d9      	lsls	r1, r3, #3
 800a2ec:	4b33      	ldr	r3, [pc, #204]	; (800a3bc <PxMessagingTask+0x364>)
 800a2ee:	185b      	adds	r3, r3, r1
 800a2f0:	5c9a      	ldrb	r2, [r3, r2]
 800a2f2:	4b39      	ldr	r3, [pc, #228]	; (800a3d8 <PxMessagingTask+0x380>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d000      	beq.n	800a2fc <PxMessagingTask+0x2a4>
 800a2fa:	e6df      	b.n	800a0bc <PxMessagingTask+0x64>
					result =BOS_ERR_MSG_Reflection;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	469b      	mov	fp, r3
 800a300:	e6dc      	b.n	800a0bc <PxMessagingTask+0x64>
 800a302:	46b1      	mov	r9, r6
 800a304:	4664      	mov	r4, ip
							result =BOS_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	469b      	mov	fp, r3
 800a30a:	e6d7      	b.n	800a0bc <PxMessagingTask+0x64>
							indMode =IND_PING;
 800a30c:	4b31      	ldr	r3, [pc, #196]	; (800a3d4 <PxMessagingTask+0x37c>)
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a312:	200a      	movs	r0, #10
 800a314:	f005 fbce 	bl	800fab4 <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 800a318:	4b2d      	ldr	r3, [pc, #180]	; (800a3d0 <PxMessagingTask+0x378>)
 800a31a:	799b      	ldrb	r3, [r3, #6]
 800a31c:	2b60      	cmp	r3, #96	; 0x60
 800a31e:	d002      	beq.n	800a326 <PxMessagingTask+0x2ce>
 800a320:	2b20      	cmp	r3, #32
 800a322:	d000      	beq.n	800a326 <PxMessagingTask+0x2ce>
 800a324:	e6e6      	b.n	800a0f4 <PxMessagingTask+0x9c>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a326:	2200      	movs	r2, #0
 800a328:	2102      	movs	r1, #2
 800a32a:	9804      	ldr	r0, [sp, #16]
 800a32c:	f7ff fbf6 	bl	8009b1c <SendMessageToModule>
 800a330:	e6e0      	b.n	800a0f4 <PxMessagingTask+0x9c>
							if(!moduleAlias[myID][0])
 800a332:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <PxMessagingTask+0x368>)
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	0093      	lsls	r3, r2, #2
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	005a      	lsls	r2, r3, #1
 800a33c:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <PxMessagingTask+0x388>)
 800a33e:	5cd3      	ldrb	r3, [r2, r3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d116      	bne.n	800a372 <PxMessagingTask+0x31a>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a344:	9a04      	ldr	r2, [sp, #16]
 800a346:	4927      	ldr	r1, [pc, #156]	; (800a3e4 <PxMessagingTask+0x38c>)
 800a348:	4827      	ldr	r0, [pc, #156]	; (800a3e8 <PxMessagingTask+0x390>)
 800a34a:	f00b f9e9 	bl	8015720 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a34e:	4c26      	ldr	r4, [pc, #152]	; (800a3e8 <PxMessagingTask+0x390>)
 800a350:	0020      	movs	r0, r4
 800a352:	f7f5 fee1 	bl	8000118 <strlen>
 800a356:	b282      	uxth	r2, r0
 800a358:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <PxMessagingTask+0x394>)
 800a35a:	7818      	ldrb	r0, [r3, #0]
 800a35c:	2301      	movs	r3, #1
 800a35e:	425b      	negs	r3, r3
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	3333      	adds	r3, #51	; 0x33
 800a364:	0021      	movs	r1, r4
 800a366:	f005 fa71 	bl	800f84c <writePxMutex>
							responseStatus =BOS_OK;
 800a36a:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <PxMessagingTask+0x398>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
							break;
 800a370:	e6c0      	b.n	800a0f4 <PxMessagingTask+0x9c>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a372:	230a      	movs	r3, #10
 800a374:	9904      	ldr	r1, [sp, #16]
 800a376:	434b      	muls	r3, r1
 800a378:	4a19      	ldr	r2, [pc, #100]	; (800a3e0 <PxMessagingTask+0x388>)
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	000a      	movs	r2, r1
 800a37e:	491d      	ldr	r1, [pc, #116]	; (800a3f4 <PxMessagingTask+0x39c>)
 800a380:	4819      	ldr	r0, [pc, #100]	; (800a3e8 <PxMessagingTask+0x390>)
 800a382:	f00b f9cd 	bl	8015720 <sprintf>
 800a386:	e7e2      	b.n	800a34e <PxMessagingTask+0x2f6>
							IND_ON();
 800a388:	2180      	movs	r1, #128	; 0x80
 800a38a:	2090      	movs	r0, #144	; 0x90
 800a38c:	2201      	movs	r2, #1
 800a38e:	0109      	lsls	r1, r1, #4
 800a390:	05c0      	lsls	r0, r0, #23
 800a392:	f009 f810 	bl	80133b6 <HAL_GPIO_WritePin>
							break;
 800a396:	e6ad      	b.n	800a0f4 <PxMessagingTask+0x9c>
							IND_OFF();
 800a398:	2180      	movs	r1, #128	; 0x80
 800a39a:	2090      	movs	r0, #144	; 0x90
 800a39c:	2200      	movs	r2, #0
 800a39e:	0109      	lsls	r1, r1, #4
 800a3a0:	05c0      	lsls	r0, r0, #23
 800a3a2:	f009 f808 	bl	80133b6 <HAL_GPIO_WritePin>
							break;
 800a3a6:	e6a5      	b.n	800a0f4 <PxMessagingTask+0x9c>
							IND_toggle();
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	2090      	movs	r0, #144	; 0x90
 800a3ac:	0109      	lsls	r1, r1, #4
 800a3ae:	05c0      	lsls	r0, r0, #23
 800a3b0:	f009 f807 	bl	80133c2 <HAL_GPIO_TogglePin>
							break;
 800a3b4:	e69e      	b.n	800a0f4 <PxMessagingTask+0x9c>
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	20000ee5 	.word	0x20000ee5
 800a3bc:	20000d30 	.word	0x20000d30
 800a3c0:	20001066 	.word	0x20001066
 800a3c4:	20000f20 	.word	0x20000f20
 800a3c8:	0801c60c 	.word	0x0801c60c
 800a3cc:	200010e0 	.word	0x200010e0
 800a3d0:	20006da0 	.word	0x20006da0
 800a3d4:	20000ee4 	.word	0x20000ee4
 800a3d8:	20001576 	.word	0x20001576
 800a3dc:	20000cdc 	.word	0x20000cdc
 800a3e0:	20000f58 	.word	0x20000f58
 800a3e4:	0801aed8 	.word	0x0801aed8
 800a3e8:	200016cc 	.word	0x200016cc
 800a3ec:	20000a9f 	.word	0x20000a9f
 800a3f0:	200010f8 	.word	0x200010f8
 800a3f4:	0801aeec 	.word	0x0801aeec
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a3f8:	9b04      	ldr	r3, [sp, #16]
 800a3fa:	021a      	lsls	r2, r3, #8
 800a3fc:	b292      	uxth	r2, r2
 800a3fe:	1ca0      	adds	r0, r4, #2
 800a400:	00eb      	lsls	r3, r5, #3
 800a402:	1b5b      	subs	r3, r3, r5
 800a404:	00d9      	lsls	r1, r3, #3
 800a406:	4bcc      	ldr	r3, [pc, #816]	; (800a738 <PxMessagingTask+0x6e0>)
 800a408:	1859      	adds	r1, r3, r1
 800a40a:	5c0b      	ldrb	r3, [r1, r0]
 800a40c:	18d2      	adds	r2, r2, r3
 800a40e:	4bcb      	ldr	r3, [pc, #812]	; (800a73c <PxMessagingTask+0x6e4>)
 800a410:	00a8      	lsls	r0, r5, #2
 800a412:	521a      	strh	r2, [r3, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a414:	5d0a      	ldrb	r2, [r1, r4]
 800a416:	0212      	lsls	r2, r2, #8
 800a418:	3401      	adds	r4, #1
 800a41a:	5d09      	ldrb	r1, [r1, r4]
 800a41c:	1852      	adds	r2, r2, r1
 800a41e:	181b      	adds	r3, r3, r0
 800a420:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a422:	4bc7      	ldr	r3, [pc, #796]	; (800a740 <PxMessagingTask+0x6e8>)
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	4ac7      	ldr	r2, [pc, #796]	; (800a744 <PxMessagingTask+0x6ec>)
 800a428:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a42e:	9c07      	ldr	r4, [sp, #28]
 800a430:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a432:	2002      	movs	r0, #2
 800a434:	f005 fb3e 	bl	800fab4 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a438:	2303      	movs	r3, #3
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	0020      	movs	r0, r4
 800a444:	f7ff f95a 	bl	80096fc <SendMessageFromPort>
							break;
 800a448:	e654      	b.n	800a0f4 <PxMessagingTask+0x9c>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	021a      	lsls	r2, r3, #8
 800a44e:	b292      	uxth	r2, r2
 800a450:	1ca1      	adds	r1, r4, #2
 800a452:	00eb      	lsls	r3, r5, #3
 800a454:	1b5b      	subs	r3, r3, r5
 800a456:	00d8      	lsls	r0, r3, #3
 800a458:	4bb7      	ldr	r3, [pc, #732]	; (800a738 <PxMessagingTask+0x6e0>)
 800a45a:	1818      	adds	r0, r3, r0
 800a45c:	5c43      	ldrb	r3, [r0, r1]
 800a45e:	18d2      	adds	r2, r2, r3
 800a460:	4bb6      	ldr	r3, [pc, #728]	; (800a73c <PxMessagingTask+0x6e4>)
 800a462:	00a9      	lsls	r1, r5, #2
 800a464:	525a      	strh	r2, [r3, r1]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a466:	5d02      	ldrb	r2, [r0, r4]
 800a468:	0212      	lsls	r2, r2, #8
 800a46a:	3401      	adds	r4, #1
 800a46c:	5d00      	ldrb	r0, [r0, r4]
 800a46e:	1812      	adds	r2, r2, r0
 800a470:	185b      	adds	r3, r3, r1
 800a472:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a474:	4bb4      	ldr	r3, [pc, #720]	; (800a748 <PxMessagingTask+0x6f0>)
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
							break;
 800a47a:	e63b      	b.n	800a0f4 <PxMessagingTask+0x9c>
							ExploreNeighbors(port);
 800a47c:	9807      	ldr	r0, [sp, #28]
 800a47e:	f7f9 fc53 	bl	8003d28 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a482:	4bb2      	ldr	r3, [pc, #712]	; (800a74c <PxMessagingTask+0x6f4>)
 800a484:	2202      	movs	r2, #2
 800a486:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a488:	200a      	movs	r0, #10
 800a48a:	f005 fb13 	bl	800fab4 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a48e:	2401      	movs	r4, #1
							temp =0;
 800a490:	2300      	movs	r3, #0
 800a492:	001e      	movs	r6, r3
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a494:	e001      	b.n	800a49a <PxMessagingTask+0x442>
 800a496:	3401      	adds	r4, #1
 800a498:	b2e4      	uxtb	r4, r4
 800a49a:	2c05      	cmp	r4, #5
 800a49c:	d812      	bhi.n	800a4c4 <PxMessagingTask+0x46c>
								if(neighbors[p - 1][0]){
 800a49e:	1e63      	subs	r3, r4, #1
 800a4a0:	0099      	lsls	r1, r3, #2
 800a4a2:	4aa6      	ldr	r2, [pc, #664]	; (800a73c <PxMessagingTask+0x6e4>)
 800a4a4:	5a8a      	ldrh	r2, [r1, r2]
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	d0f5      	beq.n	800a496 <PxMessagingTask+0x43e>
									messageParams[temp] =p;
 800a4aa:	4aa6      	ldr	r2, [pc, #664]	; (800a744 <PxMessagingTask+0x6ec>)
 800a4ac:	5594      	strb	r4, [r2, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a4ae:	1c70      	adds	r0, r6, #1
 800a4b0:	000b      	movs	r3, r1
 800a4b2:	49a2      	ldr	r1, [pc, #648]	; (800a73c <PxMessagingTask+0x6e4>)
 800a4b4:	1859      	adds	r1, r3, r1
 800a4b6:	1880      	adds	r0, r0, r2
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	f00a ff2e 	bl	801531a <memcpy>
									temp +=5;
 800a4be:	3605      	adds	r6, #5
 800a4c0:	b2f6      	uxtb	r6, r6
 800a4c2:	e7e8      	b.n	800a496 <PxMessagingTask+0x43e>
 800a4c4:	46b1      	mov	r9, r6
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a4c6:	b2b2      	uxth	r2, r6
 800a4c8:	210d      	movs	r1, #13
 800a4ca:	9804      	ldr	r0, [sp, #16]
 800a4cc:	f7ff fb26 	bl	8009b1c <SendMessageToModule>
							break;
 800a4d0:	e610      	b.n	800a0f4 <PxMessagingTask+0x9c>
							temp =numOfParams / 5;
 800a4d2:	2105      	movs	r1, #5
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f7f5 fe3b 	bl	8000150 <__udivsi3>
 800a4da:	b2c3      	uxtb	r3, r0
 800a4dc:	4699      	mov	r9, r3
							for(uint8_t k =0; k < temp; k++){
 800a4de:	2600      	movs	r6, #0
 800a4e0:	e019      	b.n	800a516 <PxMessagingTask+0x4be>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a4e2:	00b3      	lsls	r3, r6, #2
 800a4e4:	199b      	adds	r3, r3, r6
 800a4e6:	18e2      	adds	r2, r4, r3
 800a4e8:	4694      	mov	ip, r2
 800a4ea:	4993      	ldr	r1, [pc, #588]	; (800a738 <PxMessagingTask+0x6e0>)
 800a4ec:	00ea      	lsls	r2, r5, #3
 800a4ee:	1b57      	subs	r7, r2, r5
 800a4f0:	00f8      	lsls	r0, r7, #3
 800a4f2:	1808      	adds	r0, r1, r0
 800a4f4:	4667      	mov	r7, ip
 800a4f6:	5dc0      	ldrb	r0, [r0, r7]
 800a4f8:	3801      	subs	r0, #1
 800a4fa:	0080      	lsls	r0, r0, #2
 800a4fc:	4f94      	ldr	r7, [pc, #592]	; (800a750 <PxMessagingTask+0x6f8>)
 800a4fe:	19c0      	adds	r0, r0, r7
 800a500:	1c67      	adds	r7, r4, #1
 800a502:	19df      	adds	r7, r3, r7
 800a504:	1b52      	subs	r2, r2, r5
 800a506:	00d3      	lsls	r3, r2, #3
 800a508:	19db      	adds	r3, r3, r7
 800a50a:	1859      	adds	r1, r3, r1
 800a50c:	2204      	movs	r2, #4
 800a50e:	f00a ff04 	bl	801531a <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a512:	3601      	adds	r6, #1
 800a514:	b2f6      	uxtb	r6, r6
 800a516:	454e      	cmp	r6, r9
 800a518:	d3e3      	bcc.n	800a4e2 <PxMessagingTask+0x48a>
							responseStatus =BOS_OK;
 800a51a:	4b8b      	ldr	r3, [pc, #556]	; (800a748 <PxMessagingTask+0x6f0>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
							break;
 800a520:	e5e8      	b.n	800a0f4 <PxMessagingTask+0x9c>
								if(p != port)
 800a522:	9b07      	ldr	r3, [sp, #28]
 800a524:	429e      	cmp	r6, r3
 800a526:	d00c      	beq.n	800a542 <PxMessagingTask+0x4ea>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a528:	0030      	movs	r0, r6
 800a52a:	f005 f971 	bl	800f810 <GetUart>
 800a52e:	19a2      	adds	r2, r4, r6
 800a530:	3a01      	subs	r2, #1
 800a532:	00eb      	lsls	r3, r5, #3
 800a534:	1b5b      	subs	r3, r3, r5
 800a536:	00d9      	lsls	r1, r3, #3
 800a538:	4b7f      	ldr	r3, [pc, #508]	; (800a738 <PxMessagingTask+0x6e0>)
 800a53a:	185b      	adds	r3, r3, r1
 800a53c:	5c99      	ldrb	r1, [r3, r2]
 800a53e:	f005 f9ff 	bl	800f940 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a542:	3601      	adds	r6, #1
 800a544:	b2f6      	uxtb	r6, r6
 800a546:	2e05      	cmp	r6, #5
 800a548:	d9eb      	bls.n	800a522 <PxMessagingTask+0x4ca>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a54a:	9807      	ldr	r0, [sp, #28]
 800a54c:	f005 f960 	bl	800f810 <GetUart>
 800a550:	340a      	adds	r4, #10
 800a552:	00eb      	lsls	r3, r5, #3
 800a554:	1b5b      	subs	r3, r3, r5
 800a556:	00da      	lsls	r2, r3, #3
 800a558:	4b77      	ldr	r3, [pc, #476]	; (800a738 <PxMessagingTask+0x6e0>)
 800a55a:	189b      	adds	r3, r3, r2
 800a55c:	5d19      	ldrb	r1, [r3, r4]
 800a55e:	f005 f9ef 	bl	800f940 <SwapUartPins>
							break;
 800a562:	e5c7      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a564:	2601      	movs	r6, #1
 800a566:	e7ee      	b.n	800a546 <PxMessagingTask+0x4ee>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a568:	00eb      	lsls	r3, r5, #3
 800a56a:	1b5b      	subs	r3, r3, r5
 800a56c:	00da      	lsls	r2, r3, #3
 800a56e:	4b72      	ldr	r3, [pc, #456]	; (800a738 <PxMessagingTask+0x6e0>)
 800a570:	189b      	adds	r3, r3, r2
 800a572:	5d1b      	ldrb	r3, [r3, r4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d108      	bne.n	800a58a <PxMessagingTask+0x532>
								myID =cMessage[port - 1][1 + shift];
 800a578:	3401      	adds	r4, #1
 800a57a:	2238      	movs	r2, #56	; 0x38
 800a57c:	436a      	muls	r2, r5
 800a57e:	4b6e      	ldr	r3, [pc, #440]	; (800a738 <PxMessagingTask+0x6e0>)
 800a580:	189b      	adds	r3, r3, r2
 800a582:	5d1a      	ldrb	r2, [r3, r4]
 800a584:	4b73      	ldr	r3, [pc, #460]	; (800a754 <PxMessagingTask+0x6fc>)
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	e5b4      	b.n	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d000      	beq.n	800a590 <PxMessagingTask+0x538>
 800a58e:	e5b1      	b.n	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =0; /* change own ID */
 800a590:	4a6c      	ldr	r2, [pc, #432]	; (800a744 <PxMessagingTask+0x6ec>)
 800a592:	2100      	movs	r1, #0
 800a594:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a596:	1c60      	adds	r0, r4, #1
 800a598:	3337      	adds	r3, #55	; 0x37
 800a59a:	436b      	muls	r3, r5
 800a59c:	4e66      	ldr	r6, [pc, #408]	; (800a738 <PxMessagingTask+0x6e0>)
 800a59e:	18f3      	adds	r3, r6, r3
 800a5a0:	5c18      	ldrb	r0, [r3, r0]
 800a5a2:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	5d18      	ldrb	r0, [r3, r4]
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	330d      	adds	r3, #13
 800a5ae:	000a      	movs	r2, r1
 800a5b0:	f7ff f8a4 	bl	80096fc <SendMessageFromPort>
 800a5b4:	e59e      	b.n	800a0f4 <PxMessagingTask+0x9c>
							if(longMessage){
 800a5b6:	4b68      	ldr	r3, [pc, #416]	; (800a758 <PxMessagingTask+0x700>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d011      	beq.n	800a5e2 <PxMessagingTask+0x58a>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a5be:	4e67      	ldr	r6, [pc, #412]	; (800a75c <PxMessagingTask+0x704>)
 800a5c0:	8833      	ldrh	r3, [r6, #0]
 800a5c2:	4867      	ldr	r0, [pc, #412]	; (800a760 <PxMessagingTask+0x708>)
 800a5c4:	1818      	adds	r0, r3, r0
 800a5c6:	2138      	movs	r1, #56	; 0x38
 800a5c8:	4369      	muls	r1, r5
 800a5ca:	190c      	adds	r4, r1, r4
 800a5cc:	495a      	ldr	r1, [pc, #360]	; (800a738 <PxMessagingTask+0x6e0>)
 800a5ce:	1861      	adds	r1, r4, r1
 800a5d0:	9c05      	ldr	r4, [sp, #20]
 800a5d2:	0022      	movs	r2, r4
 800a5d4:	f00a fea1 	bl	801531a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a5d8:	8832      	ldrh	r2, [r6, #0]
 800a5da:	46a4      	mov	ip, r4
 800a5dc:	4462      	add	r2, ip
 800a5de:	8032      	strh	r2, [r6, #0]
 800a5e0:	e588      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a5e2:	4e5e      	ldr	r6, [pc, #376]	; (800a75c <PxMessagingTask+0x704>)
 800a5e4:	8830      	ldrh	r0, [r6, #0]
 800a5e6:	4f5e      	ldr	r7, [pc, #376]	; (800a760 <PxMessagingTask+0x708>)
 800a5e8:	19c0      	adds	r0, r0, r7
 800a5ea:	2138      	movs	r1, #56	; 0x38
 800a5ec:	4369      	muls	r1, r5
 800a5ee:	190c      	adds	r4, r1, r4
 800a5f0:	4951      	ldr	r1, [pc, #324]	; (800a738 <PxMessagingTask+0x6e0>)
 800a5f2:	1861      	adds	r1, r4, r1
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	469a      	mov	sl, r3
 800a5f8:	001a      	movs	r2, r3
 800a5fa:	f00a fe8e 	bl	801531a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a5fe:	8834      	ldrh	r4, [r6, #0]
 800a600:	4454      	add	r4, sl
 800a602:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a604:	2116      	movs	r1, #22
 800a606:	0020      	movs	r0, r4
 800a608:	f7f5 fda2 	bl	8000150 <__udivsi3>
 800a60c:	4b55      	ldr	r3, [pc, #340]	; (800a764 <PxMessagingTask+0x70c>)
 800a60e:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a610:	0022      	movs	r2, r4
 800a612:	0039      	movs	r1, r7
 800a614:	4854      	ldr	r0, [pc, #336]	; (800a768 <PxMessagingTask+0x710>)
 800a616:	f00a fe80 	bl	801531a <memcpy>
								longMessageLastPtr =0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	8033      	strh	r3, [r6, #0]
 800a61e:	e569      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(p =1; p <= NumOfPorts; p++){
 800a620:	3401      	adds	r4, #1
 800a622:	b2e4      	uxtb	r4, r4
 800a624:	2c05      	cmp	r4, #5
 800a626:	d810      	bhi.n	800a64a <PxMessagingTask+0x5f2>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a628:	0020      	movs	r0, r4
 800a62a:	f005 f8f1 	bl	800f810 <GetUart>
 800a62e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	429a      	cmp	r2, r3
 800a636:	d1f3      	bne.n	800a620 <PxMessagingTask+0x5c8>
									messageParams[temp++] =p;
 800a638:	1c73      	adds	r3, r6, #1
 800a63a:	4a42      	ldr	r2, [pc, #264]	; (800a744 <PxMessagingTask+0x6ec>)
 800a63c:	5594      	strb	r4, [r2, r6]
 800a63e:	b2de      	uxtb	r6, r3
 800a640:	e7ee      	b.n	800a620 <PxMessagingTask+0x5c8>
							for(p =1; p <= NumOfPorts; p++){
 800a642:	2401      	movs	r4, #1
							temp =0;
 800a644:	2300      	movs	r3, #0
 800a646:	001e      	movs	r6, r3
 800a648:	e7ec      	b.n	800a624 <PxMessagingTask+0x5cc>
 800a64a:	46b1      	mov	r9, r6
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a64c:	b2b2      	uxth	r2, r6
 800a64e:	2114      	movs	r1, #20
 800a650:	9804      	ldr	r0, [sp, #16]
 800a652:	f7ff fa63 	bl	8009b1c <SendMessageToModule>
							break;
 800a656:	e54d      	b.n	800a0f4 <PxMessagingTask+0x9c>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	1866      	adds	r6, r4, r1
 800a65e:	00ea      	lsls	r2, r5, #3
 800a660:	1b52      	subs	r2, r2, r5
 800a662:	00d0      	lsls	r0, r2, #3
 800a664:	4a34      	ldr	r2, [pc, #208]	; (800a738 <PxMessagingTask+0x6e0>)
 800a666:	1812      	adds	r2, r2, r0
 800a668:	5d90      	ldrb	r0, [r2, r6]
 800a66a:	3801      	subs	r0, #1
 800a66c:	2280      	movs	r2, #128	; 0x80
 800a66e:	0212      	lsls	r2, r2, #8
 800a670:	4102      	asrs	r2, r0
 800a672:	0010      	movs	r0, r2
 800a674:	4e3d      	ldr	r6, [pc, #244]	; (800a76c <PxMessagingTask+0x714>)
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	5b9a      	ldrh	r2, [r3, r6]
 800a67a:	4302      	orrs	r2, r0
 800a67c:	539a      	strh	r2, [r3, r6]
							for(p =0; p < numOfParams; p++){
 800a67e:	3101      	adds	r1, #1
 800a680:	b2c9      	uxtb	r1, r1
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	4299      	cmp	r1, r3
 800a686:	d3e7      	bcc.n	800a658 <PxMessagingTask+0x600>
							responseStatus =BOS_OK;
 800a688:	4b2f      	ldr	r3, [pc, #188]	; (800a748 <PxMessagingTask+0x6f0>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]
							break;
 800a68e:	e531      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(p =0; p < numOfParams; p++){
 800a690:	2100      	movs	r1, #0
 800a692:	e7f6      	b.n	800a682 <PxMessagingTask+0x62a>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a694:	00eb      	lsls	r3, r5, #3
 800a696:	1b5b      	subs	r3, r3, r5
 800a698:	00da      	lsls	r2, r3, #3
 800a69a:	4b27      	ldr	r3, [pc, #156]	; (800a738 <PxMessagingTask+0x6e0>)
 800a69c:	189b      	adds	r3, r3, r2
 800a69e:	5d1e      	ldrb	r6, [r3, r4]
 800a6a0:	0636      	lsls	r6, r6, #24
 800a6a2:	1c62      	adds	r2, r4, #1
 800a6a4:	5c9a      	ldrb	r2, [r3, r2]
 800a6a6:	0412      	lsls	r2, r2, #16
 800a6a8:	18b6      	adds	r6, r6, r2
 800a6aa:	1ca2      	adds	r2, r4, #2
 800a6ac:	5c9a      	ldrb	r2, [r3, r2]
 800a6ae:	0212      	lsls	r2, r2, #8
 800a6b0:	18b6      	adds	r6, r6, r2
 800a6b2:	1ce2      	adds	r2, r4, #3
 800a6b4:	5c9a      	ldrb	r2, [r3, r2]
 800a6b6:	18b6      	adds	r6, r6, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a6b8:	3404      	adds	r4, #4
 800a6ba:	5d1b      	ldrb	r3, [r3, r4]
 800a6bc:	2bff      	cmp	r3, #255	; 0xff
 800a6be:	d00e      	beq.n	800a6de <PxMessagingTask+0x686>
								for(p =0; p < numOfParams; p++){
 800a6c0:	2700      	movs	r7, #0
							temp =temp32 =0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4699      	mov	r9, r3
 800a6c6:	e01a      	b.n	800a6fe <PxMessagingTask+0x6a6>
									UpdateBaudrate(p,temp32);
 800a6c8:	0031      	movs	r1, r6
 800a6ca:	0020      	movs	r0, r4
 800a6cc:	f005 f92e 	bl	800f92c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	b2e4      	uxtb	r4, r4
 800a6d4:	2c05      	cmp	r4, #5
 800a6d6:	d9f7      	bls.n	800a6c8 <PxMessagingTask+0x670>
							temp =temp32 =0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4699      	mov	r9, r3
 800a6dc:	e50a      	b.n	800a0f4 <PxMessagingTask+0x9c>
								for(p =1; p <= NumOfPorts; p++){
 800a6de:	2401      	movs	r4, #1
 800a6e0:	e7f8      	b.n	800a6d4 <PxMessagingTask+0x67c>
									temp =cMessage[port - 1][4 + shift + p];
 800a6e2:	193a      	adds	r2, r7, r4
 800a6e4:	00eb      	lsls	r3, r5, #3
 800a6e6:	1b5b      	subs	r3, r3, r5
 800a6e8:	00d9      	lsls	r1, r3, #3
 800a6ea:	4b13      	ldr	r3, [pc, #76]	; (800a738 <PxMessagingTask+0x6e0>)
 800a6ec:	185b      	adds	r3, r3, r1
 800a6ee:	5c9b      	ldrb	r3, [r3, r2]
 800a6f0:	4699      	mov	r9, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d905      	bls.n	800a706 <PxMessagingTask+0x6ae>
								for(p =0; p < numOfParams; p++){
 800a6fa:	3701      	adds	r7, #1
 800a6fc:	b2ff      	uxtb	r7, r7
 800a6fe:	9b05      	ldr	r3, [sp, #20]
 800a700:	429f      	cmp	r7, r3
 800a702:	d3ee      	bcc.n	800a6e2 <PxMessagingTask+0x68a>
 800a704:	e4f6      	b.n	800a0f4 <PxMessagingTask+0x9c>
										UpdateBaudrate(temp,temp32);
 800a706:	0031      	movs	r1, r6
 800a708:	4648      	mov	r0, r9
 800a70a:	f005 f90f 	bl	800f92c <UpdateBaudrate>
 800a70e:	e7f4      	b.n	800a6fa <PxMessagingTask+0x6a2>
							SaveToRO();
 800a710:	f001 fb0e 	bl	800bd30 <SaveToRO>
							SaveEEportsDir();
 800a714:	f7f9 f940 	bl	8003998 <SaveEEportsDir>
							indMode =IND_PING;
 800a718:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <PxMessagingTask+0x6f4>)
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
							break;
 800a71e:	e4e9      	b.n	800a0f4 <PxMessagingTask+0x9c>
							ClearEEportsDir();
 800a720:	f7f9 fa08 	bl	8003b34 <ClearEEportsDir>
							ClearROtopology();
 800a724:	f001 fbf0 	bl	800bf08 <ClearROtopology>
							osDelay(100);
 800a728:	2064      	movs	r0, #100	; 0x64
 800a72a:	f005 f9c3 	bl	800fab4 <osDelay>
							indMode =IND_TOPOLOGY;
 800a72e:	4b07      	ldr	r3, [pc, #28]	; (800a74c <PxMessagingTask+0x6f4>)
 800a730:	2202      	movs	r2, #2
 800a732:	701a      	strb	r2, [r3, #0]
							break;
 800a734:	e4de      	b.n	800a0f4 <PxMessagingTask+0x9c>
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	20000d30 	.word	0x20000d30
 800a73c:	20001068 	.word	0x20001068
 800a740:	20000050 	.word	0x20000050
 800a744:	20000f28 	.word	0x20000f28
 800a748:	200010f8 	.word	0x200010f8
 800a74c:	20000ee4 	.word	0x20000ee4
 800a750:	2000107c 	.word	0x2000107c
 800a754:	20001066 	.word	0x20001066
 800a758:	20000ee5 	.word	0x20000ee5
 800a75c:	20000ee6 	.word	0x20000ee6
 800a760:	200015ac 	.word	0x200015ac
 800a764:	2000001c 	.word	0x2000001c
 800a768:	20000aa0 	.word	0x20000aa0
 800a76c:	20007238 	.word	0x20007238
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a770:	f005 fac2 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 800a774:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 800a776:	2fff      	cmp	r7, #255	; 0xff
 800a778:	d025      	beq.n	800a7c6 <PxMessagingTask+0x76e>
							else if(dst == BOS_MULTICAST)
 800a77a:	2ffe      	cmp	r7, #254	; 0xfe
 800a77c:	d02e      	beq.n	800a7dc <PxMessagingTask+0x784>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a77e:	00ea      	lsls	r2, r5, #3
 800a780:	1b52      	subs	r2, r2, r5
 800a782:	00d3      	lsls	r3, r2, #3
 800a784:	191c      	adds	r4, r3, r4
 800a786:	49e4      	ldr	r1, [pc, #912]	; (800ab18 <PxMessagingTask+0xac0>)
 800a788:	1861      	adds	r1, r4, r1
 800a78a:	9a05      	ldr	r2, [sp, #20]
 800a78c:	48e3      	ldr	r0, [pc, #908]	; (800ab1c <PxMessagingTask+0xac4>)
 800a78e:	f00a fdc4 	bl	801531a <memcpy>
								temp =PcPort;
 800a792:	4fe3      	ldr	r7, [pc, #908]	; (800ab20 <PxMessagingTask+0xac8>)
 800a794:	783c      	ldrb	r4, [r7, #0]
								PcPort =port;
 800a796:	9b07      	ldr	r3, [sp, #28]
 800a798:	703b      	strb	r3, [r7, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a79a:	2299      	movs	r2, #153	; 0x99
 800a79c:	0092      	lsls	r2, r2, #2
 800a79e:	0031      	movs	r1, r6
 800a7a0:	48de      	ldr	r0, [pc, #888]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7a2:	f005 fa43 	bl	800fc2c <FreeRTOS_CLIProcessCommand>
 800a7a6:	4681      	mov	r9, r0
								PcPort =temp;
 800a7a8:	703c      	strb	r4, [r7, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a7aa:	4bde      	ldr	r3, [pc, #888]	; (800ab24 <PxMessagingTask+0xacc>)
 800a7ac:	799b      	ldrb	r3, [r3, #6]
 800a7ae:	2b60      	cmp	r3, #96	; 0x60
 800a7b0:	d021      	beq.n	800a7f6 <PxMessagingTask+0x79e>
							} while(xReturned != pdFALSE);
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1ec      	bne.n	800a792 <PxMessagingTask+0x73a>
 800a7b8:	46a1      	mov	r9, r4
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a7ba:	2232      	movs	r2, #50	; 0x32
 800a7bc:	2100      	movs	r1, #0
 800a7be:	48d7      	ldr	r0, [pc, #860]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7c0:	f00a fdb4 	bl	801532c <memset>
							break;
 800a7c4:	e496      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a7c6:	2138      	movs	r1, #56	; 0x38
 800a7c8:	4369      	muls	r1, r5
 800a7ca:	190c      	adds	r4, r1, r4
 800a7cc:	49d2      	ldr	r1, [pc, #840]	; (800ab18 <PxMessagingTask+0xac0>)
 800a7ce:	1861      	adds	r1, r4, r1
 800a7d0:	9a05      	ldr	r2, [sp, #20]
 800a7d2:	3a01      	subs	r2, #1
 800a7d4:	48d1      	ldr	r0, [pc, #836]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7d6:	f00a fda0 	bl	801531a <memcpy>
 800a7da:	e7da      	b.n	800a792 <PxMessagingTask+0x73a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a7dc:	2138      	movs	r1, #56	; 0x38
 800a7de:	4369      	muls	r1, r5
 800a7e0:	190c      	adds	r4, r1, r4
 800a7e2:	49cd      	ldr	r1, [pc, #820]	; (800ab18 <PxMessagingTask+0xac0>)
 800a7e4:	1861      	adds	r1, r4, r1
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	464a      	mov	r2, r9
 800a7ea:	1a9a      	subs	r2, r3, r2
 800a7ec:	3a02      	subs	r2, #2
 800a7ee:	48cb      	ldr	r0, [pc, #812]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7f0:	f00a fd93 	bl	801531a <memcpy>
 800a7f4:	e7cd      	b.n	800a792 <PxMessagingTask+0x73a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a7f6:	0030      	movs	r0, r6
 800a7f8:	f7f5 fc8e 	bl	8000118 <strlen>
 800a7fc:	0002      	movs	r2, r0
 800a7fe:	0031      	movs	r1, r6
 800a800:	48c9      	ldr	r0, [pc, #804]	; (800ab28 <PxMessagingTask+0xad0>)
 800a802:	f00a fd8a 	bl	801531a <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a806:	0030      	movs	r0, r6
 800a808:	f7f5 fc86 	bl	8000118 <strlen>
 800a80c:	b282      	uxth	r2, r0
 800a80e:	2118      	movs	r1, #24
 800a810:	9804      	ldr	r0, [sp, #16]
 800a812:	f7ff f983 	bl	8009b1c <SendMessageToModule>
									osDelay(10);
 800a816:	200a      	movs	r0, #10
 800a818:	f005 f94c 	bl	800fab4 <osDelay>
 800a81c:	e7c9      	b.n	800a7b2 <PxMessagingTask+0x75a>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a81e:	f005 fa6b 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 800a822:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a824:	f7f5 fc78 	bl	8000118 <strlen>
 800a828:	0002      	movs	r2, r0
 800a82a:	2100      	movs	r1, #0
 800a82c:	0030      	movs	r0, r6
 800a82e:	f00a fd7d 	bl	801532c <memset>
							if(longMessage){
 800a832:	4bbe      	ldr	r3, [pc, #760]	; (800ab2c <PxMessagingTask+0xad4>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <PxMessagingTask+0x804>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a83a:	4fbd      	ldr	r7, [pc, #756]	; (800ab30 <PxMessagingTask+0xad8>)
 800a83c:	8838      	ldrh	r0, [r7, #0]
 800a83e:	1830      	adds	r0, r6, r0
 800a840:	2138      	movs	r1, #56	; 0x38
 800a842:	4369      	muls	r1, r5
 800a844:	190c      	adds	r4, r1, r4
 800a846:	49b4      	ldr	r1, [pc, #720]	; (800ab18 <PxMessagingTask+0xac0>)
 800a848:	1861      	adds	r1, r4, r1
 800a84a:	9c05      	ldr	r4, [sp, #20]
 800a84c:	0022      	movs	r2, r4
 800a84e:	f00a fd64 	bl	801531a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a852:	883a      	ldrh	r2, [r7, #0]
 800a854:	46a4      	mov	ip, r4
 800a856:	4462      	add	r2, ip
 800a858:	803a      	strh	r2, [r7, #0]
 800a85a:	e44b      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a85c:	4fb4      	ldr	r7, [pc, #720]	; (800ab30 <PxMessagingTask+0xad8>)
 800a85e:	8838      	ldrh	r0, [r7, #0]
 800a860:	1830      	adds	r0, r6, r0
 800a862:	2138      	movs	r1, #56	; 0x38
 800a864:	4369      	muls	r1, r5
 800a866:	190c      	adds	r4, r1, r4
 800a868:	49ab      	ldr	r1, [pc, #684]	; (800ab18 <PxMessagingTask+0xac0>)
 800a86a:	1861      	adds	r1, r4, r1
 800a86c:	9a05      	ldr	r2, [sp, #20]
 800a86e:	f00a fd54 	bl	801531a <memcpy>
								longMessageLastPtr =0;
 800a872:	2100      	movs	r1, #0
 800a874:	8039      	strh	r1, [r7, #0]
								responseStatus =BOS_OK;
 800a876:	4baf      	ldr	r3, [pc, #700]	; (800ab34 <PxMessagingTask+0xadc>)
 800a878:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a87a:	000b      	movs	r3, r1
 800a87c:	000a      	movs	r2, r1
 800a87e:	48ae      	ldr	r0, [pc, #696]	; (800ab38 <PxMessagingTask+0xae0>)
 800a880:	6800      	ldr	r0, [r0, #0]
 800a882:	f006 fd59 	bl	8011338 <xTaskGenericNotify>
 800a886:	e435      	b.n	800a0f4 <PxMessagingTask+0x9c>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a888:	4bac      	ldr	r3, [pc, #688]	; (800ab3c <PxMessagingTask+0xae4>)
 800a88a:	4aad      	ldr	r2, [pc, #692]	; (800ab40 <PxMessagingTask+0xae8>)
 800a88c:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a88e:	4bad      	ldr	r3, [pc, #692]	; (800ab44 <PxMessagingTask+0xaec>)
 800a890:	2201      	movs	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a894:	200a      	movs	r0, #10
 800a896:	f005 f90d 	bl	800fab4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	4baa      	ldr	r3, [pc, #680]	; (800ab48 <PxMessagingTask+0xaf0>)
 800a8a0:	4aaa      	ldr	r2, [pc, #680]	; (800ab4c <PxMessagingTask+0xaf4>)
 800a8a2:	60da      	str	r2, [r3, #12]
 800a8a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a8a8:	46c0      	nop			; (mov r8, r8)
 800a8aa:	e7fd      	b.n	800a8a8 <PxMessagingTask+0x850>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a8ac:	00eb      	lsls	r3, r5, #3
 800a8ae:	1b5b      	subs	r3, r3, r5
 800a8b0:	00da      	lsls	r2, r3, #3
 800a8b2:	4e99      	ldr	r6, [pc, #612]	; (800ab18 <PxMessagingTask+0xac0>)
 800a8b4:	18b6      	adds	r6, r6, r2
 800a8b6:	5d30      	ldrb	r0, [r6, r4]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	3319      	adds	r3, #25
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	f7fe ff1b 	bl	80096fc <SendMessageFromPort>
							osDelay(100);
 800a8c6:	2064      	movs	r0, #100	; 0x64
 800a8c8:	f005 f8f4 	bl	800fab4 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a8cc:	5d33      	ldrb	r3, [r6, r4]
 800a8ce:	4aa0      	ldr	r2, [pc, #640]	; (800ab50 <PxMessagingTask+0xaf8>)
 800a8d0:	7811      	ldrb	r1, [r2, #0]
 800a8d2:	9a07      	ldr	r2, [sp, #28]
 800a8d4:	9804      	ldr	r0, [sp, #16]
 800a8d6:	f7f9 fbb5 	bl	8004044 <remoteBootloaderUpdate>
							break;
 800a8da:	f7ff fc0b 	bl	800a0f4 <PxMessagingTask+0x9c>
							temp =cMessage[port - 1][11 + shift];
 800a8de:	0021      	movs	r1, r4
 800a8e0:	230b      	movs	r3, #11
 800a8e2:	469c      	mov	ip, r3
 800a8e4:	44a4      	add	ip, r4
 800a8e6:	4660      	mov	r0, ip
 800a8e8:	9009      	str	r0, [sp, #36]	; 0x24
 800a8ea:	00eb      	lsls	r3, r5, #3
 800a8ec:	1b5b      	subs	r3, r3, r5
 800a8ee:	00da      	lsls	r2, r3, #3
 800a8f0:	4b89      	ldr	r3, [pc, #548]	; (800ab18 <PxMessagingTask+0xac0>)
 800a8f2:	189b      	adds	r3, r3, r2
 800a8f4:	5c1b      	ldrb	r3, [r3, r0]
 800a8f6:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	2b0f      	cmp	r3, #15
 800a8fc:	d100      	bne.n	800a900 <PxMessagingTask+0x8a8>
 800a8fe:	e08d      	b.n	800aa1c <PxMessagingTask+0x9c4>
							if(numOfParams == 17)
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	2b11      	cmp	r3, #17
 800a904:	d100      	bne.n	800a908 <PxMessagingTask+0x8b0>
 800a906:	e092      	b.n	800aa2e <PxMessagingTask+0x9d6>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a908:	00ea      	lsls	r2, r5, #3
 800a90a:	1b52      	subs	r2, r2, r5
 800a90c:	00d3      	lsls	r3, r2, #3
 800a90e:	4a82      	ldr	r2, [pc, #520]	; (800ab18 <PxMessagingTask+0xac0>)
 800a910:	18d3      	adds	r3, r2, r3
 800a912:	5d1e      	ldrb	r6, [r3, r4]
 800a914:	0636      	lsls	r6, r6, #24
 800a916:	1c62      	adds	r2, r4, #1
 800a918:	920a      	str	r2, [sp, #40]	; 0x28
 800a91a:	5c9a      	ldrb	r2, [r3, r2]
 800a91c:	0412      	lsls	r2, r2, #16
 800a91e:	18b6      	adds	r6, r6, r2
 800a920:	1ca2      	adds	r2, r4, #2
 800a922:	920b      	str	r2, [sp, #44]	; 0x2c
 800a924:	5c9a      	ldrb	r2, [r3, r2]
 800a926:	0212      	lsls	r2, r2, #8
 800a928:	18b6      	adds	r6, r6, r2
 800a92a:	1ce2      	adds	r2, r4, #3
 800a92c:	920c      	str	r2, [sp, #48]	; 0x30
 800a92e:	5c9a      	ldrb	r2, [r3, r2]
 800a930:	18b6      	adds	r6, r6, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a932:	1d22      	adds	r2, r4, #4
 800a934:	920d      	str	r2, [sp, #52]	; 0x34
 800a936:	5c9f      	ldrb	r7, [r3, r2]
 800a938:	063f      	lsls	r7, r7, #24
 800a93a:	1d62      	adds	r2, r4, #5
 800a93c:	920e      	str	r2, [sp, #56]	; 0x38
 800a93e:	5c9a      	ldrb	r2, [r3, r2]
 800a940:	0412      	lsls	r2, r2, #16
 800a942:	18bf      	adds	r7, r7, r2
 800a944:	1da2      	adds	r2, r4, #6
 800a946:	920f      	str	r2, [sp, #60]	; 0x3c
 800a948:	5c9a      	ldrb	r2, [r3, r2]
 800a94a:	0212      	lsls	r2, r2, #8
 800a94c:	18bf      	adds	r7, r7, r2
 800a94e:	1de2      	adds	r2, r4, #7
 800a950:	5c9b      	ldrb	r3, [r3, r2]
 800a952:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800a954:	464b      	mov	r3, r9
 800a956:	2b00      	cmp	r3, #0
 800a958:	d172      	bne.n	800aa40 <PxMessagingTask+0x9e8>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a95a:	00eb      	lsls	r3, r5, #3
 800a95c:	1b5b      	subs	r3, r3, r5
 800a95e:	00d9      	lsls	r1, r3, #3
 800a960:	4a6d      	ldr	r2, [pc, #436]	; (800ab18 <PxMessagingTask+0xac0>)
 800a962:	1852      	adds	r2, r2, r1
 800a964:	0023      	movs	r3, r4
 800a966:	3309      	adds	r3, #9
 800a968:	5cd3      	ldrb	r3, [r2, r3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <PxMessagingTask+0x940>
 800a96e:	2238      	movs	r2, #56	; 0x38
 800a970:	436a      	muls	r2, r5
 800a972:	4969      	ldr	r1, [pc, #420]	; (800ab18 <PxMessagingTask+0xac0>)
 800a974:	1889      	adds	r1, r1, r2
 800a976:	0022      	movs	r2, r4
 800a978:	320a      	adds	r2, #10
 800a97a:	5c89      	ldrb	r1, [r1, r2]
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d00b      	beq.n	800a998 <PxMessagingTask+0x940>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a980:	3a02      	subs	r2, #2
 800a982:	2038      	movs	r0, #56	; 0x38
 800a984:	4368      	muls	r0, r5
 800a986:	4684      	mov	ip, r0
 800a988:	4863      	ldr	r0, [pc, #396]	; (800ab18 <PxMessagingTask+0xac0>)
 800a98a:	4460      	add	r0, ip
 800a98c:	5c80      	ldrb	r0, [r0, r2]
 800a98e:	9100      	str	r1, [sp, #0]
 800a990:	003a      	movs	r2, r7
 800a992:	0031      	movs	r1, r6
 800a994:	f7fe fd9e 	bl	80094d4 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a998:	00eb      	lsls	r3, r5, #3
 800a99a:	1b5b      	subs	r3, r3, r5
 800a99c:	00da      	lsls	r2, r3, #3
 800a99e:	4b5e      	ldr	r3, [pc, #376]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9a0:	189b      	adds	r3, r3, r2
 800a9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a4:	5c9b      	ldrb	r3, [r3, r2]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <PxMessagingTask+0x97c>
 800a9aa:	0022      	movs	r2, r4
 800a9ac:	320c      	adds	r2, #12
 800a9ae:	2038      	movs	r0, #56	; 0x38
 800a9b0:	4368      	muls	r0, r5
 800a9b2:	4959      	ldr	r1, [pc, #356]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9b4:	1809      	adds	r1, r1, r0
 800a9b6:	5c89      	ldrb	r1, [r1, r2]
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	d00b      	beq.n	800a9d4 <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a9bc:	3a04      	subs	r2, #4
 800a9be:	2038      	movs	r0, #56	; 0x38
 800a9c0:	4368      	muls	r0, r5
 800a9c2:	4684      	mov	ip, r0
 800a9c4:	4854      	ldr	r0, [pc, #336]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9c6:	4460      	add	r0, ip
 800a9c8:	5c80      	ldrb	r0, [r0, r2]
 800a9ca:	9100      	str	r1, [sp, #0]
 800a9cc:	003a      	movs	r2, r7
 800a9ce:	0031      	movs	r1, r6
 800a9d0:	f7fe fd80 	bl	80094d4 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a9d4:	00eb      	lsls	r3, r5, #3
 800a9d6:	1b5b      	subs	r3, r3, r5
 800a9d8:	00d9      	lsls	r1, r3, #3
 800a9da:	4a4f      	ldr	r2, [pc, #316]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9dc:	1852      	adds	r2, r2, r1
 800a9de:	0023      	movs	r3, r4
 800a9e0:	330d      	adds	r3, #13
 800a9e2:	5cd3      	ldrb	r3, [r2, r3]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <PxMessagingTask+0x994>
 800a9e8:	f7ff fb84 	bl	800a0f4 <PxMessagingTask+0x9c>
 800a9ec:	2238      	movs	r2, #56	; 0x38
 800a9ee:	436a      	muls	r2, r5
 800a9f0:	4949      	ldr	r1, [pc, #292]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9f2:	1889      	adds	r1, r1, r2
 800a9f4:	0022      	movs	r2, r4
 800a9f6:	320e      	adds	r2, #14
 800a9f8:	5c89      	ldrb	r1, [r1, r2]
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	d101      	bne.n	800aa02 <PxMessagingTask+0x9aa>
 800a9fe:	f7ff fb79 	bl	800a0f4 <PxMessagingTask+0x9c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aa02:	3408      	adds	r4, #8
 800aa04:	2038      	movs	r0, #56	; 0x38
 800aa06:	4368      	muls	r0, r5
 800aa08:	4a43      	ldr	r2, [pc, #268]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa0a:	1812      	adds	r2, r2, r0
 800aa0c:	5d10      	ldrb	r0, [r2, r4]
 800aa0e:	9100      	str	r1, [sp, #0]
 800aa10:	003a      	movs	r2, r7
 800aa12:	0031      	movs	r1, r6
 800aa14:	f7fe fd5e 	bl	80094d4 <SetupDMAStreams>
 800aa18:	f7ff fb6c 	bl	800a0f4 <PxMessagingTask+0x9c>
								temp =cMessage[port - 1][13 + shift];
 800aa1c:	3329      	adds	r3, #41	; 0x29
 800aa1e:	436b      	muls	r3, r5
 800aa20:	4a3d      	ldr	r2, [pc, #244]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa22:	18d2      	adds	r2, r2, r3
 800aa24:	0023      	movs	r3, r4
 800aa26:	330d      	adds	r3, #13
 800aa28:	5cd3      	ldrb	r3, [r2, r3]
 800aa2a:	4699      	mov	r9, r3
 800aa2c:	e768      	b.n	800a900 <PxMessagingTask+0x8a8>
								temp =cMessage[port - 1][15 + shift];
 800aa2e:	3327      	adds	r3, #39	; 0x27
 800aa30:	436b      	muls	r3, r5
 800aa32:	4a39      	ldr	r2, [pc, #228]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa34:	18d2      	adds	r2, r2, r3
 800aa36:	0023      	movs	r3, r4
 800aa38:	330f      	adds	r3, #15
 800aa3a:	5cd3      	ldrb	r3, [r2, r3]
 800aa3c:	4699      	mov	r9, r3
 800aa3e:	e763      	b.n	800a908 <PxMessagingTask+0x8b0>
 800aa40:	468a      	mov	sl, r1
 800aa42:	0016      	movs	r6, r2
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800aa44:	000b      	movs	r3, r1
 800aa46:	3308      	adds	r3, #8
 800aa48:	2238      	movs	r2, #56	; 0x38
 800aa4a:	436a      	muls	r2, r5
 800aa4c:	4c32      	ldr	r4, [pc, #200]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa4e:	18a4      	adds	r4, r4, r2
 800aa50:	5ce1      	ldrb	r1, [r4, r3]
 800aa52:	20e4      	movs	r0, #228	; 0xe4
 800aa54:	f7fd f98c 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800aa58:	4653      	mov	r3, sl
 800aa5a:	5ce1      	ldrb	r1, [r4, r3]
 800aa5c:	0209      	lsls	r1, r1, #8
 800aa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa60:	5ce3      	ldrb	r3, [r4, r3]
 800aa62:	18c9      	adds	r1, r1, r3
 800aa64:	b289      	uxth	r1, r1
 800aa66:	20e5      	movs	r0, #229	; 0xe5
 800aa68:	f7fd f982 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800aa6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6e:	5ce1      	ldrb	r1, [r4, r3]
 800aa70:	0209      	lsls	r1, r1, #8
 800aa72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa74:	5ce3      	ldrb	r3, [r4, r3]
 800aa76:	18c9      	adds	r1, r1, r3
 800aa78:	b289      	uxth	r1, r1
 800aa7a:	20e6      	movs	r0, #230	; 0xe6
 800aa7c:	f7fd f978 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800aa80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa82:	5ce1      	ldrb	r1, [r4, r3]
 800aa84:	0209      	lsls	r1, r1, #8
 800aa86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa88:	5ce3      	ldrb	r3, [r4, r3]
 800aa8a:	18c9      	adds	r1, r1, r3
 800aa8c:	b289      	uxth	r1, r1
 800aa8e:	20e7      	movs	r0, #231	; 0xe7
 800aa90:	f7fd f96e 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800aa94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa96:	5ce1      	ldrb	r1, [r4, r3]
 800aa98:	0209      	lsls	r1, r1, #8
 800aa9a:	5da3      	ldrb	r3, [r4, r6]
 800aa9c:	18c9      	adds	r1, r1, r3
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	20e8      	movs	r0, #232	; 0xe8
 800aaa2:	f7fd f965 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800aaa6:	4653      	mov	r3, sl
 800aaa8:	3309      	adds	r3, #9
 800aaaa:	5ce1      	ldrb	r1, [r4, r3]
 800aaac:	0209      	lsls	r1, r1, #8
 800aaae:	3301      	adds	r3, #1
 800aab0:	5ce3      	ldrb	r3, [r4, r3]
 800aab2:	18c9      	adds	r1, r1, r3
 800aab4:	b289      	uxth	r1, r1
 800aab6:	20e9      	movs	r0, #233	; 0xe9
 800aab8:	f7fd f95a 	bl	8007d70 <EE_WriteVariable>
								if(numOfParams == 19)
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	2b13      	cmp	r3, #19
 800aac0:	d10e      	bne.n	800aae0 <PxMessagingTask+0xa88>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800aac2:	2238      	movs	r2, #56	; 0x38
 800aac4:	436a      	muls	r2, r5
 800aac6:	4b14      	ldr	r3, [pc, #80]	; (800ab18 <PxMessagingTask+0xac0>)
 800aac8:	189b      	adds	r3, r3, r2
 800aaca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aacc:	5c99      	ldrb	r1, [r3, r2]
 800aace:	0209      	lsls	r1, r1, #8
 800aad0:	4652      	mov	r2, sl
 800aad2:	320c      	adds	r2, #12
 800aad4:	5c9b      	ldrb	r3, [r3, r2]
 800aad6:	18c9      	adds	r1, r1, r3
 800aad8:	b289      	uxth	r1, r1
 800aada:	20ea      	movs	r0, #234	; 0xea
 800aadc:	f7fd f948 	bl	8007d70 <EE_WriteVariable>
								if(numOfParams == 21)
 800aae0:	9b05      	ldr	r3, [sp, #20]
 800aae2:	2b15      	cmp	r3, #21
 800aae4:	d10f      	bne.n	800ab06 <PxMessagingTask+0xaae>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800aae6:	4651      	mov	r1, sl
 800aae8:	310d      	adds	r1, #13
 800aaea:	3323      	adds	r3, #35	; 0x23
 800aaec:	436b      	muls	r3, r5
 800aaee:	4a0a      	ldr	r2, [pc, #40]	; (800ab18 <PxMessagingTask+0xac0>)
 800aaf0:	18d2      	adds	r2, r2, r3
 800aaf2:	5c51      	ldrb	r1, [r2, r1]
 800aaf4:	0209      	lsls	r1, r1, #8
 800aaf6:	4653      	mov	r3, sl
 800aaf8:	330e      	adds	r3, #14
 800aafa:	5cd3      	ldrb	r3, [r2, r3]
 800aafc:	18c9      	adds	r1, r1, r3
 800aafe:	b289      	uxth	r1, r1
 800ab00:	20eb      	movs	r0, #235	; 0xeb
 800ab02:	f7fd f935 	bl	8007d70 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <PxMessagingTask+0xaf0>)
 800ab0c:	4a0f      	ldr	r2, [pc, #60]	; (800ab4c <PxMessagingTask+0xaf4>)
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ab14:	46c0      	nop			; (mov r8, r8)
 800ab16:	e7fd      	b.n	800ab14 <PxMessagingTask+0xabc>
 800ab18:	20000d30 	.word	0x20000d30
 800ab1c:	20001578 	.word	0x20001578
 800ab20:	20000a9f 	.word	0x20000a9f
 800ab24:	20006da0 	.word	0x20006da0
 800ab28:	20000f28 	.word	0x20000f28
 800ab2c:	20000ee5 	.word	0x20000ee5
 800ab30:	20000ee6 	.word	0x20000ee6
 800ab34:	200010f8 	.word	0x200010f8
 800ab38:	2000149c 	.word	0x2000149c
 800ab3c:	20007ff0 	.word	0x20007ff0
 800ab40:	deadbeef 	.word	0xdeadbeef
 800ab44:	20000ee4 	.word	0x20000ee4
 800ab48:	e000ed00 	.word	0xe000ed00
 800ab4c:	05fa0004 	.word	0x05fa0004
 800ab50:	20001066 	.word	0x20001066
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ab54:	00eb      	lsls	r3, r5, #3
 800ab56:	1b5b      	subs	r3, r3, r5
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	4eea      	ldr	r6, [pc, #936]	; (800af04 <PxMessagingTask+0xeac>)
 800ab5c:	18b6      	adds	r6, r6, r2
 800ab5e:	5d33      	ldrb	r3, [r6, r4]
 800ab60:	061b      	lsls	r3, r3, #24
 800ab62:	1c62      	adds	r2, r4, #1
 800ab64:	5cb2      	ldrb	r2, [r6, r2]
 800ab66:	0412      	lsls	r2, r2, #16
 800ab68:	189b      	adds	r3, r3, r2
 800ab6a:	1ca2      	adds	r2, r4, #2
 800ab6c:	5cb2      	ldrb	r2, [r6, r2]
 800ab6e:	0212      	lsls	r2, r2, #8
 800ab70:	189b      	adds	r3, r3, r2
 800ab72:	1ce2      	adds	r2, r4, #3
 800ab74:	5cb2      	ldrb	r2, [r6, r2]
 800ab76:	469a      	mov	sl, r3
 800ab78:	4492      	add	sl, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	5cf2      	ldrb	r2, [r6, r3]
 800ab7e:	0612      	lsls	r2, r2, #24
 800ab80:	1d63      	adds	r3, r4, #5
 800ab82:	5cf3      	ldrb	r3, [r6, r3]
 800ab84:	041b      	lsls	r3, r3, #16
 800ab86:	18d3      	adds	r3, r2, r3
 800ab88:	1da2      	adds	r2, r4, #6
 800ab8a:	5cb2      	ldrb	r2, [r6, r2]
 800ab8c:	0212      	lsls	r2, r2, #8
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	1de2      	adds	r2, r4, #7
 800ab92:	5cb2      	ldrb	r2, [r6, r2]
 800ab94:	469c      	mov	ip, r3
 800ab96:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ab98:	0020      	movs	r0, r4
 800ab9a:	3009      	adds	r0, #9
 800ab9c:	0022      	movs	r2, r4
 800ab9e:	320b      	adds	r2, #11
 800aba0:	0023      	movs	r3, r4
 800aba2:	330a      	adds	r3, #10
 800aba4:	0027      	movs	r7, r4
 800aba6:	3708      	adds	r7, #8
 800aba8:	340c      	adds	r4, #12
 800abaa:	5d34      	ldrb	r4, [r6, r4]
 800abac:	5cf3      	ldrb	r3, [r6, r3]
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	5cb2      	ldrb	r2, [r6, r2]
 800abb2:	49d5      	ldr	r1, [pc, #852]	; (800af08 <PxMessagingTask+0xeb0>)
 800abb4:	7809      	ldrb	r1, [r1, #0]
 800abb6:	5c30      	ldrb	r0, [r6, r0]
 800abb8:	1e63      	subs	r3, r4, #1
 800abba:	419c      	sbcs	r4, r3
 800abbc:	9403      	str	r4, [sp, #12]
 800abbe:	4664      	mov	r4, ip
 800abc0:	9402      	str	r4, [sp, #8]
 800abc2:	4654      	mov	r4, sl
 800abc4:	9401      	str	r4, [sp, #4]
 800abc6:	5df4      	ldrb	r4, [r6, r7]
 800abc8:	9400      	str	r4, [sp, #0]
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	f7fe ffcc 	bl	8009b68 <StartScastDMAStream>
							break;
 800abd0:	f7ff fa90 	bl	800a0f4 <PxMessagingTask+0x9c>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800abd4:	00ea      	lsls	r2, r5, #3
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	00d1      	lsls	r1, r2, #3
 800abda:	4aca      	ldr	r2, [pc, #808]	; (800af04 <PxMessagingTask+0xeac>)
 800abdc:	1852      	adds	r2, r2, r1
 800abde:	5d12      	ldrb	r2, [r2, r4]
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d000      	beq.n	800abe6 <PxMessagingTask+0xb8e>
 800abe4:	e083      	b.n	800acee <PxMessagingTask+0xc96>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800abe6:	1ca1      	adds	r1, r4, #2
 800abe8:	2338      	movs	r3, #56	; 0x38
 800abea:	436b      	muls	r3, r5
 800abec:	4ac5      	ldr	r2, [pc, #788]	; (800af04 <PxMessagingTask+0xeac>)
 800abee:	18d2      	adds	r2, r2, r3
 800abf0:	5c53      	ldrb	r3, [r2, r1]
 800abf2:	061b      	lsls	r3, r3, #24
 800abf4:	1ce1      	adds	r1, r4, #3
 800abf6:	5c51      	ldrb	r1, [r2, r1]
 800abf8:	0409      	lsls	r1, r1, #16
 800abfa:	185b      	adds	r3, r3, r1
 800abfc:	1d21      	adds	r1, r4, #4
 800abfe:	5c51      	ldrb	r1, [r2, r1]
 800ac00:	0209      	lsls	r1, r1, #8
 800ac02:	185b      	adds	r3, r3, r1
 800ac04:	1d61      	adds	r1, r4, #5
 800ac06:	5c51      	ldrb	r1, [r2, r1]
 800ac08:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ac0a:	3401      	adds	r4, #1
 800ac0c:	5d12      	ldrb	r2, [r2, r4]
 800ac0e:	3a01      	subs	r2, #1
 800ac10:	b2d1      	uxtb	r1, r2
 800ac12:	2907      	cmp	r1, #7
 800ac14:	d901      	bls.n	800ac1a <PxMessagingTask+0xbc2>
 800ac16:	f7ff fa6d 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	0092      	lsls	r2, r2, #2
 800ac1e:	49bb      	ldr	r1, [pc, #748]	; (800af0c <PxMessagingTask+0xeb4>)
 800ac20:	588a      	ldr	r2, [r1, r2]
 800ac22:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	4bba      	ldr	r3, [pc, #744]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac28:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	211f      	movs	r1, #31
 800ac2e:	9804      	ldr	r0, [sp, #16]
 800ac30:	f7fe ff74 	bl	8009b1c <SendMessageToModule>
										break;
 800ac34:	f7ff fa5e 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	4bb5      	ldr	r3, [pc, #724]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac3c:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac3e:	2201      	movs	r2, #1
 800ac40:	211f      	movs	r1, #31
 800ac42:	9804      	ldr	r0, [sp, #16]
 800ac44:	f7fe ff6a 	bl	8009b1c <SendMessageToModule>
										break;
 800ac48:	f7ff fa54 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac4c:	8819      	ldrh	r1, [r3, #0]
 800ac4e:	4ab0      	ldr	r2, [pc, #704]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac50:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ac58:	2202      	movs	r2, #2
 800ac5a:	211f      	movs	r1, #31
 800ac5c:	9804      	ldr	r0, [sp, #16]
 800ac5e:	f7fe ff5d 	bl	8009b1c <SendMessageToModule>
										break;
 800ac62:	f7ff fa47 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac66:	8819      	ldrh	r1, [r3, #0]
 800ac68:	4aa9      	ldr	r2, [pc, #676]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac6a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b21b      	sxth	r3, r3
 800ac70:	121b      	asrs	r3, r3, #8
 800ac72:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ac74:	2202      	movs	r2, #2
 800ac76:	211f      	movs	r1, #31
 800ac78:	9804      	ldr	r0, [sp, #16]
 800ac7a:	f7fe ff4f 	bl	8009b1c <SendMessageToModule>
										break;
 800ac7e:	f7ff fa39 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	4aa2      	ldr	r2, [pc, #648]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac86:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ac88:	6819      	ldr	r1, [r3, #0]
 800ac8a:	0a09      	lsrs	r1, r1, #8
 800ac8c:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ac8e:	6819      	ldr	r1, [r3, #0]
 800ac90:	0c09      	lsrs	r1, r1, #16
 800ac92:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	0e1b      	lsrs	r3, r3, #24
 800ac98:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ac9a:	2204      	movs	r2, #4
 800ac9c:	211f      	movs	r1, #31
 800ac9e:	9804      	ldr	r0, [sp, #16]
 800aca0:	f7fe ff3c 	bl	8009b1c <SendMessageToModule>
										break;
 800aca4:	f7ff fa26 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aca8:	6819      	ldr	r1, [r3, #0]
 800acaa:	4a99      	ldr	r2, [pc, #612]	; (800af10 <PxMessagingTask+0xeb8>)
 800acac:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	1209      	asrs	r1, r1, #8
 800acb2:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	1409      	asrs	r1, r1, #16
 800acb8:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	0e1b      	lsrs	r3, r3, #24
 800acbe:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800acc0:	2204      	movs	r2, #4
 800acc2:	211f      	movs	r1, #31
 800acc4:	9804      	ldr	r0, [sp, #16]
 800acc6:	f7fe ff29 	bl	8009b1c <SendMessageToModule>
										break;
 800acca:	f7ff fa13 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800acce:	7819      	ldrb	r1, [r3, #0]
 800acd0:	4a8f      	ldr	r2, [pc, #572]	; (800af10 <PxMessagingTask+0xeb8>)
 800acd2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800acd4:	7859      	ldrb	r1, [r3, #1]
 800acd6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800acd8:	7899      	ldrb	r1, [r3, #2]
 800acda:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800acdc:	78db      	ldrb	r3, [r3, #3]
 800acde:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ace0:	2208      	movs	r2, #8
 800ace2:	211f      	movs	r1, #31
 800ace4:	9804      	ldr	r0, [sp, #16]
 800ace6:	f7fe ff19 	bl	8009b1c <SendMessageToModule>
										break; // You cannot bitwise floats
 800acea:	f7ff fa03 	bl	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800acee:	2a02      	cmp	r2, #2
 800acf0:	d000      	beq.n	800acf4 <PxMessagingTask+0xc9c>
 800acf2:	e08e      	b.n	800ae12 <PxMessagingTask+0xdba>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800acf4:	3b01      	subs	r3, #1
 800acf6:	4883      	ldr	r0, [pc, #524]	; (800af04 <PxMessagingTask+0xeac>)
 800acf8:	3236      	adds	r2, #54	; 0x36
 800acfa:	436a      	muls	r2, r5
 800acfc:	1881      	adds	r1, r0, r2
 800acfe:	2600      	movs	r6, #0
 800ad00:	54ce      	strb	r6, [r1, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800ad02:	3401      	adds	r4, #1
 800ad04:	1912      	adds	r2, r2, r4
 800ad06:	1810      	adds	r0, r2, r0
 800ad08:	f7f8 ffae 	bl	8003c68 <IsModuleParameter>
 800ad0c:	4681      	mov	r9, r0
								if(temp == 0){ // Parameter does not exist
 800ad0e:	42b0      	cmp	r0, r6
 800ad10:	d106      	bne.n	800ad20 <PxMessagingTask+0xcc8>
									SendMessageToModule(src,
 800ad12:	2201      	movs	r2, #1
 800ad14:	211f      	movs	r1, #31
 800ad16:	9804      	ldr	r0, [sp, #16]
 800ad18:	f7fe ff00 	bl	8009b1c <SendMessageToModule>
 800ad1c:	f7ff f9ea 	bl	800a0f4 <PxMessagingTask+0x9c>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ad20:	3801      	subs	r0, #1
 800ad22:	4a7c      	ldr	r2, [pc, #496]	; (800af14 <PxMessagingTask+0xebc>)
 800ad24:	210c      	movs	r1, #12
 800ad26:	4341      	muls	r1, r0
 800ad28:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800ad2a:	1852      	adds	r2, r2, r1
 800ad2c:	7912      	ldrb	r2, [r2, #4]
 800ad2e:	4978      	ldr	r1, [pc, #480]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad30:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800ad32:	3a01      	subs	r2, #1
 800ad34:	b2d1      	uxtb	r1, r2
 800ad36:	2907      	cmp	r1, #7
 800ad38:	d901      	bls.n	800ad3e <PxMessagingTask+0xce6>
 800ad3a:	f7ff f9db 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	0092      	lsls	r2, r2, #2
 800ad42:	4975      	ldr	r1, [pc, #468]	; (800af18 <PxMessagingTask+0xec0>)
 800ad44:	588a      	ldr	r2, [r1, r2]
 800ad46:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	4b71      	ldr	r3, [pc, #452]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad4c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad4e:	2202      	movs	r2, #2
 800ad50:	211f      	movs	r1, #31
 800ad52:	9804      	ldr	r0, [sp, #16]
 800ad54:	f7fe fee2 	bl	8009b1c <SendMessageToModule>
											break;
 800ad58:	f7ff f9cc 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	4b6c      	ldr	r3, [pc, #432]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad60:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad62:	2202      	movs	r2, #2
 800ad64:	211f      	movs	r1, #31
 800ad66:	9804      	ldr	r0, [sp, #16]
 800ad68:	f7fe fed8 	bl	8009b1c <SendMessageToModule>
											break;
 800ad6c:	f7ff f9c2 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ad70:	8819      	ldrh	r1, [r3, #0]
 800ad72:	4a67      	ldr	r2, [pc, #412]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad74:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	0a1b      	lsrs	r3, r3, #8
 800ad7a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	211f      	movs	r1, #31
 800ad80:	9804      	ldr	r0, [sp, #16]
 800ad82:	f7fe fecb 	bl	8009b1c <SendMessageToModule>
											break;
 800ad86:	f7ff f9b5 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ad8a:	8819      	ldrh	r1, [r3, #0]
 800ad8c:	4a60      	ldr	r2, [pc, #384]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad8e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	b21b      	sxth	r3, r3
 800ad94:	121b      	asrs	r3, r3, #8
 800ad96:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ad98:	2203      	movs	r2, #3
 800ad9a:	211f      	movs	r1, #31
 800ad9c:	9804      	ldr	r0, [sp, #16]
 800ad9e:	f7fe febd 	bl	8009b1c <SendMessageToModule>
											break;
 800ada2:	f7ff f9a7 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ada6:	6819      	ldr	r1, [r3, #0]
 800ada8:	4a59      	ldr	r2, [pc, #356]	; (800af10 <PxMessagingTask+0xeb8>)
 800adaa:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	0a09      	lsrs	r1, r1, #8
 800adb0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	0c09      	lsrs	r1, r1, #16
 800adb6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	0e1b      	lsrs	r3, r3, #24
 800adbc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800adbe:	2205      	movs	r2, #5
 800adc0:	211f      	movs	r1, #31
 800adc2:	9804      	ldr	r0, [sp, #16]
 800adc4:	f7fe feaa 	bl	8009b1c <SendMessageToModule>
											break;
 800adc8:	f7ff f994 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	4a50      	ldr	r2, [pc, #320]	; (800af10 <PxMessagingTask+0xeb8>)
 800add0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800add2:	6819      	ldr	r1, [r3, #0]
 800add4:	1209      	asrs	r1, r1, #8
 800add6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800add8:	6819      	ldr	r1, [r3, #0]
 800adda:	1409      	asrs	r1, r1, #16
 800addc:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	0e1b      	lsrs	r3, r3, #24
 800ade2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ade4:	2205      	movs	r2, #5
 800ade6:	211f      	movs	r1, #31
 800ade8:	9804      	ldr	r0, [sp, #16]
 800adea:	f7fe fe97 	bl	8009b1c <SendMessageToModule>
											break;
 800adee:	f7ff f981 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800adf2:	7819      	ldrb	r1, [r3, #0]
 800adf4:	4a46      	ldr	r2, [pc, #280]	; (800af10 <PxMessagingTask+0xeb8>)
 800adf6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800adf8:	7859      	ldrb	r1, [r3, #1]
 800adfa:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800adfc:	7899      	ldrb	r1, [r3, #2]
 800adfe:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ae00:	78db      	ldrb	r3, [r3, #3]
 800ae02:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae04:	2209      	movs	r2, #9
 800ae06:	211f      	movs	r1, #31
 800ae08:	9804      	ldr	r0, [sp, #16]
 800ae0a:	f7fe fe87 	bl	8009b1c <SendMessageToModule>
											break;
 800ae0e:	f7ff f971 	bl	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ae12:	2a02      	cmp	r2, #2
 800ae14:	d801      	bhi.n	800ae1a <PxMessagingTask+0xdc2>
 800ae16:	f7ff f96d 	bl	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ae1a:	3a04      	subs	r2, #4
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	4b3f      	ldr	r3, [pc, #252]	; (800af1c <PxMessagingTask+0xec4>)
 800ae20:	58d1      	ldr	r1, [r2, r3]
 800ae22:	220f      	movs	r2, #15
 800ae24:	400a      	ands	r2, r1
 800ae26:	4b3a      	ldr	r3, [pc, #232]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae28:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ae2a:	d106      	bne.n	800ae3a <PxMessagingTask+0xde2>
									SendMessageToModule(src,
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	211f      	movs	r1, #31
 800ae30:	9804      	ldr	r0, [sp, #16]
 800ae32:	f7fe fe73 	bl	8009b1c <SendMessageToModule>
 800ae36:	f7ff f95d 	bl	800a0f4 <PxMessagingTask+0x9c>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ae3a:	0c09      	lsrs	r1, r1, #16
 800ae3c:	2380      	movs	r3, #128	; 0x80
 800ae3e:	059b      	lsls	r3, r3, #22
 800ae40:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800ae42:	3a01      	subs	r2, #1
 800ae44:	b2d0      	uxtb	r0, r2
 800ae46:	2807      	cmp	r0, #7
 800ae48:	d901      	bls.n	800ae4e <PxMessagingTask+0xdf6>
 800ae4a:	f7ff f953 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	4833      	ldr	r0, [pc, #204]	; (800af20 <PxMessagingTask+0xec8>)
 800ae54:	5882      	ldr	r2, [r0, r2]
 800ae56:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae5c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae5e:	2202      	movs	r2, #2
 800ae60:	211f      	movs	r1, #31
 800ae62:	9804      	ldr	r0, [sp, #16]
 800ae64:	f7fe fe5a 	bl	8009b1c <SendMessageToModule>
											break;
 800ae68:	f7ff f944 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	4b28      	ldr	r3, [pc, #160]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae70:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae72:	2202      	movs	r2, #2
 800ae74:	211f      	movs	r1, #31
 800ae76:	9804      	ldr	r0, [sp, #16]
 800ae78:	f7fe fe50 	bl	8009b1c <SendMessageToModule>
											break;
 800ae7c:	f7ff f93a 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ae80:	8819      	ldrh	r1, [r3, #0]
 800ae82:	4a23      	ldr	r2, [pc, #140]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae84:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	211f      	movs	r1, #31
 800ae90:	9804      	ldr	r0, [sp, #16]
 800ae92:	f7fe fe43 	bl	8009b1c <SendMessageToModule>
											break;
 800ae96:	f7ff f92d 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae9a:	8819      	ldrh	r1, [r3, #0]
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae9e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b21b      	sxth	r3, r3
 800aea4:	121b      	asrs	r3, r3, #8
 800aea6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800aea8:	2203      	movs	r2, #3
 800aeaa:	211f      	movs	r1, #31
 800aeac:	9804      	ldr	r0, [sp, #16]
 800aeae:	f7fe fe35 	bl	8009b1c <SendMessageToModule>
											break;
 800aeb2:	f7ff f91f 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800aeb6:	6819      	ldr	r1, [r3, #0]
 800aeb8:	4a15      	ldr	r2, [pc, #84]	; (800af10 <PxMessagingTask+0xeb8>)
 800aeba:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800aebc:	6819      	ldr	r1, [r3, #0]
 800aebe:	0a09      	lsrs	r1, r1, #8
 800aec0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800aec2:	6819      	ldr	r1, [r3, #0]
 800aec4:	0c09      	lsrs	r1, r1, #16
 800aec6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	0e1b      	lsrs	r3, r3, #24
 800aecc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aece:	2205      	movs	r2, #5
 800aed0:	211f      	movs	r1, #31
 800aed2:	9804      	ldr	r0, [sp, #16]
 800aed4:	f7fe fe22 	bl	8009b1c <SendMessageToModule>
											break;
 800aed8:	f7ff f90c 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aedc:	6819      	ldr	r1, [r3, #0]
 800aede:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <PxMessagingTask+0xeb8>)
 800aee0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	1209      	asrs	r1, r1, #8
 800aee6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	1409      	asrs	r1, r1, #16
 800aeec:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	0e1b      	lsrs	r3, r3, #24
 800aef2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aef4:	2205      	movs	r2, #5
 800aef6:	211f      	movs	r1, #31
 800aef8:	9804      	ldr	r0, [sp, #16]
 800aefa:	f7fe fe0f 	bl	8009b1c <SendMessageToModule>
											break;
 800aefe:	f7ff f8f9 	bl	800a0f4 <PxMessagingTask+0x9c>
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	20000d30 	.word	0x20000d30
 800af08:	20001066 	.word	0x20001066
 800af0c:	0801c6a0 	.word	0x0801c6a0
 800af10:	20000f28 	.word	0x20000f28
 800af14:	20000090 	.word	0x20000090
 800af18:	0801c6c0 	.word	0x0801c6c0
 800af1c:	20006d28 	.word	0x20006d28
 800af20:	0801c6e0 	.word	0x0801c6e0
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	4bd7      	ldr	r3, [pc, #860]	; (800b284 <PxMessagingTask+0x122c>)
 800af28:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800af2a:	4ad7      	ldr	r2, [pc, #860]	; (800b288 <PxMessagingTask+0x1230>)
 800af2c:	188a      	adds	r2, r1, r2
 800af2e:	7812      	ldrb	r2, [r2, #0]
 800af30:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800af32:	4ad6      	ldr	r2, [pc, #856]	; (800b28c <PxMessagingTask+0x1234>)
 800af34:	188a      	adds	r2, r1, r2
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800af3a:	4ad5      	ldr	r2, [pc, #852]	; (800b290 <PxMessagingTask+0x1238>)
 800af3c:	4694      	mov	ip, r2
 800af3e:	4461      	add	r1, ip
 800af40:	780a      	ldrb	r2, [r1, #0]
 800af42:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800af44:	2209      	movs	r2, #9
 800af46:	211f      	movs	r1, #31
 800af48:	9804      	ldr	r0, [sp, #16]
 800af4a:	f7fe fde7 	bl	8009b1c <SendMessageToModule>
											break;
 800af4e:	f7ff f8d1 	bl	800a0f4 <PxMessagingTask+0x9c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800af52:	4bd0      	ldr	r3, [pc, #832]	; (800b294 <PxMessagingTask+0x123c>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2002      	movs	r0, #2
 800af5a:	4240      	negs	r0, r0
 800af5c:	17c1      	asrs	r1, r0, #31
 800af5e:	1880      	adds	r0, r0, r2
 800af60:	4159      	adcs	r1, r3
 800af62:	2900      	cmp	r1, #0
 800af64:	d014      	beq.n	800af90 <PxMessagingTask+0xf38>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 800af66:	0011      	movs	r1, r2
 800af68:	4319      	orrs	r1, r3
 800af6a:	d125      	bne.n	800afb8 <PxMessagingTask+0xf60>
								switch(remoteBuffer) // Requested format
 800af6c:	2601      	movs	r6, #1
 800af6e:	4276      	negs	r6, r6
 800af70:	17f7      	asrs	r7, r6, #31
 800af72:	18b6      	adds	r6, r6, r2
 800af74:	415f      	adcs	r7, r3
 800af76:	2207      	movs	r2, #7
 800af78:	2300      	movs	r3, #0
 800af7a:	0030      	movs	r0, r6
 800af7c:	0039      	movs	r1, r7
 800af7e:	f7f5 fad5 	bl	800052c <__aeabi_ulcmp>
 800af82:	3001      	adds	r0, #1
 800af84:	2801      	cmp	r0, #1
 800af86:	d817      	bhi.n	800afb8 <PxMessagingTask+0xf60>
 800af88:	00b6      	lsls	r6, r6, #2
 800af8a:	4bc3      	ldr	r3, [pc, #780]	; (800b298 <PxMessagingTask+0x1240>)
 800af8c:	599b      	ldr	r3, [r3, r6]
 800af8e:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800af90:	2900      	cmp	r1, #0
 800af92:	d101      	bne.n	800af98 <PxMessagingTask+0xf40>
 800af94:	2801      	cmp	r0, #1
 800af96:	d8e6      	bhi.n	800af66 <PxMessagingTask+0xf0e>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800af98:	2238      	movs	r2, #56	; 0x38
 800af9a:	436a      	muls	r2, r5
 800af9c:	4bbf      	ldr	r3, [pc, #764]	; (800b29c <PxMessagingTask+0x1244>)
 800af9e:	189b      	adds	r3, r3, r2
 800afa0:	5d1b      	ldrb	r3, [r3, r4]
 800afa2:	4abf      	ldr	r2, [pc, #764]	; (800b2a0 <PxMessagingTask+0x1248>)
 800afa4:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d806      	bhi.n	800afb8 <PxMessagingTask+0xf60>
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4abd      	ldr	r2, [pc, #756]	; (800b2a4 <PxMessagingTask+0x124c>)
 800afae:	58d3      	ldr	r3, [r2, r3]
 800afb0:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800afb2:	4bbd      	ldr	r3, [pc, #756]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afb4:	2210      	movs	r2, #16
 800afb6:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800afb8:	4bbb      	ldr	r3, [pc, #748]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d101      	bne.n	800afc4 <PxMessagingTask+0xf6c>
 800afc0:	f7ff f898 	bl	800a0f4 <PxMessagingTask+0x9c>
								responseStatus =BOS_OK;
 800afc4:	4bb8      	ldr	r3, [pc, #736]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	f7ff f893 	bl	800a0f4 <PxMessagingTask+0x9c>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800afce:	3401      	adds	r4, #1
 800afd0:	2238      	movs	r2, #56	; 0x38
 800afd2:	436a      	muls	r2, r5
 800afd4:	4bb1      	ldr	r3, [pc, #708]	; (800b29c <PxMessagingTask+0x1244>)
 800afd6:	189b      	adds	r3, r3, r2
 800afd8:	5d1a      	ldrb	r2, [r3, r4]
 800afda:	4bae      	ldr	r3, [pc, #696]	; (800b294 <PxMessagingTask+0x123c>)
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	2200      	movs	r2, #0
 800afe0:	605a      	str	r2, [r3, #4]
										break;
 800afe2:	e7e9      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800afe4:	3401      	adds	r4, #1
 800afe6:	2238      	movs	r2, #56	; 0x38
 800afe8:	436a      	muls	r2, r5
 800afea:	4bac      	ldr	r3, [pc, #688]	; (800b29c <PxMessagingTask+0x1244>)
 800afec:	189b      	adds	r3, r3, r2
 800afee:	571a      	ldrsb	r2, [r3, r4]
 800aff0:	17d1      	asrs	r1, r2, #31
 800aff2:	4ba8      	ldr	r3, [pc, #672]	; (800b294 <PxMessagingTask+0x123c>)
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	6059      	str	r1, [r3, #4]
										break;
 800aff8:	e7de      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800affa:	1c61      	adds	r1, r4, #1
 800affc:	2338      	movs	r3, #56	; 0x38
 800affe:	436b      	muls	r3, r5
 800b000:	4aa6      	ldr	r2, [pc, #664]	; (800b29c <PxMessagingTask+0x1244>)
 800b002:	18d2      	adds	r2, r2, r3
 800b004:	5c53      	ldrb	r3, [r2, r1]
 800b006:	3402      	adds	r4, #2
 800b008:	5d12      	ldrb	r2, [r2, r4]
 800b00a:	0212      	lsls	r2, r2, #8
 800b00c:	189b      	adds	r3, r3, r2
 800b00e:	17d9      	asrs	r1, r3, #31
 800b010:	4aa0      	ldr	r2, [pc, #640]	; (800b294 <PxMessagingTask+0x123c>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	6051      	str	r1, [r2, #4]
										break;
 800b016:	e7cf      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b018:	1c61      	adds	r1, r4, #1
 800b01a:	2338      	movs	r3, #56	; 0x38
 800b01c:	436b      	muls	r3, r5
 800b01e:	4a9f      	ldr	r2, [pc, #636]	; (800b29c <PxMessagingTask+0x1244>)
 800b020:	18d2      	adds	r2, r2, r3
 800b022:	5c53      	ldrb	r3, [r2, r1]
 800b024:	3402      	adds	r4, #2
 800b026:	5d12      	ldrb	r2, [r2, r4]
 800b028:	0212      	lsls	r2, r2, #8
 800b02a:	189b      	adds	r3, r3, r2
 800b02c:	17d9      	asrs	r1, r3, #31
 800b02e:	4a99      	ldr	r2, [pc, #612]	; (800b294 <PxMessagingTask+0x123c>)
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	6051      	str	r1, [r2, #4]
										break;
 800b034:	e7c0      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b036:	1c61      	adds	r1, r4, #1
 800b038:	2338      	movs	r3, #56	; 0x38
 800b03a:	436b      	muls	r3, r5
 800b03c:	4a97      	ldr	r2, [pc, #604]	; (800b29c <PxMessagingTask+0x1244>)
 800b03e:	18d2      	adds	r2, r2, r3
 800b040:	5c53      	ldrb	r3, [r2, r1]
 800b042:	1ca1      	adds	r1, r4, #2
 800b044:	5c51      	ldrb	r1, [r2, r1]
 800b046:	0209      	lsls	r1, r1, #8
 800b048:	185b      	adds	r3, r3, r1
 800b04a:	1ce1      	adds	r1, r4, #3
 800b04c:	5c51      	ldrb	r1, [r2, r1]
 800b04e:	0409      	lsls	r1, r1, #16
 800b050:	185b      	adds	r3, r3, r1
 800b052:	3404      	adds	r4, #4
 800b054:	5d12      	ldrb	r2, [r2, r4]
 800b056:	0612      	lsls	r2, r2, #24
 800b058:	189b      	adds	r3, r3, r2
 800b05a:	4a8e      	ldr	r2, [pc, #568]	; (800b294 <PxMessagingTask+0x123c>)
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	6053      	str	r3, [r2, #4]
										break;
 800b062:	e7a9      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b064:	1c61      	adds	r1, r4, #1
 800b066:	2338      	movs	r3, #56	; 0x38
 800b068:	436b      	muls	r3, r5
 800b06a:	4a8c      	ldr	r2, [pc, #560]	; (800b29c <PxMessagingTask+0x1244>)
 800b06c:	18d2      	adds	r2, r2, r3
 800b06e:	5c53      	ldrb	r3, [r2, r1]
 800b070:	1ca1      	adds	r1, r4, #2
 800b072:	5c51      	ldrb	r1, [r2, r1]
 800b074:	0209      	lsls	r1, r1, #8
 800b076:	185b      	adds	r3, r3, r1
 800b078:	1ce1      	adds	r1, r4, #3
 800b07a:	5c51      	ldrb	r1, [r2, r1]
 800b07c:	0409      	lsls	r1, r1, #16
 800b07e:	185b      	adds	r3, r3, r1
 800b080:	3404      	adds	r4, #4
 800b082:	5d12      	ldrb	r2, [r2, r4]
 800b084:	0612      	lsls	r2, r2, #24
 800b086:	189b      	adds	r3, r3, r2
 800b088:	17d9      	asrs	r1, r3, #31
 800b08a:	4a82      	ldr	r2, [pc, #520]	; (800b294 <PxMessagingTask+0x123c>)
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	6051      	str	r1, [r2, #4]
										break;
 800b090:	e792      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b092:	1c61      	adds	r1, r4, #1
 800b094:	2338      	movs	r3, #56	; 0x38
 800b096:	436b      	muls	r3, r5
 800b098:	4a80      	ldr	r2, [pc, #512]	; (800b29c <PxMessagingTask+0x1244>)
 800b09a:	18d2      	adds	r2, r2, r3
 800b09c:	5c53      	ldrb	r3, [r2, r1]
 800b09e:	1ca1      	adds	r1, r4, #2
 800b0a0:	5c51      	ldrb	r1, [r2, r1]
 800b0a2:	0209      	lsls	r1, r1, #8
 800b0a4:	185b      	adds	r3, r3, r1
 800b0a6:	1ce1      	adds	r1, r4, #3
 800b0a8:	5c51      	ldrb	r1, [r2, r1]
 800b0aa:	0409      	lsls	r1, r1, #16
 800b0ac:	185b      	adds	r3, r3, r1
 800b0ae:	3404      	adds	r4, #4
 800b0b0:	5d12      	ldrb	r2, [r2, r4]
 800b0b2:	0612      	lsls	r2, r2, #24
 800b0b4:	189b      	adds	r3, r3, r2
 800b0b6:	4a77      	ldr	r2, [pc, #476]	; (800b294 <PxMessagingTask+0x123c>)
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6053      	str	r3, [r2, #4]
										break;
 800b0be:	e77b      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =cMessage[port - 1][shift];
 800b0c0:	2238      	movs	r2, #56	; 0x38
 800b0c2:	436a      	muls	r2, r5
 800b0c4:	4b75      	ldr	r3, [pc, #468]	; (800b29c <PxMessagingTask+0x1244>)
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	5d1a      	ldrb	r2, [r3, r4]
 800b0ca:	4b72      	ldr	r3, [pc, #456]	; (800b294 <PxMessagingTask+0x123c>)
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
										break;
 800b0d2:	e771      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 800b0d4:	2238      	movs	r2, #56	; 0x38
 800b0d6:	436a      	muls	r2, r5
 800b0d8:	4b70      	ldr	r3, [pc, #448]	; (800b29c <PxMessagingTask+0x1244>)
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	571a      	ldrsb	r2, [r3, r4]
 800b0de:	17d1      	asrs	r1, r2, #31
 800b0e0:	4b6c      	ldr	r3, [pc, #432]	; (800b294 <PxMessagingTask+0x123c>)
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	6059      	str	r1, [r3, #4]
										break;
 800b0e6:	e767      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 800b0e8:	2338      	movs	r3, #56	; 0x38
 800b0ea:	436b      	muls	r3, r5
 800b0ec:	4a6b      	ldr	r2, [pc, #428]	; (800b29c <PxMessagingTask+0x1244>)
 800b0ee:	18d2      	adds	r2, r2, r3
 800b0f0:	5d13      	ldrb	r3, [r2, r4]
 800b0f2:	3401      	adds	r4, #1
 800b0f4:	5d12      	ldrb	r2, [r2, r4]
 800b0f6:	0212      	lsls	r2, r2, #8
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	17d9      	asrs	r1, r3, #31
 800b0fc:	4a65      	ldr	r2, [pc, #404]	; (800b294 <PxMessagingTask+0x123c>)
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	6051      	str	r1, [r2, #4]
										break;
 800b102:	e759      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 800b104:	2338      	movs	r3, #56	; 0x38
 800b106:	436b      	muls	r3, r5
 800b108:	4a64      	ldr	r2, [pc, #400]	; (800b29c <PxMessagingTask+0x1244>)
 800b10a:	18d2      	adds	r2, r2, r3
 800b10c:	5d13      	ldrb	r3, [r2, r4]
 800b10e:	3401      	adds	r4, #1
 800b110:	5d12      	ldrb	r2, [r2, r4]
 800b112:	0212      	lsls	r2, r2, #8
 800b114:	189b      	adds	r3, r3, r2
 800b116:	17d9      	asrs	r1, r3, #31
 800b118:	4a5e      	ldr	r2, [pc, #376]	; (800b294 <PxMessagingTask+0x123c>)
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	6051      	str	r1, [r2, #4]
										break;
 800b11e:	e74b      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b120:	2338      	movs	r3, #56	; 0x38
 800b122:	436b      	muls	r3, r5
 800b124:	4a5d      	ldr	r2, [pc, #372]	; (800b29c <PxMessagingTask+0x1244>)
 800b126:	18d2      	adds	r2, r2, r3
 800b128:	5d13      	ldrb	r3, [r2, r4]
 800b12a:	1c61      	adds	r1, r4, #1
 800b12c:	5c51      	ldrb	r1, [r2, r1]
 800b12e:	0209      	lsls	r1, r1, #8
 800b130:	185b      	adds	r3, r3, r1
 800b132:	1ca1      	adds	r1, r4, #2
 800b134:	5c51      	ldrb	r1, [r2, r1]
 800b136:	0409      	lsls	r1, r1, #16
 800b138:	185b      	adds	r3, r3, r1
 800b13a:	3403      	adds	r4, #3
 800b13c:	5d12      	ldrb	r2, [r2, r4]
 800b13e:	0612      	lsls	r2, r2, #24
 800b140:	189b      	adds	r3, r3, r2
 800b142:	4a54      	ldr	r2, [pc, #336]	; (800b294 <PxMessagingTask+0x123c>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	2300      	movs	r3, #0
 800b148:	6053      	str	r3, [r2, #4]
										break;
 800b14a:	e735      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 800b14c:	2338      	movs	r3, #56	; 0x38
 800b14e:	436b      	muls	r3, r5
 800b150:	4a52      	ldr	r2, [pc, #328]	; (800b29c <PxMessagingTask+0x1244>)
 800b152:	18d2      	adds	r2, r2, r3
 800b154:	5d13      	ldrb	r3, [r2, r4]
 800b156:	1c61      	adds	r1, r4, #1
 800b158:	5c51      	ldrb	r1, [r2, r1]
 800b15a:	0209      	lsls	r1, r1, #8
 800b15c:	185b      	adds	r3, r3, r1
 800b15e:	1ca1      	adds	r1, r4, #2
 800b160:	5c51      	ldrb	r1, [r2, r1]
 800b162:	0409      	lsls	r1, r1, #16
 800b164:	185b      	adds	r3, r3, r1
 800b166:	3403      	adds	r4, #3
 800b168:	5d12      	ldrb	r2, [r2, r4]
 800b16a:	0612      	lsls	r2, r2, #24
 800b16c:	189b      	adds	r3, r3, r2
 800b16e:	17d9      	asrs	r1, r3, #31
 800b170:	4a48      	ldr	r2, [pc, #288]	; (800b294 <PxMessagingTask+0x123c>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	6051      	str	r1, [r2, #4]
										break;
 800b176:	e71f      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b178:	2338      	movs	r3, #56	; 0x38
 800b17a:	436b      	muls	r3, r5
 800b17c:	4a47      	ldr	r2, [pc, #284]	; (800b29c <PxMessagingTask+0x1244>)
 800b17e:	18d2      	adds	r2, r2, r3
 800b180:	5d13      	ldrb	r3, [r2, r4]
 800b182:	1c61      	adds	r1, r4, #1
 800b184:	5c51      	ldrb	r1, [r2, r1]
 800b186:	0209      	lsls	r1, r1, #8
 800b188:	185b      	adds	r3, r3, r1
 800b18a:	1ca1      	adds	r1, r4, #2
 800b18c:	5c51      	ldrb	r1, [r2, r1]
 800b18e:	0409      	lsls	r1, r1, #16
 800b190:	185b      	adds	r3, r3, r1
 800b192:	3403      	adds	r4, #3
 800b194:	5d12      	ldrb	r2, [r2, r4]
 800b196:	0612      	lsls	r2, r2, #24
 800b198:	189b      	adds	r3, r3, r2
 800b19a:	4a3e      	ldr	r2, [pc, #248]	; (800b294 <PxMessagingTask+0x123c>)
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6053      	str	r3, [r2, #4]
										break;
 800b1a2:	e709      	b.n	800afb8 <PxMessagingTask+0xf60>
							responseStatus =BOS_OK; // Initialize response
 800b1a4:	4b40      	ldr	r3, [pc, #256]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b1aa:	00eb      	lsls	r3, r5, #3
 800b1ac:	1b5b      	subs	r3, r3, r5
 800b1ae:	00da      	lsls	r2, r3, #3
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <PxMessagingTask+0x1244>)
 800b1b2:	189b      	adds	r3, r3, r2
 800b1b4:	5d1e      	ldrb	r6, [r3, r4]
 800b1b6:	2e00      	cmp	r6, #0
 800b1b8:	d100      	bne.n	800b1bc <PxMessagingTask+0x1164>
 800b1ba:	e161      	b.n	800b480 <PxMessagingTask+0x1428>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b1bc:	2e1e      	cmp	r6, #30
 800b1be:	d900      	bls.n	800b1c2 <PxMessagingTask+0x116a>
 800b1c0:	e15a      	b.n	800b478 <PxMessagingTask+0x1420>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b1c2:	3e01      	subs	r6, #1
 800b1c4:	00b2      	lsls	r2, r6, #2
 800b1c6:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <PxMessagingTask+0x1254>)
 800b1c8:	58d2      	ldr	r2, [r2, r3]
 800b1ca:	0c13      	lsrs	r3, r2, #16
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	0589      	lsls	r1, r1, #22
 800b1d0:	468c      	mov	ip, r1
 800b1d2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b1d4:	1c61      	adds	r1, r4, #1
 800b1d6:	468a      	mov	sl, r1
 800b1d8:	2038      	movs	r0, #56	; 0x38
 800b1da:	4368      	muls	r0, r5
 800b1dc:	492f      	ldr	r1, [pc, #188]	; (800b29c <PxMessagingTask+0x1244>)
 800b1de:	1809      	adds	r1, r1, r0
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	5c0f      	ldrb	r7, [r1, r0]
 800b1e4:	1e79      	subs	r1, r7, #1
 800b1e6:	b2c8      	uxtb	r0, r1
 800b1e8:	2807      	cmp	r0, #7
 800b1ea:	d81b      	bhi.n	800b224 <PxMessagingTask+0x11cc>
 800b1ec:	b2c9      	uxtb	r1, r1
 800b1ee:	0089      	lsls	r1, r1, #2
 800b1f0:	482f      	ldr	r0, [pc, #188]	; (800b2b0 <PxMessagingTask+0x1258>)
 800b1f2:	5841      	ldr	r1, [r0, r1]
 800b1f4:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b1f6:	0712      	lsls	r2, r2, #28
 800b1f8:	d109      	bne.n	800b20e <PxMessagingTask+0x11b6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	f009 fe40 	bl	8014e80 <malloc>
 800b200:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b202:	d03b      	beq.n	800b27c <PxMessagingTask+0x1224>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b204:	0400      	lsls	r0, r0, #16
 800b206:	19c7      	adds	r7, r0, r7
 800b208:	00b6      	lsls	r6, r6, #2
 800b20a:	4a28      	ldr	r2, [pc, #160]	; (800b2ac <PxMessagingTask+0x1254>)
 800b20c:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b20e:	4a26      	ldr	r2, [pc, #152]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	2a12      	cmp	r2, #18
 800b214:	d006      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b216:	1ca2      	adds	r2, r4, #2
 800b218:	2038      	movs	r0, #56	; 0x38
 800b21a:	4368      	muls	r0, r5
 800b21c:	491f      	ldr	r1, [pc, #124]	; (800b29c <PxMessagingTask+0x1244>)
 800b21e:	1809      	adds	r1, r1, r0
 800b220:	5c8a      	ldrb	r2, [r1, r2]
 800b222:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b224:	2338      	movs	r3, #56	; 0x38
 800b226:	436b      	muls	r3, r5
 800b228:	4a1c      	ldr	r2, [pc, #112]	; (800b29c <PxMessagingTask+0x1244>)
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	5d1a      	ldrb	r2, [r3, r4]
 800b22e:	3a01      	subs	r2, #1
 800b230:	0090      	lsls	r0, r2, #2
 800b232:	491e      	ldr	r1, [pc, #120]	; (800b2ac <PxMessagingTask+0x1254>)
 800b234:	5841      	ldr	r1, [r0, r1]
 800b236:	200f      	movs	r0, #15
 800b238:	4008      	ands	r0, r1
 800b23a:	4654      	mov	r4, sl
 800b23c:	5d1b      	ldrb	r3, [r3, r4]
 800b23e:	4298      	cmp	r0, r3
 800b240:	d009      	beq.n	800b256 <PxMessagingTask+0x11fe>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b242:	481c      	ldr	r0, [pc, #112]	; (800b2b4 <PxMessagingTask+0x125c>)
 800b244:	4684      	mov	ip, r0
 800b246:	4463      	add	r3, ip
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	400b      	ands	r3, r1
 800b24c:	4917      	ldr	r1, [pc, #92]	; (800b2ac <PxMessagingTask+0x1254>)
 800b24e:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b250:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b252:	2214      	movs	r2, #20
 800b254:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800b256:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <PxMessagingTask+0x1260>)
 800b258:	799b      	ldrb	r3, [r3, #6]
 800b25a:	2b60      	cmp	r3, #96	; 0x60
 800b25c:	d003      	beq.n	800b266 <PxMessagingTask+0x120e>
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d001      	beq.n	800b266 <PxMessagingTask+0x120e>
 800b262:	f7fe ff47 	bl	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =responseStatus;
 800b266:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <PxMessagingTask+0x122c>)
 800b26c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b26e:	2201      	movs	r2, #1
 800b270:	2121      	movs	r1, #33	; 0x21
 800b272:	9804      	ldr	r0, [sp, #16]
 800b274:	f7fe fc52 	bl	8009b1c <SendMessageToModule>
 800b278:	f7fe ff3c 	bl	800a0f4 <PxMessagingTask+0x9c>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b27c:	4a0a      	ldr	r2, [pc, #40]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b27e:	2112      	movs	r1, #18
 800b280:	7011      	strb	r1, [r2, #0]
 800b282:	e7c4      	b.n	800b20e <PxMessagingTask+0x11b6>
 800b284:	20000f28 	.word	0x20000f28
 800b288:	20000001 	.word	0x20000001
 800b28c:	20000002 	.word	0x20000002
 800b290:	20000003 	.word	0x20000003
 800b294:	200010f0 	.word	0x200010f0
 800b298:	0801c700 	.word	0x0801c700
 800b29c:	20000d30 	.word	0x20000d30
 800b2a0:	20000070 	.word	0x20000070
 800b2a4:	0801c720 	.word	0x0801c720
 800b2a8:	200010f8 	.word	0x200010f8
 800b2ac:	20006d28 	.word	0x20006d28
 800b2b0:	0801c744 	.word	0x0801c744
 800b2b4:	0000fff0 	.word	0x0000fff0
 800b2b8:	20006da0 	.word	0x20006da0
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2bc:	0712      	lsls	r2, r2, #28
 800b2be:	d109      	bne.n	800b2d4 <PxMessagingTask+0x127c>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f009 fddd 	bl	8014e80 <malloc>
 800b2c6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2c8:	d010      	beq.n	800b2ec <PxMessagingTask+0x1294>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2ca:	0400      	lsls	r0, r0, #16
 800b2cc:	19c7      	adds	r7, r0, r7
 800b2ce:	00b6      	lsls	r6, r6, #2
 800b2d0:	4ad7      	ldr	r2, [pc, #860]	; (800b630 <PxMessagingTask+0x15d8>)
 800b2d2:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b2d4:	4ad7      	ldr	r2, [pc, #860]	; (800b634 <PxMessagingTask+0x15dc>)
 800b2d6:	7812      	ldrb	r2, [r2, #0]
 800b2d8:	2a12      	cmp	r2, #18
 800b2da:	d0a3      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b2dc:	1ca2      	adds	r2, r4, #2
 800b2de:	2038      	movs	r0, #56	; 0x38
 800b2e0:	4368      	muls	r0, r5
 800b2e2:	49d5      	ldr	r1, [pc, #852]	; (800b638 <PxMessagingTask+0x15e0>)
 800b2e4:	1809      	adds	r1, r1, r0
 800b2e6:	568a      	ldrsb	r2, [r1, r2]
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e79b      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b2ec:	4ad1      	ldr	r2, [pc, #836]	; (800b634 <PxMessagingTask+0x15dc>)
 800b2ee:	2112      	movs	r1, #18
 800b2f0:	7011      	strb	r1, [r2, #0]
 800b2f2:	e7ef      	b.n	800b2d4 <PxMessagingTask+0x127c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2f4:	0712      	lsls	r2, r2, #28
 800b2f6:	d109      	bne.n	800b30c <PxMessagingTask+0x12b4>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b2f8:	2002      	movs	r0, #2
 800b2fa:	f009 fdc1 	bl	8014e80 <malloc>
 800b2fe:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b300:	d015      	beq.n	800b32e <PxMessagingTask+0x12d6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b302:	0400      	lsls	r0, r0, #16
 800b304:	19c7      	adds	r7, r0, r7
 800b306:	00b6      	lsls	r6, r6, #2
 800b308:	4ac9      	ldr	r2, [pc, #804]	; (800b630 <PxMessagingTask+0x15d8>)
 800b30a:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b30c:	4ac9      	ldr	r2, [pc, #804]	; (800b634 <PxMessagingTask+0x15dc>)
 800b30e:	7812      	ldrb	r2, [r2, #0]
 800b310:	2a12      	cmp	r2, #18
 800b312:	d087      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b314:	1ca2      	adds	r2, r4, #2
 800b316:	2138      	movs	r1, #56	; 0x38
 800b318:	4369      	muls	r1, r5
 800b31a:	48c7      	ldr	r0, [pc, #796]	; (800b638 <PxMessagingTask+0x15e0>)
 800b31c:	1841      	adds	r1, r0, r1
 800b31e:	5c88      	ldrb	r0, [r1, r2]
 800b320:	1ce2      	adds	r2, r4, #3
 800b322:	5c8a      	ldrb	r2, [r1, r2]
 800b324:	0212      	lsls	r2, r2, #8
 800b326:	1882      	adds	r2, r0, r2
 800b328:	b292      	uxth	r2, r2
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	e77a      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b32e:	4ac1      	ldr	r2, [pc, #772]	; (800b634 <PxMessagingTask+0x15dc>)
 800b330:	2112      	movs	r1, #18
 800b332:	7011      	strb	r1, [r2, #0]
 800b334:	e7ea      	b.n	800b30c <PxMessagingTask+0x12b4>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b336:	0712      	lsls	r2, r2, #28
 800b338:	d109      	bne.n	800b34e <PxMessagingTask+0x12f6>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b33a:	2002      	movs	r0, #2
 800b33c:	f009 fda0 	bl	8014e80 <malloc>
 800b340:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b342:	d016      	beq.n	800b372 <PxMessagingTask+0x131a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b344:	0400      	lsls	r0, r0, #16
 800b346:	19c7      	adds	r7, r0, r7
 800b348:	00b6      	lsls	r6, r6, #2
 800b34a:	4ab9      	ldr	r2, [pc, #740]	; (800b630 <PxMessagingTask+0x15d8>)
 800b34c:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b34e:	4ab9      	ldr	r2, [pc, #740]	; (800b634 <PxMessagingTask+0x15dc>)
 800b350:	7812      	ldrb	r2, [r2, #0]
 800b352:	2a12      	cmp	r2, #18
 800b354:	d100      	bne.n	800b358 <PxMessagingTask+0x1300>
 800b356:	e765      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b358:	1ca2      	adds	r2, r4, #2
 800b35a:	2138      	movs	r1, #56	; 0x38
 800b35c:	4369      	muls	r1, r5
 800b35e:	48b6      	ldr	r0, [pc, #728]	; (800b638 <PxMessagingTask+0x15e0>)
 800b360:	1841      	adds	r1, r0, r1
 800b362:	5c88      	ldrb	r0, [r1, r2]
 800b364:	1ce2      	adds	r2, r4, #3
 800b366:	5c8a      	ldrb	r2, [r1, r2]
 800b368:	0212      	lsls	r2, r2, #8
 800b36a:	1882      	adds	r2, r0, r2
 800b36c:	b212      	sxth	r2, r2
 800b36e:	801a      	strh	r2, [r3, #0]
 800b370:	e758      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b372:	4ab0      	ldr	r2, [pc, #704]	; (800b634 <PxMessagingTask+0x15dc>)
 800b374:	2112      	movs	r1, #18
 800b376:	7011      	strb	r1, [r2, #0]
 800b378:	e7e9      	b.n	800b34e <PxMessagingTask+0x12f6>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b37a:	0712      	lsls	r2, r2, #28
 800b37c:	d109      	bne.n	800b392 <PxMessagingTask+0x133a>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b37e:	2004      	movs	r0, #4
 800b380:	f009 fd7e 	bl	8014e80 <malloc>
 800b384:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b386:	d01d      	beq.n	800b3c4 <PxMessagingTask+0x136c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b388:	0400      	lsls	r0, r0, #16
 800b38a:	19c7      	adds	r7, r0, r7
 800b38c:	00b6      	lsls	r6, r6, #2
 800b38e:	4aa8      	ldr	r2, [pc, #672]	; (800b630 <PxMessagingTask+0x15d8>)
 800b390:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b392:	4aa8      	ldr	r2, [pc, #672]	; (800b634 <PxMessagingTask+0x15dc>)
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	2a12      	cmp	r2, #18
 800b398:	d100      	bne.n	800b39c <PxMessagingTask+0x1344>
 800b39a:	e743      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b39c:	1ca2      	adds	r2, r4, #2
 800b39e:	2138      	movs	r1, #56	; 0x38
 800b3a0:	4369      	muls	r1, r5
 800b3a2:	48a5      	ldr	r0, [pc, #660]	; (800b638 <PxMessagingTask+0x15e0>)
 800b3a4:	1841      	adds	r1, r0, r1
 800b3a6:	5c88      	ldrb	r0, [r1, r2]
 800b3a8:	1ce2      	adds	r2, r4, #3
 800b3aa:	5c8a      	ldrb	r2, [r1, r2]
 800b3ac:	0212      	lsls	r2, r2, #8
 800b3ae:	1880      	adds	r0, r0, r2
 800b3b0:	1d22      	adds	r2, r4, #4
 800b3b2:	5c8a      	ldrb	r2, [r1, r2]
 800b3b4:	0412      	lsls	r2, r2, #16
 800b3b6:	1882      	adds	r2, r0, r2
 800b3b8:	1d60      	adds	r0, r4, #5
 800b3ba:	5c09      	ldrb	r1, [r1, r0]
 800b3bc:	0609      	lsls	r1, r1, #24
 800b3be:	1852      	adds	r2, r2, r1
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e72f      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b3c4:	4a9b      	ldr	r2, [pc, #620]	; (800b634 <PxMessagingTask+0x15dc>)
 800b3c6:	2112      	movs	r1, #18
 800b3c8:	7011      	strb	r1, [r2, #0]
 800b3ca:	e7e2      	b.n	800b392 <PxMessagingTask+0x133a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b3cc:	0712      	lsls	r2, r2, #28
 800b3ce:	d109      	bne.n	800b3e4 <PxMessagingTask+0x138c>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b3d0:	2004      	movs	r0, #4
 800b3d2:	f009 fd55 	bl	8014e80 <malloc>
 800b3d6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b3d8:	d01d      	beq.n	800b416 <PxMessagingTask+0x13be>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b3da:	0400      	lsls	r0, r0, #16
 800b3dc:	19c7      	adds	r7, r0, r7
 800b3de:	00b6      	lsls	r6, r6, #2
 800b3e0:	4a93      	ldr	r2, [pc, #588]	; (800b630 <PxMessagingTask+0x15d8>)
 800b3e2:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b3e4:	4a93      	ldr	r2, [pc, #588]	; (800b634 <PxMessagingTask+0x15dc>)
 800b3e6:	7812      	ldrb	r2, [r2, #0]
 800b3e8:	2a12      	cmp	r2, #18
 800b3ea:	d100      	bne.n	800b3ee <PxMessagingTask+0x1396>
 800b3ec:	e71a      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b3ee:	1ca2      	adds	r2, r4, #2
 800b3f0:	2138      	movs	r1, #56	; 0x38
 800b3f2:	4369      	muls	r1, r5
 800b3f4:	4890      	ldr	r0, [pc, #576]	; (800b638 <PxMessagingTask+0x15e0>)
 800b3f6:	1841      	adds	r1, r0, r1
 800b3f8:	5c88      	ldrb	r0, [r1, r2]
 800b3fa:	1ce2      	adds	r2, r4, #3
 800b3fc:	5c8a      	ldrb	r2, [r1, r2]
 800b3fe:	0212      	lsls	r2, r2, #8
 800b400:	1880      	adds	r0, r0, r2
 800b402:	1d22      	adds	r2, r4, #4
 800b404:	5c8a      	ldrb	r2, [r1, r2]
 800b406:	0412      	lsls	r2, r2, #16
 800b408:	1882      	adds	r2, r0, r2
 800b40a:	1d60      	adds	r0, r4, #5
 800b40c:	5c09      	ldrb	r1, [r1, r0]
 800b40e:	0609      	lsls	r1, r1, #24
 800b410:	1852      	adds	r2, r2, r1
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e706      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b416:	4a87      	ldr	r2, [pc, #540]	; (800b634 <PxMessagingTask+0x15dc>)
 800b418:	2112      	movs	r1, #18
 800b41a:	7011      	strb	r1, [r2, #0]
 800b41c:	e7e2      	b.n	800b3e4 <PxMessagingTask+0x138c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b41e:	0712      	lsls	r2, r2, #28
 800b420:	d109      	bne.n	800b436 <PxMessagingTask+0x13de>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b422:	2004      	movs	r0, #4
 800b424:	f009 fd2c 	bl	8014e80 <malloc>
 800b428:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b42a:	d021      	beq.n	800b470 <PxMessagingTask+0x1418>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b42c:	0400      	lsls	r0, r0, #16
 800b42e:	19c7      	adds	r7, r0, r7
 800b430:	00b6      	lsls	r6, r6, #2
 800b432:	4a7f      	ldr	r2, [pc, #508]	; (800b630 <PxMessagingTask+0x15d8>)
 800b434:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 800b436:	4a7f      	ldr	r2, [pc, #508]	; (800b634 <PxMessagingTask+0x15dc>)
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	2a12      	cmp	r2, #18
 800b43c:	d100      	bne.n	800b440 <PxMessagingTask+0x13e8>
 800b43e:	e6f1      	b.n	800b224 <PxMessagingTask+0x11cc>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b440:	1ca2      	adds	r2, r4, #2
 800b442:	2138      	movs	r1, #56	; 0x38
 800b444:	4369      	muls	r1, r5
 800b446:	487c      	ldr	r0, [pc, #496]	; (800b638 <PxMessagingTask+0x15e0>)
 800b448:	1841      	adds	r1, r0, r1
 800b44a:	5c88      	ldrb	r0, [r1, r2]
 800b44c:	1ce2      	adds	r2, r4, #3
 800b44e:	5c8a      	ldrb	r2, [r1, r2]
 800b450:	0212      	lsls	r2, r2, #8
 800b452:	1880      	adds	r0, r0, r2
 800b454:	1d22      	adds	r2, r4, #4
 800b456:	5c8a      	ldrb	r2, [r1, r2]
 800b458:	0412      	lsls	r2, r2, #16
 800b45a:	1882      	adds	r2, r0, r2
 800b45c:	1d60      	adds	r0, r4, #5
 800b45e:	5c09      	ldrb	r1, [r1, r0]
 800b460:	0609      	lsls	r1, r1, #24
 800b462:	1852      	adds	r2, r2, r1
 800b464:	4975      	ldr	r1, [pc, #468]	; (800b63c <PxMessagingTask+0x15e4>)
 800b466:	600a      	str	r2, [r1, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e6d9      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b470:	4a70      	ldr	r2, [pc, #448]	; (800b634 <PxMessagingTask+0x15dc>)
 800b472:	2112      	movs	r1, #18
 800b474:	7011      	strb	r1, [r2, #0]
 800b476:	e7de      	b.n	800b436 <PxMessagingTask+0x13de>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b478:	4b6e      	ldr	r3, [pc, #440]	; (800b634 <PxMessagingTask+0x15dc>)
 800b47a:	2213      	movs	r2, #19
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	e6ea      	b.n	800b256 <PxMessagingTask+0x11fe>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b480:	1ca2      	adds	r2, r4, #2
 800b482:	2338      	movs	r3, #56	; 0x38
 800b484:	436b      	muls	r3, r5
 800b486:	496c      	ldr	r1, [pc, #432]	; (800b638 <PxMessagingTask+0x15e0>)
 800b488:	18cb      	adds	r3, r1, r3
 800b48a:	5c9e      	ldrb	r6, [r3, r2]
 800b48c:	0636      	lsls	r6, r6, #24
 800b48e:	1ce2      	adds	r2, r4, #3
 800b490:	5c9a      	ldrb	r2, [r3, r2]
 800b492:	0412      	lsls	r2, r2, #16
 800b494:	18b6      	adds	r6, r6, r2
 800b496:	1d22      	adds	r2, r4, #4
 800b498:	5c9a      	ldrb	r2, [r3, r2]
 800b49a:	0212      	lsls	r2, r2, #8
 800b49c:	18b6      	adds	r6, r6, r2
 800b49e:	1d62      	adds	r2, r4, #5
 800b4a0:	5c9b      	ldrb	r3, [r3, r2]
 800b4a2:	18f6      	adds	r6, r6, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b4a4:	23e0      	movs	r3, #224	; 0xe0
 800b4a6:	061b      	lsls	r3, r3, #24
 800b4a8:	18f2      	adds	r2, r6, r3
 800b4aa:	4b65      	ldr	r3, [pc, #404]	; (800b640 <PxMessagingTask+0x15e8>)
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d87c      	bhi.n	800b5aa <PxMessagingTask+0x1552>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b4b0:	1c63      	adds	r3, r4, #1
 800b4b2:	2138      	movs	r1, #56	; 0x38
 800b4b4:	4369      	muls	r1, r5
 800b4b6:	4a60      	ldr	r2, [pc, #384]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4b8:	1852      	adds	r2, r2, r1
 800b4ba:	5cd3      	ldrb	r3, [r2, r3]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	2a07      	cmp	r2, #7
 800b4c2:	d900      	bls.n	800b4c6 <PxMessagingTask+0x146e>
 800b4c4:	e6c7      	b.n	800b256 <PxMessagingTask+0x11fe>
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a5e      	ldr	r2, [pc, #376]	; (800b644 <PxMessagingTask+0x15ec>)
 800b4cc:	58d3      	ldr	r3, [r2, r3]
 800b4ce:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b4d0:	3406      	adds	r4, #6
 800b4d2:	2238      	movs	r2, #56	; 0x38
 800b4d4:	436a      	muls	r2, r5
 800b4d6:	4b58      	ldr	r3, [pc, #352]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4d8:	189b      	adds	r3, r3, r2
 800b4da:	5d1b      	ldrb	r3, [r3, r4]
 800b4dc:	7033      	strb	r3, [r6, #0]
											break;
 800b4de:	e6ba      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b4e0:	3406      	adds	r4, #6
 800b4e2:	2238      	movs	r2, #56	; 0x38
 800b4e4:	436a      	muls	r2, r5
 800b4e6:	4b54      	ldr	r3, [pc, #336]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4e8:	189b      	adds	r3, r3, r2
 800b4ea:	571b      	ldrsb	r3, [r3, r4]
 800b4ec:	7033      	strb	r3, [r6, #0]
											break;
 800b4ee:	e6b2      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b4f0:	1da1      	adds	r1, r4, #6
 800b4f2:	2338      	movs	r3, #56	; 0x38
 800b4f4:	436b      	muls	r3, r5
 800b4f6:	4a50      	ldr	r2, [pc, #320]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4f8:	18d2      	adds	r2, r2, r3
 800b4fa:	5c53      	ldrb	r3, [r2, r1]
 800b4fc:	3407      	adds	r4, #7
 800b4fe:	5d12      	ldrb	r2, [r2, r4]
 800b500:	0212      	lsls	r2, r2, #8
 800b502:	189b      	adds	r3, r3, r2
 800b504:	b29b      	uxth	r3, r3
 800b506:	8033      	strh	r3, [r6, #0]
											break;
 800b508:	e6a5      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b50a:	1da1      	adds	r1, r4, #6
 800b50c:	2338      	movs	r3, #56	; 0x38
 800b50e:	436b      	muls	r3, r5
 800b510:	4a49      	ldr	r2, [pc, #292]	; (800b638 <PxMessagingTask+0x15e0>)
 800b512:	18d2      	adds	r2, r2, r3
 800b514:	5c53      	ldrb	r3, [r2, r1]
 800b516:	3407      	adds	r4, #7
 800b518:	5d12      	ldrb	r2, [r2, r4]
 800b51a:	0212      	lsls	r2, r2, #8
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	b21b      	sxth	r3, r3
 800b520:	8033      	strh	r3, [r6, #0]
											break;
 800b522:	e698      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b524:	1da1      	adds	r1, r4, #6
 800b526:	2338      	movs	r3, #56	; 0x38
 800b528:	436b      	muls	r3, r5
 800b52a:	4a43      	ldr	r2, [pc, #268]	; (800b638 <PxMessagingTask+0x15e0>)
 800b52c:	18d2      	adds	r2, r2, r3
 800b52e:	5c53      	ldrb	r3, [r2, r1]
 800b530:	1de1      	adds	r1, r4, #7
 800b532:	5c51      	ldrb	r1, [r2, r1]
 800b534:	0209      	lsls	r1, r1, #8
 800b536:	185b      	adds	r3, r3, r1
 800b538:	0021      	movs	r1, r4
 800b53a:	3108      	adds	r1, #8
 800b53c:	5c51      	ldrb	r1, [r2, r1]
 800b53e:	0409      	lsls	r1, r1, #16
 800b540:	185b      	adds	r3, r3, r1
 800b542:	3409      	adds	r4, #9
 800b544:	5d12      	ldrb	r2, [r2, r4]
 800b546:	0612      	lsls	r2, r2, #24
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	6033      	str	r3, [r6, #0]
											break;
 800b54c:	e683      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b54e:	1da1      	adds	r1, r4, #6
 800b550:	2338      	movs	r3, #56	; 0x38
 800b552:	436b      	muls	r3, r5
 800b554:	4a38      	ldr	r2, [pc, #224]	; (800b638 <PxMessagingTask+0x15e0>)
 800b556:	18d2      	adds	r2, r2, r3
 800b558:	5c53      	ldrb	r3, [r2, r1]
 800b55a:	1de1      	adds	r1, r4, #7
 800b55c:	5c51      	ldrb	r1, [r2, r1]
 800b55e:	0209      	lsls	r1, r1, #8
 800b560:	185b      	adds	r3, r3, r1
 800b562:	0021      	movs	r1, r4
 800b564:	3108      	adds	r1, #8
 800b566:	5c51      	ldrb	r1, [r2, r1]
 800b568:	0409      	lsls	r1, r1, #16
 800b56a:	185b      	adds	r3, r3, r1
 800b56c:	3409      	adds	r4, #9
 800b56e:	5d12      	ldrb	r2, [r2, r4]
 800b570:	0612      	lsls	r2, r2, #24
 800b572:	189b      	adds	r3, r3, r2
 800b574:	6033      	str	r3, [r6, #0]
											break;
 800b576:	e66e      	b.n	800b256 <PxMessagingTask+0x11fe>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b578:	1da1      	adds	r1, r4, #6
 800b57a:	2338      	movs	r3, #56	; 0x38
 800b57c:	436b      	muls	r3, r5
 800b57e:	4a2e      	ldr	r2, [pc, #184]	; (800b638 <PxMessagingTask+0x15e0>)
 800b580:	18d2      	adds	r2, r2, r3
 800b582:	5c53      	ldrb	r3, [r2, r1]
 800b584:	1de1      	adds	r1, r4, #7
 800b586:	5c51      	ldrb	r1, [r2, r1]
 800b588:	0209      	lsls	r1, r1, #8
 800b58a:	185b      	adds	r3, r3, r1
 800b58c:	0021      	movs	r1, r4
 800b58e:	3108      	adds	r1, #8
 800b590:	5c51      	ldrb	r1, [r2, r1]
 800b592:	0409      	lsls	r1, r1, #16
 800b594:	185b      	adds	r3, r3, r1
 800b596:	3409      	adds	r4, #9
 800b598:	5d12      	ldrb	r2, [r2, r4]
 800b59a:	0612      	lsls	r2, r2, #24
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	4a27      	ldr	r2, [pc, #156]	; (800b63c <PxMessagingTask+0x15e4>)
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b5a6:	6033      	str	r3, [r6, #0]
											break;
 800b5a8:	e655      	b.n	800b256 <PxMessagingTask+0x11fe>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b5aa:	4a27      	ldr	r2, [pc, #156]	; (800b648 <PxMessagingTask+0x15f0>)
 800b5ac:	23f8      	movs	r3, #248	; 0xf8
 800b5ae:	061b      	lsls	r3, r3, #24
 800b5b0:	18f3      	adds	r3, r6, r3
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d900      	bls.n	800b5b8 <PxMessagingTask+0x1560>
 800b5b6:	e0c2      	b.n	800b73e <PxMessagingTask+0x16e6>
									HAL_FLASH_Unlock();
 800b5b8:	f007 fc9a 	bl	8012ef0 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b5bc:	4653      	mov	r3, sl
 800b5be:	2b22      	cmp	r3, #34	; 0x22
 800b5c0:	d111      	bne.n	800b5e6 <PxMessagingTask+0x158e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress =temp32;
 800b5c6:	9612      	str	r6, [sp, #72]	; 0x48
										erase.NbPages =1;
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	9313      	str	r3, [sp, #76]	; 0x4c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b5cc:	a910      	add	r1, sp, #64	; 0x40
 800b5ce:	a811      	add	r0, sp, #68	; 0x44
 800b5d0:	f007 fd4e 	bl	8013070 <HAL_FLASHEx_Erase>
 800b5d4:	9008      	str	r0, [sp, #32]
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d102      	bne.n	800b5e0 <PxMessagingTask+0x1588>
 800b5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5dc:	3301      	adds	r3, #1
 800b5de:	d002      	beq.n	800b5e6 <PxMessagingTask+0x158e>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5e0:	4b14      	ldr	r3, [pc, #80]	; (800b634 <PxMessagingTask+0x15dc>)
 800b5e2:	2216      	movs	r2, #22
 800b5e4:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b5e6:	4b13      	ldr	r3, [pc, #76]	; (800b634 <PxMessagingTask+0x15dc>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d116      	bne.n	800b61c <PxMessagingTask+0x15c4>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b5ee:	1c63      	adds	r3, r4, #1
 800b5f0:	2138      	movs	r1, #56	; 0x38
 800b5f2:	4369      	muls	r1, r5
 800b5f4:	4a10      	ldr	r2, [pc, #64]	; (800b638 <PxMessagingTask+0x15e0>)
 800b5f6:	1852      	adds	r2, r2, r1
 800b5f8:	5cd3      	ldrb	r3, [r2, r3]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	2a07      	cmp	r2, #7
 800b600:	d80c      	bhi.n	800b61c <PxMessagingTask+0x15c4>
 800b602:	b2db      	uxtb	r3, r3
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4a11      	ldr	r2, [pc, #68]	; (800b64c <PxMessagingTask+0x15f4>)
 800b608:	58d3      	ldr	r3, [r2, r3]
 800b60a:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b60c:	8833      	ldrh	r3, [r6, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <PxMessagingTask+0x15f8>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d01e      	beq.n	800b654 <PxMessagingTask+0x15fc>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <PxMessagingTask+0x15dc>)
 800b618:	2216      	movs	r2, #22
 800b61a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b61c:	f007 fc7c 	bl	8012f18 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b620:	9b08      	ldr	r3, [sp, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d100      	bne.n	800b628 <PxMessagingTask+0x15d0>
 800b626:	e616      	b.n	800b256 <PxMessagingTask+0x11fe>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <PxMessagingTask+0x15dc>)
 800b62a:	2216      	movs	r2, #22
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e612      	b.n	800b256 <PxMessagingTask+0x11fe>
 800b630:	20006d28 	.word	0x20006d28
 800b634:	200010f8 	.word	0x200010f8
 800b638:	20000d30 	.word	0x20000d30
 800b63c:	200010f0 	.word	0x200010f0
 800b640:	00007fff 	.word	0x00007fff
 800b644:	0801c764 	.word	0x0801c764
 800b648:	0001ffff 	.word	0x0001ffff
 800b64c:	0801c784 	.word	0x0801c784
 800b650:	0000ffff 	.word	0x0000ffff
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b654:	3406      	adds	r4, #6
 800b656:	2238      	movs	r2, #56	; 0x38
 800b658:	436a      	muls	r2, r5
 800b65a:	4bcc      	ldr	r3, [pc, #816]	; (800b98c <PxMessagingTask+0x1934>)
 800b65c:	189b      	adds	r3, r3, r2
 800b65e:	5d1a      	ldrb	r2, [r3, r4]
 800b660:	2300      	movs	r3, #0
 800b662:	49cb      	ldr	r1, [pc, #812]	; (800b990 <PxMessagingTask+0x1938>)
 800b664:	600a      	str	r2, [r1, #0]
 800b666:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b668:	0031      	movs	r1, r6
 800b66a:	2001      	movs	r0, #1
 800b66c:	f007 fc8c 	bl	8012f88 <HAL_FLASH_Program>
 800b670:	9008      	str	r0, [sp, #32]
													break;
 800b672:	e7d3      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b674:	8833      	ldrh	r3, [r6, #0]
 800b676:	b29b      	uxth	r3, r3
 800b678:	4ac6      	ldr	r2, [pc, #792]	; (800b994 <PxMessagingTask+0x193c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <PxMessagingTask+0x162e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b67e:	4bc6      	ldr	r3, [pc, #792]	; (800b998 <PxMessagingTask+0x1940>)
 800b680:	2216      	movs	r2, #22
 800b682:	701a      	strb	r2, [r3, #0]
													break;
 800b684:	e7ca      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b686:	1da1      	adds	r1, r4, #6
 800b688:	2238      	movs	r2, #56	; 0x38
 800b68a:	436a      	muls	r2, r5
 800b68c:	4bbf      	ldr	r3, [pc, #764]	; (800b98c <PxMessagingTask+0x1934>)
 800b68e:	189b      	adds	r3, r3, r2
 800b690:	5c5a      	ldrb	r2, [r3, r1]
 800b692:	3407      	adds	r4, #7
 800b694:	5d1b      	ldrb	r3, [r3, r4]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	18d2      	adds	r2, r2, r3
 800b69a:	17d3      	asrs	r3, r2, #31
 800b69c:	49bc      	ldr	r1, [pc, #752]	; (800b990 <PxMessagingTask+0x1938>)
 800b69e:	600a      	str	r2, [r1, #0]
 800b6a0:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b6a2:	0031      	movs	r1, r6
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	f007 fc6f 	bl	8012f88 <HAL_FLASH_Program>
 800b6aa:	9008      	str	r0, [sp, #32]
													break;
 800b6ac:	e7b6      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b6ae:	6833      	ldr	r3, [r6, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	d003      	beq.n	800b6bc <PxMessagingTask+0x1664>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b6b4:	4bb8      	ldr	r3, [pc, #736]	; (800b998 <PxMessagingTask+0x1940>)
 800b6b6:	2216      	movs	r2, #22
 800b6b8:	701a      	strb	r2, [r3, #0]
													break;
 800b6ba:	e7af      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b6bc:	1da2      	adds	r2, r4, #6
 800b6be:	2338      	movs	r3, #56	; 0x38
 800b6c0:	436b      	muls	r3, r5
 800b6c2:	49b2      	ldr	r1, [pc, #712]	; (800b98c <PxMessagingTask+0x1934>)
 800b6c4:	18cb      	adds	r3, r1, r3
 800b6c6:	5c9a      	ldrb	r2, [r3, r2]
 800b6c8:	1de1      	adds	r1, r4, #7
 800b6ca:	5c59      	ldrb	r1, [r3, r1]
 800b6cc:	0209      	lsls	r1, r1, #8
 800b6ce:	1852      	adds	r2, r2, r1
 800b6d0:	0021      	movs	r1, r4
 800b6d2:	3108      	adds	r1, #8
 800b6d4:	5c59      	ldrb	r1, [r3, r1]
 800b6d6:	0409      	lsls	r1, r1, #16
 800b6d8:	1852      	adds	r2, r2, r1
 800b6da:	3409      	adds	r4, #9
 800b6dc:	5d1b      	ldrb	r3, [r3, r4]
 800b6de:	061b      	lsls	r3, r3, #24
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	49aa      	ldr	r1, [pc, #680]	; (800b990 <PxMessagingTask+0x1938>)
 800b6e6:	600a      	str	r2, [r1, #0]
 800b6e8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b6ea:	0031      	movs	r1, r6
 800b6ec:	2002      	movs	r0, #2
 800b6ee:	f007 fc4b 	bl	8012f88 <HAL_FLASH_Program>
 800b6f2:	9008      	str	r0, [sp, #32]
													break;
 800b6f4:	e792      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b6f6:	6833      	ldr	r3, [r6, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	d003      	beq.n	800b704 <PxMessagingTask+0x16ac>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b6fc:	4ba6      	ldr	r3, [pc, #664]	; (800b998 <PxMessagingTask+0x1940>)
 800b6fe:	2216      	movs	r2, #22
 800b700:	701a      	strb	r2, [r3, #0]
													break;
 800b702:	e78b      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b704:	1da2      	adds	r2, r4, #6
 800b706:	2338      	movs	r3, #56	; 0x38
 800b708:	436b      	muls	r3, r5
 800b70a:	49a0      	ldr	r1, [pc, #640]	; (800b98c <PxMessagingTask+0x1934>)
 800b70c:	18cb      	adds	r3, r1, r3
 800b70e:	5c9a      	ldrb	r2, [r3, r2]
 800b710:	1de1      	adds	r1, r4, #7
 800b712:	5c59      	ldrb	r1, [r3, r1]
 800b714:	0209      	lsls	r1, r1, #8
 800b716:	1852      	adds	r2, r2, r1
 800b718:	0021      	movs	r1, r4
 800b71a:	3108      	adds	r1, #8
 800b71c:	5c59      	ldrb	r1, [r3, r1]
 800b71e:	0409      	lsls	r1, r1, #16
 800b720:	1852      	adds	r2, r2, r1
 800b722:	3409      	adds	r4, #9
 800b724:	5d1b      	ldrb	r3, [r3, r4]
 800b726:	061b      	lsls	r3, r3, #24
 800b728:	18d2      	adds	r2, r2, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	4998      	ldr	r1, [pc, #608]	; (800b990 <PxMessagingTask+0x1938>)
 800b72e:	600a      	str	r2, [r1, #0]
 800b730:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b732:	0031      	movs	r1, r6
 800b734:	2003      	movs	r0, #3
 800b736:	f007 fc27 	bl	8012f88 <HAL_FLASH_Program>
 800b73a:	9008      	str	r0, [sp, #32]
													break;
 800b73c:	e76e      	b.n	800b61c <PxMessagingTask+0x15c4>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b73e:	4b96      	ldr	r3, [pc, #600]	; (800b998 <PxMessagingTask+0x1940>)
 800b740:	2215      	movs	r2, #21
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e587      	b.n	800b256 <PxMessagingTask+0x11fe>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b746:	00eb      	lsls	r3, r5, #3
 800b748:	1b5b      	subs	r3, r3, r5
 800b74a:	00da      	lsls	r2, r3, #3
 800b74c:	4b8f      	ldr	r3, [pc, #572]	; (800b98c <PxMessagingTask+0x1934>)
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	5d1a      	ldrb	r2, [r3, r4]
 800b752:	4b91      	ldr	r3, [pc, #580]	; (800b998 <PxMessagingTask+0x1940>)
 800b754:	701a      	strb	r2, [r3, #0]
							break;
 800b756:	f7fe fccd 	bl	800a0f4 <PxMessagingTask+0x9c>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b75a:	1c60      	adds	r0, r4, #1
 800b75c:	00eb      	lsls	r3, r5, #3
 800b75e:	1b5a      	subs	r2, r3, r5
 800b760:	00d1      	lsls	r1, r2, #3
 800b762:	1809      	adds	r1, r1, r0
 800b764:	4889      	ldr	r0, [pc, #548]	; (800b98c <PxMessagingTask+0x1934>)
 800b766:	1809      	adds	r1, r1, r0
 800b768:	9a05      	ldr	r2, [sp, #20]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	b292      	uxth	r2, r2
 800b76e:	1b5b      	subs	r3, r3, r5
 800b770:	00de      	lsls	r6, r3, #3
 800b772:	1980      	adds	r0, r0, r6
 800b774:	5d00      	ldrb	r0, [r0, r4]
 800b776:	230a      	movs	r3, #10
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	f004 f867 	bl	800f84c <writePxMutex>
							break;
 800b77e:	f7fe fcb9 	bl	800a0f4 <PxMessagingTask+0x9c>
							switch(cMessage[port - 1][0 + shift]){
 800b782:	00eb      	lsls	r3, r5, #3
 800b784:	1b5b      	subs	r3, r3, r5
 800b786:	00da      	lsls	r2, r3, #3
 800b788:	4b80      	ldr	r3, [pc, #512]	; (800b98c <PxMessagingTask+0x1934>)
 800b78a:	189b      	adds	r3, r3, r2
 800b78c:	5d18      	ldrb	r0, [r3, r4]
 800b78e:	282b      	cmp	r0, #43	; 0x2b
 800b790:	d900      	bls.n	800b794 <PxMessagingTask+0x173c>
 800b792:	e0ce      	b.n	800b932 <PxMessagingTask+0x18da>
 800b794:	0083      	lsls	r3, r0, #2
 800b796:	4a81      	ldr	r2, [pc, #516]	; (800b99c <PxMessagingTask+0x1944>)
 800b798:	58d3      	ldr	r3, [r2, r3]
 800b79a:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b79c:	1c62      	adds	r2, r4, #1
 800b79e:	2338      	movs	r3, #56	; 0x38
 800b7a0:	436b      	muls	r3, r5
 800b7a2:	497a      	ldr	r1, [pc, #488]	; (800b98c <PxMessagingTask+0x1934>)
 800b7a4:	18cb      	adds	r3, r1, r3
 800b7a6:	5c9a      	ldrb	r2, [r3, r2]
 800b7a8:	1ca1      	adds	r1, r4, #2
 800b7aa:	5c59      	ldrb	r1, [r3, r1]
 800b7ac:	0209      	lsls	r1, r1, #8
 800b7ae:	1852      	adds	r2, r2, r1
 800b7b0:	1ce1      	adds	r1, r4, #3
 800b7b2:	5c59      	ldrb	r1, [r3, r1]
 800b7b4:	0409      	lsls	r1, r1, #16
 800b7b6:	1852      	adds	r2, r2, r1
 800b7b8:	1d21      	adds	r1, r4, #4
 800b7ba:	5c59      	ldrb	r1, [r3, r1]
 800b7bc:	0609      	lsls	r1, r1, #24
 800b7be:	1852      	adds	r2, r2, r1
 800b7c0:	4977      	ldr	r1, [pc, #476]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b7c2:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b7c4:	1d62      	adds	r2, r4, #5
 800b7c6:	5c98      	ldrb	r0, [r3, r2]
 800b7c8:	1da2      	adds	r2, r4, #6
 800b7ca:	5c9a      	ldrb	r2, [r3, r2]
 800b7cc:	0212      	lsls	r2, r2, #8
 800b7ce:	1880      	adds	r0, r0, r2
 800b7d0:	1de2      	adds	r2, r4, #7
 800b7d2:	5c9a      	ldrb	r2, [r3, r2]
 800b7d4:	0412      	lsls	r2, r2, #16
 800b7d6:	1880      	adds	r0, r0, r2
 800b7d8:	0022      	movs	r2, r4
 800b7da:	3208      	adds	r2, #8
 800b7dc:	5c9a      	ldrb	r2, [r3, r2]
 800b7de:	0612      	lsls	r2, r2, #24
 800b7e0:	1882      	adds	r2, r0, r2
 800b7e2:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b7e4:	0022      	movs	r2, r4
 800b7e6:	3209      	adds	r2, #9
 800b7e8:	5c98      	ldrb	r0, [r3, r2]
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	5c9a      	ldrb	r2, [r3, r2]
 800b7ee:	0212      	lsls	r2, r2, #8
 800b7f0:	1880      	adds	r0, r0, r2
 800b7f2:	0022      	movs	r2, r4
 800b7f4:	320b      	adds	r2, #11
 800b7f6:	5c9a      	ldrb	r2, [r3, r2]
 800b7f8:	0412      	lsls	r2, r2, #16
 800b7fa:	1882      	adds	r2, r0, r2
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	300c      	adds	r0, #12
 800b800:	5c1b      	ldrb	r3, [r3, r0]
 800b802:	061b      	lsls	r3, r3, #24
 800b804:	18d3      	adds	r3, r2, r3
 800b806:	608b      	str	r3, [r1, #8]
									break;
 800b808:	e093      	b.n	800b932 <PxMessagingTask+0x18da>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b80a:	1c62      	adds	r2, r4, #1
 800b80c:	2338      	movs	r3, #56	; 0x38
 800b80e:	436b      	muls	r3, r5
 800b810:	495e      	ldr	r1, [pc, #376]	; (800b98c <PxMessagingTask+0x1934>)
 800b812:	18cb      	adds	r3, r1, r3
 800b814:	5c9a      	ldrb	r2, [r3, r2]
 800b816:	1ca1      	adds	r1, r4, #2
 800b818:	5c59      	ldrb	r1, [r3, r1]
 800b81a:	0209      	lsls	r1, r1, #8
 800b81c:	1852      	adds	r2, r2, r1
 800b81e:	1ce1      	adds	r1, r4, #3
 800b820:	5c59      	ldrb	r1, [r3, r1]
 800b822:	0409      	lsls	r1, r1, #16
 800b824:	1852      	adds	r2, r2, r1
 800b826:	1d21      	adds	r1, r4, #4
 800b828:	5c59      	ldrb	r1, [r3, r1]
 800b82a:	0609      	lsls	r1, r1, #24
 800b82c:	1852      	adds	r2, r2, r1
 800b82e:	495c      	ldr	r1, [pc, #368]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b830:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b832:	1d62      	adds	r2, r4, #5
 800b834:	5c98      	ldrb	r0, [r3, r2]
 800b836:	1da2      	adds	r2, r4, #6
 800b838:	5c9a      	ldrb	r2, [r3, r2]
 800b83a:	0212      	lsls	r2, r2, #8
 800b83c:	1880      	adds	r0, r0, r2
 800b83e:	1de2      	adds	r2, r4, #7
 800b840:	5c9a      	ldrb	r2, [r3, r2]
 800b842:	0412      	lsls	r2, r2, #16
 800b844:	1880      	adds	r0, r0, r2
 800b846:	0022      	movs	r2, r4
 800b848:	3208      	adds	r2, #8
 800b84a:	5c9a      	ldrb	r2, [r3, r2]
 800b84c:	0612      	lsls	r2, r2, #24
 800b84e:	1882      	adds	r2, r0, r2
 800b850:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b852:	0022      	movs	r2, r4
 800b854:	3209      	adds	r2, #9
 800b856:	5c98      	ldrb	r0, [r3, r2]
 800b858:	3201      	adds	r2, #1
 800b85a:	5c9a      	ldrb	r2, [r3, r2]
 800b85c:	0212      	lsls	r2, r2, #8
 800b85e:	1880      	adds	r0, r0, r2
 800b860:	0022      	movs	r2, r4
 800b862:	320b      	adds	r2, #11
 800b864:	5c9a      	ldrb	r2, [r3, r2]
 800b866:	0412      	lsls	r2, r2, #16
 800b868:	1882      	adds	r2, r0, r2
 800b86a:	0020      	movs	r0, r4
 800b86c:	300c      	adds	r0, #12
 800b86e:	5c1b      	ldrb	r3, [r3, r0]
 800b870:	061b      	lsls	r3, r3, #24
 800b872:	18d3      	adds	r3, r2, r3
 800b874:	614b      	str	r3, [r1, #20]
									break;
 800b876:	e05c      	b.n	800b932 <PxMessagingTask+0x18da>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b878:	1c63      	adds	r3, r4, #1
 800b87a:	2238      	movs	r2, #56	; 0x38
 800b87c:	436a      	muls	r2, r5
 800b87e:	4943      	ldr	r1, [pc, #268]	; (800b98c <PxMessagingTask+0x1934>)
 800b880:	188a      	adds	r2, r1, r2
 800b882:	5cd1      	ldrb	r1, [r2, r3]
 800b884:	1ca3      	adds	r3, r4, #2
 800b886:	5cd3      	ldrb	r3, [r2, r3]
 800b888:	021b      	lsls	r3, r3, #8
 800b88a:	18c9      	adds	r1, r1, r3
 800b88c:	1ce3      	adds	r3, r4, #3
 800b88e:	5cd3      	ldrb	r3, [r2, r3]
 800b890:	041b      	lsls	r3, r3, #16
 800b892:	18c9      	adds	r1, r1, r3
 800b894:	1d23      	adds	r3, r4, #4
 800b896:	5cd3      	ldrb	r3, [r2, r3]
 800b898:	061b      	lsls	r3, r3, #24
 800b89a:	18cb      	adds	r3, r1, r3
 800b89c:	4a40      	ldr	r2, [pc, #256]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b89e:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b8a0:	4b40      	ldr	r3, [pc, #256]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8a2:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b8a4:	1c63      	adds	r3, r4, #1
 800b8a6:	2138      	movs	r1, #56	; 0x38
 800b8a8:	4369      	muls	r1, r5
 800b8aa:	4a38      	ldr	r2, [pc, #224]	; (800b98c <PxMessagingTask+0x1934>)
 800b8ac:	1852      	adds	r2, r2, r1
 800b8ae:	5cd3      	ldrb	r3, [r2, r3]
 800b8b0:	4a3d      	ldr	r2, [pc, #244]	; (800b9a8 <PxMessagingTask+0x1950>)
 800b8b2:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d152      	bne.n	800b95e <PxMessagingTask+0x1906>
										ADCSelectChannel(ADCPort,"top");
 800b8b8:	4e3c      	ldr	r6, [pc, #240]	; (800b9ac <PxMessagingTask+0x1954>)
 800b8ba:	0031      	movs	r1, r6
 800b8bc:	f7fd fb2a 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b8c0:	4b38      	ldr	r3, [pc, #224]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8c2:	7818      	ldrb	r0, [r3, #0]
 800b8c4:	4a3a      	ldr	r2, [pc, #232]	; (800b9b0 <PxMessagingTask+0x1958>)
 800b8c6:	0031      	movs	r1, r6
 800b8c8:	f7fd fb52 	bl	8008f70 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b8cc:	4939      	ldr	r1, [pc, #228]	; (800b9b4 <PxMessagingTask+0x195c>)
 800b8ce:	483a      	ldr	r0, [pc, #232]	; (800b9b8 <PxMessagingTask+0x1960>)
 800b8d0:	f7fd f996 	bl	8008c00 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b8d4:	00eb      	lsls	r3, r5, #3
 800b8d6:	1b5b      	subs	r3, r3, r5
 800b8d8:	00da      	lsls	r2, r3, #3
 800b8da:	4e2c      	ldr	r6, [pc, #176]	; (800b98c <PxMessagingTask+0x1934>)
 800b8dc:	18b6      	adds	r6, r6, r2
 800b8de:	5d30      	ldrb	r0, [r6, r4]
 800b8e0:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8e2:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b8e4:	4935      	ldr	r1, [pc, #212]	; (800b9bc <PxMessagingTask+0x1964>)
 800b8e6:	f7fd fa47 	bl	8008d78 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b8ea:	1d63      	adds	r3, r4, #5
 800b8ec:	5cf3      	ldrb	r3, [r6, r3]
 800b8ee:	1da2      	adds	r2, r4, #6
 800b8f0:	5cb2      	ldrb	r2, [r6, r2]
 800b8f2:	0212      	lsls	r2, r2, #8
 800b8f4:	189b      	adds	r3, r3, r2
 800b8f6:	1de2      	adds	r2, r4, #7
 800b8f8:	5cb2      	ldrb	r2, [r6, r2]
 800b8fa:	0412      	lsls	r2, r2, #16
 800b8fc:	189b      	adds	r3, r3, r2
 800b8fe:	0022      	movs	r2, r4
 800b900:	3208      	adds	r2, #8
 800b902:	5cb2      	ldrb	r2, [r6, r2]
 800b904:	0612      	lsls	r2, r2, #24
 800b906:	189b      	adds	r3, r3, r2
 800b908:	4a25      	ldr	r2, [pc, #148]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b90a:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b90c:	0023      	movs	r3, r4
 800b90e:	3309      	adds	r3, #9
 800b910:	5cf3      	ldrb	r3, [r6, r3]
 800b912:	0021      	movs	r1, r4
 800b914:	310a      	adds	r1, #10
 800b916:	5c71      	ldrb	r1, [r6, r1]
 800b918:	0209      	lsls	r1, r1, #8
 800b91a:	185b      	adds	r3, r3, r1
 800b91c:	0021      	movs	r1, r4
 800b91e:	310b      	adds	r1, #11
 800b920:	5c71      	ldrb	r1, [r6, r1]
 800b922:	0409      	lsls	r1, r1, #16
 800b924:	185b      	adds	r3, r3, r1
 800b926:	0021      	movs	r1, r4
 800b928:	310c      	adds	r1, #12
 800b92a:	5c71      	ldrb	r1, [r6, r1]
 800b92c:	0609      	lsls	r1, r1, #24
 800b92e:	185b      	adds	r3, r3, r1
 800b930:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b932:	9400      	str	r4, [sp, #0]
 800b934:	003b      	movs	r3, r7
 800b936:	9a04      	ldr	r2, [sp, #16]
 800b938:	9907      	ldr	r1, [sp, #28]
 800b93a:	4650      	mov	r0, sl
 800b93c:	f7fe fb8a 	bl	800a054 <User_MessagingParser>
 800b940:	4683      	mov	fp, r0
							if(result == BOS_ERR_UnknownMessage){
 800b942:	2801      	cmp	r0, #1
 800b944:	d001      	beq.n	800b94a <PxMessagingTask+0x18f2>
 800b946:	f7fe fbd5 	bl	800a0f4 <PxMessagingTask+0x9c>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b94a:	9400      	str	r4, [sp, #0]
 800b94c:	003b      	movs	r3, r7
 800b94e:	9a04      	ldr	r2, [sp, #16]
 800b950:	9907      	ldr	r1, [sp, #28]
 800b952:	4650      	mov	r0, sl
 800b954:	f001 fd24 	bl	800d3a0 <Module_MessagingTask>
 800b958:	4683      	mov	fp, r0
 800b95a:	f7fe fbcb 	bl	800a0f4 <PxMessagingTask+0x9c>
									else if(1 == ADCSide){
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d1b4      	bne.n	800b8cc <PxMessagingTask+0x1874>
										ADCSelectChannel(ADCPort,"bottom");
 800b962:	4e17      	ldr	r6, [pc, #92]	; (800b9c0 <PxMessagingTask+0x1968>)
 800b964:	0031      	movs	r1, r6
 800b966:	f7fd fad5 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b96c:	7818      	ldrb	r0, [r3, #0]
 800b96e:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <PxMessagingTask+0x1958>)
 800b970:	0031      	movs	r1, r6
 800b972:	f7fd fafd 	bl	8008f70 <ReadADCChannel>
 800b976:	e7a9      	b.n	800b8cc <PxMessagingTask+0x1874>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b978:	2200      	movs	r2, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	9804      	ldr	r0, [sp, #16]
 800b97e:	f7fe f8cd 	bl	8009b1c <SendMessageToModule>
			result =BOS_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	469b      	mov	fp, r3
 800b986:	f7fe fbba 	bl	800a0fe <PxMessagingTask+0xa6>
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	20000d30 	.word	0x20000d30
 800b990:	200010f0 	.word	0x200010f0
 800b994:	0000ffff 	.word	0x0000ffff
 800b998:	200010f8 	.word	0x200010f8
 800b99c:	0801c7a4 	.word	0x0801c7a4
 800b9a0:	20001550 	.word	0x20001550
 800b9a4:	20001540 	.word	0x20001540
 800b9a8:	20001542 	.word	0x20001542
 800b9ac:	0801a74c 	.word	0x0801a74c
 800b9b0:	20001544 	.word	0x20001544
 800b9b4:	2000154c 	.word	0x2000154c
 800b9b8:	20001548 	.word	0x20001548
 800b9bc:	2000153c 	.word	0x2000153c
 800b9c0:	0801a750 	.word	0x0801a750

0800b9c4 <weight1ModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE weight1ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b9c8:	d101      	bne.n	800b9ce <weight1ModParamCommand+0xa>
 800b9ca:	b672      	cpsid	i
 800b9cc:	e7fe      	b.n	800b9cc <weight1ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight1_buffer);
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <weight1ModParamCommand+0x24>)
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7f7 fba7 	bl	8003124 <__aeabi_f2d>
 800b9d6:	0002      	movs	r2, r0
 800b9d8:	000b      	movs	r3, r1
 800b9da:	4904      	ldr	r1, [pc, #16]	; (800b9ec <weight1ModParamCommand+0x28>)
 800b9dc:	0020      	movs	r0, r4
 800b9de:	f009 fe9f 	bl	8015720 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	20006fa8 	.word	0x20006fa8
 800b9ec:	0801d010 	.word	0x0801d010

0800b9f0 <weight2ModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE weight2ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b9f4:	d101      	bne.n	800b9fa <weight2ModParamCommand+0xa>
 800b9f6:	b672      	cpsid	i
 800b9f8:	e7fe      	b.n	800b9f8 <weight2ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight2_buffer);
 800b9fa:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <weight2ModParamCommand+0x24>)
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f7f7 fb91 	bl	8003124 <__aeabi_f2d>
 800ba02:	0002      	movs	r2, r0
 800ba04:	000b      	movs	r3, r1
 800ba06:	4904      	ldr	r1, [pc, #16]	; (800ba18 <weight2ModParamCommand+0x28>)
 800ba08:	0020      	movs	r0, r4
 800ba0a:	f009 fe89 	bl	8015720 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	20006ec0 	.word	0x20006ec0
 800ba18:	0801d010 	.word	0x0801d010

0800ba1c <unitCommand>:
{
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	0004      	movs	r4, r0
 800ba22:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	d101      	bne.n	800ba30 <unitCommand+0x14>
 800ba2c:	b672      	cpsid	i
 800ba2e:	e7fe      	b.n	800ba2e <unitCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ba30:	aa01      	add	r2, sp, #4
 800ba32:	2101      	movs	r1, #1
 800ba34:	f004 f964 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800ba38:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "g", 1))
 800ba3a:	7803      	ldrb	r3, [r0, #0]
 800ba3c:	2b67      	cmp	r3, #103	; 0x67
 800ba3e:	d01c      	beq.n	800ba7a <unitCommand+0x5e>
  else if (!strncmp((const char *)pcParameterString1, "kg", 2))
 800ba40:	2202      	movs	r2, #2
 800ba42:	4927      	ldr	r1, [pc, #156]	; (800bae0 <unitCommand+0xc4>)
 800ba44:	f009 feb0 	bl	80157a8 <strncmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d021      	beq.n	800ba90 <unitCommand+0x74>
  else if (!strncmp((const char *)pcParameterString1, "ounce", 5))
 800ba4c:	2205      	movs	r2, #5
 800ba4e:	4925      	ldr	r1, [pc, #148]	; (800bae4 <unitCommand+0xc8>)
 800ba50:	0028      	movs	r0, r5
 800ba52:	f009 fea9 	bl	80157a8 <strncmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d023      	beq.n	800baa2 <unitCommand+0x86>
	else if (!strncmp((const char *)pcParameterString1, "lb", 2))
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4922      	ldr	r1, [pc, #136]	; (800bae8 <unitCommand+0xcc>)
 800ba5e:	0028      	movs	r0, r5
 800ba60:	f009 fea2 	bl	80157a8 <strncmp>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d125      	bne.n	800bab4 <unitCommand+0x98>
    unit = Pound;
 800ba68:	4b20      	ldr	r3, [pc, #128]	; (800baec <unitCommand+0xd0>)
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Pound\r\n" );
 800ba6e:	321b      	adds	r2, #27
 800ba70:	491f      	ldr	r1, [pc, #124]	; (800baf0 <unitCommand+0xd4>)
 800ba72:	0020      	movs	r0, r4
 800ba74:	f009 fc51 	bl	801531a <memcpy>
 800ba78:	e007      	b.n	800ba8a <unitCommand+0x6e>
    unit = Gram;
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <unitCommand+0xd0>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Gram\r\n" );
 800ba80:	321d      	adds	r2, #29
 800ba82:	491c      	ldr	r1, [pc, #112]	; (800baf4 <unitCommand+0xd8>)
 800ba84:	0020      	movs	r0, r4
 800ba86:	f009 fc48 	bl	801531a <memcpy>
}
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	b003      	add	sp, #12
 800ba8e:	bd30      	pop	{r4, r5, pc}
    unit = KGram;
 800ba90:	4b16      	ldr	r3, [pc, #88]	; (800baec <unitCommand+0xd0>)
 800ba92:	2202      	movs	r2, #2
 800ba94:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: KGram\r\n" );
 800ba96:	321d      	adds	r2, #29
 800ba98:	4917      	ldr	r1, [pc, #92]	; (800baf8 <unitCommand+0xdc>)
 800ba9a:	0020      	movs	r0, r4
 800ba9c:	f009 fc3d 	bl	801531a <memcpy>
 800baa0:	e7f3      	b.n	800ba8a <unitCommand+0x6e>
    unit = Ounce;
 800baa2:	4b12      	ldr	r3, [pc, #72]	; (800baec <unitCommand+0xd0>)
 800baa4:	2203      	movs	r2, #3
 800baa6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Ounce\r\n" );
 800baa8:	321c      	adds	r2, #28
 800baaa:	4914      	ldr	r1, [pc, #80]	; (800bafc <unitCommand+0xe0>)
 800baac:	0020      	movs	r0, r4
 800baae:	f009 fc34 	bl	801531a <memcpy>
 800bab2:	e7ea      	b.n	800ba8a <unitCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "raw", 3))
 800bab4:	2203      	movs	r2, #3
 800bab6:	4912      	ldr	r1, [pc, #72]	; (800bb00 <unitCommand+0xe4>)
 800bab8:	0028      	movs	r0, r5
 800baba:	f009 fe75 	bl	80157a8 <strncmp>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d005      	beq.n	800bace <unitCommand+0xb2>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bac2:	2213      	movs	r2, #19
 800bac4:	490f      	ldr	r1, [pc, #60]	; (800bb04 <unitCommand+0xe8>)
 800bac6:	0020      	movs	r0, r4
 800bac8:	f009 fc27 	bl	801531a <memcpy>
 800bacc:	e7dd      	b.n	800ba8a <unitCommand+0x6e>
    unit = RAW;
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <unitCommand+0xd0>)
 800bad0:	2205      	movs	r2, #5
 800bad2:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Raw\r\n" );
 800bad4:	3218      	adds	r2, #24
 800bad6:	490c      	ldr	r1, [pc, #48]	; (800bb08 <unitCommand+0xec>)
 800bad8:	0020      	movs	r0, r4
 800bada:	f009 fc1e 	bl	801531a <memcpy>
 800bade:	e7d4      	b.n	800ba8a <unitCommand+0x6e>
 800bae0:	0801cf5c 	.word	0x0801cf5c
 800bae4:	0801cf80 	.word	0x0801cf80
 800bae8:	0801cfa8 	.word	0x0801cfa8
 800baec:	200000b4 	.word	0x200000b4
 800baf0:	0801cfac 	.word	0x0801cfac
 800baf4:	0801cf3c 	.word	0x0801cf3c
 800baf8:	0801cf60 	.word	0x0801cf60
 800bafc:	0801cf88 	.word	0x0801cf88
 800bb00:	0801cfcc 	.word	0x0801cfcc
 800bb04:	0801b0d0 	.word	0x0801b0d0
 800bb08:	0801cfd0 	.word	0x0801cfd0

0800bb0c <CheckForEnterKey>:
{
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	b082      	sub	sp, #8
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bb10:	2300      	movs	r3, #0
 800bb12:	2b3f      	cmp	r3, #63	; 0x3f
 800bb14:	d81b      	bhi.n	800bb4e <CheckForEnterKey+0x42>
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bb16:	4a0f      	ldr	r2, [pc, #60]	; (800bb54 <CheckForEnterKey+0x48>)
 800bb18:	7812      	ldrb	r2, [r2, #0]
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	001c      	movs	r4, r3
 800bb1e:	0190      	lsls	r0, r2, #6
 800bb20:	490d      	ldr	r1, [pc, #52]	; (800bb58 <CheckForEnterKey+0x4c>)
 800bb22:	1809      	adds	r1, r1, r0
 800bb24:	5cc9      	ldrb	r1, [r1, r3]
 800bb26:	290d      	cmp	r1, #13
 800bb28:	d002      	beq.n	800bb30 <CheckForEnterKey+0x24>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	e7f0      	b.n	800bb12 <CheckForEnterKey+0x6>
			UARTRxBuf[PcPort-1][chr] = 0;
 800bb30:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <CheckForEnterKey+0x4c>)
 800bb32:	181a      	adds	r2, r3, r0
 800bb34:	2300      	movs	r3, #0
 800bb36:	5513      	strb	r3, [r2, r4]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800bb38:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <CheckForEnterKey+0x50>)
 800bb3a:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		                // Stop the streaming task
 800bb3c:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <CheckForEnterKey+0x54>)
 800bb3e:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimer, 0 );            // Stop the timeout timer
 800bb40:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <CheckForEnterKey+0x58>)
 800bb42:	6810      	ldr	r0, [r2, #0]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	390a      	subs	r1, #10
 800bb4a:	f005 fcfd 	bl	8011548 <xTimerGenericCommand>
}
 800bb4e:	b002      	add	sp, #8
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	46c0      	nop			; (mov r8, r8)
 800bb54:	20000a9f 	.word	0x20000a9f
 800bb58:	200012b8 	.word	0x200012b8
 800bb5c:	20001b4c 	.word	0x20001b4c
 800bb60:	20006f35 	.word	0x20006f35
 800bb64:	20001b74 	.word	0x20001b74

0800bb68 <HandleTimeout>:
{
 800bb68:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800bb6a:	f005 fe26 	bl	80117ba <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800bb6e:	28ff      	cmp	r0, #255	; 0xff
 800bb70:	d000      	beq.n	800bb74 <HandleTimeout+0xc>
}
 800bb72:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		                                    // Stop the streaming task
 800bb74:	2300      	movs	r3, #0
 800bb76:	4a02      	ldr	r2, [pc, #8]	; (800bb80 <HandleTimeout+0x18>)
 800bb78:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING;     // stop streaming
 800bb7a:	4a02      	ldr	r2, [pc, #8]	; (800bb84 <HandleTimeout+0x1c>)
 800bb7c:	7013      	strb	r3, [r2, #0]
}
 800bb7e:	e7f8      	b.n	800bb72 <HandleTimeout+0xa>
 800bb80:	20006f35 	.word	0x20006f35
 800bb84:	20001b4c 	.word	0x20001b4c

0800bb88 <SystemClock_Config>:
{
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb8c:	2401      	movs	r4, #1
 800bb8e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bb90:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bb92:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800bb94:	2310      	movs	r3, #16
 800bb96:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb98:	2702      	movs	r7, #2
 800bb9a:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bb9c:	2680      	movs	r6, #128	; 0x80
 800bb9e:	0276      	lsls	r6, r6, #9
 800bba0:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bba2:	2380      	movs	r3, #128	; 0x80
 800bba4:	035b      	lsls	r3, r3, #13
 800bba6:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bba8:	2500      	movs	r5, #0
 800bbaa:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bbac:	a80d      	add	r0, sp, #52	; 0x34
 800bbae:	f007 fc17 	bl	80133e0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800bbb2:	2307      	movs	r3, #7
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bbb6:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bbb8:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bbba:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	a809      	add	r0, sp, #36	; 0x24
 800bbc0:	f007 feb2 	bl	8013928 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <SystemClock_Config+0xa8>)
 800bbc6:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800bbc8:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bbca:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800bbcc:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbce:	a802      	add	r0, sp, #8
 800bbd0:	f008 f83e 	bl	8013c50 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bbd4:	4d17      	ldr	r5, [pc, #92]	; (800bc34 <SystemClock_Config+0xac>)
 800bbd6:	69ea      	ldr	r2, [r5, #28]
 800bbd8:	2180      	movs	r1, #128	; 0x80
 800bbda:	0549      	lsls	r1, r1, #21
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	61ea      	str	r2, [r5, #28]
 800bbe0:	69eb      	ldr	r3, [r5, #28]
 800bbe2:	400b      	ands	r3, r1
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bbe8:	f007 fbf0 	bl	80133cc <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bbec:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bbee:	23c0      	movs	r3, #192	; 0xc0
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbf4:	a802      	add	r0, sp, #8
 800bbf6:	f008 f82b 	bl	8013c50 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bbfa:	f008 f805 	bl	8013c08 <HAL_RCC_GetHCLKFreq>
 800bbfe:	21fa      	movs	r1, #250	; 0xfa
 800bc00:	0089      	lsls	r1, r1, #2
 800bc02:	f7f4 faa5 	bl	8000150 <__udivsi3>
 800bc06:	f006 fb51 	bl	80122ac <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bc0a:	2004      	movs	r0, #4
 800bc0c:	f006 fb6a 	bl	80122e4 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800bc10:	69ab      	ldr	r3, [r5, #24]
 800bc12:	4323      	orrs	r3, r4
 800bc14:	61ab      	str	r3, [r5, #24]
 800bc16:	69ab      	ldr	r3, [r5, #24]
 800bc18:	401c      	ands	r4, r3
 800bc1a:	9401      	str	r4, [sp, #4]
 800bc1c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bc1e:	2001      	movs	r0, #1
 800bc20:	2200      	movs	r2, #0
 800bc22:	2100      	movs	r1, #0
 800bc24:	4240      	negs	r0, r0
 800bc26:	f006 fafd 	bl	8012224 <HAL_NVIC_SetPriority>
}
 800bc2a:	b01b      	add	sp, #108	; 0x6c
 800bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2e:	46c0      	nop			; (mov r8, r8)
 800bc30:	00040003 	.word	0x00040003
 800bc34:	40021000 	.word	0x40021000

0800bc38 <Module_Peripheral_Init>:
{
 800bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3a:	b085      	sub	sp, #20
	MX_USART2_UART_Init();
 800bc3c:	f003 fc66 	bl	800f50c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bc40:	f003 fc7c 	bl	800f53c <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800bc44:	f003 fc92 	bl	800f56c <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800bc48:	f003 fca8 	bl	800f59c <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bc4c:	f003 fcbe 	bl	800f5cc <MX_USART6_UART_Init>
	HX711_GPIO_Init();// GPIO init
 800bc50:	f003 f898 	bl	800ed84 <HX711_GPIO_Init>
	xTaskCreate(LoadcellTask,(const char* ) "LoadcellTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&LoadcellHandle);
 800bc54:	22a0      	movs	r2, #160	; 0xa0
 800bc56:	2300      	movs	r3, #0
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <Module_Peripheral_Init+0xc4>)
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	2303      	movs	r3, #3
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	2300      	movs	r3, #0
 800bc66:	0052      	lsls	r2, r2, #1
 800bc68:	4925      	ldr	r1, [pc, #148]	; (800bd00 <Module_Peripheral_Init+0xc8>)
 800bc6a:	4826      	ldr	r0, [pc, #152]	; (800bd04 <Module_Peripheral_Init+0xcc>)
 800bc6c:	f004 fdb6 	bl	80107dc <xTaskGenericCreate>
	EE_ReadVariable(_EE_cell_full_scale,&full_scale);
 800bc70:	20fa      	movs	r0, #250	; 0xfa
 800bc72:	4925      	ldr	r1, [pc, #148]	; (800bd08 <Module_Peripheral_Init+0xd0>)
 800bc74:	0040      	lsls	r0, r0, #1
 800bc76:	f7fb ffc9 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_LSB,&word_LSB);
 800bc7a:	4d24      	ldr	r5, [pc, #144]	; (800bd0c <Module_Peripheral_Init+0xd4>)
 800bc7c:	20f6      	movs	r0, #246	; 0xf6
 800bc7e:	0029      	movs	r1, r5
 800bc80:	30ff      	adds	r0, #255	; 0xff
 800bc82:	f7fb ffc3 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_MSB,&word_MSB);
 800bc86:	4c22      	ldr	r4, [pc, #136]	; (800bd10 <Module_Peripheral_Init+0xd8>)
 800bc88:	20fb      	movs	r0, #251	; 0xfb
 800bc8a:	0021      	movs	r1, r4
 800bc8c:	0040      	lsls	r0, r0, #1
 800bc8e:	f7fb ffbd 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bc92:	882b      	ldrh	r3, [r5, #0]
 800bc94:	8822      	ldrh	r2, [r4, #0]
 800bc96:	0412      	lsls	r2, r2, #16
 800bc98:	189b      	adds	r3, r3, r2
 800bc9a:	4f1e      	ldr	r7, [pc, #120]	; (800bd14 <Module_Peripheral_Init+0xdc>)
 800bc9c:	603b      	str	r3, [r7, #0]
	cell_drift =*(float*) &temp32;
 800bc9e:	4a1e      	ldr	r2, [pc, #120]	; (800bd18 <Module_Peripheral_Init+0xe0>)
 800bca0:	6013      	str	r3, [r2, #0]
	EE_ReadVariable(_EE_cell_output_LSB,&word_LSB);
 800bca2:	20f8      	movs	r0, #248	; 0xf8
 800bca4:	0029      	movs	r1, r5
 800bca6:	30ff      	adds	r0, #255	; 0xff
 800bca8:	f7fb ffb0 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_output_MSB,&word_MSB);
 800bcac:	20fc      	movs	r0, #252	; 0xfc
 800bcae:	0021      	movs	r1, r4
 800bcb0:	0040      	lsls	r0, r0, #1
 800bcb2:	f7fb ffab 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bcb6:	882b      	ldrh	r3, [r5, #0]
 800bcb8:	8822      	ldrh	r2, [r4, #0]
 800bcba:	0412      	lsls	r2, r2, #16
 800bcbc:	189b      	adds	r3, r3, r2
 800bcbe:	603b      	str	r3, [r7, #0]
	cell_output =*(float*) &temp32;
 800bcc0:	4e16      	ldr	r6, [pc, #88]	; (800bd1c <Module_Peripheral_Init+0xe4>)
 800bcc2:	6033      	str	r3, [r6, #0]
	EE_ReadVariable(_EE_zero_drift_LSB,&word_LSB);
 800bcc4:	20fa      	movs	r0, #250	; 0xfa
 800bcc6:	0029      	movs	r1, r5
 800bcc8:	30ff      	adds	r0, #255	; 0xff
 800bcca:	f7fb ff9f 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_zero_drift_MSB,&word_MSB);
 800bcce:	20fd      	movs	r0, #253	; 0xfd
 800bcd0:	0021      	movs	r1, r4
 800bcd2:	0040      	lsls	r0, r0, #1
 800bcd4:	f7fb ff9a 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bcd8:	882b      	ldrh	r3, [r5, #0]
 800bcda:	8822      	ldrh	r2, [r4, #0]
 800bcdc:	0412      	lsls	r2, r2, #16
 800bcde:	189b      	adds	r3, r3, r2
 800bce0:	603b      	str	r3, [r7, #0]
	Zero_Drift =*(float*) &temp32;
 800bce2:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <Module_Peripheral_Init+0xe8>)
 800bce4:	6013      	str	r3, [r2, #0]
	calibration_factor =cell_output * AVDD / 1000.0f;// mV
 800bce6:	490f      	ldr	r1, [pc, #60]	; (800bd24 <Module_Peripheral_Init+0xec>)
 800bce8:	6830      	ldr	r0, [r6, #0]
 800bcea:	f7f5 f8dd 	bl	8000ea8 <__aeabi_fmul>
 800bcee:	490e      	ldr	r1, [pc, #56]	; (800bd28 <Module_Peripheral_Init+0xf0>)
 800bcf0:	f7f4 ff02 	bl	8000af8 <__aeabi_fdiv>
 800bcf4:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <Module_Peripheral_Init+0xf4>)
 800bcf6:	6018      	str	r0, [r3, #0]
}
 800bcf8:	b005      	add	sp, #20
 800bcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfc:	20001734 	.word	0x20001734
 800bd00:	0801c8cc 	.word	0x0801c8cc
 800bd04:	0800d145 	.word	0x0800d145
 800bd08:	20001b44 	.word	0x20001b44
 800bd0c:	20001b70 	.word	0x20001b70
 800bd10:	20001b72 	.word	0x20001b72
 800bd14:	20001b54 	.word	0x20001b54
 800bd18:	20000088 	.word	0x20000088
 800bd1c:	20001b40 	.word	0x20001b40
 800bd20:	20001b38 	.word	0x20001b38
 800bd24:	40400000 	.word	0x40400000
 800bd28:	447a0000 	.word	0x447a0000
 800bd2c:	20001b3c 	.word	0x20001b3c

0800bd30 <SaveToRO>:
{
 800bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd32:	46c6      	mov	lr, r8
 800bd34:	b500      	push	{lr}
 800bd36:	b086      	sub	sp, #24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800bd38:	2215      	movs	r2, #21
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4668      	mov	r0, sp
 800bd3e:	f009 faf5 	bl	801532c <memset>
	HAL_FLASH_Unlock();
 800bd42:	f007 f8d5 	bl	8012ef0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800bd46:	4866      	ldr	r0, [pc, #408]	; (800bee0 <SaveToRO+0x1b0>)
 800bd48:	f007 f980 	bl	801304c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bd4c:	4865      	ldr	r0, [pc, #404]	; (800bee4 <SaveToRO+0x1b4>)
 800bd4e:	f007 f8ed 	bl	8012f2c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d10b      	bne.n	800bd6e <SaveToRO+0x3e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bd56:	4a64      	ldr	r2, [pc, #400]	; (800bee8 <SaveToRO+0x1b8>)
 800bd58:	6913      	ldr	r3, [r2, #16]
 800bd5a:	2102      	movs	r1, #2
 800bd5c:	438b      	bics	r3, r1
 800bd5e:	6113      	str	r3, [r2, #16]
	if (myID)
 800bd60:	4b62      	ldr	r3, [pc, #392]	; (800beec <SaveToRO+0x1bc>)
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d109      	bne.n	800bd7c <SaveToRO+0x4c>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800bd68:	2400      	movs	r4, #0
 800bd6a:	4e61      	ldr	r6, [pc, #388]	; (800bef0 <SaveToRO+0x1c0>)
 800bd6c:	e081      	b.n	800be72 <SaveToRO+0x142>
		return pFlash.ErrorCode;
 800bd6e:	4b61      	ldr	r3, [pc, #388]	; (800bef4 <SaveToRO+0x1c4>)
 800bd70:	69d8      	ldr	r0, [r3, #28]
 800bd72:	b2c0      	uxtb	r0, r0
}
 800bd74:	b006      	add	sp, #24
 800bd76:	bc04      	pop	{r2}
 800bd78:	4690      	mov	r8, r2
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800bd7c:	4b5e      	ldr	r3, [pc, #376]	; (800bef8 <SaveToRO+0x1c8>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	18d2      	adds	r2, r2, r3
 800bd84:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bd86:	2300      	movs	r3, #0
 800bd88:	4955      	ldr	r1, [pc, #340]	; (800bee0 <SaveToRO+0x1b0>)
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	f007 f8fc 	bl	8012f88 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bd90:	4854      	ldr	r0, [pc, #336]	; (800bee4 <SaveToRO+0x1b4>)
 800bd92:	f007 f8cb 	bl	8012f2c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d107      	bne.n	800bdaa <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bd9a:	4a53      	ldr	r2, [pc, #332]	; (800bee8 <SaveToRO+0x1b8>)
 800bd9c:	6913      	ldr	r3, [r2, #16]
 800bd9e:	2101      	movs	r1, #1
 800bda0:	438b      	bics	r3, r1
 800bda2:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800bda4:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 800bda6:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800bda8:	e02e      	b.n	800be08 <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 800bdaa:	4b52      	ldr	r3, [pc, #328]	; (800bef4 <SaveToRO+0x1c4>)
 800bdac:	69d8      	ldr	r0, [r3, #28]
 800bdae:	b2c0      	uxtb	r0, r0
 800bdb0:	e7e0      	b.n	800bd74 <SaveToRO+0x44>
						return pFlash.ErrorCode;
 800bdb2:	4b50      	ldr	r3, [pc, #320]	; (800bef4 <SaveToRO+0x1c4>)
 800bdb4:	69d8      	ldr	r0, [r3, #28]
 800bdb6:	b2c0      	uxtb	r0, r0
 800bdb8:	e7dc      	b.n	800bd74 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800bdba:	3401      	adds	r4, #1
 800bdbc:	b2e4      	uxtb	r4, r4
 800bdbe:	2c0a      	cmp	r4, #10
 800bdc0:	d820      	bhi.n	800be04 <SaveToRO+0xd4>
				if (array[i-1][0]) {
 800bdc2:	1e72      	subs	r2, r6, #1
 800bdc4:	2316      	movs	r3, #22
 800bdc6:	4353      	muls	r3, r2
 800bdc8:	494c      	ldr	r1, [pc, #304]	; (800befc <SaveToRO+0x1cc>)
 800bdca:	5a5b      	ldrh	r3, [r3, r1]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f4      	beq.n	800bdba <SaveToRO+0x8a>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800bdd0:	0093      	lsls	r3, r2, #2
 800bdd2:	189b      	adds	r3, r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	189b      	adds	r3, r3, r2
 800bdd8:	191b      	adds	r3, r3, r4
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	5a5a      	ldrh	r2, [r3, r1]
 800bdde:	4b40      	ldr	r3, [pc, #256]	; (800bee0 <SaveToRO+0x1b0>)
 800bde0:	18e9      	adds	r1, r5, r3
 800bde2:	2300      	movs	r3, #0
 800bde4:	2001      	movs	r0, #1
 800bde6:	f007 f8cf 	bl	8012f88 <HAL_FLASH_Program>
					add += 2;
 800bdea:	3502      	adds	r5, #2
 800bdec:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bdee:	483d      	ldr	r0, [pc, #244]	; (800bee4 <SaveToRO+0x1b4>)
 800bdf0:	f007 f89c 	bl	8012f2c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d1dc      	bne.n	800bdb2 <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bdf8:	4a3b      	ldr	r2, [pc, #236]	; (800bee8 <SaveToRO+0x1b8>)
 800bdfa:	6913      	ldr	r3, [r2, #16]
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	438b      	bics	r3, r1
 800be00:	6113      	str	r3, [r2, #16]
 800be02:	e7da      	b.n	800bdba <SaveToRO+0x8a>
		for(uint8_t i=1 ; i<=N ; i++)
 800be04:	3601      	adds	r6, #1
 800be06:	b2f6      	uxtb	r6, r6
 800be08:	4b3b      	ldr	r3, [pc, #236]	; (800bef8 <SaveToRO+0x1c8>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	42b3      	cmp	r3, r6
 800be0e:	d3ab      	bcc.n	800bd68 <SaveToRO+0x38>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800be10:	2400      	movs	r4, #0
 800be12:	e7d4      	b.n	800bdbe <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800be14:	4b37      	ldr	r3, [pc, #220]	; (800bef4 <SaveToRO+0x1c4>)
 800be16:	69d8      	ldr	r0, [r3, #28]
 800be18:	b2c0      	uxtb	r0, r0
 800be1a:	e7ab      	b.n	800bd74 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800be1c:	2500      	movs	r5, #0
 800be1e:	00bb      	lsls	r3, r7, #2
 800be20:	19db      	adds	r3, r3, r7
 800be22:	009a      	lsls	r2, r3, #2
 800be24:	4b36      	ldr	r3, [pc, #216]	; (800bf00 <SaveToRO+0x1d0>)
 800be26:	189b      	adds	r3, r3, r2
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	4698      	mov	r8, r3
 800be2c:	0018      	movs	r0, r3
 800be2e:	f7f4 f973 	bl	8000118 <strlen>
 800be32:	3001      	adds	r0, #1
 800be34:	0840      	lsrs	r0, r0, #1
 800be36:	4285      	cmp	r5, r0
 800be38:	d219      	bcs.n	800be6e <SaveToRO+0x13e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800be3a:	006b      	lsls	r3, r5, #1
 800be3c:	4642      	mov	r2, r8
 800be3e:	5ad2      	ldrh	r2, [r2, r3]
 800be40:	2300      	movs	r3, #0
 800be42:	0031      	movs	r1, r6
 800be44:	2001      	movs	r0, #1
 800be46:	f007 f89f 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800be4a:	4826      	ldr	r0, [pc, #152]	; (800bee4 <SaveToRO+0x1b4>)
 800be4c:	f007 f86e 	bl	8012f2c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800be50:	2800      	cmp	r0, #0
 800be52:	d108      	bne.n	800be66 <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800be54:	4a24      	ldr	r2, [pc, #144]	; (800bee8 <SaveToRO+0x1b8>)
 800be56:	6913      	ldr	r3, [r2, #16]
 800be58:	2101      	movs	r1, #1
 800be5a:	438b      	bics	r3, r1
 800be5c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800be5e:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800be60:	3501      	adds	r5, #1
 800be62:	b2ed      	uxtb	r5, r5
 800be64:	e7db      	b.n	800be1e <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <SaveToRO+0x1c4>)
 800be68:	69d8      	ldr	r0, [r3, #28]
 800be6a:	b2c0      	uxtb	r0, r0
 800be6c:	e782      	b.n	800bd74 <SaveToRO+0x44>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800be6e:	3401      	adds	r4, #1
 800be70:	b2e4      	uxtb	r4, r4
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <SaveToRO+0x1d4>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	42a3      	cmp	r3, r4
 800be78:	d92d      	bls.n	800bed6 <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) 
 800be7a:	0027      	movs	r7, r4
 800be7c:	00a3      	lsls	r3, r4, #2
 800be7e:	191b      	adds	r3, r3, r4
 800be80:	009a      	lsls	r2, r3, #2
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <SaveToRO+0x1d0>)
 800be84:	5cd3      	ldrb	r3, [r2, r3]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f1      	beq.n	800be6e <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800be8a:	23fe      	movs	r3, #254	; 0xfe
 800be8c:	466a      	mov	r2, sp
 800be8e:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800be90:	00a3      	lsls	r3, r4, #2
 800be92:	191b      	adds	r3, r3, r4
 800be94:	0099      	lsls	r1, r3, #2
 800be96:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <SaveToRO+0x1d0>)
 800be98:	18c9      	adds	r1, r1, r3
 800be9a:	2214      	movs	r2, #20
 800be9c:	466b      	mov	r3, sp
 800be9e:	1c58      	adds	r0, r3, #1
 800bea0:	f009 fa3b 	bl	801531a <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800bea4:	2500      	movs	r5, #0
 800bea6:	2d09      	cmp	r5, #9
 800bea8:	d8b8      	bhi.n	800be1c <SaveToRO+0xec>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800beaa:	006b      	lsls	r3, r5, #1
 800beac:	466a      	mov	r2, sp
 800beae:	5ad2      	ldrh	r2, [r2, r3]
 800beb0:	2300      	movs	r3, #0
 800beb2:	0031      	movs	r1, r6
 800beb4:	2001      	movs	r0, #1
 800beb6:	f007 f867 	bl	8012f88 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800beba:	480a      	ldr	r0, [pc, #40]	; (800bee4 <SaveToRO+0x1b4>)
 800bebc:	f007 f836 	bl	8012f2c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1a7      	bne.n	800be14 <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bec4:	4a08      	ldr	r2, [pc, #32]	; (800bee8 <SaveToRO+0x1b8>)
 800bec6:	6913      	ldr	r3, [r2, #16]
 800bec8:	2101      	movs	r1, #1
 800beca:	438b      	bics	r3, r1
 800becc:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800bece:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800bed0:	3501      	adds	r5, #1
 800bed2:	b2ed      	uxtb	r5, r5
 800bed4:	e7e7      	b.n	800bea6 <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800bed6:	f007 f81f 	bl	8012f18 <HAL_FLASH_Lock>
	return result;
 800beda:	2000      	movs	r0, #0
 800bedc:	e74a      	b.n	800bd74 <SaveToRO+0x44>
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	0801d800 	.word	0x0801d800
 800bee4:	0000c350 	.word	0x0000c350
 800bee8:	40022000 	.word	0x40022000
 800beec:	20001066 	.word	0x20001066
 800bef0:	0801dc00 	.word	0x0801dc00
 800bef4:	200072b0 	.word	0x200072b0
 800bef8:	2000001c 	.word	0x2000001c
 800befc:	20000aa0 	.word	0x20000aa0
 800bf00:	20006dbc 	.word	0x20006dbc
 800bf04:	20001207 	.word	0x20001207

0800bf08 <ClearROtopology>:
{
 800bf08:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800bf0a:	228f      	movs	r2, #143	; 0x8f
 800bf0c:	0092      	lsls	r2, r2, #2
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <ClearROtopology+0x20>)
 800bf12:	f009 fa0b 	bl	801532c <memset>
	N = 1; myID = 0;
 800bf16:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <ClearROtopology+0x24>)
 800bf18:	2201      	movs	r2, #1
 800bf1a:	701a      	strb	r2, [r3, #0]
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <ClearROtopology+0x28>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800bf22:	f7ff ff05 	bl	800bd30 <SaveToRO>
}
 800bf26:	bd10      	pop	{r4, pc}
 800bf28:	20000aa0 	.word	0x20000aa0
 800bf2c:	2000001c 	.word	0x2000001c
 800bf30:	20001066 	.word	0x20001066

0800bf34 <RegisterModuleCLICommands>:
{
 800bf34:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800bf36:	4811      	ldr	r0, [pc, #68]	; (800bf7c <RegisterModuleCLICommands+0x48>)
 800bf38:	f003 fe5c 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sampleCommandDefinition );
 800bf3c:	4810      	ldr	r0, [pc, #64]	; (800bf80 <RegisterModuleCLICommands+0x4c>)
 800bf3e:	f003 fe59 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &streamCommandDefinition);
 800bf42:	4810      	ldr	r0, [pc, #64]	; (800bf84 <RegisterModuleCLICommands+0x50>)
 800bf44:	f003 fe56 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &stopCommandDefinition);
 800bf48:	480f      	ldr	r0, [pc, #60]	; (800bf88 <RegisterModuleCLICommands+0x54>)
 800bf4a:	f003 fe53 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unitCommandDefinition);
 800bf4e:	480f      	ldr	r0, [pc, #60]	; (800bf8c <RegisterModuleCLICommands+0x58>)
 800bf50:	f003 fe50 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rateCommandDefinition);
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <RegisterModuleCLICommands+0x5c>)
 800bf56:	f003 fe4d 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &calibrationCommandDefinition);
 800bf5a:	480e      	ldr	r0, [pc, #56]	; (800bf94 <RegisterModuleCLICommands+0x60>)
 800bf5c:	f003 fe4a 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &zerocalCommandDefinition);
 800bf60:	480d      	ldr	r0, [pc, #52]	; (800bf98 <RegisterModuleCLICommands+0x64>)
 800bf62:	f003 fe47 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight1CommandDefinition);
 800bf66:	480d      	ldr	r0, [pc, #52]	; (800bf9c <RegisterModuleCLICommands+0x68>)
 800bf68:	f003 fe44 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight2CommandDefinition);
 800bf6c:	480c      	ldr	r0, [pc, #48]	; (800bfa0 <RegisterModuleCLICommands+0x6c>)
 800bf6e:	f003 fe41 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dataformatCommandDefinition);
 800bf72:	480c      	ldr	r0, [pc, #48]	; (800bfa4 <RegisterModuleCLICommands+0x70>)
 800bf74:	f003 fe3e 	bl	800fbf4 <FreeRTOS_CLIRegisterCommand>
}
 800bf78:	bd10      	pop	{r4, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	0801c9f8 	.word	0x0801c9f8
 800bf80:	0801ca8c 	.word	0x0801ca8c
 800bf84:	0801cf2c 	.word	0x0801cf2c
 800bf88:	0801ca9c 	.word	0x0801ca9c
 800bf8c:	0801cff0 	.word	0x0801cff0
 800bf90:	0801ca7c 	.word	0x0801ca7c
 800bf94:	0801c98c 	.word	0x0801c98c
 800bf98:	0801d070 	.word	0x0801d070
 800bf9c:	0801d000 	.word	0x0801d000
 800bfa0:	0801d018 	.word	0x0801d018
 800bfa4:	0801c99c 	.word	0x0801c99c

0800bfa8 <GetPort>:
	if (huart->Instance == USART4)
 800bfa8:	6803      	ldr	r3, [r0, #0]
 800bfaa:	4a0d      	ldr	r2, [pc, #52]	; (800bfe0 <GetPort+0x38>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00f      	beq.n	800bfd0 <GetPort+0x28>
	else if (huart->Instance == USART2)
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <GetPort+0x3c>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d00e      	beq.n	800bfd4 <GetPort+0x2c>
	else if (huart->Instance == USART6)
 800bfb6:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <GetPort+0x40>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00d      	beq.n	800bfd8 <GetPort+0x30>
	else if (huart->Instance == USART3)
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	; (800bfec <GetPort+0x44>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d00c      	beq.n	800bfdc <GetPort+0x34>
	else if (huart->Instance == USART5)
 800bfc2:	4a0b      	ldr	r2, [pc, #44]	; (800bff0 <GetPort+0x48>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d001      	beq.n	800bfcc <GetPort+0x24>
	return 0;
 800bfc8:	2000      	movs	r0, #0
}
 800bfca:	4770      	bx	lr
			return P5;
 800bfcc:	2005      	movs	r0, #5
 800bfce:	e7fc      	b.n	800bfca <GetPort+0x22>
			return P1;
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	e7fa      	b.n	800bfca <GetPort+0x22>
			return P2;
 800bfd4:	2002      	movs	r0, #2
 800bfd6:	e7f8      	b.n	800bfca <GetPort+0x22>
			return P3;
 800bfd8:	2003      	movs	r0, #3
 800bfda:	e7f6      	b.n	800bfca <GetPort+0x22>
			return P4;
 800bfdc:	2004      	movs	r0, #4
 800bfde:	e7f4      	b.n	800bfca <GetPort+0x22>
 800bfe0:	40004c00 	.word	0x40004c00
 800bfe4:	40004400 	.word	0x40004400
 800bfe8:	40011400 	.word	0x40011400
 800bfec:	40004800 	.word	0x40004800
 800bff0:	40005000 	.word	0x40005000

0800bff4 <readHX711>:
{
 800bff4:	b510      	push	{r4, lr}
	while(HAL_GPIO_ReadPin(GPIOA,DOUT) == 1) {
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	2090      	movs	r0, #144	; 0x90
 800bffa:	00c9      	lsls	r1, r1, #3
 800bffc:	05c0      	lsls	r0, r0, #23
 800bffe:	f007 f9d3 	bl	80133a8 <HAL_GPIO_ReadPin>
 800c002:	2801      	cmp	r0, #1
 800c004:	d0f7      	beq.n	800bff6 <readHX711+0x2>
	portENTER_CRITICAL();
 800c006:	f005 fc4b 	bl	80118a0 <vPortEnterCritical>
	for(j =0; j < pulses; j++) {
 800c00a:	2400      	movs	r4, #0
 800c00c:	e00b      	b.n	800c026 <readHX711+0x32>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c00e:	2180      	movs	r1, #128	; 0x80
 800c010:	2090      	movs	r0, #144	; 0x90
 800c012:	2200      	movs	r2, #0
 800c014:	0089      	lsls	r1, r1, #2
 800c016:	05c0      	lsls	r0, r0, #23
 800c018:	f007 f9cd 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c01c:	2001      	movs	r0, #1
 800c01e:	f003 fa51 	bl	800f4c4 <StartMicroDelay>
	for(j =0; j < pulses; j++) {
 800c022:	3401      	adds	r4, #1
 800c024:	b2e4      	uxtb	r4, r4
 800c026:	4b23      	ldr	r3, [pc, #140]	; (800c0b4 <readHX711+0xc0>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	d91f      	bls.n	800c06e <readHX711+0x7a>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800c02e:	2180      	movs	r1, #128	; 0x80
 800c030:	2090      	movs	r0, #144	; 0x90
 800c032:	2201      	movs	r2, #1
 800c034:	0089      	lsls	r1, r1, #2
 800c036:	05c0      	lsls	r0, r0, #23
 800c038:	f007 f9bd 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c03c:	2001      	movs	r0, #1
 800c03e:	f003 fa41 	bl	800f4c4 <StartMicroDelay>
		if(j < 24) {
 800c042:	2c17      	cmp	r4, #23
 800c044:	d8e3      	bhi.n	800c00e <readHX711+0x1a>
			Current_pin_state =HAL_GPIO_ReadPin(GPIOA,DOUT);
 800c046:	2180      	movs	r1, #128	; 0x80
 800c048:	2090      	movs	r0, #144	; 0x90
 800c04a:	00c9      	lsls	r1, r1, #3
 800c04c:	05c0      	lsls	r0, r0, #23
 800c04e:	f007 f9ab 	bl	80133a8 <HAL_GPIO_ReadPin>
 800c052:	1e43      	subs	r3, r0, #1
 800c054:	4198      	sbcs	r0, r3
 800c056:	b2c0      	uxtb	r0, r0
 800c058:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <readHX711+0xc4>)
 800c05a:	7018      	strb	r0, [r3, #0]
			Data |=Current_pin_state;
 800c05c:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <readHX711+0xc8>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	4310      	orrs	r0, r2
 800c062:	6018      	str	r0, [r3, #0]
			if(j < 23) Data =Data << 1;
 800c064:	2c16      	cmp	r4, #22
 800c066:	d8d2      	bhi.n	800c00e <readHX711+0x1a>
 800c068:	0040      	lsls	r0, r0, #1
 800c06a:	6018      	str	r0, [r3, #0]
 800c06c:	e7cf      	b.n	800c00e <readHX711+0x1a>
	value =Data;
 800c06e:	4c14      	ldr	r4, [pc, #80]	; (800c0c0 <readHX711+0xcc>)
 800c070:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <readHX711+0xc8>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6022      	str	r2, [r4, #0]
	Data =0;
 800c076:	2200      	movs	r2, #0
 800c078:	601a      	str	r2, [r3, #0]
	portEXIT_CRITICAL();
 800c07a:	f005 fc1d 	bl	80118b8 <vPortExitCritical>
	if(value > ADC_full_range) {
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <readHX711+0xd0>)
 800c082:	4298      	cmp	r0, r3
 800c084:	d806      	bhi.n	800c094 <readHX711+0xa0>
		valuef =(float) value;
 800c086:	f7f5 fa6f 	bl	8001568 <__aeabi_ui2f>
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <readHX711+0xd4>)
 800c08c:	6018      	str	r0, [r3, #0]
	return (valuef);		
 800c08e:	4b0e      	ldr	r3, [pc, #56]	; (800c0c8 <readHX711+0xd4>)
 800c090:	6818      	ldr	r0, [r3, #0]
}
 800c092:	bd10      	pop	{r4, pc}
		value = (~value & 0x00FFFFFF);
 800c094:	43c0      	mvns	r0, r0
 800c096:	0200      	lsls	r0, r0, #8
 800c098:	0a00      	lsrs	r0, r0, #8
		value +=1;// the output of the ADC
 800c09a:	3001      	adds	r0, #1
 800c09c:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <readHX711+0xcc>)
 800c09e:	6018      	str	r0, [r3, #0]
		valuef =-(float) value;
 800c0a0:	f7f5 fa62 	bl	8001568 <__aeabi_ui2f>
 800c0a4:	2380      	movs	r3, #128	; 0x80
 800c0a6:	061b      	lsls	r3, r3, #24
 800c0a8:	469c      	mov	ip, r3
 800c0aa:	4460      	add	r0, ip
 800c0ac:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <readHX711+0xd4>)
 800c0ae:	6018      	str	r0, [r3, #0]
 800c0b0:	e7ed      	b.n	800c08e <readHX711+0x9a>
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	20001b46 	.word	0x20001b46
 800c0b8:	20001720 	.word	0x20001720
 800c0bc:	20001728 	.word	0x20001728
 800c0c0:	20001b58 	.word	0x20001b58
 800c0c4:	007fffff 	.word	0x007fffff
 800c0c8:	20001b5c 	.word	0x20001b5c

0800c0cc <weightCalculation>:
{
 800c0cc:	b570      	push	{r4, r5, r6, lr}
	rawvalue = (valuef * 0.5 * AVDD) / (ADC_full_range * gain) + cell_drift - IC_drift - Zero_Drift;//+0.000022;
 800c0ce:	4b22      	ldr	r3, [pc, #136]	; (800c158 <weightCalculation+0x8c>)
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	f7f7 f827 	bl	8003124 <__aeabi_f2d>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4b20      	ldr	r3, [pc, #128]	; (800c15c <weightCalculation+0x90>)
 800c0da:	f7f6 f9ab 	bl	8002434 <__aeabi_dmul>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <weightCalculation+0x94>)
 800c0e2:	f7f6 f9a7 	bl	8002434 <__aeabi_dmul>
 800c0e6:	0004      	movs	r4, r0
 800c0e8:	000d      	movs	r5, r1
 800c0ea:	4b1e      	ldr	r3, [pc, #120]	; (800c164 <weightCalculation+0x98>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	05d8      	lsls	r0, r3, #23
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	f7f6 ffab 	bl	800304c <__aeabi_i2d>
 800c0f6:	0002      	movs	r2, r0
 800c0f8:	000b      	movs	r3, r1
 800c0fa:	0020      	movs	r0, r4
 800c0fc:	0029      	movs	r1, r5
 800c0fe:	f7f5 fd8f 	bl	8001c20 <__aeabi_ddiv>
 800c102:	0004      	movs	r4, r0
 800c104:	000d      	movs	r5, r1
 800c106:	4b18      	ldr	r3, [pc, #96]	; (800c168 <weightCalculation+0x9c>)
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7f7 f80b 	bl	8003124 <__aeabi_f2d>
 800c10e:	0022      	movs	r2, r4
 800c110:	002b      	movs	r3, r5
 800c112:	f7f5 fa69 	bl	80015e8 <__aeabi_dadd>
 800c116:	4a15      	ldr	r2, [pc, #84]	; (800c16c <weightCalculation+0xa0>)
 800c118:	4b15      	ldr	r3, [pc, #84]	; (800c170 <weightCalculation+0xa4>)
 800c11a:	f7f6 fbfd 	bl	8002918 <__aeabi_dsub>
 800c11e:	0004      	movs	r4, r0
 800c120:	000d      	movs	r5, r1
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <weightCalculation+0xa8>)
 800c124:	6818      	ldr	r0, [r3, #0]
 800c126:	f7f6 fffd 	bl	8003124 <__aeabi_f2d>
 800c12a:	0002      	movs	r2, r0
 800c12c:	000b      	movs	r3, r1
 800c12e:	0020      	movs	r0, r4
 800c130:	0029      	movs	r1, r5
 800c132:	f7f6 fbf1 	bl	8002918 <__aeabi_dsub>
 800c136:	f7f7 f847 	bl	80031c8 <__aeabi_d2f>
 800c13a:	1c04      	adds	r4, r0, #0
 800c13c:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <weightCalculation+0xac>)
 800c13e:	6018      	str	r0, [r3, #0]
	weight = (rawvalue * full_scale) / calibration_factor;
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <weightCalculation+0xb0>)
 800c142:	8818      	ldrh	r0, [r3, #0]
 800c144:	f7f5 f9c6 	bl	80014d4 <__aeabi_i2f>
 800c148:	1c21      	adds	r1, r4, #0
 800c14a:	f7f4 fead 	bl	8000ea8 <__aeabi_fmul>
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <weightCalculation+0xb4>)
 800c150:	6819      	ldr	r1, [r3, #0]
 800c152:	f7f4 fcd1 	bl	8000af8 <__aeabi_fdiv>
}
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	20001b5c 	.word	0x20001b5c
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	40080000 	.word	0x40080000
 800c164:	2000008c 	.word	0x2000008c
 800c168:	20000088 	.word	0x20000088
 800c16c:	62317873 	.word	0x62317873
 800c170:	3ee3abd9 	.word	0x3ee3abd9
 800c174:	20001b38 	.word	0x20001b38
 800c178:	20001b48 	.word	0x20001b48
 800c17c:	20001b44 	.word	0x20001b44
 800c180:	20001b3c 	.word	0x20001b3c

0800c184 <SetHX711Rate>:
{
 800c184:	b510      	push	{r4, lr}
 800c186:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c188:	2180      	movs	r1, #128	; 0x80
 800c18a:	2090      	movs	r0, #144	; 0x90
 800c18c:	2200      	movs	r2, #0
 800c18e:	0089      	lsls	r1, r1, #2
 800c190:	05c0      	lsls	r0, r0, #23
 800c192:	f007 f910 	bl	80133b6 <HAL_GPIO_WritePin>
	rate=Data_Rate;
 800c196:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <SetHX711Rate+0x48>)
 800c198:	701c      	strb	r4, [r3, #0]
	switch(rate)
 800c19a:	2c0a      	cmp	r4, #10
 800c19c:	d008      	beq.n	800c1b0 <SetHX711Rate+0x2c>
 800c19e:	2c50      	cmp	r4, #80	; 0x50
 800c1a0:	d00d      	beq.n	800c1be <SetHX711Rate+0x3a>
		default: HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET);
 800c1a2:	2090      	movs	r0, #144	; 0x90
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2140      	movs	r1, #64	; 0x40
 800c1a8:	05c0      	lsls	r0, r0, #23
 800c1aa:	f007 f904 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800c1ae:	e005      	b.n	800c1bc <SetHX711Rate+0x38>
		case(10): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET); break;
 800c1b0:	2090      	movs	r0, #144	; 0x90
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2140      	movs	r1, #64	; 0x40
 800c1b6:	05c0      	lsls	r0, r0, #23
 800c1b8:	f007 f8fd 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800c1bc:	bd10      	pop	{r4, pc}
		case(80): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_SET); break;
 800c1be:	2090      	movs	r0, #144	; 0x90
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	2140      	movs	r1, #64	; 0x40
 800c1c4:	05c0      	lsls	r0, r0, #23
 800c1c6:	f007 f8f6 	bl	80133b6 <HAL_GPIO_WritePin>
 800c1ca:	e7f7      	b.n	800c1bc <SetHX711Rate+0x38>
 800c1cc:	20001b47 	.word	0x20001b47

0800c1d0 <rateCommand>:
{
 800c1d0:	b530      	push	{r4, r5, lr}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	0004      	movs	r4, r0
 800c1d6:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800c1dc:	2c00      	cmp	r4, #0
 800c1de:	d101      	bne.n	800c1e4 <rateCommand+0x14>
 800c1e0:	b672      	cpsid	i
 800c1e2:	e7fe      	b.n	800c1e2 <rateCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c1e4:	aa01      	add	r2, sp, #4
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	f003 fd8a 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c1ec:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "10", 2))
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	4914      	ldr	r1, [pc, #80]	; (800c244 <rateCommand+0x74>)
 800c1f2:	f009 fad9 	bl	80157a8 <strncmp>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d00c      	beq.n	800c214 <rateCommand+0x44>
  else if (!strncmp((const char *)pcParameterString1, "80", 2))
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	4912      	ldr	r1, [pc, #72]	; (800c248 <rateCommand+0x78>)
 800c1fe:	0028      	movs	r0, r5
 800c200:	f009 fad2 	bl	80157a8 <strncmp>
 800c204:	2800      	cmp	r0, #0
 800c206:	d014      	beq.n	800c232 <rateCommand+0x62>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c208:	2213      	movs	r2, #19
 800c20a:	4910      	ldr	r1, [pc, #64]	; (800c24c <rateCommand+0x7c>)
 800c20c:	0020      	movs	r0, r4
 800c20e:	f009 f884 	bl	801531a <memcpy>
 800c212:	e007      	b.n	800c224 <rateCommand+0x54>
    rate = 10;      // 10SPS
 800c214:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <rateCommand+0x80>)
 800c216:	220a      	movs	r2, #10
 800c218:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 10\r\n" );
 800c21a:	3212      	adds	r2, #18
 800c21c:	490d      	ldr	r1, [pc, #52]	; (800c254 <rateCommand+0x84>)
 800c21e:	0020      	movs	r0, r4
 800c220:	f009 f87b 	bl	801531a <memcpy>
	SetHX711Rate(rate);
 800c224:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <rateCommand+0x80>)
 800c226:	7818      	ldrb	r0, [r3, #0]
 800c228:	f7ff ffac 	bl	800c184 <SetHX711Rate>
}
 800c22c:	2000      	movs	r0, #0
 800c22e:	b003      	add	sp, #12
 800c230:	bd30      	pop	{r4, r5, pc}
    rate = 80;      // 80SPS
 800c232:	4b07      	ldr	r3, [pc, #28]	; (800c250 <rateCommand+0x80>)
 800c234:	2250      	movs	r2, #80	; 0x50
 800c236:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 80\r\n" );
 800c238:	3a34      	subs	r2, #52	; 0x34
 800c23a:	4907      	ldr	r1, [pc, #28]	; (800c258 <rateCommand+0x88>)
 800c23c:	0020      	movs	r0, r4
 800c23e:	f009 f86c 	bl	801531a <memcpy>
 800c242:	e7ef      	b.n	800c224 <rateCommand+0x54>
 800c244:	0801b1f8 	.word	0x0801b1f8
 800c248:	0801ca5c 	.word	0x0801ca5c
 800c24c:	0801b0d0 	.word	0x0801b0d0
 800c250:	20001b47 	.word	0x20001b47
 800c254:	0801ca40 	.word	0x0801ca40
 800c258:	0801ca60 	.word	0x0801ca60

0800c25c <formatModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE formatModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800c25c:	b510      	push	{r4, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	0004      	movs	r4, r0
 800c262:	0010      	movs	r0, r2
	//Module_Status result = H26R0_OK;
  int8_t *pcParameterString1;
  portBASE_TYPE xParameterStringLength1 = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	9301      	str	r3, [sp, #4]

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800c268:	2c00      	cmp	r4, #0
 800c26a:	d101      	bne.n	800c270 <formatModParamCommand+0x14>
 800c26c:	b672      	cpsid	i
 800c26e:	e7fe      	b.n	800c26e <formatModParamCommand+0x12>

  /* 1st parameter for naming of uart port: P1 to P6 */
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c270:	aa01      	add	r2, sp, #4
 800c272:	2101      	movs	r1, #1
 800c274:	f003 fd44 	bl	800fd00 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "u", 1))
 800c278:	7803      	ldrb	r3, [r0, #0]
 800c27a:	2b75      	cmp	r3, #117	; 0x75
 800c27c:	d00d      	beq.n	800c29a <formatModParamCommand+0x3e>
  {
    H26R0_DATA_FORMAT = FMT_UINT32;      
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
  }
  else if (!strncmp((const char *)pcParameterString1, "f", 1))
 800c27e:	2b66      	cmp	r3, #102	; 0x66
 800c280:	d014      	beq.n	800c2ac <formatModParamCommand+0x50>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
  }
	else
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c282:	2213      	movs	r2, #19
 800c284:	490e      	ldr	r1, [pc, #56]	; (800c2c0 <formatModParamCommand+0x64>)
 800c286:	0020      	movs	r0, r4
 800c288:	f009 f847 	bl	801531a <memcpy>
	}
	SetHX711Rate(rate);
 800c28c:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <formatModParamCommand+0x68>)
 800c28e:	7818      	ldrb	r0, [r3, #0]
 800c290:	f7ff ff78 	bl	800c184 <SetHX711Rate>
	return pdFALSE;	
}
 800c294:	2000      	movs	r0, #0
 800c296:	b002      	add	sp, #8
 800c298:	bd10      	pop	{r4, pc}
    H26R0_DATA_FORMAT = FMT_UINT32;      
 800c29a:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <formatModParamCommand+0x6c>)
 800c29c:	2205      	movs	r2, #5
 800c29e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
 800c2a0:	3214      	adds	r2, #20
 800c2a2:	490a      	ldr	r1, [pc, #40]	; (800c2cc <formatModParamCommand+0x70>)
 800c2a4:	0020      	movs	r0, r4
 800c2a6:	f009 f838 	bl	801531a <memcpy>
 800c2aa:	e7ef      	b.n	800c28c <formatModParamCommand+0x30>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <formatModParamCommand+0x6c>)
 800c2ae:	2207      	movs	r2, #7
 800c2b0:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
 800c2b2:	3213      	adds	r2, #19
 800c2b4:	4906      	ldr	r1, [pc, #24]	; (800c2d0 <formatModParamCommand+0x74>)
 800c2b6:	0020      	movs	r0, r4
 800c2b8:	f009 f82f 	bl	801531a <memcpy>
 800c2bc:	e7e6      	b.n	800c28c <formatModParamCommand+0x30>
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	0801b0d0 	.word	0x0801b0d0
 800c2c4:	20001b47 	.word	0x20001b47
 800c2c8:	20000084 	.word	0x20000084
 800c2cc:	0801ca08 	.word	0x0801ca08
 800c2d0:	0801ca24 	.word	0x0801ca24

0800c2d4 <SetHX711Gain>:
	switch(ch)
 800c2d4:	2801      	cmp	r0, #1
 800c2d6:	d005      	beq.n	800c2e4 <SetHX711Gain+0x10>
 800c2d8:	2802      	cmp	r0, #2
 800c2da:	d00a      	beq.n	800c2f2 <SetHX711Gain+0x1e>
		default: pulses=25;
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <SetHX711Gain+0x2c>)
 800c2de:	2219      	movs	r2, #25
 800c2e0:	701a      	strb	r2, [r3, #0]
}
 800c2e2:	e005      	b.n	800c2f0 <SetHX711Gain+0x1c>
		case(1): pulses=25;	gain=128; break;  //Chanel A, Gain factor 128
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <SetHX711Gain+0x2c>)
 800c2e6:	2219      	movs	r2, #25
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <SetHX711Gain+0x30>)
 800c2ec:	3267      	adds	r2, #103	; 0x67
 800c2ee:	701a      	strb	r2, [r3, #0]
}
 800c2f0:	4770      	bx	lr
		case(2): pulses=27; gain=32;  break;  //Chanel B, Gain factor 32
 800c2f2:	4b03      	ldr	r3, [pc, #12]	; (800c300 <SetHX711Gain+0x2c>)
 800c2f4:	221b      	movs	r2, #27
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <SetHX711Gain+0x30>)
 800c2fa:	3205      	adds	r2, #5
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	e7f7      	b.n	800c2f0 <SetHX711Gain+0x1c>
 800c300:	20001b46 	.word	0x20001b46
 800c304:	2000008c 	.word	0x2000008c

0800c308 <Calibration>:
{
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	0004      	movs	r4, r0
 800c30c:	1c0f      	adds	r7, r1, #0
	cell_output=Cell_Output;
 800c30e:	4d1b      	ldr	r5, [pc, #108]	; (800c37c <Calibration+0x74>)
 800c310:	6029      	str	r1, [r5, #0]
	full_scale=Full_Scale;
 800c312:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <Calibration+0x78>)
 800c314:	8018      	strh	r0, [r3, #0]
	cell_drift=Cell_Drift/1000.0f;
 800c316:	491b      	ldr	r1, [pc, #108]	; (800c384 <Calibration+0x7c>)
 800c318:	1c10      	adds	r0, r2, #0
 800c31a:	f7f4 fbed 	bl	8000af8 <__aeabi_fdiv>
 800c31e:	4e1a      	ldr	r6, [pc, #104]	; (800c388 <Calibration+0x80>)
 800c320:	6030      	str	r0, [r6, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800c322:	491a      	ldr	r1, [pc, #104]	; (800c38c <Calibration+0x84>)
 800c324:	1c38      	adds	r0, r7, #0
 800c326:	f7f4 fdbf 	bl	8000ea8 <__aeabi_fmul>
 800c32a:	4916      	ldr	r1, [pc, #88]	; (800c384 <Calibration+0x7c>)
 800c32c:	f7f4 fbe4 	bl	8000af8 <__aeabi_fdiv>
 800c330:	4b17      	ldr	r3, [pc, #92]	; (800c390 <Calibration+0x88>)
 800c332:	6018      	str	r0, [r3, #0]
	EE_WriteVariable(_EE_cell_full_scale, full_scale);
 800c334:	20fa      	movs	r0, #250	; 0xfa
 800c336:	0021      	movs	r1, r4
 800c338:	0040      	lsls	r0, r0, #1
 800c33a:	f7fb fd19 	bl	8007d70 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_drift;
 800c33e:	8831      	ldrh	r1, [r6, #0]
 800c340:	4f14      	ldr	r7, [pc, #80]	; (800c394 <Calibration+0x8c>)
 800c342:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_drift)+1);
 800c344:	4c14      	ldr	r4, [pc, #80]	; (800c398 <Calibration+0x90>)
 800c346:	8873      	ldrh	r3, [r6, #2]
 800c348:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_drift_LSB, word_LSB);
 800c34a:	20f6      	movs	r0, #246	; 0xf6
 800c34c:	30ff      	adds	r0, #255	; 0xff
 800c34e:	f7fb fd0f 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_drift_MSB, word_MSB);
 800c352:	8821      	ldrh	r1, [r4, #0]
 800c354:	20fb      	movs	r0, #251	; 0xfb
 800c356:	0040      	lsls	r0, r0, #1
 800c358:	f7fb fd0a 	bl	8007d70 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_output;
 800c35c:	8829      	ldrh	r1, [r5, #0]
 800c35e:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_output)+1);
 800c360:	886b      	ldrh	r3, [r5, #2]
 800c362:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_output_LSB, word_LSB);
 800c364:	20f8      	movs	r0, #248	; 0xf8
 800c366:	30ff      	adds	r0, #255	; 0xff
 800c368:	f7fb fd02 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_output_MSB, word_MSB);
 800c36c:	8821      	ldrh	r1, [r4, #0]
 800c36e:	20fc      	movs	r0, #252	; 0xfc
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	f7fb fcfd 	bl	8007d70 <EE_WriteVariable>
}
 800c376:	2000      	movs	r0, #0
 800c378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37a:	46c0      	nop			; (mov r8, r8)
 800c37c:	20001b40 	.word	0x20001b40
 800c380:	20001b44 	.word	0x20001b44
 800c384:	447a0000 	.word	0x447a0000
 800c388:	20000088 	.word	0x20000088
 800c38c:	40400000 	.word	0x40400000
 800c390:	20001b3c 	.word	0x20001b3c
 800c394:	20001b70 	.word	0x20001b70
 800c398:	20001b72 	.word	0x20001b72

0800c39c <calibrationCommand>:
{
 800c39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	9001      	str	r0, [sp, #4]
 800c3a2:	0017      	movs	r7, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength2 = 0;
 800c3a8:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength3 = 0;
 800c3aa:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d101      	bne.n	800c3b4 <calibrationCommand+0x18>
 800c3b0:	b672      	cpsid	i
 800c3b2:	e7fe      	b.n	800c3b2 <calibrationCommand+0x16>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c3b4:	aa05      	add	r2, sp, #20
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	0038      	movs	r0, r7
 800c3ba:	f003 fca1 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c3be:	0004      	movs	r4, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c3c0:	aa04      	add	r2, sp, #16
 800c3c2:	2102      	movs	r1, #2
 800c3c4:	0038      	movs	r0, r7
 800c3c6:	f003 fc9b 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c3ca:	0006      	movs	r6, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c3cc:	aa03      	add	r2, sp, #12
 800c3ce:	2103      	movs	r1, #3
 800c3d0:	0038      	movs	r0, r7
 800c3d2:	f003 fc95 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c3d6:	0007      	movs	r7, r0
  if (NULL != pcParameterString1)
 800c3d8:	2c00      	cmp	r4, #0
 800c3da:	d023      	beq.n	800c424 <calibrationCommand+0x88>
    load_cell_scale = atoi( (char *)pcParameterString1);
 800c3dc:	0020      	movs	r0, r4
 800c3de:	f008 fd0c 	bl	8014dfa <atoi>
 800c3e2:	b284      	uxth	r4, r0
	Module_Status result = H26R0_OK;
 800c3e4:	2500      	movs	r5, #0
	if (NULL != pcParameterString2)
 800c3e6:	2e00      	cmp	r6, #0
 800c3e8:	d01f      	beq.n	800c42a <calibrationCommand+0x8e>
    load_cell_output = atof( (char *)pcParameterString2);
 800c3ea:	0030      	movs	r0, r6
 800c3ec:	f008 fd00 	bl	8014df0 <atof>
 800c3f0:	f7f6 feea 	bl	80031c8 <__aeabi_d2f>
 800c3f4:	1c06      	adds	r6, r0, #0
  if (NULL != pcParameterString3)
 800c3f6:	2f00      	cmp	r7, #0
 800c3f8:	d01a      	beq.n	800c430 <calibrationCommand+0x94>
      load_cell_drift = atof( (char *)pcParameterString3);
 800c3fa:	0038      	movs	r0, r7
 800c3fc:	f008 fcf8 	bl	8014df0 <atof>
 800c400:	f7f6 fee2 	bl	80031c8 <__aeabi_d2f>
 800c404:	1c07      	adds	r7, r0, #0
  if (H26R0_ERR_WrongParams == result)
 800c406:	2d02      	cmp	r5, #2
 800c408:	d013      	beq.n	800c432 <calibrationCommand+0x96>
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c40a:	2228      	movs	r2, #40	; 0x28
 800c40c:	490c      	ldr	r1, [pc, #48]	; (800c440 <calibrationCommand+0xa4>)
 800c40e:	9801      	ldr	r0, [sp, #4]
 800c410:	f008 ff83 	bl	801531a <memcpy>
	Calibration(load_cell_scale, load_cell_output, load_cell_drift);
 800c414:	1c3a      	adds	r2, r7, #0
 800c416:	1c31      	adds	r1, r6, #0
 800c418:	0020      	movs	r0, r4
 800c41a:	f7ff ff75 	bl	800c308 <Calibration>
}
 800c41e:	2000      	movs	r0, #0
 800c420:	b007      	add	sp, #28
 800c422:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t load_cell_scale=0;
 800c424:	2400      	movs	r4, #0
    result = H26R0_ERR_WrongParams;
 800c426:	2502      	movs	r5, #2
 800c428:	e7dd      	b.n	800c3e6 <calibrationCommand+0x4a>
	float load_cell_output=0.0f;
 800c42a:	2600      	movs	r6, #0
    result = H26R0_ERR_WrongParams;
 800c42c:	2502      	movs	r5, #2
 800c42e:	e7e2      	b.n	800c3f6 <calibrationCommand+0x5a>
	float load_cell_drift=0.0f;
 800c430:	2700      	movs	r7, #0
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c432:	2213      	movs	r2, #19
 800c434:	4903      	ldr	r1, [pc, #12]	; (800c444 <calibrationCommand+0xa8>)
 800c436:	9801      	ldr	r0, [sp, #4]
 800c438:	f008 ff6f 	bl	801531a <memcpy>
 800c43c:	e7e5      	b.n	800c40a <calibrationCommand+0x6e>
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	0801c964 	.word	0x0801c964
 800c444:	0801b0d0 	.word	0x0801b0d0

0800c448 <StreamGramToPort>:
{
 800c448:	b530      	push	{r4, r5, lr}
 800c44a:	b083      	sub	sp, #12
 800c44c:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c44e:	4d1b      	ldr	r5, [pc, #108]	; (800c4bc <StreamGramToPort+0x74>)
 800c450:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c452:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <StreamGramToPort+0x78>)
 800c454:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c456:	491b      	ldr	r1, [pc, #108]	; (800c4c4 <StreamGramToPort+0x7c>)
 800c458:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c45a:	4a1b      	ldr	r2, [pc, #108]	; (800c4c8 <StreamGramToPort+0x80>)
 800c45c:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c45e:	4b1b      	ldr	r3, [pc, #108]	; (800c4cc <StreamGramToPort+0x84>)
 800c460:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <StreamGramToPort+0x88>)
 800c464:	2202      	movs	r2, #2
 800c466:	701a      	strb	r2, [r3, #0]
	unit=Gram;
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <StreamGramToPort+0x8c>)
 800c46a:	3a01      	subs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c46e:	1e63      	subs	r3, r4, #1
 800c470:	3303      	adds	r3, #3
 800c472:	d902      	bls.n	800c47a <StreamGramToPort+0x32>
}	
 800c474:	2000      	movs	r0, #0
 800c476:	b003      	add	sp, #12
 800c478:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c47a:	0163      	lsls	r3, r4, #5
 800c47c:	1b1b      	subs	r3, r3, r4
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	191c      	adds	r4, r3, r4
 800c482:	00e0      	lsls	r0, r4, #3
 800c484:	21fa      	movs	r1, #250	; 0xfa
 800c486:	0089      	lsls	r1, r1, #2
 800c488:	f7f3 fe62 	bl	8000150 <__udivsi3>
 800c48c:	0001      	movs	r1, r0
 800c48e:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <StreamGramToPort+0x90>)
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	23ff      	movs	r3, #255	; 0xff
 800c494:	2200      	movs	r2, #0
 800c496:	4811      	ldr	r0, [pc, #68]	; (800c4dc <StreamGramToPort+0x94>)
 800c498:	f005 f832 	bl	8011500 <xTimerCreate>
 800c49c:	0004      	movs	r4, r0
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <StreamGramToPort+0x98>)
 800c4a0:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c4a2:	f004 fabf 	bl	8010a24 <xTaskGetTickCount>
 800c4a6:	0002      	movs	r2, r0
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	425b      	negs	r3, r3
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	0020      	movs	r0, r4
 800c4b4:	f005 f848 	bl	8011548 <xTimerGenericCommand>
 800c4b8:	e7dc      	b.n	800c474 <StreamGramToPort+0x2c>
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	20006f34 	.word	0x20006f34
 800c4c0:	20006f36 	.word	0x20006f36
 800c4c4:	20007174 	.word	0x20007174
 800c4c8:	20007100 	.word	0x20007100
 800c4cc:	20007178 	.word	0x20007178
 800c4d0:	20006f35 	.word	0x20006f35
 800c4d4:	200000b4 	.word	0x200000b4
 800c4d8:	0800bb69 	.word	0x0800bb69
 800c4dc:	0801c93c 	.word	0x0801c93c
 800c4e0:	20001b74 	.word	0x20001b74

0800c4e4 <StreamKGramToPort>:
{
 800c4e4:	b530      	push	{r4, r5, lr}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c4ea:	4d1a      	ldr	r5, [pc, #104]	; (800c554 <StreamKGramToPort+0x70>)
 800c4ec:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c4ee:	481a      	ldr	r0, [pc, #104]	; (800c558 <StreamKGramToPort+0x74>)
 800c4f0:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c4f2:	491a      	ldr	r1, [pc, #104]	; (800c55c <StreamKGramToPort+0x78>)
 800c4f4:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c4f6:	4a1a      	ldr	r2, [pc, #104]	; (800c560 <StreamKGramToPort+0x7c>)
 800c4f8:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c4fa:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <StreamKGramToPort+0x80>)
 800c4fc:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c4fe:	2302      	movs	r3, #2
 800c500:	4a19      	ldr	r2, [pc, #100]	; (800c568 <StreamKGramToPort+0x84>)
 800c502:	7013      	strb	r3, [r2, #0]
	unit=KGram;
 800c504:	4a19      	ldr	r2, [pc, #100]	; (800c56c <StreamKGramToPort+0x88>)
 800c506:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c508:	1e63      	subs	r3, r4, #1
 800c50a:	3303      	adds	r3, #3
 800c50c:	d902      	bls.n	800c514 <StreamKGramToPort+0x30>
}
 800c50e:	2000      	movs	r0, #0
 800c510:	b003      	add	sp, #12
 800c512:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c514:	0163      	lsls	r3, r4, #5
 800c516:	1b1b      	subs	r3, r3, r4
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	191c      	adds	r4, r3, r4
 800c51c:	00e0      	lsls	r0, r4, #3
 800c51e:	21fa      	movs	r1, #250	; 0xfa
 800c520:	0089      	lsls	r1, r1, #2
 800c522:	f7f3 fe15 	bl	8000150 <__udivsi3>
 800c526:	0001      	movs	r1, r0
 800c528:	4b11      	ldr	r3, [pc, #68]	; (800c570 <StreamKGramToPort+0x8c>)
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	23ff      	movs	r3, #255	; 0xff
 800c52e:	2200      	movs	r2, #0
 800c530:	4810      	ldr	r0, [pc, #64]	; (800c574 <StreamKGramToPort+0x90>)
 800c532:	f004 ffe5 	bl	8011500 <xTimerCreate>
 800c536:	0004      	movs	r4, r0
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <StreamKGramToPort+0x94>)
 800c53a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c53c:	f004 fa72 	bl	8010a24 <xTaskGetTickCount>
 800c540:	0002      	movs	r2, r0
 800c542:	2301      	movs	r3, #1
 800c544:	425b      	negs	r3, r3
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	2300      	movs	r3, #0
 800c54a:	2101      	movs	r1, #1
 800c54c:	0020      	movs	r0, r4
 800c54e:	f004 fffb 	bl	8011548 <xTimerGenericCommand>
 800c552:	e7dc      	b.n	800c50e <StreamKGramToPort+0x2a>
 800c554:	20006f34 	.word	0x20006f34
 800c558:	20006f36 	.word	0x20006f36
 800c55c:	20007174 	.word	0x20007174
 800c560:	20007100 	.word	0x20007100
 800c564:	20007178 	.word	0x20007178
 800c568:	20006f35 	.word	0x20006f35
 800c56c:	200000b4 	.word	0x200000b4
 800c570:	0800bb69 	.word	0x0800bb69
 800c574:	0801c950 	.word	0x0801c950
 800c578:	20001b74 	.word	0x20001b74

0800c57c <StreamOunceToPort>:
{
 800c57c:	b530      	push	{r4, r5, lr}
 800c57e:	b083      	sub	sp, #12
 800c580:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c582:	4d1b      	ldr	r5, [pc, #108]	; (800c5f0 <StreamOunceToPort+0x74>)
 800c584:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c586:	481b      	ldr	r0, [pc, #108]	; (800c5f4 <StreamOunceToPort+0x78>)
 800c588:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c58a:	491b      	ldr	r1, [pc, #108]	; (800c5f8 <StreamOunceToPort+0x7c>)
 800c58c:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c58e:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <StreamOunceToPort+0x80>)
 800c590:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c592:	4b1b      	ldr	r3, [pc, #108]	; (800c600 <StreamOunceToPort+0x84>)
 800c594:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c596:	4b1b      	ldr	r3, [pc, #108]	; (800c604 <StreamOunceToPort+0x88>)
 800c598:	2202      	movs	r2, #2
 800c59a:	701a      	strb	r2, [r3, #0]
	unit=Ounce;
 800c59c:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <StreamOunceToPort+0x8c>)
 800c59e:	3201      	adds	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c5a2:	1e63      	subs	r3, r4, #1
 800c5a4:	3303      	adds	r3, #3
 800c5a6:	d902      	bls.n	800c5ae <StreamOunceToPort+0x32>
}
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	b003      	add	sp, #12
 800c5ac:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c5ae:	0163      	lsls	r3, r4, #5
 800c5b0:	1b1b      	subs	r3, r3, r4
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	191c      	adds	r4, r3, r4
 800c5b6:	00e0      	lsls	r0, r4, #3
 800c5b8:	21fa      	movs	r1, #250	; 0xfa
 800c5ba:	0089      	lsls	r1, r1, #2
 800c5bc:	f7f3 fdc8 	bl	8000150 <__udivsi3>
 800c5c0:	0001      	movs	r1, r0
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <StreamOunceToPort+0x90>)
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	23ff      	movs	r3, #255	; 0xff
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4811      	ldr	r0, [pc, #68]	; (800c610 <StreamOunceToPort+0x94>)
 800c5cc:	f004 ff98 	bl	8011500 <xTimerCreate>
 800c5d0:	0004      	movs	r4, r0
 800c5d2:	4b10      	ldr	r3, [pc, #64]	; (800c614 <StreamOunceToPort+0x98>)
 800c5d4:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c5d6:	f004 fa25 	bl	8010a24 <xTaskGetTickCount>
 800c5da:	0002      	movs	r2, r0
 800c5dc:	2301      	movs	r3, #1
 800c5de:	425b      	negs	r3, r3
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	0020      	movs	r0, r4
 800c5e8:	f004 ffae 	bl	8011548 <xTimerGenericCommand>
 800c5ec:	e7dc      	b.n	800c5a8 <StreamOunceToPort+0x2c>
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	20006f34 	.word	0x20006f34
 800c5f4:	20006f36 	.word	0x20006f36
 800c5f8:	20007174 	.word	0x20007174
 800c5fc:	20007100 	.word	0x20007100
 800c600:	20007178 	.word	0x20007178
 800c604:	20006f35 	.word	0x20006f35
 800c608:	200000b4 	.word	0x200000b4
 800c60c:	0800bb69 	.word	0x0800bb69
 800c610:	0801c950 	.word	0x0801c950
 800c614:	20001b74 	.word	0x20001b74

0800c618 <StreamPoundToPort>:
{
 800c618:	b530      	push	{r4, r5, lr}
 800c61a:	b083      	sub	sp, #12
 800c61c:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c61e:	4d1b      	ldr	r5, [pc, #108]	; (800c68c <StreamPoundToPort+0x74>)
 800c620:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c622:	481b      	ldr	r0, [pc, #108]	; (800c690 <StreamPoundToPort+0x78>)
 800c624:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c626:	491b      	ldr	r1, [pc, #108]	; (800c694 <StreamPoundToPort+0x7c>)
 800c628:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c62a:	4a1b      	ldr	r2, [pc, #108]	; (800c698 <StreamPoundToPort+0x80>)
 800c62c:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c62e:	4b1b      	ldr	r3, [pc, #108]	; (800c69c <StreamPoundToPort+0x84>)
 800c630:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c632:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <StreamPoundToPort+0x88>)
 800c634:	2202      	movs	r2, #2
 800c636:	701a      	strb	r2, [r3, #0]
	unit=Pound;
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <StreamPoundToPort+0x8c>)
 800c63a:	3202      	adds	r2, #2
 800c63c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c63e:	1e63      	subs	r3, r4, #1
 800c640:	3303      	adds	r3, #3
 800c642:	d902      	bls.n	800c64a <StreamPoundToPort+0x32>
}
 800c644:	2000      	movs	r0, #0
 800c646:	b003      	add	sp, #12
 800c648:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c64a:	0163      	lsls	r3, r4, #5
 800c64c:	1b1b      	subs	r3, r3, r4
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	191c      	adds	r4, r3, r4
 800c652:	00e0      	lsls	r0, r4, #3
 800c654:	21fa      	movs	r1, #250	; 0xfa
 800c656:	0089      	lsls	r1, r1, #2
 800c658:	f7f3 fd7a 	bl	8000150 <__udivsi3>
 800c65c:	0001      	movs	r1, r0
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <StreamPoundToPort+0x90>)
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	23ff      	movs	r3, #255	; 0xff
 800c664:	2200      	movs	r2, #0
 800c666:	4811      	ldr	r0, [pc, #68]	; (800c6ac <StreamPoundToPort+0x94>)
 800c668:	f004 ff4a 	bl	8011500 <xTimerCreate>
 800c66c:	0004      	movs	r4, r0
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <StreamPoundToPort+0x98>)
 800c670:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c672:	f004 f9d7 	bl	8010a24 <xTaskGetTickCount>
 800c676:	0002      	movs	r2, r0
 800c678:	2301      	movs	r3, #1
 800c67a:	425b      	negs	r3, r3
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	2300      	movs	r3, #0
 800c680:	2101      	movs	r1, #1
 800c682:	0020      	movs	r0, r4
 800c684:	f004 ff60 	bl	8011548 <xTimerGenericCommand>
 800c688:	e7dc      	b.n	800c644 <StreamPoundToPort+0x2c>
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	20006f34 	.word	0x20006f34
 800c690:	20006f36 	.word	0x20006f36
 800c694:	20007174 	.word	0x20007174
 800c698:	20007100 	.word	0x20007100
 800c69c:	20007178 	.word	0x20007178
 800c6a0:	20006f35 	.word	0x20006f35
 800c6a4:	200000b4 	.word	0x200000b4
 800c6a8:	0800bb69 	.word	0x0800bb69
 800c6ac:	0801c950 	.word	0x0801c950
 800c6b0:	20001b74 	.word	0x20001b74

0800c6b4 <StreamKGramToCLI>:
{
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	b082      	sub	sp, #8
	global_ch=Ch;
 800c6b8:	4b1a      	ldr	r3, [pc, #104]	; (800c724 <StreamKGramToCLI+0x70>)
 800c6ba:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	; (800c728 <StreamKGramToCLI+0x74>)
 800c6be:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c6c0:	4b1a      	ldr	r3, [pc, #104]	; (800c72c <StreamKGramToCLI+0x78>)
 800c6c2:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c6c4:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <StreamKGramToCLI+0x7c>)
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c6ca:	1e53      	subs	r3, r2, #1
 800c6cc:	3303      	adds	r3, #3
 800c6ce:	d909      	bls.n	800c6e4 <StreamKGramToCLI+0x30>
	if (global_timeout > 0)
 800c6d0:	4b16      	ldr	r3, [pc, #88]	; (800c72c <StreamKGramToCLI+0x78>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <StreamKGramToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c6d8:	4b16      	ldr	r3, [pc, #88]	; (800c734 <StreamKGramToCLI+0x80>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
}
 800c6de:	2000      	movs	r0, #0
 800c6e0:	b002      	add	sp, #8
 800c6e2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c6e4:	0153      	lsls	r3, r2, #5
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	189a      	adds	r2, r3, r2
 800c6ec:	00d0      	lsls	r0, r2, #3
 800c6ee:	21fa      	movs	r1, #250	; 0xfa
 800c6f0:	0089      	lsls	r1, r1, #2
 800c6f2:	f7f3 fd2d 	bl	8000150 <__udivsi3>
 800c6f6:	0001      	movs	r1, r0
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <StreamKGramToCLI+0x84>)
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	2200      	movs	r2, #0
 800c700:	480e      	ldr	r0, [pc, #56]	; (800c73c <StreamKGramToCLI+0x88>)
 800c702:	f004 fefd 	bl	8011500 <xTimerCreate>
 800c706:	0004      	movs	r4, r0
 800c708:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <StreamKGramToCLI+0x8c>)
 800c70a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c70c:	f004 f98a 	bl	8010a24 <xTaskGetTickCount>
 800c710:	0002      	movs	r2, r0
 800c712:	2301      	movs	r3, #1
 800c714:	425b      	negs	r3, r3
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	2300      	movs	r3, #0
 800c71a:	2101      	movs	r1, #1
 800c71c:	0020      	movs	r0, r4
 800c71e:	f004 ff13 	bl	8011548 <xTimerGenericCommand>
 800c722:	e7d5      	b.n	800c6d0 <StreamKGramToCLI+0x1c>
 800c724:	20006f34 	.word	0x20006f34
 800c728:	20007100 	.word	0x20007100
 800c72c:	20007178 	.word	0x20007178
 800c730:	20006f35 	.word	0x20006f35
 800c734:	20001b4c 	.word	0x20001b4c
 800c738:	0800bb69 	.word	0x0800bb69
 800c73c:	0801c950 	.word	0x0801c950
 800c740:	20001b74 	.word	0x20001b74

0800c744 <demoCommand>:
{
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	0004      	movs	r4, r0
 800c74a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800c750:	2c00      	cmp	r4, #0
 800c752:	d101      	bne.n	800c758 <demoCommand+0x14>
 800c754:	b672      	cpsid	i
 800c756:	e7fe      	b.n	800c756 <demoCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c758:	aa03      	add	r2, sp, #12
 800c75a:	2101      	movs	r1, #1
 800c75c:	f003 fad0 	bl	800fd00 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800c760:	2800      	cmp	r0, #0
 800c762:	d01b      	beq.n	800c79c <demoCommand+0x58>
    channel = atoi( (char *)pcParameterString1);
 800c764:	f008 fb49 	bl	8014dfa <atoi>
 800c768:	b2c5      	uxtb	r5, r0
	Module_Status result = H26R0_OK;
 800c76a:	2600      	movs	r6, #0
		if (channel == 1 || channel == 2)
 800c76c:	1e6b      	subs	r3, r5, #1
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b01      	cmp	r3, #1
 800c772:	d916      	bls.n	800c7a2 <demoCommand+0x5e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800c774:	2e00      	cmp	r6, #0
 800c776:	d101      	bne.n	800c77c <demoCommand+0x38>
 800c778:	2d01      	cmp	r5, #1
 800c77a:	d032      	beq.n	800c7e2 <demoCommand+0x9e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c77c:	2212      	movs	r2, #18
 800c77e:	491a      	ldr	r1, [pc, #104]	; (800c7e8 <demoCommand+0xa4>)
 800c780:	0020      	movs	r0, r4
 800c782:	f008 fdca 	bl	801531a <memcpy>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c786:	0020      	movs	r0, r4
 800c788:	f7f3 fcc6 	bl	8000118 <strlen>
 800c78c:	0002      	movs	r2, r0
 800c78e:	2100      	movs	r1, #0
 800c790:	0020      	movs	r0, r4
 800c792:	f008 fdcb 	bl	801532c <memset>
}
 800c796:	2000      	movs	r0, #0
 800c798:	b004      	add	sp, #16
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800c79c:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800c79e:	2500      	movs	r5, #0
 800c7a0:	e7e4      	b.n	800c76c <demoCommand+0x28>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c7a2:	2237      	movs	r2, #55	; 0x37
 800c7a4:	4911      	ldr	r1, [pc, #68]	; (800c7ec <demoCommand+0xa8>)
 800c7a6:	0020      	movs	r0, r4
 800c7a8:	f008 fdb7 	bl	801531a <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c7ac:	0020      	movs	r0, r4
 800c7ae:	f7f3 fcb3 	bl	8000118 <strlen>
 800c7b2:	b282      	uxth	r2, r0
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <demoCommand+0xac>)
 800c7b6:	7818      	ldrb	r0, [r3, #0]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	425b      	negs	r3, r3
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	3333      	adds	r3, #51	; 0x33
 800c7c0:	0021      	movs	r1, r4
 800c7c2:	f003 f843 	bl	800f84c <writePxMutex>
		StreamKGramToCLI(channel, 500, 10000);
 800c7c6:	21fa      	movs	r1, #250	; 0xfa
 800c7c8:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <demoCommand+0xb0>)
 800c7ca:	0049      	lsls	r1, r1, #1
 800c7cc:	0028      	movs	r0, r5
 800c7ce:	f7ff ff71 	bl	800c6b4 <StreamKGramToCLI>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){ Delay_ms(1); };
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <demoCommand+0xb4>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0cc      	beq.n	800c774 <demoCommand+0x30>
 800c7da:	2001      	movs	r0, #1
 800c7dc:	f005 f9e6 	bl	8011bac <HAL_Delay>
 800c7e0:	e7f7      	b.n	800c7d2 <demoCommand+0x8e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800c7e2:	2d02      	cmp	r5, #2
 800c7e4:	d1ca      	bne.n	800c77c <demoCommand+0x38>
 800c7e6:	e7ce      	b.n	800c786 <demoCommand+0x42>
 800c7e8:	0801c9e4 	.word	0x0801c9e4
 800c7ec:	0801c9ac 	.word	0x0801c9ac
 800c7f0:	20000a9f 	.word	0x20000a9f
 800c7f4:	00002710 	.word	0x00002710
 800c7f8:	20001b4c 	.word	0x20001b4c

0800c7fc <StreamKGramToVERBOSE>:
{
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	b082      	sub	sp, #8
	global_ch=Ch;
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <StreamKGramToVERBOSE+0x70>)
 800c802:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c804:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <StreamKGramToVERBOSE+0x74>)
 800c806:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c808:	4b1a      	ldr	r3, [pc, #104]	; (800c874 <StreamKGramToVERBOSE+0x78>)
 800c80a:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_VERBOSE_CASE;
 800c80c:	4b1a      	ldr	r3, [pc, #104]	; (800c878 <StreamKGramToVERBOSE+0x7c>)
 800c80e:	2104      	movs	r1, #4
 800c810:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c812:	1e53      	subs	r3, r2, #1
 800c814:	3303      	adds	r3, #3
 800c816:	d909      	bls.n	800c82c <StreamKGramToVERBOSE+0x30>
	if (global_timeout > 0)
 800c818:	4b16      	ldr	r3, [pc, #88]	; (800c874 <StreamKGramToVERBOSE+0x78>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <StreamKGramToVERBOSE+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c820:	4b16      	ldr	r3, [pc, #88]	; (800c87c <StreamKGramToVERBOSE+0x80>)
 800c822:	2201      	movs	r2, #1
 800c824:	701a      	strb	r2, [r3, #0]
}
 800c826:	2000      	movs	r0, #0
 800c828:	b002      	add	sp, #8
 800c82a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c82c:	0153      	lsls	r3, r2, #5
 800c82e:	1a9b      	subs	r3, r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	189a      	adds	r2, r3, r2
 800c834:	00d0      	lsls	r0, r2, #3
 800c836:	21fa      	movs	r1, #250	; 0xfa
 800c838:	0089      	lsls	r1, r1, #2
 800c83a:	f7f3 fc89 	bl	8000150 <__udivsi3>
 800c83e:	0001      	movs	r1, r0
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <StreamKGramToVERBOSE+0x84>)
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	23ff      	movs	r3, #255	; 0xff
 800c846:	2200      	movs	r2, #0
 800c848:	480e      	ldr	r0, [pc, #56]	; (800c884 <StreamKGramToVERBOSE+0x88>)
 800c84a:	f004 fe59 	bl	8011500 <xTimerCreate>
 800c84e:	0004      	movs	r4, r0
 800c850:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <StreamKGramToVERBOSE+0x8c>)
 800c852:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c854:	f004 f8e6 	bl	8010a24 <xTaskGetTickCount>
 800c858:	0002      	movs	r2, r0
 800c85a:	2301      	movs	r3, #1
 800c85c:	425b      	negs	r3, r3
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	2300      	movs	r3, #0
 800c862:	2101      	movs	r1, #1
 800c864:	0020      	movs	r0, r4
 800c866:	f004 fe6f 	bl	8011548 <xTimerGenericCommand>
 800c86a:	e7d5      	b.n	800c818 <StreamKGramToVERBOSE+0x1c>
 800c86c:	20006f34 	.word	0x20006f34
 800c870:	20007100 	.word	0x20007100
 800c874:	20007178 	.word	0x20007178
 800c878:	20006f35 	.word	0x20006f35
 800c87c:	20001b4c 	.word	0x20001b4c
 800c880:	0800bb69 	.word	0x0800bb69
 800c884:	0801c950 	.word	0x0801c950
 800c888:	20001b74 	.word	0x20001b74

0800c88c <StreamRawToPort>:
{
 800c88c:	b510      	push	{r4, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	9a04      	ldr	r2, [sp, #16]
	global_ch=Ch;
 800c892:	491c      	ldr	r1, [pc, #112]	; (800c904 <StreamRawToPort+0x78>)
 800c894:	7008      	strb	r0, [r1, #0]
	global_period=Period;
 800c896:	491c      	ldr	r1, [pc, #112]	; (800c908 <StreamRawToPort+0x7c>)
 800c898:	600b      	str	r3, [r1, #0]
	global_timeout=Timeout;
 800c89a:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <StreamRawToPort+0x80>)
 800c89c:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c89e:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <StreamRawToPort+0x84>)
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	7019      	strb	r1, [r3, #0]
	unit=RAW;
 800c8a4:	4b1b      	ldr	r3, [pc, #108]	; (800c914 <StreamRawToPort+0x88>)
 800c8a6:	3103      	adds	r1, #3
 800c8a8:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c8aa:	1e53      	subs	r3, r2, #1
 800c8ac:	3303      	adds	r3, #3
 800c8ae:	d909      	bls.n	800c8c4 <StreamRawToPort+0x38>
	if (global_timeout > 0)
 800c8b0:	4b16      	ldr	r3, [pc, #88]	; (800c90c <StreamRawToPort+0x80>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <StreamRawToPort+0x32>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <StreamRawToPort+0x8c>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	701a      	strb	r2, [r3, #0]
}
 800c8be:	2000      	movs	r0, #0
 800c8c0:	b002      	add	sp, #8
 800c8c2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c8c4:	0153      	lsls	r3, r2, #5
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	189a      	adds	r2, r3, r2
 800c8cc:	00d0      	lsls	r0, r2, #3
 800c8ce:	21fa      	movs	r1, #250	; 0xfa
 800c8d0:	0089      	lsls	r1, r1, #2
 800c8d2:	f7f3 fc3d 	bl	8000150 <__udivsi3>
 800c8d6:	0001      	movs	r1, r0
 800c8d8:	4b10      	ldr	r3, [pc, #64]	; (800c91c <StreamRawToPort+0x90>)
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	23ff      	movs	r3, #255	; 0xff
 800c8de:	2200      	movs	r2, #0
 800c8e0:	480f      	ldr	r0, [pc, #60]	; (800c920 <StreamRawToPort+0x94>)
 800c8e2:	f004 fe0d 	bl	8011500 <xTimerCreate>
 800c8e6:	0004      	movs	r4, r0
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <StreamRawToPort+0x98>)
 800c8ea:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c8ec:	f004 f89a 	bl	8010a24 <xTaskGetTickCount>
 800c8f0:	0002      	movs	r2, r0
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	425b      	negs	r3, r3
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	0020      	movs	r0, r4
 800c8fe:	f004 fe23 	bl	8011548 <xTimerGenericCommand>
 800c902:	e7d5      	b.n	800c8b0 <StreamRawToPort+0x24>
 800c904:	20006f34 	.word	0x20006f34
 800c908:	20007100 	.word	0x20007100
 800c90c:	20007178 	.word	0x20007178
 800c910:	20006f35 	.word	0x20006f35
 800c914:	200000b4 	.word	0x200000b4
 800c918:	20001b4c 	.word	0x20001b4c
 800c91c:	0800bb69 	.word	0x0800bb69
 800c920:	0801c950 	.word	0x0801c950
 800c924:	20001b74 	.word	0x20001b74

0800c928 <StreamKGramToBuffer>:
{
 800c928:	b510      	push	{r4, lr}
 800c92a:	b082      	sub	sp, #8
	global_ch=Ch;
 800c92c:	4c19      	ldr	r4, [pc, #100]	; (800c994 <StreamKGramToBuffer+0x6c>)
 800c92e:	7020      	strb	r0, [r4, #0]
	global_period=Period;
 800c930:	4819      	ldr	r0, [pc, #100]	; (800c998 <StreamKGramToBuffer+0x70>)
 800c932:	6002      	str	r2, [r0, #0]
	global_timeout=Timeout;
 800c934:	4a19      	ldr	r2, [pc, #100]	; (800c99c <StreamKGramToBuffer+0x74>)
 800c936:	6013      	str	r3, [r2, #0]
	ptr_weight_buffer=Buffer;
 800c938:	4a19      	ldr	r2, [pc, #100]	; (800c9a0 <StreamKGramToBuffer+0x78>)
 800c93a:	6011      	str	r1, [r2, #0]
	global_mode=STREAM_BUFFER_CASE;
 800c93c:	4a19      	ldr	r2, [pc, #100]	; (800c9a4 <StreamKGramToBuffer+0x7c>)
 800c93e:	2103      	movs	r1, #3
 800c940:	7011      	strb	r1, [r2, #0]
	unit=KGram;
 800c942:	4a19      	ldr	r2, [pc, #100]	; (800c9a8 <StreamKGramToBuffer+0x80>)
 800c944:	3901      	subs	r1, #1
 800c946:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c948:	1e5a      	subs	r2, r3, #1
 800c94a:	3203      	adds	r2, #3
 800c94c:	d902      	bls.n	800c954 <StreamKGramToBuffer+0x2c>
}
 800c94e:	2000      	movs	r0, #0
 800c950:	b002      	add	sp, #8
 800c952:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	1ad2      	subs	r2, r2, r3
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	18d3      	adds	r3, r2, r3
 800c95c:	00d8      	lsls	r0, r3, #3
 800c95e:	21fa      	movs	r1, #250	; 0xfa
 800c960:	0089      	lsls	r1, r1, #2
 800c962:	f7f3 fbf5 	bl	8000150 <__udivsi3>
 800c966:	0001      	movs	r1, r0
 800c968:	4b10      	ldr	r3, [pc, #64]	; (800c9ac <StreamKGramToBuffer+0x84>)
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	23ff      	movs	r3, #255	; 0xff
 800c96e:	2200      	movs	r2, #0
 800c970:	480f      	ldr	r0, [pc, #60]	; (800c9b0 <StreamKGramToBuffer+0x88>)
 800c972:	f004 fdc5 	bl	8011500 <xTimerCreate>
 800c976:	0004      	movs	r4, r0
 800c978:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <StreamKGramToBuffer+0x8c>)
 800c97a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c97c:	f004 f852 	bl	8010a24 <xTaskGetTickCount>
 800c980:	0002      	movs	r2, r0
 800c982:	2301      	movs	r3, #1
 800c984:	425b      	negs	r3, r3
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2300      	movs	r3, #0
 800c98a:	2101      	movs	r1, #1
 800c98c:	0020      	movs	r0, r4
 800c98e:	f004 fddb 	bl	8011548 <xTimerGenericCommand>
 800c992:	e7dc      	b.n	800c94e <StreamKGramToBuffer+0x26>
 800c994:	20006f34 	.word	0x20006f34
 800c998:	20007100 	.word	0x20007100
 800c99c:	20007178 	.word	0x20007178
 800c9a0:	2000701c 	.word	0x2000701c
 800c9a4:	20006f35 	.word	0x20006f35
 800c9a8:	200000b4 	.word	0x200000b4
 800c9ac:	0800bb69 	.word	0x0800bb69
 800c9b0:	0801c950 	.word	0x0801c950
 800c9b4:	20001b74 	.word	0x20001b74

0800c9b8 <streamCommand>:
{
 800c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ba:	46de      	mov	lr, fp
 800c9bc:	4647      	mov	r7, r8
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b08d      	sub	sp, #52	; 0x34
 800c9c2:	9003      	str	r0, [sp, #12]
 800c9c4:	0015      	movs	r5, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	930b      	str	r3, [sp, #44]	; 0x2c
  portBASE_TYPE xParameterStringLength2 = 0;
 800c9ca:	930a      	str	r3, [sp, #40]	; 0x28
  portBASE_TYPE xParameterStringLength3 = 0;
 800c9cc:	9309      	str	r3, [sp, #36]	; 0x24
  portBASE_TYPE xParameterStringLength4 = 0;
 800c9ce:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength5 = 0;
 800c9d0:	9307      	str	r3, [sp, #28]
  configASSERT( pcWriteBuffer );
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d101      	bne.n	800c9da <streamCommand+0x22>
 800c9d6:	b672      	cpsid	i
 800c9d8:	e7fe      	b.n	800c9d8 <streamCommand+0x20>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c9da:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9dc:	2101      	movs	r1, #1
 800c9de:	0028      	movs	r0, r5
 800c9e0:	f003 f98e 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c9e4:	0007      	movs	r7, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c9e6:	aa0a      	add	r2, sp, #40	; 0x28
 800c9e8:	2102      	movs	r1, #2
 800c9ea:	0028      	movs	r0, r5
 800c9ec:	f003 f988 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c9f0:	9004      	str	r0, [sp, #16]
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c9f2:	aa09      	add	r2, sp, #36	; 0x24
 800c9f4:	2103      	movs	r1, #3
 800c9f6:	0028      	movs	r0, r5
 800c9f8:	f003 f982 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800c9fc:	0006      	movs	r6, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800c9fe:	aa08      	add	r2, sp, #32
 800ca00:	2104      	movs	r1, #4
 800ca02:	0028      	movs	r0, r5
 800ca04:	f003 f97c 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800ca08:	0004      	movs	r4, r0
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800ca0a:	aa07      	add	r2, sp, #28
 800ca0c:	2105      	movs	r1, #5
 800ca0e:	0028      	movs	r0, r5
 800ca10:	f003 f976 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800ca14:	4683      	mov	fp, r0
  if (NULL != pcParameterString1)
 800ca16:	2f00      	cmp	r7, #0
 800ca18:	d043      	beq.n	800caa2 <streamCommand+0xea>
    channel = atoi( (char *)pcParameterString1);
 800ca1a:	0038      	movs	r0, r7
 800ca1c:	f008 f9ed 	bl	8014dfa <atoi>
 800ca20:	b2c5      	uxtb	r5, r0
  Module_Status result = H26R0_OK;
 800ca22:	2700      	movs	r7, #0
	if (NULL != pcParameterString2)
 800ca24:	9804      	ldr	r0, [sp, #16]
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d03e      	beq.n	800caa8 <streamCommand+0xf0>
    period = atoi( (char *)pcParameterString2);
 800ca2a:	f008 f9e6 	bl	8014dfa <atoi>
 800ca2e:	9004      	str	r0, [sp, #16]
  if (NULL != pcParameterString3)
 800ca30:	2e00      	cmp	r6, #0
 800ca32:	d042      	beq.n	800caba <streamCommand+0x102>
    if (!strncmp((const char *)pcParameterString3, "inf", 3))
 800ca34:	2203      	movs	r2, #3
 800ca36:	4959      	ldr	r1, [pc, #356]	; (800cb9c <streamCommand+0x1e4>)
 800ca38:	0030      	movs	r0, r6
 800ca3a:	f008 feb5 	bl	80157a8 <strncmp>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d136      	bne.n	800cab0 <streamCommand+0xf8>
      timeout = portMAX_DELAY;
 800ca42:	2601      	movs	r6, #1
 800ca44:	4276      	negs	r6, r6
	if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "buffer", 6)) 
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d006      	beq.n	800ca58 <streamCommand+0xa0>
 800ca4a:	2206      	movs	r2, #6
 800ca4c:	4954      	ldr	r1, [pc, #336]	; (800cba0 <streamCommand+0x1e8>)
 800ca4e:	0020      	movs	r0, r4
 800ca50:	f008 feaa 	bl	80157a8 <strncmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d033      	beq.n	800cac0 <streamCommand+0x108>
	else if (NULL != pcParameterString4 && NULL != pcParameterString5 && pcParameterString4[0] == 'p') 
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	d04e      	beq.n	800cafa <streamCommand+0x142>
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04b      	beq.n	800cafa <streamCommand+0x142>
 800ca62:	2300      	movs	r3, #0
 800ca64:	56e3      	ldrsb	r3, [r4, r3]
 800ca66:	2b70      	cmp	r3, #112	; 0x70
 800ca68:	d147      	bne.n	800cafa <streamCommand+0x142>
		port = ( uint8_t ) atol( ( char * ) pcParameterString4+1 );
 800ca6a:	1c60      	adds	r0, r4, #1
 800ca6c:	f008 f9cb 	bl	8014e06 <atol>
 800ca70:	9005      	str	r0, [sp, #20]
 800ca72:	466b      	mov	r3, sp
 800ca74:	7d1b      	ldrb	r3, [r3, #20]
 800ca76:	4698      	mov	r8, r3
		module = (uint8_t) GetID((char *)pcParameterString5);
 800ca78:	4658      	mov	r0, fp
 800ca7a:	f7f7 fdf9 	bl	8004670 <GetID>
 800ca7e:	b2c4      	uxtb	r4, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800ca80:	2c64      	cmp	r4, #100	; 0x64
 800ca82:	d032      	beq.n	800caea <streamCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800ca84:	466b      	mov	r3, sp
 800ca86:	7d1a      	ldrb	r2, [r3, #20]
 800ca88:	0023      	movs	r3, r4
 800ca8a:	4946      	ldr	r1, [pc, #280]	; (800cba4 <streamCommand+0x1ec>)
 800ca8c:	9803      	ldr	r0, [sp, #12]
 800ca8e:	f008 fe47 	bl	8015720 <sprintf>
			StreamKGramToPort(channel, port, module, period, timeout);
 800ca92:	9600      	str	r6, [sp, #0]
 800ca94:	9b04      	ldr	r3, [sp, #16]
 800ca96:	0022      	movs	r2, r4
 800ca98:	4641      	mov	r1, r8
 800ca9a:	0028      	movs	r0, r5
 800ca9c:	f7ff fd22 	bl	800c4e4 <StreamKGramToPort>
			return pdFALSE;
 800caa0:	e033      	b.n	800cb0a <streamCommand+0x152>
    result = H26R0_ERR_WrongParams;
 800caa2:	2702      	movs	r7, #2
	uint8_t channel = 1;
 800caa4:	2501      	movs	r5, #1
 800caa6:	e7bd      	b.n	800ca24 <streamCommand+0x6c>
    result = H26R0_ERR_WrongParams;
 800caa8:	2702      	movs	r7, #2
  uint32_t period = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	e7bf      	b.n	800ca30 <streamCommand+0x78>
      timeout = atoi( (char *)pcParameterString3);
 800cab0:	0030      	movs	r0, r6
 800cab2:	f008 f9a2 	bl	8014dfa <atoi>
 800cab6:	0006      	movs	r6, r0
 800cab8:	e7c5      	b.n	800ca46 <streamCommand+0x8e>
    result = H26R0_ERR_WrongParams;
 800caba:	2702      	movs	r7, #2
  uint32_t timeout = 0;
 800cabc:	2600      	movs	r6, #0
 800cabe:	e7c2      	b.n	800ca46 <streamCommand+0x8e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800cac0:	226b      	movs	r2, #107	; 0x6b
 800cac2:	4939      	ldr	r1, [pc, #228]	; (800cba8 <streamCommand+0x1f0>)
 800cac4:	9803      	ldr	r0, [sp, #12]
 800cac6:	f008 fc28 	bl	801531a <memcpy>
		if (channel==1){
 800caca:	2d01      	cmp	r5, #1
 800cacc:	d106      	bne.n	800cadc <streamCommand+0x124>
		StreamKGramToBuffer(channel, &weight1_buffer, period, timeout);
 800cace:	0033      	movs	r3, r6
 800cad0:	9a04      	ldr	r2, [sp, #16]
 800cad2:	4936      	ldr	r1, [pc, #216]	; (800cbac <streamCommand+0x1f4>)
 800cad4:	0028      	movs	r0, r5
 800cad6:	f7ff ff27 	bl	800c928 <StreamKGramToBuffer>
 800cada:	e016      	b.n	800cb0a <streamCommand+0x152>
		StreamKGramToBuffer(channel, &weight2_buffer, period, timeout);
 800cadc:	0033      	movs	r3, r6
 800cade:	9a04      	ldr	r2, [sp, #16]
 800cae0:	4933      	ldr	r1, [pc, #204]	; (800cbb0 <streamCommand+0x1f8>)
 800cae2:	0028      	movs	r0, r5
 800cae4:	f7ff ff20 	bl	800c928 <StreamKGramToBuffer>
 800cae8:	e00f      	b.n	800cb0a <streamCommand+0x152>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongName);
 800caea:	2214      	movs	r2, #20
 800caec:	4931      	ldr	r1, [pc, #196]	; (800cbb4 <streamCommand+0x1fc>)
 800caee:	9803      	ldr	r0, [sp, #12]
 800caf0:	f008 fc13 	bl	801531a <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800caf4:	2f02      	cmp	r7, #2
 800caf6:	d108      	bne.n	800cb0a <streamCommand+0x152>
 800caf8:	e002      	b.n	800cb00 <streamCommand+0x148>
	else if (NULL == pcParameterString5) 
 800cafa:	465b      	mov	r3, fp
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <streamCommand+0x15e>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cb00:	2212      	movs	r2, #18
 800cb02:	492d      	ldr	r1, [pc, #180]	; (800cbb8 <streamCommand+0x200>)
 800cb04:	9803      	ldr	r0, [sp, #12]
 800cb06:	f008 fc08 	bl	801531a <memcpy>
}
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	b00d      	add	sp, #52	; 0x34
 800cb0e:	bc0c      	pop	{r2, r3}
 800cb10:	4690      	mov	r8, r2
 800cb12:	469b      	mov	fp, r3
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "-v", 2)) {
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d00c      	beq.n	800cb34 <streamCommand+0x17c>
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	4927      	ldr	r1, [pc, #156]	; (800cbbc <streamCommand+0x204>)
 800cb1e:	0020      	movs	r0, r4
 800cb20:	f008 fe42 	bl	80157a8 <strncmp>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d105      	bne.n	800cb34 <streamCommand+0x17c>
			StreamKGramToVERBOSE(channel, period, timeout);
 800cb28:	0032      	movs	r2, r6
 800cb2a:	9904      	ldr	r1, [sp, #16]
 800cb2c:	0028      	movs	r0, r5
 800cb2e:	f7ff fe65 	bl	800c7fc <StreamKGramToVERBOSE>
 800cb32:	e7df      	b.n	800caf4 <streamCommand+0x13c>
			if (channel == 1 || channel == 2)
 800cb34:	1e6b      	subs	r3, r5, #1
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d828      	bhi.n	800cb8e <streamCommand+0x1d6>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800cb3c:	2225      	movs	r2, #37	; 0x25
 800cb3e:	4920      	ldr	r1, [pc, #128]	; (800cbc0 <streamCommand+0x208>)
 800cb40:	9c03      	ldr	r4, [sp, #12]
 800cb42:	0020      	movs	r0, r4
 800cb44:	f008 fbe9 	bl	801531a <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800cb48:	0020      	movs	r0, r4
 800cb4a:	f7f3 fae5 	bl	8000118 <strlen>
 800cb4e:	b282      	uxth	r2, r0
 800cb50:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <streamCommand+0x20c>)
 800cb52:	7818      	ldrb	r0, [r3, #0]
 800cb54:	2301      	movs	r3, #1
 800cb56:	425b      	negs	r3, r3
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	3333      	adds	r3, #51	; 0x33
 800cb5c:	0021      	movs	r1, r4
 800cb5e:	f002 fe75 	bl	800f84c <writePxMutex>
			StreamKGramToCLI(channel, period, timeout);
 800cb62:	0032      	movs	r2, r6
 800cb64:	9904      	ldr	r1, [sp, #16]
 800cb66:	0028      	movs	r0, r5
 800cb68:	f7ff fda4 	bl	800c6b4 <StreamKGramToCLI>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cb6c:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <streamCommand+0x210>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d109      	bne.n	800cb88 <streamCommand+0x1d0>
			memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800cb74:	9c03      	ldr	r4, [sp, #12]
 800cb76:	0020      	movs	r0, r4
 800cb78:	f7f3 face 	bl	8000118 <strlen>
 800cb7c:	0002      	movs	r2, r0
 800cb7e:	2100      	movs	r1, #0
 800cb80:	0020      	movs	r0, r4
 800cb82:	f008 fbd3 	bl	801532c <memset>
 800cb86:	e7b5      	b.n	800caf4 <streamCommand+0x13c>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cb88:	f004 fe7e 	bl	8011888 <vPortYield>
 800cb8c:	e7ee      	b.n	800cb6c <streamCommand+0x1b4>
				 strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cb8e:	2212      	movs	r2, #18
 800cb90:	4909      	ldr	r1, [pc, #36]	; (800cbb8 <streamCommand+0x200>)
 800cb92:	9803      	ldr	r0, [sp, #12]
 800cb94:	f008 fbc1 	bl	801531a <memcpy>
 800cb98:	e7ac      	b.n	800caf4 <streamCommand+0x13c>
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	0801ce40 	.word	0x0801ce40
 800cba0:	0801ce44 	.word	0x0801ce44
 800cba4:	0801ceb8 	.word	0x0801ceb8
 800cba8:	0801ce4c 	.word	0x0801ce4c
 800cbac:	20006fa8 	.word	0x20006fa8
 800cbb0:	20006ec0 	.word	0x20006ec0
 800cbb4:	0801ceec 	.word	0x0801ceec
 800cbb8:	0801c9e4 	.word	0x0801c9e4
 800cbbc:	0801cf00 	.word	0x0801cf00
 800cbc0:	0801cf04 	.word	0x0801cf04
 800cbc4:	20000a9f 	.word	0x20000a9f
 800cbc8:	20001b4c 	.word	0x20001b4c

0800cbcc <PowerDown>:
{
 800cbcc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800cbce:	2180      	movs	r1, #128	; 0x80
 800cbd0:	2090      	movs	r0, #144	; 0x90
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	0089      	lsls	r1, r1, #2
 800cbd6:	05c0      	lsls	r0, r0, #23
 800cbd8:	f006 fbed 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800cbdc:	2000      	movs	r0, #0
 800cbde:	bd10      	pop	{r4, pc}

0800cbe0 <Stop>:
{
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	b082      	sub	sp, #8
	global_mode=IDLE_CASE;
 800cbe4:	2400      	movs	r4, #0
 800cbe6:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <Stop+0x30>)
 800cbe8:	701c      	strb	r4, [r3, #0]
  PowerDown();
 800cbea:	f7ff ffef 	bl	800cbcc <PowerDown>
	xTimerStop( xTimer, 0 );
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <Stop+0x34>)
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	9400      	str	r4, [sp, #0]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	2103      	movs	r1, #3
 800cbfa:	f004 fca5 	bl	8011548 <xTimerGenericCommand>
	weight1_buffer=0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4a05      	ldr	r2, [pc, #20]	; (800cc18 <Stop+0x38>)
 800cc02:	6013      	str	r3, [r2, #0]
	weight2_buffer=0;
 800cc04:	4a05      	ldr	r2, [pc, #20]	; (800cc1c <Stop+0x3c>)
 800cc06:	6013      	str	r3, [r2, #0]
}
 800cc08:	2000      	movs	r0, #0
 800cc0a:	b002      	add	sp, #8
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	20006f35 	.word	0x20006f35
 800cc14:	20001b74 	.word	0x20001b74
 800cc18:	20006fa8 	.word	0x20006fa8
 800cc1c:	20006ec0 	.word	0x20006ec0

0800cc20 <stopCommand>:
{
 800cc20:	b510      	push	{r4, lr}
  configASSERT( pcWriteBuffer );
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d101      	bne.n	800cc2a <stopCommand+0xa>
 800cc26:	b672      	cpsid	i
 800cc28:	e7fe      	b.n	800cc28 <stopCommand+0x8>
	Stop();
 800cc2a:	f7ff ffd9 	bl	800cbe0 <Stop>
}
 800cc2e:	2000      	movs	r0, #0
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <PowerOn>:
{
 800cc32:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800cc34:	2180      	movs	r1, #128	; 0x80
 800cc36:	2090      	movs	r0, #144	; 0x90
 800cc38:	2200      	movs	r2, #0
 800cc3a:	0089      	lsls	r1, r1, #2
 800cc3c:	05c0      	lsls	r0, r0, #23
 800cc3e:	f006 fbba 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800cc42:	2000      	movs	r0, #0
 800cc44:	bd10      	pop	{r4, pc}
	...

0800cc48 <SampleGram>:
{
 800cc48:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cc4a:	f7ff fb43 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800cc4e:	f7ff fff0 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cc52:	2400      	movs	r4, #0
 800cc54:	e003      	b.n	800cc5e <SampleGram+0x16>
 800cc56:	f7ff f9cd 	bl	800bff4 <readHX711>
 800cc5a:	3401      	adds	r4, #1
 800cc5c:	b2e4      	uxtb	r4, r4
 800cc5e:	2c01      	cmp	r4, #1
 800cc60:	d9f9      	bls.n	800cc56 <SampleGram+0xe>
	weightGram=weightCalculation()*Kg2Gram_ratio;
 800cc62:	f7ff fa33 	bl	800c0cc <weightCalculation>
 800cc66:	4903      	ldr	r1, [pc, #12]	; (800cc74 <SampleGram+0x2c>)
 800cc68:	f7f4 f91e 	bl	8000ea8 <__aeabi_fmul>
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <SampleGram+0x30>)
 800cc6e:	6018      	str	r0, [r3, #0]
}
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	447a0000 	.word	0x447a0000
 800cc78:	20001b60 	.word	0x20001b60

0800cc7c <SampleKGram>:
{
 800cc7c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cc7e:	f7ff fb29 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800cc82:	f7ff ffd6 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cc86:	2400      	movs	r4, #0
 800cc88:	e003      	b.n	800cc92 <SampleKGram+0x16>
 800cc8a:	f7ff f9b3 	bl	800bff4 <readHX711>
 800cc8e:	3401      	adds	r4, #1
 800cc90:	b2e4      	uxtb	r4, r4
 800cc92:	2c01      	cmp	r4, #1
 800cc94:	d9f9      	bls.n	800cc8a <SampleKGram+0xe>
	weightKGram=weightCalculation();
 800cc96:	f7ff fa19 	bl	800c0cc <weightCalculation>
 800cc9a:	4b01      	ldr	r3, [pc, #4]	; (800cca0 <SampleKGram+0x24>)
 800cc9c:	6018      	str	r0, [r3, #0]
}
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	20001b64 	.word	0x20001b64

0800cca4 <SampleOunce>:
{
 800cca4:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cca6:	f7ff fb15 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800ccaa:	f7ff ffc2 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++)		readHX711();
 800ccae:	2400      	movs	r4, #0
 800ccb0:	e003      	b.n	800ccba <SampleOunce+0x16>
 800ccb2:	f7ff f99f 	bl	800bff4 <readHX711>
 800ccb6:	3401      	adds	r4, #1
 800ccb8:	b2e4      	uxtb	r4, r4
 800ccba:	2c01      	cmp	r4, #1
 800ccbc:	d9f9      	bls.n	800ccb2 <SampleOunce+0xe>
	weightOunce=weightCalculation()*Kg2Ounce_ratio;
 800ccbe:	f7ff fa05 	bl	800c0cc <weightCalculation>
 800ccc2:	f7f6 fa2f 	bl	8003124 <__aeabi_f2d>
 800ccc6:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <SampleOunce+0x34>)
 800ccc8:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <SampleOunce+0x38>)
 800ccca:	f7f5 fbb3 	bl	8002434 <__aeabi_dmul>
 800ccce:	f7f6 fa7b 	bl	80031c8 <__aeabi_d2f>
 800ccd2:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <SampleOunce+0x3c>)
 800ccd4:	6018      	str	r0, [r3, #0]
}
 800ccd6:	bd10      	pop	{r4, pc}
 800ccd8:	6e978d50 	.word	0x6e978d50
 800ccdc:	4041a312 	.word	0x4041a312
 800cce0:	20001b68 	.word	0x20001b68

0800cce4 <SamplePound>:
{
 800cce4:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cce6:	f7ff faf5 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800ccea:	f7ff ffa2 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800ccee:	2400      	movs	r4, #0
 800ccf0:	e003      	b.n	800ccfa <SamplePound+0x16>
 800ccf2:	f7ff f97f 	bl	800bff4 <readHX711>
 800ccf6:	3401      	adds	r4, #1
 800ccf8:	b2e4      	uxtb	r4, r4
 800ccfa:	2c01      	cmp	r4, #1
 800ccfc:	d9f9      	bls.n	800ccf2 <SamplePound+0xe>
	weightPound=weightCalculation()*Kg2Pound_ratio;  
 800ccfe:	f7ff f9e5 	bl	800c0cc <weightCalculation>
 800cd02:	f7f6 fa0f 	bl	8003124 <__aeabi_f2d>
 800cd06:	4a04      	ldr	r2, [pc, #16]	; (800cd18 <SamplePound+0x34>)
 800cd08:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <SamplePound+0x38>)
 800cd0a:	f7f5 fb93 	bl	8002434 <__aeabi_dmul>
 800cd0e:	f7f6 fa5b 	bl	80031c8 <__aeabi_d2f>
 800cd12:	4b03      	ldr	r3, [pc, #12]	; (800cd20 <SamplePound+0x3c>)
 800cd14:	6018      	str	r0, [r3, #0]
}
 800cd16:	bd10      	pop	{r4, pc}
 800cd18:	2f275feb 	.word	0x2f275feb
 800cd1c:	4001a311 	.word	0x4001a311
 800cd20:	20001b6c 	.word	0x20001b6c

0800cd24 <Average>:
{
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	0004      	movs	r4, r0
 800cd28:	000d      	movs	r5, r1
	PowerOn();
 800cd2a:	f7ff ff82 	bl	800cc32 <PowerOn>
	SetHX711Gain(ch);
 800cd2e:	0020      	movs	r0, r4
 800cd30:	f7ff fad0 	bl	800c2d4 <SetHX711Gain>
	for(i=0; i<=N; i++)
 800cd34:	2400      	movs	r4, #0
 800cd36:	e001      	b.n	800cd3c <Average+0x18>
 800cd38:	3401      	adds	r4, #1
 800cd3a:	b2e4      	uxtb	r4, r4
 800cd3c:	42ac      	cmp	r4, r5
 800cd3e:	d809      	bhi.n	800cd54 <Average+0x30>
		readHX711();	
 800cd40:	f7ff f958 	bl	800bff4 <readHX711>
		if (i>=1)
 800cd44:	2c00      	cmp	r4, #0
 800cd46:	d0f7      	beq.n	800cd38 <Average+0x14>
			Sample[i]=valuef;
 800cd48:	00a3      	lsls	r3, r4, #2
 800cd4a:	4a0d      	ldr	r2, [pc, #52]	; (800cd80 <Average+0x5c>)
 800cd4c:	6811      	ldr	r1, [r2, #0]
 800cd4e:	4a0d      	ldr	r2, [pc, #52]	; (800cd84 <Average+0x60>)
 800cd50:	5099      	str	r1, [r3, r2]
 800cd52:	e7f1      	b.n	800cd38 <Average+0x14>
	float average=0.0;
 800cd54:	2600      	movs	r6, #0
	for (ii=0; ii<N; ii++)
 800cd56:	2400      	movs	r4, #0
 800cd58:	e008      	b.n	800cd6c <Average+0x48>
		average+=Sample[ii+1];
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	00a2      	lsls	r2, r4, #2
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <Average+0x60>)
 800cd60:	58d1      	ldr	r1, [r2, r3]
 800cd62:	1c30      	adds	r0, r6, #0
 800cd64:	f7f3 fd2e 	bl	80007c4 <__aeabi_fadd>
 800cd68:	1c06      	adds	r6, r0, #0
	for (ii=0; ii<N; ii++)
 800cd6a:	b2e4      	uxtb	r4, r4
 800cd6c:	42ac      	cmp	r4, r5
 800cd6e:	d3f4      	bcc.n	800cd5a <Average+0x36>
	average/=N;
 800cd70:	0028      	movs	r0, r5
 800cd72:	f7f4 fbaf 	bl	80014d4 <__aeabi_i2f>
 800cd76:	1c01      	adds	r1, r0, #0
 800cd78:	1c30      	adds	r0, r6, #0
 800cd7a:	f7f3 febd 	bl	8000af8 <__aeabi_fdiv>
}
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	20001b5c 	.word	0x20001b5c
 800cd84:	20001738 	.word	0x20001738

0800cd88 <SendResults>:
{
 800cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	1c05      	adds	r5, r0, #0
 800cd8e:	000c      	movs	r4, r1
 800cd90:	001f      	movs	r7, r3
 800cd92:	ab0c      	add	r3, sp, #48	; 0x30
 800cd94:	781e      	ldrb	r6, [r3, #0]
	float Raw_Msg=0.0f;
 800cd96:	2300      	movs	r3, #0
 800cd98:	9305      	str	r3, [sp, #20]
	uint32_t RawMsgInt=0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9304      	str	r3, [sp, #16]
	switch (unit)
 800cd9e:	4bad      	ldr	r3, [pc, #692]	; (800d054 <SendResults+0x2cc>)
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	2a05      	cmp	r2, #5
 800cda4:	d823      	bhi.n	800cdee <SendResults+0x66>
 800cda6:	0093      	lsls	r3, r2, #2
 800cda8:	4aab      	ldr	r2, [pc, #684]	; (800d058 <SendResults+0x2d0>)
 800cdaa:	58d3      	ldr	r3, [r2, r3]
 800cdac:	469f      	mov	pc, r3
			Raw_Msg=message*Kg2Gram_ratio; break;
 800cdae:	49ab      	ldr	r1, [pc, #684]	; (800d05c <SendResults+0x2d4>)
 800cdb0:	f7f4 f87a 	bl	8000ea8 <__aeabi_fmul>
 800cdb4:	9005      	str	r0, [sp, #20]
 800cdb6:	e01b      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message; break;
 800cdb8:	9005      	str	r0, [sp, #20]
 800cdba:	e019      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message*Kg2Ounce_ratio; break;
 800cdbc:	f7f6 f9b2 	bl	8003124 <__aeabi_f2d>
 800cdc0:	4aa7      	ldr	r2, [pc, #668]	; (800d060 <SendResults+0x2d8>)
 800cdc2:	4ba8      	ldr	r3, [pc, #672]	; (800d064 <SendResults+0x2dc>)
 800cdc4:	f7f5 fb36 	bl	8002434 <__aeabi_dmul>
 800cdc8:	f7f6 f9fe 	bl	80031c8 <__aeabi_d2f>
 800cdcc:	9005      	str	r0, [sp, #20]
 800cdce:	e00f      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message*Kg2Pound_ratio; break;
 800cdd0:	f7f6 f9a8 	bl	8003124 <__aeabi_f2d>
 800cdd4:	4aa4      	ldr	r2, [pc, #656]	; (800d068 <SendResults+0x2e0>)
 800cdd6:	4ba5      	ldr	r3, [pc, #660]	; (800d06c <SendResults+0x2e4>)
 800cdd8:	f7f5 fb2c 	bl	8002434 <__aeabi_dmul>
 800cddc:	f7f6 f9f4 	bl	80031c8 <__aeabi_d2f>
 800cde0:	9005      	str	r0, [sp, #20]
 800cde2:	e005      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=Average(global_ch, 1);
 800cde4:	4ba2      	ldr	r3, [pc, #648]	; (800d070 <SendResults+0x2e8>)
 800cde6:	7818      	ldrb	r0, [r3, #0]
 800cde8:	2101      	movs	r1, #1
 800cdea:	f7ff ff9b 	bl	800cd24 <Average>
			Raw_Msg=message; break;
 800cdee:	9505      	str	r5, [sp, #20]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800cdf0:	f002 ff82 	bl	800fcf8 <FreeRTOS_CLIGetOutputBuffer>
 800cdf4:	0005      	movs	r5, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800cdf6:	2c04      	cmp	r4, #4
 800cdf8:	d001      	beq.n	800cdfe <SendResults+0x76>
 800cdfa:	2c02      	cmp	r4, #2
 800cdfc:	d106      	bne.n	800ce0c <SendResults+0x84>
  switch(Mode)
 800cdfe:	2c09      	cmp	r4, #9
 800ce00:	d900      	bls.n	800ce04 <SendResults+0x7c>
 800ce02:	e11c      	b.n	800d03e <SendResults+0x2b6>
 800ce04:	00a3      	lsls	r3, r4, #2
 800ce06:	4a9b      	ldr	r2, [pc, #620]	; (800d074 <SendResults+0x2ec>)
 800ce08:	58d3      	ldr	r3, [r2, r3]
 800ce0a:	469f      	mov	pc, r3
		strUnit = malloc(6*sizeof(char));
 800ce0c:	2006      	movs	r0, #6
 800ce0e:	f008 f837 	bl	8014e80 <malloc>
 800ce12:	9003      	str	r0, [sp, #12]
		memset(strUnit, 0, (6*sizeof(char)));
 800ce14:	2206      	movs	r2, #6
 800ce16:	2100      	movs	r1, #0
 800ce18:	f008 fa88 	bl	801532c <memset>
		if (unit == Gram)
 800ce1c:	4b8d      	ldr	r3, [pc, #564]	; (800d054 <SendResults+0x2cc>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d00d      	beq.n	800ce40 <SendResults+0xb8>
		else if (unit == KGram)
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d011      	beq.n	800ce4c <SendResults+0xc4>
		else if (unit == Ounce)
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d015      	beq.n	800ce58 <SendResults+0xd0>
		else if (unit == Pound)
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d019      	beq.n	800ce64 <SendResults+0xdc>
		else if (unit == RAW)
 800ce30:	2b05      	cmp	r3, #5
 800ce32:	d01d      	beq.n	800ce70 <SendResults+0xe8>
			sprintf( ( char * ) strUnit, "Kg");
 800ce34:	2203      	movs	r2, #3
 800ce36:	4990      	ldr	r1, [pc, #576]	; (800d078 <SendResults+0x2f0>)
 800ce38:	9803      	ldr	r0, [sp, #12]
 800ce3a:	f008 fa6e 	bl	801531a <memcpy>
 800ce3e:	e7de      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Gram");
 800ce40:	2205      	movs	r2, #5
 800ce42:	498e      	ldr	r1, [pc, #568]	; (800d07c <SendResults+0x2f4>)
 800ce44:	9803      	ldr	r0, [sp, #12]
 800ce46:	f008 fa68 	bl	801531a <memcpy>
 800ce4a:	e7d8      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Kg");
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	498a      	ldr	r1, [pc, #552]	; (800d078 <SendResults+0x2f0>)
 800ce50:	9803      	ldr	r0, [sp, #12]
 800ce52:	f008 fa62 	bl	801531a <memcpy>
 800ce56:	e7d2      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Ounce");
 800ce58:	2206      	movs	r2, #6
 800ce5a:	4989      	ldr	r1, [pc, #548]	; (800d080 <SendResults+0x2f8>)
 800ce5c:	9803      	ldr	r0, [sp, #12]
 800ce5e:	f008 fa5c 	bl	801531a <memcpy>
 800ce62:	e7cc      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Pound");
 800ce64:	2206      	movs	r2, #6
 800ce66:	4987      	ldr	r1, [pc, #540]	; (800d084 <SendResults+0x2fc>)
 800ce68:	9803      	ldr	r0, [sp, #12]
 800ce6a:	f008 fa56 	bl	801531a <memcpy>
 800ce6e:	e7c6      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Raw Data");
 800ce70:	2209      	movs	r2, #9
 800ce72:	4985      	ldr	r1, [pc, #532]	; (800d088 <SendResults+0x300>)
 800ce74:	9803      	ldr	r0, [sp, #12]
 800ce76:	f008 fa50 	bl	801531a <memcpy>
 800ce7a:	e7c0      	b.n	800cdfe <SendResults+0x76>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800ce7c:	4b83      	ldr	r3, [pc, #524]	; (800d08c <SendResults+0x304>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d01d      	beq.n	800cec0 <SendResults+0x138>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	d000      	beq.n	800ce8a <SendResults+0x102>
 800ce88:	e0d9      	b.n	800d03e <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsg, strUnit, Raw_Msg);
 800ce8a:	9805      	ldr	r0, [sp, #20]
 800ce8c:	f7f6 f94a 	bl	8003124 <__aeabi_f2d>
 800ce90:	9000      	str	r0, [sp, #0]
 800ce92:	9101      	str	r1, [sp, #4]
 800ce94:	9a03      	ldr	r2, [sp, #12]
 800ce96:	497e      	ldr	r1, [pc, #504]	; (800d090 <SendResults+0x308>)
 800ce98:	0028      	movs	r0, r5
 800ce9a:	f008 fc41 	bl	8015720 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ce9e:	0028      	movs	r0, r5
 800cea0:	f7f3 f93a 	bl	8000118 <strlen>
 800cea4:	23fa      	movs	r3, #250	; 0xfa
 800cea6:	b282      	uxth	r2, r0
 800cea8:	497a      	ldr	r1, [pc, #488]	; (800d094 <SendResults+0x30c>)
 800ceaa:	7808      	ldrb	r0, [r1, #0]
 800ceac:	2101      	movs	r1, #1
 800ceae:	4249      	negs	r1, r1
 800ceb0:	9100      	str	r1, [sp, #0]
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	0029      	movs	r1, r5
 800ceb6:	f002 fcc9 	bl	800f84c <writePxMutex>
			CheckForEnterKey();
 800ceba:	f7fe fe27 	bl	800bb0c <CheckForEnterKey>
 800cebe:	e0be      	b.n	800d03e <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800cec0:	4975      	ldr	r1, [pc, #468]	; (800d098 <SendResults+0x310>)
 800cec2:	9805      	ldr	r0, [sp, #20]
 800cec4:	f7f3 fff0 	bl	8000ea8 <__aeabi_fmul>
 800cec8:	f7f3 fb84 	bl	80005d4 <__aeabi_f2uiz>
 800cecc:	0003      	movs	r3, r0
 800cece:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsgUINT, strUnit, RawMsgInt);
 800ced0:	9a03      	ldr	r2, [sp, #12]
 800ced2:	4972      	ldr	r1, [pc, #456]	; (800d09c <SendResults+0x314>)
 800ced4:	0028      	movs	r0, r5
 800ced6:	f008 fc23 	bl	8015720 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ceda:	0028      	movs	r0, r5
 800cedc:	f7f3 f91c 	bl	8000118 <strlen>
 800cee0:	23fa      	movs	r3, #250	; 0xfa
 800cee2:	b282      	uxth	r2, r0
 800cee4:	496b      	ldr	r1, [pc, #428]	; (800d094 <SendResults+0x30c>)
 800cee6:	7808      	ldrb	r0, [r1, #0]
 800cee8:	2101      	movs	r1, #1
 800ceea:	4249      	negs	r1, r1
 800ceec:	9100      	str	r1, [sp, #0]
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	0029      	movs	r1, r5
 800cef2:	f002 fcab 	bl	800f84c <writePxMutex>
			CheckForEnterKey();
 800cef6:	f7fe fe09 	bl	800bb0c <CheckForEnterKey>
 800cefa:	e0a0      	b.n	800d03e <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800cefc:	4b63      	ldr	r3, [pc, #396]	; (800d08c <SendResults+0x304>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b05      	cmp	r3, #5
 800cf02:	d01c      	beq.n	800cf3e <SendResults+0x1b6>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800cf04:	2b07      	cmp	r3, #7
 800cf06:	d000      	beq.n	800cf0a <SendResults+0x182>
 800cf08:	e099      	b.n	800d03e <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsg, Raw_Msg);
 800cf0a:	9805      	ldr	r0, [sp, #20]
 800cf0c:	f7f6 f90a 	bl	8003124 <__aeabi_f2d>
 800cf10:	0002      	movs	r2, r0
 800cf12:	000b      	movs	r3, r1
 800cf14:	4962      	ldr	r1, [pc, #392]	; (800d0a0 <SendResults+0x318>)
 800cf16:	0028      	movs	r0, r5
 800cf18:	f008 fc02 	bl	8015720 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800cf1c:	0028      	movs	r0, r5
 800cf1e:	f7f3 f8fb 	bl	8000118 <strlen>
 800cf22:	23fa      	movs	r3, #250	; 0xfa
 800cf24:	b282      	uxth	r2, r0
 800cf26:	495b      	ldr	r1, [pc, #364]	; (800d094 <SendResults+0x30c>)
 800cf28:	7808      	ldrb	r0, [r1, #0]
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	4249      	negs	r1, r1
 800cf2e:	9100      	str	r1, [sp, #0]
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	0029      	movs	r1, r5
 800cf34:	f002 fc8a 	bl	800f84c <writePxMutex>
			CheckForEnterKey();
 800cf38:	f7fe fde8 	bl	800bb0c <CheckForEnterKey>
 800cf3c:	e07f      	b.n	800d03e <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800cf3e:	4956      	ldr	r1, [pc, #344]	; (800d098 <SendResults+0x310>)
 800cf40:	9805      	ldr	r0, [sp, #20]
 800cf42:	f7f3 ffb1 	bl	8000ea8 <__aeabi_fmul>
 800cf46:	f7f3 fb45 	bl	80005d4 <__aeabi_f2uiz>
 800cf4a:	0002      	movs	r2, r0
 800cf4c:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsgUINT, RawMsgInt);
 800cf4e:	4955      	ldr	r1, [pc, #340]	; (800d0a4 <SendResults+0x31c>)
 800cf50:	0028      	movs	r0, r5
 800cf52:	f008 fbe5 	bl	8015720 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800cf56:	0028      	movs	r0, r5
 800cf58:	f7f3 f8de 	bl	8000118 <strlen>
 800cf5c:	23fa      	movs	r3, #250	; 0xfa
 800cf5e:	b282      	uxth	r2, r0
 800cf60:	494c      	ldr	r1, [pc, #304]	; (800d094 <SendResults+0x30c>)
 800cf62:	7808      	ldrb	r0, [r1, #0]
 800cf64:	2101      	movs	r1, #1
 800cf66:	4249      	negs	r1, r1
 800cf68:	9100      	str	r1, [sp, #0]
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	0029      	movs	r1, r5
 800cf6e:	f002 fc6d 	bl	800f84c <writePxMutex>
			CheckForEnterKey();
 800cf72:	f7fe fdcb 	bl	800bb0c <CheckForEnterKey>
 800cf76:	e062      	b.n	800d03e <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800cf78:	4b44      	ldr	r3, [pc, #272]	; (800d08c <SendResults+0x304>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b05      	cmp	r3, #5
 800cf7e:	d016      	beq.n	800cfae <SendResults+0x226>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d15c      	bne.n	800d03e <SendResults+0x2b6>
				if (Module==myID){ 
 800cf84:	4b48      	ldr	r3, [pc, #288]	; (800d0a8 <SendResults+0x320>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	42b3      	cmp	r3, r6
 800cf8a:	d03d      	beq.n	800d008 <SendResults+0x280>
						messageParams[0] = Port;
 800cf8c:	4b47      	ldr	r3, [pc, #284]	; (800d0ac <SendResults+0x324>)
 800cf8e:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800cf90:	aa05      	add	r2, sp, #20
 800cf92:	78d1      	ldrb	r1, [r2, #3]
 800cf94:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800cf96:	7891      	ldrb	r1, [r2, #2]
 800cf98:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800cf9a:	7851      	ldrb	r1, [r2, #1]
 800cf9c:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(float)+1);
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	2123      	movs	r1, #35	; 0x23
 800cfa6:	0030      	movs	r0, r6
 800cfa8:	f7fc fdb8 	bl	8009b1c <SendMessageToModule>
 800cfac:	e047      	b.n	800d03e <SendResults+0x2b6>
				RawMsgInt=Raw_Msg*10;
 800cfae:	493a      	ldr	r1, [pc, #232]	; (800d098 <SendResults+0x310>)
 800cfb0:	9805      	ldr	r0, [sp, #20]
 800cfb2:	f7f3 ff79 	bl	8000ea8 <__aeabi_fmul>
 800cfb6:	f7f3 fb0d 	bl	80005d4 <__aeabi_f2uiz>
 800cfba:	9004      	str	r0, [sp, #16]
				if (Module==myID){
 800cfbc:	4b3a      	ldr	r3, [pc, #232]	; (800d0a8 <SendResults+0x320>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	42b3      	cmp	r3, r6
 800cfc2:	d010      	beq.n	800cfe6 <SendResults+0x25e>
						messageParams[0] = Port;
 800cfc4:	4b39      	ldr	r3, [pc, #228]	; (800d0ac <SendResults+0x324>)
 800cfc6:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800cfc8:	aa04      	add	r2, sp, #16
 800cfca:	78d1      	ldrb	r1, [r2, #3]
 800cfcc:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800cfce:	7891      	ldrb	r1, [r2, #2]
 800cfd0:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800cfd2:	7851      	ldrb	r1, [r2, #1]
 800cfd4:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(uint32_t)+1);
 800cfda:	2205      	movs	r2, #5
 800cfdc:	2123      	movs	r1, #35	; 0x23
 800cfde:	0030      	movs	r0, r6
 800cfe0:	f7fc fd9c 	bl	8009b1c <SendMessageToModule>
 800cfe4:	e02b      	b.n	800d03e <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800cfe6:	ab04      	add	r3, sp, #16
 800cfe8:	78da      	ldrb	r2, [r3, #3]
 800cfea:	4931      	ldr	r1, [pc, #196]	; (800d0b0 <SendResults+0x328>)
 800cfec:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800cfee:	789a      	ldrb	r2, [r3, #2]
 800cff0:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800cff2:	785a      	ldrb	r2, [r3, #1]
 800cff4:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800cffa:	230a      	movs	r3, #10
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	2204      	movs	r2, #4
 800d000:	0038      	movs	r0, r7
 800d002:	f002 fc23 	bl	800f84c <writePxMutex>
 800d006:	e01a      	b.n	800d03e <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800d008:	ab05      	add	r3, sp, #20
 800d00a:	78da      	ldrb	r2, [r3, #3]
 800d00c:	4928      	ldr	r1, [pc, #160]	; (800d0b0 <SendResults+0x328>)
 800d00e:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800d010:	789a      	ldrb	r2, [r3, #2]
 800d012:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800d014:	785a      	ldrb	r2, [r3, #1]
 800d016:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800d01c:	230a      	movs	r3, #10
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	2204      	movs	r2, #4
 800d022:	0038      	movs	r0, r7
 800d024:	f002 fc12 	bl	800f84c <writePxMutex>
 800d028:	e009      	b.n	800d03e <SendResults+0x2b6>
      memset(Buffer, 0, sizeof(float));
 800d02a:	2204      	movs	r2, #4
 800d02c:	2100      	movs	r1, #0
 800d02e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d030:	f008 f97c 	bl	801532c <memset>
      memcpy(Buffer, &Raw_Msg, sizeof(float));
 800d034:	2204      	movs	r2, #4
 800d036:	a905      	add	r1, sp, #20
 800d038:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d03a:	f008 f96e 	bl	801531a <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE){
 800d03e:	2c04      	cmp	r4, #4
 800d040:	d004      	beq.n	800d04c <SendResults+0x2c4>
 800d042:	2c02      	cmp	r4, #2
 800d044:	d002      	beq.n	800d04c <SendResults+0x2c4>
		free(strUnit);
 800d046:	9803      	ldr	r0, [sp, #12]
 800d048:	f007 ff24 	bl	8014e94 <free>
}
 800d04c:	2000      	movs	r0, #0
 800d04e:	b007      	add	sp, #28
 800d050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	200000b4 	.word	0x200000b4
 800d058:	0801c854 	.word	0x0801c854
 800d05c:	447a0000 	.word	0x447a0000
 800d060:	6e978d50 	.word	0x6e978d50
 800d064:	4041a312 	.word	0x4041a312
 800d068:	2f275feb 	.word	0x2f275feb
 800d06c:	4001a311 	.word	0x4001a311
 800d070:	20006f34 	.word	0x20006f34
 800d074:	0801c86c 	.word	0x0801c86c
 800d078:	0801c8e4 	.word	0x0801c8e4
 800d07c:	0801c8dc 	.word	0x0801c8dc
 800d080:	0801c8e8 	.word	0x0801c8e8
 800d084:	0801c8f0 	.word	0x0801c8f0
 800d088:	0801c8f8 	.word	0x0801c8f8
 800d08c:	20000084 	.word	0x20000084
 800d090:	0801c918 	.word	0x0801c918
 800d094:	20000a9f 	.word	0x20000a9f
 800d098:	41200000 	.word	0x41200000
 800d09c:	0801c904 	.word	0x0801c904
 800d0a0:	0801c934 	.word	0x0801c934
 800d0a4:	0801c92c 	.word	0x0801c92c
 800d0a8:	20001066 	.word	0x20001066
 800d0ac:	20000f28 	.word	0x20000f28
 800d0b0:	20001b50 	.word	0x20001b50

0800d0b4 <sampleCommand>:
{
 800d0b4:	b570      	push	{r4, r5, r6, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	0005      	movs	r5, r0
 800d0ba:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	d101      	bne.n	800d0c8 <sampleCommand+0x14>
 800d0c4:	b672      	cpsid	i
 800d0c6:	e7fe      	b.n	800d0c6 <sampleCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d0c8:	aa03      	add	r2, sp, #12
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	f002 fe18 	bl	800fd00 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d019      	beq.n	800d108 <sampleCommand+0x54>
    channel = atoi( (char *)pcParameterString1);
 800d0d4:	f007 fe91 	bl	8014dfa <atoi>
 800d0d8:	b2c4      	uxtb	r4, r0
	Module_Status result = H26R0_OK;
 800d0da:	2600      	movs	r6, #0
	if (channel == 1 || channel == 2)
 800d0dc:	1e63      	subs	r3, r4, #1
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d914      	bls.n	800d10e <sampleCommand+0x5a>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d0e4:	2e00      	cmp	r6, #0
 800d0e6:	d101      	bne.n	800d0ec <sampleCommand+0x38>
 800d0e8:	2c01      	cmp	r4, #1
 800d0ea:	d020      	beq.n	800d12e <sampleCommand+0x7a>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800d0ec:	2212      	movs	r2, #18
 800d0ee:	4911      	ldr	r1, [pc, #68]	; (800d134 <sampleCommand+0x80>)
 800d0f0:	0028      	movs	r0, r5
 800d0f2:	f008 f912 	bl	801531a <memcpy>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800d0f6:	2299      	movs	r2, #153	; 0x99
 800d0f8:	0092      	lsls	r2, r2, #2
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	0028      	movs	r0, r5
 800d0fe:	f008 f915 	bl	801532c <memset>
}
 800d102:	2000      	movs	r0, #0
 800d104:	b004      	add	sp, #16
 800d106:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800d108:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800d10a:	2400      	movs	r4, #0
 800d10c:	e7e6      	b.n	800d0dc <sampleCommand+0x28>
		DATA_To_SEND=SampleKGram(channel);
 800d10e:	0020      	movs	r0, r4
 800d110:	f7ff fdb4 	bl	800cc7c <SampleKGram>
 800d114:	4b08      	ldr	r3, [pc, #32]	; (800d138 <sampleCommand+0x84>)
 800d116:	6018      	str	r0, [r3, #0]
		global_mode=SAMPLE_CLI_CASE;
 800d118:	2106      	movs	r1, #6
 800d11a:	4b08      	ldr	r3, [pc, #32]	; (800d13c <sampleCommand+0x88>)
 800d11c:	7019      	strb	r1, [r3, #0]
		SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d11e:	4b08      	ldr	r3, [pc, #32]	; (800d140 <sampleCommand+0x8c>)
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	2300      	movs	r3, #0
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	f7ff fe2e 	bl	800cd88 <SendResults>
 800d12c:	e7da      	b.n	800d0e4 <sampleCommand+0x30>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d12e:	2c02      	cmp	r4, #2
 800d130:	d1dc      	bne.n	800d0ec <sampleCommand+0x38>
 800d132:	e7e0      	b.n	800d0f6 <sampleCommand+0x42>
 800d134:	0801c9e4 	.word	0x0801c9e4
 800d138:	20001724 	.word	0x20001724
 800d13c:	20006f35 	.word	0x20006f35
 800d140:	200000b4 	.word	0x200000b4

0800d144 <LoadcellTask>:
{
 800d144:	b530      	push	{r4, r5, lr}
 800d146:	b083      	sub	sp, #12
 800d148:	e021      	b.n	800d18e <LoadcellTask+0x4a>
		switch(global_mode)
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d000      	beq.n	800d150 <LoadcellTask+0xc>
 800d14e:	e086      	b.n	800d25e <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d150:	f004 fd26 	bl	8011ba0 <HAL_GetTick>
 800d154:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);		
 800d156:	4b44      	ldr	r3, [pc, #272]	; (800d268 <LoadcellTask+0x124>)
 800d158:	7818      	ldrb	r0, [r3, #0]
 800d15a:	f7ff fd8f 	bl	800cc7c <SampleKGram>
 800d15e:	4b43      	ldr	r3, [pc, #268]	; (800d26c <LoadcellTask+0x128>)
 800d160:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d162:	4b43      	ldr	r3, [pc, #268]	; (800d270 <LoadcellTask+0x12c>)
 800d164:	781a      	ldrb	r2, [r3, #0]
 800d166:	4b43      	ldr	r3, [pc, #268]	; (800d274 <LoadcellTask+0x130>)
 800d168:	7819      	ldrb	r1, [r3, #0]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	f7ff fe0a 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<(global_period-1)) {taskYIELD();}
 800d174:	e001      	b.n	800d17a <LoadcellTask+0x36>
 800d176:	f004 fb87 	bl	8011888 <vPortYield>
 800d17a:	f004 fd11 	bl	8011ba0 <HAL_GetTick>
 800d17e:	1b00      	subs	r0, r0, r4
 800d180:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <LoadcellTask+0x134>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	3b01      	subs	r3, #1
 800d186:	4298      	cmp	r0, r3
 800d188:	d3f5      	bcc.n	800d176 <LoadcellTask+0x32>
		taskYIELD();
 800d18a:	f004 fb7d 	bl	8011888 <vPortYield>
		switch(global_mode)
 800d18e:	4b39      	ldr	r3, [pc, #228]	; (800d274 <LoadcellTask+0x130>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2b02      	cmp	r3, #2
 800d194:	d023      	beq.n	800d1de <LoadcellTask+0x9a>
 800d196:	b2da      	uxtb	r2, r3
 800d198:	2a02      	cmp	r2, #2
 800d19a:	d9d6      	bls.n	800d14a <LoadcellTask+0x6>
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d03f      	beq.n	800d220 <LoadcellTask+0xdc>
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	d15c      	bne.n	800d25e <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d1a4:	f004 fcfc 	bl	8011ba0 <HAL_GetTick>
 800d1a8:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <LoadcellTask+0x124>)
 800d1ac:	7818      	ldrb	r0, [r3, #0]
 800d1ae:	f7ff fd65 	bl	800cc7c <SampleKGram>
 800d1b2:	4b2e      	ldr	r3, [pc, #184]	; (800d26c <LoadcellTask+0x128>)
 800d1b4:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d1b6:	4b2e      	ldr	r3, [pc, #184]	; (800d270 <LoadcellTask+0x12c>)
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	4b2e      	ldr	r3, [pc, #184]	; (800d274 <LoadcellTask+0x130>)
 800d1bc:	7819      	ldrb	r1, [r3, #0]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	f7ff fde0 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d1c8:	e001      	b.n	800d1ce <LoadcellTask+0x8a>
 800d1ca:	f004 fb5d 	bl	8011888 <vPortYield>
 800d1ce:	f004 fce7 	bl	8011ba0 <HAL_GetTick>
 800d1d2:	1b00      	subs	r0, r0, r4
 800d1d4:	4b28      	ldr	r3, [pc, #160]	; (800d278 <LoadcellTask+0x134>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	d3f6      	bcc.n	800d1ca <LoadcellTask+0x86>
 800d1dc:	e7d5      	b.n	800d18a <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d1de:	f004 fcdf 	bl	8011ba0 <HAL_GetTick>
 800d1e2:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d1e4:	4b20      	ldr	r3, [pc, #128]	; (800d268 <LoadcellTask+0x124>)
 800d1e6:	7818      	ldrb	r0, [r3, #0]
 800d1e8:	f7ff fd48 	bl	800cc7c <SampleKGram>
 800d1ec:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <LoadcellTask+0x128>)
 800d1ee:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, global_port, global_module, NULL);
 800d1f0:	4b22      	ldr	r3, [pc, #136]	; (800d27c <LoadcellTask+0x138>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	4a1e      	ldr	r2, [pc, #120]	; (800d270 <LoadcellTask+0x12c>)
 800d1f6:	7812      	ldrb	r2, [r2, #0]
 800d1f8:	491e      	ldr	r1, [pc, #120]	; (800d274 <LoadcellTask+0x130>)
 800d1fa:	7809      	ldrb	r1, [r1, #0]
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	9501      	str	r5, [sp, #4]
 800d200:	4d1f      	ldr	r5, [pc, #124]	; (800d280 <LoadcellTask+0x13c>)
 800d202:	782d      	ldrb	r5, [r5, #0]
 800d204:	9500      	str	r5, [sp, #0]
 800d206:	f7ff fdbf 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d20a:	e001      	b.n	800d210 <LoadcellTask+0xcc>
 800d20c:	f004 fb3c 	bl	8011888 <vPortYield>
 800d210:	f004 fcc6 	bl	8011ba0 <HAL_GetTick>
 800d214:	1b00      	subs	r0, r0, r4
 800d216:	4b18      	ldr	r3, [pc, #96]	; (800d278 <LoadcellTask+0x134>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4298      	cmp	r0, r3
 800d21c:	d3f6      	bcc.n	800d20c <LoadcellTask+0xc8>
 800d21e:	e7b4      	b.n	800d18a <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d220:	f004 fcbe 	bl	8011ba0 <HAL_GetTick>
 800d224:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d226:	4b10      	ldr	r3, [pc, #64]	; (800d268 <LoadcellTask+0x124>)
 800d228:	7818      	ldrb	r0, [r3, #0]
 800d22a:	f7ff fd27 	bl	800cc7c <SampleKGram>
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <LoadcellTask+0x128>)
 800d230:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, ptr_weight_buffer);
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <LoadcellTask+0x12c>)
 800d234:	781a      	ldrb	r2, [r3, #0]
 800d236:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <LoadcellTask+0x130>)
 800d238:	7819      	ldrb	r1, [r3, #0]
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <LoadcellTask+0x140>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	2300      	movs	r3, #0
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	f7ff fda0 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d248:	e001      	b.n	800d24e <LoadcellTask+0x10a>
 800d24a:	f004 fb1d 	bl	8011888 <vPortYield>
 800d24e:	f004 fca7 	bl	8011ba0 <HAL_GetTick>
 800d252:	1b00      	subs	r0, r0, r4
 800d254:	4b08      	ldr	r3, [pc, #32]	; (800d278 <LoadcellTask+0x134>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4298      	cmp	r0, r3
 800d25a:	d3f6      	bcc.n	800d24a <LoadcellTask+0x106>
 800d25c:	e795      	b.n	800d18a <LoadcellTask+0x46>
			default: global_mode = IDLE_CASE; break;
 800d25e:	4b05      	ldr	r3, [pc, #20]	; (800d274 <LoadcellTask+0x130>)
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	e791      	b.n	800d18a <LoadcellTask+0x46>
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	20006f34 	.word	0x20006f34
 800d26c:	20001724 	.word	0x20001724
 800d270:	200000b4 	.word	0x200000b4
 800d274:	20006f35 	.word	0x20006f35
 800d278:	20007100 	.word	0x20007100
 800d27c:	20006f36 	.word	0x20006f36
 800d280:	20007174 	.word	0x20007174
 800d284:	2000701c 	.word	0x2000701c

0800d288 <ZeroCal>:
{
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	0006      	movs	r6, r0
	IND_ON();
 800d28c:	2580      	movs	r5, #128	; 0x80
 800d28e:	012d      	lsls	r5, r5, #4
 800d290:	2490      	movs	r4, #144	; 0x90
 800d292:	05e4      	lsls	r4, r4, #23
 800d294:	2201      	movs	r2, #1
 800d296:	0029      	movs	r1, r5
 800d298:	0020      	movs	r0, r4
 800d29a:	f006 f88c 	bl	80133b6 <HAL_GPIO_WritePin>
	SetHX711Rate(80);
 800d29e:	2050      	movs	r0, #80	; 0x50
 800d2a0:	f7fe ff70 	bl	800c184 <SetHX711Rate>
	Zero_Drift=(Average(ch,100)*0.5*AVDD)/(ADC_full_range*gain);
 800d2a4:	2164      	movs	r1, #100	; 0x64
 800d2a6:	0030      	movs	r0, r6
 800d2a8:	f7ff fd3c 	bl	800cd24 <Average>
 800d2ac:	f7f5 ff3a 	bl	8003124 <__aeabi_f2d>
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <ZeroCal+0x94>)
 800d2b4:	f7f5 f8be 	bl	8002434 <__aeabi_dmul>
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	4b19      	ldr	r3, [pc, #100]	; (800d320 <ZeroCal+0x98>)
 800d2bc:	f7f5 f8ba 	bl	8002434 <__aeabi_dmul>
 800d2c0:	0006      	movs	r6, r0
 800d2c2:	000f      	movs	r7, r1
 800d2c4:	4b17      	ldr	r3, [pc, #92]	; (800d324 <ZeroCal+0x9c>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	05d8      	lsls	r0, r3, #23
 800d2ca:	1ac0      	subs	r0, r0, r3
 800d2cc:	f7f5 febe 	bl	800304c <__aeabi_i2d>
 800d2d0:	0002      	movs	r2, r0
 800d2d2:	000b      	movs	r3, r1
 800d2d4:	0030      	movs	r0, r6
 800d2d6:	0039      	movs	r1, r7
 800d2d8:	f7f4 fca2 	bl	8001c20 <__aeabi_ddiv>
 800d2dc:	f7f5 ff74 	bl	80031c8 <__aeabi_d2f>
 800d2e0:	4b11      	ldr	r3, [pc, #68]	; (800d328 <ZeroCal+0xa0>)
 800d2e2:	6018      	str	r0, [r3, #0]
	temp32=*(uint32_t*)&Zero_Drift;
 800d2e4:	4e11      	ldr	r6, [pc, #68]	; (800d32c <ZeroCal+0xa4>)
 800d2e6:	6030      	str	r0, [r6, #0]
	SetHX711Rate(10);
 800d2e8:	200a      	movs	r0, #10
 800d2ea:	f7fe ff4b 	bl	800c184 <SetHX711Rate>
	word_LSB=0x0000FFFF & temp32;
 800d2ee:	6833      	ldr	r3, [r6, #0]
 800d2f0:	b299      	uxth	r1, r3
 800d2f2:	4a0f      	ldr	r2, [pc, #60]	; (800d330 <ZeroCal+0xa8>)
 800d2f4:	8011      	strh	r1, [r2, #0]
	word_MSB=0x0000FFFF & (temp32>>16); 
 800d2f6:	0c1b      	lsrs	r3, r3, #16
 800d2f8:	4e0e      	ldr	r6, [pc, #56]	; (800d334 <ZeroCal+0xac>)
 800d2fa:	8033      	strh	r3, [r6, #0]
	EE_WriteVariable(_EE_zero_drift_LSB, word_LSB);
 800d2fc:	20fa      	movs	r0, #250	; 0xfa
 800d2fe:	30ff      	adds	r0, #255	; 0xff
 800d300:	f7fa fd36 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_zero_drift_MSB, word_MSB);
 800d304:	8831      	ldrh	r1, [r6, #0]
 800d306:	20fd      	movs	r0, #253	; 0xfd
 800d308:	0040      	lsls	r0, r0, #1
 800d30a:	f7fa fd31 	bl	8007d70 <EE_WriteVariable>
	IND_OFF();
 800d30e:	2200      	movs	r2, #0
 800d310:	0029      	movs	r1, r5
 800d312:	0020      	movs	r0, r4
 800d314:	f006 f84f 	bl	80133b6 <HAL_GPIO_WritePin>
}
 800d318:	2000      	movs	r0, #0
 800d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31c:	3fe00000 	.word	0x3fe00000
 800d320:	40080000 	.word	0x40080000
 800d324:	2000008c 	.word	0x2000008c
 800d328:	20001b38 	.word	0x20001b38
 800d32c:	20001b54 	.word	0x20001b54
 800d330:	20001b70 	.word	0x20001b70
 800d334:	20001b72 	.word	0x20001b72

0800d338 <zerocalCommand>:
{
 800d338:	b510      	push	{r4, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	0004      	movs	r4, r0
 800d33e:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800d344:	2c00      	cmp	r4, #0
 800d346:	d101      	bne.n	800d34c <zerocalCommand+0x14>
 800d348:	b672      	cpsid	i
 800d34a:	e7fe      	b.n	800d34a <zerocalCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d34c:	aa01      	add	r2, sp, #4
 800d34e:	2101      	movs	r1, #1
 800d350:	f002 fcd6 	bl	800fd00 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "1", 1))
 800d354:	7803      	ldrb	r3, [r0, #0]
 800d356:	2b31      	cmp	r3, #49	; 0x31
 800d358:	d009      	beq.n	800d36e <zerocalCommand+0x36>
  else if (!strncmp((const char *)pcParameterString1, "2", 1))
 800d35a:	2b32      	cmp	r3, #50	; 0x32
 800d35c:	d010      	beq.n	800d380 <zerocalCommand+0x48>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800d35e:	2213      	movs	r2, #19
 800d360:	490c      	ldr	r1, [pc, #48]	; (800d394 <zerocalCommand+0x5c>)
 800d362:	0020      	movs	r0, r4
 800d364:	f007 ffd9 	bl	801531a <memcpy>
}
 800d368:	2000      	movs	r0, #0
 800d36a:	b002      	add	sp, #8
 800d36c:	bd10      	pop	{r4, pc}
		ZeroCal(channel);
 800d36e:	2001      	movs	r0, #1
 800d370:	f7ff ff8a 	bl	800d288 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 1\r\n" );
 800d374:	2221      	movs	r2, #33	; 0x21
 800d376:	4908      	ldr	r1, [pc, #32]	; (800d398 <zerocalCommand+0x60>)
 800d378:	0020      	movs	r0, r4
 800d37a:	f007 ffce 	bl	801531a <memcpy>
 800d37e:	e7f3      	b.n	800d368 <zerocalCommand+0x30>
		ZeroCal(channel);
 800d380:	2002      	movs	r0, #2
 800d382:	f7ff ff81 	bl	800d288 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 2\r\n" );
 800d386:	2221      	movs	r2, #33	; 0x21
 800d388:	4904      	ldr	r1, [pc, #16]	; (800d39c <zerocalCommand+0x64>)
 800d38a:	0020      	movs	r0, r4
 800d38c:	f007 ffc5 	bl	801531a <memcpy>
 800d390:	e7ea      	b.n	800d368 <zerocalCommand+0x30>
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	0801b0d0 	.word	0x0801b0d0
 800d398:	0801d028 	.word	0x0801d028
 800d39c:	0801d04c 	.word	0x0801d04c

0800d3a0 <Module_MessagingTask>:
{
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	46c6      	mov	lr, r8
 800d3a4:	b500      	push	{lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	ab08      	add	r3, sp, #32
 800d3aa:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800d3ac:	4bd6      	ldr	r3, [pc, #856]	; (800d708 <Module_MessagingTask+0x368>)
 800d3ae:	469c      	mov	ip, r3
 800d3b0:	4460      	add	r0, ip
 800d3b2:	b283      	uxth	r3, r0
 800d3b4:	2b0d      	cmp	r3, #13
 800d3b6:	d900      	bls.n	800d3ba <Module_MessagingTask+0x1a>
 800d3b8:	e210      	b.n	800d7dc <Module_MessagingTask+0x43c>
 800d3ba:	0098      	lsls	r0, r3, #2
 800d3bc:	4bd3      	ldr	r3, [pc, #844]	; (800d70c <Module_MessagingTask+0x36c>)
 800d3be:	581b      	ldr	r3, [r3, r0]
 800d3c0:	469f      	mov	pc, r3
			SetHX711Rate(cMessage[port-1][shift]);
 800d3c2:	3901      	subs	r1, #1
 800d3c4:	00cb      	lsls	r3, r1, #3
 800d3c6:	1a59      	subs	r1, r3, r1
 800d3c8:	00ca      	lsls	r2, r1, #3
 800d3ca:	4bd1      	ldr	r3, [pc, #836]	; (800d710 <Module_MessagingTask+0x370>)
 800d3cc:	189b      	adds	r3, r3, r2
 800d3ce:	5d18      	ldrb	r0, [r3, r4]
 800d3d0:	f7fe fed8 	bl	800c184 <SetHX711Rate>
	Module_Status result = H26R0_OK;
 800d3d4:	2000      	movs	r0, #0
}
 800d3d6:	b002      	add	sp, #8
 800d3d8:	bc04      	pop	{r2}
 800d3da:	4690      	mov	r8, r2
 800d3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d3de:	1e48      	subs	r0, r1, #1
 800d3e0:	1da1      	adds	r1, r4, #6
 800d3e2:	4acb      	ldr	r2, [pc, #812]	; (800d710 <Module_MessagingTask+0x370>)
 800d3e4:	00c7      	lsls	r7, r0, #3
 800d3e6:	1a3b      	subs	r3, r7, r0
 800d3e8:	00dd      	lsls	r5, r3, #3
 800d3ea:	1955      	adds	r5, r2, r5
 800d3ec:	5c6b      	ldrb	r3, [r5, r1]
 800d3ee:	061b      	lsls	r3, r3, #24
 800d3f0:	1d61      	adds	r1, r4, #5
 800d3f2:	5c69      	ldrb	r1, [r5, r1]
 800d3f4:	0409      	lsls	r1, r1, #16
 800d3f6:	185b      	adds	r3, r3, r1
 800d3f8:	1d21      	adds	r1, r4, #4
 800d3fa:	5c69      	ldrb	r1, [r5, r1]
 800d3fc:	0209      	lsls	r1, r1, #8
 800d3fe:	185b      	adds	r3, r3, r1
 800d400:	1ce1      	adds	r1, r4, #3
 800d402:	5c69      	ldrb	r1, [r5, r1]
 800d404:	4698      	mov	r8, r3
 800d406:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d408:	0021      	movs	r1, r4
 800d40a:	310a      	adds	r1, #10
 800d40c:	5c6e      	ldrb	r6, [r5, r1]
 800d40e:	0636      	lsls	r6, r6, #24
 800d410:	3901      	subs	r1, #1
 800d412:	5c69      	ldrb	r1, [r5, r1]
 800d414:	0409      	lsls	r1, r1, #16
 800d416:	1876      	adds	r6, r6, r1
 800d418:	0021      	movs	r1, r4
 800d41a:	3108      	adds	r1, #8
 800d41c:	5c69      	ldrb	r1, [r5, r1]
 800d41e:	0209      	lsls	r1, r1, #8
 800d420:	1876      	adds	r6, r6, r1
 800d422:	1de1      	adds	r1, r4, #7
 800d424:	5c69      	ldrb	r1, [r5, r1]
 800d426:	1876      	adds	r6, r6, r1
		StreamGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d428:	1c61      	adds	r1, r4, #1
 800d42a:	1ca3      	adds	r3, r4, #2
 800d42c:	5ceb      	ldrb	r3, [r5, r3]
 800d42e:	469c      	mov	ip, r3
 800d430:	5c69      	ldrb	r1, [r5, r1]
 800d432:	1a38      	subs	r0, r7, r0
 800d434:	00c5      	lsls	r5, r0, #3
 800d436:	1952      	adds	r2, r2, r5
 800d438:	5d10      	ldrb	r0, [r2, r4]
 800d43a:	9600      	str	r6, [sp, #0]
 800d43c:	4643      	mov	r3, r8
 800d43e:	4662      	mov	r2, ip
 800d440:	f7ff f802 	bl	800c448 <StreamGramToPort>
	Module_Status result = H26R0_OK;
 800d444:	2000      	movs	r0, #0
			break;
 800d446:	e7c6      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d448:	1e48      	subs	r0, r1, #1
 800d44a:	1da1      	adds	r1, r4, #6
 800d44c:	4ab0      	ldr	r2, [pc, #704]	; (800d710 <Module_MessagingTask+0x370>)
 800d44e:	00c7      	lsls	r7, r0, #3
 800d450:	1a3b      	subs	r3, r7, r0
 800d452:	00dd      	lsls	r5, r3, #3
 800d454:	1955      	adds	r5, r2, r5
 800d456:	5c6b      	ldrb	r3, [r5, r1]
 800d458:	061b      	lsls	r3, r3, #24
 800d45a:	1d61      	adds	r1, r4, #5
 800d45c:	5c69      	ldrb	r1, [r5, r1]
 800d45e:	0409      	lsls	r1, r1, #16
 800d460:	185b      	adds	r3, r3, r1
 800d462:	1d21      	adds	r1, r4, #4
 800d464:	5c69      	ldrb	r1, [r5, r1]
 800d466:	0209      	lsls	r1, r1, #8
 800d468:	185b      	adds	r3, r3, r1
 800d46a:	1ce1      	adds	r1, r4, #3
 800d46c:	5c69      	ldrb	r1, [r5, r1]
 800d46e:	4698      	mov	r8, r3
 800d470:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d472:	0021      	movs	r1, r4
 800d474:	310a      	adds	r1, #10
 800d476:	5c6e      	ldrb	r6, [r5, r1]
 800d478:	0636      	lsls	r6, r6, #24
 800d47a:	3901      	subs	r1, #1
 800d47c:	5c69      	ldrb	r1, [r5, r1]
 800d47e:	0409      	lsls	r1, r1, #16
 800d480:	1876      	adds	r6, r6, r1
 800d482:	0021      	movs	r1, r4
 800d484:	3108      	adds	r1, #8
 800d486:	5c69      	ldrb	r1, [r5, r1]
 800d488:	0209      	lsls	r1, r1, #8
 800d48a:	1876      	adds	r6, r6, r1
 800d48c:	1de1      	adds	r1, r4, #7
 800d48e:	5c69      	ldrb	r1, [r5, r1]
 800d490:	1876      	adds	r6, r6, r1
		StreamKGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d492:	1c61      	adds	r1, r4, #1
 800d494:	1ca3      	adds	r3, r4, #2
 800d496:	5ceb      	ldrb	r3, [r5, r3]
 800d498:	469c      	mov	ip, r3
 800d49a:	5c69      	ldrb	r1, [r5, r1]
 800d49c:	1a38      	subs	r0, r7, r0
 800d49e:	00c5      	lsls	r5, r0, #3
 800d4a0:	1952      	adds	r2, r2, r5
 800d4a2:	5d10      	ldrb	r0, [r2, r4]
 800d4a4:	9600      	str	r6, [sp, #0]
 800d4a6:	4643      	mov	r3, r8
 800d4a8:	4662      	mov	r2, ip
 800d4aa:	f7ff f81b 	bl	800c4e4 <StreamKGramToPort>
	Module_Status result = H26R0_OK;
 800d4ae:	2000      	movs	r0, #0
			break;
 800d4b0:	e791      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d4b2:	1e48      	subs	r0, r1, #1
 800d4b4:	1da1      	adds	r1, r4, #6
 800d4b6:	4a96      	ldr	r2, [pc, #600]	; (800d710 <Module_MessagingTask+0x370>)
 800d4b8:	00c7      	lsls	r7, r0, #3
 800d4ba:	1a3b      	subs	r3, r7, r0
 800d4bc:	00dd      	lsls	r5, r3, #3
 800d4be:	1955      	adds	r5, r2, r5
 800d4c0:	5c6b      	ldrb	r3, [r5, r1]
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	1d61      	adds	r1, r4, #5
 800d4c6:	5c69      	ldrb	r1, [r5, r1]
 800d4c8:	0409      	lsls	r1, r1, #16
 800d4ca:	185b      	adds	r3, r3, r1
 800d4cc:	1d21      	adds	r1, r4, #4
 800d4ce:	5c69      	ldrb	r1, [r5, r1]
 800d4d0:	0209      	lsls	r1, r1, #8
 800d4d2:	185b      	adds	r3, r3, r1
 800d4d4:	1ce1      	adds	r1, r4, #3
 800d4d6:	5c69      	ldrb	r1, [r5, r1]
 800d4d8:	4698      	mov	r8, r3
 800d4da:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d4dc:	0021      	movs	r1, r4
 800d4de:	310a      	adds	r1, #10
 800d4e0:	5c6e      	ldrb	r6, [r5, r1]
 800d4e2:	0636      	lsls	r6, r6, #24
 800d4e4:	3901      	subs	r1, #1
 800d4e6:	5c69      	ldrb	r1, [r5, r1]
 800d4e8:	0409      	lsls	r1, r1, #16
 800d4ea:	1876      	adds	r6, r6, r1
 800d4ec:	0021      	movs	r1, r4
 800d4ee:	3108      	adds	r1, #8
 800d4f0:	5c69      	ldrb	r1, [r5, r1]
 800d4f2:	0209      	lsls	r1, r1, #8
 800d4f4:	1876      	adds	r6, r6, r1
 800d4f6:	1de1      	adds	r1, r4, #7
 800d4f8:	5c69      	ldrb	r1, [r5, r1]
 800d4fa:	1876      	adds	r6, r6, r1
		StreamOunceToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d4fc:	1c61      	adds	r1, r4, #1
 800d4fe:	1ca3      	adds	r3, r4, #2
 800d500:	5ceb      	ldrb	r3, [r5, r3]
 800d502:	469c      	mov	ip, r3
 800d504:	5c69      	ldrb	r1, [r5, r1]
 800d506:	1a38      	subs	r0, r7, r0
 800d508:	00c5      	lsls	r5, r0, #3
 800d50a:	1952      	adds	r2, r2, r5
 800d50c:	5d10      	ldrb	r0, [r2, r4]
 800d50e:	9600      	str	r6, [sp, #0]
 800d510:	4643      	mov	r3, r8
 800d512:	4662      	mov	r2, ip
 800d514:	f7ff f832 	bl	800c57c <StreamOunceToPort>
	Module_Status result = H26R0_OK;
 800d518:	2000      	movs	r0, #0
			break;
 800d51a:	e75c      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d51c:	1e48      	subs	r0, r1, #1
 800d51e:	1da1      	adds	r1, r4, #6
 800d520:	4a7b      	ldr	r2, [pc, #492]	; (800d710 <Module_MessagingTask+0x370>)
 800d522:	00c7      	lsls	r7, r0, #3
 800d524:	1a3b      	subs	r3, r7, r0
 800d526:	00dd      	lsls	r5, r3, #3
 800d528:	1955      	adds	r5, r2, r5
 800d52a:	5c6b      	ldrb	r3, [r5, r1]
 800d52c:	061b      	lsls	r3, r3, #24
 800d52e:	1d61      	adds	r1, r4, #5
 800d530:	5c69      	ldrb	r1, [r5, r1]
 800d532:	0409      	lsls	r1, r1, #16
 800d534:	185b      	adds	r3, r3, r1
 800d536:	1d21      	adds	r1, r4, #4
 800d538:	5c69      	ldrb	r1, [r5, r1]
 800d53a:	0209      	lsls	r1, r1, #8
 800d53c:	185b      	adds	r3, r3, r1
 800d53e:	1ce1      	adds	r1, r4, #3
 800d540:	5c69      	ldrb	r1, [r5, r1]
 800d542:	4698      	mov	r8, r3
 800d544:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d546:	0021      	movs	r1, r4
 800d548:	310a      	adds	r1, #10
 800d54a:	5c6e      	ldrb	r6, [r5, r1]
 800d54c:	0636      	lsls	r6, r6, #24
 800d54e:	3901      	subs	r1, #1
 800d550:	5c69      	ldrb	r1, [r5, r1]
 800d552:	0409      	lsls	r1, r1, #16
 800d554:	1876      	adds	r6, r6, r1
 800d556:	0021      	movs	r1, r4
 800d558:	3108      	adds	r1, #8
 800d55a:	5c69      	ldrb	r1, [r5, r1]
 800d55c:	0209      	lsls	r1, r1, #8
 800d55e:	1876      	adds	r6, r6, r1
 800d560:	1de1      	adds	r1, r4, #7
 800d562:	5c69      	ldrb	r1, [r5, r1]
 800d564:	1876      	adds	r6, r6, r1
		StreamPoundToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d566:	1c61      	adds	r1, r4, #1
 800d568:	1ca3      	adds	r3, r4, #2
 800d56a:	5ceb      	ldrb	r3, [r5, r3]
 800d56c:	469c      	mov	ip, r3
 800d56e:	5c69      	ldrb	r1, [r5, r1]
 800d570:	1a38      	subs	r0, r7, r0
 800d572:	00c5      	lsls	r5, r0, #3
 800d574:	1952      	adds	r2, r2, r5
 800d576:	5d10      	ldrb	r0, [r2, r4]
 800d578:	9600      	str	r6, [sp, #0]
 800d57a:	4643      	mov	r3, r8
 800d57c:	4662      	mov	r2, ip
 800d57e:	f7ff f84b 	bl	800c618 <StreamPoundToPort>
	Module_Status result = H26R0_OK;
 800d582:	2000      	movs	r0, #0
			break;
 800d584:	e727      	b.n	800d3d6 <Module_MessagingTask+0x36>
			global_mode=IDLE_CASE;
 800d586:	4b63      	ldr	r3, [pc, #396]	; (800d714 <Module_MessagingTask+0x374>)
 800d588:	2200      	movs	r2, #0
 800d58a:	701a      	strb	r2, [r3, #0]
			PowerDown();
 800d58c:	f7ff fb1e 	bl	800cbcc <PowerDown>
			xTimerStop( xTimer, portMAX_DELAY );
 800d590:	4b61      	ldr	r3, [pc, #388]	; (800d718 <Module_MessagingTask+0x378>)
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	2301      	movs	r3, #1
 800d596:	425b      	negs	r3, r3
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	2300      	movs	r3, #0
 800d59c:	2200      	movs	r2, #0
 800d59e:	2103      	movs	r1, #3
 800d5a0:	f003 ffd2 	bl	8011548 <xTimerGenericCommand>
	Module_Status result = H26R0_OK;
 800d5a4:	2000      	movs	r0, #0
			break;
 800d5a6:	e716      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if(cMessage[port - 1][shift] == 1)
 800d5a8:	1e4d      	subs	r5, r1, #1
 800d5aa:	00eb      	lsls	r3, r5, #3
 800d5ac:	1b5b      	subs	r3, r3, r5
 800d5ae:	00da      	lsls	r2, r3, #3
 800d5b0:	4b57      	ldr	r3, [pc, #348]	; (800d710 <Module_MessagingTask+0x370>)
 800d5b2:	189b      	adds	r3, r3, r2
 800d5b4:	5d18      	ldrb	r0, [r3, r4]
 800d5b6:	2801      	cmp	r0, #1
 800d5b8:	d01a      	beq.n	800d5f0 <Module_MessagingTask+0x250>
				H26R0_Weight2 =SampleGram(cMessage[port - 1][shift]);
 800d5ba:	f7ff fb45 	bl	800cc48 <SampleGram>
 800d5be:	4b57      	ldr	r3, [pc, #348]	; (800d71c <Module_MessagingTask+0x37c>)
 800d5c0:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Gram,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d5c2:	1c66      	adds	r6, r4, #1
 800d5c4:	3402      	adds	r4, #2
 800d5c6:	4a52      	ldr	r2, [pc, #328]	; (800d710 <Module_MessagingTask+0x370>)
 800d5c8:	00e9      	lsls	r1, r5, #3
 800d5ca:	1b48      	subs	r0, r1, r5
 800d5cc:	00c3      	lsls	r3, r0, #3
 800d5ce:	18d3      	adds	r3, r2, r3
 800d5d0:	5d9b      	ldrb	r3, [r3, r6]
 800d5d2:	4853      	ldr	r0, [pc, #332]	; (800d720 <Module_MessagingTask+0x380>)
 800d5d4:	6800      	ldr	r0, [r0, #0]
 800d5d6:	2600      	movs	r6, #0
 800d5d8:	9601      	str	r6, [sp, #4]
 800d5da:	1b49      	subs	r1, r1, r5
 800d5dc:	00cd      	lsls	r5, r1, #3
 800d5de:	1952      	adds	r2, r2, r5
 800d5e0:	5d12      	ldrb	r2, [r2, r4]
 800d5e2:	9200      	str	r2, [sp, #0]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	2107      	movs	r1, #7
 800d5e8:	f7ff fbce 	bl	800cd88 <SendResults>
	Module_Status result = H26R0_OK;
 800d5ec:	2000      	movs	r0, #0
			break;
 800d5ee:	e6f2      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleGram(cMessage[port - 1][shift]);
 800d5f0:	f7ff fb2a 	bl	800cc48 <SampleGram>
 800d5f4:	4b4b      	ldr	r3, [pc, #300]	; (800d724 <Module_MessagingTask+0x384>)
 800d5f6:	6018      	str	r0, [r3, #0]
 800d5f8:	e7e3      	b.n	800d5c2 <Module_MessagingTask+0x222>
			if(cMessage[port - 1][shift] == 1)
 800d5fa:	1e4d      	subs	r5, r1, #1
 800d5fc:	00eb      	lsls	r3, r5, #3
 800d5fe:	1b5b      	subs	r3, r3, r5
 800d600:	00da      	lsls	r2, r3, #3
 800d602:	4b43      	ldr	r3, [pc, #268]	; (800d710 <Module_MessagingTask+0x370>)
 800d604:	189b      	adds	r3, r3, r2
 800d606:	5d18      	ldrb	r0, [r3, r4]
 800d608:	2801      	cmp	r0, #1
 800d60a:	d01a      	beq.n	800d642 <Module_MessagingTask+0x2a2>
				H26R0_Weight2 =SampleKGram(cMessage[port - 1][shift]);
 800d60c:	f7ff fb36 	bl	800cc7c <SampleKGram>
 800d610:	4b42      	ldr	r3, [pc, #264]	; (800d71c <Module_MessagingTask+0x37c>)
 800d612:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,KGram,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d614:	1c66      	adds	r6, r4, #1
 800d616:	3402      	adds	r4, #2
 800d618:	4a3d      	ldr	r2, [pc, #244]	; (800d710 <Module_MessagingTask+0x370>)
 800d61a:	00e9      	lsls	r1, r5, #3
 800d61c:	1b48      	subs	r0, r1, r5
 800d61e:	00c3      	lsls	r3, r0, #3
 800d620:	18d3      	adds	r3, r2, r3
 800d622:	5d9b      	ldrb	r3, [r3, r6]
 800d624:	483e      	ldr	r0, [pc, #248]	; (800d720 <Module_MessagingTask+0x380>)
 800d626:	6800      	ldr	r0, [r0, #0]
 800d628:	2600      	movs	r6, #0
 800d62a:	9601      	str	r6, [sp, #4]
 800d62c:	1b49      	subs	r1, r1, r5
 800d62e:	00cd      	lsls	r5, r1, #3
 800d630:	1952      	adds	r2, r2, r5
 800d632:	5d12      	ldrb	r2, [r2, r4]
 800d634:	9200      	str	r2, [sp, #0]
 800d636:	2202      	movs	r2, #2
 800d638:	2107      	movs	r1, #7
 800d63a:	f7ff fba5 	bl	800cd88 <SendResults>
	Module_Status result = H26R0_OK;
 800d63e:	2000      	movs	r0, #0
			break;
 800d640:	e6c9      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleKGram(cMessage[port - 1][shift]);
 800d642:	f7ff fb1b 	bl	800cc7c <SampleKGram>
 800d646:	4b37      	ldr	r3, [pc, #220]	; (800d724 <Module_MessagingTask+0x384>)
 800d648:	6018      	str	r0, [r3, #0]
 800d64a:	e7e3      	b.n	800d614 <Module_MessagingTask+0x274>
			if(cMessage[port - 1][shift] == 1)
 800d64c:	1e4d      	subs	r5, r1, #1
 800d64e:	00eb      	lsls	r3, r5, #3
 800d650:	1b5b      	subs	r3, r3, r5
 800d652:	00da      	lsls	r2, r3, #3
 800d654:	4b2e      	ldr	r3, [pc, #184]	; (800d710 <Module_MessagingTask+0x370>)
 800d656:	189b      	adds	r3, r3, r2
 800d658:	5d18      	ldrb	r0, [r3, r4]
 800d65a:	2801      	cmp	r0, #1
 800d65c:	d01a      	beq.n	800d694 <Module_MessagingTask+0x2f4>
				H26R0_Weight2 =SampleOunce(cMessage[port - 1][shift]);
 800d65e:	f7ff fb21 	bl	800cca4 <SampleOunce>
 800d662:	4b2e      	ldr	r3, [pc, #184]	; (800d71c <Module_MessagingTask+0x37c>)
 800d664:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Ounce,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d666:	1c66      	adds	r6, r4, #1
 800d668:	3402      	adds	r4, #2
 800d66a:	4a29      	ldr	r2, [pc, #164]	; (800d710 <Module_MessagingTask+0x370>)
 800d66c:	00e9      	lsls	r1, r5, #3
 800d66e:	1b48      	subs	r0, r1, r5
 800d670:	00c3      	lsls	r3, r0, #3
 800d672:	18d3      	adds	r3, r2, r3
 800d674:	5d9b      	ldrb	r3, [r3, r6]
 800d676:	482a      	ldr	r0, [pc, #168]	; (800d720 <Module_MessagingTask+0x380>)
 800d678:	6800      	ldr	r0, [r0, #0]
 800d67a:	2600      	movs	r6, #0
 800d67c:	9601      	str	r6, [sp, #4]
 800d67e:	1b49      	subs	r1, r1, r5
 800d680:	00cd      	lsls	r5, r1, #3
 800d682:	1952      	adds	r2, r2, r5
 800d684:	5d12      	ldrb	r2, [r2, r4]
 800d686:	9200      	str	r2, [sp, #0]
 800d688:	2203      	movs	r2, #3
 800d68a:	2107      	movs	r1, #7
 800d68c:	f7ff fb7c 	bl	800cd88 <SendResults>
	Module_Status result = H26R0_OK;
 800d690:	2000      	movs	r0, #0
			break;
 800d692:	e6a0      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleOunce(cMessage[port - 1][shift]);
 800d694:	f7ff fb06 	bl	800cca4 <SampleOunce>
 800d698:	4b22      	ldr	r3, [pc, #136]	; (800d724 <Module_MessagingTask+0x384>)
 800d69a:	6018      	str	r0, [r3, #0]
 800d69c:	e7e3      	b.n	800d666 <Module_MessagingTask+0x2c6>
			if(cMessage[port - 1][shift] == 1)
 800d69e:	1e4d      	subs	r5, r1, #1
 800d6a0:	00eb      	lsls	r3, r5, #3
 800d6a2:	1b5b      	subs	r3, r3, r5
 800d6a4:	00da      	lsls	r2, r3, #3
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <Module_MessagingTask+0x370>)
 800d6a8:	189b      	adds	r3, r3, r2
 800d6aa:	5d18      	ldrb	r0, [r3, r4]
 800d6ac:	2801      	cmp	r0, #1
 800d6ae:	d01a      	beq.n	800d6e6 <Module_MessagingTask+0x346>
				H26R0_Weight2 =SamplePound(cMessage[port - 1][shift]);
 800d6b0:	f7ff fb18 	bl	800cce4 <SamplePound>
 800d6b4:	4b19      	ldr	r3, [pc, #100]	; (800d71c <Module_MessagingTask+0x37c>)
 800d6b6:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Pound,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d6b8:	1c66      	adds	r6, r4, #1
 800d6ba:	3402      	adds	r4, #2
 800d6bc:	4a14      	ldr	r2, [pc, #80]	; (800d710 <Module_MessagingTask+0x370>)
 800d6be:	00e9      	lsls	r1, r5, #3
 800d6c0:	1b48      	subs	r0, r1, r5
 800d6c2:	00c3      	lsls	r3, r0, #3
 800d6c4:	18d3      	adds	r3, r2, r3
 800d6c6:	5d9b      	ldrb	r3, [r3, r6]
 800d6c8:	4815      	ldr	r0, [pc, #84]	; (800d720 <Module_MessagingTask+0x380>)
 800d6ca:	6800      	ldr	r0, [r0, #0]
 800d6cc:	2600      	movs	r6, #0
 800d6ce:	9601      	str	r6, [sp, #4]
 800d6d0:	1b49      	subs	r1, r1, r5
 800d6d2:	00cd      	lsls	r5, r1, #3
 800d6d4:	1952      	adds	r2, r2, r5
 800d6d6:	5d12      	ldrb	r2, [r2, r4]
 800d6d8:	9200      	str	r2, [sp, #0]
 800d6da:	2204      	movs	r2, #4
 800d6dc:	2107      	movs	r1, #7
 800d6de:	f7ff fb53 	bl	800cd88 <SendResults>
	Module_Status result = H26R0_OK;
 800d6e2:	2000      	movs	r0, #0
			break;
 800d6e4:	e677      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1 =SamplePound(cMessage[port - 1][shift]);
 800d6e6:	f7ff fafd 	bl	800cce4 <SamplePound>
 800d6ea:	4b0e      	ldr	r3, [pc, #56]	; (800d724 <Module_MessagingTask+0x384>)
 800d6ec:	6018      	str	r0, [r3, #0]
 800d6ee:	e7e3      	b.n	800d6b8 <Module_MessagingTask+0x318>
				ZeroCal(cMessage[port-1][shift]);
 800d6f0:	3901      	subs	r1, #1
 800d6f2:	00cb      	lsls	r3, r1, #3
 800d6f4:	1a59      	subs	r1, r3, r1
 800d6f6:	00ca      	lsls	r2, r1, #3
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <Module_MessagingTask+0x370>)
 800d6fa:	189b      	adds	r3, r3, r2
 800d6fc:	5d18      	ldrb	r0, [r3, r4]
 800d6fe:	f7ff fdc3 	bl	800d288 <ZeroCal>
	Module_Status result = H26R0_OK;
 800d702:	2000      	movs	r0, #0
			break;
 800d704:	e667      	b.n	800d3d6 <Module_MessagingTask+0x36>
 800d706:	46c0      	nop			; (mov r8, r8)
 800d708:	fffff894 	.word	0xfffff894
 800d70c:	0801c894 	.word	0x0801c894
 800d710:	20000d30 	.word	0x20000d30
 800d714:	20006f35 	.word	0x20006f35
 800d718:	20001b74 	.word	0x20001b74
 800d71c:	20001730 	.word	0x20001730
 800d720:	20001724 	.word	0x20001724
 800d724:	2000172c 	.word	0x2000172c
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800d728:	1e4d      	subs	r5, r1, #1
 800d72a:	1c62      	adds	r2, r4, #1
 800d72c:	4b2c      	ldr	r3, [pc, #176]	; (800d7e0 <Module_MessagingTask+0x440>)
 800d72e:	4698      	mov	r8, r3
 800d730:	00ef      	lsls	r7, r5, #3
 800d732:	1b7b      	subs	r3, r7, r5
 800d734:	00d8      	lsls	r0, r3, #3
 800d736:	4440      	add	r0, r8
 800d738:	5c83      	ldrb	r3, [r0, r2]
 800d73a:	061b      	lsls	r3, r3, #24
 800d73c:	1ca2      	adds	r2, r4, #2
 800d73e:	5c82      	ldrb	r2, [r0, r2]
 800d740:	0412      	lsls	r2, r2, #16
 800d742:	189b      	adds	r3, r3, r2
 800d744:	1ce2      	adds	r2, r4, #3
 800d746:	5c82      	ldrb	r2, [r0, r2]
 800d748:	0212      	lsls	r2, r2, #8
 800d74a:	189b      	adds	r3, r3, r2
 800d74c:	1d22      	adds	r2, r4, #4
 800d74e:	5c82      	ldrb	r2, [r0, r2]
 800d750:	189b      	adds	r3, r3, r2
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800d752:	1d62      	adds	r2, r4, #5
 800d754:	5c86      	ldrb	r6, [r0, r2]
 800d756:	0636      	lsls	r6, r6, #24
 800d758:	1da2      	adds	r2, r4, #6
 800d75a:	5c82      	ldrb	r2, [r0, r2]
 800d75c:	0412      	lsls	r2, r2, #16
 800d75e:	18b6      	adds	r6, r6, r2
 800d760:	1de2      	adds	r2, r4, #7
 800d762:	5c82      	ldrb	r2, [r0, r2]
 800d764:	0212      	lsls	r2, r2, #8
 800d766:	18b6      	adds	r6, r6, r2
 800d768:	0022      	movs	r2, r4
 800d76a:	3208      	adds	r2, #8
 800d76c:	5c82      	ldrb	r2, [r0, r2]
 800d76e:	18b6      	adds	r6, r6, r2
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800d770:	0021      	movs	r1, r4
 800d772:	3109      	adds	r1, #9
 800d774:	0022      	movs	r2, r4
 800d776:	320a      	adds	r2, #10
 800d778:	5c82      	ldrb	r2, [r0, r2]
 800d77a:	5c41      	ldrb	r1, [r0, r1]
 800d77c:	5d00      	ldrb	r0, [r0, r4]
 800d77e:	9600      	str	r6, [sp, #0]
 800d780:	f7ff f884 	bl	800c88c <StreamRawToPort>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d784:	1b7d      	subs	r5, r7, r5
 800d786:	00eb      	lsls	r3, r5, #3
 800d788:	4443      	add	r3, r8
 800d78a:	5d18      	ldrb	r0, [r3, r4]
 800d78c:	2101      	movs	r1, #1
 800d78e:	f7ff fac9 	bl	800cd24 <Average>
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <Module_MessagingTask+0x444>)
 800d794:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d796:	2000      	movs	r0, #0
			break;
 800d798:	e61d      	b.n	800d3d6 <Module_MessagingTask+0x36>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d79a:	3901      	subs	r1, #1
 800d79c:	00cb      	lsls	r3, r1, #3
 800d79e:	1a59      	subs	r1, r3, r1
 800d7a0:	00ca      	lsls	r2, r1, #3
 800d7a2:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <Module_MessagingTask+0x440>)
 800d7a4:	189b      	adds	r3, r3, r2
 800d7a6:	5d18      	ldrb	r0, [r3, r4]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	f7ff fabb 	bl	800cd24 <Average>
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <Module_MessagingTask+0x444>)
 800d7b0:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d7b2:	2000      	movs	r0, #0
			break;
 800d7b4:	e60f      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0)
 800d7b6:	3901      	subs	r1, #1
 800d7b8:	00cb      	lsls	r3, r1, #3
 800d7ba:	1a59      	subs	r1, r3, r1
 800d7bc:	00ca      	lsls	r2, r1, #3
 800d7be:	4b08      	ldr	r3, [pc, #32]	; (800d7e0 <Module_MessagingTask+0x440>)
 800d7c0:	189b      	adds	r3, r3, r2
 800d7c2:	5d1b      	ldrb	r3, [r3, r4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <Module_MessagingTask+0x432>
				H26R0_DATA_FORMAT = FMT_FLOAT;
 800d7c8:	4b07      	ldr	r3, [pc, #28]	; (800d7e8 <Module_MessagingTask+0x448>)
 800d7ca:	2207      	movs	r2, #7
 800d7cc:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e601      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_DATA_FORMAT = FMT_UINT32;
 800d7d2:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <Module_MessagingTask+0x448>)
 800d7d4:	2205      	movs	r2, #5
 800d7d6:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800d7d8:	2000      	movs	r0, #0
 800d7da:	e5fc      	b.n	800d3d6 <Module_MessagingTask+0x36>
			result = H26R0_ERR_UnknownMessage;
 800d7dc:	2001      	movs	r0, #1
 800d7de:	e5fa      	b.n	800d3d6 <Module_MessagingTask+0x36>
 800d7e0:	20000d30 	.word	0x20000d30
 800d7e4:	20001730 	.word	0x20001730
 800d7e8:	20000084 	.word	0x20000084

0800d7ec <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d7ec:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d7ee:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d7f4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d7f6:	2280      	movs	r2, #128	; 0x80
 800d7f8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d7fa:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d7fc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d7fe:	3320      	adds	r3, #32
 800d800:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d802:	2380      	movs	r3, #128	; 0x80
 800d804:	019b      	lsls	r3, r3, #6
 800d806:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d808:	f004 feaa 	bl	8012560 <HAL_DMA_Init>
}
 800d80c:	bd10      	pop	{r4, pc}

0800d80e <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d80e:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d810:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d812:	2310      	movs	r3, #16
 800d814:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d816:	2300      	movs	r3, #0
 800d818:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d81a:	2280      	movs	r2, #128	; 0x80
 800d81c:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d81e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d820:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800d822:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d824:	2380      	movs	r3, #128	; 0x80
 800d826:	019b      	lsls	r3, r3, #6
 800d828:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d82a:	f004 fe99 	bl	8012560 <HAL_DMA_Init>
}
 800d82e:	bd10      	pop	{r4, pc}

0800d830 <DMA_Init>:
{
 800d830:	b510      	push	{r4, lr}
 800d832:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800d834:	4b1d      	ldr	r3, [pc, #116]	; (800d8ac <DMA_Init+0x7c>)
 800d836:	6959      	ldr	r1, [r3, #20]
 800d838:	2201      	movs	r2, #1
 800d83a:	4311      	orrs	r1, r2
 800d83c:	6159      	str	r1, [r3, #20]
 800d83e:	6959      	ldr	r1, [r3, #20]
 800d840:	400a      	ands	r2, r1
 800d842:	9200      	str	r2, [sp, #0]
 800d844:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800d846:	6959      	ldr	r1, [r3, #20]
 800d848:	2202      	movs	r2, #2
 800d84a:	4311      	orrs	r1, r2
 800d84c:	6159      	str	r1, [r3, #20]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	401a      	ands	r2, r3
 800d852:	9201      	str	r2, [sp, #4]
 800d854:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800d856:	4c16      	ldr	r4, [pc, #88]	; (800d8b0 <DMA_Init+0x80>)
 800d858:	4916      	ldr	r1, [pc, #88]	; (800d8b4 <DMA_Init+0x84>)
 800d85a:	0020      	movs	r0, r4
 800d85c:	f7ff ffc6 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800d860:	0020      	movs	r0, r4
 800d862:	3038      	adds	r0, #56	; 0x38
 800d864:	4914      	ldr	r1, [pc, #80]	; (800d8b8 <DMA_Init+0x88>)
 800d866:	f7ff ffc1 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800d86a:	0020      	movs	r0, r4
 800d86c:	3070      	adds	r0, #112	; 0x70
 800d86e:	4913      	ldr	r1, [pc, #76]	; (800d8bc <DMA_Init+0x8c>)
 800d870:	f7ff ffbc 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800d874:	0020      	movs	r0, r4
 800d876:	30a8      	adds	r0, #168	; 0xa8
 800d878:	4911      	ldr	r1, [pc, #68]	; (800d8c0 <DMA_Init+0x90>)
 800d87a:	f7ff ffb7 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800d87e:	0020      	movs	r0, r4
 800d880:	30e0      	adds	r0, #224	; 0xe0
 800d882:	4910      	ldr	r1, [pc, #64]	; (800d8c4 <DMA_Init+0x94>)
 800d884:	f7ff ffb2 	bl	800d7ec <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800d888:	4c0f      	ldr	r4, [pc, #60]	; (800d8c8 <DMA_Init+0x98>)
 800d88a:	4910      	ldr	r1, [pc, #64]	; (800d8cc <DMA_Init+0x9c>)
 800d88c:	0020      	movs	r0, r4
 800d88e:	f7ff ffbe 	bl	800d80e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800d892:	0020      	movs	r0, r4
 800d894:	3038      	adds	r0, #56	; 0x38
 800d896:	490e      	ldr	r1, [pc, #56]	; (800d8d0 <DMA_Init+0xa0>)
 800d898:	f7ff ffb9 	bl	800d80e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800d89c:	0020      	movs	r0, r4
 800d89e:	3070      	adds	r0, #112	; 0x70
 800d8a0:	490c      	ldr	r1, [pc, #48]	; (800d8d4 <DMA_Init+0xa4>)
 800d8a2:	f7ff ffb4 	bl	800d80e <DMA_MSG_TX_CH_Init>
}
 800d8a6:	b002      	add	sp, #8
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	46c0      	nop			; (mov r8, r8)
 800d8ac:	40021000 	.word	0x40021000
 800d8b0:	20001b78 	.word	0x20001b78
 800d8b4:	40020008 	.word	0x40020008
 800d8b8:	40020030 	.word	0x40020030
 800d8bc:	40020058 	.word	0x40020058
 800d8c0:	4002006c 	.word	0x4002006c
 800d8c4:	4002041c 	.word	0x4002041c
 800d8c8:	20001cc8 	.word	0x20001cc8
 800d8cc:	4002001c 	.word	0x4002001c
 800d8d0:	40020044 	.word	0x40020044
 800d8d4:	40020080 	.word	0x40020080

0800d8d8 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d8d8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d8da:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d8e0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800d8e2:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d8e4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d8e6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d8e8:	3320      	adds	r3, #32
 800d8ea:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800d8ec:	2380      	movs	r3, #128	; 0x80
 800d8ee:	015b      	lsls	r3, r3, #5
 800d8f0:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d8f2:	f004 fe35 	bl	8012560 <HAL_DMA_Init>
}
 800d8f6:	bd10      	pop	{r4, pc}

0800d8f8 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800d8f8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d8fa:	6803      	ldr	r3, [r0, #0]
 800d8fc:	4a20      	ldr	r2, [pc, #128]	; (800d980 <SetupDMAInterrupts+0x88>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d020      	beq.n	800d944 <SetupDMAInterrupts+0x4c>
 800d902:	d827      	bhi.n	800d954 <SetupDMAInterrupts+0x5c>
 800d904:	4a1f      	ldr	r2, [pc, #124]	; (800d984 <SetupDMAInterrupts+0x8c>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d00e      	beq.n	800d928 <SetupDMAInterrupts+0x30>
 800d90a:	d815      	bhi.n	800d938 <SetupDMAInterrupts+0x40>
 800d90c:	4a1e      	ldr	r2, [pc, #120]	; (800d988 <SetupDMAInterrupts+0x90>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d107      	bne.n	800d922 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800d912:	2200      	movs	r2, #0
 800d914:	2009      	movs	r0, #9
 800d916:	f004 fc85 	bl	8012224 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800d91a:	2009      	movs	r0, #9
 800d91c:	f004 fcb2 	bl	8012284 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800d920:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d922:	4a1a      	ldr	r2, [pc, #104]	; (800d98c <SetupDMAInterrupts+0x94>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d1fb      	bne.n	800d920 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800d928:	2200      	movs	r2, #0
 800d92a:	200a      	movs	r0, #10
 800d92c:	f004 fc7a 	bl	8012224 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d930:	200a      	movs	r0, #10
 800d932:	f004 fca7 	bl	8012284 <HAL_NVIC_EnableIRQ>
			break;
 800d936:	e7f3      	b.n	800d920 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800d938:	4a15      	ldr	r2, [pc, #84]	; (800d990 <SetupDMAInterrupts+0x98>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d002      	beq.n	800d944 <SetupDMAInterrupts+0x4c>
 800d93e:	4a15      	ldr	r2, [pc, #84]	; (800d994 <SetupDMAInterrupts+0x9c>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d1ed      	bne.n	800d920 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800d944:	2200      	movs	r2, #0
 800d946:	200b      	movs	r0, #11
 800d948:	f004 fc6c 	bl	8012224 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d94c:	200b      	movs	r0, #11
 800d94e:	f004 fc99 	bl	8012284 <HAL_NVIC_EnableIRQ>
}
 800d952:	e7e5      	b.n	800d920 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800d954:	4a10      	ldr	r2, [pc, #64]	; (800d998 <SetupDMAInterrupts+0xa0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d0e6      	beq.n	800d928 <SetupDMAInterrupts+0x30>
 800d95a:	d909      	bls.n	800d970 <SetupDMAInterrupts+0x78>
 800d95c:	4a0f      	ldr	r2, [pc, #60]	; (800d99c <SetupDMAInterrupts+0xa4>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d0f0      	beq.n	800d944 <SetupDMAInterrupts+0x4c>
 800d962:	4a0f      	ldr	r2, [pc, #60]	; (800d9a0 <SetupDMAInterrupts+0xa8>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d0ed      	beq.n	800d944 <SetupDMAInterrupts+0x4c>
 800d968:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <SetupDMAInterrupts+0xac>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d1d8      	bne.n	800d920 <SetupDMAInterrupts+0x28>
 800d96e:	e7e9      	b.n	800d944 <SetupDMAInterrupts+0x4c>
 800d970:	4a0d      	ldr	r2, [pc, #52]	; (800d9a8 <SetupDMAInterrupts+0xb0>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d0e6      	beq.n	800d944 <SetupDMAInterrupts+0x4c>
 800d976:	4a0d      	ldr	r2, [pc, #52]	; (800d9ac <SetupDMAInterrupts+0xb4>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d0d5      	beq.n	800d928 <SetupDMAInterrupts+0x30>
 800d97c:	e7d0      	b.n	800d920 <SetupDMAInterrupts+0x28>
 800d97e:	46c0      	nop			; (mov r8, r8)
 800d980:	4002006c 	.word	0x4002006c
 800d984:	40020030 	.word	0x40020030
 800d988:	40020008 	.word	0x40020008
 800d98c:	4002001c 	.word	0x4002001c
 800d990:	40020044 	.word	0x40020044
 800d994:	40020058 	.word	0x40020058
 800d998:	4002041c 	.word	0x4002041c
 800d99c:	40020444 	.word	0x40020444
 800d9a0:	40020458 	.word	0x40020458
 800d9a4:	40020430 	.word	0x40020430
 800d9a8:	40020080 	.word	0x40020080
 800d9ac:	40020408 	.word	0x40020408

0800d9b0 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800d9b0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d9b2:	6803      	ldr	r3, [r0, #0]
 800d9b4:	4a1a      	ldr	r2, [pc, #104]	; (800da20 <UnSetupDMAInterrupts+0x70>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d018      	beq.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800d9ba:	d81b      	bhi.n	800d9f4 <UnSetupDMAInterrupts+0x44>
 800d9bc:	4a19      	ldr	r2, [pc, #100]	; (800da24 <UnSetupDMAInterrupts+0x74>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d00a      	beq.n	800d9d8 <UnSetupDMAInterrupts+0x28>
 800d9c2:	d80d      	bhi.n	800d9e0 <UnSetupDMAInterrupts+0x30>
 800d9c4:	4a18      	ldr	r2, [pc, #96]	; (800da28 <UnSetupDMAInterrupts+0x78>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d103      	bne.n	800d9d2 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800d9ca:	2009      	movs	r0, #9
 800d9cc:	f004 fc64 	bl	8012298 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800d9d0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d9d2:	4a16      	ldr	r2, [pc, #88]	; (800da2c <UnSetupDMAInterrupts+0x7c>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d1fb      	bne.n	800d9d0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d9d8:	200a      	movs	r0, #10
 800d9da:	f004 fc5d 	bl	8012298 <HAL_NVIC_DisableIRQ>
			break;
 800d9de:	e7f7      	b.n	800d9d0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800d9e0:	4a13      	ldr	r2, [pc, #76]	; (800da30 <UnSetupDMAInterrupts+0x80>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d002      	beq.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800d9e6:	4a13      	ldr	r2, [pc, #76]	; (800da34 <UnSetupDMAInterrupts+0x84>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d1f1      	bne.n	800d9d0 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d9ec:	200b      	movs	r0, #11
 800d9ee:	f004 fc53 	bl	8012298 <HAL_NVIC_DisableIRQ>
}
 800d9f2:	e7ed      	b.n	800d9d0 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800d9f4:	4a10      	ldr	r2, [pc, #64]	; (800da38 <UnSetupDMAInterrupts+0x88>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d0ee      	beq.n	800d9d8 <UnSetupDMAInterrupts+0x28>
 800d9fa:	d909      	bls.n	800da10 <UnSetupDMAInterrupts+0x60>
 800d9fc:	4a0f      	ldr	r2, [pc, #60]	; (800da3c <UnSetupDMAInterrupts+0x8c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d0f4      	beq.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800da02:	4a0f      	ldr	r2, [pc, #60]	; (800da40 <UnSetupDMAInterrupts+0x90>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d0f1      	beq.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800da08:	4a0e      	ldr	r2, [pc, #56]	; (800da44 <UnSetupDMAInterrupts+0x94>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d1e0      	bne.n	800d9d0 <UnSetupDMAInterrupts+0x20>
 800da0e:	e7ed      	b.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800da10:	4a0d      	ldr	r2, [pc, #52]	; (800da48 <UnSetupDMAInterrupts+0x98>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d0ea      	beq.n	800d9ec <UnSetupDMAInterrupts+0x3c>
 800da16:	4a0d      	ldr	r2, [pc, #52]	; (800da4c <UnSetupDMAInterrupts+0x9c>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d0dd      	beq.n	800d9d8 <UnSetupDMAInterrupts+0x28>
 800da1c:	e7d8      	b.n	800d9d0 <UnSetupDMAInterrupts+0x20>
 800da1e:	46c0      	nop			; (mov r8, r8)
 800da20:	4002006c 	.word	0x4002006c
 800da24:	40020030 	.word	0x40020030
 800da28:	40020008 	.word	0x40020008
 800da2c:	4002001c 	.word	0x4002001c
 800da30:	40020044 	.word	0x40020044
 800da34:	40020058 	.word	0x40020058
 800da38:	4002041c 	.word	0x4002041c
 800da3c:	40020444 	.word	0x40020444
 800da40:	40020458 	.word	0x40020458
 800da44:	40020430 	.word	0x40020430
 800da48:	40020080 	.word	0x40020080
 800da4c:	40020408 	.word	0x40020408

0800da50 <DMA_MSG_TX_UnSetup>:
{	
 800da50:	b510      	push	{r4, lr}
 800da52:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800da54:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800da56:	f7ff ffab 	bl	800d9b0 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800da5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800da5c:	2300      	movs	r3, #0
 800da5e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800da60:	6623      	str	r3, [r4, #96]	; 0x60
}
 800da62:	bd10      	pop	{r4, pc}

0800da64 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800da64:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800da66:	6803      	ldr	r3, [r0, #0]
 800da68:	4acc      	ldr	r2, [pc, #816]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d100      	bne.n	800da70 <RemapAndLinkDMAtoUARTRx+0xc>
 800da6e:	e0ca      	b.n	800dc06 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800da70:	4aca      	ldr	r2, [pc, #808]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d100      	bne.n	800da78 <RemapAndLinkDMAtoUARTRx+0x14>
 800da76:	e0d8      	b.n	800dc2a <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800da78:	4ac8      	ldr	r2, [pc, #800]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d100      	bne.n	800da80 <RemapAndLinkDMAtoUARTRx+0x1c>
 800da7e:	e0e5      	b.n	800dc4c <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800da80:	4ac6      	ldr	r2, [pc, #792]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d100      	bne.n	800da88 <RemapAndLinkDMAtoUARTRx+0x24>
 800da86:	e0f2      	b.n	800dc6e <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800da88:	4ac4      	ldr	r2, [pc, #784]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d100      	bne.n	800da90 <RemapAndLinkDMAtoUARTRx+0x2c>
 800da8e:	e0ff      	b.n	800dc90 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800da90:	4ac2      	ldr	r2, [pc, #776]	; (800dd9c <RemapAndLinkDMAtoUARTRx+0x338>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d100      	bne.n	800da98 <RemapAndLinkDMAtoUARTRx+0x34>
 800da96:	e10b      	b.n	800dcb0 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800da98:	4ac1      	ldr	r2, [pc, #772]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d100      	bne.n	800daa0 <RemapAndLinkDMAtoUARTRx+0x3c>
 800da9e:	e118      	b.n	800dcd2 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800daa0:	4abf      	ldr	r2, [pc, #764]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d100      	bne.n	800daa8 <RemapAndLinkDMAtoUARTRx+0x44>
 800daa6:	e124      	b.n	800dcf2 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800daa8:	4abd      	ldr	r2, [pc, #756]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d100      	bne.n	800dab0 <RemapAndLinkDMAtoUARTRx+0x4c>
 800daae:	e131      	b.n	800dd14 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800dab0:	4abb      	ldr	r2, [pc, #748]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d100      	bne.n	800dab8 <RemapAndLinkDMAtoUARTRx+0x54>
 800dab6:	e13e      	b.n	800dd36 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800dab8:	4ab9      	ldr	r2, [pc, #740]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d100      	bne.n	800dac0 <RemapAndLinkDMAtoUARTRx+0x5c>
 800dabe:	e14b      	b.n	800dd58 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800dac0:	4ab7      	ldr	r2, [pc, #732]	; (800dda0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d100      	bne.n	800dac8 <RemapAndLinkDMAtoUARTRx+0x64>
 800dac6:	e157      	b.n	800dd78 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800dac8:	4ab6      	ldr	r2, [pc, #728]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d100      	bne.n	800dad0 <RemapAndLinkDMAtoUARTRx+0x6c>
 800dace:	e18b      	b.n	800dde8 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800dad0:	4ab4      	ldr	r2, [pc, #720]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d100      	bne.n	800dad8 <RemapAndLinkDMAtoUARTRx+0x74>
 800dad6:	e197      	b.n	800de08 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800dad8:	4ab2      	ldr	r2, [pc, #712]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d100      	bne.n	800dae0 <RemapAndLinkDMAtoUARTRx+0x7c>
 800dade:	e1a4      	b.n	800de2a <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800dae0:	4ab0      	ldr	r2, [pc, #704]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d100      	bne.n	800dae8 <RemapAndLinkDMAtoUARTRx+0x84>
 800dae6:	e1b1      	b.n	800de4c <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800dae8:	4aae      	ldr	r2, [pc, #696]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d100      	bne.n	800daf0 <RemapAndLinkDMAtoUARTRx+0x8c>
 800daee:	e1be      	b.n	800de6e <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800daf0:	4aac      	ldr	r2, [pc, #688]	; (800dda4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d100      	bne.n	800daf8 <RemapAndLinkDMAtoUARTRx+0x94>
 800daf6:	e1ca      	b.n	800de8e <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800daf8:	4aab      	ldr	r2, [pc, #684]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d100      	bne.n	800db00 <RemapAndLinkDMAtoUARTRx+0x9c>
 800dafe:	e1d7      	b.n	800deb0 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800db00:	4aa9      	ldr	r2, [pc, #676]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d100      	bne.n	800db08 <RemapAndLinkDMAtoUARTRx+0xa4>
 800db06:	e1e3      	b.n	800ded0 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800db08:	4aa7      	ldr	r2, [pc, #668]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d100      	bne.n	800db10 <RemapAndLinkDMAtoUARTRx+0xac>
 800db0e:	e1f0      	b.n	800def2 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800db10:	4aa5      	ldr	r2, [pc, #660]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d100      	bne.n	800db18 <RemapAndLinkDMAtoUARTRx+0xb4>
 800db16:	e1fd      	b.n	800df14 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800db18:	4aa3      	ldr	r2, [pc, #652]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d100      	bne.n	800db20 <RemapAndLinkDMAtoUARTRx+0xbc>
 800db1e:	e20a      	b.n	800df36 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800db20:	4aa1      	ldr	r2, [pc, #644]	; (800dda8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d100      	bne.n	800db28 <RemapAndLinkDMAtoUARTRx+0xc4>
 800db26:	e216      	b.n	800df56 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800db28:	4aa0      	ldr	r2, [pc, #640]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d100      	bne.n	800db30 <RemapAndLinkDMAtoUARTRx+0xcc>
 800db2e:	e223      	b.n	800df78 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800db30:	4a9e      	ldr	r2, [pc, #632]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d100      	bne.n	800db38 <RemapAndLinkDMAtoUARTRx+0xd4>
 800db36:	e22f      	b.n	800df98 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800db38:	4a9c      	ldr	r2, [pc, #624]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d100      	bne.n	800db40 <RemapAndLinkDMAtoUARTRx+0xdc>
 800db3e:	e23c      	b.n	800dfba <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800db40:	4a9a      	ldr	r2, [pc, #616]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d100      	bne.n	800db48 <RemapAndLinkDMAtoUARTRx+0xe4>
 800db46:	e249      	b.n	800dfdc <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800db48:	4a98      	ldr	r2, [pc, #608]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d100      	bne.n	800db50 <RemapAndLinkDMAtoUARTRx+0xec>
 800db4e:	e256      	b.n	800dffe <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800db50:	4a96      	ldr	r2, [pc, #600]	; (800ddac <RemapAndLinkDMAtoUARTRx+0x348>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d100      	bne.n	800db58 <RemapAndLinkDMAtoUARTRx+0xf4>
 800db56:	e262      	b.n	800e01e <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800db58:	4a95      	ldr	r2, [pc, #596]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d100      	bne.n	800db60 <RemapAndLinkDMAtoUARTRx+0xfc>
 800db5e:	e26f      	b.n	800e040 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800db60:	4a93      	ldr	r2, [pc, #588]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d100      	bne.n	800db68 <RemapAndLinkDMAtoUARTRx+0x104>
 800db66:	e27b      	b.n	800e060 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800db68:	4a91      	ldr	r2, [pc, #580]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d100      	bne.n	800db70 <RemapAndLinkDMAtoUARTRx+0x10c>
 800db6e:	e288      	b.n	800e082 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800db70:	4a8f      	ldr	r2, [pc, #572]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d100      	bne.n	800db78 <RemapAndLinkDMAtoUARTRx+0x114>
 800db76:	e295      	b.n	800e0a4 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800db78:	4a8d      	ldr	r2, [pc, #564]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d100      	bne.n	800db80 <RemapAndLinkDMAtoUARTRx+0x11c>
 800db7e:	e2a2      	b.n	800e0c6 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800db80:	4a8b      	ldr	r2, [pc, #556]	; (800ddb0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d100      	bne.n	800db88 <RemapAndLinkDMAtoUARTRx+0x124>
 800db86:	e2ae      	b.n	800e0e6 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800db88:	4a8a      	ldr	r2, [pc, #552]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d100      	bne.n	800db90 <RemapAndLinkDMAtoUARTRx+0x12c>
 800db8e:	e2bb      	b.n	800e108 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800db90:	4a88      	ldr	r2, [pc, #544]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d100      	bne.n	800db98 <RemapAndLinkDMAtoUARTRx+0x134>
 800db96:	e2c7      	b.n	800e128 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800db98:	4a86      	ldr	r2, [pc, #536]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d100      	bne.n	800dba0 <RemapAndLinkDMAtoUARTRx+0x13c>
 800db9e:	e2d4      	b.n	800e14a <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800dba0:	4a84      	ldr	r2, [pc, #528]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d100      	bne.n	800dba8 <RemapAndLinkDMAtoUARTRx+0x144>
 800dba6:	e2f7      	b.n	800e198 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800dba8:	4a82      	ldr	r2, [pc, #520]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d100      	bne.n	800dbb0 <RemapAndLinkDMAtoUARTRx+0x14c>
 800dbae:	e304      	b.n	800e1ba <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800dbb0:	4a80      	ldr	r2, [pc, #512]	; (800ddb4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d100      	bne.n	800dbb8 <RemapAndLinkDMAtoUARTRx+0x154>
 800dbb6:	e310      	b.n	800e1da <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800dbb8:	4a7f      	ldr	r2, [pc, #508]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d100      	bne.n	800dbc0 <RemapAndLinkDMAtoUARTRx+0x15c>
 800dbbe:	e31d      	b.n	800e1fc <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800dbc0:	4a7d      	ldr	r2, [pc, #500]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d100      	bne.n	800dbc8 <RemapAndLinkDMAtoUARTRx+0x164>
 800dbc6:	e328      	b.n	800e21a <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800dbc8:	4a7b      	ldr	r2, [pc, #492]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d100      	bne.n	800dbd0 <RemapAndLinkDMAtoUARTRx+0x16c>
 800dbce:	e335      	b.n	800e23c <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800dbd0:	4a79      	ldr	r2, [pc, #484]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d100      	bne.n	800dbd8 <RemapAndLinkDMAtoUARTRx+0x174>
 800dbd6:	e342      	b.n	800e25e <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800dbd8:	4a77      	ldr	r2, [pc, #476]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d100      	bne.n	800dbe0 <RemapAndLinkDMAtoUARTRx+0x17c>
 800dbde:	e34f      	b.n	800e280 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800dbe0:	4a75      	ldr	r2, [pc, #468]	; (800ddb8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d11e      	bne.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800dbe6:	4b75      	ldr	r3, [pc, #468]	; (800ddbc <RemapAndLinkDMAtoUARTRx+0x358>)
 800dbe8:	680a      	ldr	r2, [r1, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d11a      	bne.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800dbee:	4a74      	ldr	r2, [pc, #464]	; (800ddc0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dbf0:	23a8      	movs	r3, #168	; 0xa8
 800dbf2:	58d4      	ldr	r4, [r2, r3]
 800dbf4:	4d73      	ldr	r5, [pc, #460]	; (800ddc4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dbf6:	402c      	ands	r4, r5
 800dbf8:	50d4      	str	r4, [r2, r3]
 800dbfa:	58d5      	ldr	r5, [r2, r3]
 800dbfc:	24f0      	movs	r4, #240	; 0xf0
 800dbfe:	0124      	lsls	r4, r4, #4
 800dc00:	432c      	orrs	r4, r5
 800dc02:	50d4      	str	r4, [r2, r3]
 800dc04:	e00e      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800dc06:	4a70      	ldr	r2, [pc, #448]	; (800ddc8 <RemapAndLinkDMAtoUARTRx+0x364>)
 800dc08:	680c      	ldr	r4, [r1, #0]
 800dc0a:	4294      	cmp	r4, r2
 800dc0c:	d000      	beq.n	800dc10 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800dc0e:	e72f      	b.n	800da70 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800dc10:	4a6e      	ldr	r2, [pc, #440]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc12:	23a8      	movs	r3, #168	; 0xa8
 800dc14:	58d4      	ldr	r4, [r2, r3]
 800dc16:	250f      	movs	r5, #15
 800dc18:	43ac      	bics	r4, r5
 800dc1a:	50d4      	str	r4, [r2, r3]
 800dc1c:	58d4      	ldr	r4, [r2, r3]
 800dc1e:	3d07      	subs	r5, #7
 800dc20:	432c      	orrs	r4, r5
 800dc22:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800dc24:	6641      	str	r1, [r0, #100]	; 0x64
 800dc26:	6248      	str	r0, [r1, #36]	; 0x24
}
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800dc2a:	4a69      	ldr	r2, [pc, #420]	; (800ddd0 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800dc2c:	680c      	ldr	r4, [r1, #0]
 800dc2e:	4294      	cmp	r4, r2
 800dc30:	d000      	beq.n	800dc34 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800dc32:	e721      	b.n	800da78 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800dc34:	4a65      	ldr	r2, [pc, #404]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc36:	23a8      	movs	r3, #168	; 0xa8
 800dc38:	58d4      	ldr	r4, [r2, r3]
 800dc3a:	4d62      	ldr	r5, [pc, #392]	; (800ddc4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dc3c:	402c      	ands	r4, r5
 800dc3e:	50d4      	str	r4, [r2, r3]
 800dc40:	58d5      	ldr	r5, [r2, r3]
 800dc42:	2480      	movs	r4, #128	; 0x80
 800dc44:	0124      	lsls	r4, r4, #4
 800dc46:	432c      	orrs	r4, r5
 800dc48:	50d4      	str	r4, [r2, r3]
 800dc4a:	e7eb      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800dc4c:	4a61      	ldr	r2, [pc, #388]	; (800ddd4 <RemapAndLinkDMAtoUARTRx+0x370>)
 800dc4e:	680c      	ldr	r4, [r1, #0]
 800dc50:	4294      	cmp	r4, r2
 800dc52:	d000      	beq.n	800dc56 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800dc54:	e714      	b.n	800da80 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800dc56:	4a5d      	ldr	r2, [pc, #372]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc58:	23a8      	movs	r3, #168	; 0xa8
 800dc5a:	58d4      	ldr	r4, [r2, r3]
 800dc5c:	4d5e      	ldr	r5, [pc, #376]	; (800ddd8 <RemapAndLinkDMAtoUARTRx+0x374>)
 800dc5e:	402c      	ands	r4, r5
 800dc60:	50d4      	str	r4, [r2, r3]
 800dc62:	58d5      	ldr	r5, [r2, r3]
 800dc64:	2480      	movs	r4, #128	; 0x80
 800dc66:	0324      	lsls	r4, r4, #12
 800dc68:	432c      	orrs	r4, r5
 800dc6a:	50d4      	str	r4, [r2, r3]
 800dc6c:	e7da      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800dc6e:	4a5b      	ldr	r2, [pc, #364]	; (800dddc <RemapAndLinkDMAtoUARTRx+0x378>)
 800dc70:	680c      	ldr	r4, [r1, #0]
 800dc72:	4294      	cmp	r4, r2
 800dc74:	d000      	beq.n	800dc78 <RemapAndLinkDMAtoUARTRx+0x214>
 800dc76:	e707      	b.n	800da88 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800dc78:	4a54      	ldr	r2, [pc, #336]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc7a:	23a8      	movs	r3, #168	; 0xa8
 800dc7c:	58d4      	ldr	r4, [r2, r3]
 800dc7e:	4d58      	ldr	r5, [pc, #352]	; (800dde0 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800dc80:	402c      	ands	r4, r5
 800dc82:	50d4      	str	r4, [r2, r3]
 800dc84:	58d5      	ldr	r5, [r2, r3]
 800dc86:	2480      	movs	r4, #128	; 0x80
 800dc88:	0424      	lsls	r4, r4, #16
 800dc8a:	432c      	orrs	r4, r5
 800dc8c:	50d4      	str	r4, [r2, r3]
 800dc8e:	e7c9      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800dc90:	4a54      	ldr	r2, [pc, #336]	; (800dde4 <RemapAndLinkDMAtoUARTRx+0x380>)
 800dc92:	680c      	ldr	r4, [r1, #0]
 800dc94:	4294      	cmp	r4, r2
 800dc96:	d000      	beq.n	800dc9a <RemapAndLinkDMAtoUARTRx+0x236>
 800dc98:	e6fa      	b.n	800da90 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800dc9a:	4a49      	ldr	r2, [pc, #292]	; (800ddc0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dc9c:	23a8      	movs	r3, #168	; 0xa8
 800dc9e:	58d4      	ldr	r4, [r2, r3]
 800dca0:	25f0      	movs	r5, #240	; 0xf0
 800dca2:	43ac      	bics	r4, r5
 800dca4:	50d4      	str	r4, [r2, r3]
 800dca6:	58d4      	ldr	r4, [r2, r3]
 800dca8:	3d70      	subs	r5, #112	; 0x70
 800dcaa:	432c      	orrs	r4, r5
 800dcac:	50d4      	str	r4, [r2, r3]
 800dcae:	e7b9      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800dcb0:	4a42      	ldr	r2, [pc, #264]	; (800ddbc <RemapAndLinkDMAtoUARTRx+0x358>)
 800dcb2:	680c      	ldr	r4, [r1, #0]
 800dcb4:	4294      	cmp	r4, r2
 800dcb6:	d000      	beq.n	800dcba <RemapAndLinkDMAtoUARTRx+0x256>
 800dcb8:	e6ee      	b.n	800da98 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800dcba:	4a41      	ldr	r2, [pc, #260]	; (800ddc0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dcbc:	23a8      	movs	r3, #168	; 0xa8
 800dcbe:	58d4      	ldr	r4, [r2, r3]
 800dcc0:	4d40      	ldr	r5, [pc, #256]	; (800ddc4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dcc2:	402c      	ands	r4, r5
 800dcc4:	50d4      	str	r4, [r2, r3]
 800dcc6:	58d5      	ldr	r5, [r2, r3]
 800dcc8:	2480      	movs	r4, #128	; 0x80
 800dcca:	0124      	lsls	r4, r4, #4
 800dccc:	432c      	orrs	r4, r5
 800dcce:	50d4      	str	r4, [r2, r3]
 800dcd0:	e7a8      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800dcd2:	4a3d      	ldr	r2, [pc, #244]	; (800ddc8 <RemapAndLinkDMAtoUARTRx+0x364>)
 800dcd4:	680c      	ldr	r4, [r1, #0]
 800dcd6:	4294      	cmp	r4, r2
 800dcd8:	d000      	beq.n	800dcdc <RemapAndLinkDMAtoUARTRx+0x278>
 800dcda:	e6e1      	b.n	800daa0 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800dcdc:	4a3b      	ldr	r2, [pc, #236]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dcde:	23a8      	movs	r3, #168	; 0xa8
 800dce0:	58d4      	ldr	r4, [r2, r3]
 800dce2:	250f      	movs	r5, #15
 800dce4:	43ac      	bics	r4, r5
 800dce6:	50d4      	str	r4, [r2, r3]
 800dce8:	58d4      	ldr	r4, [r2, r3]
 800dcea:	3d06      	subs	r5, #6
 800dcec:	432c      	orrs	r4, r5
 800dcee:	50d4      	str	r4, [r2, r3]
 800dcf0:	e798      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800dcf2:	4a37      	ldr	r2, [pc, #220]	; (800ddd0 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800dcf4:	680c      	ldr	r4, [r1, #0]
 800dcf6:	4294      	cmp	r4, r2
 800dcf8:	d000      	beq.n	800dcfc <RemapAndLinkDMAtoUARTRx+0x298>
 800dcfa:	e6d5      	b.n	800daa8 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800dcfc:	4a33      	ldr	r2, [pc, #204]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dcfe:	23a8      	movs	r3, #168	; 0xa8
 800dd00:	58d4      	ldr	r4, [r2, r3]
 800dd02:	4d30      	ldr	r5, [pc, #192]	; (800ddc4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dd04:	402c      	ands	r4, r5
 800dd06:	50d4      	str	r4, [r2, r3]
 800dd08:	58d5      	ldr	r5, [r2, r3]
 800dd0a:	2490      	movs	r4, #144	; 0x90
 800dd0c:	0124      	lsls	r4, r4, #4
 800dd0e:	432c      	orrs	r4, r5
 800dd10:	50d4      	str	r4, [r2, r3]
 800dd12:	e787      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800dd14:	4a2f      	ldr	r2, [pc, #188]	; (800ddd4 <RemapAndLinkDMAtoUARTRx+0x370>)
 800dd16:	680c      	ldr	r4, [r1, #0]
 800dd18:	4294      	cmp	r4, r2
 800dd1a:	d000      	beq.n	800dd1e <RemapAndLinkDMAtoUARTRx+0x2ba>
 800dd1c:	e6c8      	b.n	800dab0 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800dd1e:	4a2b      	ldr	r2, [pc, #172]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dd20:	23a8      	movs	r3, #168	; 0xa8
 800dd22:	58d4      	ldr	r4, [r2, r3]
 800dd24:	4d2c      	ldr	r5, [pc, #176]	; (800ddd8 <RemapAndLinkDMAtoUARTRx+0x374>)
 800dd26:	402c      	ands	r4, r5
 800dd28:	50d4      	str	r4, [r2, r3]
 800dd2a:	58d5      	ldr	r5, [r2, r3]
 800dd2c:	2490      	movs	r4, #144	; 0x90
 800dd2e:	0324      	lsls	r4, r4, #12
 800dd30:	432c      	orrs	r4, r5
 800dd32:	50d4      	str	r4, [r2, r3]
 800dd34:	e776      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800dd36:	4a29      	ldr	r2, [pc, #164]	; (800dddc <RemapAndLinkDMAtoUARTRx+0x378>)
 800dd38:	680c      	ldr	r4, [r1, #0]
 800dd3a:	4294      	cmp	r4, r2
 800dd3c:	d000      	beq.n	800dd40 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800dd3e:	e6bb      	b.n	800dab8 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800dd40:	4a22      	ldr	r2, [pc, #136]	; (800ddcc <RemapAndLinkDMAtoUARTRx+0x368>)
 800dd42:	23a8      	movs	r3, #168	; 0xa8
 800dd44:	58d4      	ldr	r4, [r2, r3]
 800dd46:	4d26      	ldr	r5, [pc, #152]	; (800dde0 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800dd48:	402c      	ands	r4, r5
 800dd4a:	50d4      	str	r4, [r2, r3]
 800dd4c:	58d5      	ldr	r5, [r2, r3]
 800dd4e:	2490      	movs	r4, #144	; 0x90
 800dd50:	0424      	lsls	r4, r4, #16
 800dd52:	432c      	orrs	r4, r5
 800dd54:	50d4      	str	r4, [r2, r3]
 800dd56:	e765      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800dd58:	4a22      	ldr	r2, [pc, #136]	; (800dde4 <RemapAndLinkDMAtoUARTRx+0x380>)
 800dd5a:	680c      	ldr	r4, [r1, #0]
 800dd5c:	4294      	cmp	r4, r2
 800dd5e:	d000      	beq.n	800dd62 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800dd60:	e6ae      	b.n	800dac0 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800dd62:	4a17      	ldr	r2, [pc, #92]	; (800ddc0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dd64:	23a8      	movs	r3, #168	; 0xa8
 800dd66:	58d4      	ldr	r4, [r2, r3]
 800dd68:	25f0      	movs	r5, #240	; 0xf0
 800dd6a:	43ac      	bics	r4, r5
 800dd6c:	50d4      	str	r4, [r2, r3]
 800dd6e:	58d4      	ldr	r4, [r2, r3]
 800dd70:	3d60      	subs	r5, #96	; 0x60
 800dd72:	432c      	orrs	r4, r5
 800dd74:	50d4      	str	r4, [r2, r3]
 800dd76:	e755      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800dd78:	4a10      	ldr	r2, [pc, #64]	; (800ddbc <RemapAndLinkDMAtoUARTRx+0x358>)
 800dd7a:	680c      	ldr	r4, [r1, #0]
 800dd7c:	4294      	cmp	r4, r2
 800dd7e:	d000      	beq.n	800dd82 <RemapAndLinkDMAtoUARTRx+0x31e>
 800dd80:	e6a2      	b.n	800dac8 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800dd82:	4a0f      	ldr	r2, [pc, #60]	; (800ddc0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dd84:	23a8      	movs	r3, #168	; 0xa8
 800dd86:	58d4      	ldr	r4, [r2, r3]
 800dd88:	4d0e      	ldr	r5, [pc, #56]	; (800ddc4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dd8a:	402c      	ands	r4, r5
 800dd8c:	50d4      	str	r4, [r2, r3]
 800dd8e:	58d5      	ldr	r5, [r2, r3]
 800dd90:	2490      	movs	r4, #144	; 0x90
 800dd92:	0124      	lsls	r4, r4, #4
 800dd94:	432c      	orrs	r4, r5
 800dd96:	50d4      	str	r4, [r2, r3]
 800dd98:	e744      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800dd9a:	46c0      	nop			; (mov r8, r8)
 800dd9c:	40013800 	.word	0x40013800
 800dda0:	40004400 	.word	0x40004400
 800dda4:	40004800 	.word	0x40004800
 800dda8:	40004c00 	.word	0x40004c00
 800ddac:	40005000 	.word	0x40005000
 800ddb0:	40011400 	.word	0x40011400
 800ddb4:	40011800 	.word	0x40011800
 800ddb8:	40011c00 	.word	0x40011c00
 800ddbc:	40020430 	.word	0x40020430
 800ddc0:	40020400 	.word	0x40020400
 800ddc4:	fffff0ff 	.word	0xfffff0ff
 800ddc8:	40020008 	.word	0x40020008
 800ddcc:	40020000 	.word	0x40020000
 800ddd0:	40020030 	.word	0x40020030
 800ddd4:	40020058 	.word	0x40020058
 800ddd8:	fff0ffff 	.word	0xfff0ffff
 800dddc:	4002006c 	.word	0x4002006c
 800dde0:	ff0fffff 	.word	0xff0fffff
 800dde4:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800dde8:	4ae0      	ldr	r2, [pc, #896]	; (800e16c <RemapAndLinkDMAtoUARTRx+0x708>)
 800ddea:	680c      	ldr	r4, [r1, #0]
 800ddec:	4294      	cmp	r4, r2
 800ddee:	d000      	beq.n	800ddf2 <RemapAndLinkDMAtoUARTRx+0x38e>
 800ddf0:	e66e      	b.n	800dad0 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ddf2:	4adf      	ldr	r2, [pc, #892]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ddf4:	23a8      	movs	r3, #168	; 0xa8
 800ddf6:	58d4      	ldr	r4, [r2, r3]
 800ddf8:	250f      	movs	r5, #15
 800ddfa:	43ac      	bics	r4, r5
 800ddfc:	50d4      	str	r4, [r2, r3]
 800ddfe:	58d4      	ldr	r4, [r2, r3]
 800de00:	3d05      	subs	r5, #5
 800de02:	432c      	orrs	r4, r5
 800de04:	50d4      	str	r4, [r2, r3]
 800de06:	e70d      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800de08:	4ada      	ldr	r2, [pc, #872]	; (800e174 <RemapAndLinkDMAtoUARTRx+0x710>)
 800de0a:	680c      	ldr	r4, [r1, #0]
 800de0c:	4294      	cmp	r4, r2
 800de0e:	d000      	beq.n	800de12 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800de10:	e662      	b.n	800dad8 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800de12:	4ad7      	ldr	r2, [pc, #860]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de14:	23a8      	movs	r3, #168	; 0xa8
 800de16:	58d4      	ldr	r4, [r2, r3]
 800de18:	4dd7      	ldr	r5, [pc, #860]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800de1a:	402c      	ands	r4, r5
 800de1c:	50d4      	str	r4, [r2, r3]
 800de1e:	58d5      	ldr	r5, [r2, r3]
 800de20:	24a0      	movs	r4, #160	; 0xa0
 800de22:	0124      	lsls	r4, r4, #4
 800de24:	432c      	orrs	r4, r5
 800de26:	50d4      	str	r4, [r2, r3]
 800de28:	e6fc      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800de2a:	4ad4      	ldr	r2, [pc, #848]	; (800e17c <RemapAndLinkDMAtoUARTRx+0x718>)
 800de2c:	680c      	ldr	r4, [r1, #0]
 800de2e:	4294      	cmp	r4, r2
 800de30:	d000      	beq.n	800de34 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800de32:	e655      	b.n	800dae0 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800de34:	4ace      	ldr	r2, [pc, #824]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de36:	23a8      	movs	r3, #168	; 0xa8
 800de38:	58d4      	ldr	r4, [r2, r3]
 800de3a:	4dd1      	ldr	r5, [pc, #836]	; (800e180 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800de3c:	402c      	ands	r4, r5
 800de3e:	50d4      	str	r4, [r2, r3]
 800de40:	58d5      	ldr	r5, [r2, r3]
 800de42:	24a0      	movs	r4, #160	; 0xa0
 800de44:	0324      	lsls	r4, r4, #12
 800de46:	432c      	orrs	r4, r5
 800de48:	50d4      	str	r4, [r2, r3]
 800de4a:	e6eb      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800de4c:	4acd      	ldr	r2, [pc, #820]	; (800e184 <RemapAndLinkDMAtoUARTRx+0x720>)
 800de4e:	680c      	ldr	r4, [r1, #0]
 800de50:	4294      	cmp	r4, r2
 800de52:	d000      	beq.n	800de56 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800de54:	e648      	b.n	800dae8 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800de56:	4ac6      	ldr	r2, [pc, #792]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de58:	23a8      	movs	r3, #168	; 0xa8
 800de5a:	58d4      	ldr	r4, [r2, r3]
 800de5c:	4dca      	ldr	r5, [pc, #808]	; (800e188 <RemapAndLinkDMAtoUARTRx+0x724>)
 800de5e:	402c      	ands	r4, r5
 800de60:	50d4      	str	r4, [r2, r3]
 800de62:	58d5      	ldr	r5, [r2, r3]
 800de64:	24a0      	movs	r4, #160	; 0xa0
 800de66:	0424      	lsls	r4, r4, #16
 800de68:	432c      	orrs	r4, r5
 800de6a:	50d4      	str	r4, [r2, r3]
 800de6c:	e6da      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800de6e:	4ac7      	ldr	r2, [pc, #796]	; (800e18c <RemapAndLinkDMAtoUARTRx+0x728>)
 800de70:	680c      	ldr	r4, [r1, #0]
 800de72:	4294      	cmp	r4, r2
 800de74:	d000      	beq.n	800de78 <RemapAndLinkDMAtoUARTRx+0x414>
 800de76:	e63b      	b.n	800daf0 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800de78:	4ac5      	ldr	r2, [pc, #788]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800de7a:	23a8      	movs	r3, #168	; 0xa8
 800de7c:	58d4      	ldr	r4, [r2, r3]
 800de7e:	25f0      	movs	r5, #240	; 0xf0
 800de80:	43ac      	bics	r4, r5
 800de82:	50d4      	str	r4, [r2, r3]
 800de84:	58d4      	ldr	r4, [r2, r3]
 800de86:	3d50      	subs	r5, #80	; 0x50
 800de88:	432c      	orrs	r4, r5
 800de8a:	50d4      	str	r4, [r2, r3]
 800de8c:	e6ca      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800de8e:	4ac1      	ldr	r2, [pc, #772]	; (800e194 <RemapAndLinkDMAtoUARTRx+0x730>)
 800de90:	680c      	ldr	r4, [r1, #0]
 800de92:	4294      	cmp	r4, r2
 800de94:	d000      	beq.n	800de98 <RemapAndLinkDMAtoUARTRx+0x434>
 800de96:	e62f      	b.n	800daf8 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800de98:	4abd      	ldr	r2, [pc, #756]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800de9a:	23a8      	movs	r3, #168	; 0xa8
 800de9c:	58d4      	ldr	r4, [r2, r3]
 800de9e:	4db6      	ldr	r5, [pc, #728]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800dea0:	402c      	ands	r4, r5
 800dea2:	50d4      	str	r4, [r2, r3]
 800dea4:	58d5      	ldr	r5, [r2, r3]
 800dea6:	24a0      	movs	r4, #160	; 0xa0
 800dea8:	0124      	lsls	r4, r4, #4
 800deaa:	432c      	orrs	r4, r5
 800deac:	50d4      	str	r4, [r2, r3]
 800deae:	e6b9      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800deb0:	4aae      	ldr	r2, [pc, #696]	; (800e16c <RemapAndLinkDMAtoUARTRx+0x708>)
 800deb2:	680c      	ldr	r4, [r1, #0]
 800deb4:	4294      	cmp	r4, r2
 800deb6:	d000      	beq.n	800deba <RemapAndLinkDMAtoUARTRx+0x456>
 800deb8:	e622      	b.n	800db00 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800deba:	4aad      	ldr	r2, [pc, #692]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800debc:	23a8      	movs	r3, #168	; 0xa8
 800debe:	58d4      	ldr	r4, [r2, r3]
 800dec0:	250f      	movs	r5, #15
 800dec2:	43ac      	bics	r4, r5
 800dec4:	50d4      	str	r4, [r2, r3]
 800dec6:	58d4      	ldr	r4, [r2, r3]
 800dec8:	3d04      	subs	r5, #4
 800deca:	432c      	orrs	r4, r5
 800decc:	50d4      	str	r4, [r2, r3]
 800dece:	e6a9      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ded0:	4aa8      	ldr	r2, [pc, #672]	; (800e174 <RemapAndLinkDMAtoUARTRx+0x710>)
 800ded2:	680c      	ldr	r4, [r1, #0]
 800ded4:	4294      	cmp	r4, r2
 800ded6:	d000      	beq.n	800deda <RemapAndLinkDMAtoUARTRx+0x476>
 800ded8:	e616      	b.n	800db08 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800deda:	4aa5      	ldr	r2, [pc, #660]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dedc:	23a8      	movs	r3, #168	; 0xa8
 800dede:	58d4      	ldr	r4, [r2, r3]
 800dee0:	4da5      	ldr	r5, [pc, #660]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800dee2:	402c      	ands	r4, r5
 800dee4:	50d4      	str	r4, [r2, r3]
 800dee6:	58d5      	ldr	r5, [r2, r3]
 800dee8:	24b0      	movs	r4, #176	; 0xb0
 800deea:	0124      	lsls	r4, r4, #4
 800deec:	432c      	orrs	r4, r5
 800deee:	50d4      	str	r4, [r2, r3]
 800def0:	e698      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800def2:	4aa2      	ldr	r2, [pc, #648]	; (800e17c <RemapAndLinkDMAtoUARTRx+0x718>)
 800def4:	680c      	ldr	r4, [r1, #0]
 800def6:	4294      	cmp	r4, r2
 800def8:	d000      	beq.n	800defc <RemapAndLinkDMAtoUARTRx+0x498>
 800defa:	e609      	b.n	800db10 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800defc:	4a9c      	ldr	r2, [pc, #624]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800defe:	23a8      	movs	r3, #168	; 0xa8
 800df00:	58d4      	ldr	r4, [r2, r3]
 800df02:	4d9f      	ldr	r5, [pc, #636]	; (800e180 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800df04:	402c      	ands	r4, r5
 800df06:	50d4      	str	r4, [r2, r3]
 800df08:	58d5      	ldr	r5, [r2, r3]
 800df0a:	24b0      	movs	r4, #176	; 0xb0
 800df0c:	0324      	lsls	r4, r4, #12
 800df0e:	432c      	orrs	r4, r5
 800df10:	50d4      	str	r4, [r2, r3]
 800df12:	e687      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800df14:	4a9b      	ldr	r2, [pc, #620]	; (800e184 <RemapAndLinkDMAtoUARTRx+0x720>)
 800df16:	680c      	ldr	r4, [r1, #0]
 800df18:	4294      	cmp	r4, r2
 800df1a:	d000      	beq.n	800df1e <RemapAndLinkDMAtoUARTRx+0x4ba>
 800df1c:	e5fc      	b.n	800db18 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800df1e:	4a94      	ldr	r2, [pc, #592]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800df20:	23a8      	movs	r3, #168	; 0xa8
 800df22:	58d4      	ldr	r4, [r2, r3]
 800df24:	4d98      	ldr	r5, [pc, #608]	; (800e188 <RemapAndLinkDMAtoUARTRx+0x724>)
 800df26:	402c      	ands	r4, r5
 800df28:	50d4      	str	r4, [r2, r3]
 800df2a:	58d5      	ldr	r5, [r2, r3]
 800df2c:	24b0      	movs	r4, #176	; 0xb0
 800df2e:	0424      	lsls	r4, r4, #16
 800df30:	432c      	orrs	r4, r5
 800df32:	50d4      	str	r4, [r2, r3]
 800df34:	e676      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800df36:	4a95      	ldr	r2, [pc, #596]	; (800e18c <RemapAndLinkDMAtoUARTRx+0x728>)
 800df38:	680c      	ldr	r4, [r1, #0]
 800df3a:	4294      	cmp	r4, r2
 800df3c:	d000      	beq.n	800df40 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800df3e:	e5ef      	b.n	800db20 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800df40:	4a93      	ldr	r2, [pc, #588]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800df42:	23a8      	movs	r3, #168	; 0xa8
 800df44:	58d4      	ldr	r4, [r2, r3]
 800df46:	25f0      	movs	r5, #240	; 0xf0
 800df48:	43ac      	bics	r4, r5
 800df4a:	50d4      	str	r4, [r2, r3]
 800df4c:	58d4      	ldr	r4, [r2, r3]
 800df4e:	3d40      	subs	r5, #64	; 0x40
 800df50:	432c      	orrs	r4, r5
 800df52:	50d4      	str	r4, [r2, r3]
 800df54:	e666      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800df56:	4a8f      	ldr	r2, [pc, #572]	; (800e194 <RemapAndLinkDMAtoUARTRx+0x730>)
 800df58:	680c      	ldr	r4, [r1, #0]
 800df5a:	4294      	cmp	r4, r2
 800df5c:	d000      	beq.n	800df60 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800df5e:	e5e3      	b.n	800db28 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800df60:	4a8b      	ldr	r2, [pc, #556]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800df62:	23a8      	movs	r3, #168	; 0xa8
 800df64:	58d4      	ldr	r4, [r2, r3]
 800df66:	4d84      	ldr	r5, [pc, #528]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800df68:	402c      	ands	r4, r5
 800df6a:	50d4      	str	r4, [r2, r3]
 800df6c:	58d5      	ldr	r5, [r2, r3]
 800df6e:	24b0      	movs	r4, #176	; 0xb0
 800df70:	0124      	lsls	r4, r4, #4
 800df72:	432c      	orrs	r4, r5
 800df74:	50d4      	str	r4, [r2, r3]
 800df76:	e655      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800df78:	4a7c      	ldr	r2, [pc, #496]	; (800e16c <RemapAndLinkDMAtoUARTRx+0x708>)
 800df7a:	680c      	ldr	r4, [r1, #0]
 800df7c:	4294      	cmp	r4, r2
 800df7e:	d000      	beq.n	800df82 <RemapAndLinkDMAtoUARTRx+0x51e>
 800df80:	e5d6      	b.n	800db30 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800df82:	4a7b      	ldr	r2, [pc, #492]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800df84:	23a8      	movs	r3, #168	; 0xa8
 800df86:	58d4      	ldr	r4, [r2, r3]
 800df88:	250f      	movs	r5, #15
 800df8a:	43ac      	bics	r4, r5
 800df8c:	50d4      	str	r4, [r2, r3]
 800df8e:	58d4      	ldr	r4, [r2, r3]
 800df90:	3d03      	subs	r5, #3
 800df92:	432c      	orrs	r4, r5
 800df94:	50d4      	str	r4, [r2, r3]
 800df96:	e645      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800df98:	4a76      	ldr	r2, [pc, #472]	; (800e174 <RemapAndLinkDMAtoUARTRx+0x710>)
 800df9a:	680c      	ldr	r4, [r1, #0]
 800df9c:	4294      	cmp	r4, r2
 800df9e:	d000      	beq.n	800dfa2 <RemapAndLinkDMAtoUARTRx+0x53e>
 800dfa0:	e5ca      	b.n	800db38 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800dfa2:	4a73      	ldr	r2, [pc, #460]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfa4:	23a8      	movs	r3, #168	; 0xa8
 800dfa6:	58d4      	ldr	r4, [r2, r3]
 800dfa8:	4d73      	ldr	r5, [pc, #460]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800dfaa:	402c      	ands	r4, r5
 800dfac:	50d4      	str	r4, [r2, r3]
 800dfae:	58d5      	ldr	r5, [r2, r3]
 800dfb0:	24c0      	movs	r4, #192	; 0xc0
 800dfb2:	0124      	lsls	r4, r4, #4
 800dfb4:	432c      	orrs	r4, r5
 800dfb6:	50d4      	str	r4, [r2, r3]
 800dfb8:	e634      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800dfba:	4a70      	ldr	r2, [pc, #448]	; (800e17c <RemapAndLinkDMAtoUARTRx+0x718>)
 800dfbc:	680c      	ldr	r4, [r1, #0]
 800dfbe:	4294      	cmp	r4, r2
 800dfc0:	d000      	beq.n	800dfc4 <RemapAndLinkDMAtoUARTRx+0x560>
 800dfc2:	e5bd      	b.n	800db40 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800dfc4:	4a6a      	ldr	r2, [pc, #424]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfc6:	23a8      	movs	r3, #168	; 0xa8
 800dfc8:	58d4      	ldr	r4, [r2, r3]
 800dfca:	4d6d      	ldr	r5, [pc, #436]	; (800e180 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800dfcc:	402c      	ands	r4, r5
 800dfce:	50d4      	str	r4, [r2, r3]
 800dfd0:	58d5      	ldr	r5, [r2, r3]
 800dfd2:	24c0      	movs	r4, #192	; 0xc0
 800dfd4:	0324      	lsls	r4, r4, #12
 800dfd6:	432c      	orrs	r4, r5
 800dfd8:	50d4      	str	r4, [r2, r3]
 800dfda:	e623      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800dfdc:	4a69      	ldr	r2, [pc, #420]	; (800e184 <RemapAndLinkDMAtoUARTRx+0x720>)
 800dfde:	680c      	ldr	r4, [r1, #0]
 800dfe0:	4294      	cmp	r4, r2
 800dfe2:	d000      	beq.n	800dfe6 <RemapAndLinkDMAtoUARTRx+0x582>
 800dfe4:	e5b0      	b.n	800db48 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800dfe6:	4a62      	ldr	r2, [pc, #392]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfe8:	23a8      	movs	r3, #168	; 0xa8
 800dfea:	58d4      	ldr	r4, [r2, r3]
 800dfec:	4d66      	ldr	r5, [pc, #408]	; (800e188 <RemapAndLinkDMAtoUARTRx+0x724>)
 800dfee:	402c      	ands	r4, r5
 800dff0:	50d4      	str	r4, [r2, r3]
 800dff2:	58d5      	ldr	r5, [r2, r3]
 800dff4:	24c0      	movs	r4, #192	; 0xc0
 800dff6:	0424      	lsls	r4, r4, #16
 800dff8:	432c      	orrs	r4, r5
 800dffa:	50d4      	str	r4, [r2, r3]
 800dffc:	e612      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800dffe:	4a63      	ldr	r2, [pc, #396]	; (800e18c <RemapAndLinkDMAtoUARTRx+0x728>)
 800e000:	680c      	ldr	r4, [r1, #0]
 800e002:	4294      	cmp	r4, r2
 800e004:	d000      	beq.n	800e008 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800e006:	e5a3      	b.n	800db50 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800e008:	4a61      	ldr	r2, [pc, #388]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e00a:	23a8      	movs	r3, #168	; 0xa8
 800e00c:	58d4      	ldr	r4, [r2, r3]
 800e00e:	25f0      	movs	r5, #240	; 0xf0
 800e010:	43ac      	bics	r4, r5
 800e012:	50d4      	str	r4, [r2, r3]
 800e014:	58d4      	ldr	r4, [r2, r3]
 800e016:	3d30      	subs	r5, #48	; 0x30
 800e018:	432c      	orrs	r4, r5
 800e01a:	50d4      	str	r4, [r2, r3]
 800e01c:	e602      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800e01e:	4a5d      	ldr	r2, [pc, #372]	; (800e194 <RemapAndLinkDMAtoUARTRx+0x730>)
 800e020:	680c      	ldr	r4, [r1, #0]
 800e022:	4294      	cmp	r4, r2
 800e024:	d000      	beq.n	800e028 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800e026:	e597      	b.n	800db58 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800e028:	4a59      	ldr	r2, [pc, #356]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e02a:	23a8      	movs	r3, #168	; 0xa8
 800e02c:	58d4      	ldr	r4, [r2, r3]
 800e02e:	4d52      	ldr	r5, [pc, #328]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e030:	402c      	ands	r4, r5
 800e032:	50d4      	str	r4, [r2, r3]
 800e034:	58d5      	ldr	r5, [r2, r3]
 800e036:	24c0      	movs	r4, #192	; 0xc0
 800e038:	0124      	lsls	r4, r4, #4
 800e03a:	432c      	orrs	r4, r5
 800e03c:	50d4      	str	r4, [r2, r3]
 800e03e:	e5f1      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800e040:	4a4a      	ldr	r2, [pc, #296]	; (800e16c <RemapAndLinkDMAtoUARTRx+0x708>)
 800e042:	680c      	ldr	r4, [r1, #0]
 800e044:	4294      	cmp	r4, r2
 800e046:	d000      	beq.n	800e04a <RemapAndLinkDMAtoUARTRx+0x5e6>
 800e048:	e58a      	b.n	800db60 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800e04a:	4a49      	ldr	r2, [pc, #292]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e04c:	23a8      	movs	r3, #168	; 0xa8
 800e04e:	58d4      	ldr	r4, [r2, r3]
 800e050:	250f      	movs	r5, #15
 800e052:	43ac      	bics	r4, r5
 800e054:	50d4      	str	r4, [r2, r3]
 800e056:	58d4      	ldr	r4, [r2, r3]
 800e058:	3d02      	subs	r5, #2
 800e05a:	432c      	orrs	r4, r5
 800e05c:	50d4      	str	r4, [r2, r3]
 800e05e:	e5e1      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800e060:	4a44      	ldr	r2, [pc, #272]	; (800e174 <RemapAndLinkDMAtoUARTRx+0x710>)
 800e062:	680c      	ldr	r4, [r1, #0]
 800e064:	4294      	cmp	r4, r2
 800e066:	d000      	beq.n	800e06a <RemapAndLinkDMAtoUARTRx+0x606>
 800e068:	e57e      	b.n	800db68 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800e06a:	4a41      	ldr	r2, [pc, #260]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e06c:	23a8      	movs	r3, #168	; 0xa8
 800e06e:	58d4      	ldr	r4, [r2, r3]
 800e070:	4d41      	ldr	r5, [pc, #260]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e072:	402c      	ands	r4, r5
 800e074:	50d4      	str	r4, [r2, r3]
 800e076:	58d5      	ldr	r5, [r2, r3]
 800e078:	24d0      	movs	r4, #208	; 0xd0
 800e07a:	0124      	lsls	r4, r4, #4
 800e07c:	432c      	orrs	r4, r5
 800e07e:	50d4      	str	r4, [r2, r3]
 800e080:	e5d0      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800e082:	4a3e      	ldr	r2, [pc, #248]	; (800e17c <RemapAndLinkDMAtoUARTRx+0x718>)
 800e084:	680c      	ldr	r4, [r1, #0]
 800e086:	4294      	cmp	r4, r2
 800e088:	d000      	beq.n	800e08c <RemapAndLinkDMAtoUARTRx+0x628>
 800e08a:	e571      	b.n	800db70 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800e08c:	4a38      	ldr	r2, [pc, #224]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e08e:	23a8      	movs	r3, #168	; 0xa8
 800e090:	58d4      	ldr	r4, [r2, r3]
 800e092:	4d3b      	ldr	r5, [pc, #236]	; (800e180 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e094:	402c      	ands	r4, r5
 800e096:	50d4      	str	r4, [r2, r3]
 800e098:	58d5      	ldr	r5, [r2, r3]
 800e09a:	24d0      	movs	r4, #208	; 0xd0
 800e09c:	0324      	lsls	r4, r4, #12
 800e09e:	432c      	orrs	r4, r5
 800e0a0:	50d4      	str	r4, [r2, r3]
 800e0a2:	e5bf      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800e0a4:	4a37      	ldr	r2, [pc, #220]	; (800e184 <RemapAndLinkDMAtoUARTRx+0x720>)
 800e0a6:	680c      	ldr	r4, [r1, #0]
 800e0a8:	4294      	cmp	r4, r2
 800e0aa:	d000      	beq.n	800e0ae <RemapAndLinkDMAtoUARTRx+0x64a>
 800e0ac:	e564      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800e0ae:	4a30      	ldr	r2, [pc, #192]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e0b0:	23a8      	movs	r3, #168	; 0xa8
 800e0b2:	58d4      	ldr	r4, [r2, r3]
 800e0b4:	4d34      	ldr	r5, [pc, #208]	; (800e188 <RemapAndLinkDMAtoUARTRx+0x724>)
 800e0b6:	402c      	ands	r4, r5
 800e0b8:	50d4      	str	r4, [r2, r3]
 800e0ba:	58d5      	ldr	r5, [r2, r3]
 800e0bc:	24d0      	movs	r4, #208	; 0xd0
 800e0be:	0424      	lsls	r4, r4, #16
 800e0c0:	432c      	orrs	r4, r5
 800e0c2:	50d4      	str	r4, [r2, r3]
 800e0c4:	e5ae      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800e0c6:	4a31      	ldr	r2, [pc, #196]	; (800e18c <RemapAndLinkDMAtoUARTRx+0x728>)
 800e0c8:	680c      	ldr	r4, [r1, #0]
 800e0ca:	4294      	cmp	r4, r2
 800e0cc:	d000      	beq.n	800e0d0 <RemapAndLinkDMAtoUARTRx+0x66c>
 800e0ce:	e557      	b.n	800db80 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800e0d0:	4a2f      	ldr	r2, [pc, #188]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e0d2:	23a8      	movs	r3, #168	; 0xa8
 800e0d4:	58d4      	ldr	r4, [r2, r3]
 800e0d6:	25f0      	movs	r5, #240	; 0xf0
 800e0d8:	43ac      	bics	r4, r5
 800e0da:	50d4      	str	r4, [r2, r3]
 800e0dc:	58d4      	ldr	r4, [r2, r3]
 800e0de:	3d20      	subs	r5, #32
 800e0e0:	432c      	orrs	r4, r5
 800e0e2:	50d4      	str	r4, [r2, r3]
 800e0e4:	e59e      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800e0e6:	4a2b      	ldr	r2, [pc, #172]	; (800e194 <RemapAndLinkDMAtoUARTRx+0x730>)
 800e0e8:	680c      	ldr	r4, [r1, #0]
 800e0ea:	4294      	cmp	r4, r2
 800e0ec:	d000      	beq.n	800e0f0 <RemapAndLinkDMAtoUARTRx+0x68c>
 800e0ee:	e54b      	b.n	800db88 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800e0f0:	4a27      	ldr	r2, [pc, #156]	; (800e190 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e0f2:	23a8      	movs	r3, #168	; 0xa8
 800e0f4:	58d4      	ldr	r4, [r2, r3]
 800e0f6:	4d20      	ldr	r5, [pc, #128]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e0f8:	402c      	ands	r4, r5
 800e0fa:	50d4      	str	r4, [r2, r3]
 800e0fc:	58d5      	ldr	r5, [r2, r3]
 800e0fe:	24d0      	movs	r4, #208	; 0xd0
 800e100:	0124      	lsls	r4, r4, #4
 800e102:	432c      	orrs	r4, r5
 800e104:	50d4      	str	r4, [r2, r3]
 800e106:	e58d      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800e108:	4a18      	ldr	r2, [pc, #96]	; (800e16c <RemapAndLinkDMAtoUARTRx+0x708>)
 800e10a:	680c      	ldr	r4, [r1, #0]
 800e10c:	4294      	cmp	r4, r2
 800e10e:	d000      	beq.n	800e112 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800e110:	e53e      	b.n	800db90 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800e112:	4a17      	ldr	r2, [pc, #92]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e114:	23a8      	movs	r3, #168	; 0xa8
 800e116:	58d4      	ldr	r4, [r2, r3]
 800e118:	250f      	movs	r5, #15
 800e11a:	43ac      	bics	r4, r5
 800e11c:	50d4      	str	r4, [r2, r3]
 800e11e:	58d4      	ldr	r4, [r2, r3]
 800e120:	3d01      	subs	r5, #1
 800e122:	432c      	orrs	r4, r5
 800e124:	50d4      	str	r4, [r2, r3]
 800e126:	e57d      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800e128:	4a12      	ldr	r2, [pc, #72]	; (800e174 <RemapAndLinkDMAtoUARTRx+0x710>)
 800e12a:	680c      	ldr	r4, [r1, #0]
 800e12c:	4294      	cmp	r4, r2
 800e12e:	d000      	beq.n	800e132 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800e130:	e532      	b.n	800db98 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800e132:	4a0f      	ldr	r2, [pc, #60]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e134:	23a8      	movs	r3, #168	; 0xa8
 800e136:	58d4      	ldr	r4, [r2, r3]
 800e138:	4d0f      	ldr	r5, [pc, #60]	; (800e178 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e13a:	402c      	ands	r4, r5
 800e13c:	50d4      	str	r4, [r2, r3]
 800e13e:	58d5      	ldr	r5, [r2, r3]
 800e140:	24e0      	movs	r4, #224	; 0xe0
 800e142:	0124      	lsls	r4, r4, #4
 800e144:	432c      	orrs	r4, r5
 800e146:	50d4      	str	r4, [r2, r3]
 800e148:	e56c      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800e14a:	4a0c      	ldr	r2, [pc, #48]	; (800e17c <RemapAndLinkDMAtoUARTRx+0x718>)
 800e14c:	680c      	ldr	r4, [r1, #0]
 800e14e:	4294      	cmp	r4, r2
 800e150:	d000      	beq.n	800e154 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800e152:	e525      	b.n	800dba0 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800e154:	4a06      	ldr	r2, [pc, #24]	; (800e170 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e156:	23a8      	movs	r3, #168	; 0xa8
 800e158:	58d4      	ldr	r4, [r2, r3]
 800e15a:	4d09      	ldr	r5, [pc, #36]	; (800e180 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e15c:	402c      	ands	r4, r5
 800e15e:	50d4      	str	r4, [r2, r3]
 800e160:	58d5      	ldr	r5, [r2, r3]
 800e162:	24e0      	movs	r4, #224	; 0xe0
 800e164:	0324      	lsls	r4, r4, #12
 800e166:	432c      	orrs	r4, r5
 800e168:	50d4      	str	r4, [r2, r3]
 800e16a:	e55b      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e16c:	40020008 	.word	0x40020008
 800e170:	40020000 	.word	0x40020000
 800e174:	40020030 	.word	0x40020030
 800e178:	fffff0ff 	.word	0xfffff0ff
 800e17c:	40020058 	.word	0x40020058
 800e180:	fff0ffff 	.word	0xfff0ffff
 800e184:	4002006c 	.word	0x4002006c
 800e188:	ff0fffff 	.word	0xff0fffff
 800e18c:	4002041c 	.word	0x4002041c
 800e190:	40020400 	.word	0x40020400
 800e194:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800e198:	4a41      	ldr	r2, [pc, #260]	; (800e2a0 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e19a:	680c      	ldr	r4, [r1, #0]
 800e19c:	4294      	cmp	r4, r2
 800e19e:	d000      	beq.n	800e1a2 <RemapAndLinkDMAtoUARTRx+0x73e>
 800e1a0:	e502      	b.n	800dba8 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800e1a2:	4a40      	ldr	r2, [pc, #256]	; (800e2a4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e1a4:	23a8      	movs	r3, #168	; 0xa8
 800e1a6:	58d4      	ldr	r4, [r2, r3]
 800e1a8:	4d3f      	ldr	r5, [pc, #252]	; (800e2a8 <RemapAndLinkDMAtoUARTRx+0x844>)
 800e1aa:	402c      	ands	r4, r5
 800e1ac:	50d4      	str	r4, [r2, r3]
 800e1ae:	58d5      	ldr	r5, [r2, r3]
 800e1b0:	24e0      	movs	r4, #224	; 0xe0
 800e1b2:	0424      	lsls	r4, r4, #16
 800e1b4:	432c      	orrs	r4, r5
 800e1b6:	50d4      	str	r4, [r2, r3]
 800e1b8:	e534      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800e1ba:	4a3c      	ldr	r2, [pc, #240]	; (800e2ac <RemapAndLinkDMAtoUARTRx+0x848>)
 800e1bc:	680c      	ldr	r4, [r1, #0]
 800e1be:	4294      	cmp	r4, r2
 800e1c0:	d000      	beq.n	800e1c4 <RemapAndLinkDMAtoUARTRx+0x760>
 800e1c2:	e4f5      	b.n	800dbb0 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800e1c4:	4a3a      	ldr	r2, [pc, #232]	; (800e2b0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e1c6:	23a8      	movs	r3, #168	; 0xa8
 800e1c8:	58d4      	ldr	r4, [r2, r3]
 800e1ca:	25f0      	movs	r5, #240	; 0xf0
 800e1cc:	43ac      	bics	r4, r5
 800e1ce:	50d4      	str	r4, [r2, r3]
 800e1d0:	58d4      	ldr	r4, [r2, r3]
 800e1d2:	3d10      	subs	r5, #16
 800e1d4:	432c      	orrs	r4, r5
 800e1d6:	50d4      	str	r4, [r2, r3]
 800e1d8:	e524      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800e1da:	4a36      	ldr	r2, [pc, #216]	; (800e2b4 <RemapAndLinkDMAtoUARTRx+0x850>)
 800e1dc:	680c      	ldr	r4, [r1, #0]
 800e1de:	4294      	cmp	r4, r2
 800e1e0:	d000      	beq.n	800e1e4 <RemapAndLinkDMAtoUARTRx+0x780>
 800e1e2:	e4e9      	b.n	800dbb8 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800e1e4:	4a32      	ldr	r2, [pc, #200]	; (800e2b0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e1e6:	23a8      	movs	r3, #168	; 0xa8
 800e1e8:	58d4      	ldr	r4, [r2, r3]
 800e1ea:	4d33      	ldr	r5, [pc, #204]	; (800e2b8 <RemapAndLinkDMAtoUARTRx+0x854>)
 800e1ec:	402c      	ands	r4, r5
 800e1ee:	50d4      	str	r4, [r2, r3]
 800e1f0:	58d5      	ldr	r5, [r2, r3]
 800e1f2:	24e0      	movs	r4, #224	; 0xe0
 800e1f4:	0124      	lsls	r4, r4, #4
 800e1f6:	432c      	orrs	r4, r5
 800e1f8:	50d4      	str	r4, [r2, r3]
 800e1fa:	e513      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800e1fc:	4a2f      	ldr	r2, [pc, #188]	; (800e2bc <RemapAndLinkDMAtoUARTRx+0x858>)
 800e1fe:	680c      	ldr	r4, [r1, #0]
 800e200:	4294      	cmp	r4, r2
 800e202:	d000      	beq.n	800e206 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800e204:	e4dc      	b.n	800dbc0 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800e206:	4a27      	ldr	r2, [pc, #156]	; (800e2a4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e208:	23a8      	movs	r3, #168	; 0xa8
 800e20a:	58d5      	ldr	r5, [r2, r3]
 800e20c:	260f      	movs	r6, #15
 800e20e:	43b5      	bics	r5, r6
 800e210:	50d5      	str	r5, [r2, r3]
 800e212:	58d4      	ldr	r4, [r2, r3]
 800e214:	4334      	orrs	r4, r6
 800e216:	50d4      	str	r4, [r2, r3]
 800e218:	e504      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800e21a:	4a29      	ldr	r2, [pc, #164]	; (800e2c0 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800e21c:	680c      	ldr	r4, [r1, #0]
 800e21e:	4294      	cmp	r4, r2
 800e220:	d000      	beq.n	800e224 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800e222:	e4d1      	b.n	800dbc8 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800e224:	4a1f      	ldr	r2, [pc, #124]	; (800e2a4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e226:	23a8      	movs	r3, #168	; 0xa8
 800e228:	58d4      	ldr	r4, [r2, r3]
 800e22a:	4d23      	ldr	r5, [pc, #140]	; (800e2b8 <RemapAndLinkDMAtoUARTRx+0x854>)
 800e22c:	402c      	ands	r4, r5
 800e22e:	50d4      	str	r4, [r2, r3]
 800e230:	58d5      	ldr	r5, [r2, r3]
 800e232:	24f0      	movs	r4, #240	; 0xf0
 800e234:	0124      	lsls	r4, r4, #4
 800e236:	432c      	orrs	r4, r5
 800e238:	50d4      	str	r4, [r2, r3]
 800e23a:	e4f3      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800e23c:	4a21      	ldr	r2, [pc, #132]	; (800e2c4 <RemapAndLinkDMAtoUARTRx+0x860>)
 800e23e:	680c      	ldr	r4, [r1, #0]
 800e240:	4294      	cmp	r4, r2
 800e242:	d000      	beq.n	800e246 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800e244:	e4c4      	b.n	800dbd0 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800e246:	4a17      	ldr	r2, [pc, #92]	; (800e2a4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e248:	23a8      	movs	r3, #168	; 0xa8
 800e24a:	58d4      	ldr	r4, [r2, r3]
 800e24c:	4d1e      	ldr	r5, [pc, #120]	; (800e2c8 <RemapAndLinkDMAtoUARTRx+0x864>)
 800e24e:	402c      	ands	r4, r5
 800e250:	50d4      	str	r4, [r2, r3]
 800e252:	58d5      	ldr	r5, [r2, r3]
 800e254:	24f0      	movs	r4, #240	; 0xf0
 800e256:	0324      	lsls	r4, r4, #12
 800e258:	432c      	orrs	r4, r5
 800e25a:	50d4      	str	r4, [r2, r3]
 800e25c:	e4e2      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800e25e:	4a10      	ldr	r2, [pc, #64]	; (800e2a0 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e260:	680c      	ldr	r4, [r1, #0]
 800e262:	4294      	cmp	r4, r2
 800e264:	d000      	beq.n	800e268 <RemapAndLinkDMAtoUARTRx+0x804>
 800e266:	e4b7      	b.n	800dbd8 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800e268:	4a0e      	ldr	r2, [pc, #56]	; (800e2a4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e26a:	23a8      	movs	r3, #168	; 0xa8
 800e26c:	58d4      	ldr	r4, [r2, r3]
 800e26e:	4d0e      	ldr	r5, [pc, #56]	; (800e2a8 <RemapAndLinkDMAtoUARTRx+0x844>)
 800e270:	402c      	ands	r4, r5
 800e272:	50d4      	str	r4, [r2, r3]
 800e274:	58d5      	ldr	r5, [r2, r3]
 800e276:	24f0      	movs	r4, #240	; 0xf0
 800e278:	0424      	lsls	r4, r4, #16
 800e27a:	432c      	orrs	r4, r5
 800e27c:	50d4      	str	r4, [r2, r3]
 800e27e:	e4d1      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800e280:	4a0a      	ldr	r2, [pc, #40]	; (800e2ac <RemapAndLinkDMAtoUARTRx+0x848>)
 800e282:	680c      	ldr	r4, [r1, #0]
 800e284:	4294      	cmp	r4, r2
 800e286:	d000      	beq.n	800e28a <RemapAndLinkDMAtoUARTRx+0x826>
 800e288:	e4aa      	b.n	800dbe0 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800e28a:	4a09      	ldr	r2, [pc, #36]	; (800e2b0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e28c:	23a8      	movs	r3, #168	; 0xa8
 800e28e:	58d5      	ldr	r5, [r2, r3]
 800e290:	26f0      	movs	r6, #240	; 0xf0
 800e292:	43b5      	bics	r5, r6
 800e294:	50d5      	str	r5, [r2, r3]
 800e296:	58d4      	ldr	r4, [r2, r3]
 800e298:	4334      	orrs	r4, r6
 800e29a:	50d4      	str	r4, [r2, r3]
 800e29c:	e4c2      	b.n	800dc24 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	4002006c 	.word	0x4002006c
 800e2a4:	40020000 	.word	0x40020000
 800e2a8:	ff0fffff 	.word	0xff0fffff
 800e2ac:	4002041c 	.word	0x4002041c
 800e2b0:	40020400 	.word	0x40020400
 800e2b4:	40020430 	.word	0x40020430
 800e2b8:	fffff0ff 	.word	0xfffff0ff
 800e2bc:	40020008 	.word	0x40020008
 800e2c0:	40020030 	.word	0x40020030
 800e2c4:	40020058 	.word	0x40020058
 800e2c8:	fff0ffff 	.word	0xfff0ffff

0800e2cc <DMA_MSG_RX_Setup>:
{	
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	0004      	movs	r4, r0
 800e2d0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800e2d2:	f7ff fbc7 	bl	800da64 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	0028      	movs	r0, r5
 800e2da:	f7ff fb0d 	bl	800d8f8 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800e2de:	0020      	movs	r0, r4
 800e2e0:	f7fd fe62 	bl	800bfa8 <GetPort>
 800e2e4:	1e41      	subs	r1, r0, #1
 800e2e6:	0189      	lsls	r1, r1, #6
 800e2e8:	4803      	ldr	r0, [pc, #12]	; (800e2f8 <DMA_MSG_RX_Setup+0x2c>)
 800e2ea:	1809      	adds	r1, r1, r0
 800e2ec:	2240      	movs	r2, #64	; 0x40
 800e2ee:	0020      	movs	r0, r4
 800e2f0:	f006 f8e0 	bl	80144b4 <HAL_UART_Receive_DMA>
}
 800e2f4:	bd70      	pop	{r4, r5, r6, pc}
 800e2f6:	46c0      	nop			; (mov r8, r8)
 800e2f8:	200012b8 	.word	0x200012b8

0800e2fc <SetupMessagingRxDMAs>:
{	
 800e2fc:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800e2fe:	4b17      	ldr	r3, [pc, #92]	; (800e35c <SetupMessagingRxDMAs+0x60>)
 800e300:	785b      	ldrb	r3, [r3, #1]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d010      	beq.n	800e328 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800e306:	4b15      	ldr	r3, [pc, #84]	; (800e35c <SetupMessagingRxDMAs+0x60>)
 800e308:	789b      	ldrb	r3, [r3, #2]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d011      	beq.n	800e332 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <SetupMessagingRxDMAs+0x60>)
 800e310:	78db      	ldrb	r3, [r3, #3]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d012      	beq.n	800e33c <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800e316:	4b11      	ldr	r3, [pc, #68]	; (800e35c <SetupMessagingRxDMAs+0x60>)
 800e318:	791b      	ldrb	r3, [r3, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d013      	beq.n	800e346 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <SetupMessagingRxDMAs+0x60>)
 800e320:	795b      	ldrb	r3, [r3, #5]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d014      	beq.n	800e350 <SetupMessagingRxDMAs+0x54>
}
 800e326:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800e328:	490d      	ldr	r1, [pc, #52]	; (800e360 <SetupMessagingRxDMAs+0x64>)
 800e32a:	480e      	ldr	r0, [pc, #56]	; (800e364 <SetupMessagingRxDMAs+0x68>)
 800e32c:	f7ff ffce 	bl	800e2cc <DMA_MSG_RX_Setup>
 800e330:	e7e9      	b.n	800e306 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800e332:	490d      	ldr	r1, [pc, #52]	; (800e368 <SetupMessagingRxDMAs+0x6c>)
 800e334:	480d      	ldr	r0, [pc, #52]	; (800e36c <SetupMessagingRxDMAs+0x70>)
 800e336:	f7ff ffc9 	bl	800e2cc <DMA_MSG_RX_Setup>
 800e33a:	e7e8      	b.n	800e30e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800e33c:	490c      	ldr	r1, [pc, #48]	; (800e370 <SetupMessagingRxDMAs+0x74>)
 800e33e:	480d      	ldr	r0, [pc, #52]	; (800e374 <SetupMessagingRxDMAs+0x78>)
 800e340:	f7ff ffc4 	bl	800e2cc <DMA_MSG_RX_Setup>
 800e344:	e7e7      	b.n	800e316 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800e346:	490c      	ldr	r1, [pc, #48]	; (800e378 <SetupMessagingRxDMAs+0x7c>)
 800e348:	480c      	ldr	r0, [pc, #48]	; (800e37c <SetupMessagingRxDMAs+0x80>)
 800e34a:	f7ff ffbf 	bl	800e2cc <DMA_MSG_RX_Setup>
 800e34e:	e7e6      	b.n	800e31e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800e350:	490b      	ldr	r1, [pc, #44]	; (800e380 <SetupMessagingRxDMAs+0x84>)
 800e352:	480c      	ldr	r0, [pc, #48]	; (800e384 <SetupMessagingRxDMAs+0x88>)
 800e354:	f7ff ffba 	bl	800e2cc <DMA_MSG_RX_Setup>
}
 800e358:	e7e5      	b.n	800e326 <SetupMessagingRxDMAs+0x2a>
 800e35a:	46c0      	nop			; (mov r8, r8)
 800e35c:	200010e0 	.word	0x200010e0
 800e360:	20001b78 	.word	0x20001b78
 800e364:	20007090 	.word	0x20007090
 800e368:	20001bb0 	.word	0x20001bb0
 800e36c:	20007104 	.word	0x20007104
 800e370:	20001be8 	.word	0x20001be8
 800e374:	20007020 	.word	0x20007020
 800e378:	20001c20 	.word	0x20001c20
 800e37c:	20006ec4 	.word	0x20006ec4
 800e380:	20001c58 	.word	0x20001c58
 800e384:	20006f38 	.word	0x20006f38

0800e388 <DMA_STREAM_Setup>:
{	
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	0005      	movs	r5, r0
 800e38c:	000f      	movs	r7, r1
 800e38e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800e390:	f7fd fe0a 	bl	800bfa8 <GetPort>
	hDMA = &streamDMA[port-1];
 800e394:	3801      	subs	r0, #1
 800e396:	00c3      	lsls	r3, r0, #3
 800e398:	1a18      	subs	r0, r3, r0
 800e39a:	00c4      	lsls	r4, r0, #3
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <DMA_STREAM_Setup+0x3c>)
 800e39e:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800e3a0:	0021      	movs	r1, r4
 800e3a2:	0028      	movs	r0, r5
 800e3a4:	f7ff fb5e 	bl	800da64 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	0020      	movs	r0, r4
 800e3ac:	f7ff faa4 	bl	800d8f8 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800e3b0:	2369      	movs	r3, #105	; 0x69
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	3128      	adds	r1, #40	; 0x28
 800e3ba:	0032      	movs	r2, r6
 800e3bc:	0028      	movs	r0, r5
 800e3be:	f006 f879 	bl	80144b4 <HAL_UART_Receive_DMA>
}
 800e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c4:	20001d70 	.word	0x20001d70

0800e3c8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800e3c8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e3ca:	6803      	ldr	r3, [r0, #0]
 800e3cc:	4acc      	ldr	r2, [pc, #816]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d100      	bne.n	800e3d4 <RemapAndLinkDMAtoUARTTx+0xc>
 800e3d2:	e0ca      	b.n	800e56a <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e3d4:	4aca      	ldr	r2, [pc, #808]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d100      	bne.n	800e3dc <RemapAndLinkDMAtoUARTTx+0x14>
 800e3da:	e0d8      	b.n	800e58e <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e3dc:	4ac8      	ldr	r2, [pc, #800]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d100      	bne.n	800e3e4 <RemapAndLinkDMAtoUARTTx+0x1c>
 800e3e2:	e0e5      	b.n	800e5b0 <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e3e4:	4ac6      	ldr	r2, [pc, #792]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d100      	bne.n	800e3ec <RemapAndLinkDMAtoUARTTx+0x24>
 800e3ea:	e0f2      	b.n	800e5d2 <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e3ec:	4ac4      	ldr	r2, [pc, #784]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d100      	bne.n	800e3f4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800e3f2:	e0fe      	b.n	800e5f2 <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e3f4:	4ac2      	ldr	r2, [pc, #776]	; (800e700 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d100      	bne.n	800e3fc <RemapAndLinkDMAtoUARTTx+0x34>
 800e3fa:	e10b      	b.n	800e614 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e3fc:	4ac1      	ldr	r2, [pc, #772]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d100      	bne.n	800e404 <RemapAndLinkDMAtoUARTTx+0x3c>
 800e402:	e118      	b.n	800e636 <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e404:	4abf      	ldr	r2, [pc, #764]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d100      	bne.n	800e40c <RemapAndLinkDMAtoUARTTx+0x44>
 800e40a:	e124      	b.n	800e656 <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e40c:	4abd      	ldr	r2, [pc, #756]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d100      	bne.n	800e414 <RemapAndLinkDMAtoUARTTx+0x4c>
 800e412:	e131      	b.n	800e678 <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e414:	4abb      	ldr	r2, [pc, #748]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d100      	bne.n	800e41c <RemapAndLinkDMAtoUARTTx+0x54>
 800e41a:	e13e      	b.n	800e69a <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e41c:	4ab9      	ldr	r2, [pc, #740]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d100      	bne.n	800e424 <RemapAndLinkDMAtoUARTTx+0x5c>
 800e422:	e14a      	b.n	800e6ba <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e424:	4ab7      	ldr	r2, [pc, #732]	; (800e704 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d100      	bne.n	800e42c <RemapAndLinkDMAtoUARTTx+0x64>
 800e42a:	e157      	b.n	800e6dc <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e42c:	4ab6      	ldr	r2, [pc, #728]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d100      	bne.n	800e434 <RemapAndLinkDMAtoUARTTx+0x6c>
 800e432:	e18b      	b.n	800e74c <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e434:	4ab4      	ldr	r2, [pc, #720]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d100      	bne.n	800e43c <RemapAndLinkDMAtoUARTTx+0x74>
 800e43a:	e197      	b.n	800e76c <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e43c:	4ab2      	ldr	r2, [pc, #712]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d100      	bne.n	800e444 <RemapAndLinkDMAtoUARTTx+0x7c>
 800e442:	e1a4      	b.n	800e78e <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e444:	4ab0      	ldr	r2, [pc, #704]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d100      	bne.n	800e44c <RemapAndLinkDMAtoUARTTx+0x84>
 800e44a:	e1b1      	b.n	800e7b0 <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800e44c:	4aae      	ldr	r2, [pc, #696]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d100      	bne.n	800e454 <RemapAndLinkDMAtoUARTTx+0x8c>
 800e452:	e1bd      	b.n	800e7d0 <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800e454:	4aac      	ldr	r2, [pc, #688]	; (800e708 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d100      	bne.n	800e45c <RemapAndLinkDMAtoUARTTx+0x94>
 800e45a:	e1ca      	b.n	800e7f2 <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800e45c:	4aab      	ldr	r2, [pc, #684]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d100      	bne.n	800e464 <RemapAndLinkDMAtoUARTTx+0x9c>
 800e462:	e1d7      	b.n	800e814 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800e464:	4aa9      	ldr	r2, [pc, #676]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d100      	bne.n	800e46c <RemapAndLinkDMAtoUARTTx+0xa4>
 800e46a:	e1e3      	b.n	800e834 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800e46c:	4aa7      	ldr	r2, [pc, #668]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d100      	bne.n	800e474 <RemapAndLinkDMAtoUARTTx+0xac>
 800e472:	e1f0      	b.n	800e856 <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800e474:	4aa5      	ldr	r2, [pc, #660]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d100      	bne.n	800e47c <RemapAndLinkDMAtoUARTTx+0xb4>
 800e47a:	e1fd      	b.n	800e878 <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800e47c:	4aa3      	ldr	r2, [pc, #652]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d100      	bne.n	800e484 <RemapAndLinkDMAtoUARTTx+0xbc>
 800e482:	e209      	b.n	800e898 <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800e484:	4aa1      	ldr	r2, [pc, #644]	; (800e70c <RemapAndLinkDMAtoUARTTx+0x344>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d100      	bne.n	800e48c <RemapAndLinkDMAtoUARTTx+0xc4>
 800e48a:	e216      	b.n	800e8ba <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800e48c:	4aa0      	ldr	r2, [pc, #640]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d100      	bne.n	800e494 <RemapAndLinkDMAtoUARTTx+0xcc>
 800e492:	e223      	b.n	800e8dc <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800e494:	4a9e      	ldr	r2, [pc, #632]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d100      	bne.n	800e49c <RemapAndLinkDMAtoUARTTx+0xd4>
 800e49a:	e22f      	b.n	800e8fc <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800e49c:	4a9c      	ldr	r2, [pc, #624]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d100      	bne.n	800e4a4 <RemapAndLinkDMAtoUARTTx+0xdc>
 800e4a2:	e23c      	b.n	800e91e <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800e4a4:	4a9a      	ldr	r2, [pc, #616]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d100      	bne.n	800e4ac <RemapAndLinkDMAtoUARTTx+0xe4>
 800e4aa:	e249      	b.n	800e940 <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800e4ac:	4a98      	ldr	r2, [pc, #608]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d100      	bne.n	800e4b4 <RemapAndLinkDMAtoUARTTx+0xec>
 800e4b2:	e255      	b.n	800e960 <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800e4b4:	4a96      	ldr	r2, [pc, #600]	; (800e710 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d100      	bne.n	800e4bc <RemapAndLinkDMAtoUARTTx+0xf4>
 800e4ba:	e262      	b.n	800e982 <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800e4bc:	4a95      	ldr	r2, [pc, #596]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d100      	bne.n	800e4c4 <RemapAndLinkDMAtoUARTTx+0xfc>
 800e4c2:	e26f      	b.n	800e9a4 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800e4c4:	4a93      	ldr	r2, [pc, #588]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d100      	bne.n	800e4cc <RemapAndLinkDMAtoUARTTx+0x104>
 800e4ca:	e27b      	b.n	800e9c4 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800e4cc:	4a91      	ldr	r2, [pc, #580]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d100      	bne.n	800e4d4 <RemapAndLinkDMAtoUARTTx+0x10c>
 800e4d2:	e288      	b.n	800e9e6 <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800e4d4:	4a8f      	ldr	r2, [pc, #572]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d100      	bne.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x114>
 800e4da:	e295      	b.n	800ea08 <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800e4dc:	4a8d      	ldr	r2, [pc, #564]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d100      	bne.n	800e4e4 <RemapAndLinkDMAtoUARTTx+0x11c>
 800e4e2:	e2a1      	b.n	800ea28 <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800e4e4:	4a8b      	ldr	r2, [pc, #556]	; (800e714 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d100      	bne.n	800e4ec <RemapAndLinkDMAtoUARTTx+0x124>
 800e4ea:	e2ae      	b.n	800ea4a <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800e4ec:	4a8a      	ldr	r2, [pc, #552]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d100      	bne.n	800e4f4 <RemapAndLinkDMAtoUARTTx+0x12c>
 800e4f2:	e2bb      	b.n	800ea6c <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800e4f4:	4a88      	ldr	r2, [pc, #544]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d100      	bne.n	800e4fc <RemapAndLinkDMAtoUARTTx+0x134>
 800e4fa:	e2c7      	b.n	800ea8c <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800e4fc:	4a86      	ldr	r2, [pc, #536]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d100      	bne.n	800e504 <RemapAndLinkDMAtoUARTTx+0x13c>
 800e502:	e2d4      	b.n	800eaae <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800e504:	4a84      	ldr	r2, [pc, #528]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d100      	bne.n	800e50c <RemapAndLinkDMAtoUARTTx+0x144>
 800e50a:	e2f7      	b.n	800eafc <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800e50c:	4a82      	ldr	r2, [pc, #520]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d100      	bne.n	800e514 <RemapAndLinkDMAtoUARTTx+0x14c>
 800e512:	e303      	b.n	800eb1c <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800e514:	4a80      	ldr	r2, [pc, #512]	; (800e718 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d100      	bne.n	800e51c <RemapAndLinkDMAtoUARTTx+0x154>
 800e51a:	e310      	b.n	800eb3e <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800e51c:	4a7f      	ldr	r2, [pc, #508]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d100      	bne.n	800e524 <RemapAndLinkDMAtoUARTTx+0x15c>
 800e522:	e31d      	b.n	800eb60 <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800e524:	4a7d      	ldr	r2, [pc, #500]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d100      	bne.n	800e52c <RemapAndLinkDMAtoUARTTx+0x164>
 800e52a:	e328      	b.n	800eb7e <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800e52c:	4a7b      	ldr	r2, [pc, #492]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d100      	bne.n	800e534 <RemapAndLinkDMAtoUARTTx+0x16c>
 800e532:	e335      	b.n	800eba0 <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800e534:	4a79      	ldr	r2, [pc, #484]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d100      	bne.n	800e53c <RemapAndLinkDMAtoUARTTx+0x174>
 800e53a:	e342      	b.n	800ebc2 <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800e53c:	4a77      	ldr	r2, [pc, #476]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d100      	bne.n	800e544 <RemapAndLinkDMAtoUARTTx+0x17c>
 800e542:	e34d      	b.n	800ebe0 <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800e544:	4a75      	ldr	r2, [pc, #468]	; (800e71c <RemapAndLinkDMAtoUARTTx+0x354>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d11e      	bne.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e54a:	4b75      	ldr	r3, [pc, #468]	; (800e720 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e54c:	680a      	ldr	r2, [r1, #0]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d11a      	bne.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800e552:	4a74      	ldr	r2, [pc, #464]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e554:	23a8      	movs	r3, #168	; 0xa8
 800e556:	58d4      	ldr	r4, [r2, r3]
 800e558:	4d73      	ldr	r5, [pc, #460]	; (800e728 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e55a:	402c      	ands	r4, r5
 800e55c:	50d4      	str	r4, [r2, r3]
 800e55e:	58d5      	ldr	r5, [r2, r3]
 800e560:	24f0      	movs	r4, #240	; 0xf0
 800e562:	0324      	lsls	r4, r4, #12
 800e564:	432c      	orrs	r4, r5
 800e566:	50d4      	str	r4, [r2, r3]
 800e568:	e00e      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e56a:	4a70      	ldr	r2, [pc, #448]	; (800e72c <RemapAndLinkDMAtoUARTTx+0x364>)
 800e56c:	680c      	ldr	r4, [r1, #0]
 800e56e:	4294      	cmp	r4, r2
 800e570:	d000      	beq.n	800e574 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800e572:	e72f      	b.n	800e3d4 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800e574:	4a6e      	ldr	r2, [pc, #440]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e576:	23a8      	movs	r3, #168	; 0xa8
 800e578:	58d4      	ldr	r4, [r2, r3]
 800e57a:	25f0      	movs	r5, #240	; 0xf0
 800e57c:	43ac      	bics	r4, r5
 800e57e:	50d4      	str	r4, [r2, r3]
 800e580:	58d4      	ldr	r4, [r2, r3]
 800e582:	3d70      	subs	r5, #112	; 0x70
 800e584:	432c      	orrs	r4, r5
 800e586:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800e588:	6601      	str	r1, [r0, #96]	; 0x60
 800e58a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e58e:	4a69      	ldr	r2, [pc, #420]	; (800e734 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e590:	680c      	ldr	r4, [r1, #0]
 800e592:	4294      	cmp	r4, r2
 800e594:	d000      	beq.n	800e598 <RemapAndLinkDMAtoUARTTx+0x1d0>
 800e596:	e721      	b.n	800e3dc <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800e598:	4a65      	ldr	r2, [pc, #404]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e59a:	23a8      	movs	r3, #168	; 0xa8
 800e59c:	58d4      	ldr	r4, [r2, r3]
 800e59e:	4d66      	ldr	r5, [pc, #408]	; (800e738 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e5a0:	402c      	ands	r4, r5
 800e5a2:	50d4      	str	r4, [r2, r3]
 800e5a4:	58d5      	ldr	r5, [r2, r3]
 800e5a6:	2480      	movs	r4, #128	; 0x80
 800e5a8:	0224      	lsls	r4, r4, #8
 800e5aa:	432c      	orrs	r4, r5
 800e5ac:	50d4      	str	r4, [r2, r3]
 800e5ae:	e7eb      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e5b0:	4a62      	ldr	r2, [pc, #392]	; (800e73c <RemapAndLinkDMAtoUARTTx+0x374>)
 800e5b2:	680c      	ldr	r4, [r1, #0]
 800e5b4:	4294      	cmp	r4, r2
 800e5b6:	d000      	beq.n	800e5ba <RemapAndLinkDMAtoUARTTx+0x1f2>
 800e5b8:	e714      	b.n	800e3e4 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800e5ba:	4a5d      	ldr	r2, [pc, #372]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e5bc:	23a8      	movs	r3, #168	; 0xa8
 800e5be:	58d4      	ldr	r4, [r2, r3]
 800e5c0:	4d5f      	ldr	r5, [pc, #380]	; (800e740 <RemapAndLinkDMAtoUARTTx+0x378>)
 800e5c2:	402c      	ands	r4, r5
 800e5c4:	50d4      	str	r4, [r2, r3]
 800e5c6:	58d5      	ldr	r5, [r2, r3]
 800e5c8:	2480      	movs	r4, #128	; 0x80
 800e5ca:	0524      	lsls	r4, r4, #20
 800e5cc:	432c      	orrs	r4, r5
 800e5ce:	50d4      	str	r4, [r2, r3]
 800e5d0:	e7da      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e5d2:	4a5c      	ldr	r2, [pc, #368]	; (800e744 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e5d4:	680c      	ldr	r4, [r1, #0]
 800e5d6:	4294      	cmp	r4, r2
 800e5d8:	d000      	beq.n	800e5dc <RemapAndLinkDMAtoUARTTx+0x214>
 800e5da:	e707      	b.n	800e3ec <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800e5dc:	4a51      	ldr	r2, [pc, #324]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e5de:	23a8      	movs	r3, #168	; 0xa8
 800e5e0:	58d4      	ldr	r4, [r2, r3]
 800e5e2:	250f      	movs	r5, #15
 800e5e4:	43ac      	bics	r4, r5
 800e5e6:	50d4      	str	r4, [r2, r3]
 800e5e8:	58d4      	ldr	r4, [r2, r3]
 800e5ea:	3d07      	subs	r5, #7
 800e5ec:	432c      	orrs	r4, r5
 800e5ee:	50d4      	str	r4, [r2, r3]
 800e5f0:	e7ca      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e5f2:	4a55      	ldr	r2, [pc, #340]	; (800e748 <RemapAndLinkDMAtoUARTTx+0x380>)
 800e5f4:	680c      	ldr	r4, [r1, #0]
 800e5f6:	4294      	cmp	r4, r2
 800e5f8:	d000      	beq.n	800e5fc <RemapAndLinkDMAtoUARTTx+0x234>
 800e5fa:	e6fb      	b.n	800e3f4 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800e5fc:	4a49      	ldr	r2, [pc, #292]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e5fe:	23a8      	movs	r3, #168	; 0xa8
 800e600:	58d4      	ldr	r4, [r2, r3]
 800e602:	4d4d      	ldr	r5, [pc, #308]	; (800e738 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e604:	402c      	ands	r4, r5
 800e606:	50d4      	str	r4, [r2, r3]
 800e608:	58d5      	ldr	r5, [r2, r3]
 800e60a:	2480      	movs	r4, #128	; 0x80
 800e60c:	0224      	lsls	r4, r4, #8
 800e60e:	432c      	orrs	r4, r5
 800e610:	50d4      	str	r4, [r2, r3]
 800e612:	e7b9      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e614:	4a42      	ldr	r2, [pc, #264]	; (800e720 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e616:	680c      	ldr	r4, [r1, #0]
 800e618:	4294      	cmp	r4, r2
 800e61a:	d000      	beq.n	800e61e <RemapAndLinkDMAtoUARTTx+0x256>
 800e61c:	e6ee      	b.n	800e3fc <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800e61e:	4a41      	ldr	r2, [pc, #260]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e620:	23a8      	movs	r3, #168	; 0xa8
 800e622:	58d4      	ldr	r4, [r2, r3]
 800e624:	4d40      	ldr	r5, [pc, #256]	; (800e728 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e626:	402c      	ands	r4, r5
 800e628:	50d4      	str	r4, [r2, r3]
 800e62a:	58d5      	ldr	r5, [r2, r3]
 800e62c:	2480      	movs	r4, #128	; 0x80
 800e62e:	0324      	lsls	r4, r4, #12
 800e630:	432c      	orrs	r4, r5
 800e632:	50d4      	str	r4, [r2, r3]
 800e634:	e7a8      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e636:	4a3d      	ldr	r2, [pc, #244]	; (800e72c <RemapAndLinkDMAtoUARTTx+0x364>)
 800e638:	680c      	ldr	r4, [r1, #0]
 800e63a:	4294      	cmp	r4, r2
 800e63c:	d000      	beq.n	800e640 <RemapAndLinkDMAtoUARTTx+0x278>
 800e63e:	e6e1      	b.n	800e404 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800e640:	4a3b      	ldr	r2, [pc, #236]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e642:	23a8      	movs	r3, #168	; 0xa8
 800e644:	58d4      	ldr	r4, [r2, r3]
 800e646:	25f0      	movs	r5, #240	; 0xf0
 800e648:	43ac      	bics	r4, r5
 800e64a:	50d4      	str	r4, [r2, r3]
 800e64c:	58d4      	ldr	r4, [r2, r3]
 800e64e:	3d60      	subs	r5, #96	; 0x60
 800e650:	432c      	orrs	r4, r5
 800e652:	50d4      	str	r4, [r2, r3]
 800e654:	e798      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e656:	4a37      	ldr	r2, [pc, #220]	; (800e734 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e658:	680c      	ldr	r4, [r1, #0]
 800e65a:	4294      	cmp	r4, r2
 800e65c:	d000      	beq.n	800e660 <RemapAndLinkDMAtoUARTTx+0x298>
 800e65e:	e6d5      	b.n	800e40c <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800e660:	4a33      	ldr	r2, [pc, #204]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e662:	23a8      	movs	r3, #168	; 0xa8
 800e664:	58d4      	ldr	r4, [r2, r3]
 800e666:	4d34      	ldr	r5, [pc, #208]	; (800e738 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e668:	402c      	ands	r4, r5
 800e66a:	50d4      	str	r4, [r2, r3]
 800e66c:	58d5      	ldr	r5, [r2, r3]
 800e66e:	2490      	movs	r4, #144	; 0x90
 800e670:	0224      	lsls	r4, r4, #8
 800e672:	432c      	orrs	r4, r5
 800e674:	50d4      	str	r4, [r2, r3]
 800e676:	e787      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e678:	4a30      	ldr	r2, [pc, #192]	; (800e73c <RemapAndLinkDMAtoUARTTx+0x374>)
 800e67a:	680c      	ldr	r4, [r1, #0]
 800e67c:	4294      	cmp	r4, r2
 800e67e:	d000      	beq.n	800e682 <RemapAndLinkDMAtoUARTTx+0x2ba>
 800e680:	e6c8      	b.n	800e414 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800e682:	4a2b      	ldr	r2, [pc, #172]	; (800e730 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e684:	23a8      	movs	r3, #168	; 0xa8
 800e686:	58d4      	ldr	r4, [r2, r3]
 800e688:	4d2d      	ldr	r5, [pc, #180]	; (800e740 <RemapAndLinkDMAtoUARTTx+0x378>)
 800e68a:	402c      	ands	r4, r5
 800e68c:	50d4      	str	r4, [r2, r3]
 800e68e:	58d5      	ldr	r5, [r2, r3]
 800e690:	2490      	movs	r4, #144	; 0x90
 800e692:	0524      	lsls	r4, r4, #20
 800e694:	432c      	orrs	r4, r5
 800e696:	50d4      	str	r4, [r2, r3]
 800e698:	e776      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e69a:	4a2a      	ldr	r2, [pc, #168]	; (800e744 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e69c:	680c      	ldr	r4, [r1, #0]
 800e69e:	4294      	cmp	r4, r2
 800e6a0:	d000      	beq.n	800e6a4 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800e6a2:	e6bb      	b.n	800e41c <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800e6a4:	4a1f      	ldr	r2, [pc, #124]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e6a6:	23a8      	movs	r3, #168	; 0xa8
 800e6a8:	58d4      	ldr	r4, [r2, r3]
 800e6aa:	250f      	movs	r5, #15
 800e6ac:	43ac      	bics	r4, r5
 800e6ae:	50d4      	str	r4, [r2, r3]
 800e6b0:	58d4      	ldr	r4, [r2, r3]
 800e6b2:	3d06      	subs	r5, #6
 800e6b4:	432c      	orrs	r4, r5
 800e6b6:	50d4      	str	r4, [r2, r3]
 800e6b8:	e766      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e6ba:	4a23      	ldr	r2, [pc, #140]	; (800e748 <RemapAndLinkDMAtoUARTTx+0x380>)
 800e6bc:	680c      	ldr	r4, [r1, #0]
 800e6be:	4294      	cmp	r4, r2
 800e6c0:	d000      	beq.n	800e6c4 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800e6c2:	e6af      	b.n	800e424 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800e6c4:	4a17      	ldr	r2, [pc, #92]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e6c6:	23a8      	movs	r3, #168	; 0xa8
 800e6c8:	58d4      	ldr	r4, [r2, r3]
 800e6ca:	4d1b      	ldr	r5, [pc, #108]	; (800e738 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e6cc:	402c      	ands	r4, r5
 800e6ce:	50d4      	str	r4, [r2, r3]
 800e6d0:	58d5      	ldr	r5, [r2, r3]
 800e6d2:	2490      	movs	r4, #144	; 0x90
 800e6d4:	0224      	lsls	r4, r4, #8
 800e6d6:	432c      	orrs	r4, r5
 800e6d8:	50d4      	str	r4, [r2, r3]
 800e6da:	e755      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e6dc:	4a10      	ldr	r2, [pc, #64]	; (800e720 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e6de:	680c      	ldr	r4, [r1, #0]
 800e6e0:	4294      	cmp	r4, r2
 800e6e2:	d000      	beq.n	800e6e6 <RemapAndLinkDMAtoUARTTx+0x31e>
 800e6e4:	e6a2      	b.n	800e42c <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800e6e6:	4a0f      	ldr	r2, [pc, #60]	; (800e724 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e6e8:	23a8      	movs	r3, #168	; 0xa8
 800e6ea:	58d4      	ldr	r4, [r2, r3]
 800e6ec:	4d0e      	ldr	r5, [pc, #56]	; (800e728 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e6ee:	402c      	ands	r4, r5
 800e6f0:	50d4      	str	r4, [r2, r3]
 800e6f2:	58d5      	ldr	r5, [r2, r3]
 800e6f4:	2490      	movs	r4, #144	; 0x90
 800e6f6:	0324      	lsls	r4, r4, #12
 800e6f8:	432c      	orrs	r4, r5
 800e6fa:	50d4      	str	r4, [r2, r3]
 800e6fc:	e744      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	40013800 	.word	0x40013800
 800e704:	40004400 	.word	0x40004400
 800e708:	40004800 	.word	0x40004800
 800e70c:	40004c00 	.word	0x40004c00
 800e710:	40005000 	.word	0x40005000
 800e714:	40011400 	.word	0x40011400
 800e718:	40011800 	.word	0x40011800
 800e71c:	40011c00 	.word	0x40011c00
 800e720:	40020458 	.word	0x40020458
 800e724:	40020400 	.word	0x40020400
 800e728:	fff0ffff 	.word	0xfff0ffff
 800e72c:	4002001c 	.word	0x4002001c
 800e730:	40020000 	.word	0x40020000
 800e734:	40020044 	.word	0x40020044
 800e738:	ffff0fff 	.word	0xffff0fff
 800e73c:	40020080 	.word	0x40020080
 800e740:	f0ffffff 	.word	0xf0ffffff
 800e744:	40020408 	.word	0x40020408
 800e748:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e74c:	4ae0      	ldr	r2, [pc, #896]	; (800ead0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e74e:	680c      	ldr	r4, [r1, #0]
 800e750:	4294      	cmp	r4, r2
 800e752:	d000      	beq.n	800e756 <RemapAndLinkDMAtoUARTTx+0x38e>
 800e754:	e66e      	b.n	800e434 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800e756:	4adf      	ldr	r2, [pc, #892]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e758:	23a8      	movs	r3, #168	; 0xa8
 800e75a:	58d4      	ldr	r4, [r2, r3]
 800e75c:	25f0      	movs	r5, #240	; 0xf0
 800e75e:	43ac      	bics	r4, r5
 800e760:	50d4      	str	r4, [r2, r3]
 800e762:	58d4      	ldr	r4, [r2, r3]
 800e764:	3d50      	subs	r5, #80	; 0x50
 800e766:	432c      	orrs	r4, r5
 800e768:	50d4      	str	r4, [r2, r3]
 800e76a:	e70d      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e76c:	4ada      	ldr	r2, [pc, #872]	; (800ead8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800e76e:	680c      	ldr	r4, [r1, #0]
 800e770:	4294      	cmp	r4, r2
 800e772:	d000      	beq.n	800e776 <RemapAndLinkDMAtoUARTTx+0x3ae>
 800e774:	e662      	b.n	800e43c <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800e776:	4ad7      	ldr	r2, [pc, #860]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e778:	23a8      	movs	r3, #168	; 0xa8
 800e77a:	58d4      	ldr	r4, [r2, r3]
 800e77c:	4dd7      	ldr	r5, [pc, #860]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e77e:	402c      	ands	r4, r5
 800e780:	50d4      	str	r4, [r2, r3]
 800e782:	58d5      	ldr	r5, [r2, r3]
 800e784:	24a0      	movs	r4, #160	; 0xa0
 800e786:	0224      	lsls	r4, r4, #8
 800e788:	432c      	orrs	r4, r5
 800e78a:	50d4      	str	r4, [r2, r3]
 800e78c:	e6fc      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e78e:	4ad4      	ldr	r2, [pc, #848]	; (800eae0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e790:	680c      	ldr	r4, [r1, #0]
 800e792:	4294      	cmp	r4, r2
 800e794:	d000      	beq.n	800e798 <RemapAndLinkDMAtoUARTTx+0x3d0>
 800e796:	e655      	b.n	800e444 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800e798:	4ace      	ldr	r2, [pc, #824]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e79a:	23a8      	movs	r3, #168	; 0xa8
 800e79c:	58d4      	ldr	r4, [r2, r3]
 800e79e:	4dd1      	ldr	r5, [pc, #836]	; (800eae4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e7a0:	402c      	ands	r4, r5
 800e7a2:	50d4      	str	r4, [r2, r3]
 800e7a4:	58d5      	ldr	r5, [r2, r3]
 800e7a6:	24a0      	movs	r4, #160	; 0xa0
 800e7a8:	0524      	lsls	r4, r4, #20
 800e7aa:	432c      	orrs	r4, r5
 800e7ac:	50d4      	str	r4, [r2, r3]
 800e7ae:	e6eb      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e7b0:	4acd      	ldr	r2, [pc, #820]	; (800eae8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800e7b2:	680c      	ldr	r4, [r1, #0]
 800e7b4:	4294      	cmp	r4, r2
 800e7b6:	d000      	beq.n	800e7ba <RemapAndLinkDMAtoUARTTx+0x3f2>
 800e7b8:	e648      	b.n	800e44c <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800e7ba:	4acc      	ldr	r2, [pc, #816]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e7bc:	23a8      	movs	r3, #168	; 0xa8
 800e7be:	58d4      	ldr	r4, [r2, r3]
 800e7c0:	250f      	movs	r5, #15
 800e7c2:	43ac      	bics	r4, r5
 800e7c4:	50d4      	str	r4, [r2, r3]
 800e7c6:	58d4      	ldr	r4, [r2, r3]
 800e7c8:	3d05      	subs	r5, #5
 800e7ca:	432c      	orrs	r4, r5
 800e7cc:	50d4      	str	r4, [r2, r3]
 800e7ce:	e6db      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800e7d0:	4ac7      	ldr	r2, [pc, #796]	; (800eaf0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e7d2:	680c      	ldr	r4, [r1, #0]
 800e7d4:	4294      	cmp	r4, r2
 800e7d6:	d000      	beq.n	800e7da <RemapAndLinkDMAtoUARTTx+0x412>
 800e7d8:	e63c      	b.n	800e454 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800e7da:	4ac4      	ldr	r2, [pc, #784]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e7dc:	23a8      	movs	r3, #168	; 0xa8
 800e7de:	58d4      	ldr	r4, [r2, r3]
 800e7e0:	4dbe      	ldr	r5, [pc, #760]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e7e2:	402c      	ands	r4, r5
 800e7e4:	50d4      	str	r4, [r2, r3]
 800e7e6:	58d5      	ldr	r5, [r2, r3]
 800e7e8:	24a0      	movs	r4, #160	; 0xa0
 800e7ea:	0224      	lsls	r4, r4, #8
 800e7ec:	432c      	orrs	r4, r5
 800e7ee:	50d4      	str	r4, [r2, r3]
 800e7f0:	e6ca      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800e7f2:	4ac0      	ldr	r2, [pc, #768]	; (800eaf4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e7f4:	680c      	ldr	r4, [r1, #0]
 800e7f6:	4294      	cmp	r4, r2
 800e7f8:	d000      	beq.n	800e7fc <RemapAndLinkDMAtoUARTTx+0x434>
 800e7fa:	e62f      	b.n	800e45c <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800e7fc:	4abb      	ldr	r2, [pc, #748]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e7fe:	23a8      	movs	r3, #168	; 0xa8
 800e800:	58d4      	ldr	r4, [r2, r3]
 800e802:	4dbd      	ldr	r5, [pc, #756]	; (800eaf8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800e804:	402c      	ands	r4, r5
 800e806:	50d4      	str	r4, [r2, r3]
 800e808:	58d5      	ldr	r5, [r2, r3]
 800e80a:	24a0      	movs	r4, #160	; 0xa0
 800e80c:	0324      	lsls	r4, r4, #12
 800e80e:	432c      	orrs	r4, r5
 800e810:	50d4      	str	r4, [r2, r3]
 800e812:	e6b9      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800e814:	4aae      	ldr	r2, [pc, #696]	; (800ead0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e816:	680c      	ldr	r4, [r1, #0]
 800e818:	4294      	cmp	r4, r2
 800e81a:	d000      	beq.n	800e81e <RemapAndLinkDMAtoUARTTx+0x456>
 800e81c:	e622      	b.n	800e464 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800e81e:	4aad      	ldr	r2, [pc, #692]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e820:	23a8      	movs	r3, #168	; 0xa8
 800e822:	58d4      	ldr	r4, [r2, r3]
 800e824:	25f0      	movs	r5, #240	; 0xf0
 800e826:	43ac      	bics	r4, r5
 800e828:	50d4      	str	r4, [r2, r3]
 800e82a:	58d4      	ldr	r4, [r2, r3]
 800e82c:	3d40      	subs	r5, #64	; 0x40
 800e82e:	432c      	orrs	r4, r5
 800e830:	50d4      	str	r4, [r2, r3]
 800e832:	e6a9      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800e834:	4aa8      	ldr	r2, [pc, #672]	; (800ead8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800e836:	680c      	ldr	r4, [r1, #0]
 800e838:	4294      	cmp	r4, r2
 800e83a:	d000      	beq.n	800e83e <RemapAndLinkDMAtoUARTTx+0x476>
 800e83c:	e616      	b.n	800e46c <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800e83e:	4aa5      	ldr	r2, [pc, #660]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e840:	23a8      	movs	r3, #168	; 0xa8
 800e842:	58d4      	ldr	r4, [r2, r3]
 800e844:	4da5      	ldr	r5, [pc, #660]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e846:	402c      	ands	r4, r5
 800e848:	50d4      	str	r4, [r2, r3]
 800e84a:	58d5      	ldr	r5, [r2, r3]
 800e84c:	24b0      	movs	r4, #176	; 0xb0
 800e84e:	0224      	lsls	r4, r4, #8
 800e850:	432c      	orrs	r4, r5
 800e852:	50d4      	str	r4, [r2, r3]
 800e854:	e698      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800e856:	4aa2      	ldr	r2, [pc, #648]	; (800eae0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e858:	680c      	ldr	r4, [r1, #0]
 800e85a:	4294      	cmp	r4, r2
 800e85c:	d000      	beq.n	800e860 <RemapAndLinkDMAtoUARTTx+0x498>
 800e85e:	e609      	b.n	800e474 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800e860:	4a9c      	ldr	r2, [pc, #624]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e862:	23a8      	movs	r3, #168	; 0xa8
 800e864:	58d4      	ldr	r4, [r2, r3]
 800e866:	4d9f      	ldr	r5, [pc, #636]	; (800eae4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e868:	402c      	ands	r4, r5
 800e86a:	50d4      	str	r4, [r2, r3]
 800e86c:	58d5      	ldr	r5, [r2, r3]
 800e86e:	24b0      	movs	r4, #176	; 0xb0
 800e870:	0524      	lsls	r4, r4, #20
 800e872:	432c      	orrs	r4, r5
 800e874:	50d4      	str	r4, [r2, r3]
 800e876:	e687      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800e878:	4a9b      	ldr	r2, [pc, #620]	; (800eae8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800e87a:	680c      	ldr	r4, [r1, #0]
 800e87c:	4294      	cmp	r4, r2
 800e87e:	d000      	beq.n	800e882 <RemapAndLinkDMAtoUARTTx+0x4ba>
 800e880:	e5fc      	b.n	800e47c <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800e882:	4a9a      	ldr	r2, [pc, #616]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e884:	23a8      	movs	r3, #168	; 0xa8
 800e886:	58d4      	ldr	r4, [r2, r3]
 800e888:	250f      	movs	r5, #15
 800e88a:	43ac      	bics	r4, r5
 800e88c:	50d4      	str	r4, [r2, r3]
 800e88e:	58d4      	ldr	r4, [r2, r3]
 800e890:	3d04      	subs	r5, #4
 800e892:	432c      	orrs	r4, r5
 800e894:	50d4      	str	r4, [r2, r3]
 800e896:	e677      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800e898:	4a95      	ldr	r2, [pc, #596]	; (800eaf0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e89a:	680c      	ldr	r4, [r1, #0]
 800e89c:	4294      	cmp	r4, r2
 800e89e:	d000      	beq.n	800e8a2 <RemapAndLinkDMAtoUARTTx+0x4da>
 800e8a0:	e5f0      	b.n	800e484 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800e8a2:	4a92      	ldr	r2, [pc, #584]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e8a4:	23a8      	movs	r3, #168	; 0xa8
 800e8a6:	58d4      	ldr	r4, [r2, r3]
 800e8a8:	4d8c      	ldr	r5, [pc, #560]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e8aa:	402c      	ands	r4, r5
 800e8ac:	50d4      	str	r4, [r2, r3]
 800e8ae:	58d5      	ldr	r5, [r2, r3]
 800e8b0:	24b0      	movs	r4, #176	; 0xb0
 800e8b2:	0224      	lsls	r4, r4, #8
 800e8b4:	432c      	orrs	r4, r5
 800e8b6:	50d4      	str	r4, [r2, r3]
 800e8b8:	e666      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800e8ba:	4a8e      	ldr	r2, [pc, #568]	; (800eaf4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e8bc:	680c      	ldr	r4, [r1, #0]
 800e8be:	4294      	cmp	r4, r2
 800e8c0:	d000      	beq.n	800e8c4 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800e8c2:	e5e3      	b.n	800e48c <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800e8c4:	4a89      	ldr	r2, [pc, #548]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e8c6:	23a8      	movs	r3, #168	; 0xa8
 800e8c8:	58d4      	ldr	r4, [r2, r3]
 800e8ca:	4d8b      	ldr	r5, [pc, #556]	; (800eaf8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800e8cc:	402c      	ands	r4, r5
 800e8ce:	50d4      	str	r4, [r2, r3]
 800e8d0:	58d5      	ldr	r5, [r2, r3]
 800e8d2:	24b0      	movs	r4, #176	; 0xb0
 800e8d4:	0324      	lsls	r4, r4, #12
 800e8d6:	432c      	orrs	r4, r5
 800e8d8:	50d4      	str	r4, [r2, r3]
 800e8da:	e655      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800e8dc:	4a7c      	ldr	r2, [pc, #496]	; (800ead0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e8de:	680c      	ldr	r4, [r1, #0]
 800e8e0:	4294      	cmp	r4, r2
 800e8e2:	d000      	beq.n	800e8e6 <RemapAndLinkDMAtoUARTTx+0x51e>
 800e8e4:	e5d6      	b.n	800e494 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800e8e6:	4a7b      	ldr	r2, [pc, #492]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e8e8:	23a8      	movs	r3, #168	; 0xa8
 800e8ea:	58d4      	ldr	r4, [r2, r3]
 800e8ec:	25f0      	movs	r5, #240	; 0xf0
 800e8ee:	43ac      	bics	r4, r5
 800e8f0:	50d4      	str	r4, [r2, r3]
 800e8f2:	58d4      	ldr	r4, [r2, r3]
 800e8f4:	3d30      	subs	r5, #48	; 0x30
 800e8f6:	432c      	orrs	r4, r5
 800e8f8:	50d4      	str	r4, [r2, r3]
 800e8fa:	e645      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800e8fc:	4a76      	ldr	r2, [pc, #472]	; (800ead8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800e8fe:	680c      	ldr	r4, [r1, #0]
 800e900:	4294      	cmp	r4, r2
 800e902:	d000      	beq.n	800e906 <RemapAndLinkDMAtoUARTTx+0x53e>
 800e904:	e5ca      	b.n	800e49c <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800e906:	4a73      	ldr	r2, [pc, #460]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e908:	23a8      	movs	r3, #168	; 0xa8
 800e90a:	58d4      	ldr	r4, [r2, r3]
 800e90c:	4d73      	ldr	r5, [pc, #460]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e90e:	402c      	ands	r4, r5
 800e910:	50d4      	str	r4, [r2, r3]
 800e912:	58d5      	ldr	r5, [r2, r3]
 800e914:	24c0      	movs	r4, #192	; 0xc0
 800e916:	0224      	lsls	r4, r4, #8
 800e918:	432c      	orrs	r4, r5
 800e91a:	50d4      	str	r4, [r2, r3]
 800e91c:	e634      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800e91e:	4a70      	ldr	r2, [pc, #448]	; (800eae0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e920:	680c      	ldr	r4, [r1, #0]
 800e922:	4294      	cmp	r4, r2
 800e924:	d000      	beq.n	800e928 <RemapAndLinkDMAtoUARTTx+0x560>
 800e926:	e5bd      	b.n	800e4a4 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800e928:	4a6a      	ldr	r2, [pc, #424]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e92a:	23a8      	movs	r3, #168	; 0xa8
 800e92c:	58d4      	ldr	r4, [r2, r3]
 800e92e:	4d6d      	ldr	r5, [pc, #436]	; (800eae4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e930:	402c      	ands	r4, r5
 800e932:	50d4      	str	r4, [r2, r3]
 800e934:	58d5      	ldr	r5, [r2, r3]
 800e936:	24c0      	movs	r4, #192	; 0xc0
 800e938:	0524      	lsls	r4, r4, #20
 800e93a:	432c      	orrs	r4, r5
 800e93c:	50d4      	str	r4, [r2, r3]
 800e93e:	e623      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800e940:	4a69      	ldr	r2, [pc, #420]	; (800eae8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800e942:	680c      	ldr	r4, [r1, #0]
 800e944:	4294      	cmp	r4, r2
 800e946:	d000      	beq.n	800e94a <RemapAndLinkDMAtoUARTTx+0x582>
 800e948:	e5b0      	b.n	800e4ac <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800e94a:	4a68      	ldr	r2, [pc, #416]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e94c:	23a8      	movs	r3, #168	; 0xa8
 800e94e:	58d4      	ldr	r4, [r2, r3]
 800e950:	250f      	movs	r5, #15
 800e952:	43ac      	bics	r4, r5
 800e954:	50d4      	str	r4, [r2, r3]
 800e956:	58d4      	ldr	r4, [r2, r3]
 800e958:	3d03      	subs	r5, #3
 800e95a:	432c      	orrs	r4, r5
 800e95c:	50d4      	str	r4, [r2, r3]
 800e95e:	e613      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800e960:	4a63      	ldr	r2, [pc, #396]	; (800eaf0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e962:	680c      	ldr	r4, [r1, #0]
 800e964:	4294      	cmp	r4, r2
 800e966:	d000      	beq.n	800e96a <RemapAndLinkDMAtoUARTTx+0x5a2>
 800e968:	e5a4      	b.n	800e4b4 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800e96a:	4a60      	ldr	r2, [pc, #384]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e96c:	23a8      	movs	r3, #168	; 0xa8
 800e96e:	58d4      	ldr	r4, [r2, r3]
 800e970:	4d5a      	ldr	r5, [pc, #360]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e972:	402c      	ands	r4, r5
 800e974:	50d4      	str	r4, [r2, r3]
 800e976:	58d5      	ldr	r5, [r2, r3]
 800e978:	24c0      	movs	r4, #192	; 0xc0
 800e97a:	0224      	lsls	r4, r4, #8
 800e97c:	432c      	orrs	r4, r5
 800e97e:	50d4      	str	r4, [r2, r3]
 800e980:	e602      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800e982:	4a5c      	ldr	r2, [pc, #368]	; (800eaf4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e984:	680c      	ldr	r4, [r1, #0]
 800e986:	4294      	cmp	r4, r2
 800e988:	d000      	beq.n	800e98c <RemapAndLinkDMAtoUARTTx+0x5c4>
 800e98a:	e597      	b.n	800e4bc <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800e98c:	4a57      	ldr	r2, [pc, #348]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800e98e:	23a8      	movs	r3, #168	; 0xa8
 800e990:	58d4      	ldr	r4, [r2, r3]
 800e992:	4d59      	ldr	r5, [pc, #356]	; (800eaf8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800e994:	402c      	ands	r4, r5
 800e996:	50d4      	str	r4, [r2, r3]
 800e998:	58d5      	ldr	r5, [r2, r3]
 800e99a:	24c0      	movs	r4, #192	; 0xc0
 800e99c:	0324      	lsls	r4, r4, #12
 800e99e:	432c      	orrs	r4, r5
 800e9a0:	50d4      	str	r4, [r2, r3]
 800e9a2:	e5f1      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800e9a4:	4a4a      	ldr	r2, [pc, #296]	; (800ead0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e9a6:	680c      	ldr	r4, [r1, #0]
 800e9a8:	4294      	cmp	r4, r2
 800e9aa:	d000      	beq.n	800e9ae <RemapAndLinkDMAtoUARTTx+0x5e6>
 800e9ac:	e58a      	b.n	800e4c4 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800e9ae:	4a49      	ldr	r2, [pc, #292]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9b0:	23a8      	movs	r3, #168	; 0xa8
 800e9b2:	58d4      	ldr	r4, [r2, r3]
 800e9b4:	25f0      	movs	r5, #240	; 0xf0
 800e9b6:	43ac      	bics	r4, r5
 800e9b8:	50d4      	str	r4, [r2, r3]
 800e9ba:	58d4      	ldr	r4, [r2, r3]
 800e9bc:	3d20      	subs	r5, #32
 800e9be:	432c      	orrs	r4, r5
 800e9c0:	50d4      	str	r4, [r2, r3]
 800e9c2:	e5e1      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800e9c4:	4a44      	ldr	r2, [pc, #272]	; (800ead8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800e9c6:	680c      	ldr	r4, [r1, #0]
 800e9c8:	4294      	cmp	r4, r2
 800e9ca:	d000      	beq.n	800e9ce <RemapAndLinkDMAtoUARTTx+0x606>
 800e9cc:	e57e      	b.n	800e4cc <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800e9ce:	4a41      	ldr	r2, [pc, #260]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9d0:	23a8      	movs	r3, #168	; 0xa8
 800e9d2:	58d4      	ldr	r4, [r2, r3]
 800e9d4:	4d41      	ldr	r5, [pc, #260]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800e9d6:	402c      	ands	r4, r5
 800e9d8:	50d4      	str	r4, [r2, r3]
 800e9da:	58d5      	ldr	r5, [r2, r3]
 800e9dc:	24d0      	movs	r4, #208	; 0xd0
 800e9de:	0224      	lsls	r4, r4, #8
 800e9e0:	432c      	orrs	r4, r5
 800e9e2:	50d4      	str	r4, [r2, r3]
 800e9e4:	e5d0      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800e9e6:	4a3e      	ldr	r2, [pc, #248]	; (800eae0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e9e8:	680c      	ldr	r4, [r1, #0]
 800e9ea:	4294      	cmp	r4, r2
 800e9ec:	d000      	beq.n	800e9f0 <RemapAndLinkDMAtoUARTTx+0x628>
 800e9ee:	e571      	b.n	800e4d4 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800e9f0:	4a38      	ldr	r2, [pc, #224]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9f2:	23a8      	movs	r3, #168	; 0xa8
 800e9f4:	58d4      	ldr	r4, [r2, r3]
 800e9f6:	4d3b      	ldr	r5, [pc, #236]	; (800eae4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e9f8:	402c      	ands	r4, r5
 800e9fa:	50d4      	str	r4, [r2, r3]
 800e9fc:	58d5      	ldr	r5, [r2, r3]
 800e9fe:	24d0      	movs	r4, #208	; 0xd0
 800ea00:	0524      	lsls	r4, r4, #20
 800ea02:	432c      	orrs	r4, r5
 800ea04:	50d4      	str	r4, [r2, r3]
 800ea06:	e5bf      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800ea08:	4a37      	ldr	r2, [pc, #220]	; (800eae8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800ea0a:	680c      	ldr	r4, [r1, #0]
 800ea0c:	4294      	cmp	r4, r2
 800ea0e:	d000      	beq.n	800ea12 <RemapAndLinkDMAtoUARTTx+0x64a>
 800ea10:	e564      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800ea12:	4a36      	ldr	r2, [pc, #216]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800ea14:	23a8      	movs	r3, #168	; 0xa8
 800ea16:	58d4      	ldr	r4, [r2, r3]
 800ea18:	250f      	movs	r5, #15
 800ea1a:	43ac      	bics	r4, r5
 800ea1c:	50d4      	str	r4, [r2, r3]
 800ea1e:	58d4      	ldr	r4, [r2, r3]
 800ea20:	3d02      	subs	r5, #2
 800ea22:	432c      	orrs	r4, r5
 800ea24:	50d4      	str	r4, [r2, r3]
 800ea26:	e5af      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800ea28:	4a31      	ldr	r2, [pc, #196]	; (800eaf0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800ea2a:	680c      	ldr	r4, [r1, #0]
 800ea2c:	4294      	cmp	r4, r2
 800ea2e:	d000      	beq.n	800ea32 <RemapAndLinkDMAtoUARTTx+0x66a>
 800ea30:	e558      	b.n	800e4e4 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800ea32:	4a2e      	ldr	r2, [pc, #184]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800ea34:	23a8      	movs	r3, #168	; 0xa8
 800ea36:	58d4      	ldr	r4, [r2, r3]
 800ea38:	4d28      	ldr	r5, [pc, #160]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800ea3a:	402c      	ands	r4, r5
 800ea3c:	50d4      	str	r4, [r2, r3]
 800ea3e:	58d5      	ldr	r5, [r2, r3]
 800ea40:	24d0      	movs	r4, #208	; 0xd0
 800ea42:	0224      	lsls	r4, r4, #8
 800ea44:	432c      	orrs	r4, r5
 800ea46:	50d4      	str	r4, [r2, r3]
 800ea48:	e59e      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800ea4a:	4a2a      	ldr	r2, [pc, #168]	; (800eaf4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800ea4c:	680c      	ldr	r4, [r1, #0]
 800ea4e:	4294      	cmp	r4, r2
 800ea50:	d000      	beq.n	800ea54 <RemapAndLinkDMAtoUARTTx+0x68c>
 800ea52:	e54b      	b.n	800e4ec <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800ea54:	4a25      	ldr	r2, [pc, #148]	; (800eaec <RemapAndLinkDMAtoUARTTx+0x724>)
 800ea56:	23a8      	movs	r3, #168	; 0xa8
 800ea58:	58d4      	ldr	r4, [r2, r3]
 800ea5a:	4d27      	ldr	r5, [pc, #156]	; (800eaf8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800ea5c:	402c      	ands	r4, r5
 800ea5e:	50d4      	str	r4, [r2, r3]
 800ea60:	58d5      	ldr	r5, [r2, r3]
 800ea62:	24d0      	movs	r4, #208	; 0xd0
 800ea64:	0324      	lsls	r4, r4, #12
 800ea66:	432c      	orrs	r4, r5
 800ea68:	50d4      	str	r4, [r2, r3]
 800ea6a:	e58d      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800ea6c:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800ea6e:	680c      	ldr	r4, [r1, #0]
 800ea70:	4294      	cmp	r4, r2
 800ea72:	d000      	beq.n	800ea76 <RemapAndLinkDMAtoUARTTx+0x6ae>
 800ea74:	e53e      	b.n	800e4f4 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800ea76:	4a17      	ldr	r2, [pc, #92]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea78:	23a8      	movs	r3, #168	; 0xa8
 800ea7a:	58d4      	ldr	r4, [r2, r3]
 800ea7c:	25f0      	movs	r5, #240	; 0xf0
 800ea7e:	43ac      	bics	r4, r5
 800ea80:	50d4      	str	r4, [r2, r3]
 800ea82:	58d4      	ldr	r4, [r2, r3]
 800ea84:	3d10      	subs	r5, #16
 800ea86:	432c      	orrs	r4, r5
 800ea88:	50d4      	str	r4, [r2, r3]
 800ea8a:	e57d      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800ea8c:	4a12      	ldr	r2, [pc, #72]	; (800ead8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800ea8e:	680c      	ldr	r4, [r1, #0]
 800ea90:	4294      	cmp	r4, r2
 800ea92:	d000      	beq.n	800ea96 <RemapAndLinkDMAtoUARTTx+0x6ce>
 800ea94:	e532      	b.n	800e4fc <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800ea96:	4a0f      	ldr	r2, [pc, #60]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea98:	23a8      	movs	r3, #168	; 0xa8
 800ea9a:	58d4      	ldr	r4, [r2, r3]
 800ea9c:	4d0f      	ldr	r5, [pc, #60]	; (800eadc <RemapAndLinkDMAtoUARTTx+0x714>)
 800ea9e:	402c      	ands	r4, r5
 800eaa0:	50d4      	str	r4, [r2, r3]
 800eaa2:	58d5      	ldr	r5, [r2, r3]
 800eaa4:	24e0      	movs	r4, #224	; 0xe0
 800eaa6:	0224      	lsls	r4, r4, #8
 800eaa8:	432c      	orrs	r4, r5
 800eaaa:	50d4      	str	r4, [r2, r3]
 800eaac:	e56c      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800eaae:	4a0c      	ldr	r2, [pc, #48]	; (800eae0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800eab0:	680c      	ldr	r4, [r1, #0]
 800eab2:	4294      	cmp	r4, r2
 800eab4:	d000      	beq.n	800eab8 <RemapAndLinkDMAtoUARTTx+0x6f0>
 800eab6:	e525      	b.n	800e504 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800eab8:	4a06      	ldr	r2, [pc, #24]	; (800ead4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800eaba:	23a8      	movs	r3, #168	; 0xa8
 800eabc:	58d4      	ldr	r4, [r2, r3]
 800eabe:	4d09      	ldr	r5, [pc, #36]	; (800eae4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800eac0:	402c      	ands	r4, r5
 800eac2:	50d4      	str	r4, [r2, r3]
 800eac4:	58d5      	ldr	r5, [r2, r3]
 800eac6:	24e0      	movs	r4, #224	; 0xe0
 800eac8:	0524      	lsls	r4, r4, #20
 800eaca:	432c      	orrs	r4, r5
 800eacc:	50d4      	str	r4, [r2, r3]
 800eace:	e55b      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ead0:	4002001c 	.word	0x4002001c
 800ead4:	40020000 	.word	0x40020000
 800ead8:	40020044 	.word	0x40020044
 800eadc:	ffff0fff 	.word	0xffff0fff
 800eae0:	40020080 	.word	0x40020080
 800eae4:	f0ffffff 	.word	0xf0ffffff
 800eae8:	40020408 	.word	0x40020408
 800eaec:	40020400 	.word	0x40020400
 800eaf0:	40020444 	.word	0x40020444
 800eaf4:	40020458 	.word	0x40020458
 800eaf8:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800eafc:	4a41      	ldr	r2, [pc, #260]	; (800ec04 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800eafe:	680c      	ldr	r4, [r1, #0]
 800eb00:	4294      	cmp	r4, r2
 800eb02:	d000      	beq.n	800eb06 <RemapAndLinkDMAtoUARTTx+0x73e>
 800eb04:	e502      	b.n	800e50c <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800eb06:	4a40      	ldr	r2, [pc, #256]	; (800ec08 <RemapAndLinkDMAtoUARTTx+0x840>)
 800eb08:	23a8      	movs	r3, #168	; 0xa8
 800eb0a:	58d4      	ldr	r4, [r2, r3]
 800eb0c:	250f      	movs	r5, #15
 800eb0e:	43ac      	bics	r4, r5
 800eb10:	50d4      	str	r4, [r2, r3]
 800eb12:	58d4      	ldr	r4, [r2, r3]
 800eb14:	3d01      	subs	r5, #1
 800eb16:	432c      	orrs	r4, r5
 800eb18:	50d4      	str	r4, [r2, r3]
 800eb1a:	e535      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800eb1c:	4a3b      	ldr	r2, [pc, #236]	; (800ec0c <RemapAndLinkDMAtoUARTTx+0x844>)
 800eb1e:	680c      	ldr	r4, [r1, #0]
 800eb20:	4294      	cmp	r4, r2
 800eb22:	d000      	beq.n	800eb26 <RemapAndLinkDMAtoUARTTx+0x75e>
 800eb24:	e4f6      	b.n	800e514 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800eb26:	4a38      	ldr	r2, [pc, #224]	; (800ec08 <RemapAndLinkDMAtoUARTTx+0x840>)
 800eb28:	23a8      	movs	r3, #168	; 0xa8
 800eb2a:	58d4      	ldr	r4, [r2, r3]
 800eb2c:	4d38      	ldr	r5, [pc, #224]	; (800ec10 <RemapAndLinkDMAtoUARTTx+0x848>)
 800eb2e:	402c      	ands	r4, r5
 800eb30:	50d4      	str	r4, [r2, r3]
 800eb32:	58d5      	ldr	r5, [r2, r3]
 800eb34:	24e0      	movs	r4, #224	; 0xe0
 800eb36:	0224      	lsls	r4, r4, #8
 800eb38:	432c      	orrs	r4, r5
 800eb3a:	50d4      	str	r4, [r2, r3]
 800eb3c:	e524      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800eb3e:	4a35      	ldr	r2, [pc, #212]	; (800ec14 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800eb40:	680c      	ldr	r4, [r1, #0]
 800eb42:	4294      	cmp	r4, r2
 800eb44:	d000      	beq.n	800eb48 <RemapAndLinkDMAtoUARTTx+0x780>
 800eb46:	e4e9      	b.n	800e51c <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800eb48:	4a2f      	ldr	r2, [pc, #188]	; (800ec08 <RemapAndLinkDMAtoUARTTx+0x840>)
 800eb4a:	23a8      	movs	r3, #168	; 0xa8
 800eb4c:	58d4      	ldr	r4, [r2, r3]
 800eb4e:	4d32      	ldr	r5, [pc, #200]	; (800ec18 <RemapAndLinkDMAtoUARTTx+0x850>)
 800eb50:	402c      	ands	r4, r5
 800eb52:	50d4      	str	r4, [r2, r3]
 800eb54:	58d5      	ldr	r5, [r2, r3]
 800eb56:	24e0      	movs	r4, #224	; 0xe0
 800eb58:	0324      	lsls	r4, r4, #12
 800eb5a:	432c      	orrs	r4, r5
 800eb5c:	50d4      	str	r4, [r2, r3]
 800eb5e:	e513      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800eb60:	4a2e      	ldr	r2, [pc, #184]	; (800ec1c <RemapAndLinkDMAtoUARTTx+0x854>)
 800eb62:	680c      	ldr	r4, [r1, #0]
 800eb64:	4294      	cmp	r4, r2
 800eb66:	d000      	beq.n	800eb6a <RemapAndLinkDMAtoUARTTx+0x7a2>
 800eb68:	e4dc      	b.n	800e524 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800eb6a:	4a2d      	ldr	r2, [pc, #180]	; (800ec20 <RemapAndLinkDMAtoUARTTx+0x858>)
 800eb6c:	23a8      	movs	r3, #168	; 0xa8
 800eb6e:	58d5      	ldr	r5, [r2, r3]
 800eb70:	26f0      	movs	r6, #240	; 0xf0
 800eb72:	43b5      	bics	r5, r6
 800eb74:	50d5      	str	r5, [r2, r3]
 800eb76:	58d4      	ldr	r4, [r2, r3]
 800eb78:	4334      	orrs	r4, r6
 800eb7a:	50d4      	str	r4, [r2, r3]
 800eb7c:	e504      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800eb7e:	4a29      	ldr	r2, [pc, #164]	; (800ec24 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800eb80:	680c      	ldr	r4, [r1, #0]
 800eb82:	4294      	cmp	r4, r2
 800eb84:	d000      	beq.n	800eb88 <RemapAndLinkDMAtoUARTTx+0x7c0>
 800eb86:	e4d1      	b.n	800e52c <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800eb88:	4a25      	ldr	r2, [pc, #148]	; (800ec20 <RemapAndLinkDMAtoUARTTx+0x858>)
 800eb8a:	23a8      	movs	r3, #168	; 0xa8
 800eb8c:	58d4      	ldr	r4, [r2, r3]
 800eb8e:	4d20      	ldr	r5, [pc, #128]	; (800ec10 <RemapAndLinkDMAtoUARTTx+0x848>)
 800eb90:	402c      	ands	r4, r5
 800eb92:	50d4      	str	r4, [r2, r3]
 800eb94:	58d5      	ldr	r5, [r2, r3]
 800eb96:	24f0      	movs	r4, #240	; 0xf0
 800eb98:	0224      	lsls	r4, r4, #8
 800eb9a:	432c      	orrs	r4, r5
 800eb9c:	50d4      	str	r4, [r2, r3]
 800eb9e:	e4f3      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800eba0:	4a21      	ldr	r2, [pc, #132]	; (800ec28 <RemapAndLinkDMAtoUARTTx+0x860>)
 800eba2:	680c      	ldr	r4, [r1, #0]
 800eba4:	4294      	cmp	r4, r2
 800eba6:	d000      	beq.n	800ebaa <RemapAndLinkDMAtoUARTTx+0x7e2>
 800eba8:	e4c4      	b.n	800e534 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800ebaa:	4a1d      	ldr	r2, [pc, #116]	; (800ec20 <RemapAndLinkDMAtoUARTTx+0x858>)
 800ebac:	23a8      	movs	r3, #168	; 0xa8
 800ebae:	58d4      	ldr	r4, [r2, r3]
 800ebb0:	4d1e      	ldr	r5, [pc, #120]	; (800ec2c <RemapAndLinkDMAtoUARTTx+0x864>)
 800ebb2:	402c      	ands	r4, r5
 800ebb4:	50d4      	str	r4, [r2, r3]
 800ebb6:	58d5      	ldr	r5, [r2, r3]
 800ebb8:	24f0      	movs	r4, #240	; 0xf0
 800ebba:	0524      	lsls	r4, r4, #20
 800ebbc:	432c      	orrs	r4, r5
 800ebbe:	50d4      	str	r4, [r2, r3]
 800ebc0:	e4e2      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800ebc2:	4a10      	ldr	r2, [pc, #64]	; (800ec04 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800ebc4:	680c      	ldr	r4, [r1, #0]
 800ebc6:	4294      	cmp	r4, r2
 800ebc8:	d000      	beq.n	800ebcc <RemapAndLinkDMAtoUARTTx+0x804>
 800ebca:	e4b7      	b.n	800e53c <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800ebcc:	4a0e      	ldr	r2, [pc, #56]	; (800ec08 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ebce:	23a8      	movs	r3, #168	; 0xa8
 800ebd0:	58d5      	ldr	r5, [r2, r3]
 800ebd2:	260f      	movs	r6, #15
 800ebd4:	43b5      	bics	r5, r6
 800ebd6:	50d5      	str	r5, [r2, r3]
 800ebd8:	58d4      	ldr	r4, [r2, r3]
 800ebda:	4334      	orrs	r4, r6
 800ebdc:	50d4      	str	r4, [r2, r3]
 800ebde:	e4d3      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800ebe0:	4a0a      	ldr	r2, [pc, #40]	; (800ec0c <RemapAndLinkDMAtoUARTTx+0x844>)
 800ebe2:	680c      	ldr	r4, [r1, #0]
 800ebe4:	4294      	cmp	r4, r2
 800ebe6:	d000      	beq.n	800ebea <RemapAndLinkDMAtoUARTTx+0x822>
 800ebe8:	e4ac      	b.n	800e544 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800ebea:	4a07      	ldr	r2, [pc, #28]	; (800ec08 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ebec:	23a8      	movs	r3, #168	; 0xa8
 800ebee:	58d4      	ldr	r4, [r2, r3]
 800ebf0:	4d07      	ldr	r5, [pc, #28]	; (800ec10 <RemapAndLinkDMAtoUARTTx+0x848>)
 800ebf2:	402c      	ands	r4, r5
 800ebf4:	50d4      	str	r4, [r2, r3]
 800ebf6:	58d5      	ldr	r5, [r2, r3]
 800ebf8:	24f0      	movs	r4, #240	; 0xf0
 800ebfa:	0224      	lsls	r4, r4, #8
 800ebfc:	432c      	orrs	r4, r5
 800ebfe:	50d4      	str	r4, [r2, r3]
 800ec00:	e4c2      	b.n	800e588 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ec02:	46c0      	nop			; (mov r8, r8)
 800ec04:	40020408 	.word	0x40020408
 800ec08:	40020400 	.word	0x40020400
 800ec0c:	40020444 	.word	0x40020444
 800ec10:	ffff0fff 	.word	0xffff0fff
 800ec14:	40020458 	.word	0x40020458
 800ec18:	fff0ffff 	.word	0xfff0ffff
 800ec1c:	4002001c 	.word	0x4002001c
 800ec20:	40020000 	.word	0x40020000
 800ec24:	40020044 	.word	0x40020044
 800ec28:	40020080 	.word	0x40020080
 800ec2c:	f0ffffff 	.word	0xf0ffffff

0800ec30 <DMA_MSG_TX_Setup>:
{	
 800ec30:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800ec32:	4b0d      	ldr	r3, [pc, #52]	; (800ec68 <DMA_MSG_TX_Setup+0x38>)
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d010      	beq.n	800ec5c <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800ec3a:	4b0b      	ldr	r3, [pc, #44]	; (800ec68 <DMA_MSG_TX_Setup+0x38>)
 800ec3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00e      	beq.n	800ec60 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800ec42:	4a09      	ldr	r2, [pc, #36]	; (800ec68 <DMA_MSG_TX_Setup+0x38>)
 800ec44:	2394      	movs	r3, #148	; 0x94
 800ec46:	58d3      	ldr	r3, [r2, r3]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00b      	beq.n	800ec64 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800ec4c:	0021      	movs	r1, r4
 800ec4e:	f7ff fbbb 	bl	800e3c8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800ec52:	2100      	movs	r1, #0
 800ec54:	0020      	movs	r0, r4
 800ec56:	f7fe fe4f 	bl	800d8f8 <SetupDMAInterrupts>
}
 800ec5a:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800ec5c:	4c02      	ldr	r4, [pc, #8]	; (800ec68 <DMA_MSG_TX_Setup+0x38>)
 800ec5e:	e7f5      	b.n	800ec4c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800ec60:	4c02      	ldr	r4, [pc, #8]	; (800ec6c <DMA_MSG_TX_Setup+0x3c>)
 800ec62:	e7f3      	b.n	800ec4c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800ec64:	4c02      	ldr	r4, [pc, #8]	; (800ec70 <DMA_MSG_TX_Setup+0x40>)
 800ec66:	e7f1      	b.n	800ec4c <DMA_MSG_TX_Setup+0x1c>
 800ec68:	20001cc8 	.word	0x20001cc8
 800ec6c:	20001d00 	.word	0x20001d00
 800ec70:	20001d38 	.word	0x20001d38

0800ec74 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800ec74:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800ec76:	4807      	ldr	r0, [pc, #28]	; (800ec94 <CRC_Init+0x20>)
 800ec78:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <CRC_Init+0x24>)
 800ec7a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800ec7c:	2310      	movs	r3, #16
 800ec7e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800ec80:	2300      	movs	r3, #0
 800ec82:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ec84:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800ec86:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800ec88:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800ec8a:	3303      	adds	r3, #3
 800ec8c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800ec8e:	f003 fb8c 	bl	80123aa <HAL_CRC_Init>
}
 800ec92:	bd10      	pop	{r4, pc}
 800ec94:	2000717c 	.word	0x2000717c
 800ec98:	40023000 	.word	0x40023000

0800ec9c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ec9c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800ec9e:	4a05      	ldr	r2, [pc, #20]	; (800ecb4 <HAL_CRC_MspInit+0x18>)
 800eca0:	6951      	ldr	r1, [r2, #20]
 800eca2:	2340      	movs	r3, #64	; 0x40
 800eca4:	4319      	orrs	r1, r3
 800eca6:	6151      	str	r1, [r2, #20]
 800eca8:	6952      	ldr	r2, [r2, #20]
 800ecaa:	4013      	ands	r3, r2
 800ecac:	9301      	str	r3, [sp, #4]
 800ecae:	9b01      	ldr	r3, [sp, #4]
}
 800ecb0:	b002      	add	sp, #8
 800ecb2:	4770      	bx	lr
 800ecb4:	40021000 	.word	0x40021000

0800ecb8 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	0004      	movs	r4, r0
 800ecbc:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d014      	beq.n	800ecec <CalculateCRC8+0x34>
 800ecc2:	2900      	cmp	r1, #0
 800ecc4:	d101      	bne.n	800ecca <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800ecc6:	2000      	movs	r0, #0
}
 800ecc8:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ecca:	088e      	lsrs	r6, r1, #2
 800eccc:	0032      	movs	r2, r6
 800ecce:	0001      	movs	r1, r0
 800ecd0:	4807      	ldr	r0, [pc, #28]	; (800ecf0 <CalculateCRC8+0x38>)
 800ecd2:	f003 fbc5 	bl	8012460 <HAL_CRC_Calculate>
 800ecd6:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800ecd8:	07ab      	lsls	r3, r5, #30
 800ecda:	d0f5      	beq.n	800ecc8 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800ecdc:	0131      	lsls	r1, r6, #4
 800ecde:	1861      	adds	r1, r4, r1
 800ece0:	2201      	movs	r2, #1
 800ece2:	4803      	ldr	r0, [pc, #12]	; (800ecf0 <CalculateCRC8+0x38>)
 800ece4:	f003 fb92 	bl	801240c <HAL_CRC_Accumulate>
 800ece8:	b2c0      	uxtb	r0, r0
 800ecea:	e7ed      	b.n	800ecc8 <CalculateCRC8+0x10>
	return 0;
 800ecec:	2000      	movs	r0, #0
 800ecee:	e7eb      	b.n	800ecc8 <CalculateCRC8+0x10>
 800ecf0:	2000717c 	.word	0x2000717c

0800ecf4 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800ecf4:	b500      	push	{lr}
 800ecf6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ecf8:	2380      	movs	r3, #128	; 0x80
 800ecfa:	011b      	lsls	r3, r3, #4
 800ecfc:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed02:	2300      	movs	r3, #0
 800ed04:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed06:	3303      	adds	r3, #3
 800ed08:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ed0a:	2090      	movs	r0, #144	; 0x90
 800ed0c:	a901      	add	r1, sp, #4
 800ed0e:	05c0      	lsls	r0, r0, #23
 800ed10:	f004 fa00 	bl	8013114 <HAL_GPIO_Init>
}
 800ed14:	b007      	add	sp, #28
 800ed16:	bd00      	pop	{pc}

0800ed18 <GPIO_Init>:
{
 800ed18:	b500      	push	{lr}
 800ed1a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ed1c:	4b18      	ldr	r3, [pc, #96]	; (800ed80 <GPIO_Init+0x68>)
 800ed1e:	6959      	ldr	r1, [r3, #20]
 800ed20:	2080      	movs	r0, #128	; 0x80
 800ed22:	0300      	lsls	r0, r0, #12
 800ed24:	4301      	orrs	r1, r0
 800ed26:	6159      	str	r1, [r3, #20]
 800ed28:	695a      	ldr	r2, [r3, #20]
 800ed2a:	4002      	ands	r2, r0
 800ed2c:	9201      	str	r2, [sp, #4]
 800ed2e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ed30:	6959      	ldr	r1, [r3, #20]
 800ed32:	2080      	movs	r0, #128	; 0x80
 800ed34:	0280      	lsls	r0, r0, #10
 800ed36:	4301      	orrs	r1, r0
 800ed38:	6159      	str	r1, [r3, #20]
 800ed3a:	695a      	ldr	r2, [r3, #20]
 800ed3c:	4002      	ands	r2, r0
 800ed3e:	9202      	str	r2, [sp, #8]
 800ed40:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ed42:	6959      	ldr	r1, [r3, #20]
 800ed44:	2080      	movs	r0, #128	; 0x80
 800ed46:	0340      	lsls	r0, r0, #13
 800ed48:	4301      	orrs	r1, r0
 800ed4a:	6159      	str	r1, [r3, #20]
 800ed4c:	695a      	ldr	r2, [r3, #20]
 800ed4e:	4002      	ands	r2, r0
 800ed50:	9203      	str	r2, [sp, #12]
 800ed52:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ed54:	6959      	ldr	r1, [r3, #20]
 800ed56:	2080      	movs	r0, #128	; 0x80
 800ed58:	02c0      	lsls	r0, r0, #11
 800ed5a:	4301      	orrs	r1, r0
 800ed5c:	6159      	str	r1, [r3, #20]
 800ed5e:	695a      	ldr	r2, [r3, #20]
 800ed60:	4002      	ands	r2, r0
 800ed62:	9204      	str	r2, [sp, #16]
 800ed64:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ed66:	695a      	ldr	r2, [r3, #20]
 800ed68:	2180      	movs	r1, #128	; 0x80
 800ed6a:	03c9      	lsls	r1, r1, #15
 800ed6c:	430a      	orrs	r2, r1
 800ed6e:	615a      	str	r2, [r3, #20]
 800ed70:	695b      	ldr	r3, [r3, #20]
 800ed72:	400b      	ands	r3, r1
 800ed74:	9305      	str	r3, [sp, #20]
 800ed76:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800ed78:	f7ff ffbc 	bl	800ecf4 <IND_LED_Init>
}
 800ed7c:	b007      	add	sp, #28
 800ed7e:	bd00      	pop	{pc}
 800ed80:	40021000 	.word	0x40021000

0800ed84 <HX711_GPIO_Init>:

//-- Configure indicator LED
void HX711_GPIO_Init(void)
{
 800ed84:	b530      	push	{r4, r5, lr}
 800ed86:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800ed88:	2390      	movs	r3, #144	; 0x90
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed92:	2500      	movs	r5, #0
 800ed94:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed96:	3302      	adds	r3, #2
 800ed98:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed9a:	2490      	movs	r4, #144	; 0x90
 800ed9c:	05e4      	lsls	r4, r4, #23
 800ed9e:	a901      	add	r1, sp, #4
 800eda0:	0020      	movs	r0, r4
 800eda2:	f004 f9b7 	bl	8013114 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800eda6:	2380      	movs	r3, #128	; 0x80
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800edac:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800edae:	a901      	add	r1, sp, #4
 800edb0:	0020      	movs	r0, r4
 800edb2:	f004 f9af 	bl	8013114 <HAL_GPIO_Init>
}
 800edb6:	b007      	add	sp, #28
 800edb8:	bd30      	pop	{r4, r5, pc}
	...

0800edbc <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	000e      	movs	r6, r1
 800edc0:	0014      	movs	r4, r2
 800edc2:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800edc4:	f000 fd24 	bl	800f810 <GetUart>
	
	if (huart == &huart1) 
 800edc8:	4b26      	ldr	r3, [pc, #152]	; (800ee64 <GetPortGPIOs+0xa8>)
 800edca:	4298      	cmp	r0, r3
 800edcc:	d047      	beq.n	800ee5e <GetPortGPIOs+0xa2>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800edce:	4b26      	ldr	r3, [pc, #152]	; (800ee68 <GetPortGPIOs+0xac>)
 800edd0:	4298      	cmp	r0, r3
 800edd2:	d00d      	beq.n	800edf0 <GetPortGPIOs+0x34>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800edd4:	4b25      	ldr	r3, [pc, #148]	; (800ee6c <GetPortGPIOs+0xb0>)
 800edd6:	4298      	cmp	r0, r3
 800edd8:	d015      	beq.n	800ee06 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800edda:	4b25      	ldr	r3, [pc, #148]	; (800ee70 <GetPortGPIOs+0xb4>)
 800eddc:	4298      	cmp	r0, r3
 800edde:	d01e      	beq.n	800ee1e <GetPortGPIOs+0x62>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800ede0:	4b24      	ldr	r3, [pc, #144]	; (800ee74 <GetPortGPIOs+0xb8>)
 800ede2:	4298      	cmp	r0, r3
 800ede4:	d026      	beq.n	800ee34 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800ede6:	4b24      	ldr	r3, [pc, #144]	; (800ee78 <GetPortGPIOs+0xbc>)
 800ede8:	4298      	cmp	r0, r3
 800edea:	d02d      	beq.n	800ee48 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800edec:	20ff      	movs	r0, #255	; 0xff
 800edee:	e037      	b.n	800ee60 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800edf0:	2390      	movs	r3, #144	; 0x90
 800edf2:	05db      	lsls	r3, r3, #23
 800edf4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800edf6:	2204      	movs	r2, #4
 800edf8:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800edfa:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800edfc:	2308      	movs	r3, #8
 800edfe:	9a04      	ldr	r2, [sp, #16]
 800ee00:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ee02:	2000      	movs	r0, #0
 800ee04:	e02c      	b.n	800ee60 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800ee06:	4b1d      	ldr	r3, [pc, #116]	; (800ee7c <GetPortGPIOs+0xc0>)
 800ee08:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800ee0a:	2280      	movs	r2, #128	; 0x80
 800ee0c:	00d2      	lsls	r2, r2, #3
 800ee0e:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800ee10:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800ee12:	2380      	movs	r3, #128	; 0x80
 800ee14:	011b      	lsls	r3, r3, #4
 800ee16:	9a04      	ldr	r2, [sp, #16]
 800ee18:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e020      	b.n	800ee60 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800ee1e:	2390      	movs	r3, #144	; 0x90
 800ee20:	05db      	lsls	r3, r3, #23
 800ee22:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800ee24:	2201      	movs	r2, #1
 800ee26:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800ee28:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	9a04      	ldr	r2, [sp, #16]
 800ee2e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ee30:	2000      	movs	r0, #0
 800ee32:	e015      	b.n	800ee60 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800ee34:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <GetPortGPIOs+0xc0>)
 800ee36:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800ee38:	2208      	movs	r2, #8
 800ee3a:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800ee3c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800ee3e:	2310      	movs	r3, #16
 800ee40:	9a04      	ldr	r2, [sp, #16]
 800ee42:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ee44:	2000      	movs	r0, #0
 800ee46:	e00b      	b.n	800ee60 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800ee48:	2390      	movs	r3, #144	; 0x90
 800ee4a:	05db      	lsls	r3, r3, #23
 800ee4c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800ee4e:	2210      	movs	r2, #16
 800ee50:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800ee52:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800ee54:	2320      	movs	r3, #32
 800ee56:	9a04      	ldr	r2, [sp, #16]
 800ee58:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	e000      	b.n	800ee60 <GetPortGPIOs+0xa4>
 800ee5e:	2000      	movs	r0, #0
	
	return result;	
}
 800ee60:	bd70      	pop	{r4, r5, r6, pc}
 800ee62:	46c0      	nop			; (mov r8, r8)
 800ee64:	20006fac 	.word	0x20006fac
 800ee68:	20007104 	.word	0x20007104
 800ee6c:	20006ec4 	.word	0x20006ec4
 800ee70:	20007090 	.word	0x20007090
 800ee74:	20006f38 	.word	0x20006f38
 800ee78:	20007020 	.word	0x20007020
 800ee7c:	48000400 	.word	0x48000400

0800ee80 <IsFactoryReset>:
{
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800ee84:	4b39      	ldr	r3, [pc, #228]	; (800ef6c <IsFactoryReset+0xec>)
 800ee86:	6959      	ldr	r1, [r3, #20]
 800ee88:	2080      	movs	r0, #128	; 0x80
 800ee8a:	0280      	lsls	r0, r0, #10
 800ee8c:	4301      	orrs	r1, r0
 800ee8e:	6159      	str	r1, [r3, #20]
 800ee90:	695a      	ldr	r2, [r3, #20]
 800ee92:	4002      	ands	r2, r0
 800ee94:	9203      	str	r2, [sp, #12]
 800ee96:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ee98:	6959      	ldr	r1, [r3, #20]
 800ee9a:	2080      	movs	r0, #128	; 0x80
 800ee9c:	02c0      	lsls	r0, r0, #11
 800ee9e:	4301      	orrs	r1, r0
 800eea0:	6159      	str	r1, [r3, #20]
 800eea2:	695a      	ldr	r2, [r3, #20]
 800eea4:	4002      	ands	r2, r0
 800eea6:	9204      	str	r2, [sp, #16]
 800eea8:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800eeaa:	6959      	ldr	r1, [r3, #20]
 800eeac:	2080      	movs	r0, #128	; 0x80
 800eeae:	0300      	lsls	r0, r0, #12
 800eeb0:	4301      	orrs	r1, r0
 800eeb2:	6159      	str	r1, [r3, #20]
 800eeb4:	695a      	ldr	r2, [r3, #20]
 800eeb6:	4002      	ands	r2, r0
 800eeb8:	9205      	str	r2, [sp, #20]
 800eeba:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800eebc:	695a      	ldr	r2, [r3, #20]
 800eebe:	2180      	movs	r1, #128	; 0x80
 800eec0:	0349      	lsls	r1, r1, #13
 800eec2:	430a      	orrs	r2, r1
 800eec4:	615a      	str	r2, [r3, #20]
 800eec6:	695b      	ldr	r3, [r3, #20]
 800eec8:	400b      	ands	r3, r1
 800eeca:	9306      	str	r3, [sp, #24]
 800eecc:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800eece:	2522      	movs	r5, #34	; 0x22
 800eed0:	446d      	add	r5, sp
 800eed2:	ab08      	add	r3, sp, #32
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	ab0b      	add	r3, sp, #44	; 0x2c
 800eed8:	002a      	movs	r2, r5
 800eeda:	a90c      	add	r1, sp, #48	; 0x30
 800eedc:	2001      	movs	r0, #1
 800eede:	f7ff ff6d 	bl	800edbc <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800eee2:	ac07      	add	r4, sp, #28
 800eee4:	9400      	str	r4, [sp, #0]
 800eee6:	ab09      	add	r3, sp, #36	; 0x24
 800eee8:	221e      	movs	r2, #30
 800eeea:	446a      	add	r2, sp
 800eeec:	a90a      	add	r1, sp, #40	; 0x28
 800eeee:	2005      	movs	r0, #5
 800eef0:	f7ff ff64 	bl	800edbc <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eef4:	2301      	movs	r3, #1
 800eef6:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef8:	2600      	movs	r6, #0
 800eefa:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800eefc:	882b      	ldrh	r3, [r5, #0]
 800eefe:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ef00:	a90d      	add	r1, sp, #52	; 0x34
 800ef02:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef04:	f004 f906 	bl	8013114 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef08:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ef0e:	8823      	ldrh	r3, [r4, #0]
 800ef10:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ef12:	a90d      	add	r1, sp, #52	; 0x34
 800ef14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef16:	f004 f8fd 	bl	8013114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ef1a:	8829      	ldrh	r1, [r5, #0]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef20:	f004 fa49 	bl	80133b6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ef24:	2005      	movs	r0, #5
 800ef26:	f000 fadf 	bl	800f4e8 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ef2a:	8821      	ldrh	r1, [r4, #0]
 800ef2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef2e:	f004 fa3b 	bl	80133a8 <HAL_GPIO_ReadPin>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d006      	beq.n	800ef44 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ef36:	4b0e      	ldr	r3, [pc, #56]	; (800ef70 <IsFactoryReset+0xf0>)
 800ef38:	2201      	movs	r2, #1
 800ef3a:	4252      	negs	r2, r2
 800ef3c:	601a      	str	r2, [r3, #0]
	return 0;
 800ef3e:	2000      	movs	r0, #0
}
 800ef40:	b012      	add	sp, #72	; 0x48
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ef44:	2322      	movs	r3, #34	; 0x22
 800ef46:	446b      	add	r3, sp
 800ef48:	8819      	ldrh	r1, [r3, #0]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef4e:	f004 fa32 	bl	80133b6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ef52:	2005      	movs	r0, #5
 800ef54:	f000 fac8 	bl	800f4e8 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ef58:	ab07      	add	r3, sp, #28
 800ef5a:	8819      	ldrh	r1, [r3, #0]
 800ef5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef5e:	f004 fa23 	bl	80133a8 <HAL_GPIO_ReadPin>
 800ef62:	2801      	cmp	r0, #1
 800ef64:	d1e7      	bne.n	800ef36 <IsFactoryReset+0xb6>
			return 1;
 800ef66:	2001      	movs	r0, #1
 800ef68:	e7ea      	b.n	800ef40 <IsFactoryReset+0xc0>
 800ef6a:	46c0      	nop			; (mov r8, r8)
 800ef6c:	40021000 	.word	0x40021000
 800ef70:	20007ff0 	.word	0x20007ff0

0800ef74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ef74:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ef76:	f002 fe0b 	bl	8011b90 <HAL_IncTick>
  osSystickHandler();  
 800ef7a:	f000 fe1b 	bl	800fbb4 <osSystickHandler>

}
 800ef7e:	bd10      	pop	{r4, pc}

0800ef80 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ef80:	e7fe      	b.n	800ef80 <HardFault_Handler>

0800ef82 <USART1_IRQHandler>:
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ef82:	4770      	bx	lr

0800ef84 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ef84:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ef86:	4802      	ldr	r0, [pc, #8]	; (800ef90 <USART2_IRQHandler+0xc>)
 800ef88:	f005 feaf 	bl	8014cea <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ef8c:	bd10      	pop	{r4, pc}
 800ef8e:	46c0      	nop			; (mov r8, r8)
 800ef90:	20007104 	.word	0x20007104

0800ef94 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ef94:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ef96:	4806      	ldr	r0, [pc, #24]	; (800efb0 <USART3_8_IRQHandler+0x1c>)
 800ef98:	f005 fea7 	bl	8014cea <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800ef9c:	4805      	ldr	r0, [pc, #20]	; (800efb4 <USART3_8_IRQHandler+0x20>)
 800ef9e:	f005 fea4 	bl	8014cea <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800efa2:	4805      	ldr	r0, [pc, #20]	; (800efb8 <USART3_8_IRQHandler+0x24>)
 800efa4:	f005 fea1 	bl	8014cea <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800efa8:	4804      	ldr	r0, [pc, #16]	; (800efbc <USART3_8_IRQHandler+0x28>)
 800efaa:	f005 fe9e 	bl	8014cea <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800efae:	bd10      	pop	{r4, pc}
 800efb0:	20006ec4 	.word	0x20006ec4
 800efb4:	20007090 	.word	0x20007090
 800efb8:	20006f38 	.word	0x20006f38
 800efbc:	20007020 	.word	0x20007020

0800efc0 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800efc0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800efc2:	2001      	movs	r0, #1
 800efc4:	f7f8 fd54 	bl	8007a70 <DMA_IRQHandler>
	
}
 800efc8:	bd10      	pop	{r4, pc}
	...

0800efcc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800efcc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800efce:	4b0c      	ldr	r3, [pc, #48]	; (800f000 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	06db      	lsls	r3, r3, #27
 800efd4:	d408      	bmi.n	800efe8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800efd6:	4b0b      	ldr	r3, [pc, #44]	; (800f004 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	05db      	lsls	r3, r3, #23
 800efdc:	d408      	bmi.n	800eff0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800efde:	4b09      	ldr	r3, [pc, #36]	; (800f004 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	06db      	lsls	r3, r3, #27
 800efe4:	d408      	bmi.n	800eff8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800efe6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800efe8:	2005      	movs	r0, #5
 800efea:	f7f8 fd41 	bl	8007a70 <DMA_IRQHandler>
 800efee:	e7fa      	b.n	800efe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800eff0:	2002      	movs	r0, #2
 800eff2:	f7f8 fd3d 	bl	8007a70 <DMA_IRQHandler>
 800eff6:	e7f6      	b.n	800efe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800eff8:	4803      	ldr	r0, [pc, #12]	; (800f008 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800effa:	f003 fb2d 	bl	8012658 <HAL_DMA_IRQHandler>
}
 800effe:	e7f2      	b.n	800efe6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800f000:	40020400 	.word	0x40020400
 800f004:	40020000 	.word	0x40020000
 800f008:	20001cc8 	.word	0x20001cc8

0800f00c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800f00c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800f00e:	4b14      	ldr	r3, [pc, #80]	; (800f060 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	03db      	lsls	r3, r3, #15
 800f014:	d413      	bmi.n	800f03e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800f016:	4b12      	ldr	r3, [pc, #72]	; (800f060 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	02db      	lsls	r3, r3, #11
 800f01c:	d413      	bmi.n	800f046 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800f01e:	4b11      	ldr	r3, [pc, #68]	; (800f064 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	05db      	lsls	r3, r3, #23
 800f024:	d413      	bmi.n	800f04e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800f026:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	04db      	lsls	r3, r3, #19
 800f02c:	d413      	bmi.n	800f056 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800f02e:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	01db      	lsls	r3, r3, #7
 800f034:	d506      	bpl.n	800f044 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800f036:	480c      	ldr	r0, [pc, #48]	; (800f068 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800f038:	f003 fb0e 	bl	8012658 <HAL_DMA_IRQHandler>
	}
}
 800f03c:	e002      	b.n	800f044 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800f03e:	2003      	movs	r0, #3
 800f040:	f7f8 fd16 	bl	8007a70 <DMA_IRQHandler>
}
 800f044:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800f046:	2004      	movs	r0, #4
 800f048:	f7f8 fd12 	bl	8007a70 <DMA_IRQHandler>
 800f04c:	e7fa      	b.n	800f044 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800f04e:	2006      	movs	r0, #6
 800f050:	f7f8 fd0e 	bl	8007a70 <DMA_IRQHandler>
 800f054:	e7f6      	b.n	800f044 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800f056:	4805      	ldr	r0, [pc, #20]	; (800f06c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800f058:	f003 fafe 	bl	8012658 <HAL_DMA_IRQHandler>
 800f05c:	e7f2      	b.n	800f044 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800f05e:	46c0      	nop			; (mov r8, r8)
 800f060:	40020000 	.word	0x40020000
 800f064:	40020400 	.word	0x40020400
 800f068:	20001d38 	.word	0x20001d38
 800f06c:	20001d00 	.word	0x20001d00

0800f070 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f070:	b510      	push	{r4, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800f076:	2300      	movs	r3, #0
 800f078:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800f07a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800f080:	f7fe fce6 	bl	800da50 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800f084:	0020      	movs	r0, r4
 800f086:	f7fc ff8f 	bl	800bfa8 <GetPort>
 800f08a:	0080      	lsls	r0, r0, #2
 800f08c:	4b03      	ldr	r3, [pc, #12]	; (800f09c <HAL_UART_TxCpltCallback+0x2c>)
 800f08e:	58c0      	ldr	r0, [r0, r3]
 800f090:	a901      	add	r1, sp, #4
 800f092:	f001 f91f 	bl	80102d4 <xQueueGiveFromISR>
}
 800f096:	b002      	add	sp, #8
 800f098:	bd10      	pop	{r4, pc}
 800f09a:	46c0      	nop			; (mov r8, r8)
 800f09c:	20006e20 	.word	0x20006e20

0800f0a0 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f0a0:	b510      	push	{r4, lr}
 800f0a2:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800f0a4:	2369      	movs	r3, #105	; 0x69
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800f0aa:	f7fc ff7d 	bl	800bfa8 <GetPort>
	if (portStatus[port] == STREAM) {
 800f0ae:	4b0b      	ldr	r3, [pc, #44]	; (800f0dc <HAL_UART_ErrorCallback+0x3c>)
 800f0b0:	5c1b      	ldrb	r3, [r3, r0]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d004      	beq.n	800f0c0 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800f0b6:	3801      	subs	r0, #1
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <HAL_UART_ErrorCallback+0x40>)
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	541a      	strb	r2, [r3, r0]
	}	
}
 800f0be:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800f0c0:	3801      	subs	r0, #1
 800f0c2:	0080      	lsls	r0, r0, #2
 800f0c4:	4b07      	ldr	r3, [pc, #28]	; (800f0e4 <HAL_UART_ErrorCallback+0x44>)
 800f0c6:	58c3      	ldr	r3, [r0, r3]
 800f0c8:	6819      	ldr	r1, [r3, #0]
 800f0ca:	3128      	adds	r1, #40	; 0x28
 800f0cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	b292      	uxth	r2, r2
 800f0d4:	0020      	movs	r0, r4
 800f0d6:	f005 f9ed 	bl	80144b4 <HAL_UART_Receive_DMA>
 800f0da:	e7f0      	b.n	800f0be <HAL_UART_ErrorCallback+0x1e>
 800f0dc:	200010e0 	.word	0x200010e0
 800f0e0:	200012b0 	.word	0x200012b0
 800f0e4:	2000144c 	.word	0x2000144c

0800f0e8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800f0ec:	f7fc ff5c 	bl	800bfa8 <GetPort>
 800f0f0:	4b12      	ldr	r3, [pc, #72]	; (800f13c <HAL_UART_RxCpltCallback+0x54>)
 800f0f2:	5c1b      	ldrb	r3, [r3, r0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d006      	beq.n	800f106 <HAL_UART_RxCpltCallback+0x1e>
 800f0f8:	0020      	movs	r0, r4
 800f0fa:	f7fc ff55 	bl	800bfa8 <GetPort>
 800f0fe:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <HAL_UART_RxCpltCallback+0x54>)
 800f100:	5c1b      	ldrb	r3, [r3, r0]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d118      	bne.n	800f138 <HAL_UART_RxCpltCallback+0x50>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800f106:	0020      	movs	r0, r4
 800f108:	f7fc ff4e 	bl	800bfa8 <GetPort>
 800f10c:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <HAL_UART_RxCpltCallback+0x58>)
 800f10e:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800f110:	0020      	movs	r0, r4
 800f112:	f7fc ff49 	bl	800bfa8 <GetPort>
 800f116:	4b09      	ldr	r3, [pc, #36]	; (800f13c <HAL_UART_RxCpltCallback+0x54>)
 800f118:	2205      	movs	r2, #5
 800f11a:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800f11c:	0020      	movs	r0, r4
 800f11e:	f7fc ff43 	bl	800bfa8 <GetPort>
 800f122:	3801      	subs	r0, #1
 800f124:	4b07      	ldr	r3, [pc, #28]	; (800f144 <HAL_UART_RxCpltCallback+0x5c>)
 800f126:	2200      	movs	r2, #0
 800f128:	541a      	strb	r2, [r3, r0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800f12a:	0020      	movs	r0, r4
 800f12c:	f7fc ff3c 	bl	800bfa8 <GetPort>
 800f130:	3801      	subs	r0, #1
 800f132:	4b05      	ldr	r3, [pc, #20]	; (800f148 <HAL_UART_RxCpltCallback+0x60>)
 800f134:	2201      	movs	r2, #1
 800f136:	541a      	strb	r2, [r3, r0]
	}

}
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	46c0      	nop			; (mov r8, r8)
 800f13c:	200010e0 	.word	0x200010e0
 800f140:	20006da0 	.word	0x20006da0
 800f144:	200013f8 	.word	0x200013f8
 800f148:	200012b0 	.word	0x200012b0

0800f14c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800f14c:	b672      	cpsid	i
 800f14e:	e7fe      	b.n	800f14e <vApplicationStackOverflowHook+0x2>

0800f150 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800f150:	b672      	cpsid	i
 800f152:	e7fe      	b.n	800f152 <vApplicationMallocFailedHook+0x2>

0800f154 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800f154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f156:	46d6      	mov	lr, sl
 800f158:	464f      	mov	r7, r9
 800f15a:	4646      	mov	r6, r8
 800f15c:	b5c0      	push	{r6, r7, lr}
 800f15e:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800f160:	ac03      	add	r4, sp, #12
 800f162:	4b37      	ldr	r3, [pc, #220]	; (800f240 <RTC_CalendarConfig+0xec>)
 800f164:	0022      	movs	r2, r4
 800f166:	cb43      	ldmia	r3!, {r0, r1, r6}
 800f168:	c243      	stmia	r2!, {r0, r1, r6}
 800f16a:	466b      	mov	r3, sp
 800f16c:	4a35      	ldr	r2, [pc, #212]	; (800f244 <RTC_CalendarConfig+0xf0>)
 800f16e:	ca03      	ldmia	r2!, {r0, r1}
 800f170:	c303      	stmia	r3!, {r0, r1}
 800f172:	0019      	movs	r1, r3
 800f174:	7813      	ldrb	r3, [r2, #0]
 800f176:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800f178:	2015      	movs	r0, #21
 800f17a:	4468      	add	r0, sp
 800f17c:	f005 fe3d 	bl	8014dfa <atoi>
 800f180:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	4698      	mov	r8, r3
 800f186:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800f188:	a804      	add	r0, sp, #16
 800f18a:	f005 fe36 	bl	8014dfa <atoi>
 800f18e:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800f190:	4643      	mov	r3, r8
 800f192:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800f194:	2400      	movs	r4, #0
 800f196:	e001      	b.n	800f19c <RTC_CalendarConfig+0x48>
 800f198:	3401      	adds	r4, #1
 800f19a:	b2e4      	uxtb	r4, r4
 800f19c:	2c0b      	cmp	r4, #11
 800f19e:	d80a      	bhi.n	800f1b6 <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800f1a0:	00a3      	lsls	r3, r4, #2
 800f1a2:	4a29      	ldr	r2, [pc, #164]	; (800f248 <RTC_CalendarConfig+0xf4>)
 800f1a4:	5899      	ldr	r1, [r3, r2]
 800f1a6:	a803      	add	r0, sp, #12
 800f1a8:	f7f0 ffac 	bl	8000104 <strcmp>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1f3      	bne.n	800f198 <RTC_CalendarConfig+0x44>
			month = i + 1;
 800f1b0:	1c65      	adds	r5, r4, #1
 800f1b2:	b2ed      	uxtb	r5, r5
 800f1b4:	e7f0      	b.n	800f198 <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800f1b6:	466b      	mov	r3, sp
 800f1b8:	1d98      	adds	r0, r3, #6
 800f1ba:	f005 fe1e 	bl	8014dfa <atoi>
 800f1be:	b2c3      	uxtb	r3, r0
 800f1c0:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800f1c2:	ac03      	add	r4, sp, #12
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	469a      	mov	sl, r3
 800f1c8:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800f1ca:	466b      	mov	r3, sp
 800f1cc:	1cd8      	adds	r0, r3, #3
 800f1ce:	f005 fe14 	bl	8014dfa <atoi>
 800f1d2:	b2c3      	uxtb	r3, r0
 800f1d4:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800f1d6:	4653      	mov	r3, sl
 800f1d8:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800f1da:	4668      	mov	r0, sp
 800f1dc:	f005 fe0d 	bl	8014dfa <atoi>
 800f1e0:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800f1e2:	a90b      	add	r1, sp, #44	; 0x2c
 800f1e4:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800f1e6:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800f1e8:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	4816      	ldr	r0, [pc, #88]	; (800f24c <RTC_CalendarConfig+0xf8>)
 800f1f2:	f004 fed7 	bl	8013fa4 <HAL_RTC_SetDate>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d119      	bne.n	800f22e <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f1fa:	a906      	add	r1, sp, #24
 800f1fc:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800f1fe:	464b      	mov	r3, r9
 800f200:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800f202:	4643      	mov	r3, r8
 800f204:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800f206:	2300      	movs	r3, #0
 800f208:	720b      	strb	r3, [r1, #8]
 800f20a:	4a11      	ldr	r2, [pc, #68]	; (800f250 <RTC_CalendarConfig+0xfc>)
 800f20c:	3018      	adds	r0, #24
 800f20e:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f210:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f212:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f214:	2200      	movs	r2, #0
 800f216:	480d      	ldr	r0, [pc, #52]	; (800f24c <RTC_CalendarConfig+0xf8>)
 800f218:	f004 fe46 	bl	8013ea8 <HAL_RTC_SetTime>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d10d      	bne.n	800f23c <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f220:	4a0c      	ldr	r2, [pc, #48]	; (800f254 <RTC_CalendarConfig+0x100>)
 800f222:	2101      	movs	r1, #1
 800f224:	4809      	ldr	r0, [pc, #36]	; (800f24c <RTC_CalendarConfig+0xf8>)
 800f226:	f004 ff7f 	bl	8014128 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f22a:	2000      	movs	r0, #0
 800f22c:	e000      	b.n	800f230 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800f22e:	20ff      	movs	r0, #255	; 0xff
}
 800f230:	b00c      	add	sp, #48	; 0x30
 800f232:	bc1c      	pop	{r2, r3, r4}
 800f234:	4690      	mov	r8, r2
 800f236:	4699      	mov	r9, r3
 800f238:	46a2      	mov	sl, r4
 800f23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800f23c:	20ff      	movs	r0, #255	; 0xff
 800f23e:	e7f7      	b.n	800f230 <RTC_CalendarConfig+0xdc>
 800f240:	08019d10 	.word	0x08019d10
 800f244:	08019d34 	.word	0x08019d34
 800f248:	20000020 	.word	0x20000020
 800f24c:	200071a0 	.word	0x200071a0
 800f250:	20006da0 	.word	0x20006da0
 800f254:	000032f2 	.word	0x000032f2

0800f258 <RTC_Init>:
{
 800f258:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800f25a:	4a1c      	ldr	r2, [pc, #112]	; (800f2cc <RTC_Init+0x74>)
 800f25c:	6a11      	ldr	r1, [r2, #32]
 800f25e:	2380      	movs	r3, #128	; 0x80
 800f260:	021b      	lsls	r3, r3, #8
 800f262:	430b      	orrs	r3, r1
 800f264:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800f266:	481a      	ldr	r0, [pc, #104]	; (800f2d0 <RTC_Init+0x78>)
 800f268:	4b1a      	ldr	r3, [pc, #104]	; (800f2d4 <RTC_Init+0x7c>)
 800f26a:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800f26c:	2300      	movs	r3, #0
 800f26e:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800f270:	227c      	movs	r2, #124	; 0x7c
 800f272:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800f274:	4a18      	ldr	r2, [pc, #96]	; (800f2d8 <RTC_Init+0x80>)
 800f276:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f278:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f27a:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f27c:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f27e:	f004 fdb7 	bl	8013df0 <HAL_RTC_Init>
 800f282:	2800      	cmp	r0, #0
 800f284:	d11f      	bne.n	800f2c6 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800f286:	2101      	movs	r1, #1
 800f288:	4811      	ldr	r0, [pc, #68]	; (800f2d0 <RTC_Init+0x78>)
 800f28a:	f004 ff53 	bl	8014134 <HAL_RTCEx_BKUPRead>
 800f28e:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <RTC_Init+0x84>)
 800f290:	4298      	cmp	r0, r3
 800f292:	d10e      	bne.n	800f2b2 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800f294:	4b0d      	ldr	r3, [pc, #52]	; (800f2cc <RTC_Init+0x74>)
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	011b      	lsls	r3, r3, #4
 800f29a:	d502      	bpl.n	800f2a2 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <RTC_Init+0x88>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800f2a2:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <RTC_Init+0x74>)
 800f2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a6:	015b      	lsls	r3, r3, #5
 800f2a8:	d505      	bpl.n	800f2b6 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800f2aa:	4b0d      	ldr	r3, [pc, #52]	; (800f2e0 <RTC_Init+0x88>)
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	701a      	strb	r2, [r3, #0]
 800f2b0:	e001      	b.n	800f2b6 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800f2b2:	f7ff ff4f 	bl	800f154 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800f2b6:	4a05      	ldr	r2, [pc, #20]	; (800f2cc <RTC_Init+0x74>)
 800f2b8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f2ba:	2380      	movs	r3, #128	; 0x80
 800f2bc:	045b      	lsls	r3, r3, #17
 800f2be:	430b      	orrs	r3, r1
 800f2c0:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800f2c2:	2000      	movs	r0, #0
}
 800f2c4:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f2c6:	20ff      	movs	r0, #255	; 0xff
 800f2c8:	e7fc      	b.n	800f2c4 <RTC_Init+0x6c>
 800f2ca:	46c0      	nop			; (mov r8, r8)
 800f2cc:	40021000 	.word	0x40021000
 800f2d0:	200071a0 	.word	0x200071a0
 800f2d4:	40002800 	.word	0x40002800
 800f2d8:	000007cf 	.word	0x000007cf
 800f2dc:	000032f2 	.word	0x000032f2
 800f2e0:	20001ec0 	.word	0x20001ec0

0800f2e4 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e6:	46c6      	mov	lr, r8
 800f2e8:	b500      	push	{lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	ac0c      	add	r4, sp, #48	; 0x30
 800f2ee:	7827      	ldrb	r7, [r4, #0]
 800f2f0:	ac0d      	add	r4, sp, #52	; 0x34
 800f2f2:	7824      	ldrb	r4, [r4, #0]
 800f2f4:	46a0      	mov	r8, r4
 800f2f6:	ac0e      	add	r4, sp, #56	; 0x38
 800f2f8:	7825      	ldrb	r5, [r4, #0]
 800f2fa:	ac0f      	add	r4, sp, #60	; 0x3c
 800f2fc:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800f2fe:	3230      	adds	r2, #48	; 0x30
 800f300:	ac05      	add	r4, sp, #20
 800f302:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800f304:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800f306:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800f308:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f30a:	2200      	movs	r2, #0
 800f30c:	0021      	movs	r1, r4
 800f30e:	481f      	ldr	r0, [pc, #124]	; (800f38c <BOS_CalendarConfig+0xa8>)
 800f310:	f004 fe48 	bl	8013fa4 <HAL_RTC_SetDate>
 800f314:	2800      	cmp	r0, #0
 800f316:	d134      	bne.n	800f382 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f318:	466b      	mov	r3, sp
 800f31a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800f31c:	4642      	mov	r2, r8
 800f31e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800f320:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800f322:	2300      	movs	r3, #0
 800f324:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800f326:	2e01      	cmp	r6, #1
 800f328:	d01e      	beq.n	800f368 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800f32a:	2e02      	cmp	r6, #2
 800f32c:	d022      	beq.n	800f374 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800f32e:	4b18      	ldr	r3, [pc, #96]	; (800f390 <BOS_CalendarConfig+0xac>)
 800f330:	2218      	movs	r2, #24
 800f332:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f334:	2200      	movs	r2, #0
 800f336:	4669      	mov	r1, sp
 800f338:	4814      	ldr	r0, [pc, #80]	; (800f38c <BOS_CalendarConfig+0xa8>)
 800f33a:	f004 fdb5 	bl	8013ea8 <HAL_RTC_SetTime>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d121      	bne.n	800f386 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800f342:	4a13      	ldr	r2, [pc, #76]	; (800f390 <BOS_CalendarConfig+0xac>)
 800f344:	7b53      	ldrb	r3, [r2, #13]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	7911      	ldrb	r1, [r2, #4]
 800f34a:	4319      	orrs	r1, r3
 800f34c:	308d      	adds	r0, #141	; 0x8d
 800f34e:	0040      	lsls	r0, r0, #1
 800f350:	f7f8 fd0e 	bl	8007d70 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f354:	4a0f      	ldr	r2, [pc, #60]	; (800f394 <BOS_CalendarConfig+0xb0>)
 800f356:	2101      	movs	r1, #1
 800f358:	480c      	ldr	r0, [pc, #48]	; (800f38c <BOS_CalendarConfig+0xa8>)
 800f35a:	f004 fee5 	bl	8014128 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f35e:	2000      	movs	r0, #0
}
 800f360:	b006      	add	sp, #24
 800f362:	bc04      	pop	{r2}
 800f364:	4690      	mov	r8, r2
 800f366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800f368:	466a      	mov	r2, sp
 800f36a:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f36c:	4b08      	ldr	r3, [pc, #32]	; (800f390 <BOS_CalendarConfig+0xac>)
 800f36e:	220c      	movs	r2, #12
 800f370:	735a      	strb	r2, [r3, #13]
 800f372:	e7df      	b.n	800f334 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800f374:	2340      	movs	r3, #64	; 0x40
 800f376:	466a      	mov	r2, sp
 800f378:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <BOS_CalendarConfig+0xac>)
 800f37c:	220c      	movs	r2, #12
 800f37e:	735a      	strb	r2, [r3, #13]
 800f380:	e7d8      	b.n	800f334 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800f382:	20ff      	movs	r0, #255	; 0xff
 800f384:	e7ec      	b.n	800f360 <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800f386:	20ff      	movs	r0, #255	; 0xff
 800f388:	e7ea      	b.n	800f360 <BOS_CalendarConfig+0x7c>
 800f38a:	46c0      	nop			; (mov r8, r8)
 800f38c:	200071a0 	.word	0x200071a0
 800f390:	20006da0 	.word	0x20006da0
 800f394:	000032f2 	.word	0x000032f2

0800f398 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800f398:	b530      	push	{r4, r5, lr}
 800f39a:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800f39c:	4d16      	ldr	r5, [pc, #88]	; (800f3f8 <GetTimeDate+0x60>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	a902      	add	r1, sp, #8
 800f3a2:	0028      	movs	r0, r5
 800f3a4:	f004 fe74 	bl	8014090 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800f3a8:	ac07      	add	r4, sp, #28
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	0021      	movs	r1, r4
 800f3ae:	0028      	movs	r0, r5
 800f3b0:	f004 fe96 	bl	80140e0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800f3b4:	ab02      	add	r3, sp, #8
 800f3b6:	7a1a      	ldrb	r2, [r3, #8]
 800f3b8:	09d2      	lsrs	r2, r2, #7
 800f3ba:	3201      	adds	r2, #1
 800f3bc:	4b0f      	ldr	r3, [pc, #60]	; (800f3fc <GetTimeDate+0x64>)
 800f3be:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800f3c0:	9a03      	ldr	r2, [sp, #12]
 800f3c2:	9201      	str	r2, [sp, #4]
 800f3c4:	0852      	lsrs	r2, r2, #1
 800f3c6:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800f3c8:	aa02      	add	r2, sp, #8
 800f3ca:	7892      	ldrb	r2, [r2, #2]
 800f3cc:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800f3ce:	aa02      	add	r2, sp, #8
 800f3d0:	7852      	ldrb	r2, [r2, #1]
 800f3d2:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800f3d4:	aa02      	add	r2, sp, #8
 800f3d6:	7812      	ldrb	r2, [r2, #0]
 800f3d8:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800f3da:	78a2      	ldrb	r2, [r4, #2]
 800f3dc:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800f3de:	7862      	ldrb	r2, [r4, #1]
 800f3e0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800f3e2:	7822      	ldrb	r2, [r4, #0]
 800f3e4:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800f3e6:	78e2      	ldrb	r2, [r4, #3]
 800f3e8:	21fa      	movs	r1, #250	; 0xfa
 800f3ea:	00c9      	lsls	r1, r1, #3
 800f3ec:	468c      	mov	ip, r1
 800f3ee:	4462      	add	r2, ip
 800f3f0:	831a      	strh	r2, [r3, #24]
}
 800f3f2:	b009      	add	sp, #36	; 0x24
 800f3f4:	bd30      	pop	{r4, r5, pc}
 800f3f6:	46c0      	nop			; (mov r8, r8)
 800f3f8:	200071a0 	.word	0x200071a0
 800f3fc:	20006da0 	.word	0x20006da0

0800f400 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800f400:	b530      	push	{r4, r5, lr}
 800f402:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800f404:	4a12      	ldr	r2, [pc, #72]	; (800f450 <TIM_USEC_Init+0x50>)
 800f406:	69d1      	ldr	r1, [r2, #28]
 800f408:	2080      	movs	r0, #128	; 0x80
 800f40a:	0040      	lsls	r0, r0, #1
 800f40c:	4301      	orrs	r1, r0
 800f40e:	61d1      	str	r1, [r2, #28]
 800f410:	69d3      	ldr	r3, [r2, #28]
 800f412:	4003      	ands	r3, r0
 800f414:	9301      	str	r3, [sp, #4]
 800f416:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800f418:	4c0e      	ldr	r4, [pc, #56]	; (800f454 <TIM_USEC_Init+0x54>)
 800f41a:	4b0f      	ldr	r3, [pc, #60]	; (800f458 <TIM_USEC_Init+0x58>)
 800f41c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800f41e:	f004 fc07 	bl	8013c30 <HAL_RCC_GetPCLK1Freq>
 800f422:	490e      	ldr	r1, [pc, #56]	; (800f45c <TIM_USEC_Init+0x5c>)
 800f424:	f7f0 fe94 	bl	8000150 <__udivsi3>
 800f428:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f42a:	2500      	movs	r5, #0
 800f42c:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800f42e:	4b0c      	ldr	r3, [pc, #48]	; (800f460 <TIM_USEC_Init+0x60>)
 800f430:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800f432:	0020      	movs	r0, r4
 800f434:	f004 fee0 	bl	80141f8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f438:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f43a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800f43c:	a902      	add	r1, sp, #8
 800f43e:	0020      	movs	r0, r4
 800f440:	f004 fef4 	bl	801422c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800f444:	0020      	movs	r0, r4
 800f446:	f004 fe7c 	bl	8014142 <HAL_TIM_Base_Start>
}
 800f44a:	b005      	add	sp, #20
 800f44c:	bd30      	pop	{r4, r5, pc}
 800f44e:	46c0      	nop			; (mov r8, r8)
 800f450:	40021000 	.word	0x40021000
 800f454:	200071fc 	.word	0x200071fc
 800f458:	40002000 	.word	0x40002000
 800f45c:	000f4240 	.word	0x000f4240
 800f460:	0000ffff 	.word	0x0000ffff

0800f464 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800f464:	b530      	push	{r4, r5, lr}
 800f466:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800f468:	4a12      	ldr	r2, [pc, #72]	; (800f4b4 <TIM_MSEC_Init+0x50>)
 800f46a:	6991      	ldr	r1, [r2, #24]
 800f46c:	2080      	movs	r0, #128	; 0x80
 800f46e:	0240      	lsls	r0, r0, #9
 800f470:	4301      	orrs	r1, r0
 800f472:	6191      	str	r1, [r2, #24]
 800f474:	6993      	ldr	r3, [r2, #24]
 800f476:	4003      	ands	r3, r0
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800f47c:	4c0e      	ldr	r4, [pc, #56]	; (800f4b8 <TIM_MSEC_Init+0x54>)
 800f47e:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <TIM_MSEC_Init+0x58>)
 800f480:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800f482:	f004 fbd5 	bl	8013c30 <HAL_RCC_GetPCLK1Freq>
 800f486:	21fa      	movs	r1, #250	; 0xfa
 800f488:	0089      	lsls	r1, r1, #2
 800f48a:	f7f0 fe61 	bl	8000150 <__udivsi3>
 800f48e:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f490:	2500      	movs	r5, #0
 800f492:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800f494:	4b0a      	ldr	r3, [pc, #40]	; (800f4c0 <TIM_MSEC_Init+0x5c>)
 800f496:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800f498:	0020      	movs	r0, r4
 800f49a:	f004 fead 	bl	80141f8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f49e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f4a0:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800f4a2:	a902      	add	r1, sp, #8
 800f4a4:	0020      	movs	r0, r4
 800f4a6:	f004 fec1 	bl	801422c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800f4aa:	0020      	movs	r0, r4
 800f4ac:	f004 fe49 	bl	8014142 <HAL_TIM_Base_Start>
}
 800f4b0:	b005      	add	sp, #20
 800f4b2:	bd30      	pop	{r4, r5, pc}
 800f4b4:	40021000 	.word	0x40021000
 800f4b8:	200071c0 	.word	0x200071c0
 800f4bc:	40014000 	.word	0x40014000
 800f4c0:	0000ffff 	.word	0x0000ffff

0800f4c4 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800f4c8:	f002 f9ea 	bl	80118a0 <vPortEnterCritical>
	
	if (Delay)
 800f4cc:	2c00      	cmp	r4, #0
 800f4ce:	d006      	beq.n	800f4de <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800f4d0:	4b04      	ldr	r3, [pc, #16]	; (800f4e4 <StartMicroDelay+0x20>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800f4d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f4d8:	1a5b      	subs	r3, r3, r1
 800f4da:	42a3      	cmp	r3, r4
 800f4dc:	d9fb      	bls.n	800f4d6 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f4de:	f002 f9eb 	bl	80118b8 <vPortExitCritical>
}
 800f4e2:	bd10      	pop	{r4, pc}
 800f4e4:	200071fc 	.word	0x200071fc

0800f4e8 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800f4e8:	b510      	push	{r4, lr}
 800f4ea:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800f4ec:	f002 f9d8 	bl	80118a0 <vPortEnterCritical>
	
	if (Delay)
 800f4f0:	2c00      	cmp	r4, #0
 800f4f2:	d006      	beq.n	800f502 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800f4f4:	4b04      	ldr	r3, [pc, #16]	; (800f508 <StartMilliDelay+0x20>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800f4fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f4fc:	1a5b      	subs	r3, r3, r1
 800f4fe:	42a3      	cmp	r3, r4
 800f500:	d9fb      	bls.n	800f4fa <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f502:	f002 f9d9 	bl	80118b8 <vPortExitCritical>
}
 800f506:	bd10      	pop	{r4, pc}
 800f508:	200071c0 	.word	0x200071c0

0800f50c <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800f50c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800f50e:	4809      	ldr	r0, [pc, #36]	; (800f534 <MX_USART2_UART_Init+0x28>)
 800f510:	4b09      	ldr	r3, [pc, #36]	; (800f538 <MX_USART2_UART_Init+0x2c>)
 800f512:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f514:	23e1      	movs	r3, #225	; 0xe1
 800f516:	031b      	lsls	r3, r3, #12
 800f518:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f51a:	2300      	movs	r3, #0
 800f51c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f51e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f520:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f522:	220c      	movs	r2, #12
 800f524:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f526:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f528:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f52a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f52c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800f52e:	f005 fb03 	bl	8014b38 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800f532:	bd10      	pop	{r4, pc}
 800f534:	20007104 	.word	0x20007104
 800f538:	40004400 	.word	0x40004400

0800f53c <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800f53c:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800f53e:	4809      	ldr	r0, [pc, #36]	; (800f564 <MX_USART3_UART_Init+0x28>)
 800f540:	4b09      	ldr	r3, [pc, #36]	; (800f568 <MX_USART3_UART_Init+0x2c>)
 800f542:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f544:	23e1      	movs	r3, #225	; 0xe1
 800f546:	031b      	lsls	r3, r3, #12
 800f548:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f54a:	2300      	movs	r3, #0
 800f54c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f54e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f550:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f552:	220c      	movs	r2, #12
 800f554:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f556:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f558:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f55a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f55c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800f55e:	f005 faeb 	bl	8014b38 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800f562:	bd10      	pop	{r4, pc}
 800f564:	20006ec4 	.word	0x20006ec4
 800f568:	40004800 	.word	0x40004800

0800f56c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800f56c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800f56e:	4809      	ldr	r0, [pc, #36]	; (800f594 <MX_USART4_UART_Init+0x28>)
 800f570:	4b09      	ldr	r3, [pc, #36]	; (800f598 <MX_USART4_UART_Init+0x2c>)
 800f572:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f574:	23e1      	movs	r3, #225	; 0xe1
 800f576:	031b      	lsls	r3, r3, #12
 800f578:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f57a:	2300      	movs	r3, #0
 800f57c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f57e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f580:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f582:	220c      	movs	r2, #12
 800f584:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f586:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f588:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f58a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f58c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800f58e:	f005 fad3 	bl	8014b38 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800f592:	bd10      	pop	{r4, pc}
 800f594:	20007090 	.word	0x20007090
 800f598:	40004c00 	.word	0x40004c00

0800f59c <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800f59c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800f59e:	4809      	ldr	r0, [pc, #36]	; (800f5c4 <MX_USART5_UART_Init+0x28>)
 800f5a0:	4b09      	ldr	r3, [pc, #36]	; (800f5c8 <MX_USART5_UART_Init+0x2c>)
 800f5a2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f5a4:	23e1      	movs	r3, #225	; 0xe1
 800f5a6:	031b      	lsls	r3, r3, #12
 800f5a8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800f5ae:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800f5b0:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800f5b2:	220c      	movs	r2, #12
 800f5b4:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f5b6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800f5b8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f5ba:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f5bc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800f5be:	f005 fabb 	bl	8014b38 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800f5c2:	bd10      	pop	{r4, pc}
 800f5c4:	20006f38 	.word	0x20006f38
 800f5c8:	40005000 	.word	0x40005000

0800f5cc <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800f5cc:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800f5ce:	4809      	ldr	r0, [pc, #36]	; (800f5f4 <MX_USART6_UART_Init+0x28>)
 800f5d0:	4b09      	ldr	r3, [pc, #36]	; (800f5f8 <MX_USART6_UART_Init+0x2c>)
 800f5d2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f5d4:	23e1      	movs	r3, #225	; 0xe1
 800f5d6:	031b      	lsls	r3, r3, #12
 800f5d8:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800f5de:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800f5e0:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800f5e2:	220c      	movs	r2, #12
 800f5e4:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f5e6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800f5e8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f5ea:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f5ec:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800f5ee:	f005 faa3 	bl	8014b38 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800f5f2:	bd10      	pop	{r4, pc}
 800f5f4:	20007020 	.word	0x20007020
 800f5f8:	40011400 	.word	0x40011400

0800f5fc <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fe:	46ce      	mov	lr, r9
 800f600:	b500      	push	{lr}
 800f602:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800f604:	6803      	ldr	r3, [r0, #0]
 800f606:	4a7a      	ldr	r2, [pc, #488]	; (800f7f0 <HAL_UART_MspInit+0x1f4>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d010      	beq.n	800f62e <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800f60c:	4a79      	ldr	r2, [pc, #484]	; (800f7f4 <HAL_UART_MspInit+0x1f8>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d011      	beq.n	800f636 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800f612:	4a79      	ldr	r2, [pc, #484]	; (800f7f8 <HAL_UART_MspInit+0x1fc>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d03a      	beq.n	800f68e <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800f618:	4a78      	ldr	r2, [pc, #480]	; (800f7fc <HAL_UART_MspInit+0x200>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d064      	beq.n	800f6e8 <HAL_UART_MspInit+0xec>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800f61e:	4a78      	ldr	r2, [pc, #480]	; (800f800 <HAL_UART_MspInit+0x204>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d100      	bne.n	800f626 <HAL_UART_MspInit+0x2a>
 800f624:	e08b      	b.n	800f73e <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800f626:	4a77      	ldr	r2, [pc, #476]	; (800f804 <HAL_UART_MspInit+0x208>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d100      	bne.n	800f62e <HAL_UART_MspInit+0x32>
 800f62c:	e0b2      	b.n	800f794 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800f62e:	b00a      	add	sp, #40	; 0x28
 800f630:	bc04      	pop	{r2}
 800f632:	4691      	mov	r9, r2
 800f634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800f636:	4a74      	ldr	r2, [pc, #464]	; (800f808 <HAL_UART_MspInit+0x20c>)
 800f638:	69d1      	ldr	r1, [r2, #28]
 800f63a:	2080      	movs	r0, #128	; 0x80
 800f63c:	0280      	lsls	r0, r0, #10
 800f63e:	4301      	orrs	r1, r0
 800f640:	61d1      	str	r1, [r2, #28]
 800f642:	69d3      	ldr	r3, [r2, #28]
 800f644:	4003      	ands	r3, r0
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800f64a:	2304      	movs	r3, #4
 800f64c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f64e:	2702      	movs	r7, #2
 800f650:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f652:	2401      	movs	r4, #1
 800f654:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f656:	2603      	movs	r6, #3
 800f658:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800f65a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800f65c:	2590      	movs	r5, #144	; 0x90
 800f65e:	05ed      	lsls	r5, r5, #23
 800f660:	a905      	add	r1, sp, #20
 800f662:	0028      	movs	r0, r5
 800f664:	f003 fd56 	bl	8013114 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800f668:	2308      	movs	r3, #8
 800f66a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f66c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f66e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f670:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800f672:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800f674:	a905      	add	r1, sp, #20
 800f676:	0028      	movs	r0, r5
 800f678:	f003 fd4c 	bl	8013114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800f67c:	2200      	movs	r2, #0
 800f67e:	2101      	movs	r1, #1
 800f680:	201c      	movs	r0, #28
 800f682:	f002 fdcf 	bl	8012224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f686:	201c      	movs	r0, #28
 800f688:	f002 fdfc 	bl	8012284 <HAL_NVIC_EnableIRQ>
 800f68c:	e7cf      	b.n	800f62e <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800f68e:	4a5e      	ldr	r2, [pc, #376]	; (800f808 <HAL_UART_MspInit+0x20c>)
 800f690:	69d1      	ldr	r1, [r2, #28]
 800f692:	2080      	movs	r0, #128	; 0x80
 800f694:	02c0      	lsls	r0, r0, #11
 800f696:	4301      	orrs	r1, r0
 800f698:	61d1      	str	r1, [r2, #28]
 800f69a:	69d3      	ldr	r3, [r2, #28]
 800f69c:	4003      	ands	r3, r0
 800f69e:	9301      	str	r3, [sp, #4]
 800f6a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800f6a2:	2380      	movs	r3, #128	; 0x80
 800f6a4:	00db      	lsls	r3, r3, #3
 800f6a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6a8:	2402      	movs	r4, #2
 800f6aa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6ac:	2701      	movs	r7, #1
 800f6ae:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f6b0:	2603      	movs	r6, #3
 800f6b2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800f6b4:	2504      	movs	r5, #4
 800f6b6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800f6b8:	a905      	add	r1, sp, #20
 800f6ba:	4854      	ldr	r0, [pc, #336]	; (800f80c <HAL_UART_MspInit+0x210>)
 800f6bc:	f003 fd2a 	bl	8013114 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800f6c0:	2380      	movs	r3, #128	; 0x80
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6c6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6c8:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f6ca:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800f6cc:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800f6ce:	a905      	add	r1, sp, #20
 800f6d0:	484e      	ldr	r0, [pc, #312]	; (800f80c <HAL_UART_MspInit+0x210>)
 800f6d2:	f003 fd1f 	bl	8013114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2101      	movs	r1, #1
 800f6da:	201d      	movs	r0, #29
 800f6dc:	f002 fda2 	bl	8012224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f6e0:	201d      	movs	r0, #29
 800f6e2:	f002 fdcf 	bl	8012284 <HAL_NVIC_EnableIRQ>
 800f6e6:	e7a2      	b.n	800f62e <HAL_UART_MspInit+0x32>
    __USART4_CLK_ENABLE();
 800f6e8:	4a47      	ldr	r2, [pc, #284]	; (800f808 <HAL_UART_MspInit+0x20c>)
 800f6ea:	69d1      	ldr	r1, [r2, #28]
 800f6ec:	2080      	movs	r0, #128	; 0x80
 800f6ee:	0300      	lsls	r0, r0, #12
 800f6f0:	4301      	orrs	r1, r0
 800f6f2:	61d1      	str	r1, [r2, #28]
 800f6f4:	69d3      	ldr	r3, [r2, #28]
 800f6f6:	4003      	ands	r3, r0
 800f6f8:	9302      	str	r3, [sp, #8]
 800f6fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800f6fc:	2401      	movs	r4, #1
 800f6fe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f700:	2502      	movs	r5, #2
 800f702:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f704:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f706:	2603      	movs	r6, #3
 800f708:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800f70a:	2704      	movs	r7, #4
 800f70c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800f70e:	a905      	add	r1, sp, #20
 800f710:	2090      	movs	r0, #144	; 0x90
 800f712:	05c0      	lsls	r0, r0, #23
 800f714:	f003 fcfe 	bl	8013114 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800f718:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f71a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f71c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f71e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800f720:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800f722:	a905      	add	r1, sp, #20
 800f724:	2090      	movs	r0, #144	; 0x90
 800f726:	05c0      	lsls	r0, r0, #23
 800f728:	f003 fcf4 	bl	8013114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f72c:	2200      	movs	r2, #0
 800f72e:	2101      	movs	r1, #1
 800f730:	201d      	movs	r0, #29
 800f732:	f002 fd77 	bl	8012224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f736:	201d      	movs	r0, #29
 800f738:	f002 fda4 	bl	8012284 <HAL_NVIC_EnableIRQ>
 800f73c:	e777      	b.n	800f62e <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800f73e:	4a32      	ldr	r2, [pc, #200]	; (800f808 <HAL_UART_MspInit+0x20c>)
 800f740:	69d1      	ldr	r1, [r2, #28]
 800f742:	2080      	movs	r0, #128	; 0x80
 800f744:	0340      	lsls	r0, r0, #13
 800f746:	4301      	orrs	r1, r0
 800f748:	61d1      	str	r1, [r2, #28]
 800f74a:	69d3      	ldr	r3, [r2, #28]
 800f74c:	4003      	ands	r3, r0
 800f74e:	9303      	str	r3, [sp, #12]
 800f750:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800f752:	2308      	movs	r3, #8
 800f754:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f756:	2402      	movs	r4, #2
 800f758:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f75a:	2701      	movs	r7, #1
 800f75c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f75e:	2603      	movs	r6, #3
 800f760:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800f762:	2504      	movs	r5, #4
 800f764:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800f766:	a905      	add	r1, sp, #20
 800f768:	4828      	ldr	r0, [pc, #160]	; (800f80c <HAL_UART_MspInit+0x210>)
 800f76a:	f003 fcd3 	bl	8013114 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800f76e:	2310      	movs	r3, #16
 800f770:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f772:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f774:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f776:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800f778:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800f77a:	a905      	add	r1, sp, #20
 800f77c:	4823      	ldr	r0, [pc, #140]	; (800f80c <HAL_UART_MspInit+0x210>)
 800f77e:	f003 fcc9 	bl	8013114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f782:	2200      	movs	r2, #0
 800f784:	2101      	movs	r1, #1
 800f786:	201d      	movs	r0, #29
 800f788:	f002 fd4c 	bl	8012224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f78c:	201d      	movs	r0, #29
 800f78e:	f002 fd79 	bl	8012284 <HAL_NVIC_EnableIRQ>
 800f792:	e74c      	b.n	800f62e <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800f794:	4b1c      	ldr	r3, [pc, #112]	; (800f808 <HAL_UART_MspInit+0x20c>)
 800f796:	699a      	ldr	r2, [r3, #24]
 800f798:	2420      	movs	r4, #32
 800f79a:	4322      	orrs	r2, r4
 800f79c:	619a      	str	r2, [r3, #24]
 800f79e:	699b      	ldr	r3, [r3, #24]
 800f7a0:	4023      	ands	r3, r4
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800f7a6:	2310      	movs	r3, #16
 800f7a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7aa:	3b0e      	subs	r3, #14
 800f7ac:	4699      	mov	r9, r3
 800f7ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f7b0:	2501      	movs	r5, #1
 800f7b2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f7b4:	2703      	movs	r7, #3
 800f7b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800f7b8:	2605      	movs	r6, #5
 800f7ba:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800f7bc:	a905      	add	r1, sp, #20
 800f7be:	2090      	movs	r0, #144	; 0x90
 800f7c0:	05c0      	lsls	r0, r0, #23
 800f7c2:	f003 fca7 	bl	8013114 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800f7c6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7c8:	464b      	mov	r3, r9
 800f7ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f7cc:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f7ce:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800f7d0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800f7d2:	a905      	add	r1, sp, #20
 800f7d4:	2090      	movs	r0, #144	; 0x90
 800f7d6:	05c0      	lsls	r0, r0, #23
 800f7d8:	f003 fc9c 	bl	8013114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f7dc:	2200      	movs	r2, #0
 800f7de:	2101      	movs	r1, #1
 800f7e0:	201d      	movs	r0, #29
 800f7e2:	f002 fd1f 	bl	8012224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f7e6:	201d      	movs	r0, #29
 800f7e8:	f002 fd4c 	bl	8012284 <HAL_NVIC_EnableIRQ>
}
 800f7ec:	e71f      	b.n	800f62e <HAL_UART_MspInit+0x32>
 800f7ee:	46c0      	nop			; (mov r8, r8)
 800f7f0:	40013800 	.word	0x40013800
 800f7f4:	40004400 	.word	0x40004400
 800f7f8:	40004800 	.word	0x40004800
 800f7fc:	40004c00 	.word	0x40004c00
 800f800:	40005000 	.word	0x40005000
 800f804:	40011400 	.word	0x40011400
 800f808:	40021000 	.word	0x40021000
 800f80c:	48000400 	.word	0x48000400

0800f810 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800f810:	2805      	cmp	r0, #5
 800f812:	d80b      	bhi.n	800f82c <GetUart+0x1c>
 800f814:	0080      	lsls	r0, r0, #2
 800f816:	4b07      	ldr	r3, [pc, #28]	; (800f834 <GetUart+0x24>)
 800f818:	581b      	ldr	r3, [r3, r0]
 800f81a:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			return P1uart;	
 800f81c:	4806      	ldr	r0, [pc, #24]	; (800f838 <GetUart+0x28>)
 800f81e:	e008      	b.n	800f832 <GetUart+0x22>
		case P2 :
			return P2uart;
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800f820:	4806      	ldr	r0, [pc, #24]	; (800f83c <GetUart+0x2c>)
 800f822:	e006      	b.n	800f832 <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800f824:	4806      	ldr	r0, [pc, #24]	; (800f840 <GetUart+0x30>)
 800f826:	e004      	b.n	800f832 <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800f828:	4806      	ldr	r0, [pc, #24]	; (800f844 <GetUart+0x34>)
 800f82a:	e002      	b.n	800f832 <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800f82c:	2000      	movs	r0, #0
 800f82e:	e000      	b.n	800f832 <GetUart+0x22>
			return P2uart;
 800f830:	4805      	ldr	r0, [pc, #20]	; (800f848 <GetUart+0x38>)
	}		
}
 800f832:	4770      	bx	lr
 800f834:	0801d080 	.word	0x0801d080
 800f838:	20007090 	.word	0x20007090
 800f83c:	20007020 	.word	0x20007020
 800f840:	20006ec4 	.word	0x20006ec4
 800f844:	20006f38 	.word	0x20006f38
 800f848:	20007104 	.word	0x20007104

0800f84c <writePxMutex>:
{
 800f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f84e:	b083      	sub	sp, #12
 800f850:	0005      	movs	r5, r0
 800f852:	9101      	str	r1, [sp, #4]
 800f854:	0017      	movs	r7, r2
 800f856:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800f858:	f7ff ffda 	bl	800f810 <GetUart>
 800f85c:	1e04      	subs	r4, r0, #0
 800f85e:	d01c      	beq.n	800f89a <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f860:	00ab      	lsls	r3, r5, #2
 800f862:	4a10      	ldr	r2, [pc, #64]	; (800f8a4 <writePxMutex+0x58>)
 800f864:	5898      	ldr	r0, [r3, r2]
 800f866:	0031      	movs	r1, r6
 800f868:	f000 f942 	bl	800faf0 <osSemaphoreWait>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	d101      	bne.n	800f874 <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800f870:	2601      	movs	r6, #1
 800f872:	e008      	b.n	800f886 <writePxMutex+0x3a>
 800f874:	2601      	movs	r6, #1
 800f876:	e011      	b.n	800f89c <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800f878:	9b08      	ldr	r3, [sp, #32]
 800f87a:	003a      	movs	r2, r7
 800f87c:	9901      	ldr	r1, [sp, #4]
 800f87e:	0020      	movs	r0, r4
 800f880:	f005 f8b0 	bl	80149e4 <HAL_UART_Transmit>
 800f884:	0006      	movs	r6, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800f886:	2e00      	cmp	r6, #0
 800f888:	d001      	beq.n	800f88e <writePxMutex+0x42>
 800f88a:	2e03      	cmp	r6, #3
 800f88c:	d1f4      	bne.n	800f878 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800f88e:	00ad      	lsls	r5, r5, #2
 800f890:	4b04      	ldr	r3, [pc, #16]	; (800f8a4 <writePxMutex+0x58>)
 800f892:	58e8      	ldr	r0, [r5, r3]
 800f894:	f000 f962 	bl	800fb5c <osSemaphoreRelease>
 800f898:	e000      	b.n	800f89c <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800f89a:	2601      	movs	r6, #1
}
 800f89c:	0030      	movs	r0, r6
 800f89e:	b003      	add	sp, #12
 800f8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a2:	46c0      	nop			; (mov r8, r8)
 800f8a4:	20006e20 	.word	0x20006e20

0800f8a8 <writePxITMutex>:
{
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	0004      	movs	r4, r0
 800f8ae:	9101      	str	r1, [sp, #4]
 800f8b0:	0017      	movs	r7, r2
 800f8b2:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800f8b4:	f7ff ffac 	bl	800f810 <GetUart>
 800f8b8:	1e06      	subs	r6, r0, #0
 800f8ba:	d00f      	beq.n	800f8dc <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f8bc:	00a4      	lsls	r4, r4, #2
 800f8be:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <writePxITMutex+0x3c>)
 800f8c0:	58e0      	ldr	r0, [r4, r3]
 800f8c2:	0029      	movs	r1, r5
 800f8c4:	f000 f914 	bl	800faf0 <osSemaphoreWait>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d001      	beq.n	800f8d0 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	e006      	b.n	800f8de <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800f8d0:	003a      	movs	r2, r7
 800f8d2:	9901      	ldr	r1, [sp, #4]
 800f8d4:	0030      	movs	r0, r6
 800f8d6:	f004 fcec 	bl	80142b2 <HAL_UART_Transmit_IT>
 800f8da:	e000      	b.n	800f8de <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f8dc:	2001      	movs	r0, #1
}
 800f8de:	b003      	add	sp, #12
 800f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	20006e20 	.word	0x20006e20

0800f8e8 <writePxDMAMutex>:
{
 800f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	0004      	movs	r4, r0
 800f8ee:	000f      	movs	r7, r1
 800f8f0:	9201      	str	r2, [sp, #4]
 800f8f2:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800f8f4:	f7ff ff8c 	bl	800f810 <GetUart>
 800f8f8:	1e05      	subs	r5, r0, #0
	if (hUart != NULL) {	
 800f8fa:	d012      	beq.n	800f922 <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f8fc:	00a4      	lsls	r4, r4, #2
 800f8fe:	4b0a      	ldr	r3, [pc, #40]	; (800f928 <writePxDMAMutex+0x40>)
 800f900:	58e0      	ldr	r0, [r4, r3]
 800f902:	0031      	movs	r1, r6
 800f904:	f000 f8f4 	bl	800faf0 <osSemaphoreWait>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d001      	beq.n	800f910 <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f90c:	2001      	movs	r0, #1
 800f90e:	e009      	b.n	800f924 <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800f910:	0028      	movs	r0, r5
 800f912:	f7ff f98d 	bl	800ec30 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800f916:	9a01      	ldr	r2, [sp, #4]
 800f918:	0039      	movs	r1, r7
 800f91a:	0028      	movs	r0, r5
 800f91c:	f004 fd78 	bl	8014410 <HAL_UART_Transmit_DMA>
 800f920:	e000      	b.n	800f924 <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f922:	2001      	movs	r0, #1
}
 800f924:	b003      	add	sp, #12
 800f926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f928:	20006e20 	.word	0x20006e20

0800f92c <UpdateBaudrate>:
{
 800f92c:	b510      	push	{r4, lr}
 800f92e:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800f930:	f7ff ff6e 	bl	800f810 <GetUart>
	huart->Init.BaudRate = baudrate;
 800f934:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800f936:	f005 f8ff 	bl	8014b38 <HAL_UART_Init>
}
 800f93a:	2000      	movs	r0, #0
 800f93c:	bd10      	pop	{r4, pc}
	...

0800f940 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800f944:	d003      	beq.n	800f94e <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800f946:	2901      	cmp	r1, #1
 800f948:	d002      	beq.n	800f950 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800f94a:	2900      	cmp	r1, #0
 800f94c:	d016      	beq.n	800f97c <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800f950:	f7fc fb2a 	bl	800bfa8 <GetPort>
 800f954:	3801      	subs	r0, #1
 800f956:	2180      	movs	r1, #128	; 0x80
 800f958:	0209      	lsls	r1, r1, #8
 800f95a:	000d      	movs	r5, r1
 800f95c:	4105      	asrs	r5, r0
 800f95e:	4b12      	ldr	r3, [pc, #72]	; (800f9a8 <SwapUartPins+0x68>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	3b01      	subs	r3, #1
 800f964:	4811      	ldr	r0, [pc, #68]	; (800f9ac <SwapUartPins+0x6c>)
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	5a1a      	ldrh	r2, [r3, r0]
 800f96a:	432a      	orrs	r2, r5
 800f96c:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800f96e:	2308      	movs	r3, #8
 800f970:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800f972:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800f974:	0020      	movs	r0, r4
 800f976:	f005 f8df 	bl	8014b38 <HAL_UART_Init>
 800f97a:	e7e8      	b.n	800f94e <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800f97c:	f7fc fb14 	bl	800bfa8 <GetPort>
 800f980:	3801      	subs	r0, #1
 800f982:	2180      	movs	r1, #128	; 0x80
 800f984:	0209      	lsls	r1, r1, #8
 800f986:	4101      	asrs	r1, r0
 800f988:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <SwapUartPins+0x68>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	3b01      	subs	r3, #1
 800f98e:	4807      	ldr	r0, [pc, #28]	; (800f9ac <SwapUartPins+0x6c>)
 800f990:	005b      	lsls	r3, r3, #1
 800f992:	5a1a      	ldrh	r2, [r3, r0]
 800f994:	438a      	bics	r2, r1
 800f996:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800f998:	2308      	movs	r3, #8
 800f99a:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800f9a0:	0020      	movs	r0, r4
 800f9a2:	f005 f8c9 	bl	8014b38 <HAL_UART_Init>
}
 800f9a6:	e7d2      	b.n	800f94e <SwapUartPins+0xe>
 800f9a8:	20001066 	.word	0x20001066
 800f9ac:	20007238 	.word	0x20007238

0800f9b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f9b0:	4816      	ldr	r0, [pc, #88]	; (800fa0c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800f9b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800f9b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800f9b6:	e003      	b.n	800f9c0 <LoopCopyDataInit>

0800f9b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800f9b8:	4b15      	ldr	r3, [pc, #84]	; (800fa10 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800f9ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800f9bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800f9be:	3104      	adds	r1, #4

0800f9c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800f9c0:	4814      	ldr	r0, [pc, #80]	; (800fa14 <LoopForever+0xc>)
  ldr r3, =_edata
 800f9c2:	4b15      	ldr	r3, [pc, #84]	; (800fa18 <LoopForever+0x10>)
  adds r2, r0, r1
 800f9c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800f9c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800f9c8:	d3f6      	bcc.n	800f9b8 <CopyDataInit>
  ldr r2, =_sbss
 800f9ca:	4a14      	ldr	r2, [pc, #80]	; (800fa1c <LoopForever+0x14>)
  b LoopFillZerobss
 800f9cc:	e002      	b.n	800f9d4 <LoopFillZerobss>

0800f9ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800f9ce:	2300      	movs	r3, #0
  str  r3, [r2]
 800f9d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f9d2:	3204      	adds	r2, #4

0800f9d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800f9d4:	4b12      	ldr	r3, [pc, #72]	; (800fa20 <LoopForever+0x18>)
  cmp r2, r3
 800f9d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800f9d8:	d3f9      	bcc.n	800f9ce <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800f9da:	4812      	ldr	r0, [pc, #72]	; (800fa24 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800f9dc:	4912      	ldr	r1, [pc, #72]	; (800fa28 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800f9de:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800f9e0:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800f9e2:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800f9e4:	d005      	beq.n	800f9f2 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800f9e6:	f000 f82b 	bl	800fa40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800f9ea:	f005 fa13 	bl	8014e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800f9ee:	f005 f9fa 	bl	8014de6 <main>

0800f9f2 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800f9f2:	480e      	ldr	r0, [pc, #56]	; (800fa2c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800f9f4:	490e      	ldr	r1, [pc, #56]	; (800fa30 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800f9f6:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800f9f8:	480e      	ldr	r0, [pc, #56]	; (800fa34 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800f9fa:	490d      	ldr	r1, [pc, #52]	; (800fa30 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800f9fc:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800f9fe:	480e      	ldr	r0, [pc, #56]	; (800fa38 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800fa00:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800fa02:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800fa04:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800fa06:	4700      	bx	r0

0800fa08 <LoopForever>:


LoopForever:
    b LoopForever
 800fa08:	e7fe      	b.n	800fa08 <LoopForever>
 800fa0a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800fa0c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800fa10:	0801d538 	.word	0x0801d538
  ldr r0, =_sdata
 800fa14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800fa18:	20000a80 	.word	0x20000a80
  ldr r2, =_sbss
 800fa1c:	20000a80 	.word	0x20000a80
  ldr r3, = _ebss
 800fa20:	200072e0 	.word	0x200072e0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800fa24:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800fa28:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800fa2c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800fa30:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800fa34:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800fa38:	1fffd800 	.word	0x1fffd800

0800fa3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800fa3c:	e7fe      	b.n	800fa3c <ADC1_COMP_IRQHandler>
	...

0800fa40 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800fa40:	4b11      	ldr	r3, [pc, #68]	; (800fa88 <SystemInit+0x48>)
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	2101      	movs	r1, #1
 800fa46:	430a      	orrs	r2, r1
 800fa48:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	480f      	ldr	r0, [pc, #60]	; (800fa8c <SystemInit+0x4c>)
 800fa4e:	4002      	ands	r2, r0
 800fa50:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	480e      	ldr	r0, [pc, #56]	; (800fa90 <SystemInit+0x50>)
 800fa56:	4002      	ands	r2, r0
 800fa58:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	480d      	ldr	r0, [pc, #52]	; (800fa94 <SystemInit+0x54>)
 800fa5e:	4002      	ands	r2, r0
 800fa60:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800fa62:	685a      	ldr	r2, [r3, #4]
 800fa64:	480c      	ldr	r0, [pc, #48]	; (800fa98 <SystemInit+0x58>)
 800fa66:	4002      	ands	r2, r0
 800fa68:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800fa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa6c:	200f      	movs	r0, #15
 800fa6e:	4382      	bics	r2, r0
 800fa70:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800fa72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa74:	4809      	ldr	r0, [pc, #36]	; (800fa9c <SystemInit+0x5c>)
 800fa76:	4002      	ands	r2, r0
 800fa78:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800fa7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa7c:	438a      	bics	r2, r1
 800fa7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fa80:	2200      	movs	r2, #0
 800fa82:	609a      	str	r2, [r3, #8]

}
 800fa84:	4770      	bx	lr
 800fa86:	46c0      	nop			; (mov r8, r8)
 800fa88:	40021000 	.word	0x40021000
 800fa8c:	08ffb80c 	.word	0x08ffb80c
 800fa90:	fef6ffff 	.word	0xfef6ffff
 800fa94:	fffbffff 	.word	0xfffbffff
 800fa98:	ffc0ffff 	.word	0xffc0ffff
 800fa9c:	fff0feac 	.word	0xfff0feac

0800faa0 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faa0:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800faa4:	1e43      	subs	r3, r0, #1
 800faa6:	4198      	sbcs	r0, r3
}
 800faa8:	4770      	bx	lr

0800faaa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800faaa:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800faac:	f000 ff86 	bl	80109bc <vTaskStartScheduler>
  
  return osOK;
}
 800fab0:	2000      	movs	r0, #0
 800fab2:	bd10      	pop	{r4, pc}

0800fab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fab4:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d100      	bne.n	800fabc <osDelay+0x8>
 800faba:	3001      	adds	r0, #1
 800fabc:	f001 f8ba 	bl	8010c34 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fac0:	2000      	movs	r0, #0
 800fac2:	bd10      	pop	{r4, pc}

0800fac4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800fac4:	b510      	push	{r4, lr}
 800fac6:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800fac8:	2901      	cmp	r1, #1
 800faca:	d005      	beq.n	800fad8 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800facc:	2100      	movs	r1, #0
 800face:	f000 fb13 	bl	80100f8 <xQueueCreateCountingSemaphore>
 800fad2:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800fad4:	0020      	movs	r0, r4
 800fad6:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800fad8:	2203      	movs	r2, #3
 800fada:	2100      	movs	r1, #0
 800fadc:	f000 fae5 	bl	80100aa <xQueueGenericCreate>
 800fae0:	1e04      	subs	r4, r0, #0
 800fae2:	d0f7      	beq.n	800fad4 <osSemaphoreCreate+0x10>
 800fae4:	2300      	movs	r3, #0
 800fae6:	2200      	movs	r2, #0
 800fae8:	2100      	movs	r1, #0
 800faea:	f000 fb1b 	bl	8010124 <xQueueGenericSend>
 800faee:	e7f1      	b.n	800fad4 <osSemaphoreCreate+0x10>

0800faf0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800faf0:	b530      	push	{r4, r5, lr}
 800faf2:	b083      	sub	sp, #12
 800faf4:	0005      	movs	r5, r0
 800faf6:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800faf8:	2300      	movs	r3, #0
 800fafa:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d025      	beq.n	800fb4c <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800fb00:	1c4b      	adds	r3, r1, #1
 800fb02:	d013      	beq.n	800fb2c <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fb04:	f7ff ffcc 	bl	800faa0 <inHandlerMode>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d012      	beq.n	800fb32 <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fb0c:	aa01      	add	r2, sp, #4
 800fb0e:	2100      	movs	r1, #0
 800fb10:	0028      	movs	r0, r5
 800fb12:	f000 fcc2 	bl	801049a <xQueueReceiveFromISR>
 800fb16:	2801      	cmp	r0, #1
 800fb18:	d11a      	bne.n	800fb50 <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fb1a:	9b01      	ldr	r3, [sp, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d019      	beq.n	800fb54 <osSemaphoreWait+0x64>
 800fb20:	4b0d      	ldr	r3, [pc, #52]	; (800fb58 <osSemaphoreWait+0x68>)
 800fb22:	2280      	movs	r2, #128	; 0x80
 800fb24:	0552      	lsls	r2, r2, #21
 800fb26:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e00b      	b.n	800fb44 <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800fb2c:	2401      	movs	r4, #1
 800fb2e:	4264      	negs	r4, r4
 800fb30:	e7e8      	b.n	800fb04 <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fb32:	2300      	movs	r3, #0
 800fb34:	0022      	movs	r2, r4
 800fb36:	2100      	movs	r1, #0
 800fb38:	0028      	movs	r0, r5
 800fb3a:	f000 fc0b 	bl	8010354 <xQueueGenericReceive>
 800fb3e:	2801      	cmp	r0, #1
 800fb40:	d102      	bne.n	800fb48 <osSemaphoreWait+0x58>
  return osOK;
 800fb42:	2000      	movs	r0, #0
}
 800fb44:	b003      	add	sp, #12
 800fb46:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800fb48:	20ff      	movs	r0, #255	; 0xff
 800fb4a:	e7fb      	b.n	800fb44 <osSemaphoreWait+0x54>
    return osErrorParameter;
 800fb4c:	2080      	movs	r0, #128	; 0x80
 800fb4e:	e7f9      	b.n	800fb44 <osSemaphoreWait+0x54>
      return osErrorOS;
 800fb50:	20ff      	movs	r0, #255	; 0xff
 800fb52:	e7f7      	b.n	800fb44 <osSemaphoreWait+0x54>
  return osOK;
 800fb54:	2000      	movs	r0, #0
 800fb56:	e7f5      	b.n	800fb44 <osSemaphoreWait+0x54>
 800fb58:	e000ed04 	.word	0xe000ed04

0800fb5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fb5c:	b510      	push	{r4, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800fb62:	2300      	movs	r3, #0
 800fb64:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800fb66:	f7ff ff9b 	bl	800faa0 <inHandlerMode>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d00e      	beq.n	800fb8c <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fb6e:	a901      	add	r1, sp, #4
 800fb70:	0020      	movs	r0, r4
 800fb72:	f000 fbaf 	bl	80102d4 <xQueueGiveFromISR>
 800fb76:	2801      	cmp	r0, #1
 800fb78:	d113      	bne.n	800fba2 <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb7a:	9b01      	ldr	r3, [sp, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d012      	beq.n	800fba6 <osSemaphoreRelease+0x4a>
 800fb80:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <osSemaphoreRelease+0x54>)
 800fb82:	2280      	movs	r2, #128	; 0x80
 800fb84:	0552      	lsls	r2, r2, #21
 800fb86:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800fb88:	2000      	movs	r0, #0
 800fb8a:	e008      	b.n	800fb9e <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2100      	movs	r1, #0
 800fb92:	0020      	movs	r0, r4
 800fb94:	f000 fac6 	bl	8010124 <xQueueGenericSend>
 800fb98:	2801      	cmp	r0, #1
 800fb9a:	d106      	bne.n	800fbaa <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800fb9c:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800fb9e:	b002      	add	sp, #8
 800fba0:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fba2:	20ff      	movs	r0, #255	; 0xff
 800fba4:	e7fb      	b.n	800fb9e <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800fba6:	2000      	movs	r0, #0
 800fba8:	e7f9      	b.n	800fb9e <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800fbaa:	20ff      	movs	r0, #255	; 0xff
 800fbac:	e7f7      	b.n	800fb9e <osSemaphoreRelease+0x42>
 800fbae:	46c0      	nop			; (mov r8, r8)
 800fbb0:	e000ed04 	.word	0xe000ed04

0800fbb4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800fbb4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800fbb6:	f001 fa2b 	bl	8011010 <xTaskGetSchedulerState>
 800fbba:	2801      	cmp	r0, #1
 800fbbc:	d001      	beq.n	800fbc2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800fbbe:	f001 feb5 	bl	801192c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800fbc2:	bd10      	pop	{r4, pc}

0800fbc4 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800fbc4:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800fbc6:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800fbc8:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800fbca:	e005      	b.n	800fbd8 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800fbcc:	2901      	cmp	r1, #1
 800fbce:	d002      	beq.n	800fbd6 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800fbd4:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800fbd6:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800fbd8:	2200      	movs	r2, #0
 800fbda:	569a      	ldrsb	r2, [r3, r2]
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	d003      	beq.n	800fbe8 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800fbe0:	2a20      	cmp	r2, #32
 800fbe2:	d0f3      	beq.n	800fbcc <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	e7f6      	b.n	800fbd6 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800fbe8:	2901      	cmp	r1, #1
 800fbea:	d000      	beq.n	800fbee <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800fbec:	4770      	bx	lr
		cParameters--;
 800fbee:	3801      	subs	r0, #1
 800fbf0:	b240      	sxtb	r0, r0
 800fbf2:	e7fb      	b.n	800fbec <prvGetNumberOfParameters+0x28>

0800fbf4 <FreeRTOS_CLIRegisterCommand>:
{
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800fbf8:	d101      	bne.n	800fbfe <FreeRTOS_CLIRegisterCommand+0xa>
 800fbfa:	b672      	cpsid	i
 800fbfc:	e7fe      	b.n	800fbfc <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800fbfe:	2008      	movs	r0, #8
 800fc00:	f001 ff02 	bl	8011a08 <pvPortMalloc>
 800fc04:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800fc06:	d101      	bne.n	800fc0c <FreeRTOS_CLIRegisterCommand+0x18>
 800fc08:	b672      	cpsid	i
 800fc0a:	e7fe      	b.n	800fc0a <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 800fc0c:	f001 fe48 	bl	80118a0 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800fc10:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800fc16:	4b04      	ldr	r3, [pc, #16]	; (800fc28 <FreeRTOS_CLIRegisterCommand+0x34>)
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800fc1c:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800fc1e:	f001 fe4b 	bl	80118b8 <vPortExitCritical>
}
 800fc22:	2001      	movs	r0, #1
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	46c0      	nop			; (mov r8, r8)
 800fc28:	200000bc 	.word	0x200000bc

0800fc2c <FreeRTOS_CLIProcessCommand>:
{
 800fc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	0005      	movs	r5, r0
 800fc32:	9100      	str	r1, [sp, #0]
 800fc34:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800fc36:	4b2c      	ldr	r3, [pc, #176]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d016      	beq.n	800fc6c <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800fc3e:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800fc40:	4b29      	ldr	r3, [pc, #164]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <FreeRTOS_CLIProcessCommand+0x20>
 800fc48:	2c00      	cmp	r4, #0
 800fc4a:	d03d      	beq.n	800fcc8 <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d044      	beq.n	800fcda <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	002a      	movs	r2, r5
 800fc56:	9901      	ldr	r1, [sp, #4]
 800fc58:	9800      	ldr	r0, [sp, #0]
 800fc5a:	4798      	blx	r3
 800fc5c:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800fc5e:	d102      	bne.n	800fc66 <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800fc60:	4b21      	ldr	r3, [pc, #132]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]
}
 800fc66:	0020      	movs	r0, r4
 800fc68:	b003      	add	sp, #12
 800fc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800fc6c:	4b1e      	ldr	r3, [pc, #120]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc6e:	4a1f      	ldr	r2, [pc, #124]	; (800fcec <FreeRTOS_CLIProcessCommand+0xc0>)
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	e009      	b.n	800fc88 <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800fc74:	0002      	movs	r2, r0
 800fc76:	0021      	movs	r1, r4
 800fc78:	0028      	movs	r0, r5
 800fc7a:	f005 fd95 	bl	80157a8 <strncmp>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d011      	beq.n	800fca6 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	4b18      	ldr	r3, [pc, #96]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc86:	601a      	str	r2, [r3, #0]
 800fc88:	4b17      	ldr	r3, [pc, #92]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc8a:	681f      	ldr	r7, [r3, #0]
 800fc8c:	2f00      	cmp	r7, #0
 800fc8e:	d019      	beq.n	800fcc4 <FreeRTOS_CLIProcessCommand+0x98>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800fc90:	683e      	ldr	r6, [r7, #0]
 800fc92:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800fc94:	0020      	movs	r0, r4
 800fc96:	f7f0 fa3f 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800fc9a:	562b      	ldrsb	r3, [r5, r0]
 800fc9c:	2b20      	cmp	r3, #32
 800fc9e:	d0e9      	beq.n	800fc74 <FreeRTOS_CLIProcessCommand+0x48>
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1ee      	bne.n	800fc82 <FreeRTOS_CLIProcessCommand+0x56>
 800fca4:	e7e6      	b.n	800fc74 <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800fca6:	240c      	movs	r4, #12
 800fca8:	5734      	ldrsb	r4, [r6, r4]
 800fcaa:	2c00      	cmp	r4, #0
 800fcac:	da01      	bge.n	800fcb2 <FreeRTOS_CLIProcessCommand+0x86>
portBASE_TYPE xReturn = pdTRUE;
 800fcae:	2401      	movs	r4, #1
 800fcb0:	e7c6      	b.n	800fc40 <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800fcb2:	0028      	movs	r0, r5
 800fcb4:	f7ff ff86 	bl	800fbc4 <prvGetNumberOfParameters>
 800fcb8:	4284      	cmp	r4, r0
 800fcba:	d001      	beq.n	800fcc0 <FreeRTOS_CLIProcessCommand+0x94>
							xReturn = pdFALSE;
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	e7bf      	b.n	800fc40 <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800fcc0:	2401      	movs	r4, #1
 800fcc2:	e7bd      	b.n	800fc40 <FreeRTOS_CLIProcessCommand+0x14>
 800fcc4:	2401      	movs	r4, #1
 800fcc6:	e7bb      	b.n	800fc40 <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800fcc8:	9a01      	ldr	r2, [sp, #4]
 800fcca:	4909      	ldr	r1, [pc, #36]	; (800fcf0 <FreeRTOS_CLIProcessCommand+0xc4>)
 800fccc:	9800      	ldr	r0, [sp, #0]
 800fcce:	f005 fd7c 	bl	80157ca <strncpy>
		pxCommand = NULL;
 800fcd2:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	601a      	str	r2, [r3, #0]
 800fcd8:	e7c5      	b.n	800fc66 <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800fcda:	9a01      	ldr	r2, [sp, #4]
 800fcdc:	4905      	ldr	r1, [pc, #20]	; (800fcf4 <FreeRTOS_CLIProcessCommand+0xc8>)
 800fcde:	9800      	ldr	r0, [sp, #0]
 800fce0:	f005 fd73 	bl	80157ca <strncpy>
		xReturn = pdFALSE;
 800fce4:	2400      	movs	r4, #0
	return xReturn;
 800fce6:	e7be      	b.n	800fc66 <FreeRTOS_CLIProcessCommand+0x3a>
 800fce8:	2000212c 	.word	0x2000212c
 800fcec:	200000c0 	.word	0x200000c0
 800fcf0:	0801d098 	.word	0x0801d098
 800fcf4:	0801d0f0 	.word	0x0801d0f0

0800fcf8 <FreeRTOS_CLIGetOutputBuffer>:
}
 800fcf8:	4800      	ldr	r0, [pc, #0]	; (800fcfc <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800fcfa:	4770      	bx	lr
 800fcfc:	20001ec4 	.word	0x20001ec4

0800fd00 <FreeRTOS_CLIGetParameter>:
{
 800fd00:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800fd06:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800fd08:	e011      	b.n	800fd2e <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800fd0a:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	56c3      	ldrsb	r3, [r0, r3]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d003      	beq.n	800fd1c <FreeRTOS_CLIGetParameter+0x1c>
 800fd14:	2b20      	cmp	r3, #32
 800fd16:	d1f8      	bne.n	800fd0a <FreeRTOS_CLIGetParameter+0xa>
 800fd18:	e000      	b.n	800fd1c <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800fd1a:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	56c3      	ldrsb	r3, [r0, r3]
 800fd20:	2b20      	cmp	r3, #32
 800fd22:	d0fa      	beq.n	800fd1a <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d017      	beq.n	800fd58 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800fd28:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800fd2a:	42a1      	cmp	r1, r4
 800fd2c:	d012      	beq.n	800fd54 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800fd2e:	428c      	cmp	r4, r1
 800fd30:	d3ec      	bcc.n	800fd0c <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800fd32:	2000      	movs	r0, #0
}
 800fd34:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800fd36:	6813      	ldr	r3, [r2, #0]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800fd3c:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800fd3e:	2300      	movs	r3, #0
 800fd40:	56cb      	ldrsb	r3, [r1, r3]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <FreeRTOS_CLIGetParameter+0x4a>
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	d1f5      	bne.n	800fd36 <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800fd4a:	6813      	ldr	r3, [r2, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1f1      	bne.n	800fd34 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800fd50:	2000      	movs	r0, #0
	return pcReturn;
 800fd52:	e7ef      	b.n	800fd34 <FreeRTOS_CLIGetParameter+0x34>
 800fd54:	0001      	movs	r1, r0
 800fd56:	e7f2      	b.n	800fd3e <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e7eb      	b.n	800fd34 <FreeRTOS_CLIGetParameter+0x34>

0800fd5c <prvHelpCommand>:
{
 800fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	0005      	movs	r5, r0
 800fd62:	000e      	movs	r6, r1
 800fd64:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800fd6a:	aa01      	add	r2, sp, #4
 800fd6c:	2101      	movs	r1, #1
 800fd6e:	f7ff ffc7 	bl	800fd00 <FreeRTOS_CLIGetParameter>
 800fd72:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800fd74:	d022      	beq.n	800fdbc <prvHelpCommand+0x60>
 800fd76:	2206      	movs	r2, #6
 800fd78:	4931      	ldr	r1, [pc, #196]	; (800fe40 <prvHelpCommand+0xe4>)
 800fd7a:	f005 fd15 	bl	80157a8 <strncmp>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d11c      	bne.n	800fdbc <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800fd82:	4b30      	ldr	r3, [pc, #192]	; (800fe44 <prvHelpCommand+0xe8>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b07      	cmp	r3, #7
 800fd88:	d00f      	beq.n	800fdaa <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800fd8a:	4a2e      	ldr	r2, [pc, #184]	; (800fe44 <prvHelpCommand+0xe8>)
 800fd8c:	7813      	ldrb	r3, [r2, #0]
 800fd8e:	1c5c      	adds	r4, r3, #1
 800fd90:	b2e4      	uxtb	r4, r4
 800fd92:	7014      	strb	r4, [r2, #0]
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4a2c      	ldr	r2, [pc, #176]	; (800fe48 <prvHelpCommand+0xec>)
 800fd98:	5899      	ldr	r1, [r3, r2]
 800fd9a:	0032      	movs	r2, r6
 800fd9c:	0028      	movs	r0, r5
 800fd9e:	f005 fd14 	bl	80157ca <strncpy>
		if( str == NumOfParamsHelpStrings )
 800fda2:	2c07      	cmp	r4, #7
 800fda4:	d005      	beq.n	800fdb2 <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800fda6:	2701      	movs	r7, #1
 800fda8:	e00a      	b.n	800fdc0 <prvHelpCommand+0x64>
			str = 0;
 800fdaa:	4b26      	ldr	r3, [pc, #152]	; (800fe44 <prvHelpCommand+0xe8>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
 800fdb0:	e7eb      	b.n	800fd8a <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800fdb2:	4b24      	ldr	r3, [pc, #144]	; (800fe44 <prvHelpCommand+0xe8>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	701a      	strb	r2, [r3, #0]
 800fdb8:	2700      	movs	r7, #0
 800fdba:	e001      	b.n	800fdc0 <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800fdbc:	2c00      	cmp	r4, #0
 800fdbe:	d002      	beq.n	800fdc6 <prvHelpCommand+0x6a>
}
 800fdc0:	0038      	movs	r0, r7
 800fdc2:	b003      	add	sp, #12
 800fdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800fdc6:	4b21      	ldr	r3, [pc, #132]	; (800fe4c <prvHelpCommand+0xf0>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d025      	beq.n	800fe1a <prvHelpCommand+0xbe>
		if (counter > numOfBosCommands) {
 800fdce:	4b20      	ldr	r3, [pc, #128]	; (800fe50 <prvHelpCommand+0xf4>)
 800fdd0:	781a      	ldrb	r2, [r3, #0]
 800fdd2:	4b20      	ldr	r3, [pc, #128]	; (800fe54 <prvHelpCommand+0xf8>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d926      	bls.n	800fe28 <prvHelpCommand+0xcc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800fdda:	4b1c      	ldr	r3, [pc, #112]	; (800fe4c <prvHelpCommand+0xf0>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6859      	ldr	r1, [r3, #4]
 800fde2:	0032      	movs	r2, r6
 800fde4:	3a08      	subs	r2, #8
 800fde6:	0028      	movs	r0, r5
 800fde8:	3008      	adds	r0, #8
 800fdea:	f005 fcee 	bl	80157ca <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800fdee:	1c68      	adds	r0, r5, #1
 800fdf0:	4919      	ldr	r1, [pc, #100]	; (800fe58 <prvHelpCommand+0xfc>)
 800fdf2:	f005 fcd1 	bl	8015798 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800fdf6:	2328      	movs	r3, #40	; 0x28
 800fdf8:	702b      	strb	r3, [r5, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	71ab      	strb	r3, [r5, #6]
 800fdfe:	3b09      	subs	r3, #9
 800fe00:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800fe02:	4b12      	ldr	r3, [pc, #72]	; (800fe4c <prvHelpCommand+0xf0>)
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	6852      	ldr	r2, [r2, #4]
 800fe08:	601a      	str	r2, [r3, #0]
		counter++;
 800fe0a:	4911      	ldr	r1, [pc, #68]	; (800fe50 <prvHelpCommand+0xf4>)
 800fe0c:	780b      	ldrb	r3, [r1, #0]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	700b      	strb	r3, [r1, #0]
		if( pxCommand == NULL )
 800fe12:	2a00      	cmp	r2, #0
 800fe14:	d011      	beq.n	800fe3a <prvHelpCommand+0xde>
			xReturn = pdTRUE;
 800fe16:	2701      	movs	r7, #1
	return xReturn;
 800fe18:	e7d2      	b.n	800fdc0 <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 800fe1a:	4b0c      	ldr	r3, [pc, #48]	; (800fe4c <prvHelpCommand+0xf0>)
 800fe1c:	4a0f      	ldr	r2, [pc, #60]	; (800fe5c <prvHelpCommand+0x100>)
 800fe1e:	601a      	str	r2, [r3, #0]
			counter = 1;
 800fe20:	4b0b      	ldr	r3, [pc, #44]	; (800fe50 <prvHelpCommand+0xf4>)
 800fe22:	2201      	movs	r2, #1
 800fe24:	701a      	strb	r2, [r3, #0]
 800fe26:	e7d2      	b.n	800fdce <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800fe28:	4b08      	ldr	r3, [pc, #32]	; (800fe4c <prvHelpCommand+0xf0>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	6859      	ldr	r1, [r3, #4]
 800fe30:	0032      	movs	r2, r6
 800fe32:	0028      	movs	r0, r5
 800fe34:	f005 fcc9 	bl	80157ca <strncpy>
 800fe38:	e7e3      	b.n	800fe02 <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 800fe3a:	2700      	movs	r7, #0
 800fe3c:	e7c0      	b.n	800fdc0 <prvHelpCommand+0x64>
 800fe3e:	46c0      	nop			; (mov r8, r8)
 800fe40:	0801a9b0 	.word	0x0801a9b0
 800fe44:	20002134 	.word	0x20002134
 800fe48:	20000054 	.word	0x20000054
 800fe4c:	20002130 	.word	0x20002130
 800fe50:	20002128 	.word	0x20002128
 800fe54:	20006d24 	.word	0x20006d24
 800fe58:	08019fb0 	.word	0x08019fb0
 800fe5c:	200000c0 	.word	0x200000c0

0800fe60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe60:	0003      	movs	r3, r0
 800fe62:	3308      	adds	r3, #8
 800fe64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe66:	2201      	movs	r2, #1
 800fe68:	4252      	negs	r2, r2
 800fe6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fe70:	2300      	movs	r3, #0
 800fe72:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fe74:	4770      	bx	lr

0800fe76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800fe76:	2300      	movs	r3, #0
 800fe78:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fe7a:	4770      	bx	lr

0800fe7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fe7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fe7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fe80:	689a      	ldr	r2, [r3, #8]
 800fe82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fe84:	689a      	ldr	r2, [r3, #8]
 800fe86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fe88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fe8a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fe8c:	6803      	ldr	r3, [r0, #0]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	6003      	str	r3, [r0, #0]
}
 800fe92:	4770      	bx	lr

0800fe94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fe94:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fe96:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fe98:	1c63      	adds	r3, r4, #1
 800fe9a:	d002      	beq.n	800fea2 <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe9c:	0002      	movs	r2, r0
 800fe9e:	3208      	adds	r2, #8
 800fea0:	e002      	b.n	800fea8 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800fea2:	6902      	ldr	r2, [r0, #16]
 800fea4:	e004      	b.n	800feb0 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fea6:	001a      	movs	r2, r3
 800fea8:	6853      	ldr	r3, [r2, #4]
 800feaa:	681d      	ldr	r5, [r3, #0]
 800feac:	42a5      	cmp	r5, r4
 800feae:	d9fa      	bls.n	800fea6 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800feb0:	6853      	ldr	r3, [r2, #4]
 800feb2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800feb4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800feb6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800feb8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800feba:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800febc:	6803      	ldr	r3, [r0, #0]
 800febe:	3301      	adds	r3, #1
 800fec0:	6003      	str	r3, [r0, #0]
}
 800fec2:	bd30      	pop	{r4, r5, pc}

0800fec4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800fec4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fec6:	6842      	ldr	r2, [r0, #4]
 800fec8:	6881      	ldr	r1, [r0, #8]
 800feca:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fecc:	6882      	ldr	r2, [r0, #8]
 800fece:	6841      	ldr	r1, [r0, #4]
 800fed0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	4282      	cmp	r2, r0
 800fed6:	d005      	beq.n	800fee4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800fed8:	2200      	movs	r2, #0
 800feda:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	1e50      	subs	r0, r2, #1
 800fee0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800fee2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fee4:	6882      	ldr	r2, [r0, #8]
 800fee6:	605a      	str	r2, [r3, #4]
 800fee8:	e7f6      	b.n	800fed8 <uxListRemove+0x14>

0800feea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800feea:	b510      	push	{r4, lr}
 800feec:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800feee:	f001 fcd7 	bl	80118a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fef2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fef4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d004      	beq.n	800ff04 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800fefa:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800fefc:	f001 fcdc 	bl	80118b8 <vPortExitCritical>

	return xReturn;
}
 800ff00:	0020      	movs	r0, r4
 800ff02:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ff04:	2401      	movs	r4, #1
 800ff06:	e7f9      	b.n	800fefc <prvIsQueueFull+0x12>

0800ff08 <prvIsQueueEmpty>:
{
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ff0c:	f001 fcc8 	bl	80118a0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d004      	beq.n	800ff20 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800ff16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ff18:	f001 fcce 	bl	80118b8 <vPortExitCritical>
}
 800ff1c:	0020      	movs	r0, r4
 800ff1e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ff20:	2401      	movs	r4, #1
 800ff22:	e7f9      	b.n	800ff18 <prvIsQueueEmpty+0x10>

0800ff24 <prvCopyDataToQueue>:
{
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	0004      	movs	r4, r0
 800ff28:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ff2c:	2a00      	cmp	r2, #0
 800ff2e:	d10d      	bne.n	800ff4c <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff30:	6803      	ldr	r3, [r0, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d004      	beq.n	800ff40 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800ff36:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800ff38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ff40:	6840      	ldr	r0, [r0, #4]
 800ff42:	f001 f8b5 	bl	80110b0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ff46:	2300      	movs	r3, #0
 800ff48:	6063      	str	r3, [r4, #4]
 800ff4a:	e7f5      	b.n	800ff38 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ff4c:	2d00      	cmp	r5, #0
 800ff4e:	d10e      	bne.n	800ff6e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ff50:	6880      	ldr	r0, [r0, #8]
 800ff52:	f005 f9e2 	bl	801531a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ff56:	68a3      	ldr	r3, [r4, #8]
 800ff58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ff5a:	4694      	mov	ip, r2
 800ff5c:	4463      	add	r3, ip
 800ff5e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff60:	6862      	ldr	r2, [r4, #4]
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d31e      	bcc.n	800ffa4 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	e7e4      	b.n	800ff38 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff6e:	68c0      	ldr	r0, [r0, #12]
 800ff70:	f005 f9d3 	bl	801531a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ff74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff76:	425a      	negs	r2, r3
 800ff78:	68e3      	ldr	r3, [r4, #12]
 800ff7a:	189b      	adds	r3, r3, r2
 800ff7c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff7e:	6821      	ldr	r1, [r4, #0]
 800ff80:	428b      	cmp	r3, r1
 800ff82:	d203      	bcs.n	800ff8c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ff84:	6863      	ldr	r3, [r4, #4]
 800ff86:	469c      	mov	ip, r3
 800ff88:	4462      	add	r2, ip
 800ff8a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ff8c:	2d02      	cmp	r5, #2
 800ff8e:	d001      	beq.n	800ff94 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800ff90:	2000      	movs	r0, #0
 800ff92:	e7d1      	b.n	800ff38 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d006      	beq.n	800ffa8 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800ff9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e7c9      	b.n	800ff38 <prvCopyDataToQueue+0x14>
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	e7c7      	b.n	800ff38 <prvCopyDataToQueue+0x14>
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	e7c5      	b.n	800ff38 <prvCopyDataToQueue+0x14>

0800ffac <prvCopyDataFromQueue>:
{
 800ffac:	b510      	push	{r4, lr}
 800ffae:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ffb2:	2a00      	cmp	r2, #0
 800ffb4:	d00b      	beq.n	800ffce <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ffb6:	68c3      	ldr	r3, [r0, #12]
 800ffb8:	189b      	adds	r3, r3, r2
 800ffba:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffbc:	6841      	ldr	r1, [r0, #4]
 800ffbe:	428b      	cmp	r3, r1
 800ffc0:	d301      	bcc.n	800ffc6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ffc6:	68c1      	ldr	r1, [r0, #12]
 800ffc8:	0020      	movs	r0, r4
 800ffca:	f005 f9a6 	bl	801531a <memcpy>
}
 800ffce:	bd10      	pop	{r4, pc}

0800ffd0 <prvUnlockQueue>:
{
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ffd4:	f001 fc64 	bl	80118a0 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ffd8:	e004      	b.n	800ffe4 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800ffda:	f001 f813 	bl	8011004 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800ffde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ffe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	dd09      	ble.n	800fffe <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d006      	beq.n	800fffe <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fff0:	0020      	movs	r0, r4
 800fff2:	3024      	adds	r0, #36	; 0x24
 800fff4:	f000 ff80 	bl	8010ef8 <xTaskRemoveFromEventList>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d0f0      	beq.n	800ffde <prvUnlockQueue+0xe>
 800fffc:	e7ed      	b.n	800ffda <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800fffe:	2301      	movs	r3, #1
 8010000:	425b      	negs	r3, r3
 8010002:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 8010004:	f001 fc58 	bl	80118b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010008:	f001 fc4a 	bl	80118a0 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 801000c:	e004      	b.n	8010018 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 801000e:	f000 fff9 	bl	8011004 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 8010012:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010014:	3b01      	subs	r3, #1
 8010016:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8010018:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801001a:	2b00      	cmp	r3, #0
 801001c:	dd09      	ble.n	8010032 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801001e:	6923      	ldr	r3, [r4, #16]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d006      	beq.n	8010032 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010024:	0020      	movs	r0, r4
 8010026:	3010      	adds	r0, #16
 8010028:	f000 ff66 	bl	8010ef8 <xTaskRemoveFromEventList>
 801002c:	2800      	cmp	r0, #0
 801002e:	d0f0      	beq.n	8010012 <prvUnlockQueue+0x42>
 8010030:	e7ed      	b.n	801000e <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 8010032:	2301      	movs	r3, #1
 8010034:	425b      	negs	r3, r3
 8010036:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010038:	f001 fc3e 	bl	80118b8 <vPortExitCritical>
}
 801003c:	bd10      	pop	{r4, pc}

0801003e <xQueueGenericReset>:
{
 801003e:	b570      	push	{r4, r5, r6, lr}
 8010040:	0004      	movs	r4, r0
 8010042:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8010044:	2800      	cmp	r0, #0
 8010046:	d101      	bne.n	801004c <xQueueGenericReset+0xe>
 8010048:	b672      	cpsid	i
 801004a:	e7fe      	b.n	801004a <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 801004c:	f001 fc28 	bl	80118a0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010050:	6822      	ldr	r2, [r4, #0]
 8010052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010054:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010056:	0001      	movs	r1, r0
 8010058:	4359      	muls	r1, r3
 801005a:	1851      	adds	r1, r2, r1
 801005c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801005e:	2100      	movs	r1, #0
 8010060:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010062:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010064:	3b01      	subs	r3, #1
 8010066:	4343      	muls	r3, r0
 8010068:	18d3      	adds	r3, r2, r3
 801006a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 801006c:	2301      	movs	r3, #1
 801006e:	425b      	negs	r3, r3
 8010070:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8010072:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 8010074:	2d00      	cmp	r5, #0
 8010076:	d10f      	bne.n	8010098 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d103      	bne.n	8010086 <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 801007e:	f001 fc1b 	bl	80118b8 <vPortExitCritical>
}
 8010082:	2001      	movs	r0, #1
 8010084:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8010086:	0020      	movs	r0, r4
 8010088:	3010      	adds	r0, #16
 801008a:	f000 ff35 	bl	8010ef8 <xTaskRemoveFromEventList>
 801008e:	2801      	cmp	r0, #1
 8010090:	d1f5      	bne.n	801007e <xQueueGenericReset+0x40>
					queueYIELD_IF_USING_PREEMPTION();
 8010092:	f001 fbf9 	bl	8011888 <vPortYield>
 8010096:	e7f2      	b.n	801007e <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010098:	0020      	movs	r0, r4
 801009a:	3010      	adds	r0, #16
 801009c:	f7ff fee0 	bl	800fe60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80100a0:	0020      	movs	r0, r4
 80100a2:	3024      	adds	r0, #36	; 0x24
 80100a4:	f7ff fedc 	bl	800fe60 <vListInitialise>
 80100a8:	e7e9      	b.n	801007e <xQueueGenericReset+0x40>

080100aa <xQueueGenericCreate>:
{
 80100aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ac:	0006      	movs	r6, r0
 80100ae:	000d      	movs	r5, r1
 80100b0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d101      	bne.n	80100ba <xQueueGenericCreate+0x10>
 80100b6:	b672      	cpsid	i
 80100b8:	e7fe      	b.n	80100b8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80100ba:	2900      	cmp	r1, #0
 80100bc:	d003      	beq.n	80100c6 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100be:	0008      	movs	r0, r1
 80100c0:	4370      	muls	r0, r6
 80100c2:	3001      	adds	r0, #1
 80100c4:	e000      	b.n	80100c8 <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = ( size_t ) 0;
 80100c6:	2000      	movs	r0, #0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80100c8:	3054      	adds	r0, #84	; 0x54
 80100ca:	f001 fc9d 	bl	8011a08 <pvPortMalloc>
 80100ce:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 80100d0:	d005      	beq.n	80100de <xQueueGenericCreate+0x34>
		if( uxItemSize == ( UBaseType_t ) 0 )
 80100d2:	2d00      	cmp	r5, #0
 80100d4:	d005      	beq.n	80100e2 <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 80100d6:	0003      	movs	r3, r0
 80100d8:	3354      	adds	r3, #84	; 0x54
 80100da:	6003      	str	r3, [r0, #0]
 80100dc:	e002      	b.n	80100e4 <xQueueGenericCreate+0x3a>
	configASSERT( xReturn );
 80100de:	b672      	cpsid	i
 80100e0:	e7fe      	b.n	80100e0 <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80100e2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 80100e4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 80100e6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80100e8:	2101      	movs	r1, #1
 80100ea:	0020      	movs	r0, r4
 80100ec:	f7ff ffa7 	bl	801003e <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 80100f0:	2350      	movs	r3, #80	; 0x50
 80100f2:	54e7      	strb	r7, [r4, r3]
}
 80100f4:	0020      	movs	r0, r4
 80100f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100f8 <xQueueCreateCountingSemaphore>:
	{
 80100f8:	b510      	push	{r4, lr}
 80100fa:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d101      	bne.n	8010104 <xQueueCreateCountingSemaphore+0xc>
 8010100:	b672      	cpsid	i
 8010102:	e7fe      	b.n	8010102 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010104:	4288      	cmp	r0, r1
 8010106:	d201      	bcs.n	801010c <xQueueCreateCountingSemaphore+0x14>
 8010108:	b672      	cpsid	i
 801010a:	e7fe      	b.n	801010a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801010c:	2202      	movs	r2, #2
 801010e:	2100      	movs	r1, #0
 8010110:	f7ff ffcb 	bl	80100aa <xQueueGenericCreate>
		if( xHandle != NULL )
 8010114:	2800      	cmp	r0, #0
 8010116:	d000      	beq.n	801011a <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010118:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 801011a:	2800      	cmp	r0, #0
 801011c:	d101      	bne.n	8010122 <xQueueCreateCountingSemaphore+0x2a>
 801011e:	b672      	cpsid	i
 8010120:	e7fe      	b.n	8010120 <xQueueCreateCountingSemaphore+0x28>
	}
 8010122:	bd10      	pop	{r4, pc}

08010124 <xQueueGenericSend>:
{
 8010124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010126:	b085      	sub	sp, #20
 8010128:	0004      	movs	r4, r0
 801012a:	000f      	movs	r7, r1
 801012c:	9201      	str	r2, [sp, #4]
 801012e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8010130:	2800      	cmp	r0, #0
 8010132:	d006      	beq.n	8010142 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010134:	2900      	cmp	r1, #0
 8010136:	d106      	bne.n	8010146 <xQueueGenericSend+0x22>
 8010138:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801013a:	2b00      	cmp	r3, #0
 801013c:	d003      	beq.n	8010146 <xQueueGenericSend+0x22>
 801013e:	b672      	cpsid	i
 8010140:	e7fe      	b.n	8010140 <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 8010142:	b672      	cpsid	i
 8010144:	e7fe      	b.n	8010144 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010146:	2d02      	cmp	r5, #2
 8010148:	d104      	bne.n	8010154 <xQueueGenericSend+0x30>
 801014a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801014c:	2b01      	cmp	r3, #1
 801014e:	d001      	beq.n	8010154 <xQueueGenericSend+0x30>
 8010150:	b672      	cpsid	i
 8010152:	e7fe      	b.n	8010152 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010154:	f000 ff5c 	bl	8011010 <xTaskGetSchedulerState>
 8010158:	2800      	cmp	r0, #0
 801015a:	d104      	bne.n	8010166 <xQueueGenericSend+0x42>
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d003      	beq.n	801016a <xQueueGenericSend+0x46>
 8010162:	b672      	cpsid	i
 8010164:	e7fe      	b.n	8010164 <xQueueGenericSend+0x40>
 8010166:	2600      	movs	r6, #0
 8010168:	e02f      	b.n	80101ca <xQueueGenericSend+0xa6>
 801016a:	2600      	movs	r6, #0
 801016c:	e02d      	b.n	80101ca <xQueueGenericSend+0xa6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801016e:	002a      	movs	r2, r5
 8010170:	0039      	movs	r1, r7
 8010172:	0020      	movs	r0, r4
 8010174:	f7ff fed6 	bl	800ff24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801017a:	2b00      	cmp	r3, #0
 801017c:	d104      	bne.n	8010188 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 801017e:	2800      	cmp	r0, #0
 8010180:	d00a      	beq.n	8010198 <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8010182:	f001 fb81 	bl	8011888 <vPortYield>
 8010186:	e007      	b.n	8010198 <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8010188:	0020      	movs	r0, r4
 801018a:	3024      	adds	r0, #36	; 0x24
 801018c:	f000 feb4 	bl	8010ef8 <xTaskRemoveFromEventList>
 8010190:	2801      	cmp	r0, #1
 8010192:	d101      	bne.n	8010198 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 8010194:	f001 fb78 	bl	8011888 <vPortYield>
				taskEXIT_CRITICAL();
 8010198:	f001 fb8e 	bl	80118b8 <vPortExitCritical>
				return pdPASS;
 801019c:	2001      	movs	r0, #1
}
 801019e:	b005      	add	sp, #20
 80101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80101a2:	f001 fb89 	bl	80118b8 <vPortExitCritical>
					return errQUEUE_FULL;
 80101a6:	2000      	movs	r0, #0
 80101a8:	e7f9      	b.n	801019e <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 80101aa:	a802      	add	r0, sp, #8
 80101ac:	f000 fee6 	bl	8010f7c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101b0:	3601      	adds	r6, #1
 80101b2:	e017      	b.n	80101e4 <xQueueGenericSend+0xc0>
		prvLockQueue( pxQueue );
 80101b4:	2300      	movs	r3, #0
 80101b6:	6463      	str	r3, [r4, #68]	; 0x44
 80101b8:	e01d      	b.n	80101f6 <xQueueGenericSend+0xd2>
 80101ba:	2300      	movs	r3, #0
 80101bc:	64a3      	str	r3, [r4, #72]	; 0x48
 80101be:	e01d      	b.n	80101fc <xQueueGenericSend+0xd8>
				prvUnlockQueue( pxQueue );
 80101c0:	0020      	movs	r0, r4
 80101c2:	f7ff ff05 	bl	800ffd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101c6:	f000 fcc3 	bl	8010b50 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80101ca:	f001 fb69 	bl	80118a0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80101d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d3cb      	bcc.n	801016e <xQueueGenericSend+0x4a>
 80101d6:	2d02      	cmp	r5, #2
 80101d8:	d0c9      	beq.n	801016e <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d0e0      	beq.n	80101a2 <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 80101e0:	2e00      	cmp	r6, #0
 80101e2:	d0e2      	beq.n	80101aa <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 80101e4:	f001 fb68 	bl	80118b8 <vPortExitCritical>
		vTaskSuspendAll();
 80101e8:	f000 fc14 	bl	8010a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101ec:	f001 fb58 	bl	80118a0 <vPortEnterCritical>
 80101f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101f2:	3301      	adds	r3, #1
 80101f4:	d0de      	beq.n	80101b4 <xQueueGenericSend+0x90>
 80101f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80101f8:	3301      	adds	r3, #1
 80101fa:	d0de      	beq.n	80101ba <xQueueGenericSend+0x96>
 80101fc:	f001 fb5c 	bl	80118b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010200:	a901      	add	r1, sp, #4
 8010202:	a802      	add	r0, sp, #8
 8010204:	f000 feca 	bl	8010f9c <xTaskCheckForTimeOut>
 8010208:	2800      	cmp	r0, #0
 801020a:	d113      	bne.n	8010234 <xQueueGenericSend+0x110>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801020c:	0020      	movs	r0, r4
 801020e:	f7ff fe6c 	bl	800feea <prvIsQueueFull>
 8010212:	2800      	cmp	r0, #0
 8010214:	d0d4      	beq.n	80101c0 <xQueueGenericSend+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010216:	0020      	movs	r0, r4
 8010218:	3010      	adds	r0, #16
 801021a:	9901      	ldr	r1, [sp, #4]
 801021c:	f000 fe2e 	bl	8010e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010220:	0020      	movs	r0, r4
 8010222:	f7ff fed5 	bl	800ffd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010226:	f000 fc93 	bl	8010b50 <xTaskResumeAll>
 801022a:	2800      	cmp	r0, #0
 801022c:	d1cd      	bne.n	80101ca <xQueueGenericSend+0xa6>
					portYIELD_WITHIN_API();
 801022e:	f001 fb2b 	bl	8011888 <vPortYield>
 8010232:	e7ca      	b.n	80101ca <xQueueGenericSend+0xa6>
			prvUnlockQueue( pxQueue );
 8010234:	0020      	movs	r0, r4
 8010236:	f7ff fecb 	bl	800ffd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801023a:	f000 fc89 	bl	8010b50 <xTaskResumeAll>
			return errQUEUE_FULL;
 801023e:	2000      	movs	r0, #0
 8010240:	e7ad      	b.n	801019e <xQueueGenericSend+0x7a>

08010242 <xQueueGenericSendFromISR>:
{
 8010242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010244:	b083      	sub	sp, #12
 8010246:	0004      	movs	r4, r0
 8010248:	000f      	movs	r7, r1
 801024a:	0015      	movs	r5, r2
 801024c:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 801024e:	2800      	cmp	r0, #0
 8010250:	d006      	beq.n	8010260 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010252:	2900      	cmp	r1, #0
 8010254:	d106      	bne.n	8010264 <xQueueGenericSendFromISR+0x22>
 8010256:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010258:	2b00      	cmp	r3, #0
 801025a:	d003      	beq.n	8010264 <xQueueGenericSendFromISR+0x22>
 801025c:	b672      	cpsid	i
 801025e:	e7fe      	b.n	801025e <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 8010260:	b672      	cpsid	i
 8010262:	e7fe      	b.n	8010262 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010264:	2e02      	cmp	r6, #2
 8010266:	d104      	bne.n	8010272 <xQueueGenericSendFromISR+0x30>
 8010268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801026a:	2b01      	cmp	r3, #1
 801026c:	d001      	beq.n	8010272 <xQueueGenericSendFromISR+0x30>
 801026e:	b672      	cpsid	i
 8010270:	e7fe      	b.n	8010270 <xQueueGenericSendFromISR+0x2e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010272:	f001 fb31 	bl	80118d8 <ulSetInterruptMaskFromISR>
 8010276:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801027a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801027c:	4293      	cmp	r3, r2
 801027e:	d303      	bcc.n	8010288 <xQueueGenericSendFromISR+0x46>
 8010280:	2e02      	cmp	r6, #2
 8010282:	d001      	beq.n	8010288 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 8010284:	2400      	movs	r4, #0
 8010286:	e00b      	b.n	80102a0 <xQueueGenericSendFromISR+0x5e>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010288:	0032      	movs	r2, r6
 801028a:	0039      	movs	r1, r7
 801028c:	0020      	movs	r0, r4
 801028e:	f7ff fe49 	bl	800ff24 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 8010292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010294:	3301      	adds	r3, #1
 8010296:	d009      	beq.n	80102ac <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
 8010298:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801029a:	3301      	adds	r3, #1
 801029c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 801029e:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80102a0:	9801      	ldr	r0, [sp, #4]
 80102a2:	f001 fb1e 	bl	80118e2 <vClearInterruptMaskFromISR>
}
 80102a6:	0020      	movs	r0, r4
 80102a8:	b003      	add	sp, #12
 80102aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00a      	beq.n	80102c8 <xQueueGenericSendFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102b2:	0020      	movs	r0, r4
 80102b4:	3024      	adds	r0, #36	; 0x24
 80102b6:	f000 fe1f 	bl	8010ef8 <xTaskRemoveFromEventList>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d006      	beq.n	80102cc <xQueueGenericSendFromISR+0x8a>
							if( pxHigherPriorityTaskWoken != NULL )
 80102be:	2d00      	cmp	r5, #0
 80102c0:	d006      	beq.n	80102d0 <xQueueGenericSendFromISR+0x8e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102c2:	2401      	movs	r4, #1
 80102c4:	602c      	str	r4, [r5, #0]
 80102c6:	e7eb      	b.n	80102a0 <xQueueGenericSendFromISR+0x5e>
			xReturn = pdPASS;
 80102c8:	2401      	movs	r4, #1
 80102ca:	e7e9      	b.n	80102a0 <xQueueGenericSendFromISR+0x5e>
 80102cc:	2401      	movs	r4, #1
 80102ce:	e7e7      	b.n	80102a0 <xQueueGenericSendFromISR+0x5e>
 80102d0:	2401      	movs	r4, #1
 80102d2:	e7e5      	b.n	80102a0 <xQueueGenericSendFromISR+0x5e>

080102d4 <xQueueGiveFromISR>:
{
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	0004      	movs	r4, r0
 80102d8:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 80102da:	2800      	cmp	r0, #0
 80102dc:	d004      	beq.n	80102e8 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 80102de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <xQueueGiveFromISR+0x18>
 80102e4:	b672      	cpsid	i
 80102e6:	e7fe      	b.n	80102e6 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 80102e8:	b672      	cpsid	i
 80102ea:	e7fe      	b.n	80102ea <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80102ec:	6803      	ldr	r3, [r0, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d01e      	beq.n	8010330 <xQueueGiveFromISR+0x5c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102f2:	f001 faf1 	bl	80118d8 <ulSetInterruptMaskFromISR>
 80102f6:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80102f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80102fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d221      	bcs.n	8010344 <xQueueGiveFromISR+0x70>
			++( pxQueue->uxMessagesWaiting );
 8010300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010302:	3301      	adds	r3, #1
 8010304:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 8010306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010308:	3301      	adds	r3, #1
 801030a:	d116      	bne.n	801033a <xQueueGiveFromISR+0x66>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801030c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01a      	beq.n	8010348 <xQueueGiveFromISR+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010312:	0020      	movs	r0, r4
 8010314:	3024      	adds	r0, #36	; 0x24
 8010316:	f000 fdef 	bl	8010ef8 <xTaskRemoveFromEventList>
 801031a:	2800      	cmp	r0, #0
 801031c:	d016      	beq.n	801034c <xQueueGiveFromISR+0x78>
							if( pxHigherPriorityTaskWoken != NULL )
 801031e:	2e00      	cmp	r6, #0
 8010320:	d016      	beq.n	8010350 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010322:	2401      	movs	r4, #1
 8010324:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010326:	0028      	movs	r0, r5
 8010328:	f001 fadb 	bl	80118e2 <vClearInterruptMaskFromISR>
}
 801032c:	0020      	movs	r0, r4
 801032e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010330:	6843      	ldr	r3, [r0, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d0dd      	beq.n	80102f2 <xQueueGiveFromISR+0x1e>
 8010336:	b672      	cpsid	i
 8010338:	e7fe      	b.n	8010338 <xQueueGiveFromISR+0x64>
				++( pxQueue->xTxLock );
 801033a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801033c:	3301      	adds	r3, #1
 801033e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 8010340:	2401      	movs	r4, #1
 8010342:	e7f0      	b.n	8010326 <xQueueGiveFromISR+0x52>
			xReturn = errQUEUE_FULL;
 8010344:	2400      	movs	r4, #0
 8010346:	e7ee      	b.n	8010326 <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 8010348:	2401      	movs	r4, #1
 801034a:	e7ec      	b.n	8010326 <xQueueGiveFromISR+0x52>
 801034c:	2401      	movs	r4, #1
 801034e:	e7ea      	b.n	8010326 <xQueueGiveFromISR+0x52>
 8010350:	2401      	movs	r4, #1
 8010352:	e7e8      	b.n	8010326 <xQueueGiveFromISR+0x52>

08010354 <xQueueGenericReceive>:
{
 8010354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010356:	b085      	sub	sp, #20
 8010358:	0004      	movs	r4, r0
 801035a:	000e      	movs	r6, r1
 801035c:	9201      	str	r2, [sp, #4]
 801035e:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 8010360:	2800      	cmp	r0, #0
 8010362:	d006      	beq.n	8010372 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010364:	2900      	cmp	r1, #0
 8010366:	d106      	bne.n	8010376 <xQueueGenericReceive+0x22>
 8010368:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <xQueueGenericReceive+0x22>
 801036e:	b672      	cpsid	i
 8010370:	e7fe      	b.n	8010370 <xQueueGenericReceive+0x1c>
	configASSERT( pxQueue );
 8010372:	b672      	cpsid	i
 8010374:	e7fe      	b.n	8010374 <xQueueGenericReceive+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010376:	f000 fe4b 	bl	8011010 <xTaskGetSchedulerState>
 801037a:	2800      	cmp	r0, #0
 801037c:	d104      	bne.n	8010388 <xQueueGenericReceive+0x34>
 801037e:	9b01      	ldr	r3, [sp, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d003      	beq.n	801038c <xQueueGenericReceive+0x38>
 8010384:	b672      	cpsid	i
 8010386:	e7fe      	b.n	8010386 <xQueueGenericReceive+0x32>
 8010388:	2500      	movs	r5, #0
 801038a:	e04a      	b.n	8010422 <xQueueGenericReceive+0xce>
 801038c:	2500      	movs	r5, #0
 801038e:	e048      	b.n	8010422 <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8010390:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010392:	0031      	movs	r1, r6
 8010394:	0020      	movs	r0, r4
 8010396:	f7ff fe09 	bl	800ffac <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 801039a:	2f00      	cmp	r7, #0
 801039c:	d118      	bne.n	80103d0 <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 801039e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80103a0:	3b01      	subs	r3, #1
 80103a2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103a4:	6823      	ldr	r3, [r4, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d102      	bne.n	80103b0 <xQueueGenericReceive+0x5c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80103aa:	f000 ff6b 	bl	8011284 <pvTaskIncrementMutexHeldCount>
 80103ae:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d007      	beq.n	80103c6 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80103b6:	0020      	movs	r0, r4
 80103b8:	3010      	adds	r0, #16
 80103ba:	f000 fd9d 	bl	8010ef8 <xTaskRemoveFromEventList>
 80103be:	2801      	cmp	r0, #1
 80103c0:	d101      	bne.n	80103c6 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 80103c2:	f001 fa61 	bl	8011888 <vPortYield>
				taskEXIT_CRITICAL();
 80103c6:	f001 fa77 	bl	80118b8 <vPortExitCritical>
				return pdPASS;
 80103ca:	2001      	movs	r0, #1
}
 80103cc:	b005      	add	sp, #20
 80103ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80103d0:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d0f6      	beq.n	80103c6 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103d8:	0020      	movs	r0, r4
 80103da:	3024      	adds	r0, #36	; 0x24
 80103dc:	f000 fd8c 	bl	8010ef8 <xTaskRemoveFromEventList>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0f0      	beq.n	80103c6 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 80103e4:	f001 fa50 	bl	8011888 <vPortYield>
 80103e8:	e7ed      	b.n	80103c6 <xQueueGenericReceive+0x72>
					taskEXIT_CRITICAL();
 80103ea:	f001 fa65 	bl	80118b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80103ee:	2000      	movs	r0, #0
 80103f0:	e7ec      	b.n	80103cc <xQueueGenericReceive+0x78>
					vTaskSetTimeOutState( &xTimeOut );
 80103f2:	a802      	add	r0, sp, #8
 80103f4:	f000 fdc2 	bl	8010f7c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103f8:	3501      	adds	r5, #1
 80103fa:	e01c      	b.n	8010436 <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 80103fc:	2300      	movs	r3, #0
 80103fe:	6463      	str	r3, [r4, #68]	; 0x44
 8010400:	e022      	b.n	8010448 <xQueueGenericReceive+0xf4>
 8010402:	2300      	movs	r3, #0
 8010404:	64a3      	str	r3, [r4, #72]	; 0x48
 8010406:	e022      	b.n	801044e <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 8010408:	f001 fa4a 	bl	80118a0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 801040c:	6860      	ldr	r0, [r4, #4]
 801040e:	f000 fe11 	bl	8011034 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8010412:	f001 fa51 	bl	80118b8 <vPortExitCritical>
 8010416:	e02a      	b.n	801046e <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 8010418:	0020      	movs	r0, r4
 801041a:	f7ff fdd9 	bl	800ffd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801041e:	f000 fb97 	bl	8010b50 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010422:	f001 fa3d 	bl	80118a0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1b1      	bne.n	8010390 <xQueueGenericReceive+0x3c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801042c:	9b01      	ldr	r3, [sp, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d0db      	beq.n	80103ea <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 8010432:	2d00      	cmp	r5, #0
 8010434:	d0dd      	beq.n	80103f2 <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 8010436:	f001 fa3f 	bl	80118b8 <vPortExitCritical>
		vTaskSuspendAll();
 801043a:	f000 faeb 	bl	8010a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801043e:	f001 fa2f 	bl	80118a0 <vPortEnterCritical>
 8010442:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010444:	3301      	adds	r3, #1
 8010446:	d0d9      	beq.n	80103fc <xQueueGenericReceive+0xa8>
 8010448:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801044a:	3301      	adds	r3, #1
 801044c:	d0d9      	beq.n	8010402 <xQueueGenericReceive+0xae>
 801044e:	f001 fa33 	bl	80118b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010452:	a901      	add	r1, sp, #4
 8010454:	a802      	add	r0, sp, #8
 8010456:	f000 fda1 	bl	8010f9c <xTaskCheckForTimeOut>
 801045a:	2800      	cmp	r0, #0
 801045c:	d116      	bne.n	801048c <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801045e:	0020      	movs	r0, r4
 8010460:	f7ff fd52 	bl	800ff08 <prvIsQueueEmpty>
 8010464:	2800      	cmp	r0, #0
 8010466:	d0d7      	beq.n	8010418 <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d0cc      	beq.n	8010408 <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801046e:	0020      	movs	r0, r4
 8010470:	3024      	adds	r0, #36	; 0x24
 8010472:	9901      	ldr	r1, [sp, #4]
 8010474:	f000 fd02 	bl	8010e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010478:	0020      	movs	r0, r4
 801047a:	f7ff fda9 	bl	800ffd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801047e:	f000 fb67 	bl	8010b50 <xTaskResumeAll>
 8010482:	2800      	cmp	r0, #0
 8010484:	d1cd      	bne.n	8010422 <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 8010486:	f001 f9ff 	bl	8011888 <vPortYield>
 801048a:	e7ca      	b.n	8010422 <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 801048c:	0020      	movs	r0, r4
 801048e:	f7ff fd9f 	bl	800ffd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010492:	f000 fb5d 	bl	8010b50 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 8010496:	2000      	movs	r0, #0
 8010498:	e798      	b.n	80103cc <xQueueGenericReceive+0x78>

0801049a <xQueueReceiveFromISR>:
{
 801049a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049c:	0004      	movs	r4, r0
 801049e:	000f      	movs	r7, r1
 80104a0:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 80104a2:	2800      	cmp	r0, #0
 80104a4:	d006      	beq.n	80104b4 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104a6:	2900      	cmp	r1, #0
 80104a8:	d106      	bne.n	80104b8 <xQueueReceiveFromISR+0x1e>
 80104aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d003      	beq.n	80104b8 <xQueueReceiveFromISR+0x1e>
 80104b0:	b672      	cpsid	i
 80104b2:	e7fe      	b.n	80104b2 <xQueueReceiveFromISR+0x18>
	configASSERT( pxQueue );
 80104b4:	b672      	cpsid	i
 80104b6:	e7fe      	b.n	80104b6 <xQueueReceiveFromISR+0x1c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104b8:	f001 fa0e 	bl	80118d8 <ulSetInterruptMaskFromISR>
 80104bc:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d01c      	beq.n	80104fe <xQueueReceiveFromISR+0x64>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104c4:	0039      	movs	r1, r7
 80104c6:	0020      	movs	r0, r4
 80104c8:	f7ff fd70 	bl	800ffac <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80104cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104ce:	3b01      	subs	r3, #1
 80104d0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 80104d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104d4:	3301      	adds	r3, #1
 80104d6:	d004      	beq.n	80104e2 <xQueueReceiveFromISR+0x48>
				++( pxQueue->xRxLock );
 80104d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104da:	3301      	adds	r3, #1
 80104dc:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80104de:	2401      	movs	r4, #1
 80104e0:	e00e      	b.n	8010500 <xQueueReceiveFromISR+0x66>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d010      	beq.n	801050a <xQueueReceiveFromISR+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104e8:	0020      	movs	r0, r4
 80104ea:	3010      	adds	r0, #16
 80104ec:	f000 fd04 	bl	8010ef8 <xTaskRemoveFromEventList>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d00c      	beq.n	801050e <xQueueReceiveFromISR+0x74>
						if( pxHigherPriorityTaskWoken != NULL )
 80104f4:	2e00      	cmp	r6, #0
 80104f6:	d00c      	beq.n	8010512 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104f8:	2401      	movs	r4, #1
 80104fa:	6034      	str	r4, [r6, #0]
 80104fc:	e000      	b.n	8010500 <xQueueReceiveFromISR+0x66>
			xReturn = pdFAIL;
 80104fe:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010500:	0028      	movs	r0, r5
 8010502:	f001 f9ee 	bl	80118e2 <vClearInterruptMaskFromISR>
}
 8010506:	0020      	movs	r0, r4
 8010508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 801050a:	2401      	movs	r4, #1
 801050c:	e7f8      	b.n	8010500 <xQueueReceiveFromISR+0x66>
 801050e:	2401      	movs	r4, #1
 8010510:	e7f6      	b.n	8010500 <xQueueReceiveFromISR+0x66>
 8010512:	2401      	movs	r4, #1
 8010514:	e7f4      	b.n	8010500 <xQueueReceiveFromISR+0x66>
	...

08010518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010518:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801051a:	2300      	movs	r3, #0
 801051c:	2b07      	cmp	r3, #7
 801051e:	d80a      	bhi.n	8010536 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010520:	00da      	lsls	r2, r3, #3
 8010522:	4c05      	ldr	r4, [pc, #20]	; (8010538 <vQueueAddToRegistry+0x20>)
 8010524:	5912      	ldr	r2, [r2, r4]
 8010526:	2a00      	cmp	r2, #0
 8010528:	d001      	beq.n	801052e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801052a:	3301      	adds	r3, #1
 801052c:	e7f6      	b.n	801051c <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801052e:	00db      	lsls	r3, r3, #3
 8010530:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010532:	18e3      	adds	r3, r4, r3
 8010534:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010536:	bd10      	pop	{r4, pc}
 8010538:	2000726c 	.word	0x2000726c

0801053c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 801053c:	b570      	push	{r4, r5, r6, lr}
 801053e:	0004      	movs	r4, r0
 8010540:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010542:	f001 f9ad 	bl	80118a0 <vPortEnterCritical>
 8010546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010548:	3301      	adds	r3, #1
 801054a:	d00b      	beq.n	8010564 <vQueueWaitForMessageRestricted+0x28>
 801054c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801054e:	3301      	adds	r3, #1
 8010550:	d00b      	beq.n	801056a <vQueueWaitForMessageRestricted+0x2e>
 8010552:	f001 f9b1 	bl	80118b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010558:	2b00      	cmp	r3, #0
 801055a:	d009      	beq.n	8010570 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801055c:	0020      	movs	r0, r4
 801055e:	f7ff fd37 	bl	800ffd0 <prvUnlockQueue>
	}
 8010562:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8010564:	2300      	movs	r3, #0
 8010566:	6463      	str	r3, [r4, #68]	; 0x44
 8010568:	e7f0      	b.n	801054c <vQueueWaitForMessageRestricted+0x10>
 801056a:	2300      	movs	r3, #0
 801056c:	64a3      	str	r3, [r4, #72]	; 0x48
 801056e:	e7f0      	b.n	8010552 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010570:	0020      	movs	r0, r4
 8010572:	3024      	adds	r0, #36	; 0x24
 8010574:	0029      	movs	r1, r5
 8010576:	f000 fca5 	bl	8010ec4 <vTaskPlaceOnEventListRestricted>
 801057a:	e7ef      	b.n	801055c <vQueueWaitForMessageRestricted+0x20>

0801057c <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 801057c:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801057e:	e001      	b.n	8010584 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8010580:	3001      	adds	r0, #1
			ulCount++;
 8010582:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8010584:	7802      	ldrb	r2, [r0, #0]
 8010586:	2aa5      	cmp	r2, #165	; 0xa5
 8010588:	d0fa      	beq.n	8010580 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801058a:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 801058c:	b298      	uxth	r0, r3
	}
 801058e:	4770      	bx	lr

08010590 <prvListTaskWithinSingleList>:
	{
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	46de      	mov	lr, fp
 8010594:	4657      	mov	r7, sl
 8010596:	464e      	mov	r6, r9
 8010598:	4645      	mov	r5, r8
 801059a:	b5e0      	push	{r5, r6, r7, lr}
 801059c:	4682      	mov	sl, r0
 801059e:	000e      	movs	r6, r1
 80105a0:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80105a2:	680f      	ldr	r7, [r1, #0]
 80105a4:	2f00      	cmp	r7, #0
 80105a6:	d039      	beq.n	801061c <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80105a8:	684b      	ldr	r3, [r1, #4]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	604b      	str	r3, [r1, #4]
 80105ae:	2208      	movs	r2, #8
 80105b0:	4691      	mov	r9, r2
 80105b2:	4489      	add	r9, r1
 80105b4:	454b      	cmp	r3, r9
 80105b6:	d004      	beq.n	80105c2 <prvListTaskWithinSingleList+0x32>
 80105b8:	6873      	ldr	r3, [r6, #4]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 80105be:	2700      	movs	r7, #0
 80105c0:	e010      	b.n	80105e4 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	604b      	str	r3, [r1, #4]
 80105c6:	e7f7      	b.n	80105b8 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	6073      	str	r3, [r6, #4]
 80105cc:	e00f      	b.n	80105ee <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80105ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80105d0:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 80105d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80105d4:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80105d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80105d8:	f7ff ffd0 	bl	801057c <prvTaskCheckFreeStackSpace>
 80105dc:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 80105de:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 80105e0:	45ab      	cmp	fp, r5
 80105e2:	d01b      	beq.n	801061c <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80105e4:	6873      	ldr	r3, [r6, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	6073      	str	r3, [r6, #4]
 80105ea:	4599      	cmp	r9, r3
 80105ec:	d0ec      	beq.n	80105c8 <prvListTaskWithinSingleList+0x38>
 80105ee:	6873      	ldr	r3, [r6, #4]
 80105f0:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 80105f2:	017c      	lsls	r4, r7, #5
 80105f4:	4454      	add	r4, sl
 80105f6:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 80105f8:	002b      	movs	r3, r5
 80105fa:	3334      	adds	r3, #52	; 0x34
 80105fc:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80105fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010600:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8010602:	4643      	mov	r3, r8
 8010604:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8010606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010608:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 801060a:	4643      	mov	r3, r8
 801060c:	2b03      	cmp	r3, #3
 801060e:	d1de      	bne.n	80105ce <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 8010610:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0db      	beq.n	80105ce <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8010616:	2302      	movs	r3, #2
 8010618:	7323      	strb	r3, [r4, #12]
 801061a:	e7d8      	b.n	80105ce <prvListTaskWithinSingleList+0x3e>
	}
 801061c:	0038      	movs	r0, r7
 801061e:	bc3c      	pop	{r2, r3, r4, r5}
 8010620:	4690      	mov	r8, r2
 8010622:	4699      	mov	r9, r3
 8010624:	46a2      	mov	sl, r4
 8010626:	46ab      	mov	fp, r5
 8010628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801062c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801062c:	4b08      	ldr	r3, [pc, #32]	; (8010650 <prvResetNextTaskUnblockTime+0x24>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d007      	beq.n	8010646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010636:	4b06      	ldr	r3, [pc, #24]	; (8010650 <prvResetNextTaskUnblockTime+0x24>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	4b04      	ldr	r3, [pc, #16]	; (8010654 <prvResetNextTaskUnblockTime+0x28>)
 8010642:	601a      	str	r2, [r3, #0]
	}
}
 8010644:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8010646:	4b03      	ldr	r3, [pc, #12]	; (8010654 <prvResetNextTaskUnblockTime+0x28>)
 8010648:	2201      	movs	r2, #1
 801064a:	4252      	negs	r2, r2
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	e7f9      	b.n	8010644 <prvResetNextTaskUnblockTime+0x18>
 8010650:	2000213c 	.word	0x2000213c
 8010654:	200000c8 	.word	0x200000c8

08010658 <prvDeleteTCB>:
	{
 8010658:	b510      	push	{r4, lr}
 801065a:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 801065c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801065e:	f001 fa4b 	bl	8011af8 <vPortFree>
		vPortFree( pxTCB );
 8010662:	0020      	movs	r0, r4
 8010664:	f001 fa48 	bl	8011af8 <vPortFree>
	}
 8010668:	bd10      	pop	{r4, pc}

0801066a <prvAllocateTCBAndStack>:
{
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	0006      	movs	r6, r0
 801066e:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010670:	d103      	bne.n	801067a <prvAllocateTCBAndStack+0x10>
 8010672:	0080      	lsls	r0, r0, #2
 8010674:	f001 f9c8 	bl	8011a08 <pvPortMalloc>
 8010678:	0005      	movs	r5, r0
		if( pxStack != NULL )
 801067a:	2d00      	cmp	r5, #0
 801067c:	d012      	beq.n	80106a4 <prvAllocateTCBAndStack+0x3a>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 801067e:	2060      	movs	r0, #96	; 0x60
 8010680:	f001 f9c2 	bl	8011a08 <pvPortMalloc>
 8010684:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 8010686:	d009      	beq.n	801069c <prvAllocateTCBAndStack+0x32>
				pxNewTCB->pxStack = pxStack;
 8010688:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 801068a:	2c00      	cmp	r4, #0
 801068c:	d004      	beq.n	8010698 <prvAllocateTCBAndStack+0x2e>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 801068e:	00b2      	lsls	r2, r6, #2
 8010690:	21a5      	movs	r1, #165	; 0xa5
 8010692:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010694:	f004 fe4a 	bl	801532c <memset>
}
 8010698:	0020      	movs	r0, r4
 801069a:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 801069c:	0028      	movs	r0, r5
 801069e:	f001 fa2b 	bl	8011af8 <vPortFree>
 80106a2:	e7f2      	b.n	801068a <prvAllocateTCBAndStack+0x20>
			pxNewTCB = NULL;
 80106a4:	2400      	movs	r4, #0
	return pxNewTCB;
 80106a6:	e7f7      	b.n	8010698 <prvAllocateTCBAndStack+0x2e>

080106a8 <prvInitialiseTCBVariables>:
{
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	0004      	movs	r4, r0
 80106ac:	0015      	movs	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106ae:	2300      	movs	r3, #0
 80106b0:	2b0c      	cmp	r3, #12
 80106b2:	d91a      	bls.n	80106ea <prvInitialiseTCBVariables+0x42>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80106b4:	2340      	movs	r3, #64	; 0x40
 80106b6:	2200      	movs	r2, #0
 80106b8:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80106ba:	2d06      	cmp	r5, #6
 80106bc:	d900      	bls.n	80106c0 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80106be:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 80106c0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 80106c2:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80106c4:	2600      	movs	r6, #0
 80106c6:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80106c8:	1d20      	adds	r0, r4, #4
 80106ca:	f7ff fbd4 	bl	800fe76 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80106ce:	0020      	movs	r0, r4
 80106d0:	3018      	adds	r0, #24
 80106d2:	f7ff fbd0 	bl	800fe76 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80106d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106d8:	2307      	movs	r3, #7
 80106da:	1b5d      	subs	r5, r3, r5
 80106dc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80106de:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 80106e0:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 80106e2:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 80106e4:	3355      	adds	r3, #85	; 0x55
 80106e6:	54e6      	strb	r6, [r4, r3]
}
 80106e8:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80106ea:	18c8      	adds	r0, r1, r3
 80106ec:	7806      	ldrb	r6, [r0, #0]
 80106ee:	18e2      	adds	r2, r4, r3
 80106f0:	3234      	adds	r2, #52	; 0x34
 80106f2:	7016      	strb	r6, [r2, #0]
		if( pcName[ x ] == 0x00 )
 80106f4:	7802      	ldrb	r2, [r0, #0]
 80106f6:	2a00      	cmp	r2, #0
 80106f8:	d0dc      	beq.n	80106b4 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106fa:	3301      	adds	r3, #1
 80106fc:	e7d8      	b.n	80106b0 <prvInitialiseTCBVariables+0x8>
	...

08010700 <prvInitialiseTaskLists>:
{
 8010700:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010702:	2400      	movs	r4, #0
 8010704:	2c06      	cmp	r4, #6
 8010706:	d915      	bls.n	8010734 <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 8010708:	4d0e      	ldr	r5, [pc, #56]	; (8010744 <prvInitialiseTaskLists+0x44>)
 801070a:	0028      	movs	r0, r5
 801070c:	f7ff fba8 	bl	800fe60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010710:	4c0d      	ldr	r4, [pc, #52]	; (8010748 <prvInitialiseTaskLists+0x48>)
 8010712:	0020      	movs	r0, r4
 8010714:	f7ff fba4 	bl	800fe60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010718:	480c      	ldr	r0, [pc, #48]	; (801074c <prvInitialiseTaskLists+0x4c>)
 801071a:	f7ff fba1 	bl	800fe60 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801071e:	480c      	ldr	r0, [pc, #48]	; (8010750 <prvInitialiseTaskLists+0x50>)
 8010720:	f7ff fb9e 	bl	800fe60 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010724:	480b      	ldr	r0, [pc, #44]	; (8010754 <prvInitialiseTaskLists+0x54>)
 8010726:	f7ff fb9b 	bl	800fe60 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801072a:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <prvInitialiseTaskLists+0x58>)
 801072c:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801072e:	4b0b      	ldr	r3, [pc, #44]	; (801075c <prvInitialiseTaskLists+0x5c>)
 8010730:	601c      	str	r4, [r3, #0]
}
 8010732:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010734:	2014      	movs	r0, #20
 8010736:	4360      	muls	r0, r4
 8010738:	4b09      	ldr	r3, [pc, #36]	; (8010760 <prvInitialiseTaskLists+0x60>)
 801073a:	18c0      	adds	r0, r0, r3
 801073c:	f7ff fb90 	bl	800fe60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010740:	3401      	adds	r4, #1
 8010742:	e7df      	b.n	8010704 <prvInitialiseTaskLists+0x4>
 8010744:	200021ec 	.word	0x200021ec
 8010748:	20002200 	.word	0x20002200
 801074c:	20002218 	.word	0x20002218
 8010750:	20002244 	.word	0x20002244
 8010754:	20002230 	.word	0x20002230
 8010758:	2000213c 	.word	0x2000213c
 801075c:	20002140 	.word	0x20002140
 8010760:	20002144 	.word	0x20002144

08010764 <prvAddCurrentTaskToDelayedList>:
{
 8010764:	b510      	push	{r4, lr}
 8010766:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8010768:	4b0e      	ldr	r3, [pc, #56]	; (80107a4 <prvAddCurrentTaskToDelayedList+0x40>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 801076e:	4b0e      	ldr	r3, [pc, #56]	; (80107a8 <prvAddCurrentTaskToDelayedList+0x44>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4283      	cmp	r3, r0
 8010774:	d80d      	bhi.n	8010792 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010776:	4b0d      	ldr	r3, [pc, #52]	; (80107ac <prvAddCurrentTaskToDelayedList+0x48>)
 8010778:	6818      	ldr	r0, [r3, #0]
 801077a:	4b0a      	ldr	r3, [pc, #40]	; (80107a4 <prvAddCurrentTaskToDelayedList+0x40>)
 801077c:	6819      	ldr	r1, [r3, #0]
 801077e:	3104      	adds	r1, #4
 8010780:	f7ff fb88 	bl	800fe94 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <prvAddCurrentTaskToDelayedList+0x4c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	42a3      	cmp	r3, r4
 801078a:	d909      	bls.n	80107a0 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 801078c:	4b08      	ldr	r3, [pc, #32]	; (80107b0 <prvAddCurrentTaskToDelayedList+0x4c>)
 801078e:	601c      	str	r4, [r3, #0]
}
 8010790:	e006      	b.n	80107a0 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010792:	4b08      	ldr	r3, [pc, #32]	; (80107b4 <prvAddCurrentTaskToDelayedList+0x50>)
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <prvAddCurrentTaskToDelayedList+0x40>)
 8010798:	6819      	ldr	r1, [r3, #0]
 801079a:	3104      	adds	r1, #4
 801079c:	f7ff fb7a 	bl	800fe94 <vListInsert>
}
 80107a0:	bd10      	pop	{r4, pc}
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	20002138 	.word	0x20002138
 80107a8:	20002258 	.word	0x20002258
 80107ac:	2000213c 	.word	0x2000213c
 80107b0:	200000c8 	.word	0x200000c8
 80107b4:	20002140 	.word	0x20002140

080107b8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80107b8:	b510      	push	{r4, lr}
 80107ba:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80107bc:	f004 ffec 	bl	8015798 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80107c0:	0020      	movs	r0, r4
 80107c2:	f7ef fca9 	bl	8000118 <strlen>
 80107c6:	e002      	b.n	80107ce <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 80107c8:	2320      	movs	r3, #32
 80107ca:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80107cc:	3001      	adds	r0, #1
 80107ce:	280b      	cmp	r0, #11
 80107d0:	ddfa      	ble.n	80107c8 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 80107d2:	1820      	adds	r0, r4, r0
 80107d4:	2300      	movs	r3, #0
 80107d6:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 80107d8:	bd10      	pop	{r4, pc}
	...

080107dc <xTaskGenericCreate>:
{
 80107dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107de:	46ce      	mov	lr, r9
 80107e0:	b500      	push	{lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	0006      	movs	r6, r0
 80107e6:	9102      	str	r1, [sp, #8]
 80107e8:	0015      	movs	r5, r2
 80107ea:	9303      	str	r3, [sp, #12]
 80107ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d101      	bne.n	80107f6 <xTaskGenericCreate+0x1a>
 80107f2:	b672      	cpsid	i
 80107f4:	e7fe      	b.n	80107f4 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 80107f6:	2c06      	cmp	r4, #6
 80107f8:	d901      	bls.n	80107fe <xTaskGenericCreate+0x22>
 80107fa:	b672      	cpsid	i
 80107fc:	e7fe      	b.n	80107fc <xTaskGenericCreate+0x20>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80107fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010800:	0010      	movs	r0, r2
 8010802:	f7ff ff32 	bl	801066a <prvAllocateTCBAndStack>
 8010806:	1e07      	subs	r7, r0, #0
	if( pxNewTCB != NULL )
 8010808:	d05a      	beq.n	80108c0 <xTaskGenericCreate+0xe4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 801080a:	4b31      	ldr	r3, [pc, #196]	; (80108d0 <xTaskGenericCreate+0xf4>)
 801080c:	18eb      	adds	r3, r5, r3
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010812:	4694      	mov	ip, r2
 8010814:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010816:	2207      	movs	r2, #7
 8010818:	4393      	bics	r3, r2
 801081a:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 801081c:	9500      	str	r5, [sp, #0]
 801081e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010820:	0022      	movs	r2, r4
 8010822:	9902      	ldr	r1, [sp, #8]
 8010824:	f7ff ff40 	bl	80106a8 <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010828:	9a03      	ldr	r2, [sp, #12]
 801082a:	0031      	movs	r1, r6
 801082c:	4648      	mov	r0, r9
 801082e:	f000 ffff 	bl	8011830 <pxPortInitialiseStack>
 8010832:	6038      	str	r0, [r7, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8010834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010836:	2b00      	cmp	r3, #0
 8010838:	d000      	beq.n	801083c <xTaskGenericCreate+0x60>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801083a:	601f      	str	r7, [r3, #0]
		taskENTER_CRITICAL();
 801083c:	f001 f830 	bl	80118a0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 8010840:	4a24      	ldr	r2, [pc, #144]	; (80108d4 <xTaskGenericCreate+0xf8>)
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	3301      	adds	r3, #1
 8010846:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8010848:	4b23      	ldr	r3, [pc, #140]	; (80108d8 <xTaskGenericCreate+0xfc>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d12b      	bne.n	80108a8 <xTaskGenericCreate+0xcc>
				pxCurrentTCB =  pxNewTCB;
 8010850:	4b21      	ldr	r3, [pc, #132]	; (80108d8 <xTaskGenericCreate+0xfc>)
 8010852:	601f      	str	r7, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010854:	6813      	ldr	r3, [r2, #0]
 8010856:	2b01      	cmp	r3, #1
 8010858:	d101      	bne.n	801085e <xTaskGenericCreate+0x82>
					prvInitialiseTaskLists();
 801085a:	f7ff ff51 	bl	8010700 <prvInitialiseTaskLists>
			uxTaskNumber++;
 801085e:	4a1f      	ldr	r2, [pc, #124]	; (80108dc <xTaskGenericCreate+0x100>)
 8010860:	6813      	ldr	r3, [r2, #0]
 8010862:	3301      	adds	r3, #1
 8010864:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010866:	647b      	str	r3, [r7, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 8010868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086a:	4a1d      	ldr	r2, [pc, #116]	; (80108e0 <xTaskGenericCreate+0x104>)
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	4293      	cmp	r3, r2
 8010870:	d901      	bls.n	8010876 <xTaskGenericCreate+0x9a>
 8010872:	4a1b      	ldr	r2, [pc, #108]	; (80108e0 <xTaskGenericCreate+0x104>)
 8010874:	6013      	str	r3, [r2, #0]
 8010876:	1d39      	adds	r1, r7, #4
 8010878:	2014      	movs	r0, #20
 801087a:	4358      	muls	r0, r3
 801087c:	4b19      	ldr	r3, [pc, #100]	; (80108e4 <xTaskGenericCreate+0x108>)
 801087e:	18c0      	adds	r0, r0, r3
 8010880:	f7ff fafc 	bl	800fe7c <vListInsertEnd>
		taskEXIT_CRITICAL();
 8010884:	f001 f818 	bl	80118b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8010888:	4b17      	ldr	r3, [pc, #92]	; (80108e8 <xTaskGenericCreate+0x10c>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d01a      	beq.n	80108c6 <xTaskGenericCreate+0xea>
			if( pxCurrentTCB->uxPriority < uxPriority )
 8010890:	4b11      	ldr	r3, [pc, #68]	; (80108d8 <xTaskGenericCreate+0xfc>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010896:	42a3      	cmp	r3, r4
 8010898:	d217      	bcs.n	80108ca <xTaskGenericCreate+0xee>
				taskYIELD_IF_USING_PREEMPTION();
 801089a:	f000 fff5 	bl	8011888 <vPortYield>
			xReturn = pdPASS;
 801089e:	2001      	movs	r0, #1
}
 80108a0:	b004      	add	sp, #16
 80108a2:	bc04      	pop	{r2}
 80108a4:	4691      	mov	r9, r2
 80108a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
 80108a8:	4b0f      	ldr	r3, [pc, #60]	; (80108e8 <xTaskGenericCreate+0x10c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d1d6      	bne.n	801085e <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80108b0:	4b09      	ldr	r3, [pc, #36]	; (80108d8 <xTaskGenericCreate+0xfc>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b6:	42a3      	cmp	r3, r4
 80108b8:	d8d1      	bhi.n	801085e <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 80108ba:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <xTaskGenericCreate+0xfc>)
 80108bc:	601f      	str	r7, [r3, #0]
 80108be:	e7ce      	b.n	801085e <xTaskGenericCreate+0x82>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80108c0:	2001      	movs	r0, #1
 80108c2:	4240      	negs	r0, r0
 80108c4:	e7ec      	b.n	80108a0 <xTaskGenericCreate+0xc4>
			xReturn = pdPASS;
 80108c6:	2001      	movs	r0, #1
 80108c8:	e7ea      	b.n	80108a0 <xTaskGenericCreate+0xc4>
 80108ca:	2001      	movs	r0, #1
	return xReturn;
 80108cc:	e7e8      	b.n	80108a0 <xTaskGenericCreate+0xc4>
 80108ce:	46c0      	nop			; (mov r8, r8)
 80108d0:	3fffffff 	.word	0x3fffffff
 80108d4:	200021d4 	.word	0x200021d4
 80108d8:	20002138 	.word	0x20002138
 80108dc:	200021e0 	.word	0x200021e0
 80108e0:	200021e8 	.word	0x200021e8
 80108e4:	20002144 	.word	0x20002144
 80108e8:	2000222c 	.word	0x2000222c

080108ec <uxTaskPriorityGet>:
	{
 80108ec:	b510      	push	{r4, lr}
 80108ee:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 80108f0:	f000 ffd6 	bl	80118a0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80108f4:	2c00      	cmp	r4, #0
 80108f6:	d004      	beq.n	8010902 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 80108f8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 80108fa:	f000 ffdd 	bl	80118b8 <vPortExitCritical>
	}
 80108fe:	0020      	movs	r0, r4
 8010900:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8010902:	4b01      	ldr	r3, [pc, #4]	; (8010908 <uxTaskPriorityGet+0x1c>)
 8010904:	681c      	ldr	r4, [r3, #0]
 8010906:	e7f7      	b.n	80108f8 <uxTaskPriorityGet+0xc>
 8010908:	20002138 	.word	0x20002138

0801090c <vTaskPrioritySet>:
	{
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	0004      	movs	r4, r0
 8010910:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8010912:	2906      	cmp	r1, #6
 8010914:	d901      	bls.n	801091a <vTaskPrioritySet+0xe>
 8010916:	b672      	cpsid	i
 8010918:	e7fe      	b.n	8010918 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 801091a:	f000 ffc1 	bl	80118a0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 801091e:	2c00      	cmp	r4, #0
 8010920:	d101      	bne.n	8010926 <vTaskPrioritySet+0x1a>
 8010922:	4b23      	ldr	r3, [pc, #140]	; (80109b0 <vTaskPrioritySet+0xa4>)
 8010924:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8010926:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 8010928:	4295      	cmp	r5, r2
 801092a:	d032      	beq.n	8010992 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 801092c:	d934      	bls.n	8010998 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 801092e:	4b20      	ldr	r3, [pc, #128]	; (80109b0 <vTaskPrioritySet+0xa4>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	42a3      	cmp	r3, r4
 8010934:	d036      	beq.n	80109a4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8010936:	4b1e      	ldr	r3, [pc, #120]	; (80109b0 <vTaskPrioritySet+0xa4>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093c:	42ab      	cmp	r3, r5
 801093e:	d933      	bls.n	80109a8 <vTaskPrioritySet+0x9c>
	BaseType_t xYieldRequired = pdFALSE;
 8010940:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010942:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8010944:	428a      	cmp	r2, r1
 8010946:	d100      	bne.n	801094a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 8010948:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 801094a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801094c:	69a3      	ldr	r3, [r4, #24]
 801094e:	2b00      	cmp	r3, #0
 8010950:	db02      	blt.n	8010958 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010952:	2207      	movs	r2, #7
 8010954:	1b55      	subs	r5, r2, r5
 8010956:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8010958:	2314      	movs	r3, #20
 801095a:	434b      	muls	r3, r1
 801095c:	4a15      	ldr	r2, [pc, #84]	; (80109b4 <vTaskPrioritySet+0xa8>)
 801095e:	189b      	adds	r3, r3, r2
 8010960:	6962      	ldr	r2, [r4, #20]
 8010962:	429a      	cmp	r2, r3
 8010964:	d111      	bne.n	801098a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010966:	1d25      	adds	r5, r4, #4
 8010968:	0028      	movs	r0, r5
 801096a:	f7ff faab 	bl	800fec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801096e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010970:	4a11      	ldr	r2, [pc, #68]	; (80109b8 <vTaskPrioritySet+0xac>)
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	4293      	cmp	r3, r2
 8010976:	d901      	bls.n	801097c <vTaskPrioritySet+0x70>
 8010978:	4a0f      	ldr	r2, [pc, #60]	; (80109b8 <vTaskPrioritySet+0xac>)
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	2014      	movs	r0, #20
 801097e:	4358      	muls	r0, r3
 8010980:	4b0c      	ldr	r3, [pc, #48]	; (80109b4 <vTaskPrioritySet+0xa8>)
 8010982:	18c0      	adds	r0, r0, r3
 8010984:	0029      	movs	r1, r5
 8010986:	f7ff fa79 	bl	800fe7c <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 801098a:	2e01      	cmp	r6, #1
 801098c:	d101      	bne.n	8010992 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 801098e:	f000 ff7b 	bl	8011888 <vPortYield>
		taskEXIT_CRITICAL();
 8010992:	f000 ff91 	bl	80118b8 <vPortExitCritical>
	}
 8010996:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 8010998:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <vTaskPrioritySet+0xa4>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	42a3      	cmp	r3, r4
 801099e:	d005      	beq.n	80109ac <vTaskPrioritySet+0xa0>
	BaseType_t xYieldRequired = pdFALSE;
 80109a0:	2600      	movs	r6, #0
 80109a2:	e7ce      	b.n	8010942 <vTaskPrioritySet+0x36>
 80109a4:	2600      	movs	r6, #0
 80109a6:	e7cc      	b.n	8010942 <vTaskPrioritySet+0x36>
							xYieldRequired = pdTRUE;
 80109a8:	2601      	movs	r6, #1
 80109aa:	e7ca      	b.n	8010942 <vTaskPrioritySet+0x36>
					xYieldRequired = pdTRUE;
 80109ac:	2601      	movs	r6, #1
 80109ae:	e7c8      	b.n	8010942 <vTaskPrioritySet+0x36>
 80109b0:	20002138 	.word	0x20002138
 80109b4:	20002144 	.word	0x20002144
 80109b8:	200021e8 	.word	0x200021e8

080109bc <vTaskStartScheduler>:
{
 80109bc:	b500      	push	{lr}
 80109be:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80109c0:	2300      	movs	r3, #0
 80109c2:	9303      	str	r3, [sp, #12]
 80109c4:	9302      	str	r3, [sp, #8]
 80109c6:	9301      	str	r3, [sp, #4]
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	22a0      	movs	r2, #160	; 0xa0
 80109cc:	490d      	ldr	r1, [pc, #52]	; (8010a04 <vTaskStartScheduler+0x48>)
 80109ce:	480e      	ldr	r0, [pc, #56]	; (8010a08 <vTaskStartScheduler+0x4c>)
 80109d0:	f7ff ff04 	bl	80107dc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 80109d4:	2801      	cmp	r0, #1
 80109d6:	d005      	beq.n	80109e4 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 80109d8:	2801      	cmp	r0, #1
 80109da:	d006      	beq.n	80109ea <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 80109dc:	2800      	cmp	r0, #0
 80109de:	d10f      	bne.n	8010a00 <vTaskStartScheduler+0x44>
 80109e0:	b672      	cpsid	i
 80109e2:	e7fe      	b.n	80109e2 <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 80109e4:	f000 fd6c 	bl	80114c0 <xTimerCreateTimerTask>
 80109e8:	e7f6      	b.n	80109d8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 80109ea:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 80109ec:	4b07      	ldr	r3, [pc, #28]	; (8010a0c <vTaskStartScheduler+0x50>)
 80109ee:	2201      	movs	r2, #1
 80109f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80109f2:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <vTaskStartScheduler+0x54>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80109f8:	f7f7 fd32 	bl	8008460 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80109fc:	f000 ff2a 	bl	8011854 <xPortStartScheduler>
}
 8010a00:	b005      	add	sp, #20
 8010a02:	bd00      	pop	{pc}
 8010a04:	0801d210 	.word	0x0801d210
 8010a08:	08010cd1 	.word	0x08010cd1
 8010a0c:	2000222c 	.word	0x2000222c
 8010a10:	20002258 	.word	0x20002258

08010a14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010a14:	4a02      	ldr	r2, [pc, #8]	; (8010a20 <vTaskSuspendAll+0xc>)
 8010a16:	6813      	ldr	r3, [r2, #0]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	6013      	str	r3, [r2, #0]
}
 8010a1c:	4770      	bx	lr
 8010a1e:	46c0      	nop			; (mov r8, r8)
 8010a20:	200021dc 	.word	0x200021dc

08010a24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010a24:	4b01      	ldr	r3, [pc, #4]	; (8010a2c <xTaskGetTickCount+0x8>)
 8010a26:	6818      	ldr	r0, [r3, #0]
}
 8010a28:	4770      	bx	lr
 8010a2a:	46c0      	nop			; (mov r8, r8)
 8010a2c:	20002258 	.word	0x20002258

08010a30 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 8010a30:	4b01      	ldr	r3, [pc, #4]	; (8010a38 <xTaskGetTickCountFromISR+0x8>)
 8010a32:	6818      	ldr	r0, [r3, #0]
}
 8010a34:	4770      	bx	lr
 8010a36:	46c0      	nop			; (mov r8, r8)
 8010a38:	20002258 	.word	0x20002258

08010a3c <xTaskIncrementTick>:
{
 8010a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a3e:	4b39      	ldr	r3, [pc, #228]	; (8010b24 <xTaskIncrementTick+0xe8>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d162      	bne.n	8010b0c <xTaskIncrementTick+0xd0>
		++xTickCount;
 8010a46:	4b38      	ldr	r3, [pc, #224]	; (8010b28 <xTaskIncrementTick+0xec>)
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	3201      	adds	r2, #1
 8010a4c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 8010a4e:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 8010a50:	2f00      	cmp	r7, #0
 8010a52:	d112      	bne.n	8010a7a <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 8010a54:	4b35      	ldr	r3, [pc, #212]	; (8010b2c <xTaskIncrementTick+0xf0>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <xTaskIncrementTick+0x26>
 8010a5e:	b672      	cpsid	i
 8010a60:	e7fe      	b.n	8010a60 <xTaskIncrementTick+0x24>
 8010a62:	4a32      	ldr	r2, [pc, #200]	; (8010b2c <xTaskIncrementTick+0xf0>)
 8010a64:	6811      	ldr	r1, [r2, #0]
 8010a66:	4b32      	ldr	r3, [pc, #200]	; (8010b30 <xTaskIncrementTick+0xf4>)
 8010a68:	6818      	ldr	r0, [r3, #0]
 8010a6a:	6010      	str	r0, [r2, #0]
 8010a6c:	6019      	str	r1, [r3, #0]
 8010a6e:	4a31      	ldr	r2, [pc, #196]	; (8010b34 <xTaskIncrementTick+0xf8>)
 8010a70:	6813      	ldr	r3, [r2, #0]
 8010a72:	3301      	adds	r3, #1
 8010a74:	6013      	str	r3, [r2, #0]
 8010a76:	f7ff fdd9 	bl	801062c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 8010a7a:	4b2f      	ldr	r3, [pc, #188]	; (8010b38 <xTaskIncrementTick+0xfc>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	42bb      	cmp	r3, r7
 8010a80:	d93a      	bls.n	8010af8 <xTaskIncrementTick+0xbc>
BaseType_t xSwitchRequired = pdFALSE;
 8010a82:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a84:	4b2d      	ldr	r3, [pc, #180]	; (8010b3c <xTaskIncrementTick+0x100>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a8a:	0093      	lsls	r3, r2, #2
 8010a8c:	189b      	adds	r3, r3, r2
 8010a8e:	009a      	lsls	r2, r3, #2
 8010a90:	4b2b      	ldr	r3, [pc, #172]	; (8010b40 <xTaskIncrementTick+0x104>)
 8010a92:	58d3      	ldr	r3, [r2, r3]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d93e      	bls.n	8010b16 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 8010a98:	2401      	movs	r4, #1
 8010a9a:	e03c      	b.n	8010b16 <xTaskIncrementTick+0xda>
								xSwitchRequired = pdTRUE;
 8010a9c:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a9e:	4b23      	ldr	r3, [pc, #140]	; (8010b2c <xTaskIncrementTick+0xf0>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d029      	beq.n	8010afc <xTaskIncrementTick+0xc0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010aa8:	4b20      	ldr	r3, [pc, #128]	; (8010b2c <xTaskIncrementTick+0xf0>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010ab0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 8010ab2:	429f      	cmp	r7, r3
 8010ab4:	d327      	bcc.n	8010b06 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010ab6:	1d2e      	adds	r6, r5, #4
 8010ab8:	0030      	movs	r0, r6
 8010aba:	f7ff fa03 	bl	800fec4 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010abe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d003      	beq.n	8010acc <xTaskIncrementTick+0x90>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ac4:	0028      	movs	r0, r5
 8010ac6:	3018      	adds	r0, #24
 8010ac8:	f7ff f9fc 	bl	800fec4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010acc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010ace:	4b1d      	ldr	r3, [pc, #116]	; (8010b44 <xTaskIncrementTick+0x108>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d901      	bls.n	8010ada <xTaskIncrementTick+0x9e>
 8010ad6:	4b1b      	ldr	r3, [pc, #108]	; (8010b44 <xTaskIncrementTick+0x108>)
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	0093      	lsls	r3, r2, #2
 8010adc:	189b      	adds	r3, r3, r2
 8010ade:	0098      	lsls	r0, r3, #2
 8010ae0:	4b17      	ldr	r3, [pc, #92]	; (8010b40 <xTaskIncrementTick+0x104>)
 8010ae2:	18c0      	adds	r0, r0, r3
 8010ae4:	0031      	movs	r1, r6
 8010ae6:	f7ff f9c9 	bl	800fe7c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010aea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010aec:	4b13      	ldr	r3, [pc, #76]	; (8010b3c <xTaskIncrementTick+0x100>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d2d2      	bcs.n	8010a9c <xTaskIncrementTick+0x60>
 8010af6:	e7d2      	b.n	8010a9e <xTaskIncrementTick+0x62>
BaseType_t xSwitchRequired = pdFALSE;
 8010af8:	2400      	movs	r4, #0
 8010afa:	e7d0      	b.n	8010a9e <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = portMAX_DELAY;
 8010afc:	4b0e      	ldr	r3, [pc, #56]	; (8010b38 <xTaskIncrementTick+0xfc>)
 8010afe:	2201      	movs	r2, #1
 8010b00:	4252      	negs	r2, r2
 8010b02:	601a      	str	r2, [r3, #0]
						break;
 8010b04:	e7be      	b.n	8010a84 <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 8010b06:	4a0c      	ldr	r2, [pc, #48]	; (8010b38 <xTaskIncrementTick+0xfc>)
 8010b08:	6013      	str	r3, [r2, #0]
							break;
 8010b0a:	e7bb      	b.n	8010a84 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8010b0c:	4a0e      	ldr	r2, [pc, #56]	; (8010b48 <xTaskIncrementTick+0x10c>)
 8010b0e:	6813      	ldr	r3, [r2, #0]
 8010b10:	3301      	adds	r3, #1
 8010b12:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010b14:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8010b16:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <xTaskIncrementTick+0x110>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d000      	beq.n	8010b20 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 8010b1e:	2401      	movs	r4, #1
}
 8010b20:	0020      	movs	r0, r4
 8010b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b24:	200021dc 	.word	0x200021dc
 8010b28:	20002258 	.word	0x20002258
 8010b2c:	2000213c 	.word	0x2000213c
 8010b30:	20002140 	.word	0x20002140
 8010b34:	20002214 	.word	0x20002214
 8010b38:	200000c8 	.word	0x200000c8
 8010b3c:	20002138 	.word	0x20002138
 8010b40:	20002144 	.word	0x20002144
 8010b44:	200021e8 	.word	0x200021e8
 8010b48:	200021d8 	.word	0x200021d8
 8010b4c:	2000225c 	.word	0x2000225c

08010b50 <xTaskResumeAll>:
{
 8010b50:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8010b52:	4b30      	ldr	r3, [pc, #192]	; (8010c14 <xTaskResumeAll+0xc4>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d101      	bne.n	8010b5e <xTaskResumeAll+0xe>
 8010b5a:	b672      	cpsid	i
 8010b5c:	e7fe      	b.n	8010b5c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8010b5e:	f000 fe9f 	bl	80118a0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010b62:	4b2c      	ldr	r3, [pc, #176]	; (8010c14 <xTaskResumeAll+0xc4>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	3a01      	subs	r2, #1
 8010b68:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d14d      	bne.n	8010c0c <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010b70:	4b29      	ldr	r3, [pc, #164]	; (8010c18 <xTaskResumeAll+0xc8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d112      	bne.n	8010b9e <xTaskResumeAll+0x4e>
BaseType_t xAlreadyYielded = pdFALSE;
 8010b78:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010b7a:	f000 fe9d 	bl	80118b8 <vPortExitCritical>
}
 8010b7e:	0020      	movs	r0, r4
 8010b80:	bd70      	pop	{r4, r5, r6, pc}
					prvAddTaskToReadyList( pxTCB );
 8010b82:	0093      	lsls	r3, r2, #2
 8010b84:	189b      	adds	r3, r3, r2
 8010b86:	0098      	lsls	r0, r3, #2
 8010b88:	4b24      	ldr	r3, [pc, #144]	; (8010c1c <xTaskResumeAll+0xcc>)
 8010b8a:	18c0      	adds	r0, r0, r3
 8010b8c:	0029      	movs	r1, r5
 8010b8e:	f7ff f975 	bl	800fe7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010b94:	4b22      	ldr	r3, [pc, #136]	; (8010c20 <xTaskResumeAll+0xd0>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d216      	bcs.n	8010bcc <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b9e:	4b21      	ldr	r3, [pc, #132]	; (8010c24 <xTaskResumeAll+0xd4>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d016      	beq.n	8010bd4 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010ba6:	4b1f      	ldr	r3, [pc, #124]	; (8010c24 <xTaskResumeAll+0xd4>)
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bac:	0020      	movs	r0, r4
 8010bae:	3018      	adds	r0, #24
 8010bb0:	f7ff f988 	bl	800fec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010bb4:	1d25      	adds	r5, r4, #4
 8010bb6:	0028      	movs	r0, r5
 8010bb8:	f7ff f984 	bl	800fec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010bbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010bbe:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <xTaskResumeAll+0xd8>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d9dd      	bls.n	8010b82 <xTaskResumeAll+0x32>
 8010bc6:	4b18      	ldr	r3, [pc, #96]	; (8010c28 <xTaskResumeAll+0xd8>)
 8010bc8:	601a      	str	r2, [r3, #0]
 8010bca:	e7da      	b.n	8010b82 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 8010bcc:	4b17      	ldr	r3, [pc, #92]	; (8010c2c <xTaskResumeAll+0xdc>)
 8010bce:	2201      	movs	r2, #1
 8010bd0:	601a      	str	r2, [r3, #0]
 8010bd2:	e7e4      	b.n	8010b9e <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8010bd4:	4b16      	ldr	r3, [pc, #88]	; (8010c30 <xTaskResumeAll+0xe0>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d112      	bne.n	8010c02 <xTaskResumeAll+0xb2>
				if( xYieldPending == pdTRUE )
 8010bdc:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <xTaskResumeAll+0xdc>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d115      	bne.n	8010c10 <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 8010be4:	f000 fe50 	bl	8011888 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8010be8:	2401      	movs	r4, #1
 8010bea:	e7c6      	b.n	8010b7a <xTaskResumeAll+0x2a>
						if( xTaskIncrementTick() != pdFALSE )
 8010bec:	f7ff ff26 	bl	8010a3c <xTaskIncrementTick>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d002      	beq.n	8010bfa <xTaskResumeAll+0xaa>
							xYieldPending = pdTRUE;
 8010bf4:	4b0d      	ldr	r3, [pc, #52]	; (8010c2c <xTaskResumeAll+0xdc>)
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	601a      	str	r2, [r3, #0]
						--uxPendedTicks;
 8010bfa:	4a0d      	ldr	r2, [pc, #52]	; (8010c30 <xTaskResumeAll+0xe0>)
 8010bfc:	6813      	ldr	r3, [r2, #0]
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010c02:	4b0b      	ldr	r3, [pc, #44]	; (8010c30 <xTaskResumeAll+0xe0>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1f0      	bne.n	8010bec <xTaskResumeAll+0x9c>
 8010c0a:	e7e7      	b.n	8010bdc <xTaskResumeAll+0x8c>
BaseType_t xAlreadyYielded = pdFALSE;
 8010c0c:	2400      	movs	r4, #0
 8010c0e:	e7b4      	b.n	8010b7a <xTaskResumeAll+0x2a>
 8010c10:	2400      	movs	r4, #0
 8010c12:	e7b2      	b.n	8010b7a <xTaskResumeAll+0x2a>
 8010c14:	200021dc 	.word	0x200021dc
 8010c18:	200021d4 	.word	0x200021d4
 8010c1c:	20002144 	.word	0x20002144
 8010c20:	20002138 	.word	0x20002138
 8010c24:	20002218 	.word	0x20002218
 8010c28:	200021e8 	.word	0x200021e8
 8010c2c:	2000225c 	.word	0x2000225c
 8010c30:	200021d8 	.word	0x200021d8

08010c34 <vTaskDelay>:
	{
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c38:	d016      	beq.n	8010c68 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 8010c3a:	4b0d      	ldr	r3, [pc, #52]	; (8010c70 <vTaskDelay+0x3c>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <vTaskDelay+0x12>
 8010c42:	b672      	cpsid	i
 8010c44:	e7fe      	b.n	8010c44 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8010c46:	f7ff fee5 	bl	8010a14 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 8010c4a:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <vTaskDelay+0x40>)
 8010c4c:	681c      	ldr	r4, [r3, #0]
 8010c4e:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010c50:	4b09      	ldr	r3, [pc, #36]	; (8010c78 <vTaskDelay+0x44>)
 8010c52:	6818      	ldr	r0, [r3, #0]
 8010c54:	3004      	adds	r0, #4
 8010c56:	f7ff f935 	bl	800fec4 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010c5a:	0020      	movs	r0, r4
 8010c5c:	f7ff fd82 	bl	8010764 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010c60:	f7ff ff76 	bl	8010b50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010c64:	2800      	cmp	r0, #0
 8010c66:	d101      	bne.n	8010c6c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 8010c68:	f000 fe0e 	bl	8011888 <vPortYield>
	}
 8010c6c:	bd70      	pop	{r4, r5, r6, pc}
 8010c6e:	46c0      	nop			; (mov r8, r8)
 8010c70:	200021dc 	.word	0x200021dc
 8010c74:	20002258 	.word	0x20002258
 8010c78:	20002138 	.word	0x20002138

08010c7c <prvCheckTasksWaitingTermination>:
{
 8010c7c:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010c7e:	4b11      	ldr	r3, [pc, #68]	; (8010cc4 <prvCheckTasksWaitingTermination+0x48>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d01d      	beq.n	8010cc2 <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 8010c86:	f7ff fec5 	bl	8010a14 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010c8a:	4b0f      	ldr	r3, [pc, #60]	; (8010cc8 <prvCheckTasksWaitingTermination+0x4c>)
 8010c8c:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8010c8e:	f7ff ff5f 	bl	8010b50 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8010c92:	2c00      	cmp	r4, #0
 8010c94:	d0f3      	beq.n	8010c7e <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8010c96:	f000 fe03 	bl	80118a0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010c9a:	4b0b      	ldr	r3, [pc, #44]	; (8010cc8 <prvCheckTasksWaitingTermination+0x4c>)
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010ca0:	1d20      	adds	r0, r4, #4
 8010ca2:	f7ff f90f 	bl	800fec4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010ca6:	4a09      	ldr	r2, [pc, #36]	; (8010ccc <prvCheckTasksWaitingTermination+0x50>)
 8010ca8:	6813      	ldr	r3, [r2, #0]
 8010caa:	3b01      	subs	r3, #1
 8010cac:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8010cae:	4a05      	ldr	r2, [pc, #20]	; (8010cc4 <prvCheckTasksWaitingTermination+0x48>)
 8010cb0:	6813      	ldr	r3, [r2, #0]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8010cb6:	f000 fdff 	bl	80118b8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8010cba:	0020      	movs	r0, r4
 8010cbc:	f7ff fccc 	bl	8010658 <prvDeleteTCB>
 8010cc0:	e7dd      	b.n	8010c7e <prvCheckTasksWaitingTermination+0x2>
}
 8010cc2:	bd10      	pop	{r4, pc}
 8010cc4:	200021e4 	.word	0x200021e4
 8010cc8:	20002244 	.word	0x20002244
 8010ccc:	200021d4 	.word	0x200021d4

08010cd0 <prvIdleTask>:
{
 8010cd0:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 8010cd2:	f7ff ffd3 	bl	8010c7c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cd6:	4b03      	ldr	r3, [pc, #12]	; (8010ce4 <prvIdleTask+0x14>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d9f9      	bls.n	8010cd2 <prvIdleTask+0x2>
				taskYIELD();
 8010cde:	f000 fdd3 	bl	8011888 <vPortYield>
 8010ce2:	e7f6      	b.n	8010cd2 <prvIdleTask+0x2>
 8010ce4:	20002144 	.word	0x20002144

08010ce8 <uxTaskGetSystemState>:
	{
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	0007      	movs	r7, r0
 8010cec:	000c      	movs	r4, r1
 8010cee:	0016      	movs	r6, r2
		vTaskSuspendAll();
 8010cf0:	f7ff fe90 	bl	8010a14 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8010cf4:	4b1e      	ldr	r3, [pc, #120]	; (8010d70 <uxTaskGetSystemState+0x88>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	42a3      	cmp	r3, r4
 8010cfa:	d833      	bhi.n	8010d64 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010cfc:	2507      	movs	r5, #7
 8010cfe:	2400      	movs	r4, #0
					uxQueue--;
 8010d00:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8010d02:	0160      	lsls	r0, r4, #5
 8010d04:	00ab      	lsls	r3, r5, #2
 8010d06:	195b      	adds	r3, r3, r5
 8010d08:	0099      	lsls	r1, r3, #2
 8010d0a:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <uxTaskGetSystemState+0x8c>)
 8010d0c:	18c9      	adds	r1, r1, r3
 8010d0e:	1838      	adds	r0, r7, r0
 8010d10:	2201      	movs	r2, #1
 8010d12:	f7ff fc3d 	bl	8010590 <prvListTaskWithinSingleList>
 8010d16:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d18:	2d00      	cmp	r5, #0
 8010d1a:	d1f1      	bne.n	8010d00 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8010d1c:	0160      	lsls	r0, r4, #5
 8010d1e:	4b16      	ldr	r3, [pc, #88]	; (8010d78 <uxTaskGetSystemState+0x90>)
 8010d20:	6819      	ldr	r1, [r3, #0]
 8010d22:	1838      	adds	r0, r7, r0
 8010d24:	2202      	movs	r2, #2
 8010d26:	f7ff fc33 	bl	8010590 <prvListTaskWithinSingleList>
 8010d2a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8010d2c:	0160      	lsls	r0, r4, #5
 8010d2e:	4b13      	ldr	r3, [pc, #76]	; (8010d7c <uxTaskGetSystemState+0x94>)
 8010d30:	6819      	ldr	r1, [r3, #0]
 8010d32:	1838      	adds	r0, r7, r0
 8010d34:	2202      	movs	r2, #2
 8010d36:	f7ff fc2b 	bl	8010590 <prvListTaskWithinSingleList>
 8010d3a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010d3c:	0160      	lsls	r0, r4, #5
 8010d3e:	1838      	adds	r0, r7, r0
 8010d40:	2204      	movs	r2, #4
 8010d42:	490f      	ldr	r1, [pc, #60]	; (8010d80 <uxTaskGetSystemState+0x98>)
 8010d44:	f7ff fc24 	bl	8010590 <prvListTaskWithinSingleList>
 8010d48:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8010d4a:	0160      	lsls	r0, r4, #5
 8010d4c:	1838      	adds	r0, r7, r0
 8010d4e:	2203      	movs	r2, #3
 8010d50:	490c      	ldr	r1, [pc, #48]	; (8010d84 <uxTaskGetSystemState+0x9c>)
 8010d52:	f7ff fc1d 	bl	8010590 <prvListTaskWithinSingleList>
 8010d56:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 8010d58:	2e00      	cmp	r6, #0
 8010d5a:	d004      	beq.n	8010d66 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010d5c:	f7f7 fb90 	bl	8008480 <ulMainGetRunTimeCounterValue>
 8010d60:	6030      	str	r0, [r6, #0]
 8010d62:	e000      	b.n	8010d66 <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010d64:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 8010d66:	f7ff fef3 	bl	8010b50 <xTaskResumeAll>
	}
 8010d6a:	0020      	movs	r0, r4
 8010d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d6e:	46c0      	nop			; (mov r8, r8)
 8010d70:	200021d4 	.word	0x200021d4
 8010d74:	20002144 	.word	0x20002144
 8010d78:	2000213c 	.word	0x2000213c
 8010d7c:	20002140 	.word	0x20002140
 8010d80:	20002244 	.word	0x20002244
 8010d84:	20002230 	.word	0x20002230

08010d88 <vTaskSwitchContext>:
{
 8010d88:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d8a:	4b35      	ldr	r3, [pc, #212]	; (8010e60 <vTaskSwitchContext+0xd8>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8010d92:	4b34      	ldr	r3, [pc, #208]	; (8010e64 <vTaskSwitchContext+0xdc>)
 8010d94:	2201      	movs	r2, #1
 8010d96:	601a      	str	r2, [r3, #0]
}
 8010d98:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 8010d9a:	4b32      	ldr	r3, [pc, #200]	; (8010e64 <vTaskSwitchContext+0xdc>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010da0:	f7f7 fb6e 	bl	8008480 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010da4:	4b30      	ldr	r3, [pc, #192]	; (8010e68 <vTaskSwitchContext+0xe0>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4298      	cmp	r0, r3
 8010daa:	d906      	bls.n	8010dba <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010dac:	4a2f      	ldr	r2, [pc, #188]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010dae:	6812      	ldr	r2, [r2, #0]
 8010db0:	1ac3      	subs	r3, r0, r3
 8010db2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8010db4:	468c      	mov	ip, r1
 8010db6:	4463      	add	r3, ip
 8010db8:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8010dba:	4b2b      	ldr	r3, [pc, #172]	; (8010e68 <vTaskSwitchContext+0xe0>)
 8010dbc:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8010dbe:	4b2b      	ldr	r3, [pc, #172]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	6812      	ldr	r2, [r2, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d805      	bhi.n	8010dd8 <vTaskSwitchContext+0x50>
 8010dcc:	4b27      	ldr	r3, [pc, #156]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010dce:	6818      	ldr	r0, [r3, #0]
 8010dd0:	6819      	ldr	r1, [r3, #0]
 8010dd2:	3134      	adds	r1, #52	; 0x34
 8010dd4:	f7fe f9ba 	bl	800f14c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8010dd8:	4b24      	ldr	r3, [pc, #144]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010dde:	2214      	movs	r2, #20
 8010de0:	4923      	ldr	r1, [pc, #140]	; (8010e70 <vTaskSwitchContext+0xe8>)
 8010de2:	f004 fa8b 	bl	80152fc <memcmp>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d005      	beq.n	8010df6 <vTaskSwitchContext+0x6e>
 8010dea:	4b20      	ldr	r3, [pc, #128]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010dec:	6818      	ldr	r0, [r3, #0]
 8010dee:	6819      	ldr	r1, [r3, #0]
 8010df0:	3134      	adds	r1, #52	; 0x34
 8010df2:	f7fe f9ab 	bl	800f14c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010df6:	4b1f      	ldr	r3, [pc, #124]	; (8010e74 <vTaskSwitchContext+0xec>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	0093      	lsls	r3, r2, #2
 8010dfc:	189b      	adds	r3, r3, r2
 8010dfe:	009a      	lsls	r2, r3, #2
 8010e00:	4b1d      	ldr	r3, [pc, #116]	; (8010e78 <vTaskSwitchContext+0xf0>)
 8010e02:	58d3      	ldr	r3, [r2, r3]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10a      	bne.n	8010e1e <vTaskSwitchContext+0x96>
 8010e08:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <vTaskSwitchContext+0xec>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d004      	beq.n	8010e1a <vTaskSwitchContext+0x92>
 8010e10:	4a18      	ldr	r2, [pc, #96]	; (8010e74 <vTaskSwitchContext+0xec>)
 8010e12:	6813      	ldr	r3, [r2, #0]
 8010e14:	3b01      	subs	r3, #1
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	e7ed      	b.n	8010df6 <vTaskSwitchContext+0x6e>
 8010e1a:	b672      	cpsid	i
 8010e1c:	e7fe      	b.n	8010e1c <vTaskSwitchContext+0x94>
 8010e1e:	4b15      	ldr	r3, [pc, #84]	; (8010e74 <vTaskSwitchContext+0xec>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4d15      	ldr	r5, [pc, #84]	; (8010e78 <vTaskSwitchContext+0xf0>)
 8010e24:	0099      	lsls	r1, r3, #2
 8010e26:	18ca      	adds	r2, r1, r3
 8010e28:	0090      	lsls	r0, r2, #2
 8010e2a:	1828      	adds	r0, r5, r0
 8010e2c:	6842      	ldr	r2, [r0, #4]
 8010e2e:	6854      	ldr	r4, [r2, #4]
 8010e30:	6044      	str	r4, [r0, #4]
 8010e32:	18c9      	adds	r1, r1, r3
 8010e34:	008a      	lsls	r2, r1, #2
 8010e36:	3208      	adds	r2, #8
 8010e38:	1952      	adds	r2, r2, r5
 8010e3a:	4294      	cmp	r4, r2
 8010e3c:	d009      	beq.n	8010e52 <vTaskSwitchContext+0xca>
 8010e3e:	009a      	lsls	r2, r3, #2
 8010e40:	18d3      	adds	r3, r2, r3
 8010e42:	009a      	lsls	r2, r3, #2
 8010e44:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <vTaskSwitchContext+0xf0>)
 8010e46:	189b      	adds	r3, r3, r2
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <vTaskSwitchContext+0xe4>)
 8010e4e:	601a      	str	r2, [r3, #0]
}
 8010e50:	e7a2      	b.n	8010d98 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010e52:	6860      	ldr	r0, [r4, #4]
 8010e54:	2114      	movs	r1, #20
 8010e56:	4359      	muls	r1, r3
 8010e58:	186a      	adds	r2, r5, r1
 8010e5a:	6050      	str	r0, [r2, #4]
 8010e5c:	e7ef      	b.n	8010e3e <vTaskSwitchContext+0xb6>
 8010e5e:	46c0      	nop			; (mov r8, r8)
 8010e60:	200021dc 	.word	0x200021dc
 8010e64:	2000225c 	.word	0x2000225c
 8010e68:	200021d0 	.word	0x200021d0
 8010e6c:	20002138 	.word	0x20002138
 8010e70:	0801d1d4 	.word	0x0801d1d4
 8010e74:	200021e8 	.word	0x200021e8
 8010e78:	20002144 	.word	0x20002144

08010e7c <vTaskPlaceOnEventList>:
{
 8010e7c:	b570      	push	{r4, r5, r6, lr}
 8010e7e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d101      	bne.n	8010e88 <vTaskPlaceOnEventList+0xc>
 8010e84:	b672      	cpsid	i
 8010e86:	e7fe      	b.n	8010e86 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e88:	4d0b      	ldr	r5, [pc, #44]	; (8010eb8 <vTaskPlaceOnEventList+0x3c>)
 8010e8a:	6829      	ldr	r1, [r5, #0]
 8010e8c:	3118      	adds	r1, #24
 8010e8e:	f7ff f801 	bl	800fe94 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010e92:	6828      	ldr	r0, [r5, #0]
 8010e94:	3004      	adds	r0, #4
 8010e96:	f7ff f815 	bl	800fec4 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 8010e9a:	1c63      	adds	r3, r4, #1
 8010e9c:	d005      	beq.n	8010eaa <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 8010e9e:	4b07      	ldr	r3, [pc, #28]	; (8010ebc <vTaskPlaceOnEventList+0x40>)
 8010ea0:	6818      	ldr	r0, [r3, #0]
 8010ea2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010ea4:	f7ff fc5e 	bl	8010764 <prvAddCurrentTaskToDelayedList>
}
 8010ea8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010eaa:	4b03      	ldr	r3, [pc, #12]	; (8010eb8 <vTaskPlaceOnEventList+0x3c>)
 8010eac:	6819      	ldr	r1, [r3, #0]
 8010eae:	3104      	adds	r1, #4
 8010eb0:	4803      	ldr	r0, [pc, #12]	; (8010ec0 <vTaskPlaceOnEventList+0x44>)
 8010eb2:	f7fe ffe3 	bl	800fe7c <vListInsertEnd>
 8010eb6:	e7f7      	b.n	8010ea8 <vTaskPlaceOnEventList+0x2c>
 8010eb8:	20002138 	.word	0x20002138
 8010ebc:	20002258 	.word	0x20002258
 8010ec0:	20002230 	.word	0x20002230

08010ec4 <vTaskPlaceOnEventListRestricted>:
	{
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d101      	bne.n	8010ed0 <vTaskPlaceOnEventListRestricted+0xc>
 8010ecc:	b672      	cpsid	i
 8010ece:	e7fe      	b.n	8010ece <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010ed0:	4c07      	ldr	r4, [pc, #28]	; (8010ef0 <vTaskPlaceOnEventListRestricted+0x2c>)
 8010ed2:	6821      	ldr	r1, [r4, #0]
 8010ed4:	3118      	adds	r1, #24
 8010ed6:	f7fe ffd1 	bl	800fe7c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010eda:	6820      	ldr	r0, [r4, #0]
 8010edc:	3004      	adds	r0, #4
 8010ede:	f7fe fff1 	bl	800fec4 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 8010ee2:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <vTaskPlaceOnEventListRestricted+0x30>)
 8010ee4:	6818      	ldr	r0, [r3, #0]
 8010ee6:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010ee8:	f7ff fc3c 	bl	8010764 <prvAddCurrentTaskToDelayedList>
	}
 8010eec:	bd70      	pop	{r4, r5, r6, pc}
 8010eee:	46c0      	nop			; (mov r8, r8)
 8010ef0:	20002138 	.word	0x20002138
 8010ef4:	20002258 	.word	0x20002258

08010ef8 <xTaskRemoveFromEventList>:
{
 8010ef8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010efa:	68c3      	ldr	r3, [r0, #12]
 8010efc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010efe:	2c00      	cmp	r4, #0
 8010f00:	d101      	bne.n	8010f06 <xTaskRemoveFromEventList+0xe>
 8010f02:	b672      	cpsid	i
 8010f04:	e7fe      	b.n	8010f04 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f06:	0025      	movs	r5, r4
 8010f08:	3518      	adds	r5, #24
 8010f0a:	0028      	movs	r0, r5
 8010f0c:	f7fe ffda 	bl	800fec4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f10:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <xTaskRemoveFromEventList+0x6c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d11d      	bne.n	8010f54 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8010f18:	1d25      	adds	r5, r4, #4
 8010f1a:	0028      	movs	r0, r5
 8010f1c:	f7fe ffd2 	bl	800fec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f22:	4b11      	ldr	r3, [pc, #68]	; (8010f68 <xTaskRemoveFromEventList+0x70>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d901      	bls.n	8010f2e <xTaskRemoveFromEventList+0x36>
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <xTaskRemoveFromEventList+0x70>)
 8010f2c:	601a      	str	r2, [r3, #0]
 8010f2e:	0093      	lsls	r3, r2, #2
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	0098      	lsls	r0, r3, #2
 8010f34:	4b0d      	ldr	r3, [pc, #52]	; (8010f6c <xTaskRemoveFromEventList+0x74>)
 8010f36:	18c0      	adds	r0, r0, r3
 8010f38:	0029      	movs	r1, r5
 8010f3a:	f7fe ff9f 	bl	800fe7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f40:	4b0b      	ldr	r3, [pc, #44]	; (8010f70 <xTaskRemoveFromEventList+0x78>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d909      	bls.n	8010f5e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8010f4a:	4b0a      	ldr	r3, [pc, #40]	; (8010f74 <xTaskRemoveFromEventList+0x7c>)
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8010f50:	2001      	movs	r0, #1
}
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f54:	0029      	movs	r1, r5
 8010f56:	4808      	ldr	r0, [pc, #32]	; (8010f78 <xTaskRemoveFromEventList+0x80>)
 8010f58:	f7fe ff90 	bl	800fe7c <vListInsertEnd>
 8010f5c:	e7ef      	b.n	8010f3e <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 8010f5e:	2000      	movs	r0, #0
	return xReturn;
 8010f60:	e7f7      	b.n	8010f52 <xTaskRemoveFromEventList+0x5a>
 8010f62:	46c0      	nop			; (mov r8, r8)
 8010f64:	200021dc 	.word	0x200021dc
 8010f68:	200021e8 	.word	0x200021e8
 8010f6c:	20002144 	.word	0x20002144
 8010f70:	20002138 	.word	0x20002138
 8010f74:	2000225c 	.word	0x2000225c
 8010f78:	20002218 	.word	0x20002218

08010f7c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d006      	beq.n	8010f8e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f80:	4b04      	ldr	r3, [pc, #16]	; (8010f94 <vTaskSetTimeOutState+0x18>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f86:	4b04      	ldr	r3, [pc, #16]	; (8010f98 <vTaskSetTimeOutState+0x1c>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6043      	str	r3, [r0, #4]
}
 8010f8c:	4770      	bx	lr
	configASSERT( pxTimeOut );
 8010f8e:	b672      	cpsid	i
 8010f90:	e7fe      	b.n	8010f90 <vTaskSetTimeOutState+0x14>
 8010f92:	46c0      	nop			; (mov r8, r8)
 8010f94:	20002214 	.word	0x20002214
 8010f98:	20002258 	.word	0x20002258

08010f9c <xTaskCheckForTimeOut>:
{
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	0004      	movs	r4, r0
 8010fa0:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d003      	beq.n	8010fae <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010fa6:	2900      	cmp	r1, #0
 8010fa8:	d103      	bne.n	8010fb2 <xTaskCheckForTimeOut+0x16>
 8010faa:	b672      	cpsid	i
 8010fac:	e7fe      	b.n	8010fac <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 8010fae:	b672      	cpsid	i
 8010fb0:	e7fe      	b.n	8010fb0 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8010fb2:	f000 fc75 	bl	80118a0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010fb6:	4b11      	ldr	r3, [pc, #68]	; (8010ffc <xTaskCheckForTimeOut+0x60>)
 8010fb8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010fba:	682b      	ldr	r3, [r5, #0]
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	d018      	beq.n	8010ff2 <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fc0:	4a0f      	ldr	r2, [pc, #60]	; (8011000 <xTaskCheckForTimeOut+0x64>)
 8010fc2:	6812      	ldr	r2, [r2, #0]
 8010fc4:	6820      	ldr	r0, [r4, #0]
 8010fc6:	4290      	cmp	r0, r2
 8010fc8:	d002      	beq.n	8010fd0 <xTaskCheckForTimeOut+0x34>
 8010fca:	6862      	ldr	r2, [r4, #4]
 8010fcc:	428a      	cmp	r2, r1
 8010fce:	d912      	bls.n	8010ff6 <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8010fd0:	6862      	ldr	r2, [r4, #4]
 8010fd2:	1a88      	subs	r0, r1, r2
 8010fd4:	4283      	cmp	r3, r0
 8010fd6:	d804      	bhi.n	8010fe2 <xTaskCheckForTimeOut+0x46>
			xReturn = pdTRUE;
 8010fd8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8010fda:	f000 fc6d 	bl	80118b8 <vPortExitCritical>
}
 8010fde:	0020      	movs	r0, r4
 8010fe0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8010fe2:	1a52      	subs	r2, r2, r1
 8010fe4:	189b      	adds	r3, r3, r2
 8010fe6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8010fe8:	0020      	movs	r0, r4
 8010fea:	f7ff ffc7 	bl	8010f7c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8010fee:	2400      	movs	r4, #0
 8010ff0:	e7f3      	b.n	8010fda <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
 8010ff2:	2400      	movs	r4, #0
 8010ff4:	e7f1      	b.n	8010fda <xTaskCheckForTimeOut+0x3e>
			xReturn = pdTRUE;
 8010ff6:	2401      	movs	r4, #1
 8010ff8:	e7ef      	b.n	8010fda <xTaskCheckForTimeOut+0x3e>
 8010ffa:	46c0      	nop			; (mov r8, r8)
 8010ffc:	20002258 	.word	0x20002258
 8011000:	20002214 	.word	0x20002214

08011004 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011004:	4b01      	ldr	r3, [pc, #4]	; (801100c <vTaskMissedYield+0x8>)
 8011006:	2201      	movs	r2, #1
 8011008:	601a      	str	r2, [r3, #0]
}
 801100a:	4770      	bx	lr
 801100c:	2000225c 	.word	0x2000225c

08011010 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011010:	4b06      	ldr	r3, [pc, #24]	; (801102c <xTaskGetSchedulerState+0x1c>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d007      	beq.n	8011028 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011018:	4b05      	ldr	r3, [pc, #20]	; (8011030 <xTaskGetSchedulerState+0x20>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d001      	beq.n	8011024 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8011020:	2000      	movs	r0, #0
		return xReturn;
 8011022:	e002      	b.n	801102a <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 8011024:	2002      	movs	r0, #2
 8011026:	e000      	b.n	801102a <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011028:	2001      	movs	r0, #1
	}
 801102a:	4770      	bx	lr
 801102c:	2000222c 	.word	0x2000222c
 8011030:	200021dc 	.word	0x200021dc

08011034 <vTaskPriorityInherit>:
	{
 8011034:	b570      	push	{r4, r5, r6, lr}
 8011036:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8011038:	d01a      	beq.n	8011070 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801103a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801103c:	4a19      	ldr	r2, [pc, #100]	; (80110a4 <vTaskPriorityInherit+0x70>)
 801103e:	6812      	ldr	r2, [r2, #0]
 8011040:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011042:	4293      	cmp	r3, r2
 8011044:	d214      	bcs.n	8011070 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011046:	6982      	ldr	r2, [r0, #24]
 8011048:	2a00      	cmp	r2, #0
 801104a:	db05      	blt.n	8011058 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801104c:	4a15      	ldr	r2, [pc, #84]	; (80110a4 <vTaskPriorityInherit+0x70>)
 801104e:	6812      	ldr	r2, [r2, #0]
 8011050:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011052:	2207      	movs	r2, #7
 8011054:	1a52      	subs	r2, r2, r1
 8011056:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8011058:	009a      	lsls	r2, r3, #2
 801105a:	18d3      	adds	r3, r2, r3
 801105c:	009a      	lsls	r2, r3, #2
 801105e:	4b12      	ldr	r3, [pc, #72]	; (80110a8 <vTaskPriorityInherit+0x74>)
 8011060:	18d2      	adds	r2, r2, r3
 8011062:	6963      	ldr	r3, [r4, #20]
 8011064:	4293      	cmp	r3, r2
 8011066:	d004      	beq.n	8011072 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011068:	4b0e      	ldr	r3, [pc, #56]	; (80110a4 <vTaskPriorityInherit+0x70>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8011070:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011072:	1d25      	adds	r5, r4, #4
 8011074:	0028      	movs	r0, r5
 8011076:	f7fe ff25 	bl	800fec4 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801107a:	4b0a      	ldr	r3, [pc, #40]	; (80110a4 <vTaskPriorityInherit+0x70>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011080:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8011082:	4a0a      	ldr	r2, [pc, #40]	; (80110ac <vTaskPriorityInherit+0x78>)
 8011084:	6812      	ldr	r2, [r2, #0]
 8011086:	4293      	cmp	r3, r2
 8011088:	d808      	bhi.n	801109c <vTaskPriorityInherit+0x68>
 801108a:	009a      	lsls	r2, r3, #2
 801108c:	18d3      	adds	r3, r2, r3
 801108e:	0098      	lsls	r0, r3, #2
 8011090:	4b05      	ldr	r3, [pc, #20]	; (80110a8 <vTaskPriorityInherit+0x74>)
 8011092:	18c0      	adds	r0, r0, r3
 8011094:	0029      	movs	r1, r5
 8011096:	f7fe fef1 	bl	800fe7c <vListInsertEnd>
	}
 801109a:	e7e9      	b.n	8011070 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 801109c:	4a03      	ldr	r2, [pc, #12]	; (80110ac <vTaskPriorityInherit+0x78>)
 801109e:	6013      	str	r3, [r2, #0]
 80110a0:	e7f3      	b.n	801108a <vTaskPriorityInherit+0x56>
 80110a2:	46c0      	nop			; (mov r8, r8)
 80110a4:	20002138 	.word	0x20002138
 80110a8:	20002144 	.word	0x20002144
 80110ac:	200021e8 	.word	0x200021e8

080110b0 <xTaskPriorityDisinherit>:
	{
 80110b0:	b570      	push	{r4, r5, r6, lr}
 80110b2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80110b4:	d02a      	beq.n	801110c <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 80110b6:	4b18      	ldr	r3, [pc, #96]	; (8011118 <xTaskPriorityDisinherit+0x68>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4283      	cmp	r3, r0
 80110bc:	d001      	beq.n	80110c2 <xTaskPriorityDisinherit+0x12>
 80110be:	b672      	cpsid	i
 80110c0:	e7fe      	b.n	80110c0 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80110c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d101      	bne.n	80110cc <xTaskPriorityDisinherit+0x1c>
 80110c8:	b672      	cpsid	i
 80110ca:	e7fe      	b.n	80110ca <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 80110cc:	3b01      	subs	r3, #1
 80110ce:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80110d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110d2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80110d4:	428a      	cmp	r2, r1
 80110d6:	d01b      	beq.n	8011110 <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d11b      	bne.n	8011114 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80110dc:	1d05      	adds	r5, r0, #4
 80110de:	0028      	movs	r0, r5
 80110e0:	f7fe fef0 	bl	800fec4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80110e6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110e8:	2207      	movs	r2, #7
 80110ea:	1ad2      	subs	r2, r2, r3
 80110ec:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80110ee:	4a0b      	ldr	r2, [pc, #44]	; (801111c <xTaskPriorityDisinherit+0x6c>)
 80110f0:	6812      	ldr	r2, [r2, #0]
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d901      	bls.n	80110fa <xTaskPriorityDisinherit+0x4a>
 80110f6:	4a09      	ldr	r2, [pc, #36]	; (801111c <xTaskPriorityDisinherit+0x6c>)
 80110f8:	6013      	str	r3, [r2, #0]
 80110fa:	2014      	movs	r0, #20
 80110fc:	4358      	muls	r0, r3
 80110fe:	4b08      	ldr	r3, [pc, #32]	; (8011120 <xTaskPriorityDisinherit+0x70>)
 8011100:	18c0      	adds	r0, r0, r3
 8011102:	0029      	movs	r1, r5
 8011104:	f7fe feba 	bl	800fe7c <vListInsertEnd>
					xReturn = pdTRUE;
 8011108:	2001      	movs	r0, #1
 801110a:	e000      	b.n	801110e <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 801110c:	2000      	movs	r0, #0
	}
 801110e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8011110:	2000      	movs	r0, #0
 8011112:	e7fc      	b.n	801110e <xTaskPriorityDisinherit+0x5e>
 8011114:	2000      	movs	r0, #0
		return xReturn;
 8011116:	e7fa      	b.n	801110e <xTaskPriorityDisinherit+0x5e>
 8011118:	20002138 	.word	0x20002138
 801111c:	200021e8 	.word	0x200021e8
 8011120:	20002144 	.word	0x20002144

08011124 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801112a:	2300      	movs	r3, #0
 801112c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801112e:	4b28      	ldr	r3, [pc, #160]	; (80111d0 <vTaskList+0xac>)
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8011134:	6818      	ldr	r0, [r3, #0]
 8011136:	0140      	lsls	r0, r0, #5
 8011138:	f000 fc66 	bl	8011a08 <pvPortMalloc>
 801113c:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 801113e:	d045      	beq.n	80111cc <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8011140:	9903      	ldr	r1, [sp, #12]
 8011142:	2200      	movs	r2, #0
 8011144:	f7ff fdd0 	bl	8010ce8 <uxTaskGetSystemState>
 8011148:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801114a:	2300      	movs	r3, #0
 801114c:	9302      	str	r3, [sp, #8]
 801114e:	e023      	b.n	8011198 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8011150:	2b01      	cmp	r3, #1
 8011152:	d134      	bne.n	80111be <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 8011154:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8011156:	9b02      	ldr	r3, [sp, #8]
 8011158:	015b      	lsls	r3, r3, #5
 801115a:	18f3      	adds	r3, r6, r3
 801115c:	6859      	ldr	r1, [r3, #4]
 801115e:	0020      	movs	r0, r4
 8011160:	f7ff fb2a 	bl	80107b8 <prvWriteNameToBuffer>
 8011164:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8011166:	9b02      	ldr	r3, [sp, #8]
 8011168:	015b      	lsls	r3, r3, #5
 801116a:	18f3      	adds	r3, r6, r3
 801116c:	691b      	ldr	r3, [r3, #16]
 801116e:	9a02      	ldr	r2, [sp, #8]
 8011170:	0152      	lsls	r2, r2, #5
 8011172:	18b2      	adds	r2, r6, r2
 8011174:	8b91      	ldrh	r1, [r2, #28]
 8011176:	9a02      	ldr	r2, [sp, #8]
 8011178:	0152      	lsls	r2, r2, #5
 801117a:	18b2      	adds	r2, r6, r2
 801117c:	6892      	ldr	r2, [r2, #8]
 801117e:	9201      	str	r2, [sp, #4]
 8011180:	9100      	str	r1, [sp, #0]
 8011182:	002a      	movs	r2, r5
 8011184:	4913      	ldr	r1, [pc, #76]	; (80111d4 <vTaskList+0xb0>)
 8011186:	f004 facb 	bl	8015720 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 801118a:	0020      	movs	r0, r4
 801118c:	f7ee ffc4 	bl	8000118 <strlen>
 8011190:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	3301      	adds	r3, #1
 8011196:	9302      	str	r3, [sp, #8]
 8011198:	9a02      	ldr	r2, [sp, #8]
 801119a:	9b03      	ldr	r3, [sp, #12]
 801119c:	429a      	cmp	r2, r3
 801119e:	d212      	bcs.n	80111c6 <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80111a0:	9b02      	ldr	r3, [sp, #8]
 80111a2:	015b      	lsls	r3, r3, #5
 80111a4:	18f3      	adds	r3, r6, r3
 80111a6:	7b1b      	ldrb	r3, [r3, #12]
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d00a      	beq.n	80111c2 <vTaskList+0x9e>
 80111ac:	d9d0      	bls.n	8011150 <vTaskList+0x2c>
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d003      	beq.n	80111ba <vTaskList+0x96>
 80111b2:	2b04      	cmp	r3, #4
 80111b4:	d103      	bne.n	80111be <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80111b6:	2544      	movs	r5, #68	; 0x44
										break;
 80111b8:	e7cd      	b.n	8011156 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80111ba:	2553      	movs	r5, #83	; 0x53
										break;
 80111bc:	e7cb      	b.n	8011156 <vTaskList+0x32>
										cStatus = 0x00;
 80111be:	2500      	movs	r5, #0
										break;
 80111c0:	e7c9      	b.n	8011156 <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80111c2:	2542      	movs	r5, #66	; 0x42
 80111c4:	e7c7      	b.n	8011156 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80111c6:	0030      	movs	r0, r6
 80111c8:	f000 fc96 	bl	8011af8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111cc:	b004      	add	sp, #16
 80111ce:	bd70      	pop	{r4, r5, r6, pc}
 80111d0:	200021d4 	.word	0x200021d4
 80111d4:	0801d200 	.word	0x0801d200

080111d8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80111de:	2300      	movs	r3, #0
 80111e0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80111e2:	4b25      	ldr	r3, [pc, #148]	; (8011278 <vTaskGetRunTimeStats+0xa0>)
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80111e8:	6818      	ldr	r0, [r3, #0]
 80111ea:	0140      	lsls	r0, r0, #5
 80111ec:	f000 fc0c 	bl	8011a08 <pvPortMalloc>
 80111f0:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 80111f2:	d03e      	beq.n	8011272 <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80111f4:	9903      	ldr	r1, [sp, #12]
 80111f6:	aa01      	add	r2, sp, #4
 80111f8:	f7ff fd76 	bl	8010ce8 <uxTaskGetSystemState>
 80111fc:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80111fe:	2164      	movs	r1, #100	; 0x64
 8011200:	9801      	ldr	r0, [sp, #4]
 8011202:	f7ee ffa5 	bl	8000150 <__udivsi3>
 8011206:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8011208:	2800      	cmp	r0, #0
 801120a:	d02f      	beq.n	801126c <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801120c:	2300      	movs	r3, #0
 801120e:	9302      	str	r3, [sp, #8]
 8011210:	e00d      	b.n	801122e <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8011212:	9b02      	ldr	r3, [sp, #8]
 8011214:	015b      	lsls	r3, r3, #5
 8011216:	18f3      	adds	r3, r6, r3
 8011218:	699a      	ldr	r2, [r3, #24]
 801121a:	4918      	ldr	r1, [pc, #96]	; (801127c <vTaskGetRunTimeStats+0xa4>)
 801121c:	f004 fa80 	bl	8015720 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 8011220:	0020      	movs	r0, r4
 8011222:	f7ee ff79 	bl	8000118 <strlen>
 8011226:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	3301      	adds	r3, #1
 801122c:	9302      	str	r3, [sp, #8]
 801122e:	9a02      	ldr	r2, [sp, #8]
 8011230:	9b03      	ldr	r3, [sp, #12]
 8011232:	429a      	cmp	r2, r3
 8011234:	d21a      	bcs.n	801126c <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8011236:	9b02      	ldr	r3, [sp, #8]
 8011238:	015b      	lsls	r3, r3, #5
 801123a:	18f3      	adds	r3, r6, r3
 801123c:	6998      	ldr	r0, [r3, #24]
 801123e:	9901      	ldr	r1, [sp, #4]
 8011240:	f7ee ff86 	bl	8000150 <__udivsi3>
 8011244:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8011246:	9b02      	ldr	r3, [sp, #8]
 8011248:	015b      	lsls	r3, r3, #5
 801124a:	18f3      	adds	r3, r6, r3
 801124c:	6859      	ldr	r1, [r3, #4]
 801124e:	0020      	movs	r0, r4
 8011250:	f7ff fab2 	bl	80107b8 <prvWriteNameToBuffer>
 8011254:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8011256:	2d00      	cmp	r5, #0
 8011258:	d0db      	beq.n	8011212 <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801125a:	9b02      	ldr	r3, [sp, #8]
 801125c:	015b      	lsls	r3, r3, #5
 801125e:	18f3      	adds	r3, r6, r3
 8011260:	699a      	ldr	r2, [r3, #24]
 8011262:	002b      	movs	r3, r5
 8011264:	4906      	ldr	r1, [pc, #24]	; (8011280 <vTaskGetRunTimeStats+0xa8>)
 8011266:	f004 fa5b 	bl	8015720 <sprintf>
 801126a:	e7d9      	b.n	8011220 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 801126c:	0030      	movs	r0, r6
 801126e:	f000 fc43 	bl	8011af8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011272:	b004      	add	sp, #16
 8011274:	bd70      	pop	{r4, r5, r6, pc}
 8011276:	46c0      	nop			; (mov r8, r8)
 8011278:	200021d4 	.word	0x200021d4
 801127c:	0801d1f4 	.word	0x0801d1f4
 8011280:	0801d1e8 	.word	0x0801d1e8

08011284 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <pvTaskIncrementMutexHeldCount+0x18>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d004      	beq.n	8011296 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801128c:	4b03      	ldr	r3, [pc, #12]	; (801129c <pvTaskIncrementMutexHeldCount+0x18>)
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8011292:	3301      	adds	r3, #1
 8011294:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011296:	4b01      	ldr	r3, [pc, #4]	; (801129c <pvTaskIncrementMutexHeldCount+0x18>)
 8011298:	6818      	ldr	r0, [r3, #0]
	}
 801129a:	4770      	bx	lr
 801129c:	20002138 	.word	0x20002138

080112a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80112a0:	b570      	push	{r4, r5, r6, lr}
 80112a2:	0005      	movs	r5, r0
 80112a4:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80112a6:	f000 fafb 	bl	80118a0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80112aa:	4b20      	ldr	r3, [pc, #128]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d106      	bne.n	80112c2 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80112b4:	4b1d      	ldr	r3, [pc, #116]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	235c      	movs	r3, #92	; 0x5c
 80112ba:	2101      	movs	r1, #1
 80112bc:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80112be:	2c00      	cmp	r4, #0
 80112c0:	d118      	bne.n	80112f4 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80112c2:	f000 faf9 	bl	80118b8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80112c6:	f000 faeb 	bl	80118a0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80112ca:	4b18      	ldr	r3, [pc, #96]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80112d0:	2c00      	cmp	r4, #0
 80112d2:	d006      	beq.n	80112e2 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80112d4:	2d00      	cmp	r5, #0
 80112d6:	d123      	bne.n	8011320 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80112d8:	4b14      	ldr	r3, [pc, #80]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80112de:	3b01      	subs	r3, #1
 80112e0:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80112e2:	4b12      	ldr	r3, [pc, #72]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	235c      	movs	r3, #92	; 0x5c
 80112e8:	2100      	movs	r1, #0
 80112ea:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80112ec:	f000 fae4 	bl	80118b8 <vPortExitCritical>

		return ulReturn;
	}
 80112f0:	0020      	movs	r0, r4
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80112f4:	4b0d      	ldr	r3, [pc, #52]	; (801132c <ulTaskNotifyTake+0x8c>)
 80112f6:	6818      	ldr	r0, [r3, #0]
 80112f8:	3004      	adds	r0, #4
 80112fa:	f7fe fde3 	bl	800fec4 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 80112fe:	1c63      	adds	r3, r4, #1
 8011300:	d007      	beq.n	8011312 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 8011302:	4b0b      	ldr	r3, [pc, #44]	; (8011330 <ulTaskNotifyTake+0x90>)
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8011308:	f7ff fa2c 	bl	8010764 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 801130c:	f000 fabc 	bl	8011888 <vPortYield>
 8011310:	e7d7      	b.n	80112c2 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8011312:	4b06      	ldr	r3, [pc, #24]	; (801132c <ulTaskNotifyTake+0x8c>)
 8011314:	6819      	ldr	r1, [r3, #0]
 8011316:	3104      	adds	r1, #4
 8011318:	4806      	ldr	r0, [pc, #24]	; (8011334 <ulTaskNotifyTake+0x94>)
 801131a:	f7fe fdaf 	bl	800fe7c <vListInsertEnd>
 801131e:	e7f5      	b.n	801130c <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011320:	4b02      	ldr	r3, [pc, #8]	; (801132c <ulTaskNotifyTake+0x8c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2200      	movs	r2, #0
 8011326:	659a      	str	r2, [r3, #88]	; 0x58
 8011328:	e7db      	b.n	80112e2 <ulTaskNotifyTake+0x42>
 801132a:	46c0      	nop			; (mov r8, r8)
 801132c:	20002138 	.word	0x20002138
 8011330:	20002258 	.word	0x20002258
 8011334:	20002230 	.word	0x20002230

08011338 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	0004      	movs	r4, r0
 801133c:	000e      	movs	r6, r1
 801133e:	0015      	movs	r5, r2
 8011340:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8011342:	2800      	cmp	r0, #0
 8011344:	d101      	bne.n	801134a <xTaskGenericNotify+0x12>
 8011346:	b672      	cpsid	i
 8011348:	e7fe      	b.n	8011348 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 801134a:	f000 faa9 	bl	80118a0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801134e:	2f00      	cmp	r7, #0
 8011350:	d001      	beq.n	8011356 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011354:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8011356:	225c      	movs	r2, #92	; 0x5c
 8011358:	5ca3      	ldrb	r3, [r4, r2]
 801135a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 801135c:	2102      	movs	r1, #2
 801135e:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 8011360:	2d02      	cmp	r5, #2
 8011362:	d017      	beq.n	8011394 <xTaskGenericNotify+0x5c>
 8011364:	d908      	bls.n	8011378 <xTaskGenericNotify+0x40>
 8011366:	2d03      	cmp	r5, #3
 8011368:	d019      	beq.n	801139e <xTaskGenericNotify+0x66>
 801136a:	2d04      	cmp	r5, #4
 801136c:	d106      	bne.n	801137c <xTaskGenericNotify+0x44>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801136e:	2b02      	cmp	r3, #2
 8011370:	d018      	beq.n	80113a4 <xTaskGenericNotify+0x6c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011372:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 8011374:	2501      	movs	r5, #1
 8011376:	e007      	b.n	8011388 <xTaskGenericNotify+0x50>
			switch( eAction )
 8011378:	2d01      	cmp	r5, #1
 801137a:	d001      	beq.n	8011380 <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 801137c:	2501      	movs	r5, #1
 801137e:	e003      	b.n	8011388 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 8011380:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011382:	4316      	orrs	r6, r2
 8011384:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 8011386:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8011388:	2b01      	cmp	r3, #1
 801138a:	d00d      	beq.n	80113a8 <xTaskGenericNotify+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801138c:	f000 fa94 	bl	80118b8 <vPortExitCritical>

		return xReturn;
	}
 8011390:	0028      	movs	r0, r5
 8011392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8011394:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011396:	3201      	adds	r2, #1
 8011398:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 801139a:	2501      	movs	r5, #1
					break;
 801139c:	e7f4      	b.n	8011388 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 801139e:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80113a0:	2501      	movs	r5, #1
					break;
 80113a2:	e7f1      	b.n	8011388 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 80113a4:	2500      	movs	r5, #0
 80113a6:	e7ef      	b.n	8011388 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80113a8:	1d26      	adds	r6, r4, #4
 80113aa:	0030      	movs	r0, r6
 80113ac:	f7fe fd8a 	bl	800fec4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80113b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80113b2:	4a0d      	ldr	r2, [pc, #52]	; (80113e8 <xTaskGenericNotify+0xb0>)
 80113b4:	6812      	ldr	r2, [r2, #0]
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d901      	bls.n	80113be <xTaskGenericNotify+0x86>
 80113ba:	4a0b      	ldr	r2, [pc, #44]	; (80113e8 <xTaskGenericNotify+0xb0>)
 80113bc:	6013      	str	r3, [r2, #0]
 80113be:	2014      	movs	r0, #20
 80113c0:	4358      	muls	r0, r3
 80113c2:	4b0a      	ldr	r3, [pc, #40]	; (80113ec <xTaskGenericNotify+0xb4>)
 80113c4:	18c0      	adds	r0, r0, r3
 80113c6:	0031      	movs	r1, r6
 80113c8:	f7fe fd58 	bl	800fe7c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80113cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d001      	beq.n	80113d6 <xTaskGenericNotify+0x9e>
 80113d2:	b672      	cpsid	i
 80113d4:	e7fe      	b.n	80113d4 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <xTaskGenericNotify+0xb8>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113de:	429a      	cmp	r2, r3
 80113e0:	d9d4      	bls.n	801138c <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 80113e2:	f000 fa51 	bl	8011888 <vPortYield>
 80113e6:	e7d1      	b.n	801138c <xTaskGenericNotify+0x54>
 80113e8:	200021e8 	.word	0x200021e8
 80113ec:	20002144 	.word	0x20002144
 80113f0:	20002138 	.word	0x20002138

080113f4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80113f4:	4b06      	ldr	r3, [pc, #24]	; (8011410 <prvGetNextExpireTime+0x1c>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	6813      	ldr	r3, [r2, #0]
 80113fa:	4259      	negs	r1, r3
 80113fc:	414b      	adcs	r3, r1
 80113fe:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011400:	2b00      	cmp	r3, #0
 8011402:	d102      	bne.n	801140a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011404:	68d3      	ldr	r3, [r2, #12]
 8011406:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 8011408:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 801140a:	2000      	movs	r0, #0
	return xNextExpireTime;
 801140c:	e7fc      	b.n	8011408 <prvGetNextExpireTime+0x14>
 801140e:	46c0      	nop			; (mov r8, r8)
 8011410:	20002260 	.word	0x20002260

08011414 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011414:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011416:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011418:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801141a:	4291      	cmp	r1, r2
 801141c:	d80c      	bhi.n	8011438 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801141e:	1ad2      	subs	r2, r2, r3
 8011420:	6983      	ldr	r3, [r0, #24]
 8011422:	429a      	cmp	r2, r3
 8011424:	d301      	bcc.n	801142a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011426:	2001      	movs	r0, #1
 8011428:	e010      	b.n	801144c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801142a:	1d01      	adds	r1, r0, #4
 801142c:	4b09      	ldr	r3, [pc, #36]	; (8011454 <prvInsertTimerInActiveList+0x40>)
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	f7fe fd30 	bl	800fe94 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011434:	2000      	movs	r0, #0
 8011436:	e009      	b.n	801144c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011438:	429a      	cmp	r2, r3
 801143a:	d201      	bcs.n	8011440 <prvInsertTimerInActiveList+0x2c>
 801143c:	4299      	cmp	r1, r3
 801143e:	d206      	bcs.n	801144e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011440:	1d01      	adds	r1, r0, #4
 8011442:	4b05      	ldr	r3, [pc, #20]	; (8011458 <prvInsertTimerInActiveList+0x44>)
 8011444:	6818      	ldr	r0, [r3, #0]
 8011446:	f7fe fd25 	bl	800fe94 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801144a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 801144c:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 801144e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8011450:	e7fc      	b.n	801144c <prvInsertTimerInActiveList+0x38>
 8011452:	46c0      	nop			; (mov r8, r8)
 8011454:	20002264 	.word	0x20002264
 8011458:	20002260 	.word	0x20002260

0801145c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801145c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801145e:	f000 fa1f 	bl	80118a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011462:	4b11      	ldr	r3, [pc, #68]	; (80114a8 <prvCheckForValidListAndQueue+0x4c>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d002      	beq.n	8011470 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801146a:	f000 fa25 	bl	80118b8 <vPortExitCritical>
}
 801146e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8011470:	4d0e      	ldr	r5, [pc, #56]	; (80114ac <prvCheckForValidListAndQueue+0x50>)
 8011472:	0028      	movs	r0, r5
 8011474:	f7fe fcf4 	bl	800fe60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011478:	4c0d      	ldr	r4, [pc, #52]	; (80114b0 <prvCheckForValidListAndQueue+0x54>)
 801147a:	0020      	movs	r0, r4
 801147c:	f7fe fcf0 	bl	800fe60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011480:	4b0c      	ldr	r3, [pc, #48]	; (80114b4 <prvCheckForValidListAndQueue+0x58>)
 8011482:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011484:	4b0c      	ldr	r3, [pc, #48]	; (80114b8 <prvCheckForValidListAndQueue+0x5c>)
 8011486:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8011488:	2200      	movs	r2, #0
 801148a:	2110      	movs	r1, #16
 801148c:	2004      	movs	r0, #4
 801148e:	f7fe fe0c 	bl	80100aa <xQueueGenericCreate>
 8011492:	4b05      	ldr	r3, [pc, #20]	; (80114a8 <prvCheckForValidListAndQueue+0x4c>)
 8011494:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 8011496:	2800      	cmp	r0, #0
 8011498:	d101      	bne.n	801149e <prvCheckForValidListAndQueue+0x42>
 801149a:	b672      	cpsid	i
 801149c:	e7fe      	b.n	801149c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801149e:	4907      	ldr	r1, [pc, #28]	; (80114bc <prvCheckForValidListAndQueue+0x60>)
 80114a0:	f7ff f83a 	bl	8010518 <vQueueAddToRegistry>
 80114a4:	e7e1      	b.n	801146a <prvCheckForValidListAndQueue+0xe>
 80114a6:	46c0      	nop			; (mov r8, r8)
 80114a8:	20002294 	.word	0x20002294
 80114ac:	20002268 	.word	0x20002268
 80114b0:	2000227c 	.word	0x2000227c
 80114b4:	20002260 	.word	0x20002260
 80114b8:	20002264 	.word	0x20002264
 80114bc:	0801d240 	.word	0x0801d240

080114c0 <xTimerCreateTimerTask>:
{
 80114c0:	b500      	push	{lr}
 80114c2:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80114c4:	f7ff ffca 	bl	801145c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80114c8:	4b0a      	ldr	r3, [pc, #40]	; (80114f4 <xTimerCreateTimerTask+0x34>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00d      	beq.n	80114ec <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80114d0:	2300      	movs	r3, #0
 80114d2:	9303      	str	r3, [sp, #12]
 80114d4:	9302      	str	r3, [sp, #8]
 80114d6:	9301      	str	r3, [sp, #4]
 80114d8:	3303      	adds	r3, #3
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	2300      	movs	r3, #0
 80114de:	22a0      	movs	r2, #160	; 0xa0
 80114e0:	4905      	ldr	r1, [pc, #20]	; (80114f8 <xTimerCreateTimerTask+0x38>)
 80114e2:	4806      	ldr	r0, [pc, #24]	; (80114fc <xTimerCreateTimerTask+0x3c>)
 80114e4:	f7ff f97a 	bl	80107dc <xTaskGenericCreate>
	configASSERT( xReturn );
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d101      	bne.n	80114f0 <xTimerCreateTimerTask+0x30>
 80114ec:	b672      	cpsid	i
 80114ee:	e7fe      	b.n	80114ee <xTimerCreateTimerTask+0x2e>
}
 80114f0:	b005      	add	sp, #20
 80114f2:	bd00      	pop	{pc}
 80114f4:	20002294 	.word	0x20002294
 80114f8:	0801d248 	.word	0x0801d248
 80114fc:	080117a5 	.word	0x080117a5

08011500 <xTimerCreate>:
{
 8011500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011502:	46c6      	mov	lr, r8
 8011504:	b500      	push	{lr}
 8011506:	4680      	mov	r8, r0
 8011508:	000d      	movs	r5, r1
 801150a:	0017      	movs	r7, r2
 801150c:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 801150e:	2900      	cmp	r1, #0
 8011510:	d014      	beq.n	801153c <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8011512:	202c      	movs	r0, #44	; 0x2c
 8011514:	f000 fa78 	bl	8011a08 <pvPortMalloc>
 8011518:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 801151a:	d00b      	beq.n	8011534 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 801151c:	f7ff ff9e 	bl	801145c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8011520:	4643      	mov	r3, r8
 8011522:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011524:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8011526:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8011528:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801152a:	9b06      	ldr	r3, [sp, #24]
 801152c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801152e:	1d20      	adds	r0, r4, #4
 8011530:	f7fe fca1 	bl	800fe76 <vListInitialiseItem>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011534:	2d00      	cmp	r5, #0
 8011536:	d103      	bne.n	8011540 <xTimerCreate+0x40>
 8011538:	b672      	cpsid	i
 801153a:	e7fe      	b.n	801153a <xTimerCreate+0x3a>
		pxNewTimer = NULL;
 801153c:	2400      	movs	r4, #0
 801153e:	e7f9      	b.n	8011534 <xTimerCreate+0x34>
}
 8011540:	0020      	movs	r0, r4
 8011542:	bc04      	pop	{r2}
 8011544:	4690      	mov	r8, r2
 8011546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011548 <xTimerGenericCommand>:
{
 8011548:	b530      	push	{r4, r5, lr}
 801154a:	b085      	sub	sp, #20
 801154c:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 801154e:	4b13      	ldr	r3, [pc, #76]	; (801159c <xTimerGenericCommand+0x54>)
 8011550:	681c      	ldr	r4, [r3, #0]
 8011552:	2c00      	cmp	r4, #0
 8011554:	d020      	beq.n	8011598 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8011556:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011558:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801155a:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801155c:	2905      	cmp	r1, #5
 801155e:	dc13      	bgt.n	8011588 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011560:	f7ff fd56 	bl	8011010 <xTaskGetSchedulerState>
 8011564:	2802      	cmp	r0, #2
 8011566:	d007      	beq.n	8011578 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011568:	4b0c      	ldr	r3, [pc, #48]	; (801159c <xTimerGenericCommand+0x54>)
 801156a:	6818      	ldr	r0, [r3, #0]
 801156c:	2300      	movs	r3, #0
 801156e:	2200      	movs	r2, #0
 8011570:	4669      	mov	r1, sp
 8011572:	f7fe fdd7 	bl	8010124 <xQueueGenericSend>
 8011576:	e00d      	b.n	8011594 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011578:	4b08      	ldr	r3, [pc, #32]	; (801159c <xTimerGenericCommand+0x54>)
 801157a:	6818      	ldr	r0, [r3, #0]
 801157c:	2300      	movs	r3, #0
 801157e:	9a08      	ldr	r2, [sp, #32]
 8011580:	4669      	mov	r1, sp
 8011582:	f7fe fdcf 	bl	8010124 <xQueueGenericSend>
 8011586:	e005      	b.n	8011594 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011588:	2300      	movs	r3, #0
 801158a:	002a      	movs	r2, r5
 801158c:	4669      	mov	r1, sp
 801158e:	0020      	movs	r0, r4
 8011590:	f7fe fe57 	bl	8010242 <xQueueGenericSendFromISR>
}
 8011594:	b005      	add	sp, #20
 8011596:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8011598:	2000      	movs	r0, #0
	return xReturn;
 801159a:	e7fb      	b.n	8011594 <xTimerGenericCommand+0x4c>
 801159c:	20002294 	.word	0x20002294

080115a0 <prvSwitchTimerLists>:
{
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115a4:	4b17      	ldr	r3, [pc, #92]	; (8011604 <prvSwitchTimerLists+0x64>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	d023      	beq.n	80115f6 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115b2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115b4:	1d25      	adds	r5, r4, #4
 80115b6:	0028      	movs	r0, r5
 80115b8:	f7fe fc84 	bl	800fec4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115bc:	0020      	movs	r0, r4
 80115be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115c0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80115c2:	69e3      	ldr	r3, [r4, #28]
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d1ed      	bne.n	80115a4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115c8:	69a3      	ldr	r3, [r4, #24]
 80115ca:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 80115cc:	429e      	cmp	r6, r3
 80115ce:	d207      	bcs.n	80115e0 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115d0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115d2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115d4:	4b0b      	ldr	r3, [pc, #44]	; (8011604 <prvSwitchTimerLists+0x64>)
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	0029      	movs	r1, r5
 80115da:	f7fe fc5b 	bl	800fe94 <vListInsert>
 80115de:	e7e1      	b.n	80115a4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115e0:	2300      	movs	r3, #0
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	0032      	movs	r2, r6
 80115e6:	2100      	movs	r1, #0
 80115e8:	0020      	movs	r0, r4
 80115ea:	f7ff ffad 	bl	8011548 <xTimerGenericCommand>
				configASSERT( xResult );
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d1d8      	bne.n	80115a4 <prvSwitchTimerLists+0x4>
 80115f2:	b672      	cpsid	i
 80115f4:	e7fe      	b.n	80115f4 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 80115f6:	4a04      	ldr	r2, [pc, #16]	; (8011608 <prvSwitchTimerLists+0x68>)
 80115f8:	4902      	ldr	r1, [pc, #8]	; (8011604 <prvSwitchTimerLists+0x64>)
 80115fa:	6810      	ldr	r0, [r2, #0]
 80115fc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80115fe:	6013      	str	r3, [r2, #0]
}
 8011600:	b002      	add	sp, #8
 8011602:	bd70      	pop	{r4, r5, r6, pc}
 8011604:	20002260 	.word	0x20002260
 8011608:	20002264 	.word	0x20002264

0801160c <prvSampleTimeNow>:
{
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 8011610:	f7ff fa08 	bl	8010a24 <xTaskGetTickCount>
 8011614:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8011616:	4b07      	ldr	r3, [pc, #28]	; (8011634 <prvSampleTimeNow+0x28>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4283      	cmp	r3, r0
 801161c:	d805      	bhi.n	801162a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801161e:	2300      	movs	r3, #0
 8011620:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8011622:	4b04      	ldr	r3, [pc, #16]	; (8011634 <prvSampleTimeNow+0x28>)
 8011624:	601c      	str	r4, [r3, #0]
}
 8011626:	0020      	movs	r0, r4
 8011628:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 801162a:	f7ff ffb9 	bl	80115a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801162e:	2301      	movs	r3, #1
 8011630:	602b      	str	r3, [r5, #0]
 8011632:	e7f6      	b.n	8011622 <prvSampleTimeNow+0x16>
 8011634:	20002290 	.word	0x20002290

08011638 <prvProcessExpiredTimer>:
{
 8011638:	b570      	push	{r4, r5, r6, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	0005      	movs	r5, r0
 801163e:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011640:	4b11      	ldr	r3, [pc, #68]	; (8011688 <prvProcessExpiredTimer+0x50>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011648:	1d20      	adds	r0, r4, #4
 801164a:	f7fe fc3b 	bl	800fec4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801164e:	69e3      	ldr	r3, [r4, #28]
 8011650:	2b01      	cmp	r3, #1
 8011652:	d004      	beq.n	801165e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011656:	0020      	movs	r0, r4
 8011658:	4798      	blx	r3
}
 801165a:	b002      	add	sp, #8
 801165c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 801165e:	69a3      	ldr	r3, [r4, #24]
 8011660:	1959      	adds	r1, r3, r5
 8011662:	002b      	movs	r3, r5
 8011664:	0032      	movs	r2, r6
 8011666:	0020      	movs	r0, r4
 8011668:	f7ff fed4 	bl	8011414 <prvInsertTimerInActiveList>
 801166c:	2801      	cmp	r0, #1
 801166e:	d1f1      	bne.n	8011654 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011670:	2300      	movs	r3, #0
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	002a      	movs	r2, r5
 8011676:	2100      	movs	r1, #0
 8011678:	0020      	movs	r0, r4
 801167a:	f7ff ff65 	bl	8011548 <xTimerGenericCommand>
			configASSERT( xResult );
 801167e:	2800      	cmp	r0, #0
 8011680:	d1e8      	bne.n	8011654 <prvProcessExpiredTimer+0x1c>
 8011682:	b672      	cpsid	i
 8011684:	e7fe      	b.n	8011684 <prvProcessExpiredTimer+0x4c>
 8011686:	46c0      	nop			; (mov r8, r8)
 8011688:	20002260 	.word	0x20002260

0801168c <prvProcessTimerOrBlockTask>:
{
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	0004      	movs	r4, r0
 8011692:	000e      	movs	r6, r1
	vTaskSuspendAll();
 8011694:	f7ff f9be 	bl	8010a14 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011698:	a801      	add	r0, sp, #4
 801169a:	f7ff ffb7 	bl	801160c <prvSampleTimeNow>
 801169e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d118      	bne.n	80116d8 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80116a6:	2e00      	cmp	r6, #0
 80116a8:	d101      	bne.n	80116ae <prvProcessTimerOrBlockTask+0x22>
 80116aa:	42a0      	cmp	r0, r4
 80116ac:	d20a      	bcs.n	80116c4 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80116ae:	1b61      	subs	r1, r4, r5
 80116b0:	4b0b      	ldr	r3, [pc, #44]	; (80116e0 <prvProcessTimerOrBlockTask+0x54>)
 80116b2:	6818      	ldr	r0, [r3, #0]
 80116b4:	f7fe ff42 	bl	801053c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80116b8:	f7ff fa4a 	bl	8010b50 <xTaskResumeAll>
 80116bc:	2800      	cmp	r0, #0
 80116be:	d008      	beq.n	80116d2 <prvProcessTimerOrBlockTask+0x46>
}
 80116c0:	b002      	add	sp, #8
 80116c2:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 80116c4:	f7ff fa44 	bl	8010b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80116c8:	0029      	movs	r1, r5
 80116ca:	0020      	movs	r0, r4
 80116cc:	f7ff ffb4 	bl	8011638 <prvProcessExpiredTimer>
 80116d0:	e7f6      	b.n	80116c0 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 80116d2:	f000 f8d9 	bl	8011888 <vPortYield>
 80116d6:	e7f3      	b.n	80116c0 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 80116d8:	f7ff fa3a 	bl	8010b50 <xTaskResumeAll>
}
 80116dc:	e7f0      	b.n	80116c0 <prvProcessTimerOrBlockTask+0x34>
 80116de:	46c0      	nop			; (mov r8, r8)
 80116e0:	20002294 	.word	0x20002294

080116e4 <prvProcessReceivedCommands>:
{
 80116e4:	b510      	push	{r4, lr}
 80116e6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116e8:	e002      	b.n	80116f0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116ea:	9b04      	ldr	r3, [sp, #16]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	da10      	bge.n	8011712 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116f0:	4b2a      	ldr	r3, [pc, #168]	; (801179c <prvProcessReceivedCommands+0xb8>)
 80116f2:	6818      	ldr	r0, [r3, #0]
 80116f4:	2300      	movs	r3, #0
 80116f6:	2200      	movs	r2, #0
 80116f8:	a904      	add	r1, sp, #16
 80116fa:	f7fe fe2b 	bl	8010354 <xQueueGenericReceive>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d04a      	beq.n	8011798 <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	2b00      	cmp	r3, #0
 8011706:	daf0      	bge.n	80116ea <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011708:	9b05      	ldr	r3, [sp, #20]
 801170a:	9907      	ldr	r1, [sp, #28]
 801170c:	9806      	ldr	r0, [sp, #24]
 801170e:	4798      	blx	r3
 8011710:	e7eb      	b.n	80116ea <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011712:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8011714:	6963      	ldr	r3, [r4, #20]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801171a:	1d20      	adds	r0, r4, #4
 801171c:	f7fe fbd2 	bl	800fec4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011720:	a803      	add	r0, sp, #12
 8011722:	f7ff ff73 	bl	801160c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	2b09      	cmp	r3, #9
 801172a:	d8e1      	bhi.n	80116f0 <prvProcessReceivedCommands+0xc>
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	491c      	ldr	r1, [pc, #112]	; (80117a0 <prvProcessReceivedCommands+0xbc>)
 8011730:	58cb      	ldr	r3, [r1, r3]
 8011732:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8011734:	9b05      	ldr	r3, [sp, #20]
 8011736:	69a2      	ldr	r2, [r4, #24]
 8011738:	4694      	mov	ip, r2
 801173a:	4463      	add	r3, ip
 801173c:	0019      	movs	r1, r3
 801173e:	9b05      	ldr	r3, [sp, #20]
 8011740:	0002      	movs	r2, r0
 8011742:	0020      	movs	r0, r4
 8011744:	f7ff fe66 	bl	8011414 <prvInsertTimerInActiveList>
 8011748:	2801      	cmp	r0, #1
 801174a:	d1d1      	bne.n	80116f0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801174c:	0020      	movs	r0, r4
 801174e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011750:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011752:	69e3      	ldr	r3, [r4, #28]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d1cb      	bne.n	80116f0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011758:	9b05      	ldr	r3, [sp, #20]
 801175a:	69a1      	ldr	r1, [r4, #24]
 801175c:	468c      	mov	ip, r1
 801175e:	4463      	add	r3, ip
 8011760:	001a      	movs	r2, r3
 8011762:	2300      	movs	r3, #0
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	2100      	movs	r1, #0
 8011768:	0020      	movs	r0, r4
 801176a:	f7ff feed 	bl	8011548 <xTimerGenericCommand>
							configASSERT( xResult );
 801176e:	2800      	cmp	r0, #0
 8011770:	d1be      	bne.n	80116f0 <prvProcessReceivedCommands+0xc>
 8011772:	b672      	cpsid	i
 8011774:	e7fe      	b.n	8011774 <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011776:	9905      	ldr	r1, [sp, #20]
 8011778:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801177a:	2900      	cmp	r1, #0
 801177c:	d006      	beq.n	801178c <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801177e:	1809      	adds	r1, r1, r0
 8011780:	0003      	movs	r3, r0
 8011782:	0002      	movs	r2, r0
 8011784:	0020      	movs	r0, r4
 8011786:	f7ff fe45 	bl	8011414 <prvInsertTimerInActiveList>
					break;
 801178a:	e7b1      	b.n	80116f0 <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801178c:	b672      	cpsid	i
 801178e:	e7fe      	b.n	801178e <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 8011790:	0020      	movs	r0, r4
 8011792:	f000 f9b1 	bl	8011af8 <vPortFree>
					break;
 8011796:	e7ab      	b.n	80116f0 <prvProcessReceivedCommands+0xc>
}
 8011798:	b008      	add	sp, #32
 801179a:	bd10      	pop	{r4, pc}
 801179c:	20002294 	.word	0x20002294
 80117a0:	0801d218 	.word	0x0801d218

080117a4 <prvTimerTask>:
{
 80117a4:	b500      	push	{lr}
 80117a6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117a8:	a801      	add	r0, sp, #4
 80117aa:	f7ff fe23 	bl	80113f4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80117ae:	9901      	ldr	r1, [sp, #4]
 80117b0:	f7ff ff6c 	bl	801168c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80117b4:	f7ff ff96 	bl	80116e4 <prvProcessReceivedCommands>
 80117b8:	e7f6      	b.n	80117a8 <prvTimerTask+0x4>

080117ba <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80117ba:	b510      	push	{r4, lr}
 80117bc:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80117be:	d101      	bne.n	80117c4 <pvTimerGetTimerID+0xa>
 80117c0:	b672      	cpsid	i
 80117c2:	e7fe      	b.n	80117c2 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 80117c4:	f000 f86c 	bl	80118a0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80117c8:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80117ca:	f000 f875 	bl	80118b8 <vPortExitCritical>

	return pvReturn;
}
 80117ce:	0020      	movs	r0, r4
 80117d0:	bd10      	pop	{r4, pc}
	...

080117d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80117d4:	4b03      	ldr	r3, [pc, #12]	; (80117e4 <prvTaskExitError+0x10>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	3301      	adds	r3, #1
 80117da:	d001      	beq.n	80117e0 <prvTaskExitError+0xc>
 80117dc:	b672      	cpsid	i
 80117de:	e7fe      	b.n	80117de <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80117e0:	b672      	cpsid	i
 80117e2:	e7fe      	b.n	80117e2 <prvTaskExitError+0xe>
 80117e4:	200000cc 	.word	0x200000cc

080117e8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80117e8:	4a06      	ldr	r2, [pc, #24]	; (8011804 <pxCurrentTCBConst2>)
 80117ea:	6813      	ldr	r3, [r2, #0]
 80117ec:	6818      	ldr	r0, [r3, #0]
 80117ee:	3020      	adds	r0, #32
 80117f0:	f380 8809 	msr	PSP, r0
 80117f4:	2002      	movs	r0, #2
 80117f6:	f380 8814 	msr	CONTROL, r0
 80117fa:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80117fc:	46ae      	mov	lr, r5
 80117fe:	b662      	cpsie	i
 8011800:	bd00      	pop	{pc}
 8011802:	46c0      	nop			; (mov r8, r8)

08011804 <pxCurrentTCBConst2>:
 8011804:	20002138 	.word	0x20002138

08011808 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8011808:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801180a:	4b06      	ldr	r3, [pc, #24]	; (8011824 <prvSetupTimerInterrupt+0x1c>)
 801180c:	6818      	ldr	r0, [r3, #0]
 801180e:	21fa      	movs	r1, #250	; 0xfa
 8011810:	0089      	lsls	r1, r1, #2
 8011812:	f7ee fc9d 	bl	8000150 <__udivsi3>
 8011816:	3801      	subs	r0, #1
 8011818:	4b03      	ldr	r3, [pc, #12]	; (8011828 <prvSetupTimerInterrupt+0x20>)
 801181a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801181c:	4b03      	ldr	r3, [pc, #12]	; (801182c <prvSetupTimerInterrupt+0x24>)
 801181e:	2207      	movs	r2, #7
 8011820:	601a      	str	r2, [r3, #0]
}
 8011822:	bd10      	pop	{r4, pc}
 8011824:	200000b8 	.word	0x200000b8
 8011828:	e000e014 	.word	0xe000e014
 801182c:	e000e010 	.word	0xe000e010

08011830 <pxPortInitialiseStack>:
{
 8011830:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011832:	1f03      	subs	r3, r0, #4
 8011834:	2480      	movs	r4, #128	; 0x80
 8011836:	0464      	lsls	r4, r4, #17
 8011838:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801183a:	3b04      	subs	r3, #4
 801183c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801183e:	3b04      	subs	r3, #4
 8011840:	4902      	ldr	r1, [pc, #8]	; (801184c <pxPortInitialiseStack+0x1c>)
 8011842:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011844:	3b14      	subs	r3, #20
 8011846:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011848:	3840      	subs	r0, #64	; 0x40
}
 801184a:	bd10      	pop	{r4, pc}
 801184c:	080117d5 	.word	0x080117d5

08011850 <SVC_Handler>:
}
 8011850:	4770      	bx	lr
	...

08011854 <xPortStartScheduler>:
{
 8011854:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8011856:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <xPortStartScheduler+0x2c>)
 8011858:	6819      	ldr	r1, [r3, #0]
 801185a:	22ff      	movs	r2, #255	; 0xff
 801185c:	0412      	lsls	r2, r2, #16
 801185e:	430a      	orrs	r2, r1
 8011860:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8011862:	6819      	ldr	r1, [r3, #0]
 8011864:	22ff      	movs	r2, #255	; 0xff
 8011866:	0612      	lsls	r2, r2, #24
 8011868:	430a      	orrs	r2, r1
 801186a:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 801186c:	f7ff ffcc 	bl	8011808 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011870:	4b04      	ldr	r3, [pc, #16]	; (8011884 <xPortStartScheduler+0x30>)
 8011872:	2200      	movs	r2, #0
 8011874:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8011876:	f7ff ffb7 	bl	80117e8 <vPortStartFirstTask>
	prvTaskExitError();
 801187a:	f7ff ffab 	bl	80117d4 <prvTaskExitError>
 801187e:	46c0      	nop			; (mov r8, r8)
 8011880:	e000ed20 	.word	0xe000ed20
 8011884:	200000cc 	.word	0x200000cc

08011888 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8011888:	4b04      	ldr	r3, [pc, #16]	; (801189c <vPortYield+0x14>)
 801188a:	2280      	movs	r2, #128	; 0x80
 801188c:	0552      	lsls	r2, r2, #21
 801188e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8011890:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011894:	f3bf 8f6f 	isb	sy
}
 8011898:	4770      	bx	lr
 801189a:	46c0      	nop			; (mov r8, r8)
 801189c:	e000ed04 	.word	0xe000ed04

080118a0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80118a0:	b672      	cpsid	i
    uxCriticalNesting++;
 80118a2:	4a04      	ldr	r2, [pc, #16]	; (80118b4 <vPortEnterCritical+0x14>)
 80118a4:	6813      	ldr	r3, [r2, #0]
 80118a6:	3301      	adds	r3, #1
 80118a8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80118aa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80118ae:	f3bf 8f6f 	isb	sy
}
 80118b2:	4770      	bx	lr
 80118b4:	200000cc 	.word	0x200000cc

080118b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80118b8:	4b06      	ldr	r3, [pc, #24]	; (80118d4 <vPortExitCritical+0x1c>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <vPortExitCritical+0xc>
 80118c0:	b672      	cpsid	i
 80118c2:	e7fe      	b.n	80118c2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80118c4:	3b01      	subs	r3, #1
 80118c6:	4a03      	ldr	r2, [pc, #12]	; (80118d4 <vPortExitCritical+0x1c>)
 80118c8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d100      	bne.n	80118d0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80118ce:	b662      	cpsie	i
}
 80118d0:	4770      	bx	lr
 80118d2:	46c0      	nop			; (mov r8, r8)
 80118d4:	200000cc 	.word	0x200000cc

080118d8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80118d8:	f3ef 8010 	mrs	r0, PRIMASK
 80118dc:	b672      	cpsid	i
 80118de:	4770      	bx	lr
}
 80118e0:	2000      	movs	r0, #0

080118e2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80118e2:	f380 8810 	msr	PRIMASK, r0
 80118e6:	4770      	bx	lr

080118e8 <PendSV_Handler>:
	__asm volatile
 80118e8:	f3ef 8009 	mrs	r0, PSP
 80118ec:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <pxCurrentTCBConst>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	3820      	subs	r0, #32
 80118f2:	6010      	str	r0, [r2, #0]
 80118f4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80118f6:	4644      	mov	r4, r8
 80118f8:	464d      	mov	r5, r9
 80118fa:	4656      	mov	r6, sl
 80118fc:	465f      	mov	r7, fp
 80118fe:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011900:	b508      	push	{r3, lr}
 8011902:	b672      	cpsid	i
 8011904:	f7ff fa40 	bl	8010d88 <vTaskSwitchContext>
 8011908:	b662      	cpsie	i
 801190a:	bc0c      	pop	{r2, r3}
 801190c:	6811      	ldr	r1, [r2, #0]
 801190e:	6808      	ldr	r0, [r1, #0]
 8011910:	3010      	adds	r0, #16
 8011912:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011914:	46a0      	mov	r8, r4
 8011916:	46a9      	mov	r9, r5
 8011918:	46b2      	mov	sl, r6
 801191a:	46bb      	mov	fp, r7
 801191c:	f380 8809 	msr	PSP, r0
 8011920:	3820      	subs	r0, #32
 8011922:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011924:	4718      	bx	r3
 8011926:	46c0      	nop			; (mov r8, r8)

08011928 <pxCurrentTCBConst>:
 8011928:	20002138 	.word	0x20002138

0801192c <xPortSysTickHandler>:
{
 801192c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801192e:	f7ff ffd3 	bl	80118d8 <ulSetInterruptMaskFromISR>
 8011932:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8011934:	f7ff f882 	bl	8010a3c <xTaskIncrementTick>
 8011938:	2800      	cmp	r0, #0
 801193a:	d003      	beq.n	8011944 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801193c:	4b03      	ldr	r3, [pc, #12]	; (801194c <xPortSysTickHandler+0x20>)
 801193e:	2280      	movs	r2, #128	; 0x80
 8011940:	0552      	lsls	r2, r2, #21
 8011942:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011944:	0020      	movs	r0, r4
 8011946:	f7ff ffcc 	bl	80118e2 <vClearInterruptMaskFromISR>
}
 801194a:	bd10      	pop	{r4, pc}
 801194c:	e000ed04 	.word	0xe000ed04

08011950 <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8011950:	4a11      	ldr	r2, [pc, #68]	; (8011998 <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011952:	0753      	lsls	r3, r2, #29
 8011954:	d01e      	beq.n	8011994 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8011956:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011958:	2307      	movs	r3, #7
 801195a:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 801195c:	4b0f      	ldr	r3, [pc, #60]	; (801199c <prvHeapInit+0x4c>)
 801195e:	1a5b      	subs	r3, r3, r1
 8011960:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011962:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011964:	480e      	ldr	r0, [pc, #56]	; (80119a0 <prvHeapInit+0x50>)
 8011966:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011968:	2100      	movs	r1, #0
 801196a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 801196c:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 801196e:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011970:	2007      	movs	r0, #7
 8011972:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8011974:	480b      	ldr	r0, [pc, #44]	; (80119a4 <prvHeapInit+0x54>)
 8011976:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8011978:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801197a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 801197c:	1a99      	subs	r1, r3, r2
 801197e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011980:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011982:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <prvHeapInit+0x58>)
 8011984:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <prvHeapInit+0x5c>)
 8011988:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801198a:	4b09      	ldr	r3, [pc, #36]	; (80119b0 <prvHeapInit+0x60>)
 801198c:	2280      	movs	r2, #128	; 0x80
 801198e:	0612      	lsls	r2, r2, #24
 8011990:	601a      	str	r2, [r3, #0]
}
 8011992:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011994:	4b01      	ldr	r3, [pc, #4]	; (801199c <prvHeapInit+0x4c>)
 8011996:	e7e5      	b.n	8011964 <prvHeapInit+0x14>
 8011998:	2000229c 	.word	0x2000229c
 801199c:	00004a38 	.word	0x00004a38
 80119a0:	20006ce0 	.word	0x20006ce0
 80119a4:	20002298 	.word	0x20002298
 80119a8:	20006cdc 	.word	0x20006cdc
 80119ac:	20006cd8 	.word	0x20006cd8
 80119b0:	20006cd4 	.word	0x20006cd4

080119b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119b4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80119b6:	4b12      	ldr	r3, [pc, #72]	; (8011a00 <prvInsertBlockIntoFreeList+0x4c>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	4282      	cmp	r2, r0
 80119bc:	d319      	bcc.n	80119f2 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80119be:	6859      	ldr	r1, [r3, #4]
 80119c0:	185c      	adds	r4, r3, r1
 80119c2:	4284      	cmp	r4, r0
 80119c4:	d103      	bne.n	80119ce <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80119c6:	6840      	ldr	r0, [r0, #4]
 80119c8:	1809      	adds	r1, r1, r0
 80119ca:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80119cc:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80119ce:	6841      	ldr	r1, [r0, #4]
 80119d0:	1844      	adds	r4, r0, r1
 80119d2:	42a2      	cmp	r2, r4
 80119d4:	d111      	bne.n	80119fa <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119d6:	4c0b      	ldr	r4, [pc, #44]	; (8011a04 <prvInsertBlockIntoFreeList+0x50>)
 80119d8:	6824      	ldr	r4, [r4, #0]
 80119da:	42a2      	cmp	r2, r4
 80119dc:	d00b      	beq.n	80119f6 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119de:	6852      	ldr	r2, [r2, #4]
 80119e0:	1889      	adds	r1, r1, r2
 80119e2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	6812      	ldr	r2, [r2, #0]
 80119e8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80119ea:	4298      	cmp	r0, r3
 80119ec:	d000      	beq.n	80119f0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80119ee:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119f0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80119f2:	0013      	movs	r3, r2
 80119f4:	e7e0      	b.n	80119b8 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119f6:	6004      	str	r4, [r0, #0]
 80119f8:	e7f7      	b.n	80119ea <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80119fa:	6002      	str	r2, [r0, #0]
 80119fc:	e7f5      	b.n	80119ea <prvInsertBlockIntoFreeList+0x36>
 80119fe:	46c0      	nop			; (mov r8, r8)
 8011a00:	20006ce0 	.word	0x20006ce0
 8011a04:	20002298 	.word	0x20002298

08011a08 <pvPortMalloc>:
{
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8011a0c:	f7ff f802 	bl	8010a14 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011a10:	4b34      	ldr	r3, [pc, #208]	; (8011ae4 <pvPortMalloc+0xdc>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00c      	beq.n	8011a32 <pvPortMalloc+0x2a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a18:	4b33      	ldr	r3, [pc, #204]	; (8011ae8 <pvPortMalloc+0xe0>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4223      	tst	r3, r4
 8011a1e:	d00b      	beq.n	8011a38 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 8011a20:	f7ff f896 	bl	8010b50 <xTaskResumeAll>
void *pvReturn = NULL;
 8011a24:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8011a26:	f7fd fb93 	bl	800f150 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a2a:	0773      	lsls	r3, r6, #29
 8011a2c:	d058      	beq.n	8011ae0 <pvPortMalloc+0xd8>
 8011a2e:	b672      	cpsid	i
 8011a30:	e7fe      	b.n	8011a30 <pvPortMalloc+0x28>
			prvHeapInit();
 8011a32:	f7ff ff8d 	bl	8011950 <prvHeapInit>
 8011a36:	e7ef      	b.n	8011a18 <pvPortMalloc+0x10>
			if( xWantedSize > 0 )
 8011a38:	2c00      	cmp	r4, #0
 8011a3a:	d009      	beq.n	8011a50 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8011a3c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a3e:	0763      	lsls	r3, r4, #29
 8011a40:	d006      	beq.n	8011a50 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a42:	2307      	movs	r3, #7
 8011a44:	439c      	bics	r4, r3
 8011a46:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a48:	421c      	tst	r4, r3
 8011a4a:	d001      	beq.n	8011a50 <pvPortMalloc+0x48>
 8011a4c:	b672      	cpsid	i
 8011a4e:	e7fe      	b.n	8011a4e <pvPortMalloc+0x46>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a50:	2c00      	cmp	r4, #0
 8011a52:	d006      	beq.n	8011a62 <pvPortMalloc+0x5a>
 8011a54:	4b25      	ldr	r3, [pc, #148]	; (8011aec <pvPortMalloc+0xe4>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	42a3      	cmp	r3, r4
 8011a5a:	d306      	bcc.n	8011a6a <pvPortMalloc+0x62>
				pxBlock = xStart.pxNextFreeBlock;
 8011a5c:	4b24      	ldr	r3, [pc, #144]	; (8011af0 <pvPortMalloc+0xe8>)
 8011a5e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a60:	e009      	b.n	8011a76 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8011a62:	f7ff f875 	bl	8010b50 <xTaskResumeAll>
void *pvReturn = NULL;
 8011a66:	2600      	movs	r6, #0
 8011a68:	e7dd      	b.n	8011a26 <pvPortMalloc+0x1e>
	( void ) xTaskResumeAll();
 8011a6a:	f7ff f871 	bl	8010b50 <xTaskResumeAll>
void *pvReturn = NULL;
 8011a6e:	2600      	movs	r6, #0
 8011a70:	e7d9      	b.n	8011a26 <pvPortMalloc+0x1e>
					pxPreviousBlock = pxBlock;
 8011a72:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a74:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a76:	686a      	ldr	r2, [r5, #4]
 8011a78:	42a2      	cmp	r2, r4
 8011a7a:	d202      	bcs.n	8011a82 <pvPortMalloc+0x7a>
 8011a7c:	682a      	ldr	r2, [r5, #0]
 8011a7e:	2a00      	cmp	r2, #0
 8011a80:	d1f7      	bne.n	8011a72 <pvPortMalloc+0x6a>
				if( pxBlock != pxEnd )
 8011a82:	4a18      	ldr	r2, [pc, #96]	; (8011ae4 <pvPortMalloc+0xdc>)
 8011a84:	6812      	ldr	r2, [r2, #0]
 8011a86:	42aa      	cmp	r2, r5
 8011a88:	d00c      	beq.n	8011aa4 <pvPortMalloc+0x9c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a8a:	681e      	ldr	r6, [r3, #0]
 8011a8c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a8e:	682a      	ldr	r2, [r5, #0]
 8011a90:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a92:	686b      	ldr	r3, [r5, #4]
 8011a94:	1b1b      	subs	r3, r3, r4
 8011a96:	2b10      	cmp	r3, #16
 8011a98:	d90c      	bls.n	8011ab4 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a9a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a9c:	0742      	lsls	r2, r0, #29
 8011a9e:	d005      	beq.n	8011aac <pvPortMalloc+0xa4>
 8011aa0:	b672      	cpsid	i
 8011aa2:	e7fe      	b.n	8011aa2 <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
 8011aa4:	f7ff f854 	bl	8010b50 <xTaskResumeAll>
void *pvReturn = NULL;
 8011aa8:	2600      	movs	r6, #0
 8011aaa:	e7bc      	b.n	8011a26 <pvPortMalloc+0x1e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011aac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011aae:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8011ab0:	f7ff ff80 	bl	80119b4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011ab4:	686a      	ldr	r2, [r5, #4]
 8011ab6:	490d      	ldr	r1, [pc, #52]	; (8011aec <pvPortMalloc+0xe4>)
 8011ab8:	680b      	ldr	r3, [r1, #0]
 8011aba:	1a9b      	subs	r3, r3, r2
 8011abc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011abe:	490d      	ldr	r1, [pc, #52]	; (8011af4 <pvPortMalloc+0xec>)
 8011ac0:	6809      	ldr	r1, [r1, #0]
 8011ac2:	428b      	cmp	r3, r1
 8011ac4:	d201      	bcs.n	8011aca <pvPortMalloc+0xc2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ac6:	490b      	ldr	r1, [pc, #44]	; (8011af4 <pvPortMalloc+0xec>)
 8011ac8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011aca:	4b07      	ldr	r3, [pc, #28]	; (8011ae8 <pvPortMalloc+0xe0>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8011ad6:	f7ff f83b 	bl	8010b50 <xTaskResumeAll>
		if( pvReturn == NULL )
 8011ada:	2e00      	cmp	r6, #0
 8011adc:	d1a5      	bne.n	8011a2a <pvPortMalloc+0x22>
 8011ade:	e7a2      	b.n	8011a26 <pvPortMalloc+0x1e>
}
 8011ae0:	0030      	movs	r0, r6
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	20002298 	.word	0x20002298
 8011ae8:	20006cd4 	.word	0x20006cd4
 8011aec:	20006cd8 	.word	0x20006cd8
 8011af0:	20006ce0 	.word	0x20006ce0
 8011af4:	20006cdc 	.word	0x20006cdc

08011af8 <vPortFree>:
{
 8011af8:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d020      	beq.n	8011b40 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8011afe:	0005      	movs	r5, r0
 8011b00:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b02:	686b      	ldr	r3, [r5, #4]
 8011b04:	4a0f      	ldr	r2, [pc, #60]	; (8011b44 <vPortFree+0x4c>)
 8011b06:	6812      	ldr	r2, [r2, #0]
 8011b08:	421a      	tst	r2, r3
 8011b0a:	d101      	bne.n	8011b10 <vPortFree+0x18>
 8011b0c:	b672      	cpsid	i
 8011b0e:	e7fe      	b.n	8011b0e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b10:	0001      	movs	r1, r0
 8011b12:	3908      	subs	r1, #8
 8011b14:	6809      	ldr	r1, [r1, #0]
 8011b16:	2900      	cmp	r1, #0
 8011b18:	d001      	beq.n	8011b1e <vPortFree+0x26>
 8011b1a:	b672      	cpsid	i
 8011b1c:	e7fe      	b.n	8011b1c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b1e:	3808      	subs	r0, #8
 8011b20:	0004      	movs	r4, r0
 8011b22:	4393      	bics	r3, r2
 8011b24:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8011b26:	f7fe ff75 	bl	8010a14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b2a:	6863      	ldr	r3, [r4, #4]
 8011b2c:	4a06      	ldr	r2, [pc, #24]	; (8011b48 <vPortFree+0x50>)
 8011b2e:	6811      	ldr	r1, [r2, #0]
 8011b30:	468c      	mov	ip, r1
 8011b32:	4463      	add	r3, ip
 8011b34:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b36:	0028      	movs	r0, r5
 8011b38:	f7ff ff3c 	bl	80119b4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8011b3c:	f7ff f808 	bl	8010b50 <xTaskResumeAll>
}
 8011b40:	bd70      	pop	{r4, r5, r6, pc}
 8011b42:	46c0      	nop			; (mov r8, r8)
 8011b44:	20006cd4 	.word	0x20006cd4
 8011b48:	20006cd8 	.word	0x20006cd8

08011b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011b4c:	b510      	push	{r4, lr}
 8011b4e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8011b50:	f002 f85a 	bl	8013c08 <HAL_RCC_GetHCLKFreq>
 8011b54:	21fa      	movs	r1, #250	; 0xfa
 8011b56:	0089      	lsls	r1, r1, #2
 8011b58:	f7ee fafa 	bl	8000150 <__udivsi3>
 8011b5c:	f000 fba6 	bl	80122ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8011b60:	2001      	movs	r0, #1
 8011b62:	2200      	movs	r2, #0
 8011b64:	0021      	movs	r1, r4
 8011b66:	4240      	negs	r0, r0
 8011b68:	f000 fb5c 	bl	8012224 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	bd10      	pop	{r4, pc}

08011b70 <HAL_Init>:
{
 8011b70:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011b72:	4a06      	ldr	r2, [pc, #24]	; (8011b8c <HAL_Init+0x1c>)
 8011b74:	6813      	ldr	r3, [r2, #0]
 8011b76:	2110      	movs	r1, #16
 8011b78:	430b      	orrs	r3, r1
 8011b7a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	f7ff ffe5 	bl	8011b4c <HAL_InitTick>
  HAL_MspInit();
 8011b82:	f001 fc22 	bl	80133ca <HAL_MspInit>
}
 8011b86:	2000      	movs	r0, #0
 8011b88:	bd10      	pop	{r4, pc}
 8011b8a:	46c0      	nop			; (mov r8, r8)
 8011b8c:	40022000 	.word	0x40022000

08011b90 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8011b90:	4a02      	ldr	r2, [pc, #8]	; (8011b9c <HAL_IncTick+0xc>)
 8011b92:	6813      	ldr	r3, [r2, #0]
 8011b94:	3301      	adds	r3, #1
 8011b96:	6013      	str	r3, [r2, #0]
}
 8011b98:	4770      	bx	lr
 8011b9a:	46c0      	nop			; (mov r8, r8)
 8011b9c:	20006ce8 	.word	0x20006ce8

08011ba0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8011ba0:	4b01      	ldr	r3, [pc, #4]	; (8011ba8 <HAL_GetTick+0x8>)
 8011ba2:	6818      	ldr	r0, [r3, #0]
}
 8011ba4:	4770      	bx	lr
 8011ba6:	46c0      	nop			; (mov r8, r8)
 8011ba8:	20006ce8 	.word	0x20006ce8

08011bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8011bac:	b510      	push	{r4, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8011bb2:	f7ff fff5 	bl	8011ba0 <HAL_GetTick>
 8011bb6:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8011bb8:	f7ff fff2 	bl	8011ba0 <HAL_GetTick>
 8011bbc:	1b00      	subs	r0, r0, r4
 8011bbe:	9b01      	ldr	r3, [sp, #4]
 8011bc0:	4298      	cmp	r0, r3
 8011bc2:	d3f9      	bcc.n	8011bb8 <HAL_Delay+0xc>
  {
  }
}
 8011bc4:	b002      	add	sp, #8
 8011bc6:	bd10      	pop	{r4, pc}

08011bc8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8011bc8:	4b01      	ldr	r3, [pc, #4]	; (8011bd0 <HAL_GetREVID+0x8>)
 8011bca:	6818      	ldr	r0, [r3, #0]
 8011bcc:	0c00      	lsrs	r0, r0, #16
}
 8011bce:	4770      	bx	lr
 8011bd0:	40015800 	.word	0x40015800

08011bd4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011bd4:	4b02      	ldr	r3, [pc, #8]	; (8011be0 <HAL_GetDEVID+0xc>)
 8011bd6:	6818      	ldr	r0, [r3, #0]
 8011bd8:	0500      	lsls	r0, r0, #20
 8011bda:	0d00      	lsrs	r0, r0, #20
}
 8011bdc:	4770      	bx	lr
 8011bde:	46c0      	nop			; (mov r8, r8)
 8011be0:	40015800 	.word	0x40015800

08011be4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8011be4:	b570      	push	{r4, r5, r6, lr}
 8011be6:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8011be8:	6803      	ldr	r3, [r0, #0]
 8011bea:	689a      	ldr	r2, [r3, #8]
 8011bec:	0752      	lsls	r2, r2, #29
 8011bee:	d521      	bpl.n	8011c34 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011bf0:	689a      	ldr	r2, [r3, #8]
 8011bf2:	0752      	lsls	r2, r2, #29
 8011bf4:	d506      	bpl.n	8011c04 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8011bf6:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011bf8:	0792      	lsls	r2, r2, #30
 8011bfa:	d403      	bmi.n	8011c04 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8011bfc:	689a      	ldr	r2, [r3, #8]
 8011bfe:	2110      	movs	r1, #16
 8011c00:	430a      	orrs	r2, r1
 8011c02:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8011c04:	f7ff ffcc 	bl	8011ba0 <HAL_GetTick>
 8011c08:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	075b      	lsls	r3, r3, #29
 8011c10:	d50e      	bpl.n	8011c30 <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8011c12:	f7ff ffc5 	bl	8011ba0 <HAL_GetTick>
 8011c16:	1b40      	subs	r0, r0, r5
 8011c18:	2802      	cmp	r0, #2
 8011c1a:	d9f6      	bls.n	8011c0a <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c1e:	2210      	movs	r2, #16
 8011c20:	4313      	orrs	r3, r2
 8011c22:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011c24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011c26:	3a0f      	subs	r2, #15
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	e002      	b.n	8011c36 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8011c30:	2000      	movs	r0, #0
 8011c32:	e000      	b.n	8011c36 <ADC_ConversionStop+0x52>
 8011c34:	2000      	movs	r0, #0
}
 8011c36:	bd70      	pop	{r4, r5, r6, pc}

08011c38 <ADC_Disable>:
{
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011c3c:	6802      	ldr	r2, [r0, #0]
 8011c3e:	6891      	ldr	r1, [r2, #8]
 8011c40:	2303      	movs	r3, #3
 8011c42:	400b      	ands	r3, r1
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d001      	beq.n	8011c4c <ADC_Disable+0x14>
  return HAL_OK;
 8011c48:	2000      	movs	r0, #0
}
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011c4c:	6813      	ldr	r3, [r2, #0]
 8011c4e:	07db      	lsls	r3, r3, #31
 8011c50:	d402      	bmi.n	8011c58 <ADC_Disable+0x20>
 8011c52:	68d3      	ldr	r3, [r2, #12]
 8011c54:	041b      	lsls	r3, r3, #16
 8011c56:	d52d      	bpl.n	8011cb4 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8011c58:	6891      	ldr	r1, [r2, #8]
 8011c5a:	2305      	movs	r3, #5
 8011c5c:	400b      	ands	r3, r1
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d009      	beq.n	8011c76 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c64:	2210      	movs	r2, #16
 8011c66:	4313      	orrs	r3, r2
 8011c68:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011c6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011c6c:	3a0f      	subs	r2, #15
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011c72:	2001      	movs	r0, #1
 8011c74:	e7e9      	b.n	8011c4a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8011c76:	6893      	ldr	r3, [r2, #8]
 8011c78:	2102      	movs	r1, #2
 8011c7a:	430b      	orrs	r3, r1
 8011c7c:	6093      	str	r3, [r2, #8]
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	2203      	movs	r2, #3
 8011c82:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8011c84:	f7ff ff8c 	bl	8011ba0 <HAL_GetTick>
 8011c88:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	07db      	lsls	r3, r3, #31
 8011c90:	d50e      	bpl.n	8011cb0 <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8011c92:	f7ff ff85 	bl	8011ba0 <HAL_GetTick>
 8011c96:	1b40      	subs	r0, r0, r5
 8011c98:	2802      	cmp	r0, #2
 8011c9a:	d9f6      	bls.n	8011c8a <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c9e:	2210      	movs	r2, #16
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011ca4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011ca6:	3a0f      	subs	r2, #15
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011cac:	2001      	movs	r0, #1
 8011cae:	e7cc      	b.n	8011c4a <ADC_Disable+0x12>
  return HAL_OK;
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	e7ca      	b.n	8011c4a <ADC_Disable+0x12>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e7c8      	b.n	8011c4a <ADC_Disable+0x12>

08011cb8 <ADC_Enable>:
{
 8011cb8:	b530      	push	{r4, r5, lr}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011cc2:	6803      	ldr	r3, [r0, #0]
 8011cc4:	6899      	ldr	r1, [r3, #8]
 8011cc6:	2203      	movs	r2, #3
 8011cc8:	400a      	ands	r2, r1
 8011cca:	2a01      	cmp	r2, #1
 8011ccc:	d00e      	beq.n	8011cec <ADC_Enable+0x34>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8011cce:	6899      	ldr	r1, [r3, #8]
 8011cd0:	4a20      	ldr	r2, [pc, #128]	; (8011d54 <ADC_Enable+0x9c>)
 8011cd2:	4211      	tst	r1, r2
 8011cd4:	d112      	bne.n	8011cfc <ADC_Enable+0x44>
    __HAL_ADC_ENABLE(hadc);
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	2101      	movs	r1, #1
 8011cda:	430a      	orrs	r2, r1
 8011cdc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8011cde:	4b1e      	ldr	r3, [pc, #120]	; (8011d58 <ADC_Enable+0xa0>)
 8011ce0:	6818      	ldr	r0, [r3, #0]
 8011ce2:	491e      	ldr	r1, [pc, #120]	; (8011d5c <ADC_Enable+0xa4>)
 8011ce4:	f7ee fa34 	bl	8000150 <__udivsi3>
 8011ce8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8011cea:	e015      	b.n	8011d18 <ADC_Enable+0x60>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011cec:	681a      	ldr	r2, [r3, #0]
 8011cee:	07d2      	lsls	r2, r2, #31
 8011cf0:	d42d      	bmi.n	8011d4e <ADC_Enable+0x96>
 8011cf2:	68da      	ldr	r2, [r3, #12]
 8011cf4:	0412      	lsls	r2, r2, #16
 8011cf6:	d5ea      	bpl.n	8011cce <ADC_Enable+0x16>
  return HAL_OK;
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	e008      	b.n	8011d0e <ADC_Enable+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011cfe:	2210      	movs	r2, #16
 8011d00:	4313      	orrs	r3, r2
 8011d02:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011d04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011d06:	3a0f      	subs	r2, #15
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011d0c:	2001      	movs	r0, #1
}
 8011d0e:	b003      	add	sp, #12
 8011d10:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8011d12:	9b01      	ldr	r3, [sp, #4]
 8011d14:	3b01      	subs	r3, #1
 8011d16:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8011d18:	9b01      	ldr	r3, [sp, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d1f9      	bne.n	8011d12 <ADC_Enable+0x5a>
    tickstart = HAL_GetTick();
 8011d1e:	f7ff ff3f 	bl	8011ba0 <HAL_GetTick>
 8011d22:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	07db      	lsls	r3, r3, #31
 8011d2a:	d40e      	bmi.n	8011d4a <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011d2c:	f7ff ff38 	bl	8011ba0 <HAL_GetTick>
 8011d30:	1b40      	subs	r0, r0, r5
 8011d32:	2802      	cmp	r0, #2
 8011d34:	d9f6      	bls.n	8011d24 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011d36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011d38:	2210      	movs	r2, #16
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011d3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011d40:	3a0f      	subs	r2, #15
 8011d42:	4313      	orrs	r3, r2
 8011d44:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011d46:	2001      	movs	r0, #1
 8011d48:	e7e1      	b.n	8011d0e <ADC_Enable+0x56>
  return HAL_OK;
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	e7df      	b.n	8011d0e <ADC_Enable+0x56>
 8011d4e:	2000      	movs	r0, #0
 8011d50:	e7dd      	b.n	8011d0e <ADC_Enable+0x56>
 8011d52:	46c0      	nop			; (mov r8, r8)
 8011d54:	80000017 	.word	0x80000017
 8011d58:	200000b8 	.word	0x200000b8
 8011d5c:	000f4240 	.word	0x000f4240

08011d60 <HAL_ADC_Init>:
{
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8011d64:	d100      	bne.n	8011d68 <HAL_ADC_Init+0x8>
 8011d66:	e0a7      	b.n	8011eb8 <HAL_ADC_Init+0x158>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011d68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d07d      	beq.n	8011e6a <HAL_ADC_Init+0x10a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8011d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011d70:	06db      	lsls	r3, r3, #27
 8011d72:	d500      	bpl.n	8011d76 <HAL_ADC_Init+0x16>
 8011d74:	e09a      	b.n	8011eac <HAL_ADC_Init+0x14c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8011d76:	6821      	ldr	r1, [r4, #0]
 8011d78:	688b      	ldr	r3, [r1, #8]
 8011d7a:	2204      	movs	r2, #4
 8011d7c:	401a      	ands	r2, r3
      (tmp_hal_status == HAL_OK)                                &&
 8011d7e:	d000      	beq.n	8011d82 <HAL_ADC_Init+0x22>
 8011d80:	e094      	b.n	8011eac <HAL_ADC_Init+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8011d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011d84:	484d      	ldr	r0, [pc, #308]	; (8011ebc <HAL_ADC_Init+0x15c>)
 8011d86:	4003      	ands	r3, r0
 8011d88:	3006      	adds	r0, #6
 8011d8a:	30ff      	adds	r0, #255	; 0xff
 8011d8c:	4303      	orrs	r3, r0
 8011d8e:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011d90:	6888      	ldr	r0, [r1, #8]
 8011d92:	2303      	movs	r3, #3
 8011d94:	4003      	ands	r3, r0
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d06d      	beq.n	8011e76 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR1,
 8011d9a:	68cb      	ldr	r3, [r1, #12]
 8011d9c:	2018      	movs	r0, #24
 8011d9e:	4383      	bics	r3, r0
 8011da0:	68a0      	ldr	r0, [r4, #8]
 8011da2:	4303      	orrs	r3, r0
 8011da4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8011da6:	6821      	ldr	r1, [r4, #0]
 8011da8:	690b      	ldr	r3, [r1, #16]
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	089b      	lsrs	r3, r3, #2
 8011dae:	6860      	ldr	r0, [r4, #4]
 8011db0:	4303      	orrs	r3, r0
 8011db2:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8011db4:	6821      	ldr	r1, [r4, #0]
 8011db6:	68cb      	ldr	r3, [r1, #12]
 8011db8:	4841      	ldr	r0, [pc, #260]	; (8011ec0 <HAL_ADC_Init+0x160>)
 8011dba:	4003      	ands	r3, r0
 8011dbc:	60cb      	str	r3, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011dbe:	69a3      	ldr	r3, [r4, #24]
 8011dc0:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8011dc2:	69e1      	ldr	r1, [r4, #28]
 8011dc4:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011dc6:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8011dc8:	6a21      	ldr	r1, [r4, #32]
 8011dca:	0348      	lsls	r0, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8011dcc:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011dce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011dd0:	2801      	cmp	r0, #1
 8011dd2:	d057      	beq.n	8011e84 <HAL_ADC_Init+0x124>
 8011dd4:	2080      	movs	r0, #128	; 0x80
 8011dd6:	0140      	lsls	r0, r0, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8011dd8:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011dda:	68e0      	ldr	r0, [r4, #12]
 8011ddc:	4303      	orrs	r3, r0
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011dde:	6920      	ldr	r0, [r4, #16]
 8011de0:	2802      	cmp	r0, #2
 8011de2:	d051      	beq.n	8011e88 <HAL_ADC_Init+0x128>
                 hadc->Init.DataAlign                                   |
 8011de4:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8011de6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011de8:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011dea:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8011dec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011dee:	2a01      	cmp	r2, #1
 8011df0:	d04c      	beq.n	8011e8c <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011df2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011df4:	21c2      	movs	r1, #194	; 0xc2
 8011df6:	31ff      	adds	r1, #255	; 0xff
 8011df8:	428a      	cmp	r2, r1
 8011dfa:	d002      	beq.n	8011e02 <HAL_ADC_Init+0xa2>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8011dfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011dfe:	430a      	orrs	r2, r1
 8011e00:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8011e02:	6821      	ldr	r1, [r4, #0]
 8011e04:	68ca      	ldr	r2, [r1, #12]
 8011e06:	431a      	orrs	r2, r3
 8011e08:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8011e0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011e0c:	2180      	movs	r1, #128	; 0x80
 8011e0e:	0549      	lsls	r1, r1, #21
 8011e10:	428a      	cmp	r2, r1
 8011e12:	d00d      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e14:	2a01      	cmp	r2, #1
 8011e16:	d00b      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e18:	2a02      	cmp	r2, #2
 8011e1a:	d009      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e1c:	2a03      	cmp	r2, #3
 8011e1e:	d007      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e20:	2a04      	cmp	r2, #4
 8011e22:	d005      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e24:	2a05      	cmp	r2, #5
 8011e26:	d003      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e28:	2a06      	cmp	r2, #6
 8011e2a:	d001      	beq.n	8011e30 <HAL_ADC_Init+0xd0>
 8011e2c:	2a07      	cmp	r2, #7
 8011e2e:	d10a      	bne.n	8011e46 <HAL_ADC_Init+0xe6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011e30:	6820      	ldr	r0, [r4, #0]
 8011e32:	6941      	ldr	r1, [r0, #20]
 8011e34:	2207      	movs	r2, #7
 8011e36:	4391      	bics	r1, r2
 8011e38:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8011e3a:	6820      	ldr	r0, [r4, #0]
 8011e3c:	6941      	ldr	r1, [r0, #20]
 8011e3e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011e40:	402a      	ands	r2, r5
 8011e42:	430a      	orrs	r2, r1
 8011e44:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8011e46:	6822      	ldr	r2, [r4, #0]
 8011e48:	68d2      	ldr	r2, [r2, #12]
 8011e4a:	491e      	ldr	r1, [pc, #120]	; (8011ec4 <HAL_ADC_Init+0x164>)
 8011e4c:	400a      	ands	r2, r1
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d022      	beq.n	8011e98 <HAL_ADC_Init+0x138>
      ADC_STATE_CLR_SET(hadc->State,
 8011e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e54:	2212      	movs	r2, #18
 8011e56:	4393      	bics	r3, r2
 8011e58:	3a02      	subs	r2, #2
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011e5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011e60:	3a0f      	subs	r2, #15
 8011e62:	4313      	orrs	r3, r2
 8011e64:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8011e66:	2001      	movs	r0, #1
 8011e68:	e025      	b.n	8011eb6 <HAL_ADC_Init+0x156>
    ADC_CLEAR_ERRORCODE(hadc);
 8011e6a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8011e6c:	2240      	movs	r2, #64	; 0x40
 8011e6e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8011e70:	f7f6 fe3c 	bl	8008aec <HAL_ADC_MspInit>
 8011e74:	e77b      	b.n	8011d6e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011e76:	680b      	ldr	r3, [r1, #0]
 8011e78:	07db      	lsls	r3, r3, #31
 8011e7a:	d49b      	bmi.n	8011db4 <HAL_ADC_Init+0x54>
 8011e7c:	68cb      	ldr	r3, [r1, #12]
 8011e7e:	041b      	lsls	r3, r3, #16
 8011e80:	d498      	bmi.n	8011db4 <HAL_ADC_Init+0x54>
 8011e82:	e78a      	b.n	8011d9a <HAL_ADC_Init+0x3a>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011e84:	0010      	movs	r0, r2
 8011e86:	e7a7      	b.n	8011dd8 <HAL_ADC_Init+0x78>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011e88:	2204      	movs	r2, #4
 8011e8a:	e7ab      	b.n	8011de4 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8011e8c:	2900      	cmp	r1, #0
 8011e8e:	d1b0      	bne.n	8011df2 <HAL_ADC_Init+0x92>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8011e90:	2280      	movs	r2, #128	; 0x80
 8011e92:	0252      	lsls	r2, r2, #9
 8011e94:	4313      	orrs	r3, r2
 8011e96:	e7ac      	b.n	8011df2 <HAL_ADC_Init+0x92>
      ADC_CLEAR_ERRORCODE(hadc);
 8011e98:	2300      	movs	r3, #0
 8011e9a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8011e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e9e:	2203      	movs	r2, #3
 8011ea0:	4393      	bics	r3, r2
 8011ea2:	3a02      	subs	r2, #2
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	e004      	b.n	8011eb6 <HAL_ADC_Init+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011eae:	2210      	movs	r2, #16
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8011eb4:	2001      	movs	r0, #1
}
 8011eb6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011eb8:	2001      	movs	r0, #1
 8011eba:	e7fc      	b.n	8011eb6 <HAL_ADC_Init+0x156>
 8011ebc:	fffffefd 	.word	0xfffffefd
 8011ec0:	fffe0219 	.word	0xfffe0219
 8011ec4:	833fffe7 	.word	0x833fffe7

08011ec8 <HAL_ADC_Start>:
{
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011ecc:	6803      	ldr	r3, [r0, #0]
 8011ece:	689b      	ldr	r3, [r3, #8]
 8011ed0:	075b      	lsls	r3, r3, #29
 8011ed2:	d423      	bmi.n	8011f1c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8011ed4:	2340      	movs	r3, #64	; 0x40
 8011ed6:	5cc3      	ldrb	r3, [r0, r3]
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d021      	beq.n	8011f20 <HAL_ADC_Start+0x58>
 8011edc:	2340      	movs	r3, #64	; 0x40
 8011ede:	2201      	movs	r2, #1
 8011ee0:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8011ee2:	69c3      	ldr	r3, [r0, #28]
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d114      	bne.n	8011f12 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011ee8:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8011eea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011eec:	4a0d      	ldr	r2, [pc, #52]	; (8011f24 <HAL_ADC_Start+0x5c>)
 8011eee:	401a      	ands	r2, r3
 8011ef0:	2380      	movs	r3, #128	; 0x80
 8011ef2:	005b      	lsls	r3, r3, #1
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8011ef8:	2300      	movs	r3, #0
 8011efa:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8011efc:	2240      	movs	r2, #64	; 0x40
 8011efe:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	3a24      	subs	r2, #36	; 0x24
 8011f04:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011f06:	6822      	ldr	r2, [r4, #0]
 8011f08:	6893      	ldr	r3, [r2, #8]
 8011f0a:	2104      	movs	r1, #4
 8011f0c:	430b      	orrs	r3, r1
 8011f0e:	6093      	str	r3, [r2, #8]
}
 8011f10:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8011f12:	f7ff fed1 	bl	8011cb8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d0e7      	beq.n	8011eea <HAL_ADC_Start+0x22>
 8011f1a:	e7f9      	b.n	8011f10 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8011f1c:	2002      	movs	r0, #2
 8011f1e:	e7f7      	b.n	8011f10 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8011f20:	2002      	movs	r0, #2
 8011f22:	e7f5      	b.n	8011f10 <HAL_ADC_Start+0x48>
 8011f24:	fffff0fe 	.word	0xfffff0fe

08011f28 <HAL_ADC_Stop>:
{ 
 8011f28:	b510      	push	{r4, lr}
 8011f2a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8011f2c:	2340      	movs	r3, #64	; 0x40
 8011f2e:	5cc3      	ldrb	r3, [r0, r3]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d017      	beq.n	8011f64 <HAL_ADC_Stop+0x3c>
 8011f34:	2340      	movs	r3, #64	; 0x40
 8011f36:	2201      	movs	r2, #1
 8011f38:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8011f3a:	f7ff fe53 	bl	8011be4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d003      	beq.n	8011f4a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8011f42:	2340      	movs	r3, #64	; 0x40
 8011f44:	2200      	movs	r2, #0
 8011f46:	54e2      	strb	r2, [r4, r3]
}
 8011f48:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8011f4a:	0020      	movs	r0, r4
 8011f4c:	f7ff fe74 	bl	8011c38 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d1f6      	bne.n	8011f42 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8011f54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f56:	4a04      	ldr	r2, [pc, #16]	; (8011f68 <HAL_ADC_Stop+0x40>)
 8011f58:	4013      	ands	r3, r2
 8011f5a:	3204      	adds	r2, #4
 8011f5c:	32ff      	adds	r2, #255	; 0xff
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	6463      	str	r3, [r4, #68]	; 0x44
 8011f62:	e7ee      	b.n	8011f42 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8011f64:	2002      	movs	r0, #2
 8011f66:	e7ef      	b.n	8011f48 <HAL_ADC_Stop+0x20>
 8011f68:	fffffefe 	.word	0xfffffefe

08011f6c <HAL_ADC_PollForConversion>:
{
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	0004      	movs	r4, r0
 8011f70:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8011f72:	6943      	ldr	r3, [r0, #20]
 8011f74:	2b08      	cmp	r3, #8
 8011f76:	d026      	beq.n	8011fc6 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8011f78:	6803      	ldr	r3, [r0, #0]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	07db      	lsls	r3, r3, #31
 8011f7e:	d419      	bmi.n	8011fb4 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8011f80:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 8011f82:	f7ff fe0d 	bl	8011ba0 <HAL_GetTick>
 8011f86:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	4216      	tst	r6, r2
 8011f8e:	d11c      	bne.n	8011fca <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8011f90:	1c6b      	adds	r3, r5, #1
 8011f92:	d0f9      	beq.n	8011f88 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011f94:	2d00      	cmp	r5, #0
 8011f96:	d004      	beq.n	8011fa2 <HAL_ADC_PollForConversion+0x36>
 8011f98:	f7ff fe02 	bl	8011ba0 <HAL_GetTick>
 8011f9c:	1bc0      	subs	r0, r0, r7
 8011f9e:	42a8      	cmp	r0, r5
 8011fa0:	d9f2      	bls.n	8011f88 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011fa4:	2204      	movs	r2, #4
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8011faa:	2340      	movs	r3, #64	; 0x40
 8011fac:	2200      	movs	r2, #0
 8011fae:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011fb0:	2003      	movs	r0, #3
 8011fb2:	e007      	b.n	8011fc4 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011fb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011fb6:	2220      	movs	r2, #32
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8011fbc:	2340      	movs	r3, #64	; 0x40
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8011fc2:	2001      	movs	r0, #1
}
 8011fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8011fc6:	2608      	movs	r6, #8
 8011fc8:	e7db      	b.n	8011f82 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011fca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011fcc:	2280      	movs	r2, #128	; 0x80
 8011fce:	0092      	lsls	r2, r2, #2
 8011fd0:	430a      	orrs	r2, r1
 8011fd2:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8011fd4:	68d9      	ldr	r1, [r3, #12]
 8011fd6:	22c0      	movs	r2, #192	; 0xc0
 8011fd8:	0112      	lsls	r2, r2, #4
 8011fda:	4211      	tst	r1, r2
 8011fdc:	d113      	bne.n	8012006 <HAL_ADC_PollForConversion+0x9a>
 8011fde:	6a22      	ldr	r2, [r4, #32]
 8011fe0:	2a00      	cmp	r2, #0
 8011fe2:	d110      	bne.n	8012006 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	0712      	lsls	r2, r2, #28
 8011fe8:	d50d      	bpl.n	8012006 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011fea:	689a      	ldr	r2, [r3, #8]
 8011fec:	0752      	lsls	r2, r2, #29
 8011fee:	d412      	bmi.n	8012016 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8011ff0:	685a      	ldr	r2, [r3, #4]
 8011ff2:	210c      	movs	r1, #12
 8011ff4:	438a      	bics	r2, r1
 8011ff6:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8011ff8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ffa:	4a0c      	ldr	r2, [pc, #48]	; (801202c <HAL_ADC_PollForConversion+0xc0>)
 8011ffc:	4013      	ands	r3, r2
 8011ffe:	3204      	adds	r2, #4
 8012000:	32ff      	adds	r2, #255	; 0xff
 8012002:	4313      	orrs	r3, r2
 8012004:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8012006:	69a3      	ldr	r3, [r4, #24]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d10d      	bne.n	8012028 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	220c      	movs	r2, #12
 8012010:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8012012:	2000      	movs	r0, #0
 8012014:	e7d6      	b.n	8011fc4 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012016:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012018:	2220      	movs	r2, #32
 801201a:	4313      	orrs	r3, r2
 801201c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801201e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012020:	3a1f      	subs	r2, #31
 8012022:	4313      	orrs	r3, r2
 8012024:	64a3      	str	r3, [r4, #72]	; 0x48
 8012026:	e7ee      	b.n	8012006 <HAL_ADC_PollForConversion+0x9a>
  return HAL_OK;
 8012028:	2000      	movs	r0, #0
 801202a:	e7cb      	b.n	8011fc4 <HAL_ADC_PollForConversion+0x58>
 801202c:	fffffefe 	.word	0xfffffefe

08012030 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8012030:	6803      	ldr	r3, [r0, #0]
 8012032:	2208      	movs	r2, #8
 8012034:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8012036:	6803      	ldr	r3, [r0, #0]
 8012038:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801203a:	4770      	bx	lr

0801203c <HAL_ADC_ConfigChannel>:
{
 801203c:	b530      	push	{r4, r5, lr}
 801203e:	b083      	sub	sp, #12
 8012040:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8012042:	2300      	movs	r3, #0
 8012044:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8012046:	3340      	adds	r3, #64	; 0x40
 8012048:	5cc3      	ldrb	r3, [r0, r3]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d100      	bne.n	8012050 <HAL_ADC_ConfigChannel+0x14>
 801204e:	e08a      	b.n	8012166 <HAL_ADC_ConfigChannel+0x12a>
 8012050:	2340      	movs	r3, #64	; 0x40
 8012052:	2201      	movs	r2, #1
 8012054:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8012056:	6803      	ldr	r3, [r0, #0]
 8012058:	689a      	ldr	r2, [r3, #8]
 801205a:	0752      	lsls	r2, r2, #29
 801205c:	d475      	bmi.n	801214a <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 801205e:	4a43      	ldr	r2, [pc, #268]	; (801216c <HAL_ADC_ConfigChannel+0x130>)
 8012060:	6848      	ldr	r0, [r1, #4]
 8012062:	4290      	cmp	r0, r2
 8012064:	d056      	beq.n	8012114 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8012066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012068:	2001      	movs	r0, #1
 801206a:	680d      	ldr	r5, [r1, #0]
 801206c:	40a8      	lsls	r0, r5
 801206e:	4302      	orrs	r2, r0
 8012070:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8012072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012074:	2280      	movs	r2, #128	; 0x80
 8012076:	0552      	lsls	r2, r2, #21
 8012078:	4293      	cmp	r3, r2
 801207a:	d01e      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 801207c:	2b01      	cmp	r3, #1
 801207e:	d01c      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 8012080:	2b02      	cmp	r3, #2
 8012082:	d01a      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 8012084:	2b03      	cmp	r3, #3
 8012086:	d018      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 8012088:	2b04      	cmp	r3, #4
 801208a:	d016      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 801208c:	2b05      	cmp	r3, #5
 801208e:	d014      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 8012090:	2b06      	cmp	r3, #6
 8012092:	d012      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
 8012094:	2b07      	cmp	r3, #7
 8012096:	d010      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8012098:	6822      	ldr	r2, [r4, #0]
 801209a:	6950      	ldr	r0, [r2, #20]
 801209c:	2307      	movs	r3, #7
 801209e:	4003      	ands	r3, r0
 80120a0:	6888      	ldr	r0, [r1, #8]
 80120a2:	4298      	cmp	r0, r3
 80120a4:	d009      	beq.n	80120ba <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80120a6:	6950      	ldr	r0, [r2, #20]
 80120a8:	2307      	movs	r3, #7
 80120aa:	4398      	bics	r0, r3
 80120ac:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80120ae:	6820      	ldr	r0, [r4, #0]
 80120b0:	6942      	ldr	r2, [r0, #20]
 80120b2:	688d      	ldr	r5, [r1, #8]
 80120b4:	402b      	ands	r3, r5
 80120b6:	4313      	orrs	r3, r2
 80120b8:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80120ba:	680b      	ldr	r3, [r1, #0]
 80120bc:	001a      	movs	r2, r3
 80120be:	3a10      	subs	r2, #16
 80120c0:	2a02      	cmp	r2, #2
 80120c2:	d84c      	bhi.n	801215e <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80120c4:	4a2a      	ldr	r2, [pc, #168]	; (8012170 <HAL_ADC_ConfigChannel+0x134>)
 80120c6:	6812      	ldr	r2, [r2, #0]
 80120c8:	2b10      	cmp	r3, #16
 80120ca:	d00e      	beq.n	80120ea <HAL_ADC_ConfigChannel+0xae>
 80120cc:	2b11      	cmp	r3, #17
 80120ce:	d009      	beq.n	80120e4 <HAL_ADC_ConfigChannel+0xa8>
 80120d0:	2380      	movs	r3, #128	; 0x80
 80120d2:	045b      	lsls	r3, r3, #17
 80120d4:	4313      	orrs	r3, r2
 80120d6:	4a26      	ldr	r2, [pc, #152]	; (8012170 <HAL_ADC_ConfigChannel+0x134>)
 80120d8:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80120da:	680b      	ldr	r3, [r1, #0]
 80120dc:	2b10      	cmp	r3, #16
 80120de:	d007      	beq.n	80120f0 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80120e0:	2000      	movs	r0, #0
 80120e2:	e037      	b.n	8012154 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80120e4:	2380      	movs	r3, #128	; 0x80
 80120e6:	03db      	lsls	r3, r3, #15
 80120e8:	e7f4      	b.n	80120d4 <HAL_ADC_ConfigChannel+0x98>
 80120ea:	2380      	movs	r3, #128	; 0x80
 80120ec:	041b      	lsls	r3, r3, #16
 80120ee:	e7f1      	b.n	80120d4 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80120f0:	4b20      	ldr	r3, [pc, #128]	; (8012174 <HAL_ADC_ConfigChannel+0x138>)
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	4920      	ldr	r1, [pc, #128]	; (8012178 <HAL_ADC_ConfigChannel+0x13c>)
 80120f6:	f7ee f82b 	bl	8000150 <__udivsi3>
 80120fa:	0083      	lsls	r3, r0, #2
 80120fc:	1818      	adds	r0, r3, r0
 80120fe:	0043      	lsls	r3, r0, #1
 8012100:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8012102:	e002      	b.n	801210a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8012104:	9b01      	ldr	r3, [sp, #4]
 8012106:	3b01      	subs	r3, #1
 8012108:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801210a:	9b01      	ldr	r3, [sp, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d1f9      	bne.n	8012104 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012110:	2000      	movs	r0, #0
 8012112:	e01f      	b.n	8012154 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8012114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012116:	2001      	movs	r0, #1
 8012118:	680d      	ldr	r5, [r1, #0]
 801211a:	40a8      	lsls	r0, r5
 801211c:	4382      	bics	r2, r0
 801211e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012120:	680b      	ldr	r3, [r1, #0]
 8012122:	001a      	movs	r2, r3
 8012124:	3a10      	subs	r2, #16
 8012126:	2a02      	cmp	r2, #2
 8012128:	d81b      	bhi.n	8012162 <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801212a:	4a11      	ldr	r2, [pc, #68]	; (8012170 <HAL_ADC_ConfigChannel+0x134>)
 801212c:	6812      	ldr	r2, [r2, #0]
 801212e:	2b10      	cmp	r3, #16
 8012130:	d009      	beq.n	8012146 <HAL_ADC_ConfigChannel+0x10a>
 8012132:	2b11      	cmp	r3, #17
 8012134:	d005      	beq.n	8012142 <HAL_ADC_ConfigChannel+0x106>
 8012136:	4b11      	ldr	r3, [pc, #68]	; (801217c <HAL_ADC_ConfigChannel+0x140>)
 8012138:	4013      	ands	r3, r2
 801213a:	4a0d      	ldr	r2, [pc, #52]	; (8012170 <HAL_ADC_ConfigChannel+0x134>)
 801213c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801213e:	2000      	movs	r0, #0
 8012140:	e008      	b.n	8012154 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012142:	4b0f      	ldr	r3, [pc, #60]	; (8012180 <HAL_ADC_ConfigChannel+0x144>)
 8012144:	e7f8      	b.n	8012138 <HAL_ADC_ConfigChannel+0xfc>
 8012146:	4b0f      	ldr	r3, [pc, #60]	; (8012184 <HAL_ADC_ConfigChannel+0x148>)
 8012148:	e7f6      	b.n	8012138 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801214a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801214c:	2220      	movs	r2, #32
 801214e:	4313      	orrs	r3, r2
 8012150:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8012152:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8012154:	2340      	movs	r3, #64	; 0x40
 8012156:	2200      	movs	r2, #0
 8012158:	54e2      	strb	r2, [r4, r3]
}
 801215a:	b003      	add	sp, #12
 801215c:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801215e:	2000      	movs	r0, #0
 8012160:	e7f8      	b.n	8012154 <HAL_ADC_ConfigChannel+0x118>
 8012162:	2000      	movs	r0, #0
 8012164:	e7f6      	b.n	8012154 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8012166:	2002      	movs	r0, #2
 8012168:	e7f7      	b.n	801215a <HAL_ADC_ConfigChannel+0x11e>
 801216a:	46c0      	nop			; (mov r8, r8)
 801216c:	00001001 	.word	0x00001001
 8012170:	40012708 	.word	0x40012708
 8012174:	200000b8 	.word	0x200000b8
 8012178:	000f4240 	.word	0x000f4240
 801217c:	feffffff 	.word	0xfeffffff
 8012180:	ffbfffff 	.word	0xffbfffff
 8012184:	ff7fffff 	.word	0xff7fffff

08012188 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8012188:	b570      	push	{r4, r5, r6, lr}
 801218a:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801218c:	2340      	movs	r3, #64	; 0x40
 801218e:	5cc3      	ldrb	r3, [r0, r3]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d042      	beq.n	801221a <HAL_ADCEx_Calibration_Start+0x92>
 8012194:	2340      	movs	r3, #64	; 0x40
 8012196:	2201      	movs	r2, #1
 8012198:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801219a:	6802      	ldr	r2, [r0, #0]
 801219c:	6891      	ldr	r1, [r2, #8]
 801219e:	3b3d      	subs	r3, #61	; 0x3d
 80121a0:	400b      	ands	r3, r1
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d105      	bne.n	80121b2 <HAL_ADCEx_Calibration_Start+0x2a>
 80121a6:	6813      	ldr	r3, [r2, #0]
 80121a8:	07db      	lsls	r3, r3, #31
 80121aa:	d42d      	bmi.n	8012208 <HAL_ADCEx_Calibration_Start+0x80>
 80121ac:	68d3      	ldr	r3, [r2, #12]
 80121ae:	041b      	lsls	r3, r3, #16
 80121b0:	d42a      	bmi.n	8012208 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80121b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80121b4:	491a      	ldr	r1, [pc, #104]	; (8012220 <HAL_ADCEx_Calibration_Start+0x98>)
 80121b6:	400b      	ands	r3, r1
 80121b8:	3106      	adds	r1, #6
 80121ba:	31ff      	adds	r1, #255	; 0xff
 80121bc:	430b      	orrs	r3, r1
 80121be:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80121c0:	6891      	ldr	r1, [r2, #8]
 80121c2:	2380      	movs	r3, #128	; 0x80
 80121c4:	061b      	lsls	r3, r3, #24
 80121c6:	430b      	orrs	r3, r1
 80121c8:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 80121ca:	f7ff fce9 	bl	8011ba0 <HAL_GetTick>
 80121ce:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	da0f      	bge.n	80121f8 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80121d8:	f7ff fce2 	bl	8011ba0 <HAL_GetTick>
 80121dc:	1b40      	subs	r0, r0, r5
 80121de:	2802      	cmp	r0, #2
 80121e0:	d9f6      	bls.n	80121d0 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80121e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80121e4:	2212      	movs	r2, #18
 80121e6:	4393      	bics	r3, r2
 80121e8:	3a02      	subs	r2, #2
 80121ea:	4313      	orrs	r3, r2
 80121ec:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80121ee:	2340      	movs	r3, #64	; 0x40
 80121f0:	2200      	movs	r2, #0
 80121f2:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 80121f4:	2001      	movs	r0, #1
 80121f6:	e00f      	b.n	8012218 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80121f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80121fa:	2203      	movs	r2, #3
 80121fc:	4393      	bics	r3, r2
 80121fe:	3a02      	subs	r2, #2
 8012200:	4313      	orrs	r3, r2
 8012202:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012204:	2000      	movs	r0, #0
 8012206:	e004      	b.n	8012212 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012208:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801220a:	2220      	movs	r2, #32
 801220c:	4313      	orrs	r3, r2
 801220e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8012210:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012212:	2340      	movs	r3, #64	; 0x40
 8012214:	2200      	movs	r2, #0
 8012216:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8012218:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 801221a:	2002      	movs	r0, #2
 801221c:	e7fc      	b.n	8012218 <HAL_ADCEx_Calibration_Start+0x90>
 801221e:	46c0      	nop			; (mov r8, r8)
 8012220:	fffffefd 	.word	0xfffffefd

08012224 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012224:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8012226:	2800      	cmp	r0, #0
 8012228:	db11      	blt.n	801224e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801222a:	0884      	lsrs	r4, r0, #2
 801222c:	4d13      	ldr	r5, [pc, #76]	; (801227c <HAL_NVIC_SetPriority+0x58>)
 801222e:	34c0      	adds	r4, #192	; 0xc0
 8012230:	00a4      	lsls	r4, r4, #2
 8012232:	5962      	ldr	r2, [r4, r5]
 8012234:	2303      	movs	r3, #3
 8012236:	4018      	ands	r0, r3
 8012238:	00c0      	lsls	r0, r0, #3
 801223a:	33fc      	adds	r3, #252	; 0xfc
 801223c:	001e      	movs	r6, r3
 801223e:	4086      	lsls	r6, r0
 8012240:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012242:	0189      	lsls	r1, r1, #6
 8012244:	400b      	ands	r3, r1
 8012246:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012248:	4313      	orrs	r3, r2
 801224a:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801224c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801224e:	b2c0      	uxtb	r0, r0
 8012250:	220f      	movs	r2, #15
 8012252:	4002      	ands	r2, r0
 8012254:	3a08      	subs	r2, #8
 8012256:	0892      	lsrs	r2, r2, #2
 8012258:	3206      	adds	r2, #6
 801225a:	0092      	lsls	r2, r2, #2
 801225c:	4b08      	ldr	r3, [pc, #32]	; (8012280 <HAL_NVIC_SetPriority+0x5c>)
 801225e:	18d3      	adds	r3, r2, r3
 8012260:	685d      	ldr	r5, [r3, #4]
 8012262:	2403      	movs	r4, #3
 8012264:	4020      	ands	r0, r4
 8012266:	00c0      	lsls	r0, r0, #3
 8012268:	22ff      	movs	r2, #255	; 0xff
 801226a:	0014      	movs	r4, r2
 801226c:	4084      	lsls	r4, r0
 801226e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012270:	0189      	lsls	r1, r1, #6
 8012272:	400a      	ands	r2, r1
 8012274:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012276:	432a      	orrs	r2, r5
 8012278:	605a      	str	r2, [r3, #4]
 801227a:	e7e7      	b.n	801224c <HAL_NVIC_SetPriority+0x28>
 801227c:	e000e100 	.word	0xe000e100
 8012280:	e000ed00 	.word	0xe000ed00

08012284 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8012284:	231f      	movs	r3, #31
 8012286:	4018      	ands	r0, r3
 8012288:	3b1e      	subs	r3, #30
 801228a:	4083      	lsls	r3, r0
 801228c:	4a01      	ldr	r2, [pc, #4]	; (8012294 <HAL_NVIC_EnableIRQ+0x10>)
 801228e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8012290:	4770      	bx	lr
 8012292:	46c0      	nop			; (mov r8, r8)
 8012294:	e000e100 	.word	0xe000e100

08012298 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8012298:	231f      	movs	r3, #31
 801229a:	4018      	ands	r0, r3
 801229c:	3b1e      	subs	r3, #30
 801229e:	4083      	lsls	r3, r0
 80122a0:	4901      	ldr	r1, [pc, #4]	; (80122a8 <HAL_NVIC_DisableIRQ+0x10>)
 80122a2:	2280      	movs	r2, #128	; 0x80
 80122a4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80122a6:	4770      	bx	lr
 80122a8:	e000e100 	.word	0xe000e100

080122ac <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80122ac:	3801      	subs	r0, #1
 80122ae:	4b0a      	ldr	r3, [pc, #40]	; (80122d8 <HAL_SYSTICK_Config+0x2c>)
 80122b0:	4298      	cmp	r0, r3
 80122b2:	d80f      	bhi.n	80122d4 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80122b4:	4a09      	ldr	r2, [pc, #36]	; (80122dc <HAL_SYSTICK_Config+0x30>)
 80122b6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80122b8:	4809      	ldr	r0, [pc, #36]	; (80122e0 <HAL_SYSTICK_Config+0x34>)
 80122ba:	6a03      	ldr	r3, [r0, #32]
 80122bc:	021b      	lsls	r3, r3, #8
 80122be:	0a1b      	lsrs	r3, r3, #8
 80122c0:	21c0      	movs	r1, #192	; 0xc0
 80122c2:	0609      	lsls	r1, r1, #24
 80122c4:	430b      	orrs	r3, r1
 80122c6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80122c8:	2300      	movs	r3, #0
 80122ca:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80122cc:	3307      	adds	r3, #7
 80122ce:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80122d0:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80122d2:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80122d4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80122d6:	e7fc      	b.n	80122d2 <HAL_SYSTICK_Config+0x26>
 80122d8:	00ffffff 	.word	0x00ffffff
 80122dc:	e000e010 	.word	0xe000e010
 80122e0:	e000ed00 	.word	0xe000ed00

080122e4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80122e4:	2804      	cmp	r0, #4
 80122e6:	d005      	beq.n	80122f4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80122e8:	4a05      	ldr	r2, [pc, #20]	; (8012300 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80122ea:	6813      	ldr	r3, [r2, #0]
 80122ec:	2104      	movs	r1, #4
 80122ee:	438b      	bics	r3, r1
 80122f0:	6013      	str	r3, [r2, #0]
  }
}
 80122f2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80122f4:	4a02      	ldr	r2, [pc, #8]	; (8012300 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80122f6:	6813      	ldr	r3, [r2, #0]
 80122f8:	2104      	movs	r1, #4
 80122fa:	430b      	orrs	r3, r1
 80122fc:	6013      	str	r3, [r2, #0]
 80122fe:	e7f8      	b.n	80122f2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8012300:	e000e010 	.word	0xe000e010

08012304 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8012304:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8012306:	2500      	movs	r5, #0
 8012308:	e00e      	b.n	8012328 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801230a:	00ac      	lsls	r4, r5, #2
 801230c:	5d0b      	ldrb	r3, [r1, r4]
 801230e:	061b      	lsls	r3, r3, #24
 8012310:	190c      	adds	r4, r1, r4
 8012312:	7866      	ldrb	r6, [r4, #1]
 8012314:	0436      	lsls	r6, r6, #16
 8012316:	4333      	orrs	r3, r6
 8012318:	78a6      	ldrb	r6, [r4, #2]
 801231a:	0236      	lsls	r6, r6, #8
 801231c:	4333      	orrs	r3, r6
 801231e:	78e6      	ldrb	r6, [r4, #3]
 8012320:	6804      	ldr	r4, [r0, #0]
 8012322:	4333      	orrs	r3, r6
 8012324:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8012326:	3501      	adds	r5, #1
 8012328:	0893      	lsrs	r3, r2, #2
 801232a:	42ab      	cmp	r3, r5
 801232c:	d8ed      	bhi.n	801230a <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801232e:	2303      	movs	r3, #3
 8012330:	401a      	ands	r2, r3
 8012332:	d005      	beq.n	8012340 <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 8012334:	2a01      	cmp	r2, #1
 8012336:	d006      	beq.n	8012346 <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8012338:	2a02      	cmp	r2, #2
 801233a:	d009      	beq.n	8012350 <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 801233c:	2a03      	cmp	r2, #3
 801233e:	d010      	beq.n	8012362 <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8012340:	6803      	ldr	r3, [r0, #0]
 8012342:	6818      	ldr	r0, [r3, #0]
}
 8012344:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8012346:	00ab      	lsls	r3, r5, #2
 8012348:	5ccb      	ldrb	r3, [r1, r3]
 801234a:	6804      	ldr	r4, [r0, #0]
 801234c:	7023      	strb	r3, [r4, #0]
 801234e:	e7f3      	b.n	8012338 <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8012350:	00ab      	lsls	r3, r5, #2
 8012352:	5ccc      	ldrb	r4, [r1, r3]
 8012354:	0224      	lsls	r4, r4, #8
 8012356:	18cb      	adds	r3, r1, r3
 8012358:	785b      	ldrb	r3, [r3, #1]
 801235a:	4323      	orrs	r3, r4
 801235c:	6804      	ldr	r4, [r0, #0]
 801235e:	8023      	strh	r3, [r4, #0]
 8012360:	e7ec      	b.n	801233c <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8012362:	00ad      	lsls	r5, r5, #2
 8012364:	5d4a      	ldrb	r2, [r1, r5]
 8012366:	0212      	lsls	r2, r2, #8
 8012368:	194d      	adds	r5, r1, r5
 801236a:	786b      	ldrb	r3, [r5, #1]
 801236c:	4313      	orrs	r3, r2
 801236e:	6802      	ldr	r2, [r0, #0]
 8012370:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8012372:	78ab      	ldrb	r3, [r5, #2]
 8012374:	6802      	ldr	r2, [r0, #0]
 8012376:	7013      	strb	r3, [r2, #0]
 8012378:	e7e2      	b.n	8012340 <CRC_Handle_8+0x3c>

0801237a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801237a:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801237c:	2500      	movs	r5, #0
 801237e:	e008      	b.n	8012392 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8012380:	00ac      	lsls	r4, r5, #2
 8012382:	5b0b      	ldrh	r3, [r1, r4]
 8012384:	041b      	lsls	r3, r3, #16
 8012386:	190c      	adds	r4, r1, r4
 8012388:	8866      	ldrh	r6, [r4, #2]
 801238a:	6804      	ldr	r4, [r0, #0]
 801238c:	4333      	orrs	r3, r6
 801238e:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8012390:	3501      	adds	r5, #1
 8012392:	0853      	lsrs	r3, r2, #1
 8012394:	42ab      	cmp	r3, r5
 8012396:	d8f3      	bhi.n	8012380 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 8012398:	07d3      	lsls	r3, r2, #31
 801239a:	d503      	bpl.n	80123a4 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801239c:	00ad      	lsls	r5, r5, #2
 801239e:	5a6b      	ldrh	r3, [r5, r1]
 80123a0:	6802      	ldr	r2, [r0, #0]
 80123a2:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80123a4:	6803      	ldr	r3, [r0, #0]
 80123a6:	6818      	ldr	r0, [r3, #0]
}
 80123a8:	bd70      	pop	{r4, r5, r6, pc}

080123aa <HAL_CRC_Init>:
{
 80123aa:	b510      	push	{r4, lr}
 80123ac:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80123ae:	d029      	beq.n	8012404 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80123b0:	7f43      	ldrb	r3, [r0, #29]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d01e      	beq.n	80123f4 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80123b6:	2302      	movs	r3, #2
 80123b8:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80123ba:	0020      	movs	r0, r4
 80123bc:	f000 f8a8 	bl	8012510 <HAL_CRCEx_Init>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d121      	bne.n	8012408 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80123c4:	7963      	ldrb	r3, [r4, #5]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d118      	bne.n	80123fc <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80123ca:	6823      	ldr	r3, [r4, #0]
 80123cc:	2201      	movs	r2, #1
 80123ce:	4252      	negs	r2, r2
 80123d0:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80123d2:	6822      	ldr	r2, [r4, #0]
 80123d4:	6893      	ldr	r3, [r2, #8]
 80123d6:	2160      	movs	r1, #96	; 0x60
 80123d8:	438b      	bics	r3, r1
 80123da:	6961      	ldr	r1, [r4, #20]
 80123dc:	430b      	orrs	r3, r1
 80123de:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80123e0:	6822      	ldr	r2, [r4, #0]
 80123e2:	6893      	ldr	r3, [r2, #8]
 80123e4:	2180      	movs	r1, #128	; 0x80
 80123e6:	438b      	bics	r3, r1
 80123e8:	69a1      	ldr	r1, [r4, #24]
 80123ea:	430b      	orrs	r3, r1
 80123ec:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80123ee:	2301      	movs	r3, #1
 80123f0:	7763      	strb	r3, [r4, #29]
}
 80123f2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80123f4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80123f6:	f7fc fc51 	bl	800ec9c <HAL_CRC_MspInit>
 80123fa:	e7dc      	b.n	80123b6 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	6922      	ldr	r2, [r4, #16]
 8012400:	611a      	str	r2, [r3, #16]
 8012402:	e7e6      	b.n	80123d2 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8012404:	2001      	movs	r0, #1
 8012406:	e7f4      	b.n	80123f2 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8012408:	2001      	movs	r0, #1
 801240a:	e7f2      	b.n	80123f2 <HAL_CRC_Init+0x48>

0801240c <HAL_CRC_Accumulate>:
{
 801240c:	b570      	push	{r4, r5, r6, lr}
 801240e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8012410:	7f03      	ldrb	r3, [r0, #28]
 8012412:	2b01      	cmp	r3, #1
 8012414:	d022      	beq.n	801245c <HAL_CRC_Accumulate+0x50>
 8012416:	2301      	movs	r3, #1
 8012418:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801241a:	3301      	adds	r3, #1
 801241c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 801241e:	6a03      	ldr	r3, [r0, #32]
 8012420:	2b02      	cmp	r3, #2
 8012422:	d018      	beq.n	8012456 <HAL_CRC_Accumulate+0x4a>
 8012424:	2b03      	cmp	r3, #3
 8012426:	d011      	beq.n	801244c <HAL_CRC_Accumulate+0x40>
 8012428:	2b01      	cmp	r3, #1
 801242a:	d011      	beq.n	8012450 <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801242c:	2000      	movs	r0, #0
 801242e:	e008      	b.n	8012442 <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 8012430:	6820      	ldr	r0, [r4, #0]
 8012432:	009d      	lsls	r5, r3, #2
 8012434:	586d      	ldr	r5, [r5, r1]
 8012436:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8012438:	3301      	adds	r3, #1
 801243a:	4293      	cmp	r3, r2
 801243c:	d3f8      	bcc.n	8012430 <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8012442:	2301      	movs	r3, #1
 8012444:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8012446:	2300      	movs	r3, #0
 8012448:	7723      	strb	r3, [r4, #28]
}
 801244a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801244c:	2300      	movs	r3, #0
 801244e:	e7f4      	b.n	801243a <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8012450:	f7ff ff58 	bl	8012304 <CRC_Handle_8>
      break;
 8012454:	e7f5      	b.n	8012442 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8012456:	f7ff ff90 	bl	801237a <CRC_Handle_16>
      break;
 801245a:	e7f2      	b.n	8012442 <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 801245c:	2002      	movs	r0, #2
 801245e:	e7f4      	b.n	801244a <HAL_CRC_Accumulate+0x3e>

08012460 <HAL_CRC_Calculate>:
{
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8012464:	7f03      	ldrb	r3, [r0, #28]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d028      	beq.n	80124bc <HAL_CRC_Calculate+0x5c>
 801246a:	2501      	movs	r5, #1
 801246c:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801246e:	2302      	movs	r3, #2
 8012470:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8012472:	6800      	ldr	r0, [r0, #0]
 8012474:	6883      	ldr	r3, [r0, #8]
 8012476:	432b      	orrs	r3, r5
 8012478:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801247a:	6a23      	ldr	r3, [r4, #32]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d019      	beq.n	80124b4 <HAL_CRC_Calculate+0x54>
 8012480:	2b03      	cmp	r3, #3
 8012482:	d011      	beq.n	80124a8 <HAL_CRC_Calculate+0x48>
 8012484:	2b01      	cmp	r3, #1
 8012486:	d011      	beq.n	80124ac <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8012488:	2000      	movs	r0, #0
 801248a:	e008      	b.n	801249e <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 801248c:	6820      	ldr	r0, [r4, #0]
 801248e:	009d      	lsls	r5, r3, #2
 8012490:	586d      	ldr	r5, [r5, r1]
 8012492:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8012494:	3301      	adds	r3, #1
 8012496:	4293      	cmp	r3, r2
 8012498:	d3f8      	bcc.n	801248c <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 801249e:	2301      	movs	r3, #1
 80124a0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80124a2:	2300      	movs	r3, #0
 80124a4:	7723      	strb	r3, [r4, #28]
}
 80124a6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80124a8:	2300      	movs	r3, #0
 80124aa:	e7f4      	b.n	8012496 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80124ac:	0020      	movs	r0, r4
 80124ae:	f7ff ff29 	bl	8012304 <CRC_Handle_8>
      break;
 80124b2:	e7f4      	b.n	801249e <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80124b4:	0020      	movs	r0, r4
 80124b6:	f7ff ff60 	bl	801237a <CRC_Handle_16>
      break;
 80124ba:	e7f0      	b.n	801249e <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 80124bc:	2002      	movs	r0, #2
 80124be:	e7f2      	b.n	80124a6 <HAL_CRC_Calculate+0x46>

080124c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80124c0:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80124c2:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80124c4:	e000      	b.n	80124c8 <HAL_CRCEx_Polynomial_Set+0x8>
 80124c6:	001c      	movs	r4, r3
 80124c8:	2301      	movs	r3, #1
 80124ca:	40a3      	lsls	r3, r4
 80124cc:	4219      	tst	r1, r3
 80124ce:	d103      	bne.n	80124d8 <HAL_CRCEx_Polynomial_Set+0x18>
 80124d0:	1e63      	subs	r3, r4, #1
 80124d2:	2c00      	cmp	r4, #0
 80124d4:	d1f7      	bne.n	80124c6 <HAL_CRCEx_Polynomial_Set+0x6>
 80124d6:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 80124d8:	2a10      	cmp	r2, #16
 80124da:	d011      	beq.n	8012500 <HAL_CRCEx_Polynomial_Set+0x40>
 80124dc:	2a18      	cmp	r2, #24
 80124de:	d00b      	beq.n	80124f8 <HAL_CRCEx_Polynomial_Set+0x38>
 80124e0:	2a08      	cmp	r2, #8
 80124e2:	d011      	beq.n	8012508 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80124e4:	6803      	ldr	r3, [r0, #0]
 80124e6:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80124e8:	6801      	ldr	r1, [r0, #0]
 80124ea:	688b      	ldr	r3, [r1, #8]
 80124ec:	2018      	movs	r0, #24
 80124ee:	4383      	bics	r3, r0
 80124f0:	431a      	orrs	r2, r3
 80124f2:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80124f4:	2000      	movs	r0, #0
}
 80124f6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80124f8:	2c06      	cmp	r4, #6
 80124fa:	d9f3      	bls.n	80124e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80124fc:	2001      	movs	r0, #1
 80124fe:	e7fa      	b.n	80124f6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8012500:	2c07      	cmp	r4, #7
 8012502:	d9ef      	bls.n	80124e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8012504:	2001      	movs	r0, #1
 8012506:	e7f6      	b.n	80124f6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8012508:	2c0f      	cmp	r4, #15
 801250a:	d9eb      	bls.n	80124e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801250c:	2001      	movs	r0, #1
 801250e:	e7f2      	b.n	80124f6 <HAL_CRCEx_Polynomial_Set+0x36>

08012510 <HAL_CRCEx_Init>:
{
 8012510:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8012512:	7903      	ldrb	r3, [r0, #4]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d109      	bne.n	801252c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8012518:	6803      	ldr	r3, [r0, #0]
 801251a:	4a08      	ldr	r2, [pc, #32]	; (801253c <HAL_CRCEx_Init+0x2c>)
 801251c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801251e:	6802      	ldr	r2, [r0, #0]
 8012520:	6893      	ldr	r3, [r2, #8]
 8012522:	2118      	movs	r1, #24
 8012524:	438b      	bics	r3, r1
 8012526:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8012528:	2000      	movs	r0, #0
}
 801252a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801252c:	68c2      	ldr	r2, [r0, #12]
 801252e:	6881      	ldr	r1, [r0, #8]
 8012530:	f7ff ffc6 	bl	80124c0 <HAL_CRCEx_Polynomial_Set>
 8012534:	2800      	cmp	r0, #0
 8012536:	d0f8      	beq.n	801252a <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8012538:	2001      	movs	r0, #1
 801253a:	e7f6      	b.n	801252a <HAL_CRCEx_Init+0x1a>
 801253c:	04c11db7 	.word	0x04c11db7

08012540 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8012540:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012542:	6804      	ldr	r4, [r0, #0]
 8012544:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012546:	6843      	ldr	r3, [r0, #4]
 8012548:	2b10      	cmp	r3, #16
 801254a:	d004      	beq.n	8012556 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801254c:	6803      	ldr	r3, [r0, #0]
 801254e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8012550:	6803      	ldr	r3, [r0, #0]
 8012552:	60da      	str	r2, [r3, #12]
  }
}
 8012554:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 8012556:	6803      	ldr	r3, [r0, #0]
 8012558:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801255a:	6803      	ldr	r3, [r0, #0]
 801255c:	60d9      	str	r1, [r3, #12]
 801255e:	e7f9      	b.n	8012554 <DMA_SetConfig+0x14>

08012560 <HAL_DMA_Init>:
{ 
 8012560:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8012562:	2800      	cmp	r0, #0
 8012564:	d022      	beq.n	80125ac <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 8012566:	2321      	movs	r3, #33	; 0x21
 8012568:	5cc3      	ldrb	r3, [r0, r3]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d102      	bne.n	8012574 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 801256e:	3320      	adds	r3, #32
 8012570:	2200      	movs	r2, #0
 8012572:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8012574:	2121      	movs	r1, #33	; 0x21
 8012576:	2302      	movs	r3, #2
 8012578:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 801257a:	6804      	ldr	r4, [r0, #0]
 801257c:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801257e:	4a0c      	ldr	r2, [pc, #48]	; (80125b0 <HAL_DMA_Init+0x50>)
 8012580:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8012582:	6843      	ldr	r3, [r0, #4]
 8012584:	6885      	ldr	r5, [r0, #8]
 8012586:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012588:	68c5      	ldr	r5, [r0, #12]
 801258a:	432b      	orrs	r3, r5
 801258c:	6905      	ldr	r5, [r0, #16]
 801258e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012590:	6945      	ldr	r5, [r0, #20]
 8012592:	432b      	orrs	r3, r5
 8012594:	6985      	ldr	r5, [r0, #24]
 8012596:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8012598:	69c5      	ldr	r5, [r0, #28]
 801259a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 801259c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 801259e:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80125a0:	2300      	movs	r3, #0
 80125a2:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 80125a4:	3301      	adds	r3, #1
 80125a6:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 80125a8:	2000      	movs	r0, #0
}  
 80125aa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80125ac:	2001      	movs	r0, #1
 80125ae:	e7fc      	b.n	80125aa <HAL_DMA_Init+0x4a>
 80125b0:	ffffc00f 	.word	0xffffc00f

080125b4 <HAL_DMA_Start_IT>:
{
 80125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80125b8:	2020      	movs	r0, #32
 80125ba:	5c20      	ldrb	r0, [r4, r0]
 80125bc:	2801      	cmp	r0, #1
 80125be:	d020      	beq.n	8012602 <HAL_DMA_Start_IT+0x4e>
 80125c0:	2501      	movs	r5, #1
 80125c2:	2020      	movs	r0, #32
 80125c4:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 80125c6:	2602      	movs	r6, #2
 80125c8:	3001      	adds	r0, #1
 80125ca:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 80125cc:	6827      	ldr	r7, [r4, #0]
 80125ce:	6838      	ldr	r0, [r7, #0]
 80125d0:	43a8      	bics	r0, r5
 80125d2:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80125d4:	0020      	movs	r0, r4
 80125d6:	f7ff ffb3 	bl	8012540 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80125da:	6822      	ldr	r2, [r4, #0]
 80125dc:	6813      	ldr	r3, [r2, #0]
 80125de:	4333      	orrs	r3, r6
 80125e0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80125e2:	6822      	ldr	r2, [r4, #0]
 80125e4:	6813      	ldr	r3, [r2, #0]
 80125e6:	2104      	movs	r1, #4
 80125e8:	430b      	orrs	r3, r1
 80125ea:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80125ec:	6822      	ldr	r2, [r4, #0]
 80125ee:	6813      	ldr	r3, [r2, #0]
 80125f0:	3104      	adds	r1, #4
 80125f2:	430b      	orrs	r3, r1
 80125f4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80125f6:	6822      	ldr	r2, [r4, #0]
 80125f8:	6813      	ldr	r3, [r2, #0]
 80125fa:	432b      	orrs	r3, r5
 80125fc:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80125fe:	2000      	movs	r0, #0
} 
 8012600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8012602:	2002      	movs	r0, #2
 8012604:	e7fc      	b.n	8012600 <HAL_DMA_Start_IT+0x4c>

08012606 <HAL_DMA_Abort>:
{
 8012606:	b570      	push	{r4, r5, r6, lr}
 8012608:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801260a:	6802      	ldr	r2, [r0, #0]
 801260c:	6813      	ldr	r3, [r2, #0]
 801260e:	2101      	movs	r1, #1
 8012610:	438b      	bics	r3, r1
 8012612:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8012614:	f7ff fac4 	bl	8011ba0 <HAL_GetTick>
 8012618:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	07db      	lsls	r3, r3, #31
 8012620:	d511      	bpl.n	8012646 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012622:	f7ff fabd 	bl	8011ba0 <HAL_GetTick>
 8012626:	1b40      	subs	r0, r0, r5
 8012628:	23fa      	movs	r3, #250	; 0xfa
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	4298      	cmp	r0, r3
 801262e:	d9f4      	bls.n	801261a <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8012630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012632:	2220      	movs	r2, #32
 8012634:	4313      	orrs	r3, r2
 8012636:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012638:	2321      	movs	r3, #33	; 0x21
 801263a:	2103      	movs	r1, #3
 801263c:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801263e:	2300      	movs	r3, #0
 8012640:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8012642:	2003      	movs	r0, #3
 8012644:	e006      	b.n	8012654 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 8012646:	2321      	movs	r3, #33	; 0x21
 8012648:	2201      	movs	r2, #1
 801264a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801264c:	3b01      	subs	r3, #1
 801264e:	2200      	movs	r2, #0
 8012650:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8012652:	2000      	movs	r0, #0
}
 8012654:	bd70      	pop	{r4, r5, r6, pc}
	...

08012658 <HAL_DMA_IRQHandler>:
{        
 8012658:	b510      	push	{r4, lr}
 801265a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801265c:	6802      	ldr	r2, [r0, #0]
 801265e:	4bb6      	ldr	r3, [pc, #728]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 8012660:	429a      	cmp	r2, r3
 8012662:	d800      	bhi.n	8012666 <HAL_DMA_IRQHandler+0xe>
 8012664:	e083      	b.n	801276e <HAL_DMA_IRQHandler+0x116>
 8012666:	4bb5      	ldr	r3, [pc, #724]	; (801293c <HAL_DMA_IRQHandler+0x2e4>)
 8012668:	6819      	ldr	r1, [r3, #0]
 801266a:	4bb5      	ldr	r3, [pc, #724]	; (8012940 <HAL_DMA_IRQHandler+0x2e8>)
 801266c:	429a      	cmp	r2, r3
 801266e:	d023      	beq.n	80126b8 <HAL_DMA_IRQHandler+0x60>
 8012670:	4bb4      	ldr	r3, [pc, #720]	; (8012944 <HAL_DMA_IRQHandler+0x2ec>)
 8012672:	429a      	cmp	r2, r3
 8012674:	d063      	beq.n	801273e <HAL_DMA_IRQHandler+0xe6>
 8012676:	4bb4      	ldr	r3, [pc, #720]	; (8012948 <HAL_DMA_IRQHandler+0x2f0>)
 8012678:	429a      	cmp	r2, r3
 801267a:	d062      	beq.n	8012742 <HAL_DMA_IRQHandler+0xea>
 801267c:	4bb3      	ldr	r3, [pc, #716]	; (801294c <HAL_DMA_IRQHandler+0x2f4>)
 801267e:	429a      	cmp	r2, r3
 8012680:	d062      	beq.n	8012748 <HAL_DMA_IRQHandler+0xf0>
 8012682:	4bb3      	ldr	r3, [pc, #716]	; (8012950 <HAL_DMA_IRQHandler+0x2f8>)
 8012684:	429a      	cmp	r2, r3
 8012686:	d062      	beq.n	801274e <HAL_DMA_IRQHandler+0xf6>
 8012688:	4bb2      	ldr	r3, [pc, #712]	; (8012954 <HAL_DMA_IRQHandler+0x2fc>)
 801268a:	429a      	cmp	r2, r3
 801268c:	d062      	beq.n	8012754 <HAL_DMA_IRQHandler+0xfc>
 801268e:	4baa      	ldr	r3, [pc, #680]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 8012690:	429a      	cmp	r2, r3
 8012692:	d062      	beq.n	801275a <HAL_DMA_IRQHandler+0x102>
 8012694:	4bb0      	ldr	r3, [pc, #704]	; (8012958 <HAL_DMA_IRQHandler+0x300>)
 8012696:	429a      	cmp	r2, r3
 8012698:	d062      	beq.n	8012760 <HAL_DMA_IRQHandler+0x108>
 801269a:	4bb0      	ldr	r3, [pc, #704]	; (801295c <HAL_DMA_IRQHandler+0x304>)
 801269c:	429a      	cmp	r2, r3
 801269e:	d061      	beq.n	8012764 <HAL_DMA_IRQHandler+0x10c>
 80126a0:	4baf      	ldr	r3, [pc, #700]	; (8012960 <HAL_DMA_IRQHandler+0x308>)
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d060      	beq.n	8012768 <HAL_DMA_IRQHandler+0x110>
 80126a6:	4baf      	ldr	r3, [pc, #700]	; (8012964 <HAL_DMA_IRQHandler+0x30c>)
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d002      	beq.n	80126b2 <HAL_DMA_IRQHandler+0x5a>
 80126ac:	2380      	movs	r3, #128	; 0x80
 80126ae:	031b      	lsls	r3, r3, #12
 80126b0:	e003      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 80126b2:	2380      	movs	r3, #128	; 0x80
 80126b4:	021b      	lsls	r3, r3, #8
 80126b6:	e000      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 80126b8:	2308      	movs	r3, #8
 80126ba:	400b      	ands	r3, r1
 80126bc:	1e59      	subs	r1, r3, #1
 80126be:	418b      	sbcs	r3, r1
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d100      	bne.n	80126c8 <HAL_DMA_IRQHandler+0x70>
 80126c6:	e0ae      	b.n	8012826 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80126c8:	6813      	ldr	r3, [r2, #0]
 80126ca:	071b      	lsls	r3, r3, #28
 80126cc:	d400      	bmi.n	80126d0 <HAL_DMA_IRQHandler+0x78>
 80126ce:	e0aa      	b.n	8012826 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80126d0:	6813      	ldr	r3, [r2, #0]
 80126d2:	2108      	movs	r1, #8
 80126d4:	438b      	bics	r3, r1
 80126d6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	4a97      	ldr	r2, [pc, #604]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d800      	bhi.n	80126e2 <HAL_DMA_IRQHandler+0x8a>
 80126e0:	e0ee      	b.n	80128c0 <HAL_DMA_IRQHandler+0x268>
 80126e2:	4a97      	ldr	r2, [pc, #604]	; (8012940 <HAL_DMA_IRQHandler+0x2e8>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d100      	bne.n	80126ea <HAL_DMA_IRQHandler+0x92>
 80126e8:	e08b      	b.n	8012802 <HAL_DMA_IRQHandler+0x1aa>
 80126ea:	4a96      	ldr	r2, [pc, #600]	; (8012944 <HAL_DMA_IRQHandler+0x2ec>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d100      	bne.n	80126f2 <HAL_DMA_IRQHandler+0x9a>
 80126f0:	e0ce      	b.n	8012890 <HAL_DMA_IRQHandler+0x238>
 80126f2:	4a95      	ldr	r2, [pc, #596]	; (8012948 <HAL_DMA_IRQHandler+0x2f0>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d100      	bne.n	80126fa <HAL_DMA_IRQHandler+0xa2>
 80126f8:	e0cc      	b.n	8012894 <HAL_DMA_IRQHandler+0x23c>
 80126fa:	4a94      	ldr	r2, [pc, #592]	; (801294c <HAL_DMA_IRQHandler+0x2f4>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d100      	bne.n	8012702 <HAL_DMA_IRQHandler+0xaa>
 8012700:	e0cb      	b.n	801289a <HAL_DMA_IRQHandler+0x242>
 8012702:	4a93      	ldr	r2, [pc, #588]	; (8012950 <HAL_DMA_IRQHandler+0x2f8>)
 8012704:	4293      	cmp	r3, r2
 8012706:	d100      	bne.n	801270a <HAL_DMA_IRQHandler+0xb2>
 8012708:	e0ca      	b.n	80128a0 <HAL_DMA_IRQHandler+0x248>
 801270a:	4a92      	ldr	r2, [pc, #584]	; (8012954 <HAL_DMA_IRQHandler+0x2fc>)
 801270c:	4293      	cmp	r3, r2
 801270e:	d100      	bne.n	8012712 <HAL_DMA_IRQHandler+0xba>
 8012710:	e0c9      	b.n	80128a6 <HAL_DMA_IRQHandler+0x24e>
 8012712:	4a89      	ldr	r2, [pc, #548]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d100      	bne.n	801271a <HAL_DMA_IRQHandler+0xc2>
 8012718:	e0c8      	b.n	80128ac <HAL_DMA_IRQHandler+0x254>
 801271a:	4a8f      	ldr	r2, [pc, #572]	; (8012958 <HAL_DMA_IRQHandler+0x300>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d100      	bne.n	8012722 <HAL_DMA_IRQHandler+0xca>
 8012720:	e0c7      	b.n	80128b2 <HAL_DMA_IRQHandler+0x25a>
 8012722:	4a8e      	ldr	r2, [pc, #568]	; (801295c <HAL_DMA_IRQHandler+0x304>)
 8012724:	4293      	cmp	r3, r2
 8012726:	d100      	bne.n	801272a <HAL_DMA_IRQHandler+0xd2>
 8012728:	e0c5      	b.n	80128b6 <HAL_DMA_IRQHandler+0x25e>
 801272a:	4a8d      	ldr	r2, [pc, #564]	; (8012960 <HAL_DMA_IRQHandler+0x308>)
 801272c:	4293      	cmp	r3, r2
 801272e:	d100      	bne.n	8012732 <HAL_DMA_IRQHandler+0xda>
 8012730:	e0c3      	b.n	80128ba <HAL_DMA_IRQHandler+0x262>
 8012732:	4a8c      	ldr	r2, [pc, #560]	; (8012964 <HAL_DMA_IRQHandler+0x30c>)
 8012734:	4293      	cmp	r3, r2
 8012736:	d061      	beq.n	80127fc <HAL_DMA_IRQHandler+0x1a4>
 8012738:	2280      	movs	r2, #128	; 0x80
 801273a:	0312      	lsls	r2, r2, #12
 801273c:	e062      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801273e:	2380      	movs	r3, #128	; 0x80
 8012740:	e7bb      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012742:	2380      	movs	r3, #128	; 0x80
 8012744:	011b      	lsls	r3, r3, #4
 8012746:	e7b8      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012748:	2380      	movs	r3, #128	; 0x80
 801274a:	021b      	lsls	r3, r3, #8
 801274c:	e7b5      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 801274e:	2380      	movs	r3, #128	; 0x80
 8012750:	031b      	lsls	r3, r3, #12
 8012752:	e7b2      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012754:	2380      	movs	r3, #128	; 0x80
 8012756:	041b      	lsls	r3, r3, #16
 8012758:	e7af      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 801275a:	2380      	movs	r3, #128	; 0x80
 801275c:	051b      	lsls	r3, r3, #20
 801275e:	e7ac      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012760:	2308      	movs	r3, #8
 8012762:	e7aa      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012764:	2380      	movs	r3, #128	; 0x80
 8012766:	e7a8      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 8012768:	2380      	movs	r3, #128	; 0x80
 801276a:	011b      	lsls	r3, r3, #4
 801276c:	e7a5      	b.n	80126ba <HAL_DMA_IRQHandler+0x62>
 801276e:	4b7e      	ldr	r3, [pc, #504]	; (8012968 <HAL_DMA_IRQHandler+0x310>)
 8012770:	6819      	ldr	r1, [r3, #0]
 8012772:	4b73      	ldr	r3, [pc, #460]	; (8012940 <HAL_DMA_IRQHandler+0x2e8>)
 8012774:	429a      	cmp	r2, r3
 8012776:	d023      	beq.n	80127c0 <HAL_DMA_IRQHandler+0x168>
 8012778:	4b72      	ldr	r3, [pc, #456]	; (8012944 <HAL_DMA_IRQHandler+0x2ec>)
 801277a:	429a      	cmp	r2, r3
 801277c:	d026      	beq.n	80127cc <HAL_DMA_IRQHandler+0x174>
 801277e:	4b72      	ldr	r3, [pc, #456]	; (8012948 <HAL_DMA_IRQHandler+0x2f0>)
 8012780:	429a      	cmp	r2, r3
 8012782:	d025      	beq.n	80127d0 <HAL_DMA_IRQHandler+0x178>
 8012784:	4b71      	ldr	r3, [pc, #452]	; (801294c <HAL_DMA_IRQHandler+0x2f4>)
 8012786:	429a      	cmp	r2, r3
 8012788:	d025      	beq.n	80127d6 <HAL_DMA_IRQHandler+0x17e>
 801278a:	4b71      	ldr	r3, [pc, #452]	; (8012950 <HAL_DMA_IRQHandler+0x2f8>)
 801278c:	429a      	cmp	r2, r3
 801278e:	d025      	beq.n	80127dc <HAL_DMA_IRQHandler+0x184>
 8012790:	4b70      	ldr	r3, [pc, #448]	; (8012954 <HAL_DMA_IRQHandler+0x2fc>)
 8012792:	429a      	cmp	r2, r3
 8012794:	d025      	beq.n	80127e2 <HAL_DMA_IRQHandler+0x18a>
 8012796:	4b68      	ldr	r3, [pc, #416]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 8012798:	429a      	cmp	r2, r3
 801279a:	d025      	beq.n	80127e8 <HAL_DMA_IRQHandler+0x190>
 801279c:	4b6e      	ldr	r3, [pc, #440]	; (8012958 <HAL_DMA_IRQHandler+0x300>)
 801279e:	429a      	cmp	r2, r3
 80127a0:	d025      	beq.n	80127ee <HAL_DMA_IRQHandler+0x196>
 80127a2:	4b6e      	ldr	r3, [pc, #440]	; (801295c <HAL_DMA_IRQHandler+0x304>)
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d024      	beq.n	80127f2 <HAL_DMA_IRQHandler+0x19a>
 80127a8:	4b6d      	ldr	r3, [pc, #436]	; (8012960 <HAL_DMA_IRQHandler+0x308>)
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d023      	beq.n	80127f6 <HAL_DMA_IRQHandler+0x19e>
 80127ae:	4b6d      	ldr	r3, [pc, #436]	; (8012964 <HAL_DMA_IRQHandler+0x30c>)
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d002      	beq.n	80127ba <HAL_DMA_IRQHandler+0x162>
 80127b4:	2380      	movs	r3, #128	; 0x80
 80127b6:	031b      	lsls	r3, r3, #12
 80127b8:	e003      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127ba:	2380      	movs	r3, #128	; 0x80
 80127bc:	021b      	lsls	r3, r3, #8
 80127be:	e000      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127c0:	2308      	movs	r3, #8
 80127c2:	400b      	ands	r3, r1
 80127c4:	1e59      	subs	r1, r3, #1
 80127c6:	418b      	sbcs	r3, r1
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	e77a      	b.n	80126c2 <HAL_DMA_IRQHandler+0x6a>
 80127cc:	2380      	movs	r3, #128	; 0x80
 80127ce:	e7f8      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127d0:	2380      	movs	r3, #128	; 0x80
 80127d2:	011b      	lsls	r3, r3, #4
 80127d4:	e7f5      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127d6:	2380      	movs	r3, #128	; 0x80
 80127d8:	021b      	lsls	r3, r3, #8
 80127da:	e7f2      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127dc:	2380      	movs	r3, #128	; 0x80
 80127de:	031b      	lsls	r3, r3, #12
 80127e0:	e7ef      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127e2:	2380      	movs	r3, #128	; 0x80
 80127e4:	041b      	lsls	r3, r3, #16
 80127e6:	e7ec      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127e8:	2380      	movs	r3, #128	; 0x80
 80127ea:	051b      	lsls	r3, r3, #20
 80127ec:	e7e9      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127ee:	2308      	movs	r3, #8
 80127f0:	e7e7      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127f2:	2380      	movs	r3, #128	; 0x80
 80127f4:	e7e5      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
 80127f6:	2380      	movs	r3, #128	; 0x80
 80127f8:	011b      	lsls	r3, r3, #4
 80127fa:	e7e2      	b.n	80127c2 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80127fc:	2280      	movs	r2, #128	; 0x80
 80127fe:	0212      	lsls	r2, r2, #8
 8012800:	e000      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 8012802:	2208      	movs	r2, #8
 8012804:	4b4d      	ldr	r3, [pc, #308]	; (801293c <HAL_DMA_IRQHandler+0x2e4>)
 8012806:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8012808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801280a:	2201      	movs	r2, #1
 801280c:	4313      	orrs	r3, r2
 801280e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8012810:	2321      	movs	r3, #33	; 0x21
 8012812:	3203      	adds	r2, #3
 8012814:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8012816:	3b01      	subs	r3, #1
 8012818:	2200      	movs	r2, #0
 801281a:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801281c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801281e:	2b00      	cmp	r3, #0
 8012820:	d001      	beq.n	8012826 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8012822:	0020      	movs	r0, r4
 8012824:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012826:	6822      	ldr	r2, [r4, #0]
 8012828:	4b43      	ldr	r3, [pc, #268]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 801282a:	429a      	cmp	r2, r3
 801282c:	d800      	bhi.n	8012830 <HAL_DMA_IRQHandler+0x1d8>
 801282e:	e105      	b.n	8012a3c <HAL_DMA_IRQHandler+0x3e4>
 8012830:	4b42      	ldr	r3, [pc, #264]	; (801293c <HAL_DMA_IRQHandler+0x2e4>)
 8012832:	6819      	ldr	r1, [r3, #0]
 8012834:	4b42      	ldr	r3, [pc, #264]	; (8012940 <HAL_DMA_IRQHandler+0x2e8>)
 8012836:	429a      	cmp	r2, r3
 8012838:	d100      	bne.n	801283c <HAL_DMA_IRQHandler+0x1e4>
 801283a:	e0a1      	b.n	8012980 <HAL_DMA_IRQHandler+0x328>
 801283c:	4b41      	ldr	r3, [pc, #260]	; (8012944 <HAL_DMA_IRQHandler+0x2ec>)
 801283e:	429a      	cmp	r2, r3
 8012840:	d100      	bne.n	8012844 <HAL_DMA_IRQHandler+0x1ec>
 8012842:	e0e3      	b.n	8012a0c <HAL_DMA_IRQHandler+0x3b4>
 8012844:	4b40      	ldr	r3, [pc, #256]	; (8012948 <HAL_DMA_IRQHandler+0x2f0>)
 8012846:	429a      	cmp	r2, r3
 8012848:	d100      	bne.n	801284c <HAL_DMA_IRQHandler+0x1f4>
 801284a:	e0e1      	b.n	8012a10 <HAL_DMA_IRQHandler+0x3b8>
 801284c:	4b3f      	ldr	r3, [pc, #252]	; (801294c <HAL_DMA_IRQHandler+0x2f4>)
 801284e:	429a      	cmp	r2, r3
 8012850:	d100      	bne.n	8012854 <HAL_DMA_IRQHandler+0x1fc>
 8012852:	e0e0      	b.n	8012a16 <HAL_DMA_IRQHandler+0x3be>
 8012854:	4b3e      	ldr	r3, [pc, #248]	; (8012950 <HAL_DMA_IRQHandler+0x2f8>)
 8012856:	429a      	cmp	r2, r3
 8012858:	d100      	bne.n	801285c <HAL_DMA_IRQHandler+0x204>
 801285a:	e0df      	b.n	8012a1c <HAL_DMA_IRQHandler+0x3c4>
 801285c:	4b3d      	ldr	r3, [pc, #244]	; (8012954 <HAL_DMA_IRQHandler+0x2fc>)
 801285e:	429a      	cmp	r2, r3
 8012860:	d100      	bne.n	8012864 <HAL_DMA_IRQHandler+0x20c>
 8012862:	e0de      	b.n	8012a22 <HAL_DMA_IRQHandler+0x3ca>
 8012864:	4b34      	ldr	r3, [pc, #208]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 8012866:	429a      	cmp	r2, r3
 8012868:	d100      	bne.n	801286c <HAL_DMA_IRQHandler+0x214>
 801286a:	e0dd      	b.n	8012a28 <HAL_DMA_IRQHandler+0x3d0>
 801286c:	4b3a      	ldr	r3, [pc, #232]	; (8012958 <HAL_DMA_IRQHandler+0x300>)
 801286e:	429a      	cmp	r2, r3
 8012870:	d100      	bne.n	8012874 <HAL_DMA_IRQHandler+0x21c>
 8012872:	e0dc      	b.n	8012a2e <HAL_DMA_IRQHandler+0x3d6>
 8012874:	4b39      	ldr	r3, [pc, #228]	; (801295c <HAL_DMA_IRQHandler+0x304>)
 8012876:	429a      	cmp	r2, r3
 8012878:	d100      	bne.n	801287c <HAL_DMA_IRQHandler+0x224>
 801287a:	e0da      	b.n	8012a32 <HAL_DMA_IRQHandler+0x3da>
 801287c:	4b38      	ldr	r3, [pc, #224]	; (8012960 <HAL_DMA_IRQHandler+0x308>)
 801287e:	429a      	cmp	r2, r3
 8012880:	d100      	bne.n	8012884 <HAL_DMA_IRQHandler+0x22c>
 8012882:	e0d8      	b.n	8012a36 <HAL_DMA_IRQHandler+0x3de>
 8012884:	4b37      	ldr	r3, [pc, #220]	; (8012964 <HAL_DMA_IRQHandler+0x30c>)
 8012886:	429a      	cmp	r2, r3
 8012888:	d077      	beq.n	801297a <HAL_DMA_IRQHandler+0x322>
 801288a:	2380      	movs	r3, #128	; 0x80
 801288c:	02db      	lsls	r3, r3, #11
 801288e:	e078      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012890:	2280      	movs	r2, #128	; 0x80
 8012892:	e7b7      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 8012894:	2280      	movs	r2, #128	; 0x80
 8012896:	0112      	lsls	r2, r2, #4
 8012898:	e7b4      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 801289a:	2280      	movs	r2, #128	; 0x80
 801289c:	0212      	lsls	r2, r2, #8
 801289e:	e7b1      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128a0:	2280      	movs	r2, #128	; 0x80
 80128a2:	0312      	lsls	r2, r2, #12
 80128a4:	e7ae      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128a6:	2280      	movs	r2, #128	; 0x80
 80128a8:	0412      	lsls	r2, r2, #16
 80128aa:	e7ab      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128ac:	2280      	movs	r2, #128	; 0x80
 80128ae:	0512      	lsls	r2, r2, #20
 80128b0:	e7a8      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128b2:	2208      	movs	r2, #8
 80128b4:	e7a6      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128b6:	2280      	movs	r2, #128	; 0x80
 80128b8:	e7a4      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128ba:	2280      	movs	r2, #128	; 0x80
 80128bc:	0112      	lsls	r2, r2, #4
 80128be:	e7a1      	b.n	8012804 <HAL_DMA_IRQHandler+0x1ac>
 80128c0:	4a1f      	ldr	r2, [pc, #124]	; (8012940 <HAL_DMA_IRQHandler+0x2e8>)
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d023      	beq.n	801290e <HAL_DMA_IRQHandler+0x2b6>
 80128c6:	4a1f      	ldr	r2, [pc, #124]	; (8012944 <HAL_DMA_IRQHandler+0x2ec>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d024      	beq.n	8012916 <HAL_DMA_IRQHandler+0x2be>
 80128cc:	4a1e      	ldr	r2, [pc, #120]	; (8012948 <HAL_DMA_IRQHandler+0x2f0>)
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d023      	beq.n	801291a <HAL_DMA_IRQHandler+0x2c2>
 80128d2:	4a1e      	ldr	r2, [pc, #120]	; (801294c <HAL_DMA_IRQHandler+0x2f4>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d023      	beq.n	8012920 <HAL_DMA_IRQHandler+0x2c8>
 80128d8:	4a1d      	ldr	r2, [pc, #116]	; (8012950 <HAL_DMA_IRQHandler+0x2f8>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d023      	beq.n	8012926 <HAL_DMA_IRQHandler+0x2ce>
 80128de:	4a1d      	ldr	r2, [pc, #116]	; (8012954 <HAL_DMA_IRQHandler+0x2fc>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d023      	beq.n	801292c <HAL_DMA_IRQHandler+0x2d4>
 80128e4:	4a14      	ldr	r2, [pc, #80]	; (8012938 <HAL_DMA_IRQHandler+0x2e0>)
 80128e6:	4293      	cmp	r3, r2
 80128e8:	d023      	beq.n	8012932 <HAL_DMA_IRQHandler+0x2da>
 80128ea:	4a1b      	ldr	r2, [pc, #108]	; (8012958 <HAL_DMA_IRQHandler+0x300>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d03d      	beq.n	801296c <HAL_DMA_IRQHandler+0x314>
 80128f0:	4a1a      	ldr	r2, [pc, #104]	; (801295c <HAL_DMA_IRQHandler+0x304>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d03c      	beq.n	8012970 <HAL_DMA_IRQHandler+0x318>
 80128f6:	4a1a      	ldr	r2, [pc, #104]	; (8012960 <HAL_DMA_IRQHandler+0x308>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d03b      	beq.n	8012974 <HAL_DMA_IRQHandler+0x31c>
 80128fc:	4a19      	ldr	r2, [pc, #100]	; (8012964 <HAL_DMA_IRQHandler+0x30c>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	d002      	beq.n	8012908 <HAL_DMA_IRQHandler+0x2b0>
 8012902:	2280      	movs	r2, #128	; 0x80
 8012904:	0312      	lsls	r2, r2, #12
 8012906:	e003      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012908:	2280      	movs	r2, #128	; 0x80
 801290a:	0212      	lsls	r2, r2, #8
 801290c:	e000      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 801290e:	2208      	movs	r2, #8
 8012910:	4b15      	ldr	r3, [pc, #84]	; (8012968 <HAL_DMA_IRQHandler+0x310>)
 8012912:	605a      	str	r2, [r3, #4]
 8012914:	e778      	b.n	8012808 <HAL_DMA_IRQHandler+0x1b0>
 8012916:	2280      	movs	r2, #128	; 0x80
 8012918:	e7fa      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 801291a:	2280      	movs	r2, #128	; 0x80
 801291c:	0112      	lsls	r2, r2, #4
 801291e:	e7f7      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012920:	2280      	movs	r2, #128	; 0x80
 8012922:	0212      	lsls	r2, r2, #8
 8012924:	e7f4      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012926:	2280      	movs	r2, #128	; 0x80
 8012928:	0312      	lsls	r2, r2, #12
 801292a:	e7f1      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 801292c:	2280      	movs	r2, #128	; 0x80
 801292e:	0412      	lsls	r2, r2, #16
 8012930:	e7ee      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012932:	2280      	movs	r2, #128	; 0x80
 8012934:	0512      	lsls	r2, r2, #20
 8012936:	e7eb      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012938:	40020080 	.word	0x40020080
 801293c:	40020400 	.word	0x40020400
 8012940:	40020008 	.word	0x40020008
 8012944:	4002001c 	.word	0x4002001c
 8012948:	40020030 	.word	0x40020030
 801294c:	40020044 	.word	0x40020044
 8012950:	40020058 	.word	0x40020058
 8012954:	4002006c 	.word	0x4002006c
 8012958:	40020408 	.word	0x40020408
 801295c:	4002041c 	.word	0x4002041c
 8012960:	40020430 	.word	0x40020430
 8012964:	40020444 	.word	0x40020444
 8012968:	40020000 	.word	0x40020000
 801296c:	2208      	movs	r2, #8
 801296e:	e7cf      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012970:	2280      	movs	r2, #128	; 0x80
 8012972:	e7cd      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
 8012974:	2280      	movs	r2, #128	; 0x80
 8012976:	0112      	lsls	r2, r2, #4
 8012978:	e7ca      	b.n	8012910 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801297a:	2380      	movs	r3, #128	; 0x80
 801297c:	01db      	lsls	r3, r3, #7
 801297e:	e000      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012980:	2304      	movs	r3, #4
 8012982:	400b      	ands	r3, r1
 8012984:	1e59      	subs	r1, r3, #1
 8012986:	418b      	sbcs	r3, r1
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	d100      	bne.n	8012990 <HAL_DMA_IRQHandler+0x338>
 801298e:	e0aa      	b.n	8012ae6 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012990:	6813      	ldr	r3, [r2, #0]
 8012992:	075b      	lsls	r3, r3, #29
 8012994:	d400      	bmi.n	8012998 <HAL_DMA_IRQHandler+0x340>
 8012996:	e0a6      	b.n	8012ae6 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8012998:	6813      	ldr	r3, [r2, #0]
 801299a:	069b      	lsls	r3, r3, #26
 801299c:	d403      	bmi.n	80129a6 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801299e:	6813      	ldr	r3, [r2, #0]
 80129a0:	2104      	movs	r1, #4
 80129a2:	438b      	bics	r3, r1
 80129a4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	4a98      	ldr	r2, [pc, #608]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d800      	bhi.n	80129b0 <HAL_DMA_IRQHandler+0x358>
 80129ae:	e0e7      	b.n	8012b80 <HAL_DMA_IRQHandler+0x528>
 80129b0:	4a97      	ldr	r2, [pc, #604]	; (8012c10 <HAL_DMA_IRQHandler+0x5b8>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d100      	bne.n	80129b8 <HAL_DMA_IRQHandler+0x360>
 80129b6:	e08b      	b.n	8012ad0 <HAL_DMA_IRQHandler+0x478>
 80129b8:	4a96      	ldr	r2, [pc, #600]	; (8012c14 <HAL_DMA_IRQHandler+0x5bc>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d100      	bne.n	80129c0 <HAL_DMA_IRQHandler+0x368>
 80129be:	e0c7      	b.n	8012b50 <HAL_DMA_IRQHandler+0x4f8>
 80129c0:	4a95      	ldr	r2, [pc, #596]	; (8012c18 <HAL_DMA_IRQHandler+0x5c0>)
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d100      	bne.n	80129c8 <HAL_DMA_IRQHandler+0x370>
 80129c6:	e0c5      	b.n	8012b54 <HAL_DMA_IRQHandler+0x4fc>
 80129c8:	4a94      	ldr	r2, [pc, #592]	; (8012c1c <HAL_DMA_IRQHandler+0x5c4>)
 80129ca:	4293      	cmp	r3, r2
 80129cc:	d100      	bne.n	80129d0 <HAL_DMA_IRQHandler+0x378>
 80129ce:	e0c4      	b.n	8012b5a <HAL_DMA_IRQHandler+0x502>
 80129d0:	4a93      	ldr	r2, [pc, #588]	; (8012c20 <HAL_DMA_IRQHandler+0x5c8>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d100      	bne.n	80129d8 <HAL_DMA_IRQHandler+0x380>
 80129d6:	e0c3      	b.n	8012b60 <HAL_DMA_IRQHandler+0x508>
 80129d8:	4a92      	ldr	r2, [pc, #584]	; (8012c24 <HAL_DMA_IRQHandler+0x5cc>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d100      	bne.n	80129e0 <HAL_DMA_IRQHandler+0x388>
 80129de:	e0c2      	b.n	8012b66 <HAL_DMA_IRQHandler+0x50e>
 80129e0:	4a8a      	ldr	r2, [pc, #552]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d100      	bne.n	80129e8 <HAL_DMA_IRQHandler+0x390>
 80129e6:	e0c1      	b.n	8012b6c <HAL_DMA_IRQHandler+0x514>
 80129e8:	4a8f      	ldr	r2, [pc, #572]	; (8012c28 <HAL_DMA_IRQHandler+0x5d0>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d100      	bne.n	80129f0 <HAL_DMA_IRQHandler+0x398>
 80129ee:	e0c0      	b.n	8012b72 <HAL_DMA_IRQHandler+0x51a>
 80129f0:	4a8e      	ldr	r2, [pc, #568]	; (8012c2c <HAL_DMA_IRQHandler+0x5d4>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d100      	bne.n	80129f8 <HAL_DMA_IRQHandler+0x3a0>
 80129f6:	e0be      	b.n	8012b76 <HAL_DMA_IRQHandler+0x51e>
 80129f8:	4a8d      	ldr	r2, [pc, #564]	; (8012c30 <HAL_DMA_IRQHandler+0x5d8>)
 80129fa:	4293      	cmp	r3, r2
 80129fc:	d100      	bne.n	8012a00 <HAL_DMA_IRQHandler+0x3a8>
 80129fe:	e0bc      	b.n	8012b7a <HAL_DMA_IRQHandler+0x522>
 8012a00:	4a8c      	ldr	r2, [pc, #560]	; (8012c34 <HAL_DMA_IRQHandler+0x5dc>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d061      	beq.n	8012aca <HAL_DMA_IRQHandler+0x472>
 8012a06:	2280      	movs	r2, #128	; 0x80
 8012a08:	02d2      	lsls	r2, r2, #11
 8012a0a:	e062      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012a0c:	2340      	movs	r3, #64	; 0x40
 8012a0e:	e7b8      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a10:	2380      	movs	r3, #128	; 0x80
 8012a12:	00db      	lsls	r3, r3, #3
 8012a14:	e7b5      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a16:	2380      	movs	r3, #128	; 0x80
 8012a18:	01db      	lsls	r3, r3, #7
 8012a1a:	e7b2      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a1c:	2380      	movs	r3, #128	; 0x80
 8012a1e:	02db      	lsls	r3, r3, #11
 8012a20:	e7af      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a22:	2380      	movs	r3, #128	; 0x80
 8012a24:	03db      	lsls	r3, r3, #15
 8012a26:	e7ac      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a28:	2380      	movs	r3, #128	; 0x80
 8012a2a:	04db      	lsls	r3, r3, #19
 8012a2c:	e7a9      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a2e:	2304      	movs	r3, #4
 8012a30:	e7a7      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a32:	2340      	movs	r3, #64	; 0x40
 8012a34:	e7a5      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a36:	2380      	movs	r3, #128	; 0x80
 8012a38:	00db      	lsls	r3, r3, #3
 8012a3a:	e7a2      	b.n	8012982 <HAL_DMA_IRQHandler+0x32a>
 8012a3c:	4b7e      	ldr	r3, [pc, #504]	; (8012c38 <HAL_DMA_IRQHandler+0x5e0>)
 8012a3e:	6819      	ldr	r1, [r3, #0]
 8012a40:	4b73      	ldr	r3, [pc, #460]	; (8012c10 <HAL_DMA_IRQHandler+0x5b8>)
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d023      	beq.n	8012a8e <HAL_DMA_IRQHandler+0x436>
 8012a46:	4b73      	ldr	r3, [pc, #460]	; (8012c14 <HAL_DMA_IRQHandler+0x5bc>)
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d026      	beq.n	8012a9a <HAL_DMA_IRQHandler+0x442>
 8012a4c:	4b72      	ldr	r3, [pc, #456]	; (8012c18 <HAL_DMA_IRQHandler+0x5c0>)
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d025      	beq.n	8012a9e <HAL_DMA_IRQHandler+0x446>
 8012a52:	4b72      	ldr	r3, [pc, #456]	; (8012c1c <HAL_DMA_IRQHandler+0x5c4>)
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d025      	beq.n	8012aa4 <HAL_DMA_IRQHandler+0x44c>
 8012a58:	4b71      	ldr	r3, [pc, #452]	; (8012c20 <HAL_DMA_IRQHandler+0x5c8>)
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d025      	beq.n	8012aaa <HAL_DMA_IRQHandler+0x452>
 8012a5e:	4b71      	ldr	r3, [pc, #452]	; (8012c24 <HAL_DMA_IRQHandler+0x5cc>)
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d025      	beq.n	8012ab0 <HAL_DMA_IRQHandler+0x458>
 8012a64:	4b69      	ldr	r3, [pc, #420]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d025      	beq.n	8012ab6 <HAL_DMA_IRQHandler+0x45e>
 8012a6a:	4b6f      	ldr	r3, [pc, #444]	; (8012c28 <HAL_DMA_IRQHandler+0x5d0>)
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d025      	beq.n	8012abc <HAL_DMA_IRQHandler+0x464>
 8012a70:	4b6e      	ldr	r3, [pc, #440]	; (8012c2c <HAL_DMA_IRQHandler+0x5d4>)
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d024      	beq.n	8012ac0 <HAL_DMA_IRQHandler+0x468>
 8012a76:	4b6e      	ldr	r3, [pc, #440]	; (8012c30 <HAL_DMA_IRQHandler+0x5d8>)
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d023      	beq.n	8012ac4 <HAL_DMA_IRQHandler+0x46c>
 8012a7c:	4b6d      	ldr	r3, [pc, #436]	; (8012c34 <HAL_DMA_IRQHandler+0x5dc>)
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d002      	beq.n	8012a88 <HAL_DMA_IRQHandler+0x430>
 8012a82:	2380      	movs	r3, #128	; 0x80
 8012a84:	02db      	lsls	r3, r3, #11
 8012a86:	e003      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012a88:	2380      	movs	r3, #128	; 0x80
 8012a8a:	01db      	lsls	r3, r3, #7
 8012a8c:	e000      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012a8e:	2304      	movs	r3, #4
 8012a90:	400b      	ands	r3, r1
 8012a92:	1e59      	subs	r1, r3, #1
 8012a94:	418b      	sbcs	r3, r1
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	e777      	b.n	801298a <HAL_DMA_IRQHandler+0x332>
 8012a9a:	2340      	movs	r3, #64	; 0x40
 8012a9c:	e7f8      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012a9e:	2380      	movs	r3, #128	; 0x80
 8012aa0:	00db      	lsls	r3, r3, #3
 8012aa2:	e7f5      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012aa4:	2380      	movs	r3, #128	; 0x80
 8012aa6:	01db      	lsls	r3, r3, #7
 8012aa8:	e7f2      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012aaa:	2380      	movs	r3, #128	; 0x80
 8012aac:	02db      	lsls	r3, r3, #11
 8012aae:	e7ef      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012ab0:	2380      	movs	r3, #128	; 0x80
 8012ab2:	03db      	lsls	r3, r3, #15
 8012ab4:	e7ec      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012ab6:	2380      	movs	r3, #128	; 0x80
 8012ab8:	04db      	lsls	r3, r3, #19
 8012aba:	e7e9      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012abc:	2304      	movs	r3, #4
 8012abe:	e7e7      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012ac0:	2340      	movs	r3, #64	; 0x40
 8012ac2:	e7e5      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
 8012ac4:	2380      	movs	r3, #128	; 0x80
 8012ac6:	00db      	lsls	r3, r3, #3
 8012ac8:	e7e2      	b.n	8012a90 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012aca:	2280      	movs	r2, #128	; 0x80
 8012acc:	01d2      	lsls	r2, r2, #7
 8012ace:	e000      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012ad0:	2204      	movs	r2, #4
 8012ad2:	4b5a      	ldr	r3, [pc, #360]	; (8012c3c <HAL_DMA_IRQHandler+0x5e4>)
 8012ad4:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8012ad6:	2321      	movs	r3, #33	; 0x21
 8012ad8:	2211      	movs	r2, #17
 8012ada:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8012ae2:	0020      	movs	r0, r4
 8012ae4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012ae6:	6822      	ldr	r2, [r4, #0]
 8012ae8:	4b48      	ldr	r3, [pc, #288]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d800      	bhi.n	8012af0 <HAL_DMA_IRQHandler+0x498>
 8012aee:	e105      	b.n	8012cfc <HAL_DMA_IRQHandler+0x6a4>
 8012af0:	4b52      	ldr	r3, [pc, #328]	; (8012c3c <HAL_DMA_IRQHandler+0x5e4>)
 8012af2:	6819      	ldr	r1, [r3, #0]
 8012af4:	4b46      	ldr	r3, [pc, #280]	; (8012c10 <HAL_DMA_IRQHandler+0x5b8>)
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d100      	bne.n	8012afc <HAL_DMA_IRQHandler+0x4a4>
 8012afa:	e0a1      	b.n	8012c40 <HAL_DMA_IRQHandler+0x5e8>
 8012afc:	4b45      	ldr	r3, [pc, #276]	; (8012c14 <HAL_DMA_IRQHandler+0x5bc>)
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d100      	bne.n	8012b04 <HAL_DMA_IRQHandler+0x4ac>
 8012b02:	e0e3      	b.n	8012ccc <HAL_DMA_IRQHandler+0x674>
 8012b04:	4b44      	ldr	r3, [pc, #272]	; (8012c18 <HAL_DMA_IRQHandler+0x5c0>)
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d100      	bne.n	8012b0c <HAL_DMA_IRQHandler+0x4b4>
 8012b0a:	e0e1      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x678>
 8012b0c:	4b43      	ldr	r3, [pc, #268]	; (8012c1c <HAL_DMA_IRQHandler+0x5c4>)
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d100      	bne.n	8012b14 <HAL_DMA_IRQHandler+0x4bc>
 8012b12:	e0e0      	b.n	8012cd6 <HAL_DMA_IRQHandler+0x67e>
 8012b14:	4b42      	ldr	r3, [pc, #264]	; (8012c20 <HAL_DMA_IRQHandler+0x5c8>)
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d100      	bne.n	8012b1c <HAL_DMA_IRQHandler+0x4c4>
 8012b1a:	e0df      	b.n	8012cdc <HAL_DMA_IRQHandler+0x684>
 8012b1c:	4b41      	ldr	r3, [pc, #260]	; (8012c24 <HAL_DMA_IRQHandler+0x5cc>)
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d100      	bne.n	8012b24 <HAL_DMA_IRQHandler+0x4cc>
 8012b22:	e0de      	b.n	8012ce2 <HAL_DMA_IRQHandler+0x68a>
 8012b24:	4b39      	ldr	r3, [pc, #228]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d100      	bne.n	8012b2c <HAL_DMA_IRQHandler+0x4d4>
 8012b2a:	e0dd      	b.n	8012ce8 <HAL_DMA_IRQHandler+0x690>
 8012b2c:	4b3e      	ldr	r3, [pc, #248]	; (8012c28 <HAL_DMA_IRQHandler+0x5d0>)
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d100      	bne.n	8012b34 <HAL_DMA_IRQHandler+0x4dc>
 8012b32:	e0dc      	b.n	8012cee <HAL_DMA_IRQHandler+0x696>
 8012b34:	4b3d      	ldr	r3, [pc, #244]	; (8012c2c <HAL_DMA_IRQHandler+0x5d4>)
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d100      	bne.n	8012b3c <HAL_DMA_IRQHandler+0x4e4>
 8012b3a:	e0da      	b.n	8012cf2 <HAL_DMA_IRQHandler+0x69a>
 8012b3c:	4b3c      	ldr	r3, [pc, #240]	; (8012c30 <HAL_DMA_IRQHandler+0x5d8>)
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d100      	bne.n	8012b44 <HAL_DMA_IRQHandler+0x4ec>
 8012b42:	e0d8      	b.n	8012cf6 <HAL_DMA_IRQHandler+0x69e>
 8012b44:	4b3b      	ldr	r3, [pc, #236]	; (8012c34 <HAL_DMA_IRQHandler+0x5dc>)
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d05d      	beq.n	8012c06 <HAL_DMA_IRQHandler+0x5ae>
 8012b4a:	2380      	movs	r3, #128	; 0x80
 8012b4c:	029b      	lsls	r3, r3, #10
 8012b4e:	e078      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012b50:	2240      	movs	r2, #64	; 0x40
 8012b52:	e7be      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b54:	2280      	movs	r2, #128	; 0x80
 8012b56:	00d2      	lsls	r2, r2, #3
 8012b58:	e7bb      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b5a:	2280      	movs	r2, #128	; 0x80
 8012b5c:	01d2      	lsls	r2, r2, #7
 8012b5e:	e7b8      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b60:	2280      	movs	r2, #128	; 0x80
 8012b62:	02d2      	lsls	r2, r2, #11
 8012b64:	e7b5      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b66:	2280      	movs	r2, #128	; 0x80
 8012b68:	03d2      	lsls	r2, r2, #15
 8012b6a:	e7b2      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b6c:	2280      	movs	r2, #128	; 0x80
 8012b6e:	04d2      	lsls	r2, r2, #19
 8012b70:	e7af      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b72:	2204      	movs	r2, #4
 8012b74:	e7ad      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b76:	2240      	movs	r2, #64	; 0x40
 8012b78:	e7ab      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b7a:	2280      	movs	r2, #128	; 0x80
 8012b7c:	00d2      	lsls	r2, r2, #3
 8012b7e:	e7a8      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x47a>
 8012b80:	4a23      	ldr	r2, [pc, #140]	; (8012c10 <HAL_DMA_IRQHandler+0x5b8>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d023      	beq.n	8012bce <HAL_DMA_IRQHandler+0x576>
 8012b86:	4a23      	ldr	r2, [pc, #140]	; (8012c14 <HAL_DMA_IRQHandler+0x5bc>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d024      	beq.n	8012bd6 <HAL_DMA_IRQHandler+0x57e>
 8012b8c:	4a22      	ldr	r2, [pc, #136]	; (8012c18 <HAL_DMA_IRQHandler+0x5c0>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d023      	beq.n	8012bda <HAL_DMA_IRQHandler+0x582>
 8012b92:	4a22      	ldr	r2, [pc, #136]	; (8012c1c <HAL_DMA_IRQHandler+0x5c4>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d023      	beq.n	8012be0 <HAL_DMA_IRQHandler+0x588>
 8012b98:	4a21      	ldr	r2, [pc, #132]	; (8012c20 <HAL_DMA_IRQHandler+0x5c8>)
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d023      	beq.n	8012be6 <HAL_DMA_IRQHandler+0x58e>
 8012b9e:	4a21      	ldr	r2, [pc, #132]	; (8012c24 <HAL_DMA_IRQHandler+0x5cc>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d023      	beq.n	8012bec <HAL_DMA_IRQHandler+0x594>
 8012ba4:	4a19      	ldr	r2, [pc, #100]	; (8012c0c <HAL_DMA_IRQHandler+0x5b4>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d023      	beq.n	8012bf2 <HAL_DMA_IRQHandler+0x59a>
 8012baa:	4a1f      	ldr	r2, [pc, #124]	; (8012c28 <HAL_DMA_IRQHandler+0x5d0>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d023      	beq.n	8012bf8 <HAL_DMA_IRQHandler+0x5a0>
 8012bb0:	4a1e      	ldr	r2, [pc, #120]	; (8012c2c <HAL_DMA_IRQHandler+0x5d4>)
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d022      	beq.n	8012bfc <HAL_DMA_IRQHandler+0x5a4>
 8012bb6:	4a1e      	ldr	r2, [pc, #120]	; (8012c30 <HAL_DMA_IRQHandler+0x5d8>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d021      	beq.n	8012c00 <HAL_DMA_IRQHandler+0x5a8>
 8012bbc:	4a1d      	ldr	r2, [pc, #116]	; (8012c34 <HAL_DMA_IRQHandler+0x5dc>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d002      	beq.n	8012bc8 <HAL_DMA_IRQHandler+0x570>
 8012bc2:	2280      	movs	r2, #128	; 0x80
 8012bc4:	02d2      	lsls	r2, r2, #11
 8012bc6:	e003      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bc8:	2280      	movs	r2, #128	; 0x80
 8012bca:	01d2      	lsls	r2, r2, #7
 8012bcc:	e000      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bce:	2204      	movs	r2, #4
 8012bd0:	4b19      	ldr	r3, [pc, #100]	; (8012c38 <HAL_DMA_IRQHandler+0x5e0>)
 8012bd2:	605a      	str	r2, [r3, #4]
 8012bd4:	e77f      	b.n	8012ad6 <HAL_DMA_IRQHandler+0x47e>
 8012bd6:	2240      	movs	r2, #64	; 0x40
 8012bd8:	e7fa      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bda:	2280      	movs	r2, #128	; 0x80
 8012bdc:	00d2      	lsls	r2, r2, #3
 8012bde:	e7f7      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012be0:	2280      	movs	r2, #128	; 0x80
 8012be2:	01d2      	lsls	r2, r2, #7
 8012be4:	e7f4      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012be6:	2280      	movs	r2, #128	; 0x80
 8012be8:	02d2      	lsls	r2, r2, #11
 8012bea:	e7f1      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bec:	2280      	movs	r2, #128	; 0x80
 8012bee:	03d2      	lsls	r2, r2, #15
 8012bf0:	e7ee      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bf2:	2280      	movs	r2, #128	; 0x80
 8012bf4:	04d2      	lsls	r2, r2, #19
 8012bf6:	e7eb      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bf8:	2204      	movs	r2, #4
 8012bfa:	e7e9      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012bfc:	2240      	movs	r2, #64	; 0x40
 8012bfe:	e7e7      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
 8012c00:	2280      	movs	r2, #128	; 0x80
 8012c02:	00d2      	lsls	r2, r2, #3
 8012c04:	e7e4      	b.n	8012bd0 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012c06:	2380      	movs	r3, #128	; 0x80
 8012c08:	019b      	lsls	r3, r3, #6
 8012c0a:	e01a      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012c0c:	40020080 	.word	0x40020080
 8012c10:	40020008 	.word	0x40020008
 8012c14:	4002001c 	.word	0x4002001c
 8012c18:	40020030 	.word	0x40020030
 8012c1c:	40020044 	.word	0x40020044
 8012c20:	40020058 	.word	0x40020058
 8012c24:	4002006c 	.word	0x4002006c
 8012c28:	40020408 	.word	0x40020408
 8012c2c:	4002041c 	.word	0x4002041c
 8012c30:	40020430 	.word	0x40020430
 8012c34:	40020444 	.word	0x40020444
 8012c38:	40020000 	.word	0x40020000
 8012c3c:	40020400 	.word	0x40020400
 8012c40:	2302      	movs	r3, #2
 8012c42:	400b      	ands	r3, r1
 8012c44:	1e59      	subs	r1, r3, #1
 8012c46:	418b      	sbcs	r3, r1
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d100      	bne.n	8012c50 <HAL_DMA_IRQHandler+0x5f8>
 8012c4e:	e0af      	b.n	8012db0 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012c50:	6813      	ldr	r3, [r2, #0]
 8012c52:	079b      	lsls	r3, r3, #30
 8012c54:	d400      	bmi.n	8012c58 <HAL_DMA_IRQHandler+0x600>
 8012c56:	e0ab      	b.n	8012db0 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8012c58:	6813      	ldr	r3, [r2, #0]
 8012c5a:	069b      	lsls	r3, r3, #26
 8012c5c:	d403      	bmi.n	8012c66 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8012c5e:	6813      	ldr	r3, [r2, #0]
 8012c60:	2102      	movs	r1, #2
 8012c62:	438b      	bics	r3, r1
 8012c64:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	4a7f      	ldr	r2, [pc, #508]	; (8012e68 <HAL_DMA_IRQHandler+0x810>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d800      	bhi.n	8012c70 <HAL_DMA_IRQHandler+0x618>
 8012c6e:	e0b8      	b.n	8012de2 <HAL_DMA_IRQHandler+0x78a>
 8012c70:	4a7e      	ldr	r2, [pc, #504]	; (8012e6c <HAL_DMA_IRQHandler+0x814>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d100      	bne.n	8012c78 <HAL_DMA_IRQHandler+0x620>
 8012c76:	e08b      	b.n	8012d90 <HAL_DMA_IRQHandler+0x738>
 8012c78:	4a7d      	ldr	r2, [pc, #500]	; (8012e70 <HAL_DMA_IRQHandler+0x818>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d100      	bne.n	8012c80 <HAL_DMA_IRQHandler+0x628>
 8012c7e:	e098      	b.n	8012db2 <HAL_DMA_IRQHandler+0x75a>
 8012c80:	4a7c      	ldr	r2, [pc, #496]	; (8012e74 <HAL_DMA_IRQHandler+0x81c>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d100      	bne.n	8012c88 <HAL_DMA_IRQHandler+0x630>
 8012c86:	e096      	b.n	8012db6 <HAL_DMA_IRQHandler+0x75e>
 8012c88:	4a7b      	ldr	r2, [pc, #492]	; (8012e78 <HAL_DMA_IRQHandler+0x820>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d100      	bne.n	8012c90 <HAL_DMA_IRQHandler+0x638>
 8012c8e:	e095      	b.n	8012dbc <HAL_DMA_IRQHandler+0x764>
 8012c90:	4a7a      	ldr	r2, [pc, #488]	; (8012e7c <HAL_DMA_IRQHandler+0x824>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d100      	bne.n	8012c98 <HAL_DMA_IRQHandler+0x640>
 8012c96:	e094      	b.n	8012dc2 <HAL_DMA_IRQHandler+0x76a>
 8012c98:	4a79      	ldr	r2, [pc, #484]	; (8012e80 <HAL_DMA_IRQHandler+0x828>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d100      	bne.n	8012ca0 <HAL_DMA_IRQHandler+0x648>
 8012c9e:	e093      	b.n	8012dc8 <HAL_DMA_IRQHandler+0x770>
 8012ca0:	4a71      	ldr	r2, [pc, #452]	; (8012e68 <HAL_DMA_IRQHandler+0x810>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d100      	bne.n	8012ca8 <HAL_DMA_IRQHandler+0x650>
 8012ca6:	e092      	b.n	8012dce <HAL_DMA_IRQHandler+0x776>
 8012ca8:	4a76      	ldr	r2, [pc, #472]	; (8012e84 <HAL_DMA_IRQHandler+0x82c>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d100      	bne.n	8012cb0 <HAL_DMA_IRQHandler+0x658>
 8012cae:	e091      	b.n	8012dd4 <HAL_DMA_IRQHandler+0x77c>
 8012cb0:	4a75      	ldr	r2, [pc, #468]	; (8012e88 <HAL_DMA_IRQHandler+0x830>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d100      	bne.n	8012cb8 <HAL_DMA_IRQHandler+0x660>
 8012cb6:	e08f      	b.n	8012dd8 <HAL_DMA_IRQHandler+0x780>
 8012cb8:	4a74      	ldr	r2, [pc, #464]	; (8012e8c <HAL_DMA_IRQHandler+0x834>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d100      	bne.n	8012cc0 <HAL_DMA_IRQHandler+0x668>
 8012cbe:	e08d      	b.n	8012ddc <HAL_DMA_IRQHandler+0x784>
 8012cc0:	4a73      	ldr	r2, [pc, #460]	; (8012e90 <HAL_DMA_IRQHandler+0x838>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d061      	beq.n	8012d8a <HAL_DMA_IRQHandler+0x732>
 8012cc6:	2280      	movs	r2, #128	; 0x80
 8012cc8:	0292      	lsls	r2, r2, #10
 8012cca:	e062      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012ccc:	2320      	movs	r3, #32
 8012cce:	e7b8      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cd0:	2380      	movs	r3, #128	; 0x80
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	e7b5      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cd6:	2380      	movs	r3, #128	; 0x80
 8012cd8:	019b      	lsls	r3, r3, #6
 8012cda:	e7b2      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cdc:	2380      	movs	r3, #128	; 0x80
 8012cde:	029b      	lsls	r3, r3, #10
 8012ce0:	e7af      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012ce2:	2380      	movs	r3, #128	; 0x80
 8012ce4:	039b      	lsls	r3, r3, #14
 8012ce6:	e7ac      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012ce8:	2380      	movs	r3, #128	; 0x80
 8012cea:	049b      	lsls	r3, r3, #18
 8012cec:	e7a9      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	e7a7      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cf2:	2320      	movs	r3, #32
 8012cf4:	e7a5      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cf6:	2380      	movs	r3, #128	; 0x80
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	e7a2      	b.n	8012c42 <HAL_DMA_IRQHandler+0x5ea>
 8012cfc:	4b65      	ldr	r3, [pc, #404]	; (8012e94 <HAL_DMA_IRQHandler+0x83c>)
 8012cfe:	6819      	ldr	r1, [r3, #0]
 8012d00:	4b5a      	ldr	r3, [pc, #360]	; (8012e6c <HAL_DMA_IRQHandler+0x814>)
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d023      	beq.n	8012d4e <HAL_DMA_IRQHandler+0x6f6>
 8012d06:	4b5a      	ldr	r3, [pc, #360]	; (8012e70 <HAL_DMA_IRQHandler+0x818>)
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d026      	beq.n	8012d5a <HAL_DMA_IRQHandler+0x702>
 8012d0c:	4b59      	ldr	r3, [pc, #356]	; (8012e74 <HAL_DMA_IRQHandler+0x81c>)
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d025      	beq.n	8012d5e <HAL_DMA_IRQHandler+0x706>
 8012d12:	4b59      	ldr	r3, [pc, #356]	; (8012e78 <HAL_DMA_IRQHandler+0x820>)
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d025      	beq.n	8012d64 <HAL_DMA_IRQHandler+0x70c>
 8012d18:	4b58      	ldr	r3, [pc, #352]	; (8012e7c <HAL_DMA_IRQHandler+0x824>)
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d025      	beq.n	8012d6a <HAL_DMA_IRQHandler+0x712>
 8012d1e:	4b58      	ldr	r3, [pc, #352]	; (8012e80 <HAL_DMA_IRQHandler+0x828>)
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d025      	beq.n	8012d70 <HAL_DMA_IRQHandler+0x718>
 8012d24:	4b50      	ldr	r3, [pc, #320]	; (8012e68 <HAL_DMA_IRQHandler+0x810>)
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d025      	beq.n	8012d76 <HAL_DMA_IRQHandler+0x71e>
 8012d2a:	4b56      	ldr	r3, [pc, #344]	; (8012e84 <HAL_DMA_IRQHandler+0x82c>)
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d025      	beq.n	8012d7c <HAL_DMA_IRQHandler+0x724>
 8012d30:	4b55      	ldr	r3, [pc, #340]	; (8012e88 <HAL_DMA_IRQHandler+0x830>)
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d024      	beq.n	8012d80 <HAL_DMA_IRQHandler+0x728>
 8012d36:	4b55      	ldr	r3, [pc, #340]	; (8012e8c <HAL_DMA_IRQHandler+0x834>)
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d023      	beq.n	8012d84 <HAL_DMA_IRQHandler+0x72c>
 8012d3c:	4b54      	ldr	r3, [pc, #336]	; (8012e90 <HAL_DMA_IRQHandler+0x838>)
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d002      	beq.n	8012d48 <HAL_DMA_IRQHandler+0x6f0>
 8012d42:	2380      	movs	r3, #128	; 0x80
 8012d44:	029b      	lsls	r3, r3, #10
 8012d46:	e003      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d48:	2380      	movs	r3, #128	; 0x80
 8012d4a:	019b      	lsls	r3, r3, #6
 8012d4c:	e000      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d4e:	2302      	movs	r3, #2
 8012d50:	400b      	ands	r3, r1
 8012d52:	1e59      	subs	r1, r3, #1
 8012d54:	418b      	sbcs	r3, r1
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	e777      	b.n	8012c4a <HAL_DMA_IRQHandler+0x5f2>
 8012d5a:	2320      	movs	r3, #32
 8012d5c:	e7f8      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d5e:	2380      	movs	r3, #128	; 0x80
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	e7f5      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d64:	2380      	movs	r3, #128	; 0x80
 8012d66:	019b      	lsls	r3, r3, #6
 8012d68:	e7f2      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d6a:	2380      	movs	r3, #128	; 0x80
 8012d6c:	029b      	lsls	r3, r3, #10
 8012d6e:	e7ef      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d70:	2380      	movs	r3, #128	; 0x80
 8012d72:	039b      	lsls	r3, r3, #14
 8012d74:	e7ec      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d76:	2380      	movs	r3, #128	; 0x80
 8012d78:	049b      	lsls	r3, r3, #18
 8012d7a:	e7e9      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d7c:	2302      	movs	r3, #2
 8012d7e:	e7e7      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d80:	2320      	movs	r3, #32
 8012d82:	e7e5      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
 8012d84:	2380      	movs	r3, #128	; 0x80
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	e7e2      	b.n	8012d50 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012d8a:	2280      	movs	r2, #128	; 0x80
 8012d8c:	0192      	lsls	r2, r2, #6
 8012d8e:	e000      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012d90:	2202      	movs	r2, #2
 8012d92:	4b41      	ldr	r3, [pc, #260]	; (8012e98 <HAL_DMA_IRQHandler+0x840>)
 8012d94:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8012d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d98:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8012d9a:	2321      	movs	r3, #33	; 0x21
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8012da0:	3b01      	subs	r3, #1
 8012da2:	2200      	movs	r2, #0
 8012da4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d001      	beq.n	8012db0 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8012dac:	0020      	movs	r0, r4
 8012dae:	4798      	blx	r3
}  
 8012db0:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012db2:	2220      	movs	r2, #32
 8012db4:	e7ed      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012db6:	2280      	movs	r2, #128	; 0x80
 8012db8:	0092      	lsls	r2, r2, #2
 8012dba:	e7ea      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dbc:	2280      	movs	r2, #128	; 0x80
 8012dbe:	0192      	lsls	r2, r2, #6
 8012dc0:	e7e7      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dc2:	2280      	movs	r2, #128	; 0x80
 8012dc4:	0292      	lsls	r2, r2, #10
 8012dc6:	e7e4      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dc8:	2280      	movs	r2, #128	; 0x80
 8012dca:	0392      	lsls	r2, r2, #14
 8012dcc:	e7e1      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dce:	2280      	movs	r2, #128	; 0x80
 8012dd0:	0492      	lsls	r2, r2, #18
 8012dd2:	e7de      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	e7dc      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012dd8:	2220      	movs	r2, #32
 8012dda:	e7da      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012ddc:	2280      	movs	r2, #128	; 0x80
 8012dde:	0092      	lsls	r2, r2, #2
 8012de0:	e7d7      	b.n	8012d92 <HAL_DMA_IRQHandler+0x73a>
 8012de2:	4a22      	ldr	r2, [pc, #136]	; (8012e6c <HAL_DMA_IRQHandler+0x814>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d023      	beq.n	8012e30 <HAL_DMA_IRQHandler+0x7d8>
 8012de8:	4a21      	ldr	r2, [pc, #132]	; (8012e70 <HAL_DMA_IRQHandler+0x818>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d024      	beq.n	8012e38 <HAL_DMA_IRQHandler+0x7e0>
 8012dee:	4a21      	ldr	r2, [pc, #132]	; (8012e74 <HAL_DMA_IRQHandler+0x81c>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d023      	beq.n	8012e3c <HAL_DMA_IRQHandler+0x7e4>
 8012df4:	4a20      	ldr	r2, [pc, #128]	; (8012e78 <HAL_DMA_IRQHandler+0x820>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d023      	beq.n	8012e42 <HAL_DMA_IRQHandler+0x7ea>
 8012dfa:	4a20      	ldr	r2, [pc, #128]	; (8012e7c <HAL_DMA_IRQHandler+0x824>)
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	d023      	beq.n	8012e48 <HAL_DMA_IRQHandler+0x7f0>
 8012e00:	4a1f      	ldr	r2, [pc, #124]	; (8012e80 <HAL_DMA_IRQHandler+0x828>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d023      	beq.n	8012e4e <HAL_DMA_IRQHandler+0x7f6>
 8012e06:	4a18      	ldr	r2, [pc, #96]	; (8012e68 <HAL_DMA_IRQHandler+0x810>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d023      	beq.n	8012e54 <HAL_DMA_IRQHandler+0x7fc>
 8012e0c:	4a1d      	ldr	r2, [pc, #116]	; (8012e84 <HAL_DMA_IRQHandler+0x82c>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d023      	beq.n	8012e5a <HAL_DMA_IRQHandler+0x802>
 8012e12:	4a1d      	ldr	r2, [pc, #116]	; (8012e88 <HAL_DMA_IRQHandler+0x830>)
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d022      	beq.n	8012e5e <HAL_DMA_IRQHandler+0x806>
 8012e18:	4a1c      	ldr	r2, [pc, #112]	; (8012e8c <HAL_DMA_IRQHandler+0x834>)
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d021      	beq.n	8012e62 <HAL_DMA_IRQHandler+0x80a>
 8012e1e:	4a1c      	ldr	r2, [pc, #112]	; (8012e90 <HAL_DMA_IRQHandler+0x838>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d002      	beq.n	8012e2a <HAL_DMA_IRQHandler+0x7d2>
 8012e24:	2280      	movs	r2, #128	; 0x80
 8012e26:	0292      	lsls	r2, r2, #10
 8012e28:	e003      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e2a:	2280      	movs	r2, #128	; 0x80
 8012e2c:	0192      	lsls	r2, r2, #6
 8012e2e:	e000      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e30:	2202      	movs	r2, #2
 8012e32:	4b18      	ldr	r3, [pc, #96]	; (8012e94 <HAL_DMA_IRQHandler+0x83c>)
 8012e34:	605a      	str	r2, [r3, #4]
 8012e36:	e7ae      	b.n	8012d96 <HAL_DMA_IRQHandler+0x73e>
 8012e38:	2220      	movs	r2, #32
 8012e3a:	e7fa      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e3c:	2280      	movs	r2, #128	; 0x80
 8012e3e:	0092      	lsls	r2, r2, #2
 8012e40:	e7f7      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e42:	2280      	movs	r2, #128	; 0x80
 8012e44:	0192      	lsls	r2, r2, #6
 8012e46:	e7f4      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e48:	2280      	movs	r2, #128	; 0x80
 8012e4a:	0292      	lsls	r2, r2, #10
 8012e4c:	e7f1      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e4e:	2280      	movs	r2, #128	; 0x80
 8012e50:	0392      	lsls	r2, r2, #14
 8012e52:	e7ee      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e54:	2280      	movs	r2, #128	; 0x80
 8012e56:	0492      	lsls	r2, r2, #18
 8012e58:	e7eb      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	e7e9      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e5e:	2220      	movs	r2, #32
 8012e60:	e7e7      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e62:	2280      	movs	r2, #128	; 0x80
 8012e64:	0092      	lsls	r2, r2, #2
 8012e66:	e7e4      	b.n	8012e32 <HAL_DMA_IRQHandler+0x7da>
 8012e68:	40020080 	.word	0x40020080
 8012e6c:	40020008 	.word	0x40020008
 8012e70:	4002001c 	.word	0x4002001c
 8012e74:	40020030 	.word	0x40020030
 8012e78:	40020044 	.word	0x40020044
 8012e7c:	40020058 	.word	0x40020058
 8012e80:	4002006c 	.word	0x4002006c
 8012e84:	40020408 	.word	0x40020408
 8012e88:	4002041c 	.word	0x4002041c
 8012e8c:	40020430 	.word	0x40020430
 8012e90:	40020444 	.word	0x40020444
 8012e94:	40020000 	.word	0x40020000
 8012e98:	40020400 	.word	0x40020400

08012e9c <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012e9c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012e9e:	4b05      	ldr	r3, [pc, #20]	; (8012eb4 <FLASH_Program_HalfWord+0x18>)
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012ea4:	4a04      	ldr	r2, [pc, #16]	; (8012eb8 <FLASH_Program_HalfWord+0x1c>)
 8012ea6:	6913      	ldr	r3, [r2, #16]
 8012ea8:	2401      	movs	r4, #1
 8012eaa:	4323      	orrs	r3, r4
 8012eac:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8012eae:	8001      	strh	r1, [r0, #0]
}
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	46c0      	nop			; (mov r8, r8)
 8012eb4:	200072b0 	.word	0x200072b0
 8012eb8:	40022000 	.word	0x40022000

08012ebc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8012ebc:	4b0a      	ldr	r3, [pc, #40]	; (8012ee8 <FLASH_SetErrorCode+0x2c>)
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	06db      	lsls	r3, r3, #27
 8012ec2:	d504      	bpl.n	8012ece <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012ec4:	4a09      	ldr	r2, [pc, #36]	; (8012eec <FLASH_SetErrorCode+0x30>)
 8012ec6:	69d3      	ldr	r3, [r2, #28]
 8012ec8:	2102      	movs	r1, #2
 8012eca:	430b      	orrs	r3, r1
 8012ecc:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012ece:	4b06      	ldr	r3, [pc, #24]	; (8012ee8 <FLASH_SetErrorCode+0x2c>)
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	075b      	lsls	r3, r3, #29
 8012ed4:	d504      	bpl.n	8012ee0 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8012ed6:	4a05      	ldr	r2, [pc, #20]	; (8012eec <FLASH_SetErrorCode+0x30>)
 8012ed8:	69d3      	ldr	r3, [r2, #28]
 8012eda:	2101      	movs	r1, #1
 8012edc:	430b      	orrs	r3, r1
 8012ede:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8012ee0:	4b01      	ldr	r3, [pc, #4]	; (8012ee8 <FLASH_SetErrorCode+0x2c>)
 8012ee2:	2214      	movs	r2, #20
 8012ee4:	60da      	str	r2, [r3, #12]
}  
 8012ee6:	4770      	bx	lr
 8012ee8:	40022000 	.word	0x40022000
 8012eec:	200072b0 	.word	0x200072b0

08012ef0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8012ef0:	4b06      	ldr	r3, [pc, #24]	; (8012f0c <HAL_FLASH_Unlock+0x1c>)
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	061b      	lsls	r3, r3, #24
 8012ef6:	d506      	bpl.n	8012f06 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012ef8:	4b04      	ldr	r3, [pc, #16]	; (8012f0c <HAL_FLASH_Unlock+0x1c>)
 8012efa:	4a05      	ldr	r2, [pc, #20]	; (8012f10 <HAL_FLASH_Unlock+0x20>)
 8012efc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012efe:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <HAL_FLASH_Unlock+0x24>)
 8012f00:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8012f02:	2000      	movs	r0, #0
}
 8012f04:	4770      	bx	lr
    return HAL_ERROR;
 8012f06:	2001      	movs	r0, #1
 8012f08:	e7fc      	b.n	8012f04 <HAL_FLASH_Unlock+0x14>
 8012f0a:	46c0      	nop			; (mov r8, r8)
 8012f0c:	40022000 	.word	0x40022000
 8012f10:	45670123 	.word	0x45670123
 8012f14:	cdef89ab 	.word	0xcdef89ab

08012f18 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012f18:	4a03      	ldr	r2, [pc, #12]	; (8012f28 <HAL_FLASH_Lock+0x10>)
 8012f1a:	6913      	ldr	r3, [r2, #16]
 8012f1c:	2180      	movs	r1, #128	; 0x80
 8012f1e:	430b      	orrs	r3, r1
 8012f20:	6113      	str	r3, [r2, #16]
}
 8012f22:	2000      	movs	r0, #0
 8012f24:	4770      	bx	lr
 8012f26:	46c0      	nop			; (mov r8, r8)
 8012f28:	40022000 	.word	0x40022000

08012f2c <FLASH_WaitForLastOperation>:
{
 8012f2c:	b570      	push	{r4, r5, r6, lr}
 8012f2e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8012f30:	f7fe fe36 	bl	8011ba0 <HAL_GetTick>
 8012f34:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012f36:	4b13      	ldr	r3, [pc, #76]	; (8012f84 <FLASH_WaitForLastOperation+0x58>)
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	07db      	lsls	r3, r3, #31
 8012f3c:	d50a      	bpl.n	8012f54 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8012f3e:	1c63      	adds	r3, r4, #1
 8012f40:	d0f9      	beq.n	8012f36 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012f42:	2c00      	cmp	r4, #0
 8012f44:	d019      	beq.n	8012f7a <FLASH_WaitForLastOperation+0x4e>
 8012f46:	f7fe fe2b 	bl	8011ba0 <HAL_GetTick>
 8012f4a:	1b40      	subs	r0, r0, r5
 8012f4c:	42a0      	cmp	r0, r4
 8012f4e:	d9f2      	bls.n	8012f36 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8012f50:	2003      	movs	r0, #3
 8012f52:	e011      	b.n	8012f78 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012f54:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <FLASH_WaitForLastOperation+0x58>)
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	069b      	lsls	r3, r3, #26
 8012f5a:	d502      	bpl.n	8012f62 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012f5c:	4b09      	ldr	r3, [pc, #36]	; (8012f84 <FLASH_WaitForLastOperation+0x58>)
 8012f5e:	2220      	movs	r2, #32
 8012f60:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012f62:	4b08      	ldr	r3, [pc, #32]	; (8012f84 <FLASH_WaitForLastOperation+0x58>)
 8012f64:	68db      	ldr	r3, [r3, #12]
 8012f66:	06db      	lsls	r3, r3, #27
 8012f68:	d403      	bmi.n	8012f72 <FLASH_WaitForLastOperation+0x46>
 8012f6a:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <FLASH_WaitForLastOperation+0x58>)
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	075b      	lsls	r3, r3, #29
 8012f70:	d505      	bpl.n	8012f7e <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8012f72:	f7ff ffa3 	bl	8012ebc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012f76:	2001      	movs	r0, #1
}
 8012f78:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8012f7a:	2003      	movs	r0, #3
 8012f7c:	e7fc      	b.n	8012f78 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8012f7e:	2000      	movs	r0, #0
 8012f80:	e7fa      	b.n	8012f78 <FLASH_WaitForLastOperation+0x4c>
 8012f82:	46c0      	nop			; (mov r8, r8)
 8012f84:	40022000 	.word	0x40022000

08012f88 <HAL_FLASH_Program>:
{
 8012f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8a:	46c6      	mov	lr, r8
 8012f8c:	b500      	push	{lr}
 8012f8e:	0004      	movs	r4, r0
 8012f90:	000d      	movs	r5, r1
 8012f92:	4690      	mov	r8, r2
 8012f94:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8012f96:	4b21      	ldr	r3, [pc, #132]	; (801301c <HAL_FLASH_Program+0x94>)
 8012f98:	7e1b      	ldrb	r3, [r3, #24]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d03b      	beq.n	8013016 <HAL_FLASH_Program+0x8e>
 8012f9e:	4b1f      	ldr	r3, [pc, #124]	; (801301c <HAL_FLASH_Program+0x94>)
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fa4:	481e      	ldr	r0, [pc, #120]	; (8013020 <HAL_FLASH_Program+0x98>)
 8012fa6:	f7ff ffc1 	bl	8012f2c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d12d      	bne.n	801300a <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012fae:	2c01      	cmp	r4, #1
 8012fb0:	d006      	beq.n	8012fc0 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012fb2:	2c02      	cmp	r4, #2
 8012fb4:	d002      	beq.n	8012fbc <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 8012fb6:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 8012fb8:	2400      	movs	r4, #0
 8012fba:	e01b      	b.n	8012ff4 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 8012fbc:	2702      	movs	r7, #2
 8012fbe:	e7fb      	b.n	8012fb8 <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8012fc0:	2701      	movs	r7, #1
 8012fc2:	e7f9      	b.n	8012fb8 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8012fc4:	2220      	movs	r2, #32
 8012fc6:	1ad2      	subs	r2, r2, r3
 8012fc8:	0031      	movs	r1, r6
 8012fca:	4091      	lsls	r1, r2
 8012fcc:	000a      	movs	r2, r1
 8012fce:	4641      	mov	r1, r8
 8012fd0:	40d9      	lsrs	r1, r3
 8012fd2:	4311      	orrs	r1, r2
 8012fd4:	b289      	uxth	r1, r1
 8012fd6:	1940      	adds	r0, r0, r5
 8012fd8:	f7ff ff60 	bl	8012e9c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fdc:	4810      	ldr	r0, [pc, #64]	; (8013020 <HAL_FLASH_Program+0x98>)
 8012fde:	f7ff ffa5 	bl	8012f2c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8012fe2:	4a10      	ldr	r2, [pc, #64]	; (8013024 <HAL_FLASH_Program+0x9c>)
 8012fe4:	6913      	ldr	r3, [r2, #16]
 8012fe6:	2101      	movs	r1, #1
 8012fe8:	438b      	bics	r3, r1
 8012fea:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d10c      	bne.n	801300a <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 8012ff0:	3401      	adds	r4, #1
 8012ff2:	b2e4      	uxtb	r4, r4
 8012ff4:	42bc      	cmp	r4, r7
 8012ff6:	d208      	bcs.n	801300a <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8012ff8:	0060      	lsls	r0, r4, #1
 8012ffa:	0123      	lsls	r3, r4, #4
 8012ffc:	2220      	movs	r2, #32
 8012ffe:	4252      	negs	r2, r2
 8013000:	189a      	adds	r2, r3, r2
 8013002:	d4df      	bmi.n	8012fc4 <HAL_FLASH_Program+0x3c>
 8013004:	0031      	movs	r1, r6
 8013006:	40d1      	lsrs	r1, r2
 8013008:	e7e4      	b.n	8012fd4 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 801300a:	4b04      	ldr	r3, [pc, #16]	; (801301c <HAL_FLASH_Program+0x94>)
 801300c:	2200      	movs	r2, #0
 801300e:	761a      	strb	r2, [r3, #24]
}
 8013010:	bc04      	pop	{r2}
 8013012:	4690      	mov	r8, r2
 8013014:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8013016:	2002      	movs	r0, #2
 8013018:	e7fa      	b.n	8013010 <HAL_FLASH_Program+0x88>
 801301a:	46c0      	nop			; (mov r8, r8)
 801301c:	200072b0 	.word	0x200072b0
 8013020:	0000c350 	.word	0x0000c350
 8013024:	40022000 	.word	0x40022000

08013028 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013028:	4b06      	ldr	r3, [pc, #24]	; (8013044 <FLASH_MassErase+0x1c>)
 801302a:	2200      	movs	r2, #0
 801302c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801302e:	4b06      	ldr	r3, [pc, #24]	; (8013048 <FLASH_MassErase+0x20>)
 8013030:	691a      	ldr	r2, [r3, #16]
 8013032:	2104      	movs	r1, #4
 8013034:	430a      	orrs	r2, r1
 8013036:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8013038:	691a      	ldr	r2, [r3, #16]
 801303a:	313c      	adds	r1, #60	; 0x3c
 801303c:	430a      	orrs	r2, r1
 801303e:	611a      	str	r2, [r3, #16]
}
 8013040:	4770      	bx	lr
 8013042:	46c0      	nop			; (mov r8, r8)
 8013044:	200072b0 	.word	0x200072b0
 8013048:	40022000 	.word	0x40022000

0801304c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801304c:	4b06      	ldr	r3, [pc, #24]	; (8013068 <FLASH_PageErase+0x1c>)
 801304e:	2200      	movs	r2, #0
 8013050:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8013052:	4b06      	ldr	r3, [pc, #24]	; (801306c <FLASH_PageErase+0x20>)
 8013054:	691a      	ldr	r2, [r3, #16]
 8013056:	2102      	movs	r1, #2
 8013058:	430a      	orrs	r2, r1
 801305a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801305c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801305e:	691a      	ldr	r2, [r3, #16]
 8013060:	313e      	adds	r1, #62	; 0x3e
 8013062:	430a      	orrs	r2, r1
 8013064:	611a      	str	r2, [r3, #16]
}
 8013066:	4770      	bx	lr
 8013068:	200072b0 	.word	0x200072b0
 801306c:	40022000 	.word	0x40022000

08013070 <HAL_FLASHEx_Erase>:
{
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	0005      	movs	r5, r0
 8013074:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8013076:	4b24      	ldr	r3, [pc, #144]	; (8013108 <HAL_FLASHEx_Erase+0x98>)
 8013078:	7e1b      	ldrb	r3, [r3, #24]
 801307a:	2b01      	cmp	r3, #1
 801307c:	d041      	beq.n	8013102 <HAL_FLASHEx_Erase+0x92>
 801307e:	4b22      	ldr	r3, [pc, #136]	; (8013108 <HAL_FLASHEx_Erase+0x98>)
 8013080:	2201      	movs	r2, #1
 8013082:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8013084:	6803      	ldr	r3, [r0, #0]
 8013086:	2b01      	cmp	r3, #1
 8013088:	d022      	beq.n	80130d0 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801308a:	4820      	ldr	r0, [pc, #128]	; (801310c <HAL_FLASHEx_Erase+0x9c>)
 801308c:	f7ff ff4e 	bl	8012f2c <FLASH_WaitForLastOperation>
 8013090:	2800      	cmp	r0, #0
 8013092:	d131      	bne.n	80130f8 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8013094:	2301      	movs	r3, #1
 8013096:	425b      	negs	r3, r3
 8013098:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 801309a:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801309c:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801309e:	68ab      	ldr	r3, [r5, #8]
 80130a0:	02db      	lsls	r3, r3, #11
 80130a2:	686a      	ldr	r2, [r5, #4]
 80130a4:	4694      	mov	ip, r2
 80130a6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80130a8:	42a3      	cmp	r3, r4
 80130aa:	d926      	bls.n	80130fa <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 80130ac:	0020      	movs	r0, r4
 80130ae:	f7ff ffcd 	bl	801304c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80130b2:	4816      	ldr	r0, [pc, #88]	; (801310c <HAL_FLASHEx_Erase+0x9c>)
 80130b4:	f7ff ff3a 	bl	8012f2c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80130b8:	4a15      	ldr	r2, [pc, #84]	; (8013110 <HAL_FLASHEx_Erase+0xa0>)
 80130ba:	6913      	ldr	r3, [r2, #16]
 80130bc:	2102      	movs	r1, #2
 80130be:	438b      	bics	r3, r1
 80130c0:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d116      	bne.n	80130f4 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 80130c6:	2380      	movs	r3, #128	; 0x80
 80130c8:	011b      	lsls	r3, r3, #4
 80130ca:	469c      	mov	ip, r3
 80130cc:	4464      	add	r4, ip
 80130ce:	e7e6      	b.n	801309e <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80130d0:	480e      	ldr	r0, [pc, #56]	; (801310c <HAL_FLASHEx_Erase+0x9c>)
 80130d2:	f7ff ff2b 	bl	8012f2c <FLASH_WaitForLastOperation>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d001      	beq.n	80130de <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80130da:	2001      	movs	r0, #1
 80130dc:	e00d      	b.n	80130fa <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80130de:	f7ff ffa3 	bl	8013028 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80130e2:	480a      	ldr	r0, [pc, #40]	; (801310c <HAL_FLASHEx_Erase+0x9c>)
 80130e4:	f7ff ff22 	bl	8012f2c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80130e8:	4a09      	ldr	r2, [pc, #36]	; (8013110 <HAL_FLASHEx_Erase+0xa0>)
 80130ea:	6913      	ldr	r3, [r2, #16]
 80130ec:	2104      	movs	r1, #4
 80130ee:	438b      	bics	r3, r1
 80130f0:	6113      	str	r3, [r2, #16]
 80130f2:	e002      	b.n	80130fa <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80130f4:	6034      	str	r4, [r6, #0]
            break;
 80130f6:	e000      	b.n	80130fa <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80130f8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80130fa:	4b03      	ldr	r3, [pc, #12]	; (8013108 <HAL_FLASHEx_Erase+0x98>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	761a      	strb	r2, [r3, #24]
}
 8013100:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8013102:	2002      	movs	r0, #2
 8013104:	e7fc      	b.n	8013100 <HAL_FLASHEx_Erase+0x90>
 8013106:	46c0      	nop			; (mov r8, r8)
 8013108:	200072b0 	.word	0x200072b0
 801310c:	0000c350 	.word	0x0000c350
 8013110:	40022000 	.word	0x40022000

08013114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8013114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013116:	46c6      	mov	lr, r8
 8013118:	b500      	push	{lr}
 801311a:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 801311c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801311e:	e033      	b.n	8013188 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8013120:	2604      	movs	r6, #4
 8013122:	e000      	b.n	8013126 <HAL_GPIO_Init+0x12>
 8013124:	2600      	movs	r6, #0
 8013126:	40ae      	lsls	r6, r5
 8013128:	0035      	movs	r5, r6
 801312a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 801312c:	3402      	adds	r4, #2
 801312e:	00a4      	lsls	r4, r4, #2
 8013130:	4e55      	ldr	r6, [pc, #340]	; (8013288 <HAL_GPIO_Init+0x174>)
 8013132:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013134:	4c55      	ldr	r4, [pc, #340]	; (801328c <HAL_GPIO_Init+0x178>)
 8013136:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8013138:	43d4      	mvns	r4, r2
 801313a:	002e      	movs	r6, r5
 801313c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801313e:	684f      	ldr	r7, [r1, #4]
 8013140:	03ff      	lsls	r7, r7, #15
 8013142:	d501      	bpl.n	8013148 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8013144:	4315      	orrs	r5, r2
 8013146:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8013148:	4d50      	ldr	r5, [pc, #320]	; (801328c <HAL_GPIO_Init+0x178>)
 801314a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 801314c:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801314e:	002e      	movs	r6, r5
 8013150:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013152:	684f      	ldr	r7, [r1, #4]
 8013154:	03bf      	lsls	r7, r7, #14
 8013156:	d501      	bpl.n	801315c <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8013158:	4315      	orrs	r5, r2
 801315a:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 801315c:	4d4b      	ldr	r5, [pc, #300]	; (801328c <HAL_GPIO_Init+0x178>)
 801315e:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013160:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8013162:	002e      	movs	r6, r5
 8013164:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013166:	684f      	ldr	r7, [r1, #4]
 8013168:	02ff      	lsls	r7, r7, #11
 801316a:	d501      	bpl.n	8013170 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 801316c:	4315      	orrs	r5, r2
 801316e:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8013170:	4d46      	ldr	r5, [pc, #280]	; (801328c <HAL_GPIO_Init+0x178>)
 8013172:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8013174:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8013176:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013178:	684e      	ldr	r6, [r1, #4]
 801317a:	02b6      	lsls	r6, r6, #10
 801317c:	d501      	bpl.n	8013182 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 801317e:	432a      	orrs	r2, r5
 8013180:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8013182:	4a42      	ldr	r2, [pc, #264]	; (801328c <HAL_GPIO_Init+0x178>)
 8013184:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8013186:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8013188:	680a      	ldr	r2, [r1, #0]
 801318a:	0014      	movs	r4, r2
 801318c:	40dc      	lsrs	r4, r3
 801318e:	d076      	beq.n	801327e <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8013190:	2401      	movs	r4, #1
 8013192:	409c      	lsls	r4, r3
 8013194:	4022      	ands	r2, r4
    if(iocurrent)
 8013196:	d0f6      	beq.n	8013186 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8013198:	684c      	ldr	r4, [r1, #4]
 801319a:	2c02      	cmp	r4, #2
 801319c:	d001      	beq.n	80131a2 <HAL_GPIO_Init+0x8e>
 801319e:	2c12      	cmp	r4, #18
 80131a0:	d10e      	bne.n	80131c0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80131a2:	08dc      	lsrs	r4, r3, #3
 80131a4:	3408      	adds	r4, #8
 80131a6:	00a4      	lsls	r4, r4, #2
 80131a8:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80131aa:	2507      	movs	r5, #7
 80131ac:	401d      	ands	r5, r3
 80131ae:	00ad      	lsls	r5, r5, #2
 80131b0:	270f      	movs	r7, #15
 80131b2:	40af      	lsls	r7, r5
 80131b4:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80131b6:	690f      	ldr	r7, [r1, #16]
 80131b8:	40af      	lsls	r7, r5
 80131ba:	003d      	movs	r5, r7
 80131bc:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 80131be:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 80131c0:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80131c2:	005e      	lsls	r6, r3, #1
 80131c4:	2403      	movs	r4, #3
 80131c6:	0025      	movs	r5, r4
 80131c8:	40b5      	lsls	r5, r6
 80131ca:	43ed      	mvns	r5, r5
 80131cc:	46a8      	mov	r8, r5
 80131ce:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80131d0:	684d      	ldr	r5, [r1, #4]
 80131d2:	402c      	ands	r4, r5
 80131d4:	40b4      	lsls	r4, r6
 80131d6:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 80131d8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80131da:	684c      	ldr	r4, [r1, #4]
 80131dc:	1e67      	subs	r7, r4, #1
 80131de:	2f01      	cmp	r7, #1
 80131e0:	d903      	bls.n	80131ea <HAL_GPIO_Init+0xd6>
 80131e2:	2c11      	cmp	r4, #17
 80131e4:	d001      	beq.n	80131ea <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80131e6:	2c12      	cmp	r4, #18
 80131e8:	d111      	bne.n	801320e <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 80131ea:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80131ec:	4644      	mov	r4, r8
 80131ee:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80131f0:	68cc      	ldr	r4, [r1, #12]
 80131f2:	40b4      	lsls	r4, r6
 80131f4:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80131f6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80131f8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80131fa:	2401      	movs	r4, #1
 80131fc:	0025      	movs	r5, r4
 80131fe:	409d      	lsls	r5, r3
 8013200:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8013202:	684d      	ldr	r5, [r1, #4]
 8013204:	092d      	lsrs	r5, r5, #4
 8013206:	402c      	ands	r4, r5
 8013208:	409c      	lsls	r4, r3
 801320a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 801320c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 801320e:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8013210:	4645      	mov	r5, r8
 8013212:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8013214:	688d      	ldr	r5, [r1, #8]
 8013216:	40b5      	lsls	r5, r6
 8013218:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 801321a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801321c:	684c      	ldr	r4, [r1, #4]
 801321e:	00e4      	lsls	r4, r4, #3
 8013220:	d5b1      	bpl.n	8013186 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013222:	4d1b      	ldr	r5, [pc, #108]	; (8013290 <HAL_GPIO_Init+0x17c>)
 8013224:	69ae      	ldr	r6, [r5, #24]
 8013226:	2401      	movs	r4, #1
 8013228:	4326      	orrs	r6, r4
 801322a:	61ae      	str	r6, [r5, #24]
 801322c:	69ad      	ldr	r5, [r5, #24]
 801322e:	402c      	ands	r4, r5
 8013230:	9401      	str	r4, [sp, #4]
 8013232:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8013234:	089c      	lsrs	r4, r3, #2
 8013236:	1ca5      	adds	r5, r4, #2
 8013238:	00ad      	lsls	r5, r5, #2
 801323a:	4e13      	ldr	r6, [pc, #76]	; (8013288 <HAL_GPIO_Init+0x174>)
 801323c:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801323e:	2603      	movs	r6, #3
 8013240:	401e      	ands	r6, r3
 8013242:	00b5      	lsls	r5, r6, #2
 8013244:	260f      	movs	r6, #15
 8013246:	40ae      	lsls	r6, r5
 8013248:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801324a:	2690      	movs	r6, #144	; 0x90
 801324c:	05f6      	lsls	r6, r6, #23
 801324e:	42b0      	cmp	r0, r6
 8013250:	d100      	bne.n	8013254 <HAL_GPIO_Init+0x140>
 8013252:	e767      	b.n	8013124 <HAL_GPIO_Init+0x10>
 8013254:	4e0f      	ldr	r6, [pc, #60]	; (8013294 <HAL_GPIO_Init+0x180>)
 8013256:	42b0      	cmp	r0, r6
 8013258:	d00b      	beq.n	8013272 <HAL_GPIO_Init+0x15e>
 801325a:	4e0f      	ldr	r6, [pc, #60]	; (8013298 <HAL_GPIO_Init+0x184>)
 801325c:	42b0      	cmp	r0, r6
 801325e:	d00a      	beq.n	8013276 <HAL_GPIO_Init+0x162>
 8013260:	4e0e      	ldr	r6, [pc, #56]	; (801329c <HAL_GPIO_Init+0x188>)
 8013262:	42b0      	cmp	r0, r6
 8013264:	d009      	beq.n	801327a <HAL_GPIO_Init+0x166>
 8013266:	4e0e      	ldr	r6, [pc, #56]	; (80132a0 <HAL_GPIO_Init+0x18c>)
 8013268:	42b0      	cmp	r0, r6
 801326a:	d100      	bne.n	801326e <HAL_GPIO_Init+0x15a>
 801326c:	e758      	b.n	8013120 <HAL_GPIO_Init+0xc>
 801326e:	2605      	movs	r6, #5
 8013270:	e759      	b.n	8013126 <HAL_GPIO_Init+0x12>
 8013272:	2601      	movs	r6, #1
 8013274:	e757      	b.n	8013126 <HAL_GPIO_Init+0x12>
 8013276:	2602      	movs	r6, #2
 8013278:	e755      	b.n	8013126 <HAL_GPIO_Init+0x12>
 801327a:	2603      	movs	r6, #3
 801327c:	e753      	b.n	8013126 <HAL_GPIO_Init+0x12>
  } 
}
 801327e:	b002      	add	sp, #8
 8013280:	bc04      	pop	{r2}
 8013282:	4690      	mov	r8, r2
 8013284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013286:	46c0      	nop			; (mov r8, r8)
 8013288:	40010000 	.word	0x40010000
 801328c:	40010400 	.word	0x40010400
 8013290:	40021000 	.word	0x40021000
 8013294:	48000400 	.word	0x48000400
 8013298:	48000800 	.word	0x48000800
 801329c:	48000c00 	.word	0x48000c00
 80132a0:	48001000 	.word	0x48001000

080132a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80132a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132a6:	46ce      	mov	lr, r9
 80132a8:	4647      	mov	r7, r8
 80132aa:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 80132ac:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80132ae:	e006      	b.n	80132be <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80132b0:	2704      	movs	r7, #4
 80132b2:	e000      	b.n	80132b6 <HAL_GPIO_DeInit+0x12>
 80132b4:	2700      	movs	r7, #0
 80132b6:	40a7      	lsls	r7, r4
 80132b8:	42af      	cmp	r7, r5
 80132ba:	d04e      	beq.n	801335a <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 80132bc:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80132be:	000a      	movs	r2, r1
 80132c0:	40da      	lsrs	r2, r3
 80132c2:	d060      	beq.n	8013386 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1 << position);
 80132c4:	2201      	movs	r2, #1
 80132c6:	409a      	lsls	r2, r3
 80132c8:	400a      	ands	r2, r1
    if (iocurrent)
 80132ca:	d0f7      	beq.n	80132bc <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80132cc:	6805      	ldr	r5, [r0, #0]
 80132ce:	005e      	lsls	r6, r3, #1
 80132d0:	2403      	movs	r4, #3
 80132d2:	46a1      	mov	r9, r4
 80132d4:	0027      	movs	r7, r4
 80132d6:	40b7      	lsls	r7, r6
 80132d8:	43ff      	mvns	r7, r7
 80132da:	403d      	ands	r5, r7
 80132dc:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80132de:	08de      	lsrs	r6, r3, #3
 80132e0:	3608      	adds	r6, #8
 80132e2:	00b6      	lsls	r6, r6, #2
 80132e4:	5834      	ldr	r4, [r6, r0]
 80132e6:	46a0      	mov	r8, r4
 80132e8:	2507      	movs	r5, #7
 80132ea:	401d      	ands	r5, r3
 80132ec:	00ad      	lsls	r5, r5, #2
 80132ee:	240f      	movs	r4, #15
 80132f0:	46a4      	mov	ip, r4
 80132f2:	40ac      	lsls	r4, r5
 80132f4:	0025      	movs	r5, r4
 80132f6:	4644      	mov	r4, r8
 80132f8:	43ac      	bics	r4, r5
 80132fa:	5034      	str	r4, [r6, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80132fc:	6885      	ldr	r5, [r0, #8]
 80132fe:	403d      	ands	r5, r7
 8013300:	6085      	str	r5, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8013302:	6845      	ldr	r5, [r0, #4]
 8013304:	2601      	movs	r6, #1
 8013306:	409e      	lsls	r6, r3
 8013308:	43b5      	bics	r5, r6
 801330a:	6045      	str	r5, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801330c:	68c5      	ldr	r5, [r0, #12]
 801330e:	402f      	ands	r7, r5
 8013310:	60c7      	str	r7, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8013312:	089e      	lsrs	r6, r3, #2
 8013314:	1cb5      	adds	r5, r6, #2
 8013316:	00ad      	lsls	r5, r5, #2
 8013318:	4f1d      	ldr	r7, [pc, #116]	; (8013390 <HAL_GPIO_DeInit+0xec>)
 801331a:	59ed      	ldr	r5, [r5, r7]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801331c:	464c      	mov	r4, r9
 801331e:	401c      	ands	r4, r3
 8013320:	00a4      	lsls	r4, r4, #2
 8013322:	4667      	mov	r7, ip
 8013324:	40a7      	lsls	r7, r4
 8013326:	46bc      	mov	ip, r7
 8013328:	403d      	ands	r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801332a:	2790      	movs	r7, #144	; 0x90
 801332c:	05ff      	lsls	r7, r7, #23
 801332e:	42b8      	cmp	r0, r7
 8013330:	d0c0      	beq.n	80132b4 <HAL_GPIO_DeInit+0x10>
 8013332:	4f18      	ldr	r7, [pc, #96]	; (8013394 <HAL_GPIO_DeInit+0xf0>)
 8013334:	42b8      	cmp	r0, r7
 8013336:	d00a      	beq.n	801334e <HAL_GPIO_DeInit+0xaa>
 8013338:	4f17      	ldr	r7, [pc, #92]	; (8013398 <HAL_GPIO_DeInit+0xf4>)
 801333a:	42b8      	cmp	r0, r7
 801333c:	d009      	beq.n	8013352 <HAL_GPIO_DeInit+0xae>
 801333e:	4f17      	ldr	r7, [pc, #92]	; (801339c <HAL_GPIO_DeInit+0xf8>)
 8013340:	42b8      	cmp	r0, r7
 8013342:	d008      	beq.n	8013356 <HAL_GPIO_DeInit+0xb2>
 8013344:	4f16      	ldr	r7, [pc, #88]	; (80133a0 <HAL_GPIO_DeInit+0xfc>)
 8013346:	42b8      	cmp	r0, r7
 8013348:	d0b2      	beq.n	80132b0 <HAL_GPIO_DeInit+0xc>
 801334a:	2705      	movs	r7, #5
 801334c:	e7b3      	b.n	80132b6 <HAL_GPIO_DeInit+0x12>
 801334e:	2701      	movs	r7, #1
 8013350:	e7b1      	b.n	80132b6 <HAL_GPIO_DeInit+0x12>
 8013352:	2702      	movs	r7, #2
 8013354:	e7af      	b.n	80132b6 <HAL_GPIO_DeInit+0x12>
 8013356:	2703      	movs	r7, #3
 8013358:	e7ad      	b.n	80132b6 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801335a:	4f0d      	ldr	r7, [pc, #52]	; (8013390 <HAL_GPIO_DeInit+0xec>)
 801335c:	1cb4      	adds	r4, r6, #2
 801335e:	00a4      	lsls	r4, r4, #2
 8013360:	59e5      	ldr	r5, [r4, r7]
 8013362:	4666      	mov	r6, ip
 8013364:	43b5      	bics	r5, r6
 8013366:	51e5      	str	r5, [r4, r7]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8013368:	4c0e      	ldr	r4, [pc, #56]	; (80133a4 <HAL_GPIO_DeInit+0x100>)
 801336a:	6825      	ldr	r5, [r4, #0]
 801336c:	43d2      	mvns	r2, r2
 801336e:	4015      	ands	r5, r2
 8013370:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8013372:	6865      	ldr	r5, [r4, #4]
 8013374:	4015      	ands	r5, r2
 8013376:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8013378:	68a5      	ldr	r5, [r4, #8]
 801337a:	4015      	ands	r5, r2
 801337c:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801337e:	68e5      	ldr	r5, [r4, #12]
 8013380:	402a      	ands	r2, r5
 8013382:	60e2      	str	r2, [r4, #12]
 8013384:	e79a      	b.n	80132bc <HAL_GPIO_DeInit+0x18>
  }
}
 8013386:	bc0c      	pop	{r2, r3}
 8013388:	4690      	mov	r8, r2
 801338a:	4699      	mov	r9, r3
 801338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801338e:	46c0      	nop			; (mov r8, r8)
 8013390:	40010000 	.word	0x40010000
 8013394:	48000400 	.word	0x48000400
 8013398:	48000800 	.word	0x48000800
 801339c:	48000c00 	.word	0x48000c00
 80133a0:	48001000 	.word	0x48001000
 80133a4:	40010400 	.word	0x40010400

080133a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80133a8:	6903      	ldr	r3, [r0, #16]
 80133aa:	420b      	tst	r3, r1
 80133ac:	d101      	bne.n	80133b2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80133ae:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 80133b0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80133b2:	2001      	movs	r0, #1
 80133b4:	e7fc      	b.n	80133b0 <HAL_GPIO_ReadPin+0x8>

080133b6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80133b6:	2a00      	cmp	r2, #0
 80133b8:	d101      	bne.n	80133be <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80133ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80133bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80133be:	6181      	str	r1, [r0, #24]
 80133c0:	e7fc      	b.n	80133bc <HAL_GPIO_WritePin+0x6>

080133c2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80133c2:	6943      	ldr	r3, [r0, #20]
 80133c4:	4059      	eors	r1, r3
 80133c6:	6141      	str	r1, [r0, #20]
}
 80133c8:	4770      	bx	lr

080133ca <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80133ca:	4770      	bx	lr

080133cc <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80133cc:	4a03      	ldr	r2, [pc, #12]	; (80133dc <HAL_PWR_EnableBkUpAccess+0x10>)
 80133ce:	6811      	ldr	r1, [r2, #0]
 80133d0:	2380      	movs	r3, #128	; 0x80
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	430b      	orrs	r3, r1
 80133d6:	6013      	str	r3, [r2, #0]
}
 80133d8:	4770      	bx	lr
 80133da:	46c0      	nop			; (mov r8, r8)
 80133dc:	40007000 	.word	0x40007000

080133e0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80133e0:	b530      	push	{r4, r5, lr}
 80133e2:	b083      	sub	sp, #12
 80133e4:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80133e6:	6803      	ldr	r3, [r0, #0]
 80133e8:	07db      	lsls	r3, r3, #31
 80133ea:	d534      	bpl.n	8013456 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80133ec:	4bc1      	ldr	r3, [pc, #772]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80133ee:	685a      	ldr	r2, [r3, #4]
 80133f0:	230c      	movs	r3, #12
 80133f2:	4013      	ands	r3, r2
 80133f4:	2b04      	cmp	r3, #4
 80133f6:	d026      	beq.n	8013446 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80133f8:	4bbe      	ldr	r3, [pc, #760]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80133fa:	685a      	ldr	r2, [r3, #4]
 80133fc:	230c      	movs	r3, #12
 80133fe:	4013      	ands	r3, r2
 8013400:	2b08      	cmp	r3, #8
 8013402:	d108      	bne.n	8013416 <HAL_RCC_OscConfig+0x36>
 8013404:	4bbb      	ldr	r3, [pc, #748]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	22c0      	movs	r2, #192	; 0xc0
 801340a:	0252      	lsls	r2, r2, #9
 801340c:	4013      	ands	r3, r2
 801340e:	2280      	movs	r2, #128	; 0x80
 8013410:	0252      	lsls	r2, r2, #9
 8013412:	4293      	cmp	r3, r2
 8013414:	d017      	beq.n	8013446 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8013416:	4bb7      	ldr	r3, [pc, #732]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	49b7      	ldr	r1, [pc, #732]	; (80136f8 <HAL_RCC_OscConfig+0x318>)
 801341c:	400a      	ands	r2, r1
 801341e:	601a      	str	r2, [r3, #0]
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	49b6      	ldr	r1, [pc, #728]	; (80136fc <HAL_RCC_OscConfig+0x31c>)
 8013424:	400a      	ands	r2, r1
 8013426:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013428:	f7fe fbba 	bl	8011ba0 <HAL_GetTick>
 801342c:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801342e:	4bb1      	ldr	r3, [pc, #708]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	039b      	lsls	r3, r3, #14
 8013434:	d536      	bpl.n	80134a4 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013436:	f7fe fbb3 	bl	8011ba0 <HAL_GetTick>
 801343a:	1b40      	subs	r0, r0, r5
 801343c:	2864      	cmp	r0, #100	; 0x64
 801343e:	d9f6      	bls.n	801342e <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8013440:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8013442:	b003      	add	sp, #12
 8013444:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013446:	4bab      	ldr	r3, [pc, #684]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	039b      	lsls	r3, r3, #14
 801344c:	d503      	bpl.n	8013456 <HAL_RCC_OscConfig+0x76>
 801344e:	6863      	ldr	r3, [r4, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d100      	bne.n	8013456 <HAL_RCC_OscConfig+0x76>
 8013454:	e258      	b.n	8013908 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013456:	6823      	ldr	r3, [r4, #0]
 8013458:	079b      	lsls	r3, r3, #30
 801345a:	d400      	bmi.n	801345e <HAL_RCC_OscConfig+0x7e>
 801345c:	e088      	b.n	8013570 <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801345e:	4ba5      	ldr	r3, [pc, #660]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	220c      	movs	r2, #12
 8013464:	421a      	tst	r2, r3
 8013466:	d072      	beq.n	801354e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8013468:	4ba2      	ldr	r3, [pc, #648]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	230c      	movs	r3, #12
 801346e:	4013      	ands	r3, r2
 8013470:	2b08      	cmp	r3, #8
 8013472:	d063      	beq.n	801353c <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013474:	68e3      	ldr	r3, [r4, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d100      	bne.n	801347c <HAL_RCC_OscConfig+0x9c>
 801347a:	e09b      	b.n	80135b4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 801347c:	4a9d      	ldr	r2, [pc, #628]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801347e:	6813      	ldr	r3, [r2, #0]
 8013480:	2101      	movs	r1, #1
 8013482:	430b      	orrs	r3, r1
 8013484:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8013486:	f7fe fb8b 	bl	8011ba0 <HAL_GetTick>
 801348a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801348c:	4b99      	ldr	r3, [pc, #612]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	079b      	lsls	r3, r3, #30
 8013492:	d500      	bpl.n	8013496 <HAL_RCC_OscConfig+0xb6>
 8013494:	e085      	b.n	80135a2 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013496:	f7fe fb83 	bl	8011ba0 <HAL_GetTick>
 801349a:	1b40      	subs	r0, r0, r5
 801349c:	2864      	cmp	r0, #100	; 0x64
 801349e:	d9f5      	bls.n	801348c <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 80134a0:	2003      	movs	r0, #3
 80134a2:	e7ce      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80134a4:	6863      	ldr	r3, [r4, #4]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d00b      	beq.n	80134c2 <HAL_RCC_OscConfig+0xe2>
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d120      	bne.n	80134f0 <HAL_RCC_OscConfig+0x110>
 80134ae:	4b91      	ldr	r3, [pc, #580]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	4991      	ldr	r1, [pc, #580]	; (80136f8 <HAL_RCC_OscConfig+0x318>)
 80134b4:	400a      	ands	r2, r1
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	4990      	ldr	r1, [pc, #576]	; (80136fc <HAL_RCC_OscConfig+0x31c>)
 80134bc:	400a      	ands	r2, r1
 80134be:	601a      	str	r2, [r3, #0]
 80134c0:	e005      	b.n	80134ce <HAL_RCC_OscConfig+0xee>
 80134c2:	4a8c      	ldr	r2, [pc, #560]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80134c4:	6811      	ldr	r1, [r2, #0]
 80134c6:	2380      	movs	r3, #128	; 0x80
 80134c8:	025b      	lsls	r3, r3, #9
 80134ca:	430b      	orrs	r3, r1
 80134cc:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80134ce:	6863      	ldr	r3, [r4, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d025      	beq.n	8013520 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 80134d4:	f7fe fb64 	bl	8011ba0 <HAL_GetTick>
 80134d8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134da:	4b86      	ldr	r3, [pc, #536]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	039b      	lsls	r3, r3, #14
 80134e0:	d4b9      	bmi.n	8013456 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80134e2:	f7fe fb5d 	bl	8011ba0 <HAL_GetTick>
 80134e6:	1b40      	subs	r0, r0, r5
 80134e8:	2864      	cmp	r0, #100	; 0x64
 80134ea:	d9f6      	bls.n	80134da <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80134ec:	2003      	movs	r0, #3
 80134ee:	e7a8      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80134f0:	2b05      	cmp	r3, #5
 80134f2:	d009      	beq.n	8013508 <HAL_RCC_OscConfig+0x128>
 80134f4:	4b7f      	ldr	r3, [pc, #508]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	497f      	ldr	r1, [pc, #508]	; (80136f8 <HAL_RCC_OscConfig+0x318>)
 80134fa:	400a      	ands	r2, r1
 80134fc:	601a      	str	r2, [r3, #0]
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	497e      	ldr	r1, [pc, #504]	; (80136fc <HAL_RCC_OscConfig+0x31c>)
 8013502:	400a      	ands	r2, r1
 8013504:	601a      	str	r2, [r3, #0]
 8013506:	e7e2      	b.n	80134ce <HAL_RCC_OscConfig+0xee>
 8013508:	4b7a      	ldr	r3, [pc, #488]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801350a:	6819      	ldr	r1, [r3, #0]
 801350c:	2280      	movs	r2, #128	; 0x80
 801350e:	02d2      	lsls	r2, r2, #11
 8013510:	430a      	orrs	r2, r1
 8013512:	601a      	str	r2, [r3, #0]
 8013514:	6819      	ldr	r1, [r3, #0]
 8013516:	2280      	movs	r2, #128	; 0x80
 8013518:	0252      	lsls	r2, r2, #9
 801351a:	430a      	orrs	r2, r1
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	e7d6      	b.n	80134ce <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8013520:	f7fe fb3e 	bl	8011ba0 <HAL_GetTick>
 8013524:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013526:	4b73      	ldr	r3, [pc, #460]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	039b      	lsls	r3, r3, #14
 801352c:	d593      	bpl.n	8013456 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801352e:	f7fe fb37 	bl	8011ba0 <HAL_GetTick>
 8013532:	1b40      	subs	r0, r0, r5
 8013534:	2864      	cmp	r0, #100	; 0x64
 8013536:	d9f6      	bls.n	8013526 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8013538:	2003      	movs	r0, #3
 801353a:	e782      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801353c:	4b6d      	ldr	r3, [pc, #436]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	22c0      	movs	r2, #192	; 0xc0
 8013542:	0252      	lsls	r2, r2, #9
 8013544:	4013      	ands	r3, r2
 8013546:	2280      	movs	r2, #128	; 0x80
 8013548:	0212      	lsls	r2, r2, #8
 801354a:	4293      	cmp	r3, r2
 801354c:	d192      	bne.n	8013474 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801354e:	4b69      	ldr	r3, [pc, #420]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	079b      	lsls	r3, r3, #30
 8013554:	d504      	bpl.n	8013560 <HAL_RCC_OscConfig+0x180>
 8013556:	68e3      	ldr	r3, [r4, #12]
 8013558:	2b01      	cmp	r3, #1
 801355a:	d001      	beq.n	8013560 <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 801355c:	2001      	movs	r0, #1
 801355e:	e770      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013560:	4964      	ldr	r1, [pc, #400]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013562:	680b      	ldr	r3, [r1, #0]
 8013564:	22f8      	movs	r2, #248	; 0xf8
 8013566:	4393      	bics	r3, r2
 8013568:	6922      	ldr	r2, [r4, #16]
 801356a:	00d2      	lsls	r2, r2, #3
 801356c:	4313      	orrs	r3, r2
 801356e:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	071b      	lsls	r3, r3, #28
 8013574:	d544      	bpl.n	8013600 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013576:	6a23      	ldr	r3, [r4, #32]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d02e      	beq.n	80135da <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 801357c:	4a5d      	ldr	r2, [pc, #372]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801357e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8013580:	2101      	movs	r1, #1
 8013582:	430b      	orrs	r3, r1
 8013584:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8013586:	f7fe fb0b 	bl	8011ba0 <HAL_GetTick>
 801358a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801358c:	4b59      	ldr	r3, [pc, #356]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013590:	079b      	lsls	r3, r3, #30
 8013592:	d435      	bmi.n	8013600 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013594:	f7fe fb04 	bl	8011ba0 <HAL_GetTick>
 8013598:	1b40      	subs	r0, r0, r5
 801359a:	2864      	cmp	r0, #100	; 0x64
 801359c:	d9f6      	bls.n	801358c <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 801359e:	2003      	movs	r0, #3
 80135a0:	e74f      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80135a2:	4954      	ldr	r1, [pc, #336]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80135a4:	680b      	ldr	r3, [r1, #0]
 80135a6:	22f8      	movs	r2, #248	; 0xf8
 80135a8:	4393      	bics	r3, r2
 80135aa:	6922      	ldr	r2, [r4, #16]
 80135ac:	00d2      	lsls	r2, r2, #3
 80135ae:	4313      	orrs	r3, r2
 80135b0:	600b      	str	r3, [r1, #0]
 80135b2:	e7dd      	b.n	8013570 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 80135b4:	4a4f      	ldr	r2, [pc, #316]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80135b6:	6813      	ldr	r3, [r2, #0]
 80135b8:	2101      	movs	r1, #1
 80135ba:	438b      	bics	r3, r1
 80135bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80135be:	f7fe faef 	bl	8011ba0 <HAL_GetTick>
 80135c2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135c4:	4b4b      	ldr	r3, [pc, #300]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	079b      	lsls	r3, r3, #30
 80135ca:	d5d1      	bpl.n	8013570 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80135cc:	f7fe fae8 	bl	8011ba0 <HAL_GetTick>
 80135d0:	1b40      	subs	r0, r0, r5
 80135d2:	2864      	cmp	r0, #100	; 0x64
 80135d4:	d9f6      	bls.n	80135c4 <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 80135d6:	2003      	movs	r0, #3
 80135d8:	e733      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 80135da:	4a46      	ldr	r2, [pc, #280]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80135dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80135de:	2101      	movs	r1, #1
 80135e0:	438b      	bics	r3, r1
 80135e2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80135e4:	f7fe fadc 	bl	8011ba0 <HAL_GetTick>
 80135e8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80135ea:	4b42      	ldr	r3, [pc, #264]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80135ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ee:	079b      	lsls	r3, r3, #30
 80135f0:	d506      	bpl.n	8013600 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80135f2:	f7fe fad5 	bl	8011ba0 <HAL_GetTick>
 80135f6:	1b40      	subs	r0, r0, r5
 80135f8:	2864      	cmp	r0, #100	; 0x64
 80135fa:	d9f6      	bls.n	80135ea <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 80135fc:	2003      	movs	r0, #3
 80135fe:	e720      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013600:	6823      	ldr	r3, [r4, #0]
 8013602:	075b      	lsls	r3, r3, #29
 8013604:	d440      	bmi.n	8013688 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8013606:	6823      	ldr	r3, [r4, #0]
 8013608:	06db      	lsls	r3, r3, #27
 801360a:	d512      	bpl.n	8013632 <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801360c:	6963      	ldr	r3, [r4, #20]
 801360e:	2b01      	cmp	r3, #1
 8013610:	d100      	bne.n	8013614 <HAL_RCC_OscConfig+0x234>
 8013612:	e0c6      	b.n	80137a2 <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8013614:	3305      	adds	r3, #5
 8013616:	d000      	beq.n	801361a <HAL_RCC_OscConfig+0x23a>
 8013618:	e0e3      	b.n	80137e2 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 801361a:	4a36      	ldr	r2, [pc, #216]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801361c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801361e:	2104      	movs	r1, #4
 8013620:	438b      	bics	r3, r1
 8013622:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8013624:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013626:	31f4      	adds	r1, #244	; 0xf4
 8013628:	438b      	bics	r3, r1
 801362a:	69a1      	ldr	r1, [r4, #24]
 801362c:	00c9      	lsls	r1, r1, #3
 801362e:	430b      	orrs	r3, r1
 8013630:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	069b      	lsls	r3, r3, #26
 8013636:	d400      	bmi.n	801363a <HAL_RCC_OscConfig+0x25a>
 8013638:	e10f      	b.n	801385a <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801363a:	4b2e      	ldr	r3, [pc, #184]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801363c:	685a      	ldr	r2, [r3, #4]
 801363e:	230c      	movs	r3, #12
 8013640:	4013      	ands	r3, r2
 8013642:	2b0c      	cmp	r3, #12
 8013644:	d100      	bne.n	8013648 <HAL_RCC_OscConfig+0x268>
 8013646:	e0ec      	b.n	8013822 <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8013648:	4b2a      	ldr	r3, [pc, #168]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801364a:	685a      	ldr	r2, [r3, #4]
 801364c:	230c      	movs	r3, #12
 801364e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8013650:	2b08      	cmp	r3, #8
 8013652:	d100      	bne.n	8013656 <HAL_RCC_OscConfig+0x276>
 8013654:	e0dd      	b.n	8013812 <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013656:	69e3      	ldr	r3, [r4, #28]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d100      	bne.n	801365e <HAL_RCC_OscConfig+0x27e>
 801365c:	e0ea      	b.n	8013834 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 801365e:	4a25      	ldr	r2, [pc, #148]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013660:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8013662:	2380      	movs	r3, #128	; 0x80
 8013664:	025b      	lsls	r3, r3, #9
 8013666:	430b      	orrs	r3, r1
 8013668:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801366a:	f7fe fa99 	bl	8011ba0 <HAL_GetTick>
 801366e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013670:	4b20      	ldr	r3, [pc, #128]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 8013672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013674:	03db      	lsls	r3, r3, #15
 8013676:	d500      	bpl.n	801367a <HAL_RCC_OscConfig+0x29a>
 8013678:	e0ef      	b.n	801385a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801367a:	f7fe fa91 	bl	8011ba0 <HAL_GetTick>
 801367e:	1b40      	subs	r0, r0, r5
 8013680:	2864      	cmp	r0, #100	; 0x64
 8013682:	d9f5      	bls.n	8013670 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 8013684:	2003      	movs	r0, #3
 8013686:	e6dc      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8013688:	4a1a      	ldr	r2, [pc, #104]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 801368a:	69d1      	ldr	r1, [r2, #28]
 801368c:	2080      	movs	r0, #128	; 0x80
 801368e:	0540      	lsls	r0, r0, #21
 8013690:	4301      	orrs	r1, r0
 8013692:	61d1      	str	r1, [r2, #28]
 8013694:	69d3      	ldr	r3, [r2, #28]
 8013696:	4003      	ands	r3, r0
 8013698:	9301      	str	r3, [sp, #4]
 801369a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801369c:	4a18      	ldr	r2, [pc, #96]	; (8013700 <HAL_RCC_OscConfig+0x320>)
 801369e:	6811      	ldr	r1, [r2, #0]
 80136a0:	2380      	movs	r3, #128	; 0x80
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	430b      	orrs	r3, r1
 80136a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80136a8:	f7fe fa7a 	bl	8011ba0 <HAL_GetTick>
 80136ac:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80136ae:	4b14      	ldr	r3, [pc, #80]	; (8013700 <HAL_RCC_OscConfig+0x320>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	05db      	lsls	r3, r3, #23
 80136b4:	d406      	bmi.n	80136c4 <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80136b6:	f7fe fa73 	bl	8011ba0 <HAL_GetTick>
 80136ba:	1b40      	subs	r0, r0, r5
 80136bc:	2864      	cmp	r0, #100	; 0x64
 80136be:	d9f6      	bls.n	80136ae <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 80136c0:	2003      	movs	r0, #3
 80136c2:	e6be      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80136c4:	4b0b      	ldr	r3, [pc, #44]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80136c6:	6a1a      	ldr	r2, [r3, #32]
 80136c8:	2101      	movs	r1, #1
 80136ca:	438a      	bics	r2, r1
 80136cc:	621a      	str	r2, [r3, #32]
 80136ce:	6a1a      	ldr	r2, [r3, #32]
 80136d0:	3103      	adds	r1, #3
 80136d2:	438a      	bics	r2, r1
 80136d4:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80136d6:	f7fe fa63 	bl	8011ba0 <HAL_GetTick>
 80136da:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80136dc:	4b05      	ldr	r3, [pc, #20]	; (80136f4 <HAL_RCC_OscConfig+0x314>)
 80136de:	6a1b      	ldr	r3, [r3, #32]
 80136e0:	079b      	lsls	r3, r3, #30
 80136e2:	d511      	bpl.n	8013708 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80136e4:	f7fe fa5c 	bl	8011ba0 <HAL_GetTick>
 80136e8:	1b40      	subs	r0, r0, r5
 80136ea:	4b06      	ldr	r3, [pc, #24]	; (8013704 <HAL_RCC_OscConfig+0x324>)
 80136ec:	4298      	cmp	r0, r3
 80136ee:	d9f5      	bls.n	80136dc <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 80136f0:	2003      	movs	r0, #3
 80136f2:	e6a6      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
 80136f4:	40021000 	.word	0x40021000
 80136f8:	fffeffff 	.word	0xfffeffff
 80136fc:	fffbffff 	.word	0xfffbffff
 8013700:	40007000 	.word	0x40007000
 8013704:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013708:	68a3      	ldr	r3, [r4, #8]
 801370a:	2b01      	cmp	r3, #1
 801370c:	d00b      	beq.n	8013726 <HAL_RCC_OscConfig+0x346>
 801370e:	2b00      	cmp	r3, #0
 8013710:	d121      	bne.n	8013756 <HAL_RCC_OscConfig+0x376>
 8013712:	4b80      	ldr	r3, [pc, #512]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013714:	6a1a      	ldr	r2, [r3, #32]
 8013716:	2101      	movs	r1, #1
 8013718:	438a      	bics	r2, r1
 801371a:	621a      	str	r2, [r3, #32]
 801371c:	6a1a      	ldr	r2, [r3, #32]
 801371e:	3103      	adds	r1, #3
 8013720:	438a      	bics	r2, r1
 8013722:	621a      	str	r2, [r3, #32]
 8013724:	e004      	b.n	8013730 <HAL_RCC_OscConfig+0x350>
 8013726:	4a7b      	ldr	r2, [pc, #492]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013728:	6a13      	ldr	r3, [r2, #32]
 801372a:	2101      	movs	r1, #1
 801372c:	430b      	orrs	r3, r1
 801372e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013730:	68a3      	ldr	r3, [r4, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d025      	beq.n	8013782 <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8013736:	f7fe fa33 	bl	8011ba0 <HAL_GetTick>
 801373a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801373c:	4b75      	ldr	r3, [pc, #468]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 801373e:	6a1b      	ldr	r3, [r3, #32]
 8013740:	079b      	lsls	r3, r3, #30
 8013742:	d500      	bpl.n	8013746 <HAL_RCC_OscConfig+0x366>
 8013744:	e75f      	b.n	8013606 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013746:	f7fe fa2b 	bl	8011ba0 <HAL_GetTick>
 801374a:	1b40      	subs	r0, r0, r5
 801374c:	4b72      	ldr	r3, [pc, #456]	; (8013918 <HAL_RCC_OscConfig+0x538>)
 801374e:	4298      	cmp	r0, r3
 8013750:	d9f4      	bls.n	801373c <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8013752:	2003      	movs	r0, #3
 8013754:	e675      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013756:	2b05      	cmp	r3, #5
 8013758:	d009      	beq.n	801376e <HAL_RCC_OscConfig+0x38e>
 801375a:	4b6e      	ldr	r3, [pc, #440]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 801375c:	6a1a      	ldr	r2, [r3, #32]
 801375e:	2101      	movs	r1, #1
 8013760:	438a      	bics	r2, r1
 8013762:	621a      	str	r2, [r3, #32]
 8013764:	6a1a      	ldr	r2, [r3, #32]
 8013766:	3103      	adds	r1, #3
 8013768:	438a      	bics	r2, r1
 801376a:	621a      	str	r2, [r3, #32]
 801376c:	e7e0      	b.n	8013730 <HAL_RCC_OscConfig+0x350>
 801376e:	4b69      	ldr	r3, [pc, #420]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013770:	6a1a      	ldr	r2, [r3, #32]
 8013772:	2104      	movs	r1, #4
 8013774:	430a      	orrs	r2, r1
 8013776:	621a      	str	r2, [r3, #32]
 8013778:	6a1a      	ldr	r2, [r3, #32]
 801377a:	3903      	subs	r1, #3
 801377c:	430a      	orrs	r2, r1
 801377e:	621a      	str	r2, [r3, #32]
 8013780:	e7d6      	b.n	8013730 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8013782:	f7fe fa0d 	bl	8011ba0 <HAL_GetTick>
 8013786:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013788:	4b62      	ldr	r3, [pc, #392]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 801378a:	6a1b      	ldr	r3, [r3, #32]
 801378c:	079b      	lsls	r3, r3, #30
 801378e:	d400      	bmi.n	8013792 <HAL_RCC_OscConfig+0x3b2>
 8013790:	e739      	b.n	8013606 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013792:	f7fe fa05 	bl	8011ba0 <HAL_GetTick>
 8013796:	1b40      	subs	r0, r0, r5
 8013798:	4b5f      	ldr	r3, [pc, #380]	; (8013918 <HAL_RCC_OscConfig+0x538>)
 801379a:	4298      	cmp	r0, r3
 801379c:	d9f4      	bls.n	8013788 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 801379e:	2003      	movs	r0, #3
 80137a0:	e64f      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 80137a2:	4b5c      	ldr	r3, [pc, #368]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80137a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137a6:	2104      	movs	r1, #4
 80137a8:	430a      	orrs	r2, r1
 80137aa:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80137ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137ae:	3903      	subs	r1, #3
 80137b0:	430a      	orrs	r2, r1
 80137b2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80137b4:	f7fe f9f4 	bl	8011ba0 <HAL_GetTick>
 80137b8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80137ba:	4b56      	ldr	r3, [pc, #344]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80137bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137be:	079b      	lsls	r3, r3, #30
 80137c0:	d406      	bmi.n	80137d0 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80137c2:	f7fe f9ed 	bl	8011ba0 <HAL_GetTick>
 80137c6:	1b40      	subs	r0, r0, r5
 80137c8:	2864      	cmp	r0, #100	; 0x64
 80137ca:	d9f6      	bls.n	80137ba <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 80137cc:	2003      	movs	r0, #3
 80137ce:	e638      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80137d0:	4950      	ldr	r1, [pc, #320]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80137d2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80137d4:	22f8      	movs	r2, #248	; 0xf8
 80137d6:	4393      	bics	r3, r2
 80137d8:	69a2      	ldr	r2, [r4, #24]
 80137da:	00d2      	lsls	r2, r2, #3
 80137dc:	4313      	orrs	r3, r2
 80137de:	634b      	str	r3, [r1, #52]	; 0x34
 80137e0:	e727      	b.n	8013632 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 80137e2:	4b4c      	ldr	r3, [pc, #304]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80137e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137e6:	2104      	movs	r1, #4
 80137e8:	430a      	orrs	r2, r1
 80137ea:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80137ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137ee:	3903      	subs	r1, #3
 80137f0:	438a      	bics	r2, r1
 80137f2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80137f4:	f7fe f9d4 	bl	8011ba0 <HAL_GetTick>
 80137f8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80137fa:	4b46      	ldr	r3, [pc, #280]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80137fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137fe:	079b      	lsls	r3, r3, #30
 8013800:	d400      	bmi.n	8013804 <HAL_RCC_OscConfig+0x424>
 8013802:	e716      	b.n	8013632 <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8013804:	f7fe f9cc 	bl	8011ba0 <HAL_GetTick>
 8013808:	1b40      	subs	r0, r0, r5
 801380a:	2864      	cmp	r0, #100	; 0x64
 801380c:	d9f5      	bls.n	80137fa <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 801380e:	2003      	movs	r0, #3
 8013810:	e617      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8013812:	4b40      	ldr	r3, [pc, #256]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	22c0      	movs	r2, #192	; 0xc0
 8013818:	0252      	lsls	r2, r2, #9
 801381a:	4013      	ands	r3, r2
 801381c:	4293      	cmp	r3, r2
 801381e:	d000      	beq.n	8013822 <HAL_RCC_OscConfig+0x442>
 8013820:	e719      	b.n	8013656 <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8013822:	4b3c      	ldr	r3, [pc, #240]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013826:	03db      	lsls	r3, r3, #15
 8013828:	d517      	bpl.n	801385a <HAL_RCC_OscConfig+0x47a>
 801382a:	69e3      	ldr	r3, [r4, #28]
 801382c:	2b01      	cmp	r3, #1
 801382e:	d014      	beq.n	801385a <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8013830:	2001      	movs	r0, #1
 8013832:	e606      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8013834:	4a37      	ldr	r2, [pc, #220]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013836:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013838:	4938      	ldr	r1, [pc, #224]	; (801391c <HAL_RCC_OscConfig+0x53c>)
 801383a:	400b      	ands	r3, r1
 801383c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801383e:	f7fe f9af 	bl	8011ba0 <HAL_GetTick>
 8013842:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8013844:	4b33      	ldr	r3, [pc, #204]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013848:	03db      	lsls	r3, r3, #15
 801384a:	d506      	bpl.n	801385a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801384c:	f7fe f9a8 	bl	8011ba0 <HAL_GetTick>
 8013850:	1b40      	subs	r0, r0, r5
 8013852:	2864      	cmp	r0, #100	; 0x64
 8013854:	d9f6      	bls.n	8013844 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8013856:	2003      	movs	r0, #3
 8013858:	e5f3      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801385a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801385c:	2b00      	cmp	r3, #0
 801385e:	d055      	beq.n	801390c <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013860:	4a2c      	ldr	r2, [pc, #176]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013862:	6851      	ldr	r1, [r2, #4]
 8013864:	220c      	movs	r2, #12
 8013866:	400a      	ands	r2, r1
 8013868:	2a08      	cmp	r2, #8
 801386a:	d051      	beq.n	8013910 <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801386c:	2b02      	cmp	r3, #2
 801386e:	d012      	beq.n	8013896 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8013870:	4a28      	ldr	r2, [pc, #160]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013872:	6813      	ldr	r3, [r2, #0]
 8013874:	492a      	ldr	r1, [pc, #168]	; (8013920 <HAL_RCC_OscConfig+0x540>)
 8013876:	400b      	ands	r3, r1
 8013878:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801387a:	f7fe f991 	bl	8011ba0 <HAL_GetTick>
 801387e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013880:	4b24      	ldr	r3, [pc, #144]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	019b      	lsls	r3, r3, #6
 8013886:	d53d      	bpl.n	8013904 <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013888:	f7fe f98a 	bl	8011ba0 <HAL_GetTick>
 801388c:	1b00      	subs	r0, r0, r4
 801388e:	2864      	cmp	r0, #100	; 0x64
 8013890:	d9f6      	bls.n	8013880 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8013892:	2003      	movs	r0, #3
 8013894:	e5d5      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8013896:	4a1f      	ldr	r2, [pc, #124]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 8013898:	6813      	ldr	r3, [r2, #0]
 801389a:	4921      	ldr	r1, [pc, #132]	; (8013920 <HAL_RCC_OscConfig+0x540>)
 801389c:	400b      	ands	r3, r1
 801389e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80138a0:	f7fe f97e 	bl	8011ba0 <HAL_GetTick>
 80138a4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80138a6:	4b1b      	ldr	r3, [pc, #108]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	019b      	lsls	r3, r3, #6
 80138ac:	d506      	bpl.n	80138bc <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80138ae:	f7fe f977 	bl	8011ba0 <HAL_GetTick>
 80138b2:	1b40      	subs	r0, r0, r5
 80138b4:	2864      	cmp	r0, #100	; 0x64
 80138b6:	d9f6      	bls.n	80138a6 <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 80138b8:	2003      	movs	r0, #3
 80138ba:	e5c2      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80138bc:	4b15      	ldr	r3, [pc, #84]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80138be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c0:	210f      	movs	r1, #15
 80138c2:	438a      	bics	r2, r1
 80138c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80138c6:	430a      	orrs	r2, r1
 80138c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80138ca:	685a      	ldr	r2, [r3, #4]
 80138cc:	4915      	ldr	r1, [pc, #84]	; (8013924 <HAL_RCC_OscConfig+0x544>)
 80138ce:	400a      	ands	r2, r1
 80138d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80138d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80138d4:	4301      	orrs	r1, r0
 80138d6:	430a      	orrs	r2, r1
 80138d8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80138da:	6819      	ldr	r1, [r3, #0]
 80138dc:	2280      	movs	r2, #128	; 0x80
 80138de:	0452      	lsls	r2, r2, #17
 80138e0:	430a      	orrs	r2, r1
 80138e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80138e4:	f7fe f95c 	bl	8011ba0 <HAL_GetTick>
 80138e8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80138ea:	4b0a      	ldr	r3, [pc, #40]	; (8013914 <HAL_RCC_OscConfig+0x534>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	019b      	lsls	r3, r3, #6
 80138f0:	d406      	bmi.n	8013900 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80138f2:	f7fe f955 	bl	8011ba0 <HAL_GetTick>
 80138f6:	1b00      	subs	r0, r0, r4
 80138f8:	2864      	cmp	r0, #100	; 0x64
 80138fa:	d9f6      	bls.n	80138ea <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 80138fc:	2003      	movs	r0, #3
 80138fe:	e5a0      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8013900:	2000      	movs	r0, #0
 8013902:	e59e      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
 8013904:	2000      	movs	r0, #0
 8013906:	e59c      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8013908:	2001      	movs	r0, #1
 801390a:	e59a      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 801390c:	2000      	movs	r0, #0
 801390e:	e598      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8013910:	2001      	movs	r0, #1
 8013912:	e596      	b.n	8013442 <HAL_RCC_OscConfig+0x62>
 8013914:	40021000 	.word	0x40021000
 8013918:	00001388 	.word	0x00001388
 801391c:	fffeffff 	.word	0xfffeffff
 8013920:	feffffff 	.word	0xfeffffff
 8013924:	ffc27fff 	.word	0xffc27fff

08013928 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	0005      	movs	r5, r0
 801392c:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801392e:	4b8d      	ldr	r3, [pc, #564]	; (8013b64 <HAL_RCC_ClockConfig+0x23c>)
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	2301      	movs	r3, #1
 8013934:	4013      	ands	r3, r2
 8013936:	428b      	cmp	r3, r1
 8013938:	d300      	bcc.n	801393c <HAL_RCC_ClockConfig+0x14>
 801393a:	e082      	b.n	8013a42 <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801393c:	4989      	ldr	r1, [pc, #548]	; (8013b64 <HAL_RCC_ClockConfig+0x23c>)
 801393e:	680b      	ldr	r3, [r1, #0]
 8013940:	2201      	movs	r2, #1
 8013942:	4393      	bics	r3, r2
 8013944:	4323      	orrs	r3, r4
 8013946:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013948:	680b      	ldr	r3, [r1, #0]
 801394a:	401a      	ands	r2, r3
 801394c:	42a2      	cmp	r2, r4
 801394e:	d001      	beq.n	8013954 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8013950:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8013952:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013954:	6803      	ldr	r3, [r0, #0]
 8013956:	079b      	lsls	r3, r3, #30
 8013958:	d506      	bpl.n	8013968 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801395a:	4a83      	ldr	r2, [pc, #524]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 801395c:	6853      	ldr	r3, [r2, #4]
 801395e:	21f0      	movs	r1, #240	; 0xf0
 8013960:	438b      	bics	r3, r1
 8013962:	6881      	ldr	r1, [r0, #8]
 8013964:	430b      	orrs	r3, r1
 8013966:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013968:	682b      	ldr	r3, [r5, #0]
 801396a:	07db      	lsls	r3, r3, #31
 801396c:	d400      	bmi.n	8013970 <HAL_RCC_ClockConfig+0x48>
 801396e:	e0e5      	b.n	8013b3c <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013970:	686b      	ldr	r3, [r5, #4]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d009      	beq.n	801398a <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013976:	2b02      	cmp	r3, #2
 8013978:	d02a      	beq.n	80139d0 <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801397a:	2b03      	cmp	r3, #3
 801397c:	d02e      	beq.n	80139dc <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801397e:	4a7a      	ldr	r2, [pc, #488]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013980:	6812      	ldr	r2, [r2, #0]
 8013982:	0792      	lsls	r2, r2, #30
 8013984:	d406      	bmi.n	8013994 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013986:	2001      	movs	r0, #1
 8013988:	e7e3      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801398a:	4a77      	ldr	r2, [pc, #476]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 801398c:	6812      	ldr	r2, [r2, #0]
 801398e:	0392      	lsls	r2, r2, #14
 8013990:	d400      	bmi.n	8013994 <HAL_RCC_ClockConfig+0x6c>
 8013992:	e0e2      	b.n	8013b5a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013994:	4974      	ldr	r1, [pc, #464]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013996:	684a      	ldr	r2, [r1, #4]
 8013998:	2003      	movs	r0, #3
 801399a:	4382      	bics	r2, r0
 801399c:	4313      	orrs	r3, r2
 801399e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80139a0:	f7fe f8fe 	bl	8011ba0 <HAL_GetTick>
 80139a4:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80139a6:	686b      	ldr	r3, [r5, #4]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d01d      	beq.n	80139e8 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	d02a      	beq.n	8013a06 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80139b0:	2b03      	cmp	r3, #3
 80139b2:	d037      	beq.n	8013a24 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80139b4:	4b6c      	ldr	r3, [pc, #432]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	220c      	movs	r2, #12
 80139ba:	421a      	tst	r2, r3
 80139bc:	d100      	bne.n	80139c0 <HAL_RCC_ClockConfig+0x98>
 80139be:	e0bd      	b.n	8013b3c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80139c0:	f7fe f8ee 	bl	8011ba0 <HAL_GetTick>
 80139c4:	1b00      	subs	r0, r0, r4
 80139c6:	4b69      	ldr	r3, [pc, #420]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 80139c8:	4298      	cmp	r0, r3
 80139ca:	d9f3      	bls.n	80139b4 <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 80139cc:	2003      	movs	r0, #3
 80139ce:	e7c0      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80139d0:	4a65      	ldr	r2, [pc, #404]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 80139d2:	6812      	ldr	r2, [r2, #0]
 80139d4:	0192      	lsls	r2, r2, #6
 80139d6:	d4dd      	bmi.n	8013994 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80139d8:	2001      	movs	r0, #1
 80139da:	e7ba      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80139dc:	4a62      	ldr	r2, [pc, #392]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 80139de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80139e0:	03d2      	lsls	r2, r2, #15
 80139e2:	d4d7      	bmi.n	8013994 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80139e4:	2001      	movs	r0, #1
 80139e6:	e7b4      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80139e8:	4b5f      	ldr	r3, [pc, #380]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 80139ea:	685a      	ldr	r2, [r3, #4]
 80139ec:	230c      	movs	r3, #12
 80139ee:	4013      	ands	r3, r2
 80139f0:	2b04      	cmp	r3, #4
 80139f2:	d100      	bne.n	80139f6 <HAL_RCC_ClockConfig+0xce>
 80139f4:	e0a2      	b.n	8013b3c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80139f6:	f7fe f8d3 	bl	8011ba0 <HAL_GetTick>
 80139fa:	1b00      	subs	r0, r0, r4
 80139fc:	4b5b      	ldr	r3, [pc, #364]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 80139fe:	4298      	cmp	r0, r3
 8013a00:	d9f2      	bls.n	80139e8 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 8013a02:	2003      	movs	r0, #3
 8013a04:	e7a5      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013a06:	4b58      	ldr	r3, [pc, #352]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a08:	685a      	ldr	r2, [r3, #4]
 8013a0a:	230c      	movs	r3, #12
 8013a0c:	4013      	ands	r3, r2
 8013a0e:	2b08      	cmp	r3, #8
 8013a10:	d100      	bne.n	8013a14 <HAL_RCC_ClockConfig+0xec>
 8013a12:	e093      	b.n	8013b3c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a14:	f7fe f8c4 	bl	8011ba0 <HAL_GetTick>
 8013a18:	1b00      	subs	r0, r0, r4
 8013a1a:	4b54      	ldr	r3, [pc, #336]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013a1c:	4298      	cmp	r0, r3
 8013a1e:	d9f2      	bls.n	8013a06 <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 8013a20:	2003      	movs	r0, #3
 8013a22:	e796      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013a24:	4b50      	ldr	r3, [pc, #320]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a26:	685a      	ldr	r2, [r3, #4]
 8013a28:	230c      	movs	r3, #12
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	2b0c      	cmp	r3, #12
 8013a2e:	d100      	bne.n	8013a32 <HAL_RCC_ClockConfig+0x10a>
 8013a30:	e084      	b.n	8013b3c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a32:	f7fe f8b5 	bl	8011ba0 <HAL_GetTick>
 8013a36:	1b00      	subs	r0, r0, r4
 8013a38:	4b4c      	ldr	r3, [pc, #304]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013a3a:	4298      	cmp	r0, r3
 8013a3c:	d9f2      	bls.n	8013a24 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8013a3e:	2003      	movs	r0, #3
 8013a40:	e787      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013a42:	6803      	ldr	r3, [r0, #0]
 8013a44:	079b      	lsls	r3, r3, #30
 8013a46:	d506      	bpl.n	8013a56 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013a48:	4a47      	ldr	r2, [pc, #284]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a4a:	6853      	ldr	r3, [r2, #4]
 8013a4c:	21f0      	movs	r1, #240	; 0xf0
 8013a4e:	438b      	bics	r3, r1
 8013a50:	6881      	ldr	r1, [r0, #8]
 8013a52:	430b      	orrs	r3, r1
 8013a54:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013a56:	682b      	ldr	r3, [r5, #0]
 8013a58:	07db      	lsls	r3, r3, #31
 8013a5a:	d563      	bpl.n	8013b24 <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013a5c:	686b      	ldr	r3, [r5, #4]
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d009      	beq.n	8013a76 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d028      	beq.n	8013ab8 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013a66:	2b03      	cmp	r3, #3
 8013a68:	d02c      	beq.n	8013ac4 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013a6a:	4a3f      	ldr	r2, [pc, #252]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a6c:	6812      	ldr	r2, [r2, #0]
 8013a6e:	0792      	lsls	r2, r2, #30
 8013a70:	d405      	bmi.n	8013a7e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013a72:	2001      	movs	r0, #1
 8013a74:	e76d      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013a76:	4a3c      	ldr	r2, [pc, #240]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a78:	6812      	ldr	r2, [r2, #0]
 8013a7a:	0392      	lsls	r2, r2, #14
 8013a7c:	d56f      	bpl.n	8013b5e <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013a7e:	493a      	ldr	r1, [pc, #232]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013a80:	684a      	ldr	r2, [r1, #4]
 8013a82:	2003      	movs	r0, #3
 8013a84:	4382      	bics	r2, r0
 8013a86:	4313      	orrs	r3, r2
 8013a88:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8013a8a:	f7fe f889 	bl	8011ba0 <HAL_GetTick>
 8013a8e:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013a90:	686b      	ldr	r3, [r5, #4]
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	d01c      	beq.n	8013ad0 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	d028      	beq.n	8013aec <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013a9a:	2b03      	cmp	r3, #3
 8013a9c:	d034      	beq.n	8013b08 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013a9e:	4b32      	ldr	r3, [pc, #200]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	220c      	movs	r2, #12
 8013aa4:	421a      	tst	r2, r3
 8013aa6:	d03d      	beq.n	8013b24 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013aa8:	f7fe f87a 	bl	8011ba0 <HAL_GetTick>
 8013aac:	1b80      	subs	r0, r0, r6
 8013aae:	4b2f      	ldr	r3, [pc, #188]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013ab0:	4298      	cmp	r0, r3
 8013ab2:	d9f4      	bls.n	8013a9e <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8013ab4:	2003      	movs	r0, #3
 8013ab6:	e74c      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013ab8:	4a2b      	ldr	r2, [pc, #172]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013aba:	6812      	ldr	r2, [r2, #0]
 8013abc:	0192      	lsls	r2, r2, #6
 8013abe:	d4de      	bmi.n	8013a7e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013ac0:	2001      	movs	r0, #1
 8013ac2:	e746      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013ac4:	4a28      	ldr	r2, [pc, #160]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013ac8:	03d2      	lsls	r2, r2, #15
 8013aca:	d4d8      	bmi.n	8013a7e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013acc:	2001      	movs	r0, #1
 8013ace:	e740      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013ad0:	4b25      	ldr	r3, [pc, #148]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013ad2:	685a      	ldr	r2, [r3, #4]
 8013ad4:	230c      	movs	r3, #12
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	2b04      	cmp	r3, #4
 8013ada:	d023      	beq.n	8013b24 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013adc:	f7fe f860 	bl	8011ba0 <HAL_GetTick>
 8013ae0:	1b80      	subs	r0, r0, r6
 8013ae2:	4b22      	ldr	r3, [pc, #136]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013ae4:	4298      	cmp	r0, r3
 8013ae6:	d9f3      	bls.n	8013ad0 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8013ae8:	2003      	movs	r0, #3
 8013aea:	e732      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013aec:	4b1e      	ldr	r3, [pc, #120]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013aee:	685a      	ldr	r2, [r3, #4]
 8013af0:	230c      	movs	r3, #12
 8013af2:	4013      	ands	r3, r2
 8013af4:	2b08      	cmp	r3, #8
 8013af6:	d015      	beq.n	8013b24 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013af8:	f7fe f852 	bl	8011ba0 <HAL_GetTick>
 8013afc:	1b80      	subs	r0, r0, r6
 8013afe:	4b1b      	ldr	r3, [pc, #108]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013b00:	4298      	cmp	r0, r3
 8013b02:	d9f3      	bls.n	8013aec <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8013b04:	2003      	movs	r0, #3
 8013b06:	e724      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013b08:	4b17      	ldr	r3, [pc, #92]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	230c      	movs	r3, #12
 8013b0e:	4013      	ands	r3, r2
 8013b10:	2b0c      	cmp	r3, #12
 8013b12:	d007      	beq.n	8013b24 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013b14:	f7fe f844 	bl	8011ba0 <HAL_GetTick>
 8013b18:	1b80      	subs	r0, r0, r6
 8013b1a:	4b14      	ldr	r3, [pc, #80]	; (8013b6c <HAL_RCC_ClockConfig+0x244>)
 8013b1c:	4298      	cmp	r0, r3
 8013b1e:	d9f3      	bls.n	8013b08 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8013b20:	2003      	movs	r0, #3
 8013b22:	e716      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b24:	490f      	ldr	r1, [pc, #60]	; (8013b64 <HAL_RCC_ClockConfig+0x23c>)
 8013b26:	680b      	ldr	r3, [r1, #0]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	4393      	bics	r3, r2
 8013b2c:	4323      	orrs	r3, r4
 8013b2e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013b30:	680b      	ldr	r3, [r1, #0]
 8013b32:	401a      	ands	r2, r3
 8013b34:	42a2      	cmp	r2, r4
 8013b36:	d001      	beq.n	8013b3c <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8013b38:	2001      	movs	r0, #1
 8013b3a:	e70a      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013b3c:	682b      	ldr	r3, [r5, #0]
 8013b3e:	075b      	lsls	r3, r3, #29
 8013b40:	d506      	bpl.n	8013b50 <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8013b42:	4a09      	ldr	r2, [pc, #36]	; (8013b68 <HAL_RCC_ClockConfig+0x240>)
 8013b44:	6853      	ldr	r3, [r2, #4]
 8013b46:	490a      	ldr	r1, [pc, #40]	; (8013b70 <HAL_RCC_ClockConfig+0x248>)
 8013b48:	400b      	ands	r3, r1
 8013b4a:	68e9      	ldr	r1, [r5, #12]
 8013b4c:	430b      	orrs	r3, r1
 8013b4e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8013b50:	2000      	movs	r0, #0
 8013b52:	f7fd fffb 	bl	8011b4c <HAL_InitTick>
  return HAL_OK;
 8013b56:	2000      	movs	r0, #0
 8013b58:	e6fb      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	e6f9      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013b5e:	2001      	movs	r0, #1
 8013b60:	e6f7      	b.n	8013952 <HAL_RCC_ClockConfig+0x2a>
 8013b62:	46c0      	nop			; (mov r8, r8)
 8013b64:	40022000 	.word	0x40022000
 8013b68:	40021000 	.word	0x40021000
 8013b6c:	00001388 	.word	0x00001388
 8013b70:	fffff8ff 	.word	0xfffff8ff

08013b74 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013b74:	b530      	push	{r4, r5, lr}
 8013b76:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013b78:	aa04      	add	r2, sp, #16
 8013b7a:	4b1f      	ldr	r3, [pc, #124]	; (8013bf8 <HAL_RCC_GetSysClockFreq+0x84>)
 8013b7c:	0018      	movs	r0, r3
 8013b7e:	c832      	ldmia	r0!, {r1, r4, r5}
 8013b80:	c232      	stmia	r2!, {r1, r4, r5}
 8013b82:	0011      	movs	r1, r2
 8013b84:	6802      	ldr	r2, [r0, #0]
 8013b86:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013b88:	466a      	mov	r2, sp
 8013b8a:	3310      	adds	r3, #16
 8013b8c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8013b8e:	c213      	stmia	r2!, {r0, r1, r4}
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8013b94:	4b19      	ldr	r3, [pc, #100]	; (8013bfc <HAL_RCC_GetSysClockFreq+0x88>)
 8013b96:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013b98:	230c      	movs	r3, #12
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	2b08      	cmp	r3, #8
 8013b9e:	d004      	beq.n	8013baa <HAL_RCC_GetSysClockFreq+0x36>
 8013ba0:	2b0c      	cmp	r3, #12
 8013ba2:	d026      	beq.n	8013bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8013ba4:	4816      	ldr	r0, [pc, #88]	; (8013c00 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013ba6:	b009      	add	sp, #36	; 0x24
 8013ba8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8013baa:	0c91      	lsrs	r1, r2, #18
 8013bac:	230f      	movs	r3, #15
 8013bae:	4019      	ands	r1, r3
 8013bb0:	a804      	add	r0, sp, #16
 8013bb2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8013bb4:	4911      	ldr	r1, [pc, #68]	; (8013bfc <HAL_RCC_GetSysClockFreq+0x88>)
 8013bb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8013bb8:	400b      	ands	r3, r1
 8013bba:	4669      	mov	r1, sp
 8013bbc:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013bbe:	23c0      	movs	r3, #192	; 0xc0
 8013bc0:	025b      	lsls	r3, r3, #9
 8013bc2:	401a      	ands	r2, r3
 8013bc4:	2380      	movs	r3, #128	; 0x80
 8013bc6:	025b      	lsls	r3, r3, #9
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d008      	beq.n	8013bde <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8013bcc:	23c0      	movs	r3, #192	; 0xc0
 8013bce:	025b      	lsls	r3, r3, #9
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d009      	beq.n	8013be8 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8013bd4:	480a      	ldr	r0, [pc, #40]	; (8013c00 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013bd6:	f7ec fabb 	bl	8000150 <__udivsi3>
 8013bda:	4360      	muls	r0, r4
 8013bdc:	e7e3      	b.n	8013ba6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8013bde:	4808      	ldr	r0, [pc, #32]	; (8013c00 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013be0:	f7ec fab6 	bl	8000150 <__udivsi3>
 8013be4:	4360      	muls	r0, r4
 8013be6:	e7de      	b.n	8013ba6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8013be8:	4806      	ldr	r0, [pc, #24]	; (8013c04 <HAL_RCC_GetSysClockFreq+0x90>)
 8013bea:	f7ec fab1 	bl	8000150 <__udivsi3>
 8013bee:	4360      	muls	r0, r4
 8013bf0:	e7d9      	b.n	8013ba6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 8013bf2:	4804      	ldr	r0, [pc, #16]	; (8013c04 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8013bf4:	e7d7      	b.n	8013ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8013bf6:	46c0      	nop			; (mov r8, r8)
 8013bf8:	08019b34 	.word	0x08019b34
 8013bfc:	40021000 	.word	0x40021000
 8013c00:	007a1200 	.word	0x007a1200
 8013c04:	02dc6c00 	.word	0x02dc6c00

08013c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013c08:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8013c0a:	f7ff ffb3 	bl	8013b74 <HAL_RCC_GetSysClockFreq>
 8013c0e:	4b05      	ldr	r3, [pc, #20]	; (8013c24 <HAL_RCC_GetHCLKFreq+0x1c>)
 8013c10:	685a      	ldr	r2, [r3, #4]
 8013c12:	0912      	lsrs	r2, r2, #4
 8013c14:	230f      	movs	r3, #15
 8013c16:	4013      	ands	r3, r2
 8013c18:	4a03      	ldr	r2, [pc, #12]	; (8013c28 <HAL_RCC_GetHCLKFreq+0x20>)
 8013c1a:	5cd3      	ldrb	r3, [r2, r3]
 8013c1c:	40d8      	lsrs	r0, r3
 8013c1e:	4b03      	ldr	r3, [pc, #12]	; (8013c2c <HAL_RCC_GetHCLKFreq+0x24>)
 8013c20:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8013c22:	bd10      	pop	{r4, pc}
 8013c24:	40021000 	.word	0x40021000
 8013c28:	0801d250 	.word	0x0801d250
 8013c2c:	200000b8 	.word	0x200000b8

08013c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013c30:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8013c32:	f7ff ffe9 	bl	8013c08 <HAL_RCC_GetHCLKFreq>
 8013c36:	4b04      	ldr	r3, [pc, #16]	; (8013c48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013c38:	685a      	ldr	r2, [r3, #4]
 8013c3a:	0a12      	lsrs	r2, r2, #8
 8013c3c:	2307      	movs	r3, #7
 8013c3e:	4013      	ands	r3, r2
 8013c40:	4a02      	ldr	r2, [pc, #8]	; (8013c4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8013c42:	5cd3      	ldrb	r3, [r2, r3]
 8013c44:	40d8      	lsrs	r0, r3
}    
 8013c46:	bd10      	pop	{r4, pc}
 8013c48:	40021000 	.word	0x40021000
 8013c4c:	0801d250 	.word	0x0801d250

08013c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013c50:	b530      	push	{r4, r5, lr}
 8013c52:	b083      	sub	sp, #12
 8013c54:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013c56:	6803      	ldr	r3, [r0, #0]
 8013c58:	03db      	lsls	r3, r3, #15
 8013c5a:	d507      	bpl.n	8013c6c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013c5c:	4b41      	ldr	r3, [pc, #260]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c5e:	6a1b      	ldr	r3, [r3, #32]
 8013c60:	6842      	ldr	r2, [r0, #4]
 8013c62:	4053      	eors	r3, r2
 8013c64:	22c0      	movs	r2, #192	; 0xc0
 8013c66:	0092      	lsls	r2, r2, #2
 8013c68:	4213      	tst	r3, r2
 8013c6a:	d134      	bne.n	8013cd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013c6c:	6823      	ldr	r3, [r4, #0]
 8013c6e:	07db      	lsls	r3, r3, #31
 8013c70:	d506      	bpl.n	8013c80 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013c72:	4a3c      	ldr	r2, [pc, #240]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013c76:	2103      	movs	r1, #3
 8013c78:	438b      	bics	r3, r1
 8013c7a:	68a1      	ldr	r1, [r4, #8]
 8013c7c:	430b      	orrs	r3, r1
 8013c7e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013c80:	6823      	ldr	r3, [r4, #0]
 8013c82:	079b      	lsls	r3, r3, #30
 8013c84:	d506      	bpl.n	8013c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013c86:	4a37      	ldr	r2, [pc, #220]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013c8a:	4937      	ldr	r1, [pc, #220]	; (8013d68 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8013c8c:	400b      	ands	r3, r1
 8013c8e:	68e1      	ldr	r1, [r4, #12]
 8013c90:	430b      	orrs	r3, r1
 8013c92:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	035b      	lsls	r3, r3, #13
 8013c98:	d506      	bpl.n	8013ca8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013c9a:	4a32      	ldr	r2, [pc, #200]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013c9e:	4933      	ldr	r1, [pc, #204]	; (8013d6c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8013ca0:	400b      	ands	r3, r1
 8013ca2:	6921      	ldr	r1, [r4, #16]
 8013ca4:	430b      	orrs	r3, r1
 8013ca6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013ca8:	6823      	ldr	r3, [r4, #0]
 8013caa:	069b      	lsls	r3, r3, #26
 8013cac:	d506      	bpl.n	8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013cae:	4a2d      	ldr	r2, [pc, #180]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013cb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013cb2:	2110      	movs	r1, #16
 8013cb4:	438b      	bics	r3, r1
 8013cb6:	6961      	ldr	r1, [r4, #20]
 8013cb8:	430b      	orrs	r3, r1
 8013cba:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	055b      	lsls	r3, r3, #21
 8013cc0:	d54e      	bpl.n	8013d60 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013cc2:	4a28      	ldr	r2, [pc, #160]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013cc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013cc6:	2140      	movs	r1, #64	; 0x40
 8013cc8:	438b      	bics	r3, r1
 8013cca:	69a1      	ldr	r1, [r4, #24]
 8013ccc:	430b      	orrs	r3, r1
 8013cce:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8013cd0:	2000      	movs	r0, #0
}
 8013cd2:	b003      	add	sp, #12
 8013cd4:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8013cd6:	4a23      	ldr	r2, [pc, #140]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013cd8:	69d1      	ldr	r1, [r2, #28]
 8013cda:	2080      	movs	r0, #128	; 0x80
 8013cdc:	0540      	lsls	r0, r0, #21
 8013cde:	4301      	orrs	r1, r0
 8013ce0:	61d1      	str	r1, [r2, #28]
 8013ce2:	69d3      	ldr	r3, [r2, #28]
 8013ce4:	4003      	ands	r3, r0
 8013ce6:	9301      	str	r3, [sp, #4]
 8013ce8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013cea:	4a21      	ldr	r2, [pc, #132]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013cec:	6811      	ldr	r1, [r2, #0]
 8013cee:	2380      	movs	r3, #128	; 0x80
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	430b      	orrs	r3, r1
 8013cf4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8013cf6:	f7fd ff53 	bl	8011ba0 <HAL_GetTick>
 8013cfa:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013cfc:	4b1c      	ldr	r3, [pc, #112]	; (8013d70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	05db      	lsls	r3, r3, #23
 8013d02:	d406      	bmi.n	8013d12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013d04:	f7fd ff4c 	bl	8011ba0 <HAL_GetTick>
 8013d08:	1b40      	subs	r0, r0, r5
 8013d0a:	2864      	cmp	r0, #100	; 0x64
 8013d0c:	d9f6      	bls.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8013d0e:	2003      	movs	r0, #3
 8013d10:	e7df      	b.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013d12:	4b14      	ldr	r3, [pc, #80]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013d14:	6a18      	ldr	r0, [r3, #32]
 8013d16:	4a17      	ldr	r2, [pc, #92]	; (8013d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013d18:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8013d1a:	6a1d      	ldr	r5, [r3, #32]
 8013d1c:	2180      	movs	r1, #128	; 0x80
 8013d1e:	0249      	lsls	r1, r1, #9
 8013d20:	4329      	orrs	r1, r5
 8013d22:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013d24:	6a19      	ldr	r1, [r3, #32]
 8013d26:	4d14      	ldr	r5, [pc, #80]	; (8013d78 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8013d28:	4029      	ands	r1, r5
 8013d2a:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8013d2c:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8013d2e:	0783      	lsls	r3, r0, #30
 8013d30:	d407      	bmi.n	8013d42 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013d32:	4a0c      	ldr	r2, [pc, #48]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013d34:	6a13      	ldr	r3, [r2, #32]
 8013d36:	490f      	ldr	r1, [pc, #60]	; (8013d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013d38:	400b      	ands	r3, r1
 8013d3a:	6861      	ldr	r1, [r4, #4]
 8013d3c:	430b      	orrs	r3, r1
 8013d3e:	6213      	str	r3, [r2, #32]
 8013d40:	e794      	b.n	8013c6c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8013d42:	f7fd ff2d 	bl	8011ba0 <HAL_GetTick>
 8013d46:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d48:	4b06      	ldr	r3, [pc, #24]	; (8013d64 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013d4a:	6a1b      	ldr	r3, [r3, #32]
 8013d4c:	079b      	lsls	r3, r3, #30
 8013d4e:	d4f0      	bmi.n	8013d32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013d50:	f7fd ff26 	bl	8011ba0 <HAL_GetTick>
 8013d54:	1b40      	subs	r0, r0, r5
 8013d56:	4b09      	ldr	r3, [pc, #36]	; (8013d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8013d58:	4298      	cmp	r0, r3
 8013d5a:	d9f5      	bls.n	8013d48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8013d5c:	2003      	movs	r0, #3
 8013d5e:	e7b8      	b.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8013d60:	2000      	movs	r0, #0
 8013d62:	e7b6      	b.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8013d64:	40021000 	.word	0x40021000
 8013d68:	fffcffff 	.word	0xfffcffff
 8013d6c:	fff3ffff 	.word	0xfff3ffff
 8013d70:	40007000 	.word	0x40007000
 8013d74:	fffffcff 	.word	0xfffffcff
 8013d78:	fffeffff 	.word	0xfffeffff
 8013d7c:	00001388 	.word	0x00001388

08013d80 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8013d80:	4770      	bx	lr

08013d82 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8013d82:	b570      	push	{r4, r5, r6, lr}
 8013d84:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013d86:	6802      	ldr	r2, [r0, #0]
 8013d88:	68d3      	ldr	r3, [r2, #12]
 8013d8a:	21a0      	movs	r1, #160	; 0xa0
 8013d8c:	438b      	bics	r3, r1
 8013d8e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8013d90:	f7fd ff06 	bl	8011ba0 <HAL_GetTick>
 8013d94:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013d96:	6823      	ldr	r3, [r4, #0]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	069b      	lsls	r3, r3, #26
 8013d9c:	d408      	bmi.n	8013db0 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013d9e:	f7fd feff 	bl	8011ba0 <HAL_GetTick>
 8013da2:	1b40      	subs	r0, r0, r5
 8013da4:	23fa      	movs	r3, #250	; 0xfa
 8013da6:	009b      	lsls	r3, r3, #2
 8013da8:	4298      	cmp	r0, r3
 8013daa:	d9f4      	bls.n	8013d96 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8013dac:	2003      	movs	r0, #3
 8013dae:	e000      	b.n	8013db2 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8013db0:	2000      	movs	r0, #0
}
 8013db2:	bd70      	pop	{r4, r5, r6, pc}

08013db4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8013db4:	b570      	push	{r4, r5, r6, lr}
 8013db6:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013db8:	6803      	ldr	r3, [r0, #0]
 8013dba:	68da      	ldr	r2, [r3, #12]
 8013dbc:	0652      	lsls	r2, r2, #25
 8013dbe:	d501      	bpl.n	8013dc4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8013dc0:	2000      	movs	r0, #0
}
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	4252      	negs	r2, r2
 8013dc8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8013dca:	f7fd fee9 	bl	8011ba0 <HAL_GetTick>
 8013dce:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	065b      	lsls	r3, r3, #25
 8013dd6:	d408      	bmi.n	8013dea <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013dd8:	f7fd fee2 	bl	8011ba0 <HAL_GetTick>
 8013ddc:	1b40      	subs	r0, r0, r5
 8013dde:	23fa      	movs	r3, #250	; 0xfa
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	4298      	cmp	r0, r3
 8013de4:	d9f4      	bls.n	8013dd0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8013de6:	2003      	movs	r0, #3
 8013de8:	e7eb      	b.n	8013dc2 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8013dea:	2000      	movs	r0, #0
 8013dec:	e7e9      	b.n	8013dc2 <RTC_EnterInitMode+0xe>
	...

08013df0 <HAL_RTC_Init>:
{
 8013df0:	b570      	push	{r4, r5, r6, lr}
 8013df2:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8013df4:	d046      	beq.n	8013e84 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8013df6:	7f43      	ldrb	r3, [r0, #29]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d038      	beq.n	8013e6e <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8013dfc:	2302      	movs	r3, #2
 8013dfe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e00:	6823      	ldr	r3, [r4, #0]
 8013e02:	22ca      	movs	r2, #202	; 0xca
 8013e04:	625a      	str	r2, [r3, #36]	; 0x24
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	3a77      	subs	r2, #119	; 0x77
 8013e0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013e0c:	0020      	movs	r0, r4
 8013e0e:	f7ff ffd1 	bl	8013db4 <RTC_EnterInitMode>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d12f      	bne.n	8013e76 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013e16:	6822      	ldr	r2, [r4, #0]
 8013e18:	6893      	ldr	r3, [r2, #8]
 8013e1a:	491b      	ldr	r1, [pc, #108]	; (8013e88 <HAL_RTC_Init+0x98>)
 8013e1c:	400b      	ands	r3, r1
 8013e1e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013e20:	6821      	ldr	r1, [r4, #0]
 8013e22:	688a      	ldr	r2, [r1, #8]
 8013e24:	6863      	ldr	r3, [r4, #4]
 8013e26:	6925      	ldr	r5, [r4, #16]
 8013e28:	432b      	orrs	r3, r5
 8013e2a:	6965      	ldr	r5, [r4, #20]
 8013e2c:	432b      	orrs	r3, r5
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013e32:	6823      	ldr	r3, [r4, #0]
 8013e34:	68e2      	ldr	r2, [r4, #12]
 8013e36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013e38:	6821      	ldr	r1, [r4, #0]
 8013e3a:	690b      	ldr	r3, [r1, #16]
 8013e3c:	68a2      	ldr	r2, [r4, #8]
 8013e3e:	0412      	lsls	r2, r2, #16
 8013e40:	4313      	orrs	r3, r2
 8013e42:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013e44:	6822      	ldr	r2, [r4, #0]
 8013e46:	68d3      	ldr	r3, [r2, #12]
 8013e48:	2180      	movs	r1, #128	; 0x80
 8013e4a:	438b      	bics	r3, r1
 8013e4c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8013e4e:	6822      	ldr	r2, [r4, #0]
 8013e50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013e52:	490e      	ldr	r1, [pc, #56]	; (8013e8c <HAL_RTC_Init+0x9c>)
 8013e54:	400b      	ands	r3, r1
 8013e56:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8013e58:	6822      	ldr	r2, [r4, #0]
 8013e5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013e5c:	69a1      	ldr	r1, [r4, #24]
 8013e5e:	430b      	orrs	r3, r1
 8013e60:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013e62:	6823      	ldr	r3, [r4, #0]
 8013e64:	22ff      	movs	r2, #255	; 0xff
 8013e66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	7763      	strb	r3, [r4, #29]
}
 8013e6c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8013e6e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013e70:	f7ff ff86 	bl	8013d80 <HAL_RTC_MspInit>
 8013e74:	e7c2      	b.n	8013dfc <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013e76:	6823      	ldr	r3, [r4, #0]
 8013e78:	22ff      	movs	r2, #255	; 0xff
 8013e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013e7c:	2304      	movs	r3, #4
 8013e7e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013e80:	2001      	movs	r0, #1
 8013e82:	e7f3      	b.n	8013e6c <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8013e84:	2001      	movs	r0, #1
 8013e86:	e7f1      	b.n	8013e6c <HAL_RTC_Init+0x7c>
 8013e88:	ff8fffbf 	.word	0xff8fffbf
 8013e8c:	fffbffff 	.word	0xfffbffff

08013e90 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8013e90:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8013e92:	e002      	b.n	8013e9a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8013e94:	3301      	adds	r3, #1
    Value -= 10;
 8013e96:	380a      	subs	r0, #10
 8013e98:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8013e9a:	2809      	cmp	r0, #9
 8013e9c:	d8fa      	bhi.n	8013e94 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8013e9e:	011b      	lsls	r3, r3, #4
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	4318      	orrs	r0, r3
}
 8013ea4:	4770      	bx	lr
	...

08013ea8 <HAL_RTC_SetTime>:
{
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eaa:	0004      	movs	r4, r0
 8013eac:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8013eae:	7f03      	ldrb	r3, [r0, #28]
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d100      	bne.n	8013eb6 <HAL_RTC_SetTime+0xe>
 8013eb4:	e070      	b.n	8013f98 <HAL_RTC_SetTime+0xf0>
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013eba:	3301      	adds	r3, #1
 8013ebc:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8013ebe:	2a00      	cmp	r2, #0
 8013ec0:	d141      	bne.n	8013f46 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013ec2:	6803      	ldr	r3, [r0, #0]
 8013ec4:	689b      	ldr	r3, [r3, #8]
 8013ec6:	065b      	lsls	r3, r3, #25
 8013ec8:	d401      	bmi.n	8013ece <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013ece:	7830      	ldrb	r0, [r6, #0]
 8013ed0:	f7ff ffde 	bl	8013e90 <RTC_ByteToBcd2>
 8013ed4:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013ed6:	7870      	ldrb	r0, [r6, #1]
 8013ed8:	f7ff ffda 	bl	8013e90 <RTC_ByteToBcd2>
 8013edc:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013ede:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8013ee0:	78b0      	ldrb	r0, [r6, #2]
 8013ee2:	f7ff ffd5 	bl	8013e90 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013ee6:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8013ee8:	7a30      	ldrb	r0, [r6, #8]
 8013eea:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013eec:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	22ca      	movs	r2, #202	; 0xca
 8013ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8013ef4:	6823      	ldr	r3, [r4, #0]
 8013ef6:	3a77      	subs	r2, #119	; 0x77
 8013ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013efa:	0020      	movs	r0, r4
 8013efc:	f7ff ff5a 	bl	8013db4 <RTC_EnterInitMode>
 8013f00:	1e07      	subs	r7, r0, #0
 8013f02:	d131      	bne.n	8013f68 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	4825      	ldr	r0, [pc, #148]	; (8013f9c <HAL_RTC_SetTime+0xf4>)
 8013f08:	4005      	ands	r5, r0
 8013f0a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013f0c:	6822      	ldr	r2, [r4, #0]
 8013f0e:	6893      	ldr	r3, [r2, #8]
 8013f10:	4923      	ldr	r1, [pc, #140]	; (8013fa0 <HAL_RTC_SetTime+0xf8>)
 8013f12:	400b      	ands	r3, r1
 8013f14:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013f16:	6821      	ldr	r1, [r4, #0]
 8013f18:	688b      	ldr	r3, [r1, #8]
 8013f1a:	68f2      	ldr	r2, [r6, #12]
 8013f1c:	6930      	ldr	r0, [r6, #16]
 8013f1e:	4302      	orrs	r2, r0
 8013f20:	4313      	orrs	r3, r2
 8013f22:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013f24:	6822      	ldr	r2, [r4, #0]
 8013f26:	68d3      	ldr	r3, [r2, #12]
 8013f28:	2180      	movs	r1, #128	; 0x80
 8013f2a:	438b      	bics	r3, r1
 8013f2c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013f2e:	6823      	ldr	r3, [r4, #0]
 8013f30:	689b      	ldr	r3, [r3, #8]
 8013f32:	069b      	lsls	r3, r3, #26
 8013f34:	d522      	bpl.n	8013f7c <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	22ff      	movs	r2, #255	; 0xff
 8013f3a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013f40:	2300      	movs	r3, #0
 8013f42:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8013f44:	e018      	b.n	8013f78 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013f46:	6803      	ldr	r3, [r0, #0]
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	065b      	lsls	r3, r3, #25
 8013f4c:	d401      	bmi.n	8013f52 <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013f52:	7835      	ldrb	r5, [r6, #0]
 8013f54:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013f56:	7870      	ldrb	r0, [r6, #1]
 8013f58:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013f5a:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8013f5c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013f5e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8013f60:	7a30      	ldrb	r0, [r6, #8]
 8013f62:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013f64:	4305      	orrs	r5, r0
 8013f66:	e7c2      	b.n	8013eee <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013f68:	6823      	ldr	r3, [r4, #0]
 8013f6a:	22ff      	movs	r2, #255	; 0xff
 8013f6c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013f6e:	2304      	movs	r3, #4
 8013f70:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013f72:	2300      	movs	r3, #0
 8013f74:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013f76:	2701      	movs	r7, #1
}
 8013f78:	0038      	movs	r0, r7
 8013f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013f7c:	0020      	movs	r0, r4
 8013f7e:	f7ff ff00 	bl	8013d82 <HAL_RTC_WaitForSynchro>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d0d7      	beq.n	8013f36 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013f86:	6823      	ldr	r3, [r4, #0]
 8013f88:	22ff      	movs	r2, #255	; 0xff
 8013f8a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013f8c:	2304      	movs	r3, #4
 8013f8e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013f90:	2300      	movs	r3, #0
 8013f92:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013f94:	2701      	movs	r7, #1
 8013f96:	e7ef      	b.n	8013f78 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8013f98:	2702      	movs	r7, #2
 8013f9a:	e7ed      	b.n	8013f78 <HAL_RTC_SetTime+0xd0>
 8013f9c:	007f7f7f 	.word	0x007f7f7f
 8013fa0:	fffbffff 	.word	0xfffbffff

08013fa4 <HAL_RTC_SetDate>:
{
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	0004      	movs	r4, r0
 8013fa8:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8013faa:	7f03      	ldrb	r3, [r0, #28]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d061      	beq.n	8014074 <HAL_RTC_SetDate+0xd0>
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013fb8:	2a00      	cmp	r2, #0
 8013fba:	d106      	bne.n	8013fca <HAL_RTC_SetDate+0x26>
 8013fbc:	784b      	ldrb	r3, [r1, #1]
 8013fbe:	06d9      	lsls	r1, r3, #27
 8013fc0:	d503      	bpl.n	8013fca <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8013fc2:	2110      	movs	r1, #16
 8013fc4:	438b      	bics	r3, r1
 8013fc6:	330a      	adds	r3, #10
 8013fc8:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8013fca:	2a00      	cmp	r2, #0
 8013fcc:	d12f      	bne.n	801402e <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013fce:	78f0      	ldrb	r0, [r6, #3]
 8013fd0:	f7ff ff5e 	bl	8013e90 <RTC_ByteToBcd2>
 8013fd4:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013fd6:	7870      	ldrb	r0, [r6, #1]
 8013fd8:	f7ff ff5a 	bl	8013e90 <RTC_ByteToBcd2>
 8013fdc:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013fde:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8013fe0:	78b0      	ldrb	r0, [r6, #2]
 8013fe2:	f7ff ff55 	bl	8013e90 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013fe6:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8013fe8:	7830      	ldrb	r0, [r6, #0]
 8013fea:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013fec:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	22ca      	movs	r2, #202	; 0xca
 8013ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8013ff4:	6823      	ldr	r3, [r4, #0]
 8013ff6:	3a77      	subs	r2, #119	; 0x77
 8013ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013ffa:	0020      	movs	r0, r4
 8013ffc:	f7ff feda 	bl	8013db4 <RTC_EnterInitMode>
 8014000:	1e06      	subs	r6, r0, #0
 8014002:	d11f      	bne.n	8014044 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	481c      	ldr	r0, [pc, #112]	; (8014078 <HAL_RTC_SetDate+0xd4>)
 8014008:	4005      	ands	r5, r0
 801400a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801400c:	6822      	ldr	r2, [r4, #0]
 801400e:	68d3      	ldr	r3, [r2, #12]
 8014010:	2180      	movs	r1, #128	; 0x80
 8014012:	438b      	bics	r3, r1
 8014014:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	069b      	lsls	r3, r3, #26
 801401c:	d51c      	bpl.n	8014058 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801401e:	6823      	ldr	r3, [r4, #0]
 8014020:	22ff      	movs	r2, #255	; 0xff
 8014022:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8014024:	2301      	movs	r3, #1
 8014026:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8014028:	2300      	movs	r3, #0
 801402a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 801402c:	e012      	b.n	8014054 <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 801402e:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8014030:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014032:	78f5      	ldrb	r5, [r6, #3]
 8014034:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8014036:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014038:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 801403a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801403c:	7830      	ldrb	r0, [r6, #0]
 801403e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014040:	4305      	orrs	r5, r0
 8014042:	e7d4      	b.n	8013fee <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	22ff      	movs	r2, #255	; 0xff
 8014048:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801404a:	2304      	movs	r3, #4
 801404c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801404e:	2300      	movs	r3, #0
 8014050:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8014052:	2601      	movs	r6, #1
}
 8014054:	0030      	movs	r0, r6
 8014056:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014058:	0020      	movs	r0, r4
 801405a:	f7ff fe92 	bl	8013d82 <HAL_RTC_WaitForSynchro>
 801405e:	2800      	cmp	r0, #0
 8014060:	d0dd      	beq.n	801401e <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8014062:	6823      	ldr	r3, [r4, #0]
 8014064:	22ff      	movs	r2, #255	; 0xff
 8014066:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8014068:	2304      	movs	r3, #4
 801406a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801406c:	2300      	movs	r3, #0
 801406e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8014070:	2601      	movs	r6, #1
 8014072:	e7ef      	b.n	8014054 <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 8014074:	2602      	movs	r6, #2
 8014076:	e7ed      	b.n	8014054 <HAL_RTC_SetDate+0xb0>
 8014078:	00ffff3f 	.word	0x00ffff3f

0801407c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801407c:	0902      	lsrs	r2, r0, #4
 801407e:	0093      	lsls	r3, r2, #2
 8014080:	189b      	adds	r3, r3, r2
 8014082:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8014084:	230f      	movs	r3, #15
 8014086:	4018      	ands	r0, r3
 8014088:	1880      	adds	r0, r0, r2
 801408a:	b2c0      	uxtb	r0, r0
}
 801408c:	4770      	bx	lr
	...

08014090 <HAL_RTC_GetTime>:
{
 8014090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014092:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8014094:	6803      	ldr	r3, [r0, #0]
 8014096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014098:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801409a:	6803      	ldr	r3, [r0, #0]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	490f      	ldr	r1, [pc, #60]	; (80140dc <HAL_RTC_GetTime+0x4c>)
 80140a0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80140a2:	0c1d      	lsrs	r5, r3, #16
 80140a4:	203f      	movs	r0, #63	; 0x3f
 80140a6:	4028      	ands	r0, r5
 80140a8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80140aa:	0a1e      	lsrs	r6, r3, #8
 80140ac:	277f      	movs	r7, #127	; 0x7f
 80140ae:	403e      	ands	r6, r7
 80140b0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80140b2:	401f      	ands	r7, r3
 80140b4:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80140b6:	2140      	movs	r1, #64	; 0x40
 80140b8:	4029      	ands	r1, r5
 80140ba:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80140bc:	2a00      	cmp	r2, #0
 80140be:	d10a      	bne.n	80140d6 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80140c0:	f7ff ffdc 	bl	801407c <RTC_Bcd2ToByte>
 80140c4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80140c6:	0030      	movs	r0, r6
 80140c8:	f7ff ffd8 	bl	801407c <RTC_Bcd2ToByte>
 80140cc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80140ce:	0038      	movs	r0, r7
 80140d0:	f7ff ffd4 	bl	801407c <RTC_Bcd2ToByte>
 80140d4:	70a0      	strb	r0, [r4, #2]
}
 80140d6:	2000      	movs	r0, #0
 80140d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140da:	46c0      	nop			; (mov r8, r8)
 80140dc:	007f7f7f 	.word	0x007f7f7f

080140e0 <HAL_RTC_GetDate>:
{
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80140e4:	6803      	ldr	r3, [r0, #0]
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	490e      	ldr	r1, [pc, #56]	; (8014124 <HAL_RTC_GetDate+0x44>)
 80140ea:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80140ec:	0c18      	lsrs	r0, r3, #16
 80140ee:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80140f0:	0a19      	lsrs	r1, r3, #8
 80140f2:	261f      	movs	r6, #31
 80140f4:	400e      	ands	r6, r1
 80140f6:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80140f8:	253f      	movs	r5, #63	; 0x3f
 80140fa:	401d      	ands	r5, r3
 80140fc:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80140fe:	0b5b      	lsrs	r3, r3, #13
 8014100:	2107      	movs	r1, #7
 8014102:	400b      	ands	r3, r1
 8014104:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8014106:	2a00      	cmp	r2, #0
 8014108:	d10a      	bne.n	8014120 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801410a:	f7ff ffb7 	bl	801407c <RTC_Bcd2ToByte>
 801410e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8014110:	0030      	movs	r0, r6
 8014112:	f7ff ffb3 	bl	801407c <RTC_Bcd2ToByte>
 8014116:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8014118:	0028      	movs	r0, r5
 801411a:	f7ff ffaf 	bl	801407c <RTC_Bcd2ToByte>
 801411e:	70a0      	strb	r0, [r4, #2]
}
 8014120:	2000      	movs	r0, #0
 8014122:	bd70      	pop	{r4, r5, r6, pc}
 8014124:	00ffff3f 	.word	0x00ffff3f

08014128 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014128:	6803      	ldr	r3, [r0, #0]
 801412a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801412c:	0089      	lsls	r1, r1, #2
 801412e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8014130:	600a      	str	r2, [r1, #0]
}
 8014132:	4770      	bx	lr

08014134 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014134:	6803      	ldr	r3, [r0, #0]
 8014136:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8014138:	0089      	lsls	r1, r1, #2
 801413a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801413c:	6808      	ldr	r0, [r1, #0]
}
 801413e:	4770      	bx	lr

08014140 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014140:	4770      	bx	lr

08014142 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014142:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8014144:	2239      	movs	r2, #57	; 0x39
 8014146:	2302      	movs	r3, #2
 8014148:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801414a:	6804      	ldr	r4, [r0, #0]
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	2101      	movs	r1, #1
 8014150:	430b      	orrs	r3, r1
 8014152:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8014154:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8014156:	2000      	movs	r0, #0
 8014158:	bd10      	pop	{r4, pc}
	...

0801415c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801415c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801415e:	4a1f      	ldr	r2, [pc, #124]	; (80141dc <TIM_Base_SetConfig+0x80>)
 8014160:	4290      	cmp	r0, r2
 8014162:	d006      	beq.n	8014172 <TIM_Base_SetConfig+0x16>
 8014164:	2280      	movs	r2, #128	; 0x80
 8014166:	05d2      	lsls	r2, r2, #23
 8014168:	4290      	cmp	r0, r2
 801416a:	d002      	beq.n	8014172 <TIM_Base_SetConfig+0x16>
 801416c:	4a1c      	ldr	r2, [pc, #112]	; (80141e0 <TIM_Base_SetConfig+0x84>)
 801416e:	4290      	cmp	r0, r2
 8014170:	d103      	bne.n	801417a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014172:	2270      	movs	r2, #112	; 0x70
 8014174:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8014176:	684a      	ldr	r2, [r1, #4]
 8014178:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801417a:	4a18      	ldr	r2, [pc, #96]	; (80141dc <TIM_Base_SetConfig+0x80>)
 801417c:	4290      	cmp	r0, r2
 801417e:	d012      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 8014180:	2280      	movs	r2, #128	; 0x80
 8014182:	05d2      	lsls	r2, r2, #23
 8014184:	4290      	cmp	r0, r2
 8014186:	d00e      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 8014188:	4a15      	ldr	r2, [pc, #84]	; (80141e0 <TIM_Base_SetConfig+0x84>)
 801418a:	4290      	cmp	r0, r2
 801418c:	d00b      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 801418e:	4a15      	ldr	r2, [pc, #84]	; (80141e4 <TIM_Base_SetConfig+0x88>)
 8014190:	4290      	cmp	r0, r2
 8014192:	d008      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 8014194:	4a14      	ldr	r2, [pc, #80]	; (80141e8 <TIM_Base_SetConfig+0x8c>)
 8014196:	4290      	cmp	r0, r2
 8014198:	d005      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 801419a:	4a14      	ldr	r2, [pc, #80]	; (80141ec <TIM_Base_SetConfig+0x90>)
 801419c:	4290      	cmp	r0, r2
 801419e:	d002      	beq.n	80141a6 <TIM_Base_SetConfig+0x4a>
 80141a0:	4a13      	ldr	r2, [pc, #76]	; (80141f0 <TIM_Base_SetConfig+0x94>)
 80141a2:	4290      	cmp	r0, r2
 80141a4:	d103      	bne.n	80141ae <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80141a6:	4a13      	ldr	r2, [pc, #76]	; (80141f4 <TIM_Base_SetConfig+0x98>)
 80141a8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80141aa:	68ca      	ldr	r2, [r1, #12]
 80141ac:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80141ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80141b0:	688b      	ldr	r3, [r1, #8]
 80141b2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80141b4:	680b      	ldr	r3, [r1, #0]
 80141b6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80141b8:	4b08      	ldr	r3, [pc, #32]	; (80141dc <TIM_Base_SetConfig+0x80>)
 80141ba:	4298      	cmp	r0, r3
 80141bc:	d008      	beq.n	80141d0 <TIM_Base_SetConfig+0x74>
 80141be:	4b0a      	ldr	r3, [pc, #40]	; (80141e8 <TIM_Base_SetConfig+0x8c>)
 80141c0:	4298      	cmp	r0, r3
 80141c2:	d005      	beq.n	80141d0 <TIM_Base_SetConfig+0x74>
 80141c4:	4b09      	ldr	r3, [pc, #36]	; (80141ec <TIM_Base_SetConfig+0x90>)
 80141c6:	4298      	cmp	r0, r3
 80141c8:	d002      	beq.n	80141d0 <TIM_Base_SetConfig+0x74>
 80141ca:	4b09      	ldr	r3, [pc, #36]	; (80141f0 <TIM_Base_SetConfig+0x94>)
 80141cc:	4298      	cmp	r0, r3
 80141ce:	d101      	bne.n	80141d4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80141d0:	690b      	ldr	r3, [r1, #16]
 80141d2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80141d4:	2301      	movs	r3, #1
 80141d6:	6143      	str	r3, [r0, #20]
}
 80141d8:	4770      	bx	lr
 80141da:	46c0      	nop			; (mov r8, r8)
 80141dc:	40012c00 	.word	0x40012c00
 80141e0:	40000400 	.word	0x40000400
 80141e4:	40002000 	.word	0x40002000
 80141e8:	40014000 	.word	0x40014000
 80141ec:	40014400 	.word	0x40014400
 80141f0:	40014800 	.word	0x40014800
 80141f4:	fffffcff 	.word	0xfffffcff

080141f8 <HAL_TIM_Base_Init>:
{
 80141f8:	b570      	push	{r4, r5, r6, lr}
 80141fa:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80141fc:	d014      	beq.n	8014228 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80141fe:	2339      	movs	r3, #57	; 0x39
 8014200:	5cc3      	ldrb	r3, [r0, r3]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00a      	beq.n	801421c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8014206:	2539      	movs	r5, #57	; 0x39
 8014208:	2302      	movs	r3, #2
 801420a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801420c:	1d21      	adds	r1, r4, #4
 801420e:	6820      	ldr	r0, [r4, #0]
 8014210:	f7ff ffa4 	bl	801415c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8014214:	2301      	movs	r3, #1
 8014216:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8014218:	2000      	movs	r0, #0
}
 801421a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801421c:	3338      	adds	r3, #56	; 0x38
 801421e:	2200      	movs	r2, #0
 8014220:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8014222:	f7ff ff8d 	bl	8014140 <HAL_TIM_Base_MspInit>
 8014226:	e7ee      	b.n	8014206 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8014228:	2001      	movs	r0, #1
 801422a:	e7f6      	b.n	801421a <HAL_TIM_Base_Init+0x22>

0801422c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 801422c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801422e:	2338      	movs	r3, #56	; 0x38
 8014230:	5cc3      	ldrb	r3, [r0, r3]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d01e      	beq.n	8014274 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8014236:	2238      	movs	r2, #56	; 0x38
 8014238:	2501      	movs	r5, #1
 801423a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 801423c:	2439      	movs	r4, #57	; 0x39
 801423e:	2302      	movs	r3, #2
 8014240:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8014242:	6806      	ldr	r6, [r0, #0]
 8014244:	6873      	ldr	r3, [r6, #4]
 8014246:	2770      	movs	r7, #112	; 0x70
 8014248:	43bb      	bics	r3, r7
 801424a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801424c:	6806      	ldr	r6, [r0, #0]
 801424e:	6873      	ldr	r3, [r6, #4]
 8014250:	680f      	ldr	r7, [r1, #0]
 8014252:	433b      	orrs	r3, r7
 8014254:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8014256:	6806      	ldr	r6, [r0, #0]
 8014258:	68b3      	ldr	r3, [r6, #8]
 801425a:	2780      	movs	r7, #128	; 0x80
 801425c:	43bb      	bics	r3, r7
 801425e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8014260:	6806      	ldr	r6, [r0, #0]
 8014262:	68b3      	ldr	r3, [r6, #8]
 8014264:	6849      	ldr	r1, [r1, #4]
 8014266:	430b      	orrs	r3, r1
 8014268:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 801426a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 801426c:	2300      	movs	r3, #0
 801426e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8014270:	2000      	movs	r0, #0
}
 8014272:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8014274:	2002      	movs	r0, #2
 8014276:	e7fc      	b.n	8014272 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08014278 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8014278:	4770      	bx	lr

0801427a <HAL_UART_DeInit>:
{
 801427a:	b570      	push	{r4, r5, r6, lr}
 801427c:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801427e:	d016      	beq.n	80142ae <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8014280:	2669      	movs	r6, #105	; 0x69
 8014282:	2302      	movs	r3, #2
 8014284:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8014286:	6802      	ldr	r2, [r0, #0]
 8014288:	6813      	ldr	r3, [r2, #0]
 801428a:	2101      	movs	r1, #1
 801428c:	438b      	bics	r3, r1
 801428e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8014290:	6803      	ldr	r3, [r0, #0]
 8014292:	2500      	movs	r5, #0
 8014294:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8014296:	6803      	ldr	r3, [r0, #0]
 8014298:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801429a:	6803      	ldr	r3, [r0, #0]
 801429c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801429e:	f7ff ffeb 	bl	8014278 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142a2:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80142a4:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80142a6:	2368      	movs	r3, #104	; 0x68
 80142a8:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80142aa:	2000      	movs	r0, #0
}
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80142ae:	2001      	movs	r0, #1
 80142b0:	e7fc      	b.n	80142ac <HAL_UART_DeInit+0x32>

080142b2 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80142b2:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80142b4:	2369      	movs	r3, #105	; 0x69
 80142b6:	5cc3      	ldrb	r3, [r0, r3]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d003      	beq.n	80142c4 <HAL_UART_Transmit_IT+0x12>
 80142bc:	2369      	movs	r3, #105	; 0x69
 80142be:	5cc3      	ldrb	r3, [r0, r3]
 80142c0:	2b22      	cmp	r3, #34	; 0x22
 80142c2:	d12b      	bne.n	801431c <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 80142c4:	2900      	cmp	r1, #0
 80142c6:	d02b      	beq.n	8014320 <HAL_UART_Transmit_IT+0x6e>
 80142c8:	2a00      	cmp	r2, #0
 80142ca:	d02b      	beq.n	8014324 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80142cc:	2368      	movs	r3, #104	; 0x68
 80142ce:	5cc3      	ldrb	r3, [r0, r3]
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	d029      	beq.n	8014328 <HAL_UART_Transmit_IT+0x76>
 80142d4:	2368      	movs	r3, #104	; 0x68
 80142d6:	2401      	movs	r4, #1
 80142d8:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 80142da:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80142dc:	3b18      	subs	r3, #24
 80142de:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80142e0:	3302      	adds	r3, #2
 80142e2:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142e4:	2300      	movs	r3, #0
 80142e6:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80142e8:	3369      	adds	r3, #105	; 0x69
 80142ea:	5cc3      	ldrb	r3, [r0, r3]
 80142ec:	2b22      	cmp	r3, #34	; 0x22
 80142ee:	d011      	beq.n	8014314 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80142f0:	2369      	movs	r3, #105	; 0x69
 80142f2:	2212      	movs	r2, #18
 80142f4:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80142f6:	6802      	ldr	r2, [r0, #0]
 80142f8:	6893      	ldr	r3, [r2, #8]
 80142fa:	2101      	movs	r1, #1
 80142fc:	430b      	orrs	r3, r1
 80142fe:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014300:	2368      	movs	r3, #104	; 0x68
 8014302:	2200      	movs	r2, #0
 8014304:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8014306:	6802      	ldr	r2, [r0, #0]
 8014308:	6813      	ldr	r3, [r2, #0]
 801430a:	317f      	adds	r1, #127	; 0x7f
 801430c:	430b      	orrs	r3, r1
 801430e:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8014310:	2000      	movs	r0, #0
 8014312:	e004      	b.n	801431e <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014314:	3347      	adds	r3, #71	; 0x47
 8014316:	2232      	movs	r2, #50	; 0x32
 8014318:	54c2      	strb	r2, [r0, r3]
 801431a:	e7ec      	b.n	80142f6 <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 801431c:	2002      	movs	r0, #2
  }
}
 801431e:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8014320:	2001      	movs	r0, #1
 8014322:	e7fc      	b.n	801431e <HAL_UART_Transmit_IT+0x6c>
 8014324:	2001      	movs	r0, #1
 8014326:	e7fa      	b.n	801431e <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8014328:	2002      	movs	r0, #2
 801432a:	e7f8      	b.n	801431e <HAL_UART_Transmit_IT+0x6c>

0801432c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801432c:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801432e:	2369      	movs	r3, #105	; 0x69
 8014330:	5cc3      	ldrb	r3, [r0, r3]
 8014332:	2b01      	cmp	r3, #1
 8014334:	d003      	beq.n	801433e <HAL_UART_Receive_IT+0x12>
 8014336:	2369      	movs	r3, #105	; 0x69
 8014338:	5cc3      	ldrb	r3, [r0, r3]
 801433a:	2b12      	cmp	r3, #18
 801433c:	d15d      	bne.n	80143fa <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801433e:	2900      	cmp	r1, #0
 8014340:	d05d      	beq.n	80143fe <HAL_UART_Receive_IT+0xd2>
 8014342:	2a00      	cmp	r2, #0
 8014344:	d05d      	beq.n	8014402 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014346:	2368      	movs	r3, #104	; 0x68
 8014348:	5cc3      	ldrb	r3, [r0, r3]
 801434a:	2b01      	cmp	r3, #1
 801434c:	d05b      	beq.n	8014406 <HAL_UART_Receive_IT+0xda>
 801434e:	2368      	movs	r3, #104	; 0x68
 8014350:	2401      	movs	r4, #1
 8014352:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8014354:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8014356:	3b10      	subs	r3, #16
 8014358:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801435a:	3302      	adds	r3, #2
 801435c:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801435e:	6883      	ldr	r3, [r0, #8]
 8014360:	2280      	movs	r2, #128	; 0x80
 8014362:	0152      	lsls	r2, r2, #5
 8014364:	4293      	cmp	r3, r2
 8014366:	d008      	beq.n	801437a <HAL_UART_Receive_IT+0x4e>
 8014368:	2b00      	cmp	r3, #0
 801436a:	d115      	bne.n	8014398 <HAL_UART_Receive_IT+0x6c>
 801436c:	6903      	ldr	r3, [r0, #16]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d10e      	bne.n	8014390 <HAL_UART_Receive_IT+0x64>
 8014372:	335c      	adds	r3, #92	; 0x5c
 8014374:	22ff      	movs	r2, #255	; 0xff
 8014376:	52c2      	strh	r2, [r0, r3]
 8014378:	e012      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
 801437a:	6903      	ldr	r3, [r0, #16]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d103      	bne.n	8014388 <HAL_UART_Receive_IT+0x5c>
 8014380:	335c      	adds	r3, #92	; 0x5c
 8014382:	4a22      	ldr	r2, [pc, #136]	; (801440c <HAL_UART_Receive_IT+0xe0>)
 8014384:	52c2      	strh	r2, [r0, r3]
 8014386:	e00b      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
 8014388:	235c      	movs	r3, #92	; 0x5c
 801438a:	22ff      	movs	r2, #255	; 0xff
 801438c:	52c2      	strh	r2, [r0, r3]
 801438e:	e007      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
 8014390:	235c      	movs	r3, #92	; 0x5c
 8014392:	227f      	movs	r2, #127	; 0x7f
 8014394:	52c2      	strh	r2, [r0, r3]
 8014396:	e003      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
 8014398:	2280      	movs	r2, #128	; 0x80
 801439a:	0552      	lsls	r2, r2, #21
 801439c:	4293      	cmp	r3, r2
 801439e:	d01d      	beq.n	80143dc <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143a0:	2300      	movs	r3, #0
 80143a2:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80143a4:	3369      	adds	r3, #105	; 0x69
 80143a6:	5cc3      	ldrb	r3, [r0, r3]
 80143a8:	2b12      	cmp	r3, #18
 80143aa:	d022      	beq.n	80143f2 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80143ac:	2369      	movs	r3, #105	; 0x69
 80143ae:	2222      	movs	r2, #34	; 0x22
 80143b0:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80143b2:	6802      	ldr	r2, [r0, #0]
 80143b4:	6811      	ldr	r1, [r2, #0]
 80143b6:	2380      	movs	r3, #128	; 0x80
 80143b8:	005b      	lsls	r3, r3, #1
 80143ba:	430b      	orrs	r3, r1
 80143bc:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80143be:	6802      	ldr	r2, [r0, #0]
 80143c0:	6893      	ldr	r3, [r2, #8]
 80143c2:	2101      	movs	r1, #1
 80143c4:	430b      	orrs	r3, r1
 80143c6:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80143c8:	2368      	movs	r3, #104	; 0x68
 80143ca:	2200      	movs	r2, #0
 80143cc:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80143ce:	6802      	ldr	r2, [r0, #0]
 80143d0:	6813      	ldr	r3, [r2, #0]
 80143d2:	311f      	adds	r1, #31
 80143d4:	430b      	orrs	r3, r1
 80143d6:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80143d8:	2000      	movs	r0, #0
 80143da:	e00f      	b.n	80143fc <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 80143dc:	6903      	ldr	r3, [r0, #16]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d103      	bne.n	80143ea <HAL_UART_Receive_IT+0xbe>
 80143e2:	335c      	adds	r3, #92	; 0x5c
 80143e4:	227f      	movs	r2, #127	; 0x7f
 80143e6:	52c2      	strh	r2, [r0, r3]
 80143e8:	e7da      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
 80143ea:	235c      	movs	r3, #92	; 0x5c
 80143ec:	223f      	movs	r2, #63	; 0x3f
 80143ee:	52c2      	strh	r2, [r0, r3]
 80143f0:	e7d6      	b.n	80143a0 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80143f2:	3357      	adds	r3, #87	; 0x57
 80143f4:	2232      	movs	r2, #50	; 0x32
 80143f6:	54c2      	strb	r2, [r0, r3]
 80143f8:	e7db      	b.n	80143b2 <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 80143fa:	2002      	movs	r0, #2
  }
}
 80143fc:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80143fe:	2001      	movs	r0, #1
 8014400:	e7fc      	b.n	80143fc <HAL_UART_Receive_IT+0xd0>
 8014402:	2001      	movs	r0, #1
 8014404:	e7fa      	b.n	80143fc <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 8014406:	2002      	movs	r0, #2
 8014408:	e7f8      	b.n	80143fc <HAL_UART_Receive_IT+0xd0>
 801440a:	46c0      	nop			; (mov r8, r8)
 801440c:	000001ff 	.word	0x000001ff

08014410 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014410:	b510      	push	{r4, lr}
 8014412:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014414:	2369      	movs	r3, #105	; 0x69
 8014416:	5cc3      	ldrb	r3, [r0, r3]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d003      	beq.n	8014424 <HAL_UART_Transmit_DMA+0x14>
 801441c:	2369      	movs	r3, #105	; 0x69
 801441e:	5cc3      	ldrb	r3, [r0, r3]
 8014420:	2b22      	cmp	r3, #34	; 0x22
 8014422:	d139      	bne.n	8014498 <HAL_UART_Transmit_DMA+0x88>
  {
    if((pData == NULL ) || (Size == 0))
 8014424:	2900      	cmp	r1, #0
 8014426:	d039      	beq.n	801449c <HAL_UART_Transmit_DMA+0x8c>
 8014428:	2a00      	cmp	r2, #0
 801442a:	d039      	beq.n	80144a0 <HAL_UART_Transmit_DMA+0x90>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801442c:	2368      	movs	r3, #104	; 0x68
 801442e:	5ce3      	ldrb	r3, [r4, r3]
 8014430:	2b01      	cmp	r3, #1
 8014432:	d037      	beq.n	80144a4 <HAL_UART_Transmit_DMA+0x94>
 8014434:	2368      	movs	r3, #104	; 0x68
 8014436:	2001      	movs	r0, #1
 8014438:	54e0      	strb	r0, [r4, r3]

    huart->pTxBuffPtr = pData;
 801443a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801443c:	3b18      	subs	r3, #24
 801443e:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8014440:	3302      	adds	r3, #2
 8014442:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014444:	2300      	movs	r3, #0
 8014446:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014448:	3369      	adds	r3, #105	; 0x69
 801444a:	5ce3      	ldrb	r3, [r4, r3]
 801444c:	2b22      	cmp	r3, #34	; 0x22
 801444e:	d01f      	beq.n	8014490 <HAL_UART_Transmit_DMA+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014450:	2369      	movs	r3, #105	; 0x69
 8014452:	2012      	movs	r0, #18
 8014454:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014456:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8014458:	4813      	ldr	r0, [pc, #76]	; (80144a8 <HAL_UART_Transmit_DMA+0x98>)
 801445a:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801445c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801445e:	4813      	ldr	r0, [pc, #76]	; (80144ac <HAL_UART_Transmit_DMA+0x9c>)
 8014460:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014462:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8014464:	4812      	ldr	r0, [pc, #72]	; (80144b0 <HAL_UART_Transmit_DMA+0xa0>)
 8014466:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	3028      	adds	r0, #40	; 0x28
 801446c:	0013      	movs	r3, r2
 801446e:	0002      	movs	r2, r0
 8014470:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014472:	f7fe f89f 	bl	80125b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	2240      	movs	r2, #64	; 0x40
 801447a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801447c:	6822      	ldr	r2, [r4, #0]
 801447e:	6893      	ldr	r3, [r2, #8]
 8014480:	2180      	movs	r1, #128	; 0x80
 8014482:	430b      	orrs	r3, r1
 8014484:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014486:	2368      	movs	r3, #104	; 0x68
 8014488:	2200      	movs	r2, #0
 801448a:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 801448c:	2000      	movs	r0, #0
 801448e:	e004      	b.n	801449a <HAL_UART_Transmit_DMA+0x8a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014490:	3347      	adds	r3, #71	; 0x47
 8014492:	3031      	adds	r0, #49	; 0x31
 8014494:	54e0      	strb	r0, [r4, r3]
 8014496:	e7de      	b.n	8014456 <HAL_UART_Transmit_DMA+0x46>
  }
  else
  {
    return HAL_BUSY;
 8014498:	2002      	movs	r0, #2
  }
}
 801449a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801449c:	2001      	movs	r0, #1
 801449e:	e7fc      	b.n	801449a <HAL_UART_Transmit_DMA+0x8a>
 80144a0:	2001      	movs	r0, #1
 80144a2:	e7fa      	b.n	801449a <HAL_UART_Transmit_DMA+0x8a>
    __HAL_LOCK(huart);
 80144a4:	2002      	movs	r0, #2
 80144a6:	e7f8      	b.n	801449a <HAL_UART_Transmit_DMA+0x8a>
 80144a8:	08014551 	.word	0x08014551
 80144ac:	08014583 	.word	0x08014583
 80144b0:	080145d3 	.word	0x080145d3

080144b4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80144b4:	b510      	push	{r4, lr}
 80144b6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80144b8:	2069      	movs	r0, #105	; 0x69
 80144ba:	5c20      	ldrb	r0, [r4, r0]
 80144bc:	2801      	cmp	r0, #1
 80144be:	d003      	beq.n	80144c8 <HAL_UART_Receive_DMA+0x14>
 80144c0:	2369      	movs	r3, #105	; 0x69
 80144c2:	5ce3      	ldrb	r3, [r4, r3]
 80144c4:	2b12      	cmp	r3, #18
 80144c6:	d135      	bne.n	8014534 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 80144c8:	2900      	cmp	r1, #0
 80144ca:	d035      	beq.n	8014538 <HAL_UART_Receive_DMA+0x84>
 80144cc:	2a00      	cmp	r2, #0
 80144ce:	d035      	beq.n	801453c <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80144d0:	2368      	movs	r3, #104	; 0x68
 80144d2:	5ce3      	ldrb	r3, [r4, r3]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d033      	beq.n	8014540 <HAL_UART_Receive_DMA+0x8c>
 80144d8:	2368      	movs	r3, #104	; 0x68
 80144da:	2001      	movs	r0, #1
 80144dc:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 80144de:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80144e0:	3b10      	subs	r3, #16
 80144e2:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144e4:	2300      	movs	r3, #0
 80144e6:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80144e8:	3369      	adds	r3, #105	; 0x69
 80144ea:	5ce3      	ldrb	r3, [r4, r3]
 80144ec:	2b12      	cmp	r3, #18
 80144ee:	d01d      	beq.n	801452c <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80144f0:	2369      	movs	r3, #105	; 0x69
 80144f2:	2022      	movs	r0, #34	; 0x22
 80144f4:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80144f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144f8:	4812      	ldr	r0, [pc, #72]	; (8014544 <HAL_UART_Receive_DMA+0x90>)
 80144fa:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80144fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144fe:	4812      	ldr	r0, [pc, #72]	; (8014548 <HAL_UART_Receive_DMA+0x94>)
 8014500:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014504:	4811      	ldr	r0, [pc, #68]	; (801454c <HAL_UART_Receive_DMA+0x98>)
 8014506:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8014508:	6820      	ldr	r0, [r4, #0]
 801450a:	3024      	adds	r0, #36	; 0x24
 801450c:	0013      	movs	r3, r2
 801450e:	000a      	movs	r2, r1
 8014510:	0001      	movs	r1, r0
 8014512:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8014514:	f7fe f84e 	bl	80125b4 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8014518:	6822      	ldr	r2, [r4, #0]
 801451a:	6893      	ldr	r3, [r2, #8]
 801451c:	2140      	movs	r1, #64	; 0x40
 801451e:	430b      	orrs	r3, r1
 8014520:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8014522:	2368      	movs	r3, #104	; 0x68
 8014524:	2200      	movs	r2, #0
 8014526:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8014528:	2000      	movs	r0, #0
 801452a:	e004      	b.n	8014536 <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801452c:	3357      	adds	r3, #87	; 0x57
 801452e:	3031      	adds	r0, #49	; 0x31
 8014530:	54e0      	strb	r0, [r4, r3]
 8014532:	e7e0      	b.n	80144f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8014534:	2002      	movs	r0, #2
  }
}
 8014536:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8014538:	2001      	movs	r0, #1
 801453a:	e7fc      	b.n	8014536 <HAL_UART_Receive_DMA+0x82>
 801453c:	2001      	movs	r0, #1
 801453e:	e7fa      	b.n	8014536 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8014540:	2002      	movs	r0, #2
 8014542:	e7f8      	b.n	8014536 <HAL_UART_Receive_DMA+0x82>
 8014544:	0801458d 	.word	0x0801458d
 8014548:	080145c9 	.word	0x080145c9
 801454c:	080145d3 	.word	0x080145d3

08014550 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014550:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014552:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014554:	6802      	ldr	r2, [r0, #0]
 8014556:	6812      	ldr	r2, [r2, #0]
 8014558:	0692      	lsls	r2, r2, #26
 801455a:	d40d      	bmi.n	8014578 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 801455c:	2252      	movs	r2, #82	; 0x52
 801455e:	2100      	movs	r1, #0
 8014560:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8014562:	6819      	ldr	r1, [r3, #0]
 8014564:	688a      	ldr	r2, [r1, #8]
 8014566:	2080      	movs	r0, #128	; 0x80
 8014568:	4382      	bics	r2, r0
 801456a:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	6813      	ldr	r3, [r2, #0]
 8014570:	2140      	movs	r1, #64	; 0x40
 8014572:	430b      	orrs	r3, r1
 8014574:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8014576:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8014578:	0018      	movs	r0, r3
 801457a:	f7fa fd79 	bl	800f070 <HAL_UART_TxCpltCallback>
}
 801457e:	e7fa      	b.n	8014576 <UART_DMATransmitCplt+0x26>

08014580 <HAL_UART_TxHalfCpltCallback>:
}
 8014580:	4770      	bx	lr

08014582 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014582:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8014584:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 8014586:	f7ff fffb 	bl	8014580 <HAL_UART_TxHalfCpltCallback>
}
 801458a:	bd10      	pop	{r4, pc}

0801458c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801458c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801458e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014590:	6802      	ldr	r2, [r0, #0]
 8014592:	6812      	ldr	r2, [r2, #0]
 8014594:	0692      	lsls	r2, r2, #26
 8014596:	d40e      	bmi.n	80145b6 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8014598:	225a      	movs	r2, #90	; 0x5a
 801459a:	2100      	movs	r1, #0
 801459c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801459e:	6819      	ldr	r1, [r3, #0]
 80145a0:	688a      	ldr	r2, [r1, #8]
 80145a2:	2040      	movs	r0, #64	; 0x40
 80145a4:	4382      	bics	r2, r0
 80145a6:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80145a8:	2269      	movs	r2, #105	; 0x69
 80145aa:	5c9a      	ldrb	r2, [r3, r2]
 80145ac:	2a32      	cmp	r2, #50	; 0x32
 80145ae:	d006      	beq.n	80145be <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80145b0:	2269      	movs	r2, #105	; 0x69
 80145b2:	2101      	movs	r1, #1
 80145b4:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80145b6:	0018      	movs	r0, r3
 80145b8:	f7fa fd96 	bl	800f0e8 <HAL_UART_RxCpltCallback>
}
 80145bc:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80145be:	3237      	adds	r2, #55	; 0x37
 80145c0:	2112      	movs	r1, #18
 80145c2:	5499      	strb	r1, [r3, r2]
 80145c4:	e7f7      	b.n	80145b6 <UART_DMAReceiveCplt+0x2a>

080145c6 <HAL_UART_RxHalfCpltCallback>:
}
 80145c6:	4770      	bx	lr

080145c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80145c8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80145ca:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 80145cc:	f7ff fffb 	bl	80145c6 <HAL_UART_RxHalfCpltCallback>
}
 80145d0:	bd10      	pop	{r4, pc}

080145d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80145d2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80145d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80145d6:	2300      	movs	r3, #0
 80145d8:	225a      	movs	r2, #90	; 0x5a
 80145da:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80145dc:	3a08      	subs	r2, #8
 80145de:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80145e0:	3369      	adds	r3, #105	; 0x69
 80145e2:	3a51      	subs	r2, #81	; 0x51
 80145e4:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80145e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80145e8:	320f      	adds	r2, #15
 80145ea:	4313      	orrs	r3, r2
 80145ec:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80145ee:	f7fa fd57 	bl	800f0a0 <HAL_UART_ErrorCallback>
}
 80145f2:	bd10      	pop	{r4, pc}

080145f4 <UART_SetConfig>:
{
 80145f4:	b570      	push	{r4, r5, r6, lr}
 80145f6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80145f8:	6883      	ldr	r3, [r0, #8]
 80145fa:	6902      	ldr	r2, [r0, #16]
 80145fc:	4313      	orrs	r3, r2
 80145fe:	6942      	ldr	r2, [r0, #20]
 8014600:	4313      	orrs	r3, r2
 8014602:	69c2      	ldr	r2, [r0, #28]
 8014604:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014606:	6801      	ldr	r1, [r0, #0]
 8014608:	680a      	ldr	r2, [r1, #0]
 801460a:	487c      	ldr	r0, [pc, #496]	; (80147fc <UART_SetConfig+0x208>)
 801460c:	4002      	ands	r2, r0
 801460e:	4313      	orrs	r3, r2
 8014610:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	6853      	ldr	r3, [r2, #4]
 8014616:	497a      	ldr	r1, [pc, #488]	; (8014800 <UART_SetConfig+0x20c>)
 8014618:	400b      	ands	r3, r1
 801461a:	68e1      	ldr	r1, [r4, #12]
 801461c:	430b      	orrs	r3, r1
 801461e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8014620:	69a2      	ldr	r2, [r4, #24]
 8014622:	6a23      	ldr	r3, [r4, #32]
 8014624:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8014626:	6821      	ldr	r1, [r4, #0]
 8014628:	688b      	ldr	r3, [r1, #8]
 801462a:	4876      	ldr	r0, [pc, #472]	; (8014804 <UART_SetConfig+0x210>)
 801462c:	4003      	ands	r3, r0
 801462e:	4313      	orrs	r3, r2
 8014630:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014632:	6825      	ldr	r5, [r4, #0]
 8014634:	4b74      	ldr	r3, [pc, #464]	; (8014808 <UART_SetConfig+0x214>)
 8014636:	429d      	cmp	r5, r3
 8014638:	d016      	beq.n	8014668 <UART_SetConfig+0x74>
 801463a:	4b74      	ldr	r3, [pc, #464]	; (801480c <UART_SetConfig+0x218>)
 801463c:	429d      	cmp	r5, r3
 801463e:	d027      	beq.n	8014690 <UART_SetConfig+0x9c>
 8014640:	4b73      	ldr	r3, [pc, #460]	; (8014810 <UART_SetConfig+0x21c>)
 8014642:	429d      	cmp	r5, r3
 8014644:	d042      	beq.n	80146cc <UART_SetConfig+0xd8>
 8014646:	4b73      	ldr	r3, [pc, #460]	; (8014814 <UART_SetConfig+0x220>)
 8014648:	429d      	cmp	r5, r3
 801464a:	d061      	beq.n	8014710 <UART_SetConfig+0x11c>
 801464c:	4b72      	ldr	r3, [pc, #456]	; (8014818 <UART_SetConfig+0x224>)
 801464e:	429d      	cmp	r5, r3
 8014650:	d075      	beq.n	801473e <UART_SetConfig+0x14a>
 8014652:	4b72      	ldr	r3, [pc, #456]	; (801481c <UART_SetConfig+0x228>)
 8014654:	429d      	cmp	r5, r3
 8014656:	d074      	beq.n	8014742 <UART_SetConfig+0x14e>
 8014658:	4b71      	ldr	r3, [pc, #452]	; (8014820 <UART_SetConfig+0x22c>)
 801465a:	429d      	cmp	r5, r3
 801465c:	d073      	beq.n	8014746 <UART_SetConfig+0x152>
 801465e:	4b71      	ldr	r3, [pc, #452]	; (8014824 <UART_SetConfig+0x230>)
 8014660:	429d      	cmp	r5, r3
 8014662:	d051      	beq.n	8014708 <UART_SetConfig+0x114>
 8014664:	2310      	movs	r3, #16
 8014666:	e054      	b.n	8014712 <UART_SetConfig+0x11e>
 8014668:	4b6f      	ldr	r3, [pc, #444]	; (8014828 <UART_SetConfig+0x234>)
 801466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801466c:	2303      	movs	r3, #3
 801466e:	4013      	ands	r3, r2
 8014670:	2b01      	cmp	r3, #1
 8014672:	d009      	beq.n	8014688 <UART_SetConfig+0x94>
 8014674:	2b00      	cmp	r3, #0
 8014676:	d005      	beq.n	8014684 <UART_SetConfig+0x90>
 8014678:	2b02      	cmp	r3, #2
 801467a:	d007      	beq.n	801468c <UART_SetConfig+0x98>
 801467c:	2b03      	cmp	r3, #3
 801467e:	d045      	beq.n	801470c <UART_SetConfig+0x118>
 8014680:	2310      	movs	r3, #16
 8014682:	e046      	b.n	8014712 <UART_SetConfig+0x11e>
 8014684:	2300      	movs	r3, #0
 8014686:	e044      	b.n	8014712 <UART_SetConfig+0x11e>
 8014688:	2304      	movs	r3, #4
 801468a:	e042      	b.n	8014712 <UART_SetConfig+0x11e>
 801468c:	2308      	movs	r3, #8
 801468e:	e040      	b.n	8014712 <UART_SetConfig+0x11e>
 8014690:	4b65      	ldr	r3, [pc, #404]	; (8014828 <UART_SetConfig+0x234>)
 8014692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014694:	22c0      	movs	r2, #192	; 0xc0
 8014696:	0292      	lsls	r2, r2, #10
 8014698:	4013      	ands	r3, r2
 801469a:	2280      	movs	r2, #128	; 0x80
 801469c:	0252      	lsls	r2, r2, #9
 801469e:	4293      	cmp	r3, r2
 80146a0:	d00e      	beq.n	80146c0 <UART_SetConfig+0xcc>
 80146a2:	d909      	bls.n	80146b8 <UART_SetConfig+0xc4>
 80146a4:	2280      	movs	r2, #128	; 0x80
 80146a6:	0292      	lsls	r2, r2, #10
 80146a8:	4293      	cmp	r3, r2
 80146aa:	d00b      	beq.n	80146c4 <UART_SetConfig+0xd0>
 80146ac:	22c0      	movs	r2, #192	; 0xc0
 80146ae:	0292      	lsls	r2, r2, #10
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d109      	bne.n	80146c8 <UART_SetConfig+0xd4>
 80146b4:	2302      	movs	r3, #2
 80146b6:	e02c      	b.n	8014712 <UART_SetConfig+0x11e>
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d105      	bne.n	80146c8 <UART_SetConfig+0xd4>
 80146bc:	2300      	movs	r3, #0
 80146be:	e028      	b.n	8014712 <UART_SetConfig+0x11e>
 80146c0:	2304      	movs	r3, #4
 80146c2:	e026      	b.n	8014712 <UART_SetConfig+0x11e>
 80146c4:	2308      	movs	r3, #8
 80146c6:	e024      	b.n	8014712 <UART_SetConfig+0x11e>
 80146c8:	2310      	movs	r3, #16
 80146ca:	e022      	b.n	8014712 <UART_SetConfig+0x11e>
 80146cc:	4b56      	ldr	r3, [pc, #344]	; (8014828 <UART_SetConfig+0x234>)
 80146ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146d0:	22c0      	movs	r2, #192	; 0xc0
 80146d2:	0312      	lsls	r2, r2, #12
 80146d4:	4013      	ands	r3, r2
 80146d6:	2280      	movs	r2, #128	; 0x80
 80146d8:	02d2      	lsls	r2, r2, #11
 80146da:	4293      	cmp	r3, r2
 80146dc:	d00e      	beq.n	80146fc <UART_SetConfig+0x108>
 80146de:	d909      	bls.n	80146f4 <UART_SetConfig+0x100>
 80146e0:	2280      	movs	r2, #128	; 0x80
 80146e2:	0312      	lsls	r2, r2, #12
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d00b      	beq.n	8014700 <UART_SetConfig+0x10c>
 80146e8:	22c0      	movs	r2, #192	; 0xc0
 80146ea:	0312      	lsls	r2, r2, #12
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d109      	bne.n	8014704 <UART_SetConfig+0x110>
 80146f0:	2302      	movs	r3, #2
 80146f2:	e00e      	b.n	8014712 <UART_SetConfig+0x11e>
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d105      	bne.n	8014704 <UART_SetConfig+0x110>
 80146f8:	2300      	movs	r3, #0
 80146fa:	e00a      	b.n	8014712 <UART_SetConfig+0x11e>
 80146fc:	2304      	movs	r3, #4
 80146fe:	e008      	b.n	8014712 <UART_SetConfig+0x11e>
 8014700:	2308      	movs	r3, #8
 8014702:	e006      	b.n	8014712 <UART_SetConfig+0x11e>
 8014704:	2310      	movs	r3, #16
 8014706:	e004      	b.n	8014712 <UART_SetConfig+0x11e>
 8014708:	2300      	movs	r3, #0
 801470a:	e002      	b.n	8014712 <UART_SetConfig+0x11e>
 801470c:	2302      	movs	r3, #2
 801470e:	e000      	b.n	8014712 <UART_SetConfig+0x11e>
 8014710:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014712:	2280      	movs	r2, #128	; 0x80
 8014714:	0212      	lsls	r2, r2, #8
 8014716:	69e1      	ldr	r1, [r4, #28]
 8014718:	4291      	cmp	r1, r2
 801471a:	d016      	beq.n	801474a <UART_SetConfig+0x156>
    switch (clocksource)
 801471c:	2b02      	cmp	r3, #2
 801471e:	d057      	beq.n	80147d0 <UART_SetConfig+0x1dc>
 8014720:	d949      	bls.n	80147b6 <UART_SetConfig+0x1c2>
 8014722:	2b04      	cmp	r3, #4
 8014724:	d05d      	beq.n	80147e2 <UART_SetConfig+0x1ee>
 8014726:	2b08      	cmp	r3, #8
 8014728:	d166      	bne.n	80147f8 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801472a:	6861      	ldr	r1, [r4, #4]
 801472c:	2080      	movs	r0, #128	; 0x80
 801472e:	0200      	lsls	r0, r0, #8
 8014730:	f7eb fd0e 	bl	8000150 <__udivsi3>
 8014734:	0400      	lsls	r0, r0, #16
 8014736:	0c00      	lsrs	r0, r0, #16
 8014738:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801473a:	2000      	movs	r0, #0
        break;
 801473c:	e027      	b.n	801478e <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801473e:	2300      	movs	r3, #0
 8014740:	e7e7      	b.n	8014712 <UART_SetConfig+0x11e>
 8014742:	2300      	movs	r3, #0
 8014744:	e7e5      	b.n	8014712 <UART_SetConfig+0x11e>
 8014746:	2300      	movs	r3, #0
 8014748:	e7e3      	b.n	8014712 <UART_SetConfig+0x11e>
    switch (clocksource)
 801474a:	2b02      	cmp	r3, #2
 801474c:	d020      	beq.n	8014790 <UART_SetConfig+0x19c>
 801474e:	d90b      	bls.n	8014768 <UART_SetConfig+0x174>
 8014750:	2b04      	cmp	r3, #4
 8014752:	d024      	beq.n	801479e <UART_SetConfig+0x1aa>
 8014754:	2b08      	cmp	r3, #8
 8014756:	d12b      	bne.n	80147b0 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8014758:	6861      	ldr	r1, [r4, #4]
 801475a:	2080      	movs	r0, #128	; 0x80
 801475c:	0240      	lsls	r0, r0, #9
 801475e:	f7eb fcf7 	bl	8000150 <__udivsi3>
 8014762:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8014764:	2000      	movs	r0, #0
        break;
 8014766:	e009      	b.n	801477c <UART_SetConfig+0x188>
    switch (clocksource)
 8014768:	2b00      	cmp	r3, #0
 801476a:	d121      	bne.n	80147b0 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801476c:	f7ff fa60 	bl	8013c30 <HAL_RCC_GetPCLK1Freq>
 8014770:	0040      	lsls	r0, r0, #1
 8014772:	6861      	ldr	r1, [r4, #4]
 8014774:	f7eb fcec 	bl	8000150 <__udivsi3>
 8014778:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801477a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 801477c:	220f      	movs	r2, #15
 801477e:	0019      	movs	r1, r3
 8014780:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8014782:	105b      	asrs	r3, r3, #1
 8014784:	3a08      	subs	r2, #8
 8014786:	4013      	ands	r3, r2
 8014788:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 801478a:	6822      	ldr	r2, [r4, #0]
 801478c:	60d3      	str	r3, [r2, #12]
}
 801478e:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8014790:	6861      	ldr	r1, [r4, #4]
 8014792:	4826      	ldr	r0, [pc, #152]	; (801482c <UART_SetConfig+0x238>)
 8014794:	f7eb fcdc 	bl	8000150 <__udivsi3>
 8014798:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801479a:	2000      	movs	r0, #0
        break;
 801479c:	e7ee      	b.n	801477c <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801479e:	f7ff f9e9 	bl	8013b74 <HAL_RCC_GetSysClockFreq>
 80147a2:	0040      	lsls	r0, r0, #1
 80147a4:	6861      	ldr	r1, [r4, #4]
 80147a6:	f7eb fcd3 	bl	8000150 <__udivsi3>
 80147aa:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80147ac:	2000      	movs	r0, #0
        break;
 80147ae:	e7e5      	b.n	801477c <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 80147b0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80147b2:	2300      	movs	r3, #0
 80147b4:	e7e2      	b.n	801477c <UART_SetConfig+0x188>
    switch (clocksource)
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d11e      	bne.n	80147f8 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80147ba:	f7ff fa39 	bl	8013c30 <HAL_RCC_GetPCLK1Freq>
 80147be:	6861      	ldr	r1, [r4, #4]
 80147c0:	f7eb fcc6 	bl	8000150 <__udivsi3>
 80147c4:	6823      	ldr	r3, [r4, #0]
 80147c6:	0400      	lsls	r0, r0, #16
 80147c8:	0c00      	lsrs	r0, r0, #16
 80147ca:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80147cc:	2000      	movs	r0, #0
        break;
 80147ce:	e7de      	b.n	801478e <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80147d0:	6861      	ldr	r1, [r4, #4]
 80147d2:	4817      	ldr	r0, [pc, #92]	; (8014830 <UART_SetConfig+0x23c>)
 80147d4:	f7eb fcbc 	bl	8000150 <__udivsi3>
 80147d8:	0400      	lsls	r0, r0, #16
 80147da:	0c00      	lsrs	r0, r0, #16
 80147dc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80147de:	2000      	movs	r0, #0
        break;
 80147e0:	e7d5      	b.n	801478e <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80147e2:	f7ff f9c7 	bl	8013b74 <HAL_RCC_GetSysClockFreq>
 80147e6:	6861      	ldr	r1, [r4, #4]
 80147e8:	f7eb fcb2 	bl	8000150 <__udivsi3>
 80147ec:	6823      	ldr	r3, [r4, #0]
 80147ee:	0400      	lsls	r0, r0, #16
 80147f0:	0c00      	lsrs	r0, r0, #16
 80147f2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80147f4:	2000      	movs	r0, #0
        break;
 80147f6:	e7ca      	b.n	801478e <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 80147f8:	2001      	movs	r0, #1
 80147fa:	e7c8      	b.n	801478e <UART_SetConfig+0x19a>
 80147fc:	efff69f3 	.word	0xefff69f3
 8014800:	ffffcfff 	.word	0xffffcfff
 8014804:	fffff4ff 	.word	0xfffff4ff
 8014808:	40013800 	.word	0x40013800
 801480c:	40004400 	.word	0x40004400
 8014810:	40004800 	.word	0x40004800
 8014814:	40004c00 	.word	0x40004c00
 8014818:	40005000 	.word	0x40005000
 801481c:	40011400 	.word	0x40011400
 8014820:	40011800 	.word	0x40011800
 8014824:	40011c00 	.word	0x40011c00
 8014828:	40021000 	.word	0x40021000
 801482c:	00f42400 	.word	0x00f42400
 8014830:	007a1200 	.word	0x007a1200

08014834 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014836:	07db      	lsls	r3, r3, #31
 8014838:	d506      	bpl.n	8014848 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801483a:	6802      	ldr	r2, [r0, #0]
 801483c:	6853      	ldr	r3, [r2, #4]
 801483e:	492c      	ldr	r1, [pc, #176]	; (80148f0 <UART_AdvFeatureConfig+0xbc>)
 8014840:	400b      	ands	r3, r1
 8014842:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014844:	430b      	orrs	r3, r1
 8014846:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801484a:	079b      	lsls	r3, r3, #30
 801484c:	d506      	bpl.n	801485c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801484e:	6802      	ldr	r2, [r0, #0]
 8014850:	6853      	ldr	r3, [r2, #4]
 8014852:	4928      	ldr	r1, [pc, #160]	; (80148f4 <UART_AdvFeatureConfig+0xc0>)
 8014854:	400b      	ands	r3, r1
 8014856:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014858:	430b      	orrs	r3, r1
 801485a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801485c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801485e:	075b      	lsls	r3, r3, #29
 8014860:	d506      	bpl.n	8014870 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014862:	6802      	ldr	r2, [r0, #0]
 8014864:	6853      	ldr	r3, [r2, #4]
 8014866:	4924      	ldr	r1, [pc, #144]	; (80148f8 <UART_AdvFeatureConfig+0xc4>)
 8014868:	400b      	ands	r3, r1
 801486a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801486c:	430b      	orrs	r3, r1
 801486e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014872:	071b      	lsls	r3, r3, #28
 8014874:	d506      	bpl.n	8014884 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014876:	6802      	ldr	r2, [r0, #0]
 8014878:	6853      	ldr	r3, [r2, #4]
 801487a:	4920      	ldr	r1, [pc, #128]	; (80148fc <UART_AdvFeatureConfig+0xc8>)
 801487c:	400b      	ands	r3, r1
 801487e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8014880:	430b      	orrs	r3, r1
 8014882:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014886:	06db      	lsls	r3, r3, #27
 8014888:	d506      	bpl.n	8014898 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801488a:	6802      	ldr	r2, [r0, #0]
 801488c:	6893      	ldr	r3, [r2, #8]
 801488e:	491c      	ldr	r1, [pc, #112]	; (8014900 <UART_AdvFeatureConfig+0xcc>)
 8014890:	400b      	ands	r3, r1
 8014892:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8014894:	430b      	orrs	r3, r1
 8014896:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801489a:	069b      	lsls	r3, r3, #26
 801489c:	d506      	bpl.n	80148ac <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801489e:	6802      	ldr	r2, [r0, #0]
 80148a0:	6893      	ldr	r3, [r2, #8]
 80148a2:	4918      	ldr	r1, [pc, #96]	; (8014904 <UART_AdvFeatureConfig+0xd0>)
 80148a4:	400b      	ands	r3, r1
 80148a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80148a8:	430b      	orrs	r3, r1
 80148aa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80148ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148ae:	065b      	lsls	r3, r3, #25
 80148b0:	d50b      	bpl.n	80148ca <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80148b2:	6802      	ldr	r2, [r0, #0]
 80148b4:	6853      	ldr	r3, [r2, #4]
 80148b6:	4914      	ldr	r1, [pc, #80]	; (8014908 <UART_AdvFeatureConfig+0xd4>)
 80148b8:	400b      	ands	r3, r1
 80148ba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80148bc:	430b      	orrs	r3, r1
 80148be:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80148c0:	2380      	movs	r3, #128	; 0x80
 80148c2:	035b      	lsls	r3, r3, #13
 80148c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d00a      	beq.n	80148e0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80148ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148cc:	061b      	lsls	r3, r3, #24
 80148ce:	d506      	bpl.n	80148de <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80148d0:	6802      	ldr	r2, [r0, #0]
 80148d2:	6853      	ldr	r3, [r2, #4]
 80148d4:	490d      	ldr	r1, [pc, #52]	; (801490c <UART_AdvFeatureConfig+0xd8>)
 80148d6:	400b      	ands	r3, r1
 80148d8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80148da:	430b      	orrs	r3, r1
 80148dc:	6053      	str	r3, [r2, #4]
}
 80148de:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80148e0:	6802      	ldr	r2, [r0, #0]
 80148e2:	6853      	ldr	r3, [r2, #4]
 80148e4:	490a      	ldr	r1, [pc, #40]	; (8014910 <UART_AdvFeatureConfig+0xdc>)
 80148e6:	400b      	ands	r3, r1
 80148e8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80148ea:	430b      	orrs	r3, r1
 80148ec:	6053      	str	r3, [r2, #4]
 80148ee:	e7ec      	b.n	80148ca <UART_AdvFeatureConfig+0x96>
 80148f0:	fffdffff 	.word	0xfffdffff
 80148f4:	fffeffff 	.word	0xfffeffff
 80148f8:	fffbffff 	.word	0xfffbffff
 80148fc:	ffff7fff 	.word	0xffff7fff
 8014900:	ffffefff 	.word	0xffffefff
 8014904:	ffffdfff 	.word	0xffffdfff
 8014908:	ffefffff 	.word	0xffefffff
 801490c:	fff7ffff 	.word	0xfff7ffff
 8014910:	ff9fffff 	.word	0xff9fffff

08014914 <UART_WaitOnFlagUntilTimeout>:
{
 8014914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014916:	46c6      	mov	lr, r8
 8014918:	b500      	push	{lr}
 801491a:	0006      	movs	r6, r0
 801491c:	000c      	movs	r4, r1
 801491e:	0017      	movs	r7, r2
 8014920:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8014922:	f7fd f93d 	bl	8011ba0 <HAL_GetTick>
 8014926:	4680      	mov	r8, r0
  if(Status == RESET)
 8014928:	2f00      	cmp	r7, #0
 801492a:	d029      	beq.n	8014980 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801492c:	6833      	ldr	r3, [r6, #0]
 801492e:	69db      	ldr	r3, [r3, #28]
 8014930:	4023      	ands	r3, r4
 8014932:	42a3      	cmp	r3, r4
 8014934:	d152      	bne.n	80149dc <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8014936:	1c6b      	adds	r3, r5, #1
 8014938:	d0f8      	beq.n	801492c <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801493a:	2d00      	cmp	r5, #0
 801493c:	d005      	beq.n	801494a <UART_WaitOnFlagUntilTimeout+0x36>
 801493e:	f7fd f92f 	bl	8011ba0 <HAL_GetTick>
 8014942:	4643      	mov	r3, r8
 8014944:	1ac0      	subs	r0, r0, r3
 8014946:	42a8      	cmp	r0, r5
 8014948:	d9f0      	bls.n	801492c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801494a:	6832      	ldr	r2, [r6, #0]
 801494c:	6813      	ldr	r3, [r2, #0]
 801494e:	2180      	movs	r1, #128	; 0x80
 8014950:	438b      	bics	r3, r1
 8014952:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014954:	6832      	ldr	r2, [r6, #0]
 8014956:	6813      	ldr	r3, [r2, #0]
 8014958:	3960      	subs	r1, #96	; 0x60
 801495a:	438b      	bics	r3, r1
 801495c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801495e:	6832      	ldr	r2, [r6, #0]
 8014960:	6813      	ldr	r3, [r2, #0]
 8014962:	491f      	ldr	r1, [pc, #124]	; (80149e0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014964:	400b      	ands	r3, r1
 8014966:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014968:	6831      	ldr	r1, [r6, #0]
 801496a:	688b      	ldr	r3, [r1, #8]
 801496c:	2201      	movs	r2, #1
 801496e:	4393      	bics	r3, r2
 8014970:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014972:	2369      	movs	r3, #105	; 0x69
 8014974:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014976:	3b01      	subs	r3, #1
 8014978:	2200      	movs	r2, #0
 801497a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801497c:	2003      	movs	r0, #3
 801497e:	e02a      	b.n	80149d6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8014980:	6833      	ldr	r3, [r6, #0]
 8014982:	69db      	ldr	r3, [r3, #28]
 8014984:	4023      	ands	r3, r4
 8014986:	42a3      	cmp	r3, r4
 8014988:	d024      	beq.n	80149d4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801498a:	1c6b      	adds	r3, r5, #1
 801498c:	d0f8      	beq.n	8014980 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801498e:	2d00      	cmp	r5, #0
 8014990:	d005      	beq.n	801499e <UART_WaitOnFlagUntilTimeout+0x8a>
 8014992:	f7fd f905 	bl	8011ba0 <HAL_GetTick>
 8014996:	4643      	mov	r3, r8
 8014998:	1ac0      	subs	r0, r0, r3
 801499a:	42a8      	cmp	r0, r5
 801499c:	d9f0      	bls.n	8014980 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801499e:	6832      	ldr	r2, [r6, #0]
 80149a0:	6813      	ldr	r3, [r2, #0]
 80149a2:	2180      	movs	r1, #128	; 0x80
 80149a4:	438b      	bics	r3, r1
 80149a6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80149a8:	6832      	ldr	r2, [r6, #0]
 80149aa:	6813      	ldr	r3, [r2, #0]
 80149ac:	3960      	subs	r1, #96	; 0x60
 80149ae:	438b      	bics	r3, r1
 80149b0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80149b2:	6832      	ldr	r2, [r6, #0]
 80149b4:	6813      	ldr	r3, [r2, #0]
 80149b6:	490a      	ldr	r1, [pc, #40]	; (80149e0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80149b8:	400b      	ands	r3, r1
 80149ba:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80149bc:	6831      	ldr	r1, [r6, #0]
 80149be:	688b      	ldr	r3, [r1, #8]
 80149c0:	2201      	movs	r2, #1
 80149c2:	4393      	bics	r3, r2
 80149c4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80149c6:	2369      	movs	r3, #105	; 0x69
 80149c8:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80149ca:	3b01      	subs	r3, #1
 80149cc:	2200      	movs	r2, #0
 80149ce:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80149d0:	2003      	movs	r0, #3
 80149d2:	e000      	b.n	80149d6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80149d4:	2000      	movs	r0, #0
}
 80149d6:	bc04      	pop	{r2}
 80149d8:	4690      	mov	r8, r2
 80149da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80149dc:	2000      	movs	r0, #0
 80149de:	e7fa      	b.n	80149d6 <UART_WaitOnFlagUntilTimeout+0xc2>
 80149e0:	fffffeff 	.word	0xfffffeff

080149e4 <HAL_UART_Transmit>:
{
 80149e4:	b570      	push	{r4, r5, r6, lr}
 80149e6:	0004      	movs	r4, r0
 80149e8:	000e      	movs	r6, r1
 80149ea:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80149ec:	2369      	movs	r3, #105	; 0x69
 80149ee:	5cc3      	ldrb	r3, [r0, r3]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d003      	beq.n	80149fc <HAL_UART_Transmit+0x18>
 80149f4:	2369      	movs	r3, #105	; 0x69
 80149f6:	5cc3      	ldrb	r3, [r0, r3]
 80149f8:	2b22      	cmp	r3, #34	; 0x22
 80149fa:	d155      	bne.n	8014aa8 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80149fc:	2e00      	cmp	r6, #0
 80149fe:	d055      	beq.n	8014aac <HAL_UART_Transmit+0xc8>
 8014a00:	2a00      	cmp	r2, #0
 8014a02:	d055      	beq.n	8014ab0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8014a04:	2368      	movs	r3, #104	; 0x68
 8014a06:	5ce3      	ldrb	r3, [r4, r3]
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	d053      	beq.n	8014ab4 <HAL_UART_Transmit+0xd0>
 8014a0c:	2368      	movs	r3, #104	; 0x68
 8014a0e:	2101      	movs	r1, #1
 8014a10:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a12:	2300      	movs	r3, #0
 8014a14:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014a16:	3369      	adds	r3, #105	; 0x69
 8014a18:	5ce3      	ldrb	r3, [r4, r3]
 8014a1a:	2b22      	cmp	r3, #34	; 0x22
 8014a1c:	d007      	beq.n	8014a2e <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014a1e:	2369      	movs	r3, #105	; 0x69
 8014a20:	2112      	movs	r1, #18
 8014a22:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8014a24:	2350      	movs	r3, #80	; 0x50
 8014a26:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8014a28:	3302      	adds	r3, #2
 8014a2a:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8014a2c:	e007      	b.n	8014a3e <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014a2e:	3347      	adds	r3, #71	; 0x47
 8014a30:	3131      	adds	r1, #49	; 0x31
 8014a32:	54e1      	strb	r1, [r4, r3]
 8014a34:	e7f6      	b.n	8014a24 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8014a36:	7833      	ldrb	r3, [r6, #0]
 8014a38:	6822      	ldr	r2, [r4, #0]
 8014a3a:	8513      	strh	r3, [r2, #40]	; 0x28
 8014a3c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8014a3e:	2352      	movs	r3, #82	; 0x52
 8014a40:	5ae3      	ldrh	r3, [r4, r3]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d019      	beq.n	8014a7a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8014a46:	3b01      	subs	r3, #1
 8014a48:	2252      	movs	r2, #82	; 0x52
 8014a4a:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8014a4c:	002b      	movs	r3, r5
 8014a4e:	2200      	movs	r2, #0
 8014a50:	2180      	movs	r1, #128	; 0x80
 8014a52:	0020      	movs	r0, r4
 8014a54:	f7ff ff5e 	bl	8014914 <UART_WaitOnFlagUntilTimeout>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d12d      	bne.n	8014ab8 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a5c:	2380      	movs	r3, #128	; 0x80
 8014a5e:	015b      	lsls	r3, r3, #5
 8014a60:	68a2      	ldr	r2, [r4, #8]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d1e7      	bne.n	8014a36 <HAL_UART_Transmit+0x52>
 8014a66:	6923      	ldr	r3, [r4, #16]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d1e4      	bne.n	8014a36 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014a6c:	8833      	ldrh	r3, [r6, #0]
 8014a6e:	05db      	lsls	r3, r3, #23
 8014a70:	0ddb      	lsrs	r3, r3, #23
 8014a72:	6822      	ldr	r2, [r4, #0]
 8014a74:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8014a76:	3602      	adds	r6, #2
 8014a78:	e7e1      	b.n	8014a3e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8014a7a:	002b      	movs	r3, r5
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	2140      	movs	r1, #64	; 0x40
 8014a80:	0020      	movs	r0, r4
 8014a82:	f7ff ff47 	bl	8014914 <UART_WaitOnFlagUntilTimeout>
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d118      	bne.n	8014abc <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014a8a:	2369      	movs	r3, #105	; 0x69
 8014a8c:	5ce3      	ldrb	r3, [r4, r3]
 8014a8e:	2b32      	cmp	r3, #50	; 0x32
 8014a90:	d006      	beq.n	8014aa0 <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 8014a92:	2369      	movs	r3, #105	; 0x69
 8014a94:	2201      	movs	r2, #1
 8014a96:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8014a98:	2368      	movs	r3, #104	; 0x68
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8014a9e:	e004      	b.n	8014aaa <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014aa0:	3337      	adds	r3, #55	; 0x37
 8014aa2:	2222      	movs	r2, #34	; 0x22
 8014aa4:	54e2      	strb	r2, [r4, r3]
 8014aa6:	e7f7      	b.n	8014a98 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8014aa8:	2002      	movs	r0, #2
}
 8014aaa:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8014aac:	2001      	movs	r0, #1
 8014aae:	e7fc      	b.n	8014aaa <HAL_UART_Transmit+0xc6>
 8014ab0:	2001      	movs	r0, #1
 8014ab2:	e7fa      	b.n	8014aaa <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8014ab4:	2002      	movs	r0, #2
 8014ab6:	e7f8      	b.n	8014aaa <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8014ab8:	2003      	movs	r0, #3
 8014aba:	e7f6      	b.n	8014aaa <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8014abc:	2003      	movs	r0, #3
 8014abe:	e7f4      	b.n	8014aaa <HAL_UART_Transmit+0xc6>

08014ac0 <UART_CheckIdleState>:
{
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014ac8:	6803      	ldr	r3, [r0, #0]
 8014aca:	4a18      	ldr	r2, [pc, #96]	; (8014b2c <UART_CheckIdleState+0x6c>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d005      	beq.n	8014adc <UART_CheckIdleState+0x1c>
 8014ad0:	4a17      	ldr	r2, [pc, #92]	; (8014b30 <UART_CheckIdleState+0x70>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d002      	beq.n	8014adc <UART_CheckIdleState+0x1c>
 8014ad6:	4a17      	ldr	r2, [pc, #92]	; (8014b34 <UART_CheckIdleState+0x74>)
 8014ad8:	4293      	cmp	r3, r2
 8014ada:	d106      	bne.n	8014aea <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	071b      	lsls	r3, r3, #28
 8014ae0:	d40b      	bmi.n	8014afa <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	075b      	lsls	r3, r3, #29
 8014ae8:	d413      	bmi.n	8014b12 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8014aea:	2369      	movs	r3, #105	; 0x69
 8014aec:	2201      	movs	r2, #1
 8014aee:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8014af0:	3b01      	subs	r3, #1
 8014af2:	2200      	movs	r2, #0
 8014af4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8014af6:	2000      	movs	r0, #0
}
 8014af8:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014afa:	23fa      	movs	r3, #250	; 0xfa
 8014afc:	2180      	movs	r1, #128	; 0x80
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	2200      	movs	r2, #0
 8014b02:	0389      	lsls	r1, r1, #14
 8014b04:	0020      	movs	r0, r4
 8014b06:	f7ff ff05 	bl	8014914 <UART_WaitOnFlagUntilTimeout>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d0e9      	beq.n	8014ae2 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8014b0e:	2003      	movs	r0, #3
 8014b10:	e7f2      	b.n	8014af8 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014b12:	23fa      	movs	r3, #250	; 0xfa
 8014b14:	2180      	movs	r1, #128	; 0x80
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	2200      	movs	r2, #0
 8014b1a:	03c9      	lsls	r1, r1, #15
 8014b1c:	0020      	movs	r0, r4
 8014b1e:	f7ff fef9 	bl	8014914 <UART_WaitOnFlagUntilTimeout>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d0e1      	beq.n	8014aea <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8014b26:	2003      	movs	r0, #3
 8014b28:	e7e6      	b.n	8014af8 <UART_CheckIdleState+0x38>
 8014b2a:	46c0      	nop			; (mov r8, r8)
 8014b2c:	40013800 	.word	0x40013800
 8014b30:	40004400 	.word	0x40004400
 8014b34:	40004800 	.word	0x40004800

08014b38 <HAL_UART_Init>:
{
 8014b38:	b510      	push	{r4, lr}
 8014b3a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8014b3c:	d030      	beq.n	8014ba0 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8014b3e:	2369      	movs	r3, #105	; 0x69
 8014b40:	5cc3      	ldrb	r3, [r0, r3]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d022      	beq.n	8014b8c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8014b46:	2369      	movs	r3, #105	; 0x69
 8014b48:	2202      	movs	r2, #2
 8014b4a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8014b4c:	6822      	ldr	r2, [r4, #0]
 8014b4e:	6813      	ldr	r3, [r2, #0]
 8014b50:	2101      	movs	r1, #1
 8014b52:	438b      	bics	r3, r1
 8014b54:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014b56:	0020      	movs	r0, r4
 8014b58:	f7ff fd4c 	bl	80145f4 <UART_SetConfig>
 8014b5c:	2801      	cmp	r0, #1
 8014b5e:	d014      	beq.n	8014b8a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d118      	bne.n	8014b98 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014b66:	6822      	ldr	r2, [r4, #0]
 8014b68:	6853      	ldr	r3, [r2, #4]
 8014b6a:	490e      	ldr	r1, [pc, #56]	; (8014ba4 <HAL_UART_Init+0x6c>)
 8014b6c:	400b      	ands	r3, r1
 8014b6e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014b70:	6822      	ldr	r2, [r4, #0]
 8014b72:	6893      	ldr	r3, [r2, #8]
 8014b74:	212a      	movs	r1, #42	; 0x2a
 8014b76:	438b      	bics	r3, r1
 8014b78:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8014b7a:	6822      	ldr	r2, [r4, #0]
 8014b7c:	6813      	ldr	r3, [r2, #0]
 8014b7e:	3929      	subs	r1, #41	; 0x29
 8014b80:	430b      	orrs	r3, r1
 8014b82:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8014b84:	0020      	movs	r0, r4
 8014b86:	f7ff ff9b 	bl	8014ac0 <UART_CheckIdleState>
}
 8014b8a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8014b8c:	3368      	adds	r3, #104	; 0x68
 8014b8e:	2200      	movs	r2, #0
 8014b90:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8014b92:	f7fa fd33 	bl	800f5fc <HAL_UART_MspInit>
 8014b96:	e7d6      	b.n	8014b46 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8014b98:	0020      	movs	r0, r4
 8014b9a:	f7ff fe4b 	bl	8014834 <UART_AdvFeatureConfig>
 8014b9e:	e7e2      	b.n	8014b66 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8014ba0:	2001      	movs	r0, #1
 8014ba2:	e7f2      	b.n	8014b8a <HAL_UART_Init+0x52>
 8014ba4:	ffffb7ff 	.word	0xffffb7ff

08014ba8 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014ba8:	2369      	movs	r3, #105	; 0x69
 8014baa:	5cc3      	ldrb	r3, [r0, r3]
 8014bac:	2b12      	cmp	r3, #18
 8014bae:	d003      	beq.n	8014bb8 <UART_Transmit_IT+0x10>
 8014bb0:	2369      	movs	r3, #105	; 0x69
 8014bb2:	5cc3      	ldrb	r3, [r0, r3]
 8014bb4:	2b32      	cmp	r3, #50	; 0x32
 8014bb6:	d12d      	bne.n	8014c14 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8014bb8:	2352      	movs	r3, #82	; 0x52
 8014bba:	5ac3      	ldrh	r3, [r0, r3]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d010      	beq.n	8014be2 <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bc0:	2380      	movs	r3, #128	; 0x80
 8014bc2:	015b      	lsls	r3, r3, #5
 8014bc4:	6882      	ldr	r2, [r0, #8]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d017      	beq.n	8014bfa <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8014bca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014bcc:	1c5a      	adds	r2, r3, #1
 8014bce:	64c2      	str	r2, [r0, #76]	; 0x4c
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	6802      	ldr	r2, [r0, #0]
 8014bd4:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8014bd6:	2252      	movs	r2, #82	; 0x52
 8014bd8:	5a83      	ldrh	r3, [r0, r2]
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8014bde:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014be0:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014be2:	6802      	ldr	r2, [r0, #0]
 8014be4:	6813      	ldr	r3, [r2, #0]
 8014be6:	2180      	movs	r1, #128	; 0x80
 8014be8:	438b      	bics	r3, r1
 8014bea:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014bec:	6802      	ldr	r2, [r0, #0]
 8014bee:	6813      	ldr	r3, [r2, #0]
 8014bf0:	3940      	subs	r1, #64	; 0x40
 8014bf2:	430b      	orrs	r3, r1
 8014bf4:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	e7f2      	b.n	8014be0 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bfa:	6903      	ldr	r3, [r0, #16]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d1e4      	bne.n	8014bca <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014c00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014c02:	881b      	ldrh	r3, [r3, #0]
 8014c04:	05db      	lsls	r3, r3, #23
 8014c06:	0ddb      	lsrs	r3, r3, #23
 8014c08:	6802      	ldr	r2, [r0, #0]
 8014c0a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8014c0c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014c0e:	3302      	adds	r3, #2
 8014c10:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014c12:	e7e0      	b.n	8014bd6 <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 8014c14:	2002      	movs	r0, #2
 8014c16:	e7e3      	b.n	8014be0 <UART_Transmit_IT+0x38>

08014c18 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014c18:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014c1a:	6802      	ldr	r2, [r0, #0]
 8014c1c:	6813      	ldr	r3, [r2, #0]
 8014c1e:	2140      	movs	r1, #64	; 0x40
 8014c20:	438b      	bics	r3, r1
 8014c22:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014c24:	2369      	movs	r3, #105	; 0x69
 8014c26:	5cc3      	ldrb	r3, [r0, r3]
 8014c28:	2b32      	cmp	r3, #50	; 0x32
 8014c2a:	d00a      	beq.n	8014c42 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014c2c:	6801      	ldr	r1, [r0, #0]
 8014c2e:	688b      	ldr	r3, [r1, #8]
 8014c30:	2201      	movs	r2, #1
 8014c32:	4393      	bics	r3, r2
 8014c34:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8014c36:	2369      	movs	r3, #105	; 0x69
 8014c38:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8014c3a:	f7fa fa19 	bl	800f070 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8014c3e:	2000      	movs	r0, #0
 8014c40:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8014c42:	3337      	adds	r3, #55	; 0x37
 8014c44:	2222      	movs	r2, #34	; 0x22
 8014c46:	54c2      	strb	r2, [r0, r3]
 8014c48:	e7f7      	b.n	8014c3a <UART_EndTransmit_IT+0x22>
	...

08014c4c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014c4c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8014c4e:	235c      	movs	r3, #92	; 0x5c
 8014c50:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014c52:	2269      	movs	r2, #105	; 0x69
 8014c54:	5c82      	ldrb	r2, [r0, r2]
 8014c56:	2a22      	cmp	r2, #34	; 0x22
 8014c58:	d003      	beq.n	8014c62 <UART_Receive_IT+0x16>
 8014c5a:	2269      	movs	r2, #105	; 0x69
 8014c5c:	5c82      	ldrb	r2, [r0, r2]
 8014c5e:	2a32      	cmp	r2, #50	; 0x32
 8014c60:	d13c      	bne.n	8014cdc <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c62:	2280      	movs	r2, #128	; 0x80
 8014c64:	0152      	lsls	r2, r2, #5
 8014c66:	6881      	ldr	r1, [r0, #8]
 8014c68:	4291      	cmp	r1, r2
 8014c6a:	d027      	beq.n	8014cbc <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014c6c:	6802      	ldr	r2, [r0, #0]
 8014c6e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8014c74:	1c4c      	adds	r4, r1, #1
 8014c76:	6544      	str	r4, [r0, #84]	; 0x54
 8014c78:	4013      	ands	r3, r2
 8014c7a:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8014c7c:	225a      	movs	r2, #90	; 0x5a
 8014c7e:	5a83      	ldrh	r3, [r0, r2]
 8014c80:	3b01      	subs	r3, #1
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	5283      	strh	r3, [r0, r2]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d12a      	bne.n	8014ce0 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014c8a:	6802      	ldr	r2, [r0, #0]
 8014c8c:	6813      	ldr	r3, [r2, #0]
 8014c8e:	2120      	movs	r1, #32
 8014c90:	438b      	bics	r3, r1
 8014c92:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014c94:	2369      	movs	r3, #105	; 0x69
 8014c96:	5cc3      	ldrb	r3, [r0, r3]
 8014c98:	2b32      	cmp	r3, #50	; 0x32
 8014c9a:	d01b      	beq.n	8014cd4 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014c9c:	6802      	ldr	r2, [r0, #0]
 8014c9e:	6813      	ldr	r3, [r2, #0]
 8014ca0:	4910      	ldr	r1, [pc, #64]	; (8014ce4 <UART_Receive_IT+0x98>)
 8014ca2:	400b      	ands	r3, r1
 8014ca4:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014ca6:	6801      	ldr	r1, [r0, #0]
 8014ca8:	688b      	ldr	r3, [r1, #8]
 8014caa:	2201      	movs	r2, #1
 8014cac:	4393      	bics	r3, r2
 8014cae:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8014cb0:	2369      	movs	r3, #105	; 0x69
 8014cb2:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8014cb4:	f7fa fa18 	bl	800f0e8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8014cb8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014cba:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014cbc:	6902      	ldr	r2, [r0, #16]
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	d1d4      	bne.n	8014c6c <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8014cc2:	6802      	ldr	r2, [r0, #0]
 8014cc4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014cc6:	4013      	ands	r3, r2
 8014cc8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014cca:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014ccc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014cce:	3302      	adds	r3, #2
 8014cd0:	6543      	str	r3, [r0, #84]	; 0x54
 8014cd2:	e7d3      	b.n	8014c7c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014cd4:	3337      	adds	r3, #55	; 0x37
 8014cd6:	2212      	movs	r2, #18
 8014cd8:	54c2      	strb	r2, [r0, r3]
 8014cda:	e7eb      	b.n	8014cb4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8014cdc:	2002      	movs	r0, #2
 8014cde:	e7ec      	b.n	8014cba <UART_Receive_IT+0x6e>
    return HAL_OK;
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	e7ea      	b.n	8014cba <UART_Receive_IT+0x6e>
 8014ce4:	fffffeff 	.word	0xfffffeff

08014ce8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8014ce8:	4770      	bx	lr

08014cea <HAL_UART_IRQHandler>:
{
 8014cea:	b510      	push	{r4, lr}
 8014cec:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014cee:	6803      	ldr	r3, [r0, #0]
 8014cf0:	69da      	ldr	r2, [r3, #28]
 8014cf2:	07d2      	lsls	r2, r2, #31
 8014cf4:	d509      	bpl.n	8014d0a <HAL_UART_IRQHandler+0x20>
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	05d2      	lsls	r2, r2, #23
 8014cfa:	d506      	bpl.n	8014d0a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014d00:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014d02:	4313      	orrs	r3, r2
 8014d04:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014d06:	2369      	movs	r3, #105	; 0x69
 8014d08:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014d0a:	6823      	ldr	r3, [r4, #0]
 8014d0c:	69da      	ldr	r2, [r3, #28]
 8014d0e:	0792      	lsls	r2, r2, #30
 8014d10:	d50b      	bpl.n	8014d2a <HAL_UART_IRQHandler+0x40>
 8014d12:	689a      	ldr	r2, [r3, #8]
 8014d14:	07d2      	lsls	r2, r2, #31
 8014d16:	d508      	bpl.n	8014d2a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8014d18:	2202      	movs	r2, #2
 8014d1a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014d1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014d1e:	3202      	adds	r2, #2
 8014d20:	4313      	orrs	r3, r2
 8014d22:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014d24:	2369      	movs	r3, #105	; 0x69
 8014d26:	3a03      	subs	r2, #3
 8014d28:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014d2a:	6823      	ldr	r3, [r4, #0]
 8014d2c:	69da      	ldr	r2, [r3, #28]
 8014d2e:	0752      	lsls	r2, r2, #29
 8014d30:	d50b      	bpl.n	8014d4a <HAL_UART_IRQHandler+0x60>
 8014d32:	689a      	ldr	r2, [r3, #8]
 8014d34:	07d2      	lsls	r2, r2, #31
 8014d36:	d508      	bpl.n	8014d4a <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8014d38:	2204      	movs	r2, #4
 8014d3a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014d3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014d3e:	3a02      	subs	r2, #2
 8014d40:	4313      	orrs	r3, r2
 8014d42:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014d44:	2369      	movs	r3, #105	; 0x69
 8014d46:	3a01      	subs	r2, #1
 8014d48:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	69da      	ldr	r2, [r3, #28]
 8014d4e:	0712      	lsls	r2, r2, #28
 8014d50:	d50a      	bpl.n	8014d68 <HAL_UART_IRQHandler+0x7e>
 8014d52:	689a      	ldr	r2, [r3, #8]
 8014d54:	07d2      	lsls	r2, r2, #31
 8014d56:	d507      	bpl.n	8014d68 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8014d58:	2208      	movs	r2, #8
 8014d5a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014d5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014d5e:	4313      	orrs	r3, r2
 8014d60:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014d62:	2369      	movs	r3, #105	; 0x69
 8014d64:	3a07      	subs	r2, #7
 8014d66:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014d68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d11c      	bne.n	8014da8 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	69da      	ldr	r2, [r3, #28]
 8014d72:	02d2      	lsls	r2, r2, #11
 8014d74:	d502      	bpl.n	8014d7c <HAL_UART_IRQHandler+0x92>
 8014d76:	689a      	ldr	r2, [r3, #8]
 8014d78:	0252      	lsls	r2, r2, #9
 8014d7a:	d419      	bmi.n	8014db0 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014d7c:	6823      	ldr	r3, [r4, #0]
 8014d7e:	69da      	ldr	r2, [r3, #28]
 8014d80:	0692      	lsls	r2, r2, #26
 8014d82:	d502      	bpl.n	8014d8a <HAL_UART_IRQHandler+0xa0>
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	069b      	lsls	r3, r3, #26
 8014d88:	d41c      	bmi.n	8014dc4 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014d8a:	6823      	ldr	r3, [r4, #0]
 8014d8c:	69da      	ldr	r2, [r3, #28]
 8014d8e:	0612      	lsls	r2, r2, #24
 8014d90:	d502      	bpl.n	8014d98 <HAL_UART_IRQHandler+0xae>
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	061b      	lsls	r3, r3, #24
 8014d96:	d41e      	bmi.n	8014dd6 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014d98:	6823      	ldr	r3, [r4, #0]
 8014d9a:	69da      	ldr	r2, [r3, #28]
 8014d9c:	0652      	lsls	r2, r2, #25
 8014d9e:	d502      	bpl.n	8014da6 <HAL_UART_IRQHandler+0xbc>
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	065b      	lsls	r3, r3, #25
 8014da4:	d41b      	bmi.n	8014dde <HAL_UART_IRQHandler+0xf4>
}
 8014da6:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8014da8:	0020      	movs	r0, r4
 8014daa:	f7fa f979 	bl	800f0a0 <HAL_UART_ErrorCallback>
 8014dae:	e7de      	b.n	8014d6e <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014db0:	2280      	movs	r2, #128	; 0x80
 8014db2:	0352      	lsls	r2, r2, #13
 8014db4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8014db6:	2369      	movs	r3, #105	; 0x69
 8014db8:	2201      	movs	r2, #1
 8014dba:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014dbc:	0020      	movs	r0, r4
 8014dbe:	f7ff ff93 	bl	8014ce8 <HAL_UARTEx_WakeupCallback>
 8014dc2:	e7db      	b.n	8014d7c <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8014dc4:	0020      	movs	r0, r4
 8014dc6:	f7ff ff41 	bl	8014c4c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014dca:	6822      	ldr	r2, [r4, #0]
 8014dcc:	6993      	ldr	r3, [r2, #24]
 8014dce:	2108      	movs	r1, #8
 8014dd0:	430b      	orrs	r3, r1
 8014dd2:	6193      	str	r3, [r2, #24]
 8014dd4:	e7d9      	b.n	8014d8a <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8014dd6:	0020      	movs	r0, r4
 8014dd8:	f7ff fee6 	bl	8014ba8 <UART_Transmit_IT>
 8014ddc:	e7dc      	b.n	8014d98 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014dde:	0020      	movs	r0, r4
 8014de0:	f7ff ff1a 	bl	8014c18 <UART_EndTransmit_IT>
}
 8014de4:	e7df      	b.n	8014da6 <HAL_UART_IRQHandler+0xbc>

08014de6 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8014de6:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8014de8:	f7ef fe82 	bl	8004af0 <Module_Init>
 8014dec:	e7fe      	b.n	8014dec <main+0x6>

08014dee <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8014dee:	e7fe      	b.n	8014dee <UserTask>

08014df0 <atof>:
 8014df0:	b510      	push	{r4, lr}
 8014df2:	2100      	movs	r1, #0
 8014df4:	f001 fb3e 	bl	8016474 <strtod>
 8014df8:	bd10      	pop	{r4, pc}

08014dfa <atoi>:
 8014dfa:	b510      	push	{r4, lr}
 8014dfc:	220a      	movs	r2, #10
 8014dfe:	2100      	movs	r1, #0
 8014e00:	f001 fc04 	bl	801660c <strtol>
 8014e04:	bd10      	pop	{r4, pc}

08014e06 <atol>:
 8014e06:	b510      	push	{r4, lr}
 8014e08:	220a      	movs	r2, #10
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	f001 fbfe 	bl	801660c <strtol>
 8014e10:	bd10      	pop	{r4, pc}
	...

08014e14 <__libc_init_array>:
 8014e14:	b570      	push	{r4, r5, r6, lr}
 8014e16:	2600      	movs	r6, #0
 8014e18:	4d0c      	ldr	r5, [pc, #48]	; (8014e4c <__libc_init_array+0x38>)
 8014e1a:	4c0d      	ldr	r4, [pc, #52]	; (8014e50 <__libc_init_array+0x3c>)
 8014e1c:	1b64      	subs	r4, r4, r5
 8014e1e:	10a4      	asrs	r4, r4, #2
 8014e20:	42a6      	cmp	r6, r4
 8014e22:	d109      	bne.n	8014e38 <__libc_init_array+0x24>
 8014e24:	2600      	movs	r6, #0
 8014e26:	f004 fe6d 	bl	8019b04 <_init>
 8014e2a:	4d0a      	ldr	r5, [pc, #40]	; (8014e54 <__libc_init_array+0x40>)
 8014e2c:	4c0a      	ldr	r4, [pc, #40]	; (8014e58 <__libc_init_array+0x44>)
 8014e2e:	1b64      	subs	r4, r4, r5
 8014e30:	10a4      	asrs	r4, r4, #2
 8014e32:	42a6      	cmp	r6, r4
 8014e34:	d105      	bne.n	8014e42 <__libc_init_array+0x2e>
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	00b3      	lsls	r3, r6, #2
 8014e3a:	58eb      	ldr	r3, [r5, r3]
 8014e3c:	4798      	blx	r3
 8014e3e:	3601      	adds	r6, #1
 8014e40:	e7ee      	b.n	8014e20 <__libc_init_array+0xc>
 8014e42:	00b3      	lsls	r3, r6, #2
 8014e44:	58eb      	ldr	r3, [r5, r3]
 8014e46:	4798      	blx	r3
 8014e48:	3601      	adds	r6, #1
 8014e4a:	e7f2      	b.n	8014e32 <__libc_init_array+0x1e>
 8014e4c:	0801d52c 	.word	0x0801d52c
 8014e50:	0801d52c 	.word	0x0801d52c
 8014e54:	0801d52c 	.word	0x0801d52c
 8014e58:	0801d534 	.word	0x0801d534

08014e5c <__locale_ctype_ptr_l>:
 8014e5c:	30ec      	adds	r0, #236	; 0xec
 8014e5e:	6800      	ldr	r0, [r0, #0]
 8014e60:	4770      	bx	lr
	...

08014e64 <__locale_ctype_ptr>:
 8014e64:	4b04      	ldr	r3, [pc, #16]	; (8014e78 <__locale_ctype_ptr+0x14>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d100      	bne.n	8014e70 <__locale_ctype_ptr+0xc>
 8014e6e:	4b03      	ldr	r3, [pc, #12]	; (8014e7c <__locale_ctype_ptr+0x18>)
 8014e70:	33ec      	adds	r3, #236	; 0xec
 8014e72:	6818      	ldr	r0, [r3, #0]
 8014e74:	4770      	bx	lr
 8014e76:	46c0      	nop			; (mov r8, r8)
 8014e78:	200000d0 	.word	0x200000d0
 8014e7c:	20000500 	.word	0x20000500

08014e80 <malloc>:
 8014e80:	b510      	push	{r4, lr}
 8014e82:	4b03      	ldr	r3, [pc, #12]	; (8014e90 <malloc+0x10>)
 8014e84:	0001      	movs	r1, r0
 8014e86:	6818      	ldr	r0, [r3, #0]
 8014e88:	f000 f80e 	bl	8014ea8 <_malloc_r>
 8014e8c:	bd10      	pop	{r4, pc}
 8014e8e:	46c0      	nop			; (mov r8, r8)
 8014e90:	200000d0 	.word	0x200000d0

08014e94 <free>:
 8014e94:	b510      	push	{r4, lr}
 8014e96:	4b03      	ldr	r3, [pc, #12]	; (8014ea4 <free+0x10>)
 8014e98:	0001      	movs	r1, r0
 8014e9a:	6818      	ldr	r0, [r3, #0]
 8014e9c:	f003 fd10 	bl	80188c0 <_free_r>
 8014ea0:	bd10      	pop	{r4, pc}
 8014ea2:	46c0      	nop			; (mov r8, r8)
 8014ea4:	200000d0 	.word	0x200000d0

08014ea8 <_malloc_r>:
 8014ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eaa:	000d      	movs	r5, r1
 8014eac:	b085      	sub	sp, #20
 8014eae:	350b      	adds	r5, #11
 8014eb0:	9001      	str	r0, [sp, #4]
 8014eb2:	2d16      	cmp	r5, #22
 8014eb4:	d908      	bls.n	8014ec8 <_malloc_r+0x20>
 8014eb6:	2307      	movs	r3, #7
 8014eb8:	439d      	bics	r5, r3
 8014eba:	d506      	bpl.n	8014eca <_malloc_r+0x22>
 8014ebc:	230c      	movs	r3, #12
 8014ebe:	9a01      	ldr	r2, [sp, #4]
 8014ec0:	6013      	str	r3, [r2, #0]
 8014ec2:	2000      	movs	r0, #0
 8014ec4:	b005      	add	sp, #20
 8014ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec8:	2510      	movs	r5, #16
 8014eca:	428d      	cmp	r5, r1
 8014ecc:	d3f6      	bcc.n	8014ebc <_malloc_r+0x14>
 8014ece:	9801      	ldr	r0, [sp, #4]
 8014ed0:	f000 fa34 	bl	801533c <__malloc_lock>
 8014ed4:	23f8      	movs	r3, #248	; 0xf8
 8014ed6:	33ff      	adds	r3, #255	; 0xff
 8014ed8:	4ac4      	ldr	r2, [pc, #784]	; (80151ec <_malloc_r+0x344>)
 8014eda:	429d      	cmp	r5, r3
 8014edc:	d820      	bhi.n	8014f20 <_malloc_r+0x78>
 8014ede:	0029      	movs	r1, r5
 8014ee0:	3108      	adds	r1, #8
 8014ee2:	1851      	adds	r1, r2, r1
 8014ee4:	0008      	movs	r0, r1
 8014ee6:	684c      	ldr	r4, [r1, #4]
 8014ee8:	3808      	subs	r0, #8
 8014eea:	08eb      	lsrs	r3, r5, #3
 8014eec:	4284      	cmp	r4, r0
 8014eee:	d104      	bne.n	8014efa <_malloc_r+0x52>
 8014ef0:	68cc      	ldr	r4, [r1, #12]
 8014ef2:	3302      	adds	r3, #2
 8014ef4:	469c      	mov	ip, r3
 8014ef6:	42a1      	cmp	r1, r4
 8014ef8:	d02a      	beq.n	8014f50 <_malloc_r+0xa8>
 8014efa:	2303      	movs	r3, #3
 8014efc:	6862      	ldr	r2, [r4, #4]
 8014efe:	68a1      	ldr	r1, [r4, #8]
 8014f00:	439a      	bics	r2, r3
 8014f02:	0013      	movs	r3, r2
 8014f04:	68e2      	ldr	r2, [r4, #12]
 8014f06:	18e3      	adds	r3, r4, r3
 8014f08:	60ca      	str	r2, [r1, #12]
 8014f0a:	6091      	str	r1, [r2, #8]
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	6859      	ldr	r1, [r3, #4]
 8014f10:	430a      	orrs	r2, r1
 8014f12:	605a      	str	r2, [r3, #4]
 8014f14:	9801      	ldr	r0, [sp, #4]
 8014f16:	f000 fa19 	bl	801534c <__malloc_unlock>
 8014f1a:	0020      	movs	r0, r4
 8014f1c:	3008      	adds	r0, #8
 8014f1e:	e7d1      	b.n	8014ec4 <_malloc_r+0x1c>
 8014f20:	0a69      	lsrs	r1, r5, #9
 8014f22:	233f      	movs	r3, #63	; 0x3f
 8014f24:	2900      	cmp	r1, #0
 8014f26:	d003      	beq.n	8014f30 <_malloc_r+0x88>
 8014f28:	2904      	cmp	r1, #4
 8014f2a:	d828      	bhi.n	8014f7e <_malloc_r+0xd6>
 8014f2c:	09ab      	lsrs	r3, r5, #6
 8014f2e:	3338      	adds	r3, #56	; 0x38
 8014f30:	2103      	movs	r1, #3
 8014f32:	468c      	mov	ip, r1
 8014f34:	00d8      	lsls	r0, r3, #3
 8014f36:	1880      	adds	r0, r0, r2
 8014f38:	68c4      	ldr	r4, [r0, #12]
 8014f3a:	4284      	cmp	r4, r0
 8014f3c:	d006      	beq.n	8014f4c <_malloc_r+0xa4>
 8014f3e:	4666      	mov	r6, ip
 8014f40:	6861      	ldr	r1, [r4, #4]
 8014f42:	43b1      	bics	r1, r6
 8014f44:	1b4f      	subs	r7, r1, r5
 8014f46:	2f0f      	cmp	r7, #15
 8014f48:	dd31      	ble.n	8014fae <_malloc_r+0x106>
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	469c      	mov	ip, r3
 8014f50:	6914      	ldr	r4, [r2, #16]
 8014f52:	49a7      	ldr	r1, [pc, #668]	; (80151f0 <_malloc_r+0x348>)
 8014f54:	428c      	cmp	r4, r1
 8014f56:	d055      	beq.n	8015004 <_malloc_r+0x15c>
 8014f58:	2303      	movs	r3, #3
 8014f5a:	6860      	ldr	r0, [r4, #4]
 8014f5c:	4398      	bics	r0, r3
 8014f5e:	0003      	movs	r3, r0
 8014f60:	1b46      	subs	r6, r0, r5
 8014f62:	2e0f      	cmp	r6, #15
 8014f64:	dd31      	ble.n	8014fca <_malloc_r+0x122>
 8014f66:	2701      	movs	r7, #1
 8014f68:	1960      	adds	r0, r4, r5
 8014f6a:	433d      	orrs	r5, r7
 8014f6c:	4337      	orrs	r7, r6
 8014f6e:	6065      	str	r5, [r4, #4]
 8014f70:	6150      	str	r0, [r2, #20]
 8014f72:	6110      	str	r0, [r2, #16]
 8014f74:	60c1      	str	r1, [r0, #12]
 8014f76:	6081      	str	r1, [r0, #8]
 8014f78:	6047      	str	r7, [r0, #4]
 8014f7a:	50e6      	str	r6, [r4, r3]
 8014f7c:	e7ca      	b.n	8014f14 <_malloc_r+0x6c>
 8014f7e:	2914      	cmp	r1, #20
 8014f80:	d802      	bhi.n	8014f88 <_malloc_r+0xe0>
 8014f82:	000b      	movs	r3, r1
 8014f84:	335b      	adds	r3, #91	; 0x5b
 8014f86:	e7d3      	b.n	8014f30 <_malloc_r+0x88>
 8014f88:	2954      	cmp	r1, #84	; 0x54
 8014f8a:	d802      	bhi.n	8014f92 <_malloc_r+0xea>
 8014f8c:	0b2b      	lsrs	r3, r5, #12
 8014f8e:	336e      	adds	r3, #110	; 0x6e
 8014f90:	e7ce      	b.n	8014f30 <_malloc_r+0x88>
 8014f92:	23aa      	movs	r3, #170	; 0xaa
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	4299      	cmp	r1, r3
 8014f98:	d802      	bhi.n	8014fa0 <_malloc_r+0xf8>
 8014f9a:	0beb      	lsrs	r3, r5, #15
 8014f9c:	3377      	adds	r3, #119	; 0x77
 8014f9e:	e7c7      	b.n	8014f30 <_malloc_r+0x88>
 8014fa0:	4894      	ldr	r0, [pc, #592]	; (80151f4 <_malloc_r+0x34c>)
 8014fa2:	237e      	movs	r3, #126	; 0x7e
 8014fa4:	4281      	cmp	r1, r0
 8014fa6:	d8c3      	bhi.n	8014f30 <_malloc_r+0x88>
 8014fa8:	0cab      	lsrs	r3, r5, #18
 8014faa:	337c      	adds	r3, #124	; 0x7c
 8014fac:	e7c0      	b.n	8014f30 <_malloc_r+0x88>
 8014fae:	68e6      	ldr	r6, [r4, #12]
 8014fb0:	2f00      	cmp	r7, #0
 8014fb2:	db08      	blt.n	8014fc6 <_malloc_r+0x11e>
 8014fb4:	68a3      	ldr	r3, [r4, #8]
 8014fb6:	1861      	adds	r1, r4, r1
 8014fb8:	60de      	str	r6, [r3, #12]
 8014fba:	60b3      	str	r3, [r6, #8]
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	684a      	ldr	r2, [r1, #4]
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	604b      	str	r3, [r1, #4]
 8014fc4:	e7a6      	b.n	8014f14 <_malloc_r+0x6c>
 8014fc6:	0034      	movs	r4, r6
 8014fc8:	e7b7      	b.n	8014f3a <_malloc_r+0x92>
 8014fca:	6151      	str	r1, [r2, #20]
 8014fcc:	6111      	str	r1, [r2, #16]
 8014fce:	2e00      	cmp	r6, #0
 8014fd0:	db05      	blt.n	8014fde <_malloc_r+0x136>
 8014fd2:	2101      	movs	r1, #1
 8014fd4:	1823      	adds	r3, r4, r0
 8014fd6:	685a      	ldr	r2, [r3, #4]
 8014fd8:	4311      	orrs	r1, r2
 8014fda:	6059      	str	r1, [r3, #4]
 8014fdc:	e79a      	b.n	8014f14 <_malloc_r+0x6c>
 8014fde:	4986      	ldr	r1, [pc, #536]	; (80151f8 <_malloc_r+0x350>)
 8014fe0:	6857      	ldr	r7, [r2, #4]
 8014fe2:	4288      	cmp	r0, r1
 8014fe4:	d900      	bls.n	8014fe8 <_malloc_r+0x140>
 8014fe6:	e090      	b.n	801510a <_malloc_r+0x262>
 8014fe8:	08c3      	lsrs	r3, r0, #3
 8014fea:	39ff      	subs	r1, #255	; 0xff
 8014fec:	1098      	asrs	r0, r3, #2
 8014fee:	39ff      	subs	r1, #255	; 0xff
 8014ff0:	4081      	lsls	r1, r0
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	4339      	orrs	r1, r7
 8014ff6:	6051      	str	r1, [r2, #4]
 8014ff8:	189a      	adds	r2, r3, r2
 8014ffa:	6893      	ldr	r3, [r2, #8]
 8014ffc:	60e2      	str	r2, [r4, #12]
 8014ffe:	60a3      	str	r3, [r4, #8]
 8015000:	6094      	str	r4, [r2, #8]
 8015002:	60dc      	str	r4, [r3, #12]
 8015004:	4663      	mov	r3, ip
 8015006:	2201      	movs	r2, #1
 8015008:	4978      	ldr	r1, [pc, #480]	; (80151ec <_malloc_r+0x344>)
 801500a:	109b      	asrs	r3, r3, #2
 801500c:	6848      	ldr	r0, [r1, #4]
 801500e:	409a      	lsls	r2, r3
 8015010:	4290      	cmp	r0, r2
 8015012:	d32d      	bcc.n	8015070 <_malloc_r+0x1c8>
 8015014:	4202      	tst	r2, r0
 8015016:	d109      	bne.n	801502c <_malloc_r+0x184>
 8015018:	2303      	movs	r3, #3
 801501a:	4664      	mov	r4, ip
 801501c:	439c      	bics	r4, r3
 801501e:	0023      	movs	r3, r4
 8015020:	3304      	adds	r3, #4
 8015022:	469c      	mov	ip, r3
 8015024:	0052      	lsls	r2, r2, #1
 8015026:	4202      	tst	r2, r0
 8015028:	d100      	bne.n	801502c <_malloc_r+0x184>
 801502a:	e0a4      	b.n	8015176 <_malloc_r+0x2ce>
 801502c:	4663      	mov	r3, ip
 801502e:	00db      	lsls	r3, r3, #3
 8015030:	18cb      	adds	r3, r1, r3
 8015032:	9303      	str	r3, [sp, #12]
 8015034:	001f      	movs	r7, r3
 8015036:	4663      	mov	r3, ip
 8015038:	9302      	str	r3, [sp, #8]
 801503a:	68fc      	ldr	r4, [r7, #12]
 801503c:	42bc      	cmp	r4, r7
 801503e:	d000      	beq.n	8015042 <_malloc_r+0x19a>
 8015040:	e09c      	b.n	801517c <_malloc_r+0x2d4>
 8015042:	2003      	movs	r0, #3
 8015044:	9b02      	ldr	r3, [sp, #8]
 8015046:	3708      	adds	r7, #8
 8015048:	3301      	adds	r3, #1
 801504a:	9302      	str	r3, [sp, #8]
 801504c:	4203      	tst	r3, r0
 801504e:	d1f4      	bne.n	801503a <_malloc_r+0x192>
 8015050:	4663      	mov	r3, ip
 8015052:	2003      	movs	r0, #3
 8015054:	4203      	tst	r3, r0
 8015056:	d000      	beq.n	801505a <_malloc_r+0x1b2>
 8015058:	e0b3      	b.n	80151c2 <_malloc_r+0x31a>
 801505a:	684b      	ldr	r3, [r1, #4]
 801505c:	4393      	bics	r3, r2
 801505e:	604b      	str	r3, [r1, #4]
 8015060:	4b62      	ldr	r3, [pc, #392]	; (80151ec <_malloc_r+0x344>)
 8015062:	0052      	lsls	r2, r2, #1
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	4293      	cmp	r3, r2
 8015068:	d302      	bcc.n	8015070 <_malloc_r+0x1c8>
 801506a:	2a00      	cmp	r2, #0
 801506c:	d000      	beq.n	8015070 <_malloc_r+0x1c8>
 801506e:	e0b9      	b.n	80151e4 <_malloc_r+0x33c>
 8015070:	2303      	movs	r3, #3
 8015072:	688f      	ldr	r7, [r1, #8]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	439a      	bics	r2, r3
 8015078:	9202      	str	r2, [sp, #8]
 801507a:	42aa      	cmp	r2, r5
 801507c:	d303      	bcc.n	8015086 <_malloc_r+0x1de>
 801507e:	1b52      	subs	r2, r2, r5
 8015080:	2a0f      	cmp	r2, #15
 8015082:	dd00      	ble.n	8015086 <_malloc_r+0x1de>
 8015084:	e116      	b.n	80152b4 <_malloc_r+0x40c>
 8015086:	4b5d      	ldr	r3, [pc, #372]	; (80151fc <_malloc_r+0x354>)
 8015088:	2008      	movs	r0, #8
 801508a:	681e      	ldr	r6, [r3, #0]
 801508c:	f002 fd26 	bl	8017adc <sysconf>
 8015090:	4b5b      	ldr	r3, [pc, #364]	; (8015200 <_malloc_r+0x358>)
 8015092:	3610      	adds	r6, #16
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	1976      	adds	r6, r6, r5
 8015098:	9003      	str	r0, [sp, #12]
 801509a:	3301      	adds	r3, #1
 801509c:	d003      	beq.n	80150a6 <_malloc_r+0x1fe>
 801509e:	3e01      	subs	r6, #1
 80150a0:	1836      	adds	r6, r6, r0
 80150a2:	4243      	negs	r3, r0
 80150a4:	401e      	ands	r6, r3
 80150a6:	0031      	movs	r1, r6
 80150a8:	9801      	ldr	r0, [sp, #4]
 80150aa:	f000 fb27 	bl	80156fc <_sbrk_r>
 80150ae:	0004      	movs	r4, r0
 80150b0:	1c43      	adds	r3, r0, #1
 80150b2:	d100      	bne.n	80150b6 <_malloc_r+0x20e>
 80150b4:	e0d6      	b.n	8015264 <_malloc_r+0x3bc>
 80150b6:	9b02      	ldr	r3, [sp, #8]
 80150b8:	18fb      	adds	r3, r7, r3
 80150ba:	4283      	cmp	r3, r0
 80150bc:	d903      	bls.n	80150c6 <_malloc_r+0x21e>
 80150be:	4a4b      	ldr	r2, [pc, #300]	; (80151ec <_malloc_r+0x344>)
 80150c0:	4297      	cmp	r7, r2
 80150c2:	d000      	beq.n	80150c6 <_malloc_r+0x21e>
 80150c4:	e0ce      	b.n	8015264 <_malloc_r+0x3bc>
 80150c6:	494f      	ldr	r1, [pc, #316]	; (8015204 <_malloc_r+0x35c>)
 80150c8:	680a      	ldr	r2, [r1, #0]
 80150ca:	18b2      	adds	r2, r6, r2
 80150cc:	600a      	str	r2, [r1, #0]
 80150ce:	9903      	ldr	r1, [sp, #12]
 80150d0:	4694      	mov	ip, r2
 80150d2:	1e48      	subs	r0, r1, #1
 80150d4:	42a3      	cmp	r3, r4
 80150d6:	d000      	beq.n	80150da <_malloc_r+0x232>
 80150d8:	e09a      	b.n	8015210 <_malloc_r+0x368>
 80150da:	4203      	tst	r3, r0
 80150dc:	d000      	beq.n	80150e0 <_malloc_r+0x238>
 80150de:	e097      	b.n	8015210 <_malloc_r+0x368>
 80150e0:	9a02      	ldr	r2, [sp, #8]
 80150e2:	4b42      	ldr	r3, [pc, #264]	; (80151ec <_malloc_r+0x344>)
 80150e4:	1992      	adds	r2, r2, r6
 80150e6:	2601      	movs	r6, #1
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	4316      	orrs	r6, r2
 80150ec:	605e      	str	r6, [r3, #4]
 80150ee:	4b45      	ldr	r3, [pc, #276]	; (8015204 <_malloc_r+0x35c>)
 80150f0:	4a45      	ldr	r2, [pc, #276]	; (8015208 <_malloc_r+0x360>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	6811      	ldr	r1, [r2, #0]
 80150f6:	428b      	cmp	r3, r1
 80150f8:	d900      	bls.n	80150fc <_malloc_r+0x254>
 80150fa:	6013      	str	r3, [r2, #0]
 80150fc:	4a43      	ldr	r2, [pc, #268]	; (801520c <_malloc_r+0x364>)
 80150fe:	6811      	ldr	r1, [r2, #0]
 8015100:	428b      	cmp	r3, r1
 8015102:	d800      	bhi.n	8015106 <_malloc_r+0x25e>
 8015104:	e0ae      	b.n	8015264 <_malloc_r+0x3bc>
 8015106:	6013      	str	r3, [r2, #0]
 8015108:	e0ac      	b.n	8015264 <_malloc_r+0x3bc>
 801510a:	0a40      	lsrs	r0, r0, #9
 801510c:	2804      	cmp	r0, #4
 801510e:	d810      	bhi.n	8015132 <_malloc_r+0x28a>
 8015110:	0999      	lsrs	r1, r3, #6
 8015112:	3138      	adds	r1, #56	; 0x38
 8015114:	00ce      	lsls	r6, r1, #3
 8015116:	18b6      	adds	r6, r6, r2
 8015118:	68b0      	ldr	r0, [r6, #8]
 801511a:	4286      	cmp	r6, r0
 801511c:	d124      	bne.n	8015168 <_malloc_r+0x2c0>
 801511e:	2301      	movs	r3, #1
 8015120:	1089      	asrs	r1, r1, #2
 8015122:	408b      	lsls	r3, r1
 8015124:	433b      	orrs	r3, r7
 8015126:	6053      	str	r3, [r2, #4]
 8015128:	60e6      	str	r6, [r4, #12]
 801512a:	60a0      	str	r0, [r4, #8]
 801512c:	60b4      	str	r4, [r6, #8]
 801512e:	60c4      	str	r4, [r0, #12]
 8015130:	e768      	b.n	8015004 <_malloc_r+0x15c>
 8015132:	2814      	cmp	r0, #20
 8015134:	d802      	bhi.n	801513c <_malloc_r+0x294>
 8015136:	0001      	movs	r1, r0
 8015138:	315b      	adds	r1, #91	; 0x5b
 801513a:	e7eb      	b.n	8015114 <_malloc_r+0x26c>
 801513c:	2854      	cmp	r0, #84	; 0x54
 801513e:	d802      	bhi.n	8015146 <_malloc_r+0x29e>
 8015140:	0b19      	lsrs	r1, r3, #12
 8015142:	316e      	adds	r1, #110	; 0x6e
 8015144:	e7e6      	b.n	8015114 <_malloc_r+0x26c>
 8015146:	21aa      	movs	r1, #170	; 0xaa
 8015148:	0049      	lsls	r1, r1, #1
 801514a:	4288      	cmp	r0, r1
 801514c:	d802      	bhi.n	8015154 <_malloc_r+0x2ac>
 801514e:	0bd9      	lsrs	r1, r3, #15
 8015150:	3177      	adds	r1, #119	; 0x77
 8015152:	e7df      	b.n	8015114 <_malloc_r+0x26c>
 8015154:	4e27      	ldr	r6, [pc, #156]	; (80151f4 <_malloc_r+0x34c>)
 8015156:	217e      	movs	r1, #126	; 0x7e
 8015158:	42b0      	cmp	r0, r6
 801515a:	d8db      	bhi.n	8015114 <_malloc_r+0x26c>
 801515c:	0c99      	lsrs	r1, r3, #18
 801515e:	317c      	adds	r1, #124	; 0x7c
 8015160:	e7d8      	b.n	8015114 <_malloc_r+0x26c>
 8015162:	6880      	ldr	r0, [r0, #8]
 8015164:	4286      	cmp	r6, r0
 8015166:	d004      	beq.n	8015172 <_malloc_r+0x2ca>
 8015168:	2103      	movs	r1, #3
 801516a:	6842      	ldr	r2, [r0, #4]
 801516c:	438a      	bics	r2, r1
 801516e:	429a      	cmp	r2, r3
 8015170:	d8f7      	bhi.n	8015162 <_malloc_r+0x2ba>
 8015172:	68c6      	ldr	r6, [r0, #12]
 8015174:	e7d8      	b.n	8015128 <_malloc_r+0x280>
 8015176:	2304      	movs	r3, #4
 8015178:	449c      	add	ip, r3
 801517a:	e753      	b.n	8015024 <_malloc_r+0x17c>
 801517c:	2003      	movs	r0, #3
 801517e:	6863      	ldr	r3, [r4, #4]
 8015180:	4383      	bics	r3, r0
 8015182:	1b5e      	subs	r6, r3, r5
 8015184:	68e0      	ldr	r0, [r4, #12]
 8015186:	2e0f      	cmp	r6, #15
 8015188:	dd0e      	ble.n	80151a8 <_malloc_r+0x300>
 801518a:	2701      	movs	r7, #1
 801518c:	1962      	adds	r2, r4, r5
 801518e:	433d      	orrs	r5, r7
 8015190:	6065      	str	r5, [r4, #4]
 8015192:	68a5      	ldr	r5, [r4, #8]
 8015194:	4337      	orrs	r7, r6
 8015196:	60e8      	str	r0, [r5, #12]
 8015198:	6085      	str	r5, [r0, #8]
 801519a:	614a      	str	r2, [r1, #20]
 801519c:	610a      	str	r2, [r1, #16]
 801519e:	4914      	ldr	r1, [pc, #80]	; (80151f0 <_malloc_r+0x348>)
 80151a0:	6057      	str	r7, [r2, #4]
 80151a2:	60d1      	str	r1, [r2, #12]
 80151a4:	6091      	str	r1, [r2, #8]
 80151a6:	e6e8      	b.n	8014f7a <_malloc_r+0xd2>
 80151a8:	2e00      	cmp	r6, #0
 80151aa:	db08      	blt.n	80151be <_malloc_r+0x316>
 80151ac:	2201      	movs	r2, #1
 80151ae:	18e3      	adds	r3, r4, r3
 80151b0:	6859      	ldr	r1, [r3, #4]
 80151b2:	430a      	orrs	r2, r1
 80151b4:	605a      	str	r2, [r3, #4]
 80151b6:	68a3      	ldr	r3, [r4, #8]
 80151b8:	60d8      	str	r0, [r3, #12]
 80151ba:	6083      	str	r3, [r0, #8]
 80151bc:	e6aa      	b.n	8014f14 <_malloc_r+0x6c>
 80151be:	0004      	movs	r4, r0
 80151c0:	e73c      	b.n	801503c <_malloc_r+0x194>
 80151c2:	2301      	movs	r3, #1
 80151c4:	425b      	negs	r3, r3
 80151c6:	449c      	add	ip, r3
 80151c8:	9b03      	ldr	r3, [sp, #12]
 80151ca:	6818      	ldr	r0, [r3, #0]
 80151cc:	3b08      	subs	r3, #8
 80151ce:	9003      	str	r0, [sp, #12]
 80151d0:	4298      	cmp	r0, r3
 80151d2:	d100      	bne.n	80151d6 <_malloc_r+0x32e>
 80151d4:	e73c      	b.n	8015050 <_malloc_r+0x1a8>
 80151d6:	e743      	b.n	8015060 <_malloc_r+0x1b8>
 80151d8:	2004      	movs	r0, #4
 80151da:	0052      	lsls	r2, r2, #1
 80151dc:	4484      	add	ip, r0
 80151de:	421a      	tst	r2, r3
 80151e0:	d0fa      	beq.n	80151d8 <_malloc_r+0x330>
 80151e2:	e723      	b.n	801502c <_malloc_r+0x184>
 80151e4:	9802      	ldr	r0, [sp, #8]
 80151e6:	4684      	mov	ip, r0
 80151e8:	e7f9      	b.n	80151de <_malloc_r+0x336>
 80151ea:	46c0      	nop			; (mov r8, r8)
 80151ec:	2000066c 	.word	0x2000066c
 80151f0:	20000674 	.word	0x20000674
 80151f4:	00000554 	.word	0x00000554
 80151f8:	000001ff 	.word	0x000001ff
 80151fc:	20006d1c 	.word	0x20006d1c
 8015200:	20000a74 	.word	0x20000a74
 8015204:	20006cec 	.word	0x20006cec
 8015208:	20006d14 	.word	0x20006d14
 801520c:	20006d18 	.word	0x20006d18
 8015210:	492e      	ldr	r1, [pc, #184]	; (80152cc <_malloc_r+0x424>)
 8015212:	680a      	ldr	r2, [r1, #0]
 8015214:	3201      	adds	r2, #1
 8015216:	d133      	bne.n	8015280 <_malloc_r+0x3d8>
 8015218:	600c      	str	r4, [r1, #0]
 801521a:	2307      	movs	r3, #7
 801521c:	4023      	ands	r3, r4
 801521e:	d002      	beq.n	8015226 <_malloc_r+0x37e>
 8015220:	2208      	movs	r2, #8
 8015222:	1ad3      	subs	r3, r2, r3
 8015224:	18e4      	adds	r4, r4, r3
 8015226:	9a03      	ldr	r2, [sp, #12]
 8015228:	19a6      	adds	r6, r4, r6
 801522a:	18d3      	adds	r3, r2, r3
 801522c:	4006      	ands	r6, r0
 801522e:	1b9e      	subs	r6, r3, r6
 8015230:	0031      	movs	r1, r6
 8015232:	9801      	ldr	r0, [sp, #4]
 8015234:	f000 fa62 	bl	80156fc <_sbrk_r>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d101      	bne.n	8015240 <_malloc_r+0x398>
 801523c:	0020      	movs	r0, r4
 801523e:	2600      	movs	r6, #0
 8015240:	4a23      	ldr	r2, [pc, #140]	; (80152d0 <_malloc_r+0x428>)
 8015242:	1b00      	subs	r0, r0, r4
 8015244:	6813      	ldr	r3, [r2, #0]
 8015246:	199b      	adds	r3, r3, r6
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	2301      	movs	r3, #1
 801524c:	4a21      	ldr	r2, [pc, #132]	; (80152d4 <_malloc_r+0x42c>)
 801524e:	1986      	adds	r6, r0, r6
 8015250:	431e      	orrs	r6, r3
 8015252:	6094      	str	r4, [r2, #8]
 8015254:	6066      	str	r6, [r4, #4]
 8015256:	4297      	cmp	r7, r2
 8015258:	d100      	bne.n	801525c <_malloc_r+0x3b4>
 801525a:	e748      	b.n	80150ee <_malloc_r+0x246>
 801525c:	9a02      	ldr	r2, [sp, #8]
 801525e:	2a0f      	cmp	r2, #15
 8015260:	d813      	bhi.n	801528a <_malloc_r+0x3e2>
 8015262:	6063      	str	r3, [r4, #4]
 8015264:	2203      	movs	r2, #3
 8015266:	4b1b      	ldr	r3, [pc, #108]	; (80152d4 <_malloc_r+0x42c>)
 8015268:	689b      	ldr	r3, [r3, #8]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	4393      	bics	r3, r2
 801526e:	1b5a      	subs	r2, r3, r5
 8015270:	42ab      	cmp	r3, r5
 8015272:	d301      	bcc.n	8015278 <_malloc_r+0x3d0>
 8015274:	2a0f      	cmp	r2, #15
 8015276:	dc1d      	bgt.n	80152b4 <_malloc_r+0x40c>
 8015278:	9801      	ldr	r0, [sp, #4]
 801527a:	f000 f867 	bl	801534c <__malloc_unlock>
 801527e:	e620      	b.n	8014ec2 <_malloc_r+0x1a>
 8015280:	1ae3      	subs	r3, r4, r3
 8015282:	4a13      	ldr	r2, [pc, #76]	; (80152d0 <_malloc_r+0x428>)
 8015284:	4463      	add	r3, ip
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	e7c7      	b.n	801521a <_malloc_r+0x372>
 801528a:	2207      	movs	r2, #7
 801528c:	9e02      	ldr	r6, [sp, #8]
 801528e:	3e0c      	subs	r6, #12
 8015290:	4396      	bics	r6, r2
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	4013      	ands	r3, r2
 8015296:	2205      	movs	r2, #5
 8015298:	4333      	orrs	r3, r6
 801529a:	607b      	str	r3, [r7, #4]
 801529c:	19bb      	adds	r3, r7, r6
 801529e:	605a      	str	r2, [r3, #4]
 80152a0:	609a      	str	r2, [r3, #8]
 80152a2:	2e0f      	cmp	r6, #15
 80152a4:	d800      	bhi.n	80152a8 <_malloc_r+0x400>
 80152a6:	e722      	b.n	80150ee <_malloc_r+0x246>
 80152a8:	0039      	movs	r1, r7
 80152aa:	9801      	ldr	r0, [sp, #4]
 80152ac:	3108      	adds	r1, #8
 80152ae:	f003 fb07 	bl	80188c0 <_free_r>
 80152b2:	e71c      	b.n	80150ee <_malloc_r+0x246>
 80152b4:	2301      	movs	r3, #1
 80152b6:	0018      	movs	r0, r3
 80152b8:	4906      	ldr	r1, [pc, #24]	; (80152d4 <_malloc_r+0x42c>)
 80152ba:	4328      	orrs	r0, r5
 80152bc:	688c      	ldr	r4, [r1, #8]
 80152be:	4313      	orrs	r3, r2
 80152c0:	1965      	adds	r5, r4, r5
 80152c2:	6060      	str	r0, [r4, #4]
 80152c4:	608d      	str	r5, [r1, #8]
 80152c6:	606b      	str	r3, [r5, #4]
 80152c8:	e624      	b.n	8014f14 <_malloc_r+0x6c>
 80152ca:	46c0      	nop			; (mov r8, r8)
 80152cc:	20000a74 	.word	0x20000a74
 80152d0:	20006cec 	.word	0x20006cec
 80152d4:	2000066c 	.word	0x2000066c

080152d8 <__ascii_mbtowc>:
 80152d8:	b082      	sub	sp, #8
 80152da:	2900      	cmp	r1, #0
 80152dc:	d100      	bne.n	80152e0 <__ascii_mbtowc+0x8>
 80152de:	a901      	add	r1, sp, #4
 80152e0:	1e10      	subs	r0, r2, #0
 80152e2:	d006      	beq.n	80152f2 <__ascii_mbtowc+0x1a>
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d006      	beq.n	80152f6 <__ascii_mbtowc+0x1e>
 80152e8:	7813      	ldrb	r3, [r2, #0]
 80152ea:	600b      	str	r3, [r1, #0]
 80152ec:	7810      	ldrb	r0, [r2, #0]
 80152ee:	1e43      	subs	r3, r0, #1
 80152f0:	4198      	sbcs	r0, r3
 80152f2:	b002      	add	sp, #8
 80152f4:	4770      	bx	lr
 80152f6:	2002      	movs	r0, #2
 80152f8:	4240      	negs	r0, r0
 80152fa:	e7fa      	b.n	80152f2 <__ascii_mbtowc+0x1a>

080152fc <memcmp>:
 80152fc:	b530      	push	{r4, r5, lr}
 80152fe:	2400      	movs	r4, #0
 8015300:	42a2      	cmp	r2, r4
 8015302:	d101      	bne.n	8015308 <memcmp+0xc>
 8015304:	2000      	movs	r0, #0
 8015306:	e005      	b.n	8015314 <memcmp+0x18>
 8015308:	5d03      	ldrb	r3, [r0, r4]
 801530a:	1c65      	adds	r5, r4, #1
 801530c:	5d0c      	ldrb	r4, [r1, r4]
 801530e:	42a3      	cmp	r3, r4
 8015310:	d001      	beq.n	8015316 <memcmp+0x1a>
 8015312:	1b18      	subs	r0, r3, r4
 8015314:	bd30      	pop	{r4, r5, pc}
 8015316:	002c      	movs	r4, r5
 8015318:	e7f2      	b.n	8015300 <memcmp+0x4>

0801531a <memcpy>:
 801531a:	2300      	movs	r3, #0
 801531c:	b510      	push	{r4, lr}
 801531e:	429a      	cmp	r2, r3
 8015320:	d100      	bne.n	8015324 <memcpy+0xa>
 8015322:	bd10      	pop	{r4, pc}
 8015324:	5ccc      	ldrb	r4, [r1, r3]
 8015326:	54c4      	strb	r4, [r0, r3]
 8015328:	3301      	adds	r3, #1
 801532a:	e7f8      	b.n	801531e <memcpy+0x4>

0801532c <memset>:
 801532c:	0003      	movs	r3, r0
 801532e:	1812      	adds	r2, r2, r0
 8015330:	4293      	cmp	r3, r2
 8015332:	d100      	bne.n	8015336 <memset+0xa>
 8015334:	4770      	bx	lr
 8015336:	7019      	strb	r1, [r3, #0]
 8015338:	3301      	adds	r3, #1
 801533a:	e7f9      	b.n	8015330 <memset+0x4>

0801533c <__malloc_lock>:
 801533c:	b510      	push	{r4, lr}
 801533e:	4802      	ldr	r0, [pc, #8]	; (8015348 <__malloc_lock+0xc>)
 8015340:	f003 feb2 	bl	80190a8 <__retarget_lock_acquire_recursive>
 8015344:	bd10      	pop	{r4, pc}
 8015346:	46c0      	nop			; (mov r8, r8)
 8015348:	200072d4 	.word	0x200072d4

0801534c <__malloc_unlock>:
 801534c:	b510      	push	{r4, lr}
 801534e:	4802      	ldr	r0, [pc, #8]	; (8015358 <__malloc_unlock+0xc>)
 8015350:	f003 feab 	bl	80190aa <__retarget_lock_release_recursive>
 8015354:	bd10      	pop	{r4, pc}
 8015356:	46c0      	nop			; (mov r8, r8)
 8015358:	200072d4 	.word	0x200072d4

0801535c <rand>:
 801535c:	4b09      	ldr	r3, [pc, #36]	; (8015384 <rand+0x28>)
 801535e:	b510      	push	{r4, lr}
 8015360:	681c      	ldr	r4, [r3, #0]
 8015362:	4a09      	ldr	r2, [pc, #36]	; (8015388 <rand+0x2c>)
 8015364:	34a8      	adds	r4, #168	; 0xa8
 8015366:	6820      	ldr	r0, [r4, #0]
 8015368:	6861      	ldr	r1, [r4, #4]
 801536a:	4b08      	ldr	r3, [pc, #32]	; (801538c <rand+0x30>)
 801536c:	f7eb f908 	bl	8000580 <__aeabi_lmul>
 8015370:	2201      	movs	r2, #1
 8015372:	2300      	movs	r3, #0
 8015374:	1880      	adds	r0, r0, r2
 8015376:	4159      	adcs	r1, r3
 8015378:	6020      	str	r0, [r4, #0]
 801537a:	6061      	str	r1, [r4, #4]
 801537c:	0048      	lsls	r0, r1, #1
 801537e:	0840      	lsrs	r0, r0, #1
 8015380:	bd10      	pop	{r4, pc}
 8015382:	46c0      	nop			; (mov r8, r8)
 8015384:	200000d0 	.word	0x200000d0
 8015388:	4c957f2d 	.word	0x4c957f2d
 801538c:	5851f42d 	.word	0x5851f42d

08015390 <realloc>:
 8015390:	b510      	push	{r4, lr}
 8015392:	4b03      	ldr	r3, [pc, #12]	; (80153a0 <realloc+0x10>)
 8015394:	000a      	movs	r2, r1
 8015396:	0001      	movs	r1, r0
 8015398:	6818      	ldr	r0, [r3, #0]
 801539a:	f000 f803 	bl	80153a4 <_realloc_r>
 801539e:	bd10      	pop	{r4, pc}
 80153a0:	200000d0 	.word	0x200000d0

080153a4 <_realloc_r>:
 80153a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153a6:	b087      	sub	sp, #28
 80153a8:	9003      	str	r0, [sp, #12]
 80153aa:	1e0c      	subs	r4, r1, #0
 80153ac:	9205      	str	r2, [sp, #20]
 80153ae:	d106      	bne.n	80153be <_realloc_r+0x1a>
 80153b0:	0011      	movs	r1, r2
 80153b2:	f7ff fd79 	bl	8014ea8 <_malloc_r>
 80153b6:	0007      	movs	r7, r0
 80153b8:	0038      	movs	r0, r7
 80153ba:	b007      	add	sp, #28
 80153bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153be:	9803      	ldr	r0, [sp, #12]
 80153c0:	f7ff ffbc 	bl	801533c <__malloc_lock>
 80153c4:	0023      	movs	r3, r4
 80153c6:	3b08      	subs	r3, #8
 80153c8:	685f      	ldr	r7, [r3, #4]
 80153ca:	9302      	str	r3, [sp, #8]
 80153cc:	003a      	movs	r2, r7
 80153ce:	2303      	movs	r3, #3
 80153d0:	9e05      	ldr	r6, [sp, #20]
 80153d2:	439a      	bics	r2, r3
 80153d4:	360b      	adds	r6, #11
 80153d6:	9204      	str	r2, [sp, #16]
 80153d8:	2e16      	cmp	r6, #22
 80153da:	d908      	bls.n	80153ee <_realloc_r+0x4a>
 80153dc:	3304      	adds	r3, #4
 80153de:	439e      	bics	r6, r3
 80153e0:	9601      	str	r6, [sp, #4]
 80153e2:	d506      	bpl.n	80153f2 <_realloc_r+0x4e>
 80153e4:	230c      	movs	r3, #12
 80153e6:	9a03      	ldr	r2, [sp, #12]
 80153e8:	2700      	movs	r7, #0
 80153ea:	6013      	str	r3, [r2, #0]
 80153ec:	e7e4      	b.n	80153b8 <_realloc_r+0x14>
 80153ee:	2310      	movs	r3, #16
 80153f0:	9301      	str	r3, [sp, #4]
 80153f2:	9b01      	ldr	r3, [sp, #4]
 80153f4:	9a05      	ldr	r2, [sp, #20]
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d3f4      	bcc.n	80153e4 <_realloc_r+0x40>
 80153fa:	9b01      	ldr	r3, [sp, #4]
 80153fc:	9a04      	ldr	r2, [sp, #16]
 80153fe:	4293      	cmp	r3, r2
 8015400:	dc00      	bgt.n	8015404 <_realloc_r+0x60>
 8015402:	e16f      	b.n	80156e4 <_realloc_r+0x340>
 8015404:	9b02      	ldr	r3, [sp, #8]
 8015406:	48bc      	ldr	r0, [pc, #752]	; (80156f8 <_realloc_r+0x354>)
 8015408:	189b      	adds	r3, r3, r2
 801540a:	6882      	ldr	r2, [r0, #8]
 801540c:	4694      	mov	ip, r2
 801540e:	685a      	ldr	r2, [r3, #4]
 8015410:	459c      	cmp	ip, r3
 8015412:	d006      	beq.n	8015422 <_realloc_r+0x7e>
 8015414:	2501      	movs	r5, #1
 8015416:	0011      	movs	r1, r2
 8015418:	43a9      	bics	r1, r5
 801541a:	1859      	adds	r1, r3, r1
 801541c:	6849      	ldr	r1, [r1, #4]
 801541e:	4229      	tst	r1, r5
 8015420:	d146      	bne.n	80154b0 <_realloc_r+0x10c>
 8015422:	2103      	movs	r1, #3
 8015424:	438a      	bics	r2, r1
 8015426:	9904      	ldr	r1, [sp, #16]
 8015428:	188e      	adds	r6, r1, r2
 801542a:	9901      	ldr	r1, [sp, #4]
 801542c:	459c      	cmp	ip, r3
 801542e:	d117      	bne.n	8015460 <_realloc_r+0xbc>
 8015430:	3110      	adds	r1, #16
 8015432:	42b1      	cmp	r1, r6
 8015434:	dc3e      	bgt.n	80154b4 <_realloc_r+0x110>
 8015436:	9901      	ldr	r1, [sp, #4]
 8015438:	9b02      	ldr	r3, [sp, #8]
 801543a:	468c      	mov	ip, r1
 801543c:	4463      	add	r3, ip
 801543e:	6083      	str	r3, [r0, #8]
 8015440:	001a      	movs	r2, r3
 8015442:	1a73      	subs	r3, r6, r1
 8015444:	2601      	movs	r6, #1
 8015446:	4333      	orrs	r3, r6
 8015448:	6053      	str	r3, [r2, #4]
 801544a:	0023      	movs	r3, r4
 801544c:	3b08      	subs	r3, #8
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	9803      	ldr	r0, [sp, #12]
 8015452:	4016      	ands	r6, r2
 8015454:	430e      	orrs	r6, r1
 8015456:	605e      	str	r6, [r3, #4]
 8015458:	f7ff ff78 	bl	801534c <__malloc_unlock>
 801545c:	0027      	movs	r7, r4
 801545e:	e7ab      	b.n	80153b8 <_realloc_r+0x14>
 8015460:	42b1      	cmp	r1, r6
 8015462:	dc27      	bgt.n	80154b4 <_realloc_r+0x110>
 8015464:	68da      	ldr	r2, [r3, #12]
 8015466:	689b      	ldr	r3, [r3, #8]
 8015468:	60da      	str	r2, [r3, #12]
 801546a:	6093      	str	r3, [r2, #8]
 801546c:	9b01      	ldr	r3, [sp, #4]
 801546e:	9a02      	ldr	r2, [sp, #8]
 8015470:	1af4      	subs	r4, r6, r3
 8015472:	9b02      	ldr	r3, [sp, #8]
 8015474:	1992      	adds	r2, r2, r6
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	9304      	str	r3, [sp, #16]
 801547a:	2301      	movs	r3, #1
 801547c:	9804      	ldr	r0, [sp, #16]
 801547e:	4018      	ands	r0, r3
 8015480:	2c0f      	cmp	r4, #15
 8015482:	d800      	bhi.n	8015486 <_realloc_r+0xe2>
 8015484:	e130      	b.n	80156e8 <_realloc_r+0x344>
 8015486:	9d01      	ldr	r5, [sp, #4]
 8015488:	9902      	ldr	r1, [sp, #8]
 801548a:	4328      	orrs	r0, r5
 801548c:	1949      	adds	r1, r1, r5
 801548e:	9d02      	ldr	r5, [sp, #8]
 8015490:	431c      	orrs	r4, r3
 8015492:	6068      	str	r0, [r5, #4]
 8015494:	604c      	str	r4, [r1, #4]
 8015496:	6850      	ldr	r0, [r2, #4]
 8015498:	3108      	adds	r1, #8
 801549a:	4303      	orrs	r3, r0
 801549c:	6053      	str	r3, [r2, #4]
 801549e:	9803      	ldr	r0, [sp, #12]
 80154a0:	f003 fa0e 	bl	80188c0 <_free_r>
 80154a4:	9803      	ldr	r0, [sp, #12]
 80154a6:	f7ff ff51 	bl	801534c <__malloc_unlock>
 80154aa:	9f02      	ldr	r7, [sp, #8]
 80154ac:	3708      	adds	r7, #8
 80154ae:	e783      	b.n	80153b8 <_realloc_r+0x14>
 80154b0:	2200      	movs	r2, #0
 80154b2:	0013      	movs	r3, r2
 80154b4:	07f9      	lsls	r1, r7, #31
 80154b6:	d500      	bpl.n	80154ba <_realloc_r+0x116>
 80154b8:	e0c6      	b.n	8015648 <_realloc_r+0x2a4>
 80154ba:	0021      	movs	r1, r4
 80154bc:	3908      	subs	r1, #8
 80154be:	680d      	ldr	r5, [r1, #0]
 80154c0:	9902      	ldr	r1, [sp, #8]
 80154c2:	1b4d      	subs	r5, r1, r5
 80154c4:	2103      	movs	r1, #3
 80154c6:	686f      	ldr	r7, [r5, #4]
 80154c8:	438f      	bics	r7, r1
 80154ca:	9904      	ldr	r1, [sp, #16]
 80154cc:	187f      	adds	r7, r7, r1
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d100      	bne.n	80154d4 <_realloc_r+0x130>
 80154d2:	e084      	b.n	80155de <_realloc_r+0x23a>
 80154d4:	19d6      	adds	r6, r2, r7
 80154d6:	459c      	cmp	ip, r3
 80154d8:	d148      	bne.n	801556c <_realloc_r+0x1c8>
 80154da:	9b01      	ldr	r3, [sp, #4]
 80154dc:	3310      	adds	r3, #16
 80154de:	42b3      	cmp	r3, r6
 80154e0:	dc7d      	bgt.n	80155de <_realloc_r+0x23a>
 80154e2:	68aa      	ldr	r2, [r5, #8]
 80154e4:	68eb      	ldr	r3, [r5, #12]
 80154e6:	002f      	movs	r7, r5
 80154e8:	60d3      	str	r3, [r2, #12]
 80154ea:	609a      	str	r2, [r3, #8]
 80154ec:	000a      	movs	r2, r1
 80154ee:	3a04      	subs	r2, #4
 80154f0:	3708      	adds	r7, #8
 80154f2:	2a24      	cmp	r2, #36	; 0x24
 80154f4:	d835      	bhi.n	8015562 <_realloc_r+0x1be>
 80154f6:	003b      	movs	r3, r7
 80154f8:	2a13      	cmp	r2, #19
 80154fa:	d908      	bls.n	801550e <_realloc_r+0x16a>
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	60ab      	str	r3, [r5, #8]
 8015500:	6863      	ldr	r3, [r4, #4]
 8015502:	60eb      	str	r3, [r5, #12]
 8015504:	2a1b      	cmp	r2, #27
 8015506:	d81a      	bhi.n	801553e <_realloc_r+0x19a>
 8015508:	002b      	movs	r3, r5
 801550a:	3408      	adds	r4, #8
 801550c:	3310      	adds	r3, #16
 801550e:	6822      	ldr	r2, [r4, #0]
 8015510:	601a      	str	r2, [r3, #0]
 8015512:	6862      	ldr	r2, [r4, #4]
 8015514:	605a      	str	r2, [r3, #4]
 8015516:	68a2      	ldr	r2, [r4, #8]
 8015518:	609a      	str	r2, [r3, #8]
 801551a:	9b01      	ldr	r3, [sp, #4]
 801551c:	18ea      	adds	r2, r5, r3
 801551e:	4b76      	ldr	r3, [pc, #472]	; (80156f8 <_realloc_r+0x354>)
 8015520:	609a      	str	r2, [r3, #8]
 8015522:	9b01      	ldr	r3, [sp, #4]
 8015524:	1af3      	subs	r3, r6, r3
 8015526:	2601      	movs	r6, #1
 8015528:	4333      	orrs	r3, r6
 801552a:	6053      	str	r3, [r2, #4]
 801552c:	686b      	ldr	r3, [r5, #4]
 801552e:	401e      	ands	r6, r3
 8015530:	9b01      	ldr	r3, [sp, #4]
 8015532:	431e      	orrs	r6, r3
 8015534:	606e      	str	r6, [r5, #4]
 8015536:	9803      	ldr	r0, [sp, #12]
 8015538:	f7ff ff08 	bl	801534c <__malloc_unlock>
 801553c:	e73c      	b.n	80153b8 <_realloc_r+0x14>
 801553e:	68a3      	ldr	r3, [r4, #8]
 8015540:	612b      	str	r3, [r5, #16]
 8015542:	68e3      	ldr	r3, [r4, #12]
 8015544:	616b      	str	r3, [r5, #20]
 8015546:	2a24      	cmp	r2, #36	; 0x24
 8015548:	d003      	beq.n	8015552 <_realloc_r+0x1ae>
 801554a:	002b      	movs	r3, r5
 801554c:	3410      	adds	r4, #16
 801554e:	3318      	adds	r3, #24
 8015550:	e7dd      	b.n	801550e <_realloc_r+0x16a>
 8015552:	6923      	ldr	r3, [r4, #16]
 8015554:	61ab      	str	r3, [r5, #24]
 8015556:	002b      	movs	r3, r5
 8015558:	6962      	ldr	r2, [r4, #20]
 801555a:	3320      	adds	r3, #32
 801555c:	61ea      	str	r2, [r5, #28]
 801555e:	3418      	adds	r4, #24
 8015560:	e7d5      	b.n	801550e <_realloc_r+0x16a>
 8015562:	0021      	movs	r1, r4
 8015564:	0038      	movs	r0, r7
 8015566:	f003 fdac 	bl	80190c2 <memmove>
 801556a:	e7d6      	b.n	801551a <_realloc_r+0x176>
 801556c:	9a01      	ldr	r2, [sp, #4]
 801556e:	42b2      	cmp	r2, r6
 8015570:	dc35      	bgt.n	80155de <_realloc_r+0x23a>
 8015572:	0028      	movs	r0, r5
 8015574:	68da      	ldr	r2, [r3, #12]
 8015576:	689b      	ldr	r3, [r3, #8]
 8015578:	3008      	adds	r0, #8
 801557a:	60da      	str	r2, [r3, #12]
 801557c:	6093      	str	r3, [r2, #8]
 801557e:	68aa      	ldr	r2, [r5, #8]
 8015580:	68eb      	ldr	r3, [r5, #12]
 8015582:	60d3      	str	r3, [r2, #12]
 8015584:	609a      	str	r2, [r3, #8]
 8015586:	9a04      	ldr	r2, [sp, #16]
 8015588:	3a04      	subs	r2, #4
 801558a:	2a24      	cmp	r2, #36	; 0x24
 801558c:	d823      	bhi.n	80155d6 <_realloc_r+0x232>
 801558e:	2a13      	cmp	r2, #19
 8015590:	d907      	bls.n	80155a2 <_realloc_r+0x1fe>
 8015592:	6823      	ldr	r3, [r4, #0]
 8015594:	60ab      	str	r3, [r5, #8]
 8015596:	6863      	ldr	r3, [r4, #4]
 8015598:	60eb      	str	r3, [r5, #12]
 801559a:	2a1b      	cmp	r2, #27
 801559c:	d809      	bhi.n	80155b2 <_realloc_r+0x20e>
 801559e:	3408      	adds	r4, #8
 80155a0:	3008      	adds	r0, #8
 80155a2:	6823      	ldr	r3, [r4, #0]
 80155a4:	6003      	str	r3, [r0, #0]
 80155a6:	6863      	ldr	r3, [r4, #4]
 80155a8:	6043      	str	r3, [r0, #4]
 80155aa:	68a3      	ldr	r3, [r4, #8]
 80155ac:	6083      	str	r3, [r0, #8]
 80155ae:	9502      	str	r5, [sp, #8]
 80155b0:	e75c      	b.n	801546c <_realloc_r+0xc8>
 80155b2:	68a3      	ldr	r3, [r4, #8]
 80155b4:	612b      	str	r3, [r5, #16]
 80155b6:	68e3      	ldr	r3, [r4, #12]
 80155b8:	616b      	str	r3, [r5, #20]
 80155ba:	2a24      	cmp	r2, #36	; 0x24
 80155bc:	d003      	beq.n	80155c6 <_realloc_r+0x222>
 80155be:	0028      	movs	r0, r5
 80155c0:	3410      	adds	r4, #16
 80155c2:	3018      	adds	r0, #24
 80155c4:	e7ed      	b.n	80155a2 <_realloc_r+0x1fe>
 80155c6:	0028      	movs	r0, r5
 80155c8:	6923      	ldr	r3, [r4, #16]
 80155ca:	3020      	adds	r0, #32
 80155cc:	61ab      	str	r3, [r5, #24]
 80155ce:	6963      	ldr	r3, [r4, #20]
 80155d0:	3418      	adds	r4, #24
 80155d2:	61eb      	str	r3, [r5, #28]
 80155d4:	e7e5      	b.n	80155a2 <_realloc_r+0x1fe>
 80155d6:	0021      	movs	r1, r4
 80155d8:	f003 fd73 	bl	80190c2 <memmove>
 80155dc:	e7e7      	b.n	80155ae <_realloc_r+0x20a>
 80155de:	9b01      	ldr	r3, [sp, #4]
 80155e0:	42bb      	cmp	r3, r7
 80155e2:	dc31      	bgt.n	8015648 <_realloc_r+0x2a4>
 80155e4:	0028      	movs	r0, r5
 80155e6:	68aa      	ldr	r2, [r5, #8]
 80155e8:	68eb      	ldr	r3, [r5, #12]
 80155ea:	3008      	adds	r0, #8
 80155ec:	60d3      	str	r3, [r2, #12]
 80155ee:	609a      	str	r2, [r3, #8]
 80155f0:	9a04      	ldr	r2, [sp, #16]
 80155f2:	3a04      	subs	r2, #4
 80155f4:	2a24      	cmp	r2, #36	; 0x24
 80155f6:	d823      	bhi.n	8015640 <_realloc_r+0x29c>
 80155f8:	2a13      	cmp	r2, #19
 80155fa:	d907      	bls.n	801560c <_realloc_r+0x268>
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	60ab      	str	r3, [r5, #8]
 8015600:	6863      	ldr	r3, [r4, #4]
 8015602:	60eb      	str	r3, [r5, #12]
 8015604:	2a1b      	cmp	r2, #27
 8015606:	d809      	bhi.n	801561c <_realloc_r+0x278>
 8015608:	3408      	adds	r4, #8
 801560a:	3008      	adds	r0, #8
 801560c:	6823      	ldr	r3, [r4, #0]
 801560e:	6003      	str	r3, [r0, #0]
 8015610:	6863      	ldr	r3, [r4, #4]
 8015612:	6043      	str	r3, [r0, #4]
 8015614:	68a3      	ldr	r3, [r4, #8]
 8015616:	6083      	str	r3, [r0, #8]
 8015618:	003e      	movs	r6, r7
 801561a:	e7c8      	b.n	80155ae <_realloc_r+0x20a>
 801561c:	68a3      	ldr	r3, [r4, #8]
 801561e:	612b      	str	r3, [r5, #16]
 8015620:	68e3      	ldr	r3, [r4, #12]
 8015622:	616b      	str	r3, [r5, #20]
 8015624:	2a24      	cmp	r2, #36	; 0x24
 8015626:	d003      	beq.n	8015630 <_realloc_r+0x28c>
 8015628:	0028      	movs	r0, r5
 801562a:	3410      	adds	r4, #16
 801562c:	3018      	adds	r0, #24
 801562e:	e7ed      	b.n	801560c <_realloc_r+0x268>
 8015630:	0028      	movs	r0, r5
 8015632:	6923      	ldr	r3, [r4, #16]
 8015634:	3020      	adds	r0, #32
 8015636:	61ab      	str	r3, [r5, #24]
 8015638:	6963      	ldr	r3, [r4, #20]
 801563a:	3418      	adds	r4, #24
 801563c:	61eb      	str	r3, [r5, #28]
 801563e:	e7e5      	b.n	801560c <_realloc_r+0x268>
 8015640:	0021      	movs	r1, r4
 8015642:	f003 fd3e 	bl	80190c2 <memmove>
 8015646:	e7e7      	b.n	8015618 <_realloc_r+0x274>
 8015648:	9905      	ldr	r1, [sp, #20]
 801564a:	9803      	ldr	r0, [sp, #12]
 801564c:	f7ff fc2c 	bl	8014ea8 <_malloc_r>
 8015650:	1e07      	subs	r7, r0, #0
 8015652:	d100      	bne.n	8015656 <_realloc_r+0x2b2>
 8015654:	e76f      	b.n	8015536 <_realloc_r+0x192>
 8015656:	0023      	movs	r3, r4
 8015658:	2201      	movs	r2, #1
 801565a:	3b08      	subs	r3, #8
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4393      	bics	r3, r2
 8015660:	9a02      	ldr	r2, [sp, #8]
 8015662:	18d3      	adds	r3, r2, r3
 8015664:	0002      	movs	r2, r0
 8015666:	3a08      	subs	r2, #8
 8015668:	4293      	cmp	r3, r2
 801566a:	d105      	bne.n	8015678 <_realloc_r+0x2d4>
 801566c:	685e      	ldr	r6, [r3, #4]
 801566e:	2303      	movs	r3, #3
 8015670:	439e      	bics	r6, r3
 8015672:	9b04      	ldr	r3, [sp, #16]
 8015674:	18f6      	adds	r6, r6, r3
 8015676:	e6f9      	b.n	801546c <_realloc_r+0xc8>
 8015678:	9a04      	ldr	r2, [sp, #16]
 801567a:	3a04      	subs	r2, #4
 801567c:	2a24      	cmp	r2, #36	; 0x24
 801567e:	d82d      	bhi.n	80156dc <_realloc_r+0x338>
 8015680:	2a13      	cmp	r2, #19
 8015682:	d928      	bls.n	80156d6 <_realloc_r+0x332>
 8015684:	6823      	ldr	r3, [r4, #0]
 8015686:	6003      	str	r3, [r0, #0]
 8015688:	6863      	ldr	r3, [r4, #4]
 801568a:	6043      	str	r3, [r0, #4]
 801568c:	2a1b      	cmp	r2, #27
 801568e:	d80e      	bhi.n	80156ae <_realloc_r+0x30a>
 8015690:	0022      	movs	r2, r4
 8015692:	0003      	movs	r3, r0
 8015694:	3208      	adds	r2, #8
 8015696:	3308      	adds	r3, #8
 8015698:	6811      	ldr	r1, [r2, #0]
 801569a:	6019      	str	r1, [r3, #0]
 801569c:	6851      	ldr	r1, [r2, #4]
 801569e:	6059      	str	r1, [r3, #4]
 80156a0:	6892      	ldr	r2, [r2, #8]
 80156a2:	609a      	str	r2, [r3, #8]
 80156a4:	0021      	movs	r1, r4
 80156a6:	9803      	ldr	r0, [sp, #12]
 80156a8:	f003 f90a 	bl	80188c0 <_free_r>
 80156ac:	e743      	b.n	8015536 <_realloc_r+0x192>
 80156ae:	68a3      	ldr	r3, [r4, #8]
 80156b0:	6083      	str	r3, [r0, #8]
 80156b2:	68e3      	ldr	r3, [r4, #12]
 80156b4:	60c3      	str	r3, [r0, #12]
 80156b6:	2a24      	cmp	r2, #36	; 0x24
 80156b8:	d004      	beq.n	80156c4 <_realloc_r+0x320>
 80156ba:	0022      	movs	r2, r4
 80156bc:	0003      	movs	r3, r0
 80156be:	3210      	adds	r2, #16
 80156c0:	3310      	adds	r3, #16
 80156c2:	e7e9      	b.n	8015698 <_realloc_r+0x2f4>
 80156c4:	6923      	ldr	r3, [r4, #16]
 80156c6:	0022      	movs	r2, r4
 80156c8:	6103      	str	r3, [r0, #16]
 80156ca:	0003      	movs	r3, r0
 80156cc:	6961      	ldr	r1, [r4, #20]
 80156ce:	3218      	adds	r2, #24
 80156d0:	3318      	adds	r3, #24
 80156d2:	6141      	str	r1, [r0, #20]
 80156d4:	e7e0      	b.n	8015698 <_realloc_r+0x2f4>
 80156d6:	0003      	movs	r3, r0
 80156d8:	0022      	movs	r2, r4
 80156da:	e7dd      	b.n	8015698 <_realloc_r+0x2f4>
 80156dc:	0021      	movs	r1, r4
 80156de:	f003 fcf0 	bl	80190c2 <memmove>
 80156e2:	e7df      	b.n	80156a4 <_realloc_r+0x300>
 80156e4:	9e04      	ldr	r6, [sp, #16]
 80156e6:	e6c1      	b.n	801546c <_realloc_r+0xc8>
 80156e8:	9902      	ldr	r1, [sp, #8]
 80156ea:	4306      	orrs	r6, r0
 80156ec:	604e      	str	r6, [r1, #4]
 80156ee:	6851      	ldr	r1, [r2, #4]
 80156f0:	430b      	orrs	r3, r1
 80156f2:	6053      	str	r3, [r2, #4]
 80156f4:	e6d6      	b.n	80154a4 <_realloc_r+0x100>
 80156f6:	46c0      	nop			; (mov r8, r8)
 80156f8:	2000066c 	.word	0x2000066c

080156fc <_sbrk_r>:
 80156fc:	2300      	movs	r3, #0
 80156fe:	b570      	push	{r4, r5, r6, lr}
 8015700:	4c06      	ldr	r4, [pc, #24]	; (801571c <_sbrk_r+0x20>)
 8015702:	0005      	movs	r5, r0
 8015704:	0008      	movs	r0, r1
 8015706:	6023      	str	r3, [r4, #0]
 8015708:	f004 f9ec 	bl	8019ae4 <_sbrk>
 801570c:	1c43      	adds	r3, r0, #1
 801570e:	d103      	bne.n	8015718 <_sbrk_r+0x1c>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d000      	beq.n	8015718 <_sbrk_r+0x1c>
 8015716:	602b      	str	r3, [r5, #0]
 8015718:	bd70      	pop	{r4, r5, r6, pc}
 801571a:	46c0      	nop			; (mov r8, r8)
 801571c:	200072dc 	.word	0x200072dc

08015720 <sprintf>:
 8015720:	b40e      	push	{r1, r2, r3}
 8015722:	b500      	push	{lr}
 8015724:	490b      	ldr	r1, [pc, #44]	; (8015754 <sprintf+0x34>)
 8015726:	b09c      	sub	sp, #112	; 0x70
 8015728:	ab1d      	add	r3, sp, #116	; 0x74
 801572a:	9002      	str	r0, [sp, #8]
 801572c:	9006      	str	r0, [sp, #24]
 801572e:	9107      	str	r1, [sp, #28]
 8015730:	9104      	str	r1, [sp, #16]
 8015732:	4809      	ldr	r0, [pc, #36]	; (8015758 <sprintf+0x38>)
 8015734:	4909      	ldr	r1, [pc, #36]	; (801575c <sprintf+0x3c>)
 8015736:	cb04      	ldmia	r3!, {r2}
 8015738:	9105      	str	r1, [sp, #20]
 801573a:	6800      	ldr	r0, [r0, #0]
 801573c:	a902      	add	r1, sp, #8
 801573e:	9301      	str	r3, [sp, #4]
 8015740:	f000 ff78 	bl	8016634 <_svfprintf_r>
 8015744:	2300      	movs	r3, #0
 8015746:	9a02      	ldr	r2, [sp, #8]
 8015748:	7013      	strb	r3, [r2, #0]
 801574a:	b01c      	add	sp, #112	; 0x70
 801574c:	bc08      	pop	{r3}
 801574e:	b003      	add	sp, #12
 8015750:	4718      	bx	r3
 8015752:	46c0      	nop			; (mov r8, r8)
 8015754:	7fffffff 	.word	0x7fffffff
 8015758:	200000d0 	.word	0x200000d0
 801575c:	ffff0208 	.word	0xffff0208

08015760 <strcat>:
 8015760:	0002      	movs	r2, r0
 8015762:	b510      	push	{r4, lr}
 8015764:	7813      	ldrb	r3, [r2, #0]
 8015766:	1c54      	adds	r4, r2, #1
 8015768:	2b00      	cmp	r3, #0
 801576a:	d105      	bne.n	8015778 <strcat+0x18>
 801576c:	5ccc      	ldrb	r4, [r1, r3]
 801576e:	54d4      	strb	r4, [r2, r3]
 8015770:	3301      	adds	r3, #1
 8015772:	2c00      	cmp	r4, #0
 8015774:	d1fa      	bne.n	801576c <strcat+0xc>
 8015776:	bd10      	pop	{r4, pc}
 8015778:	0022      	movs	r2, r4
 801577a:	e7f3      	b.n	8015764 <strcat+0x4>

0801577c <strchr>:
 801577c:	b2c9      	uxtb	r1, r1
 801577e:	7803      	ldrb	r3, [r0, #0]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d004      	beq.n	801578e <strchr+0x12>
 8015784:	428b      	cmp	r3, r1
 8015786:	d100      	bne.n	801578a <strchr+0xe>
 8015788:	4770      	bx	lr
 801578a:	3001      	adds	r0, #1
 801578c:	e7f7      	b.n	801577e <strchr+0x2>
 801578e:	424b      	negs	r3, r1
 8015790:	4159      	adcs	r1, r3
 8015792:	4249      	negs	r1, r1
 8015794:	4008      	ands	r0, r1
 8015796:	e7f7      	b.n	8015788 <strchr+0xc>

08015798 <strcpy>:
 8015798:	0003      	movs	r3, r0
 801579a:	780a      	ldrb	r2, [r1, #0]
 801579c:	3101      	adds	r1, #1
 801579e:	701a      	strb	r2, [r3, #0]
 80157a0:	3301      	adds	r3, #1
 80157a2:	2a00      	cmp	r2, #0
 80157a4:	d1f9      	bne.n	801579a <strcpy+0x2>
 80157a6:	4770      	bx	lr

080157a8 <strncmp>:
 80157a8:	2300      	movs	r3, #0
 80157aa:	b530      	push	{r4, r5, lr}
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d00a      	beq.n	80157c6 <strncmp+0x1e>
 80157b0:	3a01      	subs	r2, #1
 80157b2:	5cc4      	ldrb	r4, [r0, r3]
 80157b4:	5ccd      	ldrb	r5, [r1, r3]
 80157b6:	42ac      	cmp	r4, r5
 80157b8:	d104      	bne.n	80157c4 <strncmp+0x1c>
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d002      	beq.n	80157c4 <strncmp+0x1c>
 80157be:	3301      	adds	r3, #1
 80157c0:	2c00      	cmp	r4, #0
 80157c2:	d1f6      	bne.n	80157b2 <strncmp+0xa>
 80157c4:	1b63      	subs	r3, r4, r5
 80157c6:	0018      	movs	r0, r3
 80157c8:	bd30      	pop	{r4, r5, pc}

080157ca <strncpy>:
 80157ca:	b530      	push	{r4, r5, lr}
 80157cc:	0005      	movs	r5, r0
 80157ce:	2a00      	cmp	r2, #0
 80157d0:	d100      	bne.n	80157d4 <strncpy+0xa>
 80157d2:	bd30      	pop	{r4, r5, pc}
 80157d4:	780c      	ldrb	r4, [r1, #0]
 80157d6:	3a01      	subs	r2, #1
 80157d8:	1c6b      	adds	r3, r5, #1
 80157da:	702c      	strb	r4, [r5, #0]
 80157dc:	3101      	adds	r1, #1
 80157de:	2c00      	cmp	r4, #0
 80157e0:	d105      	bne.n	80157ee <strncpy+0x24>
 80157e2:	189a      	adds	r2, r3, r2
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d0f4      	beq.n	80157d2 <strncpy+0x8>
 80157e8:	701c      	strb	r4, [r3, #0]
 80157ea:	3301      	adds	r3, #1
 80157ec:	e7fa      	b.n	80157e4 <strncpy+0x1a>
 80157ee:	001d      	movs	r5, r3
 80157f0:	e7ed      	b.n	80157ce <strncpy+0x4>
	...

080157f4 <sulp>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	0016      	movs	r6, r2
 80157f8:	000d      	movs	r5, r1
 80157fa:	f003 ff17 	bl	801962c <__ulp>
 80157fe:	2e00      	cmp	r6, #0
 8015800:	d00d      	beq.n	801581e <sulp+0x2a>
 8015802:	236b      	movs	r3, #107	; 0x6b
 8015804:	006a      	lsls	r2, r5, #1
 8015806:	0d52      	lsrs	r2, r2, #21
 8015808:	1a9b      	subs	r3, r3, r2
 801580a:	2b00      	cmp	r3, #0
 801580c:	dd07      	ble.n	801581e <sulp+0x2a>
 801580e:	2400      	movs	r4, #0
 8015810:	4a03      	ldr	r2, [pc, #12]	; (8015820 <sulp+0x2c>)
 8015812:	051b      	lsls	r3, r3, #20
 8015814:	189d      	adds	r5, r3, r2
 8015816:	002b      	movs	r3, r5
 8015818:	0022      	movs	r2, r4
 801581a:	f7ec fe0b 	bl	8002434 <__aeabi_dmul>
 801581e:	bd70      	pop	{r4, r5, r6, pc}
 8015820:	3ff00000 	.word	0x3ff00000

08015824 <_strtod_l>:
 8015824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015826:	b0a7      	sub	sp, #156	; 0x9c
 8015828:	9307      	str	r3, [sp, #28]
 801582a:	2300      	movs	r3, #0
 801582c:	9004      	str	r0, [sp, #16]
 801582e:	9807      	ldr	r0, [sp, #28]
 8015830:	9322      	str	r3, [sp, #136]	; 0x88
 8015832:	9106      	str	r1, [sp, #24]
 8015834:	921d      	str	r2, [sp, #116]	; 0x74
 8015836:	f003 fc28 	bl	801908a <__localeconv_l>
 801583a:	0005      	movs	r5, r0
 801583c:	6800      	ldr	r0, [r0, #0]
 801583e:	f7ea fc6b 	bl	8000118 <strlen>
 8015842:	2600      	movs	r6, #0
 8015844:	2700      	movs	r7, #0
 8015846:	9b06      	ldr	r3, [sp, #24]
 8015848:	9005      	str	r0, [sp, #20]
 801584a:	9321      	str	r3, [sp, #132]	; 0x84
 801584c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801584e:	781a      	ldrb	r2, [r3, #0]
 8015850:	2a0d      	cmp	r2, #13
 8015852:	d839      	bhi.n	80158c8 <_strtod_l+0xa4>
 8015854:	2a09      	cmp	r2, #9
 8015856:	d23d      	bcs.n	80158d4 <_strtod_l+0xb0>
 8015858:	2a00      	cmp	r2, #0
 801585a:	d044      	beq.n	80158e6 <_strtod_l+0xc2>
 801585c:	2300      	movs	r3, #0
 801585e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015860:	2200      	movs	r2, #0
 8015862:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8015864:	920c      	str	r2, [sp, #48]	; 0x30
 8015866:	7823      	ldrb	r3, [r4, #0]
 8015868:	2b30      	cmp	r3, #48	; 0x30
 801586a:	d000      	beq.n	801586e <_strtod_l+0x4a>
 801586c:	e07e      	b.n	801596c <_strtod_l+0x148>
 801586e:	7863      	ldrb	r3, [r4, #1]
 8015870:	2b58      	cmp	r3, #88	; 0x58
 8015872:	d002      	beq.n	801587a <_strtod_l+0x56>
 8015874:	2b78      	cmp	r3, #120	; 0x78
 8015876:	d000      	beq.n	801587a <_strtod_l+0x56>
 8015878:	e06e      	b.n	8015958 <_strtod_l+0x134>
 801587a:	9b07      	ldr	r3, [sp, #28]
 801587c:	4a96      	ldr	r2, [pc, #600]	; (8015ad8 <_strtod_l+0x2b4>)
 801587e:	9302      	str	r3, [sp, #8]
 8015880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015882:	a921      	add	r1, sp, #132	; 0x84
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	ab22      	add	r3, sp, #136	; 0x88
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	9804      	ldr	r0, [sp, #16]
 801588c:	ab23      	add	r3, sp, #140	; 0x8c
 801588e:	f003 f914 	bl	8018aba <__gethex>
 8015892:	2507      	movs	r5, #7
 8015894:	9005      	str	r0, [sp, #20]
 8015896:	4005      	ands	r5, r0
 8015898:	d005      	beq.n	80158a6 <_strtod_l+0x82>
 801589a:	2d06      	cmp	r5, #6
 801589c:	d12f      	bne.n	80158fe <_strtod_l+0xda>
 801589e:	2300      	movs	r3, #0
 80158a0:	3401      	adds	r4, #1
 80158a2:	9421      	str	r4, [sp, #132]	; 0x84
 80158a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80158a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <_strtod_l+0x8e>
 80158ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158b0:	601a      	str	r2, [r3, #0]
 80158b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d01d      	beq.n	80158f4 <_strtod_l+0xd0>
 80158b8:	2380      	movs	r3, #128	; 0x80
 80158ba:	0032      	movs	r2, r6
 80158bc:	061b      	lsls	r3, r3, #24
 80158be:	18fb      	adds	r3, r7, r3
 80158c0:	0010      	movs	r0, r2
 80158c2:	0019      	movs	r1, r3
 80158c4:	b027      	add	sp, #156	; 0x9c
 80158c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c8:	2a2b      	cmp	r2, #43	; 0x2b
 80158ca:	d016      	beq.n	80158fa <_strtod_l+0xd6>
 80158cc:	2a2d      	cmp	r2, #45	; 0x2d
 80158ce:	d003      	beq.n	80158d8 <_strtod_l+0xb4>
 80158d0:	2a20      	cmp	r2, #32
 80158d2:	d1c3      	bne.n	801585c <_strtod_l+0x38>
 80158d4:	3301      	adds	r3, #1
 80158d6:	e7b8      	b.n	801584a <_strtod_l+0x26>
 80158d8:	2201      	movs	r2, #1
 80158da:	9213      	str	r2, [sp, #76]	; 0x4c
 80158dc:	1c5a      	adds	r2, r3, #1
 80158de:	9221      	str	r2, [sp, #132]	; 0x84
 80158e0:	785b      	ldrb	r3, [r3, #1]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d1bc      	bne.n	8015860 <_strtod_l+0x3c>
 80158e6:	9b06      	ldr	r3, [sp, #24]
 80158e8:	9321      	str	r3, [sp, #132]	; 0x84
 80158ea:	2300      	movs	r3, #0
 80158ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80158ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d1db      	bne.n	80158ac <_strtod_l+0x88>
 80158f4:	0032      	movs	r2, r6
 80158f6:	003b      	movs	r3, r7
 80158f8:	e7e2      	b.n	80158c0 <_strtod_l+0x9c>
 80158fa:	2200      	movs	r2, #0
 80158fc:	e7ed      	b.n	80158da <_strtod_l+0xb6>
 80158fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015900:	2a00      	cmp	r2, #0
 8015902:	d007      	beq.n	8015914 <_strtod_l+0xf0>
 8015904:	2135      	movs	r1, #53	; 0x35
 8015906:	a824      	add	r0, sp, #144	; 0x90
 8015908:	f003 ff7d 	bl	8019806 <__copybits>
 801590c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801590e:	9804      	ldr	r0, [sp, #16]
 8015910:	f003 fc12 	bl	8019138 <_Bfree>
 8015914:	1e68      	subs	r0, r5, #1
 8015916:	2804      	cmp	r0, #4
 8015918:	d806      	bhi.n	8015928 <_strtod_l+0x104>
 801591a:	f7ea fc05 	bl	8000128 <__gnu_thumb1_case_uqi>
 801591e:	030c      	.short	0x030c
 8015920:	1917      	.short	0x1917
 8015922:	0c          	.byte	0x0c
 8015923:	00          	.byte	0x00
 8015924:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015926:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015928:	9b05      	ldr	r3, [sp, #20]
 801592a:	071b      	lsls	r3, r3, #28
 801592c:	d5bb      	bpl.n	80158a6 <_strtod_l+0x82>
 801592e:	2380      	movs	r3, #128	; 0x80
 8015930:	061b      	lsls	r3, r3, #24
 8015932:	431f      	orrs	r7, r3
 8015934:	e7b7      	b.n	80158a6 <_strtod_l+0x82>
 8015936:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015938:	4a68      	ldr	r2, [pc, #416]	; (8015adc <_strtod_l+0x2b8>)
 801593a:	4969      	ldr	r1, [pc, #420]	; (8015ae0 <_strtod_l+0x2bc>)
 801593c:	401a      	ands	r2, r3
 801593e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015940:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015942:	185b      	adds	r3, r3, r1
 8015944:	051b      	lsls	r3, r3, #20
 8015946:	431a      	orrs	r2, r3
 8015948:	0017      	movs	r7, r2
 801594a:	e7ed      	b.n	8015928 <_strtod_l+0x104>
 801594c:	4f65      	ldr	r7, [pc, #404]	; (8015ae4 <_strtod_l+0x2c0>)
 801594e:	e7eb      	b.n	8015928 <_strtod_l+0x104>
 8015950:	2601      	movs	r6, #1
 8015952:	4f65      	ldr	r7, [pc, #404]	; (8015ae8 <_strtod_l+0x2c4>)
 8015954:	4276      	negs	r6, r6
 8015956:	e7e7      	b.n	8015928 <_strtod_l+0x104>
 8015958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801595a:	1c5a      	adds	r2, r3, #1
 801595c:	9221      	str	r2, [sp, #132]	; 0x84
 801595e:	785b      	ldrb	r3, [r3, #1]
 8015960:	2b30      	cmp	r3, #48	; 0x30
 8015962:	d0f9      	beq.n	8015958 <_strtod_l+0x134>
 8015964:	2b00      	cmp	r3, #0
 8015966:	d09e      	beq.n	80158a6 <_strtod_l+0x82>
 8015968:	2301      	movs	r3, #1
 801596a:	930c      	str	r3, [sp, #48]	; 0x30
 801596c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801596e:	220a      	movs	r2, #10
 8015970:	9312      	str	r3, [sp, #72]	; 0x48
 8015972:	2300      	movs	r3, #0
 8015974:	930b      	str	r3, [sp, #44]	; 0x2c
 8015976:	9308      	str	r3, [sp, #32]
 8015978:	930a      	str	r3, [sp, #40]	; 0x28
 801597a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801597c:	7804      	ldrb	r4, [r0, #0]
 801597e:	0023      	movs	r3, r4
 8015980:	3b30      	subs	r3, #48	; 0x30
 8015982:	b2d9      	uxtb	r1, r3
 8015984:	2909      	cmp	r1, #9
 8015986:	d934      	bls.n	80159f2 <_strtod_l+0x1ce>
 8015988:	9a05      	ldr	r2, [sp, #20]
 801598a:	6829      	ldr	r1, [r5, #0]
 801598c:	f7ff ff0c 	bl	80157a8 <strncmp>
 8015990:	2800      	cmp	r0, #0
 8015992:	d040      	beq.n	8015a16 <_strtod_l+0x1f2>
 8015994:	2000      	movs	r0, #0
 8015996:	0023      	movs	r3, r4
 8015998:	4684      	mov	ip, r0
 801599a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801599c:	9007      	str	r0, [sp, #28]
 801599e:	9205      	str	r2, [sp, #20]
 80159a0:	2220      	movs	r2, #32
 80159a2:	0019      	movs	r1, r3
 80159a4:	4391      	bics	r1, r2
 80159a6:	000a      	movs	r2, r1
 80159a8:	2100      	movs	r1, #0
 80159aa:	2a45      	cmp	r2, #69	; 0x45
 80159ac:	d000      	beq.n	80159b0 <_strtod_l+0x18c>
 80159ae:	e0bf      	b.n	8015b30 <_strtod_l+0x30c>
 80159b0:	9b05      	ldr	r3, [sp, #20]
 80159b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159b4:	4303      	orrs	r3, r0
 80159b6:	4313      	orrs	r3, r2
 80159b8:	428b      	cmp	r3, r1
 80159ba:	d094      	beq.n	80158e6 <_strtod_l+0xc2>
 80159bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159be:	9306      	str	r3, [sp, #24]
 80159c0:	3301      	adds	r3, #1
 80159c2:	9321      	str	r3, [sp, #132]	; 0x84
 80159c4:	9b06      	ldr	r3, [sp, #24]
 80159c6:	785b      	ldrb	r3, [r3, #1]
 80159c8:	2b2b      	cmp	r3, #43	; 0x2b
 80159ca:	d100      	bne.n	80159ce <_strtod_l+0x1aa>
 80159cc:	e082      	b.n	8015ad4 <_strtod_l+0x2b0>
 80159ce:	000c      	movs	r4, r1
 80159d0:	2b2d      	cmp	r3, #45	; 0x2d
 80159d2:	d105      	bne.n	80159e0 <_strtod_l+0x1bc>
 80159d4:	2401      	movs	r4, #1
 80159d6:	9b06      	ldr	r3, [sp, #24]
 80159d8:	3302      	adds	r3, #2
 80159da:	9321      	str	r3, [sp, #132]	; 0x84
 80159dc:	9b06      	ldr	r3, [sp, #24]
 80159de:	789b      	ldrb	r3, [r3, #2]
 80159e0:	001a      	movs	r2, r3
 80159e2:	3a30      	subs	r2, #48	; 0x30
 80159e4:	2a09      	cmp	r2, #9
 80159e6:	d800      	bhi.n	80159ea <_strtod_l+0x1c6>
 80159e8:	e084      	b.n	8015af4 <_strtod_l+0x2d0>
 80159ea:	9a06      	ldr	r2, [sp, #24]
 80159ec:	2100      	movs	r1, #0
 80159ee:	9221      	str	r2, [sp, #132]	; 0x84
 80159f0:	e09e      	b.n	8015b30 <_strtod_l+0x30c>
 80159f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80159f4:	2908      	cmp	r1, #8
 80159f6:	dc09      	bgt.n	8015a0c <_strtod_l+0x1e8>
 80159f8:	9908      	ldr	r1, [sp, #32]
 80159fa:	4351      	muls	r1, r2
 80159fc:	18cb      	adds	r3, r1, r3
 80159fe:	9308      	str	r3, [sp, #32]
 8015a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a02:	3001      	adds	r0, #1
 8015a04:	3301      	adds	r3, #1
 8015a06:	930a      	str	r3, [sp, #40]	; 0x28
 8015a08:	9021      	str	r0, [sp, #132]	; 0x84
 8015a0a:	e7b6      	b.n	801597a <_strtod_l+0x156>
 8015a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a0e:	4351      	muls	r1, r2
 8015a10:	18cb      	adds	r3, r1, r3
 8015a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a14:	e7f4      	b.n	8015a00 <_strtod_l+0x1dc>
 8015a16:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a18:	9b05      	ldr	r3, [sp, #20]
 8015a1a:	4694      	mov	ip, r2
 8015a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a1e:	4463      	add	r3, ip
 8015a20:	9321      	str	r3, [sp, #132]	; 0x84
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	2a00      	cmp	r2, #0
 8015a26:	d036      	beq.n	8015a96 <_strtod_l+0x272>
 8015a28:	4684      	mov	ip, r0
 8015a2a:	9205      	str	r2, [sp, #20]
 8015a2c:	001a      	movs	r2, r3
 8015a2e:	3a30      	subs	r2, #48	; 0x30
 8015a30:	2a09      	cmp	r2, #9
 8015a32:	d912      	bls.n	8015a5a <_strtod_l+0x236>
 8015a34:	2201      	movs	r2, #1
 8015a36:	9207      	str	r2, [sp, #28]
 8015a38:	e7b2      	b.n	80159a0 <_strtod_l+0x17c>
 8015a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a3c:	3001      	adds	r0, #1
 8015a3e:	1c5a      	adds	r2, r3, #1
 8015a40:	9221      	str	r2, [sp, #132]	; 0x84
 8015a42:	785b      	ldrb	r3, [r3, #1]
 8015a44:	2b30      	cmp	r3, #48	; 0x30
 8015a46:	d0f8      	beq.n	8015a3a <_strtod_l+0x216>
 8015a48:	001a      	movs	r2, r3
 8015a4a:	3a31      	subs	r2, #49	; 0x31
 8015a4c:	2a08      	cmp	r2, #8
 8015a4e:	d83c      	bhi.n	8015aca <_strtod_l+0x2a6>
 8015a50:	4684      	mov	ip, r0
 8015a52:	2000      	movs	r0, #0
 8015a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a56:	9005      	str	r0, [sp, #20]
 8015a58:	9212      	str	r2, [sp, #72]	; 0x48
 8015a5a:	3b30      	subs	r3, #48	; 0x30
 8015a5c:	1c42      	adds	r2, r0, #1
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d013      	beq.n	8015a8a <_strtod_l+0x266>
 8015a62:	210a      	movs	r1, #10
 8015a64:	4494      	add	ip, r2
 8015a66:	9a05      	ldr	r2, [sp, #20]
 8015a68:	1885      	adds	r5, r0, r2
 8015a6a:	42aa      	cmp	r2, r5
 8015a6c:	d115      	bne.n	8015a9a <_strtod_l+0x276>
 8015a6e:	9905      	ldr	r1, [sp, #20]
 8015a70:	9a05      	ldr	r2, [sp, #20]
 8015a72:	3101      	adds	r1, #1
 8015a74:	1809      	adds	r1, r1, r0
 8015a76:	1812      	adds	r2, r2, r0
 8015a78:	9105      	str	r1, [sp, #20]
 8015a7a:	2a08      	cmp	r2, #8
 8015a7c:	dc1b      	bgt.n	8015ab6 <_strtod_l+0x292>
 8015a7e:	220a      	movs	r2, #10
 8015a80:	9908      	ldr	r1, [sp, #32]
 8015a82:	434a      	muls	r2, r1
 8015a84:	189b      	adds	r3, r3, r2
 8015a86:	2200      	movs	r2, #0
 8015a88:	9308      	str	r3, [sp, #32]
 8015a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a8c:	0010      	movs	r0, r2
 8015a8e:	1c59      	adds	r1, r3, #1
 8015a90:	9121      	str	r1, [sp, #132]	; 0x84
 8015a92:	785b      	ldrb	r3, [r3, #1]
 8015a94:	e7ca      	b.n	8015a2c <_strtod_l+0x208>
 8015a96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a98:	e7d4      	b.n	8015a44 <_strtod_l+0x220>
 8015a9a:	1c54      	adds	r4, r2, #1
 8015a9c:	2a08      	cmp	r2, #8
 8015a9e:	dc04      	bgt.n	8015aaa <_strtod_l+0x286>
 8015aa0:	9a08      	ldr	r2, [sp, #32]
 8015aa2:	434a      	muls	r2, r1
 8015aa4:	9208      	str	r2, [sp, #32]
 8015aa6:	0022      	movs	r2, r4
 8015aa8:	e7df      	b.n	8015a6a <_strtod_l+0x246>
 8015aaa:	2c10      	cmp	r4, #16
 8015aac:	dcfb      	bgt.n	8015aa6 <_strtod_l+0x282>
 8015aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ab0:	434a      	muls	r2, r1
 8015ab2:	920b      	str	r2, [sp, #44]	; 0x2c
 8015ab4:	e7f7      	b.n	8015aa6 <_strtod_l+0x282>
 8015ab6:	9905      	ldr	r1, [sp, #20]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	2910      	cmp	r1, #16
 8015abc:	dce5      	bgt.n	8015a8a <_strtod_l+0x266>
 8015abe:	210a      	movs	r1, #10
 8015ac0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015ac2:	4341      	muls	r1, r0
 8015ac4:	185b      	adds	r3, r3, r1
 8015ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ac8:	e7df      	b.n	8015a8a <_strtod_l+0x266>
 8015aca:	2200      	movs	r2, #0
 8015acc:	4694      	mov	ip, r2
 8015ace:	9205      	str	r2, [sp, #20]
 8015ad0:	3201      	adds	r2, #1
 8015ad2:	e7b0      	b.n	8015a36 <_strtod_l+0x212>
 8015ad4:	000c      	movs	r4, r1
 8015ad6:	e77e      	b.n	80159d6 <_strtod_l+0x1b2>
 8015ad8:	0801d270 	.word	0x0801d270
 8015adc:	ffefffff 	.word	0xffefffff
 8015ae0:	00000433 	.word	0x00000433
 8015ae4:	7ff00000 	.word	0x7ff00000
 8015ae8:	7fffffff 	.word	0x7fffffff
 8015aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015aee:	1c5a      	adds	r2, r3, #1
 8015af0:	9221      	str	r2, [sp, #132]	; 0x84
 8015af2:	785b      	ldrb	r3, [r3, #1]
 8015af4:	2b30      	cmp	r3, #48	; 0x30
 8015af6:	d0f9      	beq.n	8015aec <_strtod_l+0x2c8>
 8015af8:	001a      	movs	r2, r3
 8015afa:	3a31      	subs	r2, #49	; 0x31
 8015afc:	2100      	movs	r1, #0
 8015afe:	2a08      	cmp	r2, #8
 8015b00:	d816      	bhi.n	8015b30 <_strtod_l+0x30c>
 8015b02:	3b30      	subs	r3, #48	; 0x30
 8015b04:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015b06:	930e      	str	r3, [sp, #56]	; 0x38
 8015b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b0a:	1c59      	adds	r1, r3, #1
 8015b0c:	9121      	str	r1, [sp, #132]	; 0x84
 8015b0e:	785b      	ldrb	r3, [r3, #1]
 8015b10:	001a      	movs	r2, r3
 8015b12:	3a30      	subs	r2, #48	; 0x30
 8015b14:	2a09      	cmp	r2, #9
 8015b16:	d932      	bls.n	8015b7e <_strtod_l+0x35a>
 8015b18:	1b4a      	subs	r2, r1, r5
 8015b1a:	4dad      	ldr	r5, [pc, #692]	; (8015dd0 <_strtod_l+0x5ac>)
 8015b1c:	0029      	movs	r1, r5
 8015b1e:	2a08      	cmp	r2, #8
 8015b20:	dc03      	bgt.n	8015b2a <_strtod_l+0x306>
 8015b22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b24:	42a9      	cmp	r1, r5
 8015b26:	dd00      	ble.n	8015b2a <_strtod_l+0x306>
 8015b28:	0029      	movs	r1, r5
 8015b2a:	2c00      	cmp	r4, #0
 8015b2c:	d000      	beq.n	8015b30 <_strtod_l+0x30c>
 8015b2e:	4249      	negs	r1, r1
 8015b30:	9a05      	ldr	r2, [sp, #20]
 8015b32:	2a00      	cmp	r2, #0
 8015b34:	d149      	bne.n	8015bca <_strtod_l+0x3a6>
 8015b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b38:	4310      	orrs	r0, r2
 8015b3a:	d000      	beq.n	8015b3e <_strtod_l+0x31a>
 8015b3c:	e6b3      	b.n	80158a6 <_strtod_l+0x82>
 8015b3e:	9a07      	ldr	r2, [sp, #28]
 8015b40:	2a00      	cmp	r2, #0
 8015b42:	d000      	beq.n	8015b46 <_strtod_l+0x322>
 8015b44:	e6cf      	b.n	80158e6 <_strtod_l+0xc2>
 8015b46:	2b4e      	cmp	r3, #78	; 0x4e
 8015b48:	d025      	beq.n	8015b96 <_strtod_l+0x372>
 8015b4a:	dc1f      	bgt.n	8015b8c <_strtod_l+0x368>
 8015b4c:	2b49      	cmp	r3, #73	; 0x49
 8015b4e:	d000      	beq.n	8015b52 <_strtod_l+0x32e>
 8015b50:	e6c9      	b.n	80158e6 <_strtod_l+0xc2>
 8015b52:	49a0      	ldr	r1, [pc, #640]	; (8015dd4 <_strtod_l+0x5b0>)
 8015b54:	a821      	add	r0, sp, #132	; 0x84
 8015b56:	f003 f9ed 	bl	8018f34 <__match>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	d100      	bne.n	8015b60 <_strtod_l+0x33c>
 8015b5e:	e6c2      	b.n	80158e6 <_strtod_l+0xc2>
 8015b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b62:	499d      	ldr	r1, [pc, #628]	; (8015dd8 <_strtod_l+0x5b4>)
 8015b64:	3b01      	subs	r3, #1
 8015b66:	a821      	add	r0, sp, #132	; 0x84
 8015b68:	9321      	str	r3, [sp, #132]	; 0x84
 8015b6a:	f003 f9e3 	bl	8018f34 <__match>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d102      	bne.n	8015b78 <_strtod_l+0x354>
 8015b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b74:	3301      	adds	r3, #1
 8015b76:	9321      	str	r3, [sp, #132]	; 0x84
 8015b78:	4f98      	ldr	r7, [pc, #608]	; (8015ddc <_strtod_l+0x5b8>)
 8015b7a:	2600      	movs	r6, #0
 8015b7c:	e693      	b.n	80158a6 <_strtod_l+0x82>
 8015b7e:	220a      	movs	r2, #10
 8015b80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b82:	434a      	muls	r2, r1
 8015b84:	18d2      	adds	r2, r2, r3
 8015b86:	3a30      	subs	r2, #48	; 0x30
 8015b88:	920e      	str	r2, [sp, #56]	; 0x38
 8015b8a:	e7bd      	b.n	8015b08 <_strtod_l+0x2e4>
 8015b8c:	2b69      	cmp	r3, #105	; 0x69
 8015b8e:	d0e0      	beq.n	8015b52 <_strtod_l+0x32e>
 8015b90:	2b6e      	cmp	r3, #110	; 0x6e
 8015b92:	d000      	beq.n	8015b96 <_strtod_l+0x372>
 8015b94:	e6a7      	b.n	80158e6 <_strtod_l+0xc2>
 8015b96:	4992      	ldr	r1, [pc, #584]	; (8015de0 <_strtod_l+0x5bc>)
 8015b98:	a821      	add	r0, sp, #132	; 0x84
 8015b9a:	f003 f9cb 	bl	8018f34 <__match>
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d100      	bne.n	8015ba4 <_strtod_l+0x380>
 8015ba2:	e6a0      	b.n	80158e6 <_strtod_l+0xc2>
 8015ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	2b28      	cmp	r3, #40	; 0x28
 8015baa:	d10c      	bne.n	8015bc6 <_strtod_l+0x3a2>
 8015bac:	aa24      	add	r2, sp, #144	; 0x90
 8015bae:	498d      	ldr	r1, [pc, #564]	; (8015de4 <_strtod_l+0x5c0>)
 8015bb0:	a821      	add	r0, sp, #132	; 0x84
 8015bb2:	f003 f9d3 	bl	8018f5c <__hexnan>
 8015bb6:	2805      	cmp	r0, #5
 8015bb8:	d105      	bne.n	8015bc6 <_strtod_l+0x3a2>
 8015bba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015bbc:	4a87      	ldr	r2, [pc, #540]	; (8015ddc <_strtod_l+0x5b8>)
 8015bbe:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015bc0:	431a      	orrs	r2, r3
 8015bc2:	0017      	movs	r7, r2
 8015bc4:	e66f      	b.n	80158a6 <_strtod_l+0x82>
 8015bc6:	4f88      	ldr	r7, [pc, #544]	; (8015de8 <_strtod_l+0x5c4>)
 8015bc8:	e7d7      	b.n	8015b7a <_strtod_l+0x356>
 8015bca:	4663      	mov	r3, ip
 8015bcc:	1acb      	subs	r3, r1, r3
 8015bce:	9307      	str	r3, [sp, #28]
 8015bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d101      	bne.n	8015bda <_strtod_l+0x3b6>
 8015bd6:	9b05      	ldr	r3, [sp, #20]
 8015bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8015bda:	9c05      	ldr	r4, [sp, #20]
 8015bdc:	2c10      	cmp	r4, #16
 8015bde:	dd00      	ble.n	8015be2 <_strtod_l+0x3be>
 8015be0:	2410      	movs	r4, #16
 8015be2:	9808      	ldr	r0, [sp, #32]
 8015be4:	f7ed fa6c 	bl	80030c0 <__aeabi_ui2d>
 8015be8:	9b05      	ldr	r3, [sp, #20]
 8015bea:	0006      	movs	r6, r0
 8015bec:	000f      	movs	r7, r1
 8015bee:	2b09      	cmp	r3, #9
 8015bf0:	dc15      	bgt.n	8015c1e <_strtod_l+0x3fa>
 8015bf2:	9b07      	ldr	r3, [sp, #28]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d100      	bne.n	8015bfa <_strtod_l+0x3d6>
 8015bf8:	e655      	b.n	80158a6 <_strtod_l+0x82>
 8015bfa:	9b07      	ldr	r3, [sp, #28]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	dc00      	bgt.n	8015c02 <_strtod_l+0x3de>
 8015c00:	e07d      	b.n	8015cfe <_strtod_l+0x4da>
 8015c02:	2b16      	cmp	r3, #22
 8015c04:	dc62      	bgt.n	8015ccc <_strtod_l+0x4a8>
 8015c06:	00dc      	lsls	r4, r3, #3
 8015c08:	4b78      	ldr	r3, [pc, #480]	; (8015dec <_strtod_l+0x5c8>)
 8015c0a:	0032      	movs	r2, r6
 8015c0c:	1919      	adds	r1, r3, r4
 8015c0e:	003b      	movs	r3, r7
 8015c10:	6808      	ldr	r0, [r1, #0]
 8015c12:	6849      	ldr	r1, [r1, #4]
 8015c14:	f7ec fc0e 	bl	8002434 <__aeabi_dmul>
 8015c18:	0006      	movs	r6, r0
 8015c1a:	000f      	movs	r7, r1
 8015c1c:	e643      	b.n	80158a6 <_strtod_l+0x82>
 8015c1e:	0022      	movs	r2, r4
 8015c20:	4b72      	ldr	r3, [pc, #456]	; (8015dec <_strtod_l+0x5c8>)
 8015c22:	3a09      	subs	r2, #9
 8015c24:	00d2      	lsls	r2, r2, #3
 8015c26:	189b      	adds	r3, r3, r2
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	f7ec fc02 	bl	8002434 <__aeabi_dmul>
 8015c30:	0006      	movs	r6, r0
 8015c32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015c34:	000f      	movs	r7, r1
 8015c36:	f7ed fa43 	bl	80030c0 <__aeabi_ui2d>
 8015c3a:	000b      	movs	r3, r1
 8015c3c:	0002      	movs	r2, r0
 8015c3e:	0039      	movs	r1, r7
 8015c40:	0030      	movs	r0, r6
 8015c42:	f7eb fcd1 	bl	80015e8 <__aeabi_dadd>
 8015c46:	9b05      	ldr	r3, [sp, #20]
 8015c48:	0006      	movs	r6, r0
 8015c4a:	000f      	movs	r7, r1
 8015c4c:	2b0f      	cmp	r3, #15
 8015c4e:	ddd0      	ble.n	8015bf2 <_strtod_l+0x3ce>
 8015c50:	9b05      	ldr	r3, [sp, #20]
 8015c52:	1b1c      	subs	r4, r3, r4
 8015c54:	9b07      	ldr	r3, [sp, #28]
 8015c56:	18e4      	adds	r4, r4, r3
 8015c58:	2c00      	cmp	r4, #0
 8015c5a:	dc00      	bgt.n	8015c5e <_strtod_l+0x43a>
 8015c5c:	e094      	b.n	8015d88 <_strtod_l+0x564>
 8015c5e:	230f      	movs	r3, #15
 8015c60:	4023      	ands	r3, r4
 8015c62:	d00a      	beq.n	8015c7a <_strtod_l+0x456>
 8015c64:	4961      	ldr	r1, [pc, #388]	; (8015dec <_strtod_l+0x5c8>)
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	18c9      	adds	r1, r1, r3
 8015c6a:	0032      	movs	r2, r6
 8015c6c:	6808      	ldr	r0, [r1, #0]
 8015c6e:	6849      	ldr	r1, [r1, #4]
 8015c70:	003b      	movs	r3, r7
 8015c72:	f7ec fbdf 	bl	8002434 <__aeabi_dmul>
 8015c76:	0006      	movs	r6, r0
 8015c78:	000f      	movs	r7, r1
 8015c7a:	230f      	movs	r3, #15
 8015c7c:	439c      	bics	r4, r3
 8015c7e:	d06e      	beq.n	8015d5e <_strtod_l+0x53a>
 8015c80:	3326      	adds	r3, #38	; 0x26
 8015c82:	33ff      	adds	r3, #255	; 0xff
 8015c84:	429c      	cmp	r4, r3
 8015c86:	dd48      	ble.n	8015d1a <_strtod_l+0x4f6>
 8015c88:	2400      	movs	r4, #0
 8015c8a:	9405      	str	r4, [sp, #20]
 8015c8c:	940b      	str	r4, [sp, #44]	; 0x2c
 8015c8e:	940a      	str	r4, [sp, #40]	; 0x28
 8015c90:	2322      	movs	r3, #34	; 0x22
 8015c92:	2600      	movs	r6, #0
 8015c94:	9a04      	ldr	r2, [sp, #16]
 8015c96:	4f51      	ldr	r7, [pc, #324]	; (8015ddc <_strtod_l+0x5b8>)
 8015c98:	6013      	str	r3, [r2, #0]
 8015c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c9c:	42b3      	cmp	r3, r6
 8015c9e:	d100      	bne.n	8015ca2 <_strtod_l+0x47e>
 8015ca0:	e601      	b.n	80158a6 <_strtod_l+0x82>
 8015ca2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015ca4:	9804      	ldr	r0, [sp, #16]
 8015ca6:	f003 fa47 	bl	8019138 <_Bfree>
 8015caa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015cac:	9804      	ldr	r0, [sp, #16]
 8015cae:	f003 fa43 	bl	8019138 <_Bfree>
 8015cb2:	9905      	ldr	r1, [sp, #20]
 8015cb4:	9804      	ldr	r0, [sp, #16]
 8015cb6:	f003 fa3f 	bl	8019138 <_Bfree>
 8015cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cbc:	9804      	ldr	r0, [sp, #16]
 8015cbe:	f003 fa3b 	bl	8019138 <_Bfree>
 8015cc2:	0021      	movs	r1, r4
 8015cc4:	9804      	ldr	r0, [sp, #16]
 8015cc6:	f003 fa37 	bl	8019138 <_Bfree>
 8015cca:	e5ec      	b.n	80158a6 <_strtod_l+0x82>
 8015ccc:	2325      	movs	r3, #37	; 0x25
 8015cce:	9a05      	ldr	r2, [sp, #20]
 8015cd0:	1a9b      	subs	r3, r3, r2
 8015cd2:	9a07      	ldr	r2, [sp, #28]
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	dbbb      	blt.n	8015c50 <_strtod_l+0x42c>
 8015cd8:	230f      	movs	r3, #15
 8015cda:	9a05      	ldr	r2, [sp, #20]
 8015cdc:	4c43      	ldr	r4, [pc, #268]	; (8015dec <_strtod_l+0x5c8>)
 8015cde:	1a9d      	subs	r5, r3, r2
 8015ce0:	00e9      	lsls	r1, r5, #3
 8015ce2:	1861      	adds	r1, r4, r1
 8015ce4:	0032      	movs	r2, r6
 8015ce6:	6808      	ldr	r0, [r1, #0]
 8015ce8:	6849      	ldr	r1, [r1, #4]
 8015cea:	003b      	movs	r3, r7
 8015cec:	f7ec fba2 	bl	8002434 <__aeabi_dmul>
 8015cf0:	9b07      	ldr	r3, [sp, #28]
 8015cf2:	1b5e      	subs	r6, r3, r5
 8015cf4:	00f6      	lsls	r6, r6, #3
 8015cf6:	19a6      	adds	r6, r4, r6
 8015cf8:	6832      	ldr	r2, [r6, #0]
 8015cfa:	6873      	ldr	r3, [r6, #4]
 8015cfc:	e78a      	b.n	8015c14 <_strtod_l+0x3f0>
 8015cfe:	9b07      	ldr	r3, [sp, #28]
 8015d00:	3316      	adds	r3, #22
 8015d02:	dba5      	blt.n	8015c50 <_strtod_l+0x42c>
 8015d04:	9b07      	ldr	r3, [sp, #28]
 8015d06:	0030      	movs	r0, r6
 8015d08:	00da      	lsls	r2, r3, #3
 8015d0a:	4b38      	ldr	r3, [pc, #224]	; (8015dec <_strtod_l+0x5c8>)
 8015d0c:	0039      	movs	r1, r7
 8015d0e:	1a9b      	subs	r3, r3, r2
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	f7eb ff84 	bl	8001c20 <__aeabi_ddiv>
 8015d18:	e77e      	b.n	8015c18 <_strtod_l+0x3f4>
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	0030      	movs	r0, r6
 8015d1e:	0039      	movs	r1, r7
 8015d20:	001d      	movs	r5, r3
 8015d22:	1124      	asrs	r4, r4, #4
 8015d24:	2c01      	cmp	r4, #1
 8015d26:	dc1d      	bgt.n	8015d64 <_strtod_l+0x540>
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d001      	beq.n	8015d30 <_strtod_l+0x50c>
 8015d2c:	0006      	movs	r6, r0
 8015d2e:	000f      	movs	r7, r1
 8015d30:	4b2f      	ldr	r3, [pc, #188]	; (8015df0 <_strtod_l+0x5cc>)
 8015d32:	00ed      	lsls	r5, r5, #3
 8015d34:	18ff      	adds	r7, r7, r3
 8015d36:	4b2f      	ldr	r3, [pc, #188]	; (8015df4 <_strtod_l+0x5d0>)
 8015d38:	0032      	movs	r2, r6
 8015d3a:	195d      	adds	r5, r3, r5
 8015d3c:	6828      	ldr	r0, [r5, #0]
 8015d3e:	6869      	ldr	r1, [r5, #4]
 8015d40:	003b      	movs	r3, r7
 8015d42:	f7ec fb77 	bl	8002434 <__aeabi_dmul>
 8015d46:	4b25      	ldr	r3, [pc, #148]	; (8015ddc <_strtod_l+0x5b8>)
 8015d48:	4a2b      	ldr	r2, [pc, #172]	; (8015df8 <_strtod_l+0x5d4>)
 8015d4a:	0006      	movs	r6, r0
 8015d4c:	400b      	ands	r3, r1
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d89a      	bhi.n	8015c88 <_strtod_l+0x464>
 8015d52:	4a2a      	ldr	r2, [pc, #168]	; (8015dfc <_strtod_l+0x5d8>)
 8015d54:	4293      	cmp	r3, r2
 8015d56:	d913      	bls.n	8015d80 <_strtod_l+0x55c>
 8015d58:	2601      	movs	r6, #1
 8015d5a:	4f29      	ldr	r7, [pc, #164]	; (8015e00 <_strtod_l+0x5dc>)
 8015d5c:	4276      	negs	r6, r6
 8015d5e:	2300      	movs	r3, #0
 8015d60:	9306      	str	r3, [sp, #24]
 8015d62:	e07b      	b.n	8015e5c <_strtod_l+0x638>
 8015d64:	2201      	movs	r2, #1
 8015d66:	4214      	tst	r4, r2
 8015d68:	d007      	beq.n	8015d7a <_strtod_l+0x556>
 8015d6a:	4a22      	ldr	r2, [pc, #136]	; (8015df4 <_strtod_l+0x5d0>)
 8015d6c:	00eb      	lsls	r3, r5, #3
 8015d6e:	189b      	adds	r3, r3, r2
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	f7ec fb5e 	bl	8002434 <__aeabi_dmul>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	3501      	adds	r5, #1
 8015d7c:	1064      	asrs	r4, r4, #1
 8015d7e:	e7d1      	b.n	8015d24 <_strtod_l+0x500>
 8015d80:	23d4      	movs	r3, #212	; 0xd4
 8015d82:	049b      	lsls	r3, r3, #18
 8015d84:	18cf      	adds	r7, r1, r3
 8015d86:	e7ea      	b.n	8015d5e <_strtod_l+0x53a>
 8015d88:	2c00      	cmp	r4, #0
 8015d8a:	d0e8      	beq.n	8015d5e <_strtod_l+0x53a>
 8015d8c:	230f      	movs	r3, #15
 8015d8e:	4264      	negs	r4, r4
 8015d90:	4023      	ands	r3, r4
 8015d92:	d00a      	beq.n	8015daa <_strtod_l+0x586>
 8015d94:	4a15      	ldr	r2, [pc, #84]	; (8015dec <_strtod_l+0x5c8>)
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	18d3      	adds	r3, r2, r3
 8015d9a:	0030      	movs	r0, r6
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	0039      	movs	r1, r7
 8015da2:	f7eb ff3d 	bl	8001c20 <__aeabi_ddiv>
 8015da6:	0006      	movs	r6, r0
 8015da8:	000f      	movs	r7, r1
 8015daa:	1124      	asrs	r4, r4, #4
 8015dac:	d0d7      	beq.n	8015d5e <_strtod_l+0x53a>
 8015dae:	2c1f      	cmp	r4, #31
 8015db0:	dd28      	ble.n	8015e04 <_strtod_l+0x5e0>
 8015db2:	2400      	movs	r4, #0
 8015db4:	9405      	str	r4, [sp, #20]
 8015db6:	940b      	str	r4, [sp, #44]	; 0x2c
 8015db8:	940a      	str	r4, [sp, #40]	; 0x28
 8015dba:	2322      	movs	r3, #34	; 0x22
 8015dbc:	9a04      	ldr	r2, [sp, #16]
 8015dbe:	2600      	movs	r6, #0
 8015dc0:	6013      	str	r3, [r2, #0]
 8015dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc4:	2700      	movs	r7, #0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d000      	beq.n	8015dcc <_strtod_l+0x5a8>
 8015dca:	e76a      	b.n	8015ca2 <_strtod_l+0x47e>
 8015dcc:	e56b      	b.n	80158a6 <_strtod_l+0x82>
 8015dce:	46c0      	nop			; (mov r8, r8)
 8015dd0:	00004e1f 	.word	0x00004e1f
 8015dd4:	0801d2c5 	.word	0x0801d2c5
 8015dd8:	0801d418 	.word	0x0801d418
 8015ddc:	7ff00000 	.word	0x7ff00000
 8015de0:	0801d2cd 	.word	0x0801d2cd
 8015de4:	0801d284 	.word	0x0801d284
 8015de8:	fff80000 	.word	0xfff80000
 8015dec:	0801d450 	.word	0x0801d450
 8015df0:	fcb00000 	.word	0xfcb00000
 8015df4:	0801d428 	.word	0x0801d428
 8015df8:	7ca00000 	.word	0x7ca00000
 8015dfc:	7c900000 	.word	0x7c900000
 8015e00:	7fefffff 	.word	0x7fefffff
 8015e04:	2310      	movs	r3, #16
 8015e06:	4023      	ands	r3, r4
 8015e08:	9306      	str	r3, [sp, #24]
 8015e0a:	d001      	beq.n	8015e10 <_strtod_l+0x5ec>
 8015e0c:	236a      	movs	r3, #106	; 0x6a
 8015e0e:	9306      	str	r3, [sp, #24]
 8015e10:	2300      	movs	r3, #0
 8015e12:	0030      	movs	r0, r6
 8015e14:	0039      	movs	r1, r7
 8015e16:	001d      	movs	r5, r3
 8015e18:	2c00      	cmp	r4, #0
 8015e1a:	dd00      	ble.n	8015e1e <_strtod_l+0x5fa>
 8015e1c:	e10e      	b.n	801603c <_strtod_l+0x818>
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d001      	beq.n	8015e26 <_strtod_l+0x602>
 8015e22:	0006      	movs	r6, r0
 8015e24:	000f      	movs	r7, r1
 8015e26:	9b06      	ldr	r3, [sp, #24]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00f      	beq.n	8015e4c <_strtod_l+0x628>
 8015e2c:	236b      	movs	r3, #107	; 0x6b
 8015e2e:	0079      	lsls	r1, r7, #1
 8015e30:	0d49      	lsrs	r1, r1, #21
 8015e32:	003a      	movs	r2, r7
 8015e34:	1a5b      	subs	r3, r3, r1
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	dd08      	ble.n	8015e4c <_strtod_l+0x628>
 8015e3a:	2b1f      	cmp	r3, #31
 8015e3c:	dc00      	bgt.n	8015e40 <_strtod_l+0x61c>
 8015e3e:	e112      	b.n	8016066 <_strtod_l+0x842>
 8015e40:	2600      	movs	r6, #0
 8015e42:	2b34      	cmp	r3, #52	; 0x34
 8015e44:	dc00      	bgt.n	8015e48 <_strtod_l+0x624>
 8015e46:	e107      	b.n	8016058 <_strtod_l+0x834>
 8015e48:	27dc      	movs	r7, #220	; 0xdc
 8015e4a:	04bf      	lsls	r7, r7, #18
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	2300      	movs	r3, #0
 8015e50:	0030      	movs	r0, r6
 8015e52:	0039      	movs	r1, r7
 8015e54:	f7ea fb02 	bl	800045c <__aeabi_dcmpeq>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d1aa      	bne.n	8015db2 <_strtod_l+0x58e>
 8015e5c:	9b08      	ldr	r3, [sp, #32]
 8015e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015e64:	9b05      	ldr	r3, [sp, #20]
 8015e66:	9804      	ldr	r0, [sp, #16]
 8015e68:	f003 f9ae 	bl	80191c8 <__s2b>
 8015e6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	d100      	bne.n	8015e74 <_strtod_l+0x650>
 8015e72:	e709      	b.n	8015c88 <_strtod_l+0x464>
 8015e74:	9b07      	ldr	r3, [sp, #28]
 8015e76:	9a07      	ldr	r2, [sp, #28]
 8015e78:	17db      	asrs	r3, r3, #31
 8015e7a:	4252      	negs	r2, r2
 8015e7c:	4013      	ands	r3, r2
 8015e7e:	9315      	str	r3, [sp, #84]	; 0x54
 8015e80:	9b07      	ldr	r3, [sp, #28]
 8015e82:	2400      	movs	r4, #0
 8015e84:	43db      	mvns	r3, r3
 8015e86:	9a07      	ldr	r2, [sp, #28]
 8015e88:	17db      	asrs	r3, r3, #31
 8015e8a:	401a      	ands	r2, r3
 8015e8c:	921c      	str	r2, [sp, #112]	; 0x70
 8015e8e:	9405      	str	r4, [sp, #20]
 8015e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e92:	9804      	ldr	r0, [sp, #16]
 8015e94:	6859      	ldr	r1, [r3, #4]
 8015e96:	f003 f927 	bl	80190e8 <_Balloc>
 8015e9a:	900a      	str	r0, [sp, #40]	; 0x28
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	d100      	bne.n	8015ea2 <_strtod_l+0x67e>
 8015ea0:	e6f6      	b.n	8015c90 <_strtod_l+0x46c>
 8015ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ea6:	691b      	ldr	r3, [r3, #16]
 8015ea8:	310c      	adds	r1, #12
 8015eaa:	1c9a      	adds	r2, r3, #2
 8015eac:	0092      	lsls	r2, r2, #2
 8015eae:	300c      	adds	r0, #12
 8015eb0:	9308      	str	r3, [sp, #32]
 8015eb2:	f7ff fa32 	bl	801531a <memcpy>
 8015eb6:	ab24      	add	r3, sp, #144	; 0x90
 8015eb8:	9301      	str	r3, [sp, #4]
 8015eba:	ab23      	add	r3, sp, #140	; 0x8c
 8015ebc:	9300      	str	r3, [sp, #0]
 8015ebe:	0032      	movs	r2, r6
 8015ec0:	003b      	movs	r3, r7
 8015ec2:	9804      	ldr	r0, [sp, #16]
 8015ec4:	960e      	str	r6, [sp, #56]	; 0x38
 8015ec6:	970f      	str	r7, [sp, #60]	; 0x3c
 8015ec8:	f003 fc22 	bl	8019710 <__d2b>
 8015ecc:	9022      	str	r0, [sp, #136]	; 0x88
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d100      	bne.n	8015ed4 <_strtod_l+0x6b0>
 8015ed2:	e6dd      	b.n	8015c90 <_strtod_l+0x46c>
 8015ed4:	2101      	movs	r1, #1
 8015ed6:	9804      	ldr	r0, [sp, #16]
 8015ed8:	f003 f9fd 	bl	80192d6 <__i2b>
 8015edc:	9005      	str	r0, [sp, #20]
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	d100      	bne.n	8015ee4 <_strtod_l+0x6c0>
 8015ee2:	e6d5      	b.n	8015c90 <_strtod_l+0x46c>
 8015ee4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	da00      	bge.n	8015eec <_strtod_l+0x6c8>
 8015eea:	e0c1      	b.n	8016070 <_strtod_l+0x84c>
 8015eec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015eee:	189d      	adds	r5, r3, r2
 8015ef0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ef2:	4694      	mov	ip, r2
 8015ef4:	9906      	ldr	r1, [sp, #24]
 8015ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015ef8:	1a5b      	subs	r3, r3, r1
 8015efa:	2136      	movs	r1, #54	; 0x36
 8015efc:	189b      	adds	r3, r3, r2
 8015efe:	1a8a      	subs	r2, r1, r2
 8015f00:	49b2      	ldr	r1, [pc, #712]	; (80161cc <_strtod_l+0x9a8>)
 8015f02:	3b01      	subs	r3, #1
 8015f04:	2001      	movs	r0, #1
 8015f06:	428b      	cmp	r3, r1
 8015f08:	db00      	blt.n	8015f0c <_strtod_l+0x6e8>
 8015f0a:	e0bd      	b.n	8016088 <_strtod_l+0x864>
 8015f0c:	1ac9      	subs	r1, r1, r3
 8015f0e:	1a52      	subs	r2, r2, r1
 8015f10:	291f      	cmp	r1, #31
 8015f12:	dd00      	ble.n	8015f16 <_strtod_l+0x6f2>
 8015f14:	e0b1      	b.n	801607a <_strtod_l+0x856>
 8015f16:	4088      	lsls	r0, r1
 8015f18:	2300      	movs	r3, #0
 8015f1a:	9014      	str	r0, [sp, #80]	; 0x50
 8015f1c:	9310      	str	r3, [sp, #64]	; 0x40
 8015f1e:	18ab      	adds	r3, r5, r2
 8015f20:	9308      	str	r3, [sp, #32]
 8015f22:	0013      	movs	r3, r2
 8015f24:	9a06      	ldr	r2, [sp, #24]
 8015f26:	4463      	add	r3, ip
 8015f28:	18d3      	adds	r3, r2, r3
 8015f2a:	9a08      	ldr	r2, [sp, #32]
 8015f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8015f2e:	002b      	movs	r3, r5
 8015f30:	4295      	cmp	r5, r2
 8015f32:	dd00      	ble.n	8015f36 <_strtod_l+0x712>
 8015f34:	0013      	movs	r3, r2
 8015f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	dd00      	ble.n	8015f3e <_strtod_l+0x71a>
 8015f3c:	0013      	movs	r3, r2
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	dd06      	ble.n	8015f50 <_strtod_l+0x72c>
 8015f42:	9a08      	ldr	r2, [sp, #32]
 8015f44:	1aed      	subs	r5, r5, r3
 8015f46:	1ad2      	subs	r2, r2, r3
 8015f48:	9208      	str	r2, [sp, #32]
 8015f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f4c:	1ad2      	subs	r2, r2, r3
 8015f4e:	920c      	str	r2, [sp, #48]	; 0x30
 8015f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d017      	beq.n	8015f86 <_strtod_l+0x762>
 8015f56:	001a      	movs	r2, r3
 8015f58:	9905      	ldr	r1, [sp, #20]
 8015f5a:	9804      	ldr	r0, [sp, #16]
 8015f5c:	f003 fa54 	bl	8019408 <__pow5mult>
 8015f60:	9005      	str	r0, [sp, #20]
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d100      	bne.n	8015f68 <_strtod_l+0x744>
 8015f66:	e693      	b.n	8015c90 <_strtod_l+0x46c>
 8015f68:	0001      	movs	r1, r0
 8015f6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015f6c:	9804      	ldr	r0, [sp, #16]
 8015f6e:	f003 f9bb 	bl	80192e8 <__multiply>
 8015f72:	9012      	str	r0, [sp, #72]	; 0x48
 8015f74:	2800      	cmp	r0, #0
 8015f76:	d100      	bne.n	8015f7a <_strtod_l+0x756>
 8015f78:	e68a      	b.n	8015c90 <_strtod_l+0x46c>
 8015f7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015f7c:	9804      	ldr	r0, [sp, #16]
 8015f7e:	f003 f8db 	bl	8019138 <_Bfree>
 8015f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f84:	9322      	str	r3, [sp, #136]	; 0x88
 8015f86:	9b08      	ldr	r3, [sp, #32]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	dd00      	ble.n	8015f8e <_strtod_l+0x76a>
 8015f8c:	e07f      	b.n	801608e <_strtod_l+0x86a>
 8015f8e:	9b07      	ldr	r3, [sp, #28]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	dd08      	ble.n	8015fa6 <_strtod_l+0x782>
 8015f94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f98:	9804      	ldr	r0, [sp, #16]
 8015f9a:	f003 fa35 	bl	8019408 <__pow5mult>
 8015f9e:	900a      	str	r0, [sp, #40]	; 0x28
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d100      	bne.n	8015fa6 <_strtod_l+0x782>
 8015fa4:	e674      	b.n	8015c90 <_strtod_l+0x46c>
 8015fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	dd08      	ble.n	8015fbe <_strtod_l+0x79a>
 8015fac:	001a      	movs	r2, r3
 8015fae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015fb0:	9804      	ldr	r0, [sp, #16]
 8015fb2:	f003 fa6b 	bl	801948c <__lshift>
 8015fb6:	900a      	str	r0, [sp, #40]	; 0x28
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	d100      	bne.n	8015fbe <_strtod_l+0x79a>
 8015fbc:	e668      	b.n	8015c90 <_strtod_l+0x46c>
 8015fbe:	2d00      	cmp	r5, #0
 8015fc0:	dd08      	ble.n	8015fd4 <_strtod_l+0x7b0>
 8015fc2:	002a      	movs	r2, r5
 8015fc4:	9905      	ldr	r1, [sp, #20]
 8015fc6:	9804      	ldr	r0, [sp, #16]
 8015fc8:	f003 fa60 	bl	801948c <__lshift>
 8015fcc:	9005      	str	r0, [sp, #20]
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	d100      	bne.n	8015fd4 <_strtod_l+0x7b0>
 8015fd2:	e65d      	b.n	8015c90 <_strtod_l+0x46c>
 8015fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fd6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015fd8:	9804      	ldr	r0, [sp, #16]
 8015fda:	f003 fac3 	bl	8019564 <__mdiff>
 8015fde:	1e04      	subs	r4, r0, #0
 8015fe0:	d100      	bne.n	8015fe4 <_strtod_l+0x7c0>
 8015fe2:	e655      	b.n	8015c90 <_strtod_l+0x46c>
 8015fe4:	2500      	movs	r5, #0
 8015fe6:	68c3      	ldr	r3, [r0, #12]
 8015fe8:	9905      	ldr	r1, [sp, #20]
 8015fea:	60c5      	str	r5, [r0, #12]
 8015fec:	9312      	str	r3, [sp, #72]	; 0x48
 8015fee:	f003 fa9f 	bl	8019530 <__mcmp>
 8015ff2:	42a8      	cmp	r0, r5
 8015ff4:	da55      	bge.n	80160a2 <_strtod_l+0x87e>
 8015ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ff8:	42ab      	cmp	r3, r5
 8015ffa:	d11b      	bne.n	8016034 <_strtod_l+0x810>
 8015ffc:	42ae      	cmp	r6, r5
 8015ffe:	d119      	bne.n	8016034 <_strtod_l+0x810>
 8016000:	033b      	lsls	r3, r7, #12
 8016002:	42ab      	cmp	r3, r5
 8016004:	d116      	bne.n	8016034 <_strtod_l+0x810>
 8016006:	22d6      	movs	r2, #214	; 0xd6
 8016008:	4b71      	ldr	r3, [pc, #452]	; (80161d0 <_strtod_l+0x9ac>)
 801600a:	04d2      	lsls	r2, r2, #19
 801600c:	403b      	ands	r3, r7
 801600e:	4293      	cmp	r3, r2
 8016010:	d910      	bls.n	8016034 <_strtod_l+0x810>
 8016012:	6963      	ldr	r3, [r4, #20]
 8016014:	42ab      	cmp	r3, r5
 8016016:	d102      	bne.n	801601e <_strtod_l+0x7fa>
 8016018:	6923      	ldr	r3, [r4, #16]
 801601a:	2b01      	cmp	r3, #1
 801601c:	dd0a      	ble.n	8016034 <_strtod_l+0x810>
 801601e:	0021      	movs	r1, r4
 8016020:	2201      	movs	r2, #1
 8016022:	9804      	ldr	r0, [sp, #16]
 8016024:	f003 fa32 	bl	801948c <__lshift>
 8016028:	9905      	ldr	r1, [sp, #20]
 801602a:	0004      	movs	r4, r0
 801602c:	f003 fa80 	bl	8019530 <__mcmp>
 8016030:	2800      	cmp	r0, #0
 8016032:	dc6b      	bgt.n	801610c <_strtod_l+0x8e8>
 8016034:	9b06      	ldr	r3, [sp, #24]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d178      	bne.n	801612c <_strtod_l+0x908>
 801603a:	e632      	b.n	8015ca2 <_strtod_l+0x47e>
 801603c:	2201      	movs	r2, #1
 801603e:	4214      	tst	r4, r2
 8016040:	d007      	beq.n	8016052 <_strtod_l+0x82e>
 8016042:	4a64      	ldr	r2, [pc, #400]	; (80161d4 <_strtod_l+0x9b0>)
 8016044:	00eb      	lsls	r3, r5, #3
 8016046:	18d3      	adds	r3, r2, r3
 8016048:	681a      	ldr	r2, [r3, #0]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	f7ec f9f2 	bl	8002434 <__aeabi_dmul>
 8016050:	2301      	movs	r3, #1
 8016052:	3501      	adds	r5, #1
 8016054:	1064      	asrs	r4, r4, #1
 8016056:	e6df      	b.n	8015e18 <_strtod_l+0x5f4>
 8016058:	2101      	movs	r1, #1
 801605a:	3b20      	subs	r3, #32
 801605c:	4249      	negs	r1, r1
 801605e:	4099      	lsls	r1, r3
 8016060:	400a      	ands	r2, r1
 8016062:	0017      	movs	r7, r2
 8016064:	e6f2      	b.n	8015e4c <_strtod_l+0x628>
 8016066:	2201      	movs	r2, #1
 8016068:	4252      	negs	r2, r2
 801606a:	409a      	lsls	r2, r3
 801606c:	4016      	ands	r6, r2
 801606e:	e6ed      	b.n	8015e4c <_strtod_l+0x628>
 8016070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016072:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016074:	1ad2      	subs	r2, r2, r3
 8016076:	4694      	mov	ip, r2
 8016078:	e73c      	b.n	8015ef4 <_strtod_l+0x6d0>
 801607a:	4957      	ldr	r1, [pc, #348]	; (80161d8 <_strtod_l+0x9b4>)
 801607c:	1acb      	subs	r3, r1, r3
 801607e:	0001      	movs	r1, r0
 8016080:	4099      	lsls	r1, r3
 8016082:	9110      	str	r1, [sp, #64]	; 0x40
 8016084:	9014      	str	r0, [sp, #80]	; 0x50
 8016086:	e74a      	b.n	8015f1e <_strtod_l+0x6fa>
 8016088:	2300      	movs	r3, #0
 801608a:	9310      	str	r3, [sp, #64]	; 0x40
 801608c:	e7fa      	b.n	8016084 <_strtod_l+0x860>
 801608e:	9a08      	ldr	r2, [sp, #32]
 8016090:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016092:	9804      	ldr	r0, [sp, #16]
 8016094:	f003 f9fa 	bl	801948c <__lshift>
 8016098:	9022      	str	r0, [sp, #136]	; 0x88
 801609a:	2800      	cmp	r0, #0
 801609c:	d000      	beq.n	80160a0 <_strtod_l+0x87c>
 801609e:	e776      	b.n	8015f8e <_strtod_l+0x76a>
 80160a0:	e5f6      	b.n	8015c90 <_strtod_l+0x46c>
 80160a2:	970c      	str	r7, [sp, #48]	; 0x30
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d000      	beq.n	80160aa <_strtod_l+0x886>
 80160a8:	e0a0      	b.n	80161ec <_strtod_l+0x9c8>
 80160aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160ac:	033b      	lsls	r3, r7, #12
 80160ae:	0b1b      	lsrs	r3, r3, #12
 80160b0:	2a00      	cmp	r2, #0
 80160b2:	d027      	beq.n	8016104 <_strtod_l+0x8e0>
 80160b4:	4a49      	ldr	r2, [pc, #292]	; (80161dc <_strtod_l+0x9b8>)
 80160b6:	4293      	cmp	r3, r2
 80160b8:	d157      	bne.n	801616a <_strtod_l+0x946>
 80160ba:	2201      	movs	r2, #1
 80160bc:	9b06      	ldr	r3, [sp, #24]
 80160be:	4252      	negs	r2, r2
 80160c0:	0031      	movs	r1, r6
 80160c2:	0010      	movs	r0, r2
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d00b      	beq.n	80160e0 <_strtod_l+0x8bc>
 80160c8:	25d4      	movs	r5, #212	; 0xd4
 80160ca:	4b41      	ldr	r3, [pc, #260]	; (80161d0 <_strtod_l+0x9ac>)
 80160cc:	04ed      	lsls	r5, r5, #19
 80160ce:	403b      	ands	r3, r7
 80160d0:	0010      	movs	r0, r2
 80160d2:	42ab      	cmp	r3, r5
 80160d4:	d804      	bhi.n	80160e0 <_strtod_l+0x8bc>
 80160d6:	306c      	adds	r0, #108	; 0x6c
 80160d8:	0d1b      	lsrs	r3, r3, #20
 80160da:	1ac3      	subs	r3, r0, r3
 80160dc:	409a      	lsls	r2, r3
 80160de:	0010      	movs	r0, r2
 80160e0:	4281      	cmp	r1, r0
 80160e2:	d142      	bne.n	801616a <_strtod_l+0x946>
 80160e4:	4b3e      	ldr	r3, [pc, #248]	; (80161e0 <_strtod_l+0x9bc>)
 80160e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160e8:	429a      	cmp	r2, r3
 80160ea:	d102      	bne.n	80160f2 <_strtod_l+0x8ce>
 80160ec:	1c4b      	adds	r3, r1, #1
 80160ee:	d100      	bne.n	80160f2 <_strtod_l+0x8ce>
 80160f0:	e5ce      	b.n	8015c90 <_strtod_l+0x46c>
 80160f2:	4b37      	ldr	r3, [pc, #220]	; (80161d0 <_strtod_l+0x9ac>)
 80160f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160f6:	2600      	movs	r6, #0
 80160f8:	401a      	ands	r2, r3
 80160fa:	0013      	movs	r3, r2
 80160fc:	2280      	movs	r2, #128	; 0x80
 80160fe:	0352      	lsls	r2, r2, #13
 8016100:	189f      	adds	r7, r3, r2
 8016102:	e797      	b.n	8016034 <_strtod_l+0x810>
 8016104:	2b00      	cmp	r3, #0
 8016106:	d130      	bne.n	801616a <_strtod_l+0x946>
 8016108:	2e00      	cmp	r6, #0
 801610a:	d12e      	bne.n	801616a <_strtod_l+0x946>
 801610c:	9906      	ldr	r1, [sp, #24]
 801610e:	003b      	movs	r3, r7
 8016110:	4a2f      	ldr	r2, [pc, #188]	; (80161d0 <_strtod_l+0x9ac>)
 8016112:	2900      	cmp	r1, #0
 8016114:	d020      	beq.n	8016158 <_strtod_l+0x934>
 8016116:	0011      	movs	r1, r2
 8016118:	20d6      	movs	r0, #214	; 0xd6
 801611a:	4039      	ands	r1, r7
 801611c:	04c0      	lsls	r0, r0, #19
 801611e:	4281      	cmp	r1, r0
 8016120:	dc1a      	bgt.n	8016158 <_strtod_l+0x934>
 8016122:	23dc      	movs	r3, #220	; 0xdc
 8016124:	049b      	lsls	r3, r3, #18
 8016126:	4299      	cmp	r1, r3
 8016128:	dc00      	bgt.n	801612c <_strtod_l+0x908>
 801612a:	e646      	b.n	8015dba <_strtod_l+0x596>
 801612c:	4b2d      	ldr	r3, [pc, #180]	; (80161e4 <_strtod_l+0x9c0>)
 801612e:	0030      	movs	r0, r6
 8016130:	931b      	str	r3, [sp, #108]	; 0x6c
 8016132:	2300      	movs	r3, #0
 8016134:	931a      	str	r3, [sp, #104]	; 0x68
 8016136:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016138:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801613a:	0039      	movs	r1, r7
 801613c:	f7ec f97a 	bl	8002434 <__aeabi_dmul>
 8016140:	0006      	movs	r6, r0
 8016142:	000f      	movs	r7, r1
 8016144:	1e0b      	subs	r3, r1, #0
 8016146:	d000      	beq.n	801614a <_strtod_l+0x926>
 8016148:	e5ab      	b.n	8015ca2 <_strtod_l+0x47e>
 801614a:	2800      	cmp	r0, #0
 801614c:	d000      	beq.n	8016150 <_strtod_l+0x92c>
 801614e:	e5a8      	b.n	8015ca2 <_strtod_l+0x47e>
 8016150:	9a04      	ldr	r2, [sp, #16]
 8016152:	3322      	adds	r3, #34	; 0x22
 8016154:	6013      	str	r3, [r2, #0]
 8016156:	e5a4      	b.n	8015ca2 <_strtod_l+0x47e>
 8016158:	2601      	movs	r6, #1
 801615a:	4013      	ands	r3, r2
 801615c:	4a22      	ldr	r2, [pc, #136]	; (80161e8 <_strtod_l+0x9c4>)
 801615e:	4276      	negs	r6, r6
 8016160:	189b      	adds	r3, r3, r2
 8016162:	4a1e      	ldr	r2, [pc, #120]	; (80161dc <_strtod_l+0x9b8>)
 8016164:	431a      	orrs	r2, r3
 8016166:	0017      	movs	r7, r2
 8016168:	e764      	b.n	8016034 <_strtod_l+0x810>
 801616a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801616c:	2b00      	cmp	r3, #0
 801616e:	d015      	beq.n	801619c <_strtod_l+0x978>
 8016170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016174:	4213      	tst	r3, r2
 8016176:	d100      	bne.n	801617a <_strtod_l+0x956>
 8016178:	e75c      	b.n	8016034 <_strtod_l+0x810>
 801617a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801617c:	9a06      	ldr	r2, [sp, #24]
 801617e:	0030      	movs	r0, r6
 8016180:	0039      	movs	r1, r7
 8016182:	2b00      	cmp	r3, #0
 8016184:	d00f      	beq.n	80161a6 <_strtod_l+0x982>
 8016186:	f7ff fb35 	bl	80157f4 <sulp>
 801618a:	0002      	movs	r2, r0
 801618c:	000b      	movs	r3, r1
 801618e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016192:	f7eb fa29 	bl	80015e8 <__aeabi_dadd>
 8016196:	0006      	movs	r6, r0
 8016198:	000f      	movs	r7, r1
 801619a:	e74b      	b.n	8016034 <_strtod_l+0x810>
 801619c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801619e:	4233      	tst	r3, r6
 80161a0:	d100      	bne.n	80161a4 <_strtod_l+0x980>
 80161a2:	e747      	b.n	8016034 <_strtod_l+0x810>
 80161a4:	e7e9      	b.n	801617a <_strtod_l+0x956>
 80161a6:	f7ff fb25 	bl	80157f4 <sulp>
 80161aa:	0002      	movs	r2, r0
 80161ac:	000b      	movs	r3, r1
 80161ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80161b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80161b2:	f7ec fbb1 	bl	8002918 <__aeabi_dsub>
 80161b6:	2200      	movs	r2, #0
 80161b8:	2300      	movs	r3, #0
 80161ba:	0006      	movs	r6, r0
 80161bc:	000f      	movs	r7, r1
 80161be:	f7ea f94d 	bl	800045c <__aeabi_dcmpeq>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	d000      	beq.n	80161c8 <_strtod_l+0x9a4>
 80161c6:	e5f8      	b.n	8015dba <_strtod_l+0x596>
 80161c8:	e734      	b.n	8016034 <_strtod_l+0x810>
 80161ca:	46c0      	nop			; (mov r8, r8)
 80161cc:	fffffc02 	.word	0xfffffc02
 80161d0:	7ff00000 	.word	0x7ff00000
 80161d4:	0801d298 	.word	0x0801d298
 80161d8:	fffffbe2 	.word	0xfffffbe2
 80161dc:	000fffff 	.word	0x000fffff
 80161e0:	7fefffff 	.word	0x7fefffff
 80161e4:	39500000 	.word	0x39500000
 80161e8:	fff00000 	.word	0xfff00000
 80161ec:	9905      	ldr	r1, [sp, #20]
 80161ee:	0020      	movs	r0, r4
 80161f0:	f003 fae2 	bl	80197b8 <__ratio>
 80161f4:	2380      	movs	r3, #128	; 0x80
 80161f6:	2200      	movs	r2, #0
 80161f8:	05db      	lsls	r3, r3, #23
 80161fa:	9008      	str	r0, [sp, #32]
 80161fc:	9109      	str	r1, [sp, #36]	; 0x24
 80161fe:	f7ea f93d 	bl	800047c <__aeabi_dcmple>
 8016202:	2800      	cmp	r0, #0
 8016204:	d100      	bne.n	8016208 <_strtod_l+0x9e4>
 8016206:	e07f      	b.n	8016308 <_strtod_l+0xae4>
 8016208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801620a:	2b00      	cmp	r3, #0
 801620c:	d04b      	beq.n	80162a6 <_strtod_l+0xa82>
 801620e:	2200      	movs	r2, #0
 8016210:	4b8a      	ldr	r3, [pc, #552]	; (801643c <_strtod_l+0xc18>)
 8016212:	9210      	str	r2, [sp, #64]	; 0x40
 8016214:	9311      	str	r3, [sp, #68]	; 0x44
 8016216:	4b89      	ldr	r3, [pc, #548]	; (801643c <_strtod_l+0xc18>)
 8016218:	9308      	str	r3, [sp, #32]
 801621a:	4a89      	ldr	r2, [pc, #548]	; (8016440 <_strtod_l+0xc1c>)
 801621c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801621e:	4013      	ands	r3, r2
 8016220:	9314      	str	r3, [sp, #80]	; 0x50
 8016222:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016224:	4b87      	ldr	r3, [pc, #540]	; (8016444 <_strtod_l+0xc20>)
 8016226:	429a      	cmp	r2, r3
 8016228:	d000      	beq.n	801622c <_strtod_l+0xa08>
 801622a:	e0ba      	b.n	80163a2 <_strtod_l+0xb7e>
 801622c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801622e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016230:	921a      	str	r2, [sp, #104]	; 0x68
 8016232:	931b      	str	r3, [sp, #108]	; 0x6c
 8016234:	4a84      	ldr	r2, [pc, #528]	; (8016448 <_strtod_l+0xc24>)
 8016236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016238:	4694      	mov	ip, r2
 801623a:	4463      	add	r3, ip
 801623c:	001f      	movs	r7, r3
 801623e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016242:	0030      	movs	r0, r6
 8016244:	0039      	movs	r1, r7
 8016246:	920c      	str	r2, [sp, #48]	; 0x30
 8016248:	930d      	str	r3, [sp, #52]	; 0x34
 801624a:	f003 f9ef 	bl	801962c <__ulp>
 801624e:	0002      	movs	r2, r0
 8016250:	000b      	movs	r3, r1
 8016252:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016254:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016256:	f7ec f8ed 	bl	8002434 <__aeabi_dmul>
 801625a:	0032      	movs	r2, r6
 801625c:	003b      	movs	r3, r7
 801625e:	f7eb f9c3 	bl	80015e8 <__aeabi_dadd>
 8016262:	4a77      	ldr	r2, [pc, #476]	; (8016440 <_strtod_l+0xc1c>)
 8016264:	4b79      	ldr	r3, [pc, #484]	; (801644c <_strtod_l+0xc28>)
 8016266:	0006      	movs	r6, r0
 8016268:	400a      	ands	r2, r1
 801626a:	429a      	cmp	r2, r3
 801626c:	d964      	bls.n	8016338 <_strtod_l+0xb14>
 801626e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016270:	4a77      	ldr	r2, [pc, #476]	; (8016450 <_strtod_l+0xc2c>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d103      	bne.n	801627e <_strtod_l+0xa5a>
 8016276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016278:	3301      	adds	r3, #1
 801627a:	d100      	bne.n	801627e <_strtod_l+0xa5a>
 801627c:	e508      	b.n	8015c90 <_strtod_l+0x46c>
 801627e:	2601      	movs	r6, #1
 8016280:	4f73      	ldr	r7, [pc, #460]	; (8016450 <_strtod_l+0xc2c>)
 8016282:	4276      	negs	r6, r6
 8016284:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016286:	9804      	ldr	r0, [sp, #16]
 8016288:	f002 ff56 	bl	8019138 <_Bfree>
 801628c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801628e:	9804      	ldr	r0, [sp, #16]
 8016290:	f002 ff52 	bl	8019138 <_Bfree>
 8016294:	9905      	ldr	r1, [sp, #20]
 8016296:	9804      	ldr	r0, [sp, #16]
 8016298:	f002 ff4e 	bl	8019138 <_Bfree>
 801629c:	0021      	movs	r1, r4
 801629e:	9804      	ldr	r0, [sp, #16]
 80162a0:	f002 ff4a 	bl	8019138 <_Bfree>
 80162a4:	e5f4      	b.n	8015e90 <_strtod_l+0x66c>
 80162a6:	2e00      	cmp	r6, #0
 80162a8:	d11e      	bne.n	80162e8 <_strtod_l+0xac4>
 80162aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ac:	031b      	lsls	r3, r3, #12
 80162ae:	d121      	bne.n	80162f4 <_strtod_l+0xad0>
 80162b0:	9808      	ldr	r0, [sp, #32]
 80162b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162b4:	2200      	movs	r2, #0
 80162b6:	4b61      	ldr	r3, [pc, #388]	; (801643c <_strtod_l+0xc18>)
 80162b8:	f7ea f8d6 	bl	8000468 <__aeabi_dcmplt>
 80162bc:	2800      	cmp	r0, #0
 80162be:	d11f      	bne.n	8016300 <_strtod_l+0xadc>
 80162c0:	9808      	ldr	r0, [sp, #32]
 80162c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162c4:	2200      	movs	r2, #0
 80162c6:	4b63      	ldr	r3, [pc, #396]	; (8016454 <_strtod_l+0xc30>)
 80162c8:	f7ec f8b4 	bl	8002434 <__aeabi_dmul>
 80162cc:	0005      	movs	r5, r0
 80162ce:	9108      	str	r1, [sp, #32]
 80162d0:	2280      	movs	r2, #128	; 0x80
 80162d2:	0612      	lsls	r2, r2, #24
 80162d4:	4694      	mov	ip, r2
 80162d6:	9b08      	ldr	r3, [sp, #32]
 80162d8:	951e      	str	r5, [sp, #120]	; 0x78
 80162da:	4463      	add	r3, ip
 80162dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80162de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80162e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80162e2:	9210      	str	r2, [sp, #64]	; 0x40
 80162e4:	9311      	str	r3, [sp, #68]	; 0x44
 80162e6:	e798      	b.n	801621a <_strtod_l+0x9f6>
 80162e8:	2e01      	cmp	r6, #1
 80162ea:	d103      	bne.n	80162f4 <_strtod_l+0xad0>
 80162ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d100      	bne.n	80162f4 <_strtod_l+0xad0>
 80162f2:	e562      	b.n	8015dba <_strtod_l+0x596>
 80162f4:	2200      	movs	r2, #0
 80162f6:	4b58      	ldr	r3, [pc, #352]	; (8016458 <_strtod_l+0xc34>)
 80162f8:	2500      	movs	r5, #0
 80162fa:	9210      	str	r2, [sp, #64]	; 0x40
 80162fc:	9311      	str	r3, [sp, #68]	; 0x44
 80162fe:	e78a      	b.n	8016216 <_strtod_l+0x9f2>
 8016300:	4b54      	ldr	r3, [pc, #336]	; (8016454 <_strtod_l+0xc30>)
 8016302:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016304:	9308      	str	r3, [sp, #32]
 8016306:	e7e3      	b.n	80162d0 <_strtod_l+0xaac>
 8016308:	4b52      	ldr	r3, [pc, #328]	; (8016454 <_strtod_l+0xc30>)
 801630a:	9808      	ldr	r0, [sp, #32]
 801630c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801630e:	2200      	movs	r2, #0
 8016310:	f7ec f890 	bl	8002434 <__aeabi_dmul>
 8016314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016316:	0005      	movs	r5, r0
 8016318:	9108      	str	r1, [sp, #32]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d107      	bne.n	801632e <_strtod_l+0xb0a>
 801631e:	2380      	movs	r3, #128	; 0x80
 8016320:	061b      	lsls	r3, r3, #24
 8016322:	18cb      	adds	r3, r1, r3
 8016324:	9016      	str	r0, [sp, #88]	; 0x58
 8016326:	9317      	str	r3, [sp, #92]	; 0x5c
 8016328:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801632a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801632c:	e7d9      	b.n	80162e2 <_strtod_l+0xabe>
 801632e:	0002      	movs	r2, r0
 8016330:	9b08      	ldr	r3, [sp, #32]
 8016332:	9216      	str	r2, [sp, #88]	; 0x58
 8016334:	9317      	str	r3, [sp, #92]	; 0x5c
 8016336:	e7f7      	b.n	8016328 <_strtod_l+0xb04>
 8016338:	23d4      	movs	r3, #212	; 0xd4
 801633a:	049b      	lsls	r3, r3, #18
 801633c:	18cf      	adds	r7, r1, r3
 801633e:	9b06      	ldr	r3, [sp, #24]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d19f      	bne.n	8016284 <_strtod_l+0xa60>
 8016344:	4b3e      	ldr	r3, [pc, #248]	; (8016440 <_strtod_l+0xc1c>)
 8016346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016348:	970c      	str	r7, [sp, #48]	; 0x30
 801634a:	403b      	ands	r3, r7
 801634c:	429a      	cmp	r2, r3
 801634e:	d199      	bne.n	8016284 <_strtod_l+0xa60>
 8016350:	9908      	ldr	r1, [sp, #32]
 8016352:	0028      	movs	r0, r5
 8016354:	f7ec fe44 	bl	8002fe0 <__aeabi_d2iz>
 8016358:	f7ec fe78 	bl	800304c <__aeabi_i2d>
 801635c:	000b      	movs	r3, r1
 801635e:	0002      	movs	r2, r0
 8016360:	9908      	ldr	r1, [sp, #32]
 8016362:	0028      	movs	r0, r5
 8016364:	f7ec fad8 	bl	8002918 <__aeabi_dsub>
 8016368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801636a:	9008      	str	r0, [sp, #32]
 801636c:	9109      	str	r1, [sp, #36]	; 0x24
 801636e:	2b00      	cmp	r3, #0
 8016370:	d104      	bne.n	801637c <_strtod_l+0xb58>
 8016372:	2e00      	cmp	r6, #0
 8016374:	d102      	bne.n	801637c <_strtod_l+0xb58>
 8016376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016378:	031b      	lsls	r3, r3, #12
 801637a:	d058      	beq.n	801642e <_strtod_l+0xc0a>
 801637c:	9808      	ldr	r0, [sp, #32]
 801637e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016380:	4a36      	ldr	r2, [pc, #216]	; (801645c <_strtod_l+0xc38>)
 8016382:	4b37      	ldr	r3, [pc, #220]	; (8016460 <_strtod_l+0xc3c>)
 8016384:	f7ea f870 	bl	8000468 <__aeabi_dcmplt>
 8016388:	2800      	cmp	r0, #0
 801638a:	d000      	beq.n	801638e <_strtod_l+0xb6a>
 801638c:	e489      	b.n	8015ca2 <_strtod_l+0x47e>
 801638e:	9808      	ldr	r0, [sp, #32]
 8016390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016392:	4a34      	ldr	r2, [pc, #208]	; (8016464 <_strtod_l+0xc40>)
 8016394:	4b2f      	ldr	r3, [pc, #188]	; (8016454 <_strtod_l+0xc30>)
 8016396:	f7ea f87b 	bl	8000490 <__aeabi_dcmpgt>
 801639a:	2800      	cmp	r0, #0
 801639c:	d100      	bne.n	80163a0 <_strtod_l+0xb7c>
 801639e:	e771      	b.n	8016284 <_strtod_l+0xa60>
 80163a0:	e47f      	b.n	8015ca2 <_strtod_l+0x47e>
 80163a2:	9b06      	ldr	r3, [sp, #24]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d02a      	beq.n	80163fe <_strtod_l+0xbda>
 80163a8:	23d4      	movs	r3, #212	; 0xd4
 80163aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80163ac:	04db      	lsls	r3, r3, #19
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d825      	bhi.n	80163fe <_strtod_l+0xbda>
 80163b2:	4a2d      	ldr	r2, [pc, #180]	; (8016468 <_strtod_l+0xc44>)
 80163b4:	4b2d      	ldr	r3, [pc, #180]	; (801646c <_strtod_l+0xc48>)
 80163b6:	0028      	movs	r0, r5
 80163b8:	9908      	ldr	r1, [sp, #32]
 80163ba:	f7ea f85f 	bl	800047c <__aeabi_dcmple>
 80163be:	2800      	cmp	r0, #0
 80163c0:	d016      	beq.n	80163f0 <_strtod_l+0xbcc>
 80163c2:	0028      	movs	r0, r5
 80163c4:	9908      	ldr	r1, [sp, #32]
 80163c6:	f7ea f91d 	bl	8000604 <__aeabi_d2uiz>
 80163ca:	2800      	cmp	r0, #0
 80163cc:	d100      	bne.n	80163d0 <_strtod_l+0xbac>
 80163ce:	3001      	adds	r0, #1
 80163d0:	f7ec fe76 	bl	80030c0 <__aeabi_ui2d>
 80163d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80163d6:	0005      	movs	r5, r0
 80163d8:	9108      	str	r1, [sp, #32]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d122      	bne.n	8016424 <_strtod_l+0xc00>
 80163de:	2380      	movs	r3, #128	; 0x80
 80163e0:	061b      	lsls	r3, r3, #24
 80163e2:	18cb      	adds	r3, r1, r3
 80163e4:	9018      	str	r0, [sp, #96]	; 0x60
 80163e6:	9319      	str	r3, [sp, #100]	; 0x64
 80163e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80163ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163ec:	9210      	str	r2, [sp, #64]	; 0x40
 80163ee:	9311      	str	r3, [sp, #68]	; 0x44
 80163f0:	22d6      	movs	r2, #214	; 0xd6
 80163f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163f4:	04d2      	lsls	r2, r2, #19
 80163f6:	189b      	adds	r3, r3, r2
 80163f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80163fa:	1a9b      	subs	r3, r3, r2
 80163fc:	9311      	str	r3, [sp, #68]	; 0x44
 80163fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016400:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016402:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016404:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016406:	f003 f911 	bl	801962c <__ulp>
 801640a:	0002      	movs	r2, r0
 801640c:	000b      	movs	r3, r1
 801640e:	0030      	movs	r0, r6
 8016410:	0039      	movs	r1, r7
 8016412:	f7ec f80f 	bl	8002434 <__aeabi_dmul>
 8016416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801641a:	f7eb f8e5 	bl	80015e8 <__aeabi_dadd>
 801641e:	0006      	movs	r6, r0
 8016420:	000f      	movs	r7, r1
 8016422:	e78c      	b.n	801633e <_strtod_l+0xb1a>
 8016424:	0002      	movs	r2, r0
 8016426:	9b08      	ldr	r3, [sp, #32]
 8016428:	9218      	str	r2, [sp, #96]	; 0x60
 801642a:	9319      	str	r3, [sp, #100]	; 0x64
 801642c:	e7dc      	b.n	80163e8 <_strtod_l+0xbc4>
 801642e:	4a0b      	ldr	r2, [pc, #44]	; (801645c <_strtod_l+0xc38>)
 8016430:	4b0f      	ldr	r3, [pc, #60]	; (8016470 <_strtod_l+0xc4c>)
 8016432:	9808      	ldr	r0, [sp, #32]
 8016434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016436:	f7ea f817 	bl	8000468 <__aeabi_dcmplt>
 801643a:	e7ae      	b.n	801639a <_strtod_l+0xb76>
 801643c:	3ff00000 	.word	0x3ff00000
 8016440:	7ff00000 	.word	0x7ff00000
 8016444:	7fe00000 	.word	0x7fe00000
 8016448:	fcb00000 	.word	0xfcb00000
 801644c:	7c9fffff 	.word	0x7c9fffff
 8016450:	7fefffff 	.word	0x7fefffff
 8016454:	3fe00000 	.word	0x3fe00000
 8016458:	bff00000 	.word	0xbff00000
 801645c:	94a03595 	.word	0x94a03595
 8016460:	3fdfffff 	.word	0x3fdfffff
 8016464:	35afe535 	.word	0x35afe535
 8016468:	ffc00000 	.word	0xffc00000
 801646c:	41dfffff 	.word	0x41dfffff
 8016470:	3fcfffff 	.word	0x3fcfffff

08016474 <strtod>:
 8016474:	4b06      	ldr	r3, [pc, #24]	; (8016490 <strtod+0x1c>)
 8016476:	b510      	push	{r4, lr}
 8016478:	0004      	movs	r4, r0
 801647a:	6818      	ldr	r0, [r3, #0]
 801647c:	000a      	movs	r2, r1
 801647e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016480:	2b00      	cmp	r3, #0
 8016482:	d100      	bne.n	8016486 <strtod+0x12>
 8016484:	4b03      	ldr	r3, [pc, #12]	; (8016494 <strtod+0x20>)
 8016486:	0021      	movs	r1, r4
 8016488:	f7ff f9cc 	bl	8015824 <_strtod_l>
 801648c:	bd10      	pop	{r4, pc}
 801648e:	46c0      	nop			; (mov r8, r8)
 8016490:	200000d0 	.word	0x200000d0
 8016494:	20000500 	.word	0x20000500

08016498 <strtok>:
 8016498:	4b03      	ldr	r3, [pc, #12]	; (80164a8 <strtok+0x10>)
 801649a:	b510      	push	{r4, lr}
 801649c:	681a      	ldr	r2, [r3, #0]
 801649e:	2301      	movs	r3, #1
 80164a0:	325c      	adds	r2, #92	; 0x5c
 80164a2:	f000 f803 	bl	80164ac <__strtok_r>
 80164a6:	bd10      	pop	{r4, pc}
 80164a8:	200000d0 	.word	0x200000d0

080164ac <__strtok_r>:
 80164ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ae:	2800      	cmp	r0, #0
 80164b0:	d104      	bne.n	80164bc <__strtok_r+0x10>
 80164b2:	6810      	ldr	r0, [r2, #0]
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d101      	bne.n	80164bc <__strtok_r+0x10>
 80164b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ba:	0020      	movs	r0, r4
 80164bc:	000e      	movs	r6, r1
 80164be:	7805      	ldrb	r5, [r0, #0]
 80164c0:	1c44      	adds	r4, r0, #1
 80164c2:	7837      	ldrb	r7, [r6, #0]
 80164c4:	2f00      	cmp	r7, #0
 80164c6:	d104      	bne.n	80164d2 <__strtok_r+0x26>
 80164c8:	2d00      	cmp	r5, #0
 80164ca:	d110      	bne.n	80164ee <__strtok_r+0x42>
 80164cc:	6015      	str	r5, [r2, #0]
 80164ce:	0028      	movs	r0, r5
 80164d0:	e7f2      	b.n	80164b8 <__strtok_r+0xc>
 80164d2:	3601      	adds	r6, #1
 80164d4:	42bd      	cmp	r5, r7
 80164d6:	d1f4      	bne.n	80164c2 <__strtok_r+0x16>
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d1ee      	bne.n	80164ba <__strtok_r+0xe>
 80164dc:	6014      	str	r4, [r2, #0]
 80164de:	7003      	strb	r3, [r0, #0]
 80164e0:	e7ea      	b.n	80164b8 <__strtok_r+0xc>
 80164e2:	0033      	movs	r3, r6
 80164e4:	e00d      	b.n	8016502 <__strtok_r+0x56>
 80164e6:	3501      	adds	r5, #1
 80164e8:	2f00      	cmp	r7, #0
 80164ea:	d103      	bne.n	80164f4 <__strtok_r+0x48>
 80164ec:	001c      	movs	r4, r3
 80164ee:	000d      	movs	r5, r1
 80164f0:	7826      	ldrb	r6, [r4, #0]
 80164f2:	1c63      	adds	r3, r4, #1
 80164f4:	782f      	ldrb	r7, [r5, #0]
 80164f6:	42be      	cmp	r6, r7
 80164f8:	d1f5      	bne.n	80164e6 <__strtok_r+0x3a>
 80164fa:	2e00      	cmp	r6, #0
 80164fc:	d0f1      	beq.n	80164e2 <__strtok_r+0x36>
 80164fe:	2100      	movs	r1, #0
 8016500:	7021      	strb	r1, [r4, #0]
 8016502:	6013      	str	r3, [r2, #0]
 8016504:	e7d8      	b.n	80164b8 <__strtok_r+0xc>
	...

08016508 <_strtol_l.isra.0>:
 8016508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801650a:	001f      	movs	r7, r3
 801650c:	000e      	movs	r6, r1
 801650e:	b087      	sub	sp, #28
 8016510:	9005      	str	r0, [sp, #20]
 8016512:	9101      	str	r1, [sp, #4]
 8016514:	9202      	str	r2, [sp, #8]
 8016516:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016518:	7834      	ldrb	r4, [r6, #0]
 801651a:	f7fe fc9f 	bl	8014e5c <__locale_ctype_ptr_l>
 801651e:	2208      	movs	r2, #8
 8016520:	1900      	adds	r0, r0, r4
 8016522:	7843      	ldrb	r3, [r0, #1]
 8016524:	1c75      	adds	r5, r6, #1
 8016526:	4013      	ands	r3, r2
 8016528:	d136      	bne.n	8016598 <_strtol_l.isra.0+0x90>
 801652a:	2c2d      	cmp	r4, #45	; 0x2d
 801652c:	d136      	bne.n	801659c <_strtol_l.isra.0+0x94>
 801652e:	1cb5      	adds	r5, r6, #2
 8016530:	7874      	ldrb	r4, [r6, #1]
 8016532:	2601      	movs	r6, #1
 8016534:	2f00      	cmp	r7, #0
 8016536:	d062      	beq.n	80165fe <_strtol_l.isra.0+0xf6>
 8016538:	2f10      	cmp	r7, #16
 801653a:	d109      	bne.n	8016550 <_strtol_l.isra.0+0x48>
 801653c:	2c30      	cmp	r4, #48	; 0x30
 801653e:	d107      	bne.n	8016550 <_strtol_l.isra.0+0x48>
 8016540:	2220      	movs	r2, #32
 8016542:	782b      	ldrb	r3, [r5, #0]
 8016544:	4393      	bics	r3, r2
 8016546:	2b58      	cmp	r3, #88	; 0x58
 8016548:	d154      	bne.n	80165f4 <_strtol_l.isra.0+0xec>
 801654a:	2710      	movs	r7, #16
 801654c:	786c      	ldrb	r4, [r5, #1]
 801654e:	3502      	adds	r5, #2
 8016550:	4b2d      	ldr	r3, [pc, #180]	; (8016608 <_strtol_l.isra.0+0x100>)
 8016552:	0039      	movs	r1, r7
 8016554:	18f3      	adds	r3, r6, r3
 8016556:	0018      	movs	r0, r3
 8016558:	9303      	str	r3, [sp, #12]
 801655a:	f7e9 fe7f 	bl	800025c <__aeabi_uidivmod>
 801655e:	9104      	str	r1, [sp, #16]
 8016560:	2101      	movs	r1, #1
 8016562:	2300      	movs	r3, #0
 8016564:	4249      	negs	r1, r1
 8016566:	0002      	movs	r2, r0
 8016568:	468c      	mov	ip, r1
 801656a:	0018      	movs	r0, r3
 801656c:	0021      	movs	r1, r4
 801656e:	3930      	subs	r1, #48	; 0x30
 8016570:	2909      	cmp	r1, #9
 8016572:	d81a      	bhi.n	80165aa <_strtol_l.isra.0+0xa2>
 8016574:	000c      	movs	r4, r1
 8016576:	42a7      	cmp	r7, r4
 8016578:	dd23      	ble.n	80165c2 <_strtol_l.isra.0+0xba>
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	d009      	beq.n	8016592 <_strtol_l.isra.0+0x8a>
 801657e:	4663      	mov	r3, ip
 8016580:	4282      	cmp	r2, r0
 8016582:	d306      	bcc.n	8016592 <_strtol_l.isra.0+0x8a>
 8016584:	d102      	bne.n	801658c <_strtol_l.isra.0+0x84>
 8016586:	9904      	ldr	r1, [sp, #16]
 8016588:	42a1      	cmp	r1, r4
 801658a:	db02      	blt.n	8016592 <_strtol_l.isra.0+0x8a>
 801658c:	2301      	movs	r3, #1
 801658e:	4378      	muls	r0, r7
 8016590:	1820      	adds	r0, r4, r0
 8016592:	782c      	ldrb	r4, [r5, #0]
 8016594:	3501      	adds	r5, #1
 8016596:	e7e9      	b.n	801656c <_strtol_l.isra.0+0x64>
 8016598:	002e      	movs	r6, r5
 801659a:	e7bc      	b.n	8016516 <_strtol_l.isra.0+0xe>
 801659c:	2c2b      	cmp	r4, #43	; 0x2b
 801659e:	d001      	beq.n	80165a4 <_strtol_l.isra.0+0x9c>
 80165a0:	001e      	movs	r6, r3
 80165a2:	e7c7      	b.n	8016534 <_strtol_l.isra.0+0x2c>
 80165a4:	1cb5      	adds	r5, r6, #2
 80165a6:	7874      	ldrb	r4, [r6, #1]
 80165a8:	e7fa      	b.n	80165a0 <_strtol_l.isra.0+0x98>
 80165aa:	0021      	movs	r1, r4
 80165ac:	3941      	subs	r1, #65	; 0x41
 80165ae:	2919      	cmp	r1, #25
 80165b0:	d801      	bhi.n	80165b6 <_strtol_l.isra.0+0xae>
 80165b2:	3c37      	subs	r4, #55	; 0x37
 80165b4:	e7df      	b.n	8016576 <_strtol_l.isra.0+0x6e>
 80165b6:	0021      	movs	r1, r4
 80165b8:	3961      	subs	r1, #97	; 0x61
 80165ba:	2919      	cmp	r1, #25
 80165bc:	d801      	bhi.n	80165c2 <_strtol_l.isra.0+0xba>
 80165be:	3c57      	subs	r4, #87	; 0x57
 80165c0:	e7d9      	b.n	8016576 <_strtol_l.isra.0+0x6e>
 80165c2:	1c5a      	adds	r2, r3, #1
 80165c4:	d108      	bne.n	80165d8 <_strtol_l.isra.0+0xd0>
 80165c6:	9a05      	ldr	r2, [sp, #20]
 80165c8:	3323      	adds	r3, #35	; 0x23
 80165ca:	6013      	str	r3, [r2, #0]
 80165cc:	9b02      	ldr	r3, [sp, #8]
 80165ce:	9803      	ldr	r0, [sp, #12]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d109      	bne.n	80165e8 <_strtol_l.isra.0+0xe0>
 80165d4:	b007      	add	sp, #28
 80165d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165d8:	2e00      	cmp	r6, #0
 80165da:	d000      	beq.n	80165de <_strtol_l.isra.0+0xd6>
 80165dc:	4240      	negs	r0, r0
 80165de:	9a02      	ldr	r2, [sp, #8]
 80165e0:	2a00      	cmp	r2, #0
 80165e2:	d0f7      	beq.n	80165d4 <_strtol_l.isra.0+0xcc>
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d001      	beq.n	80165ec <_strtol_l.isra.0+0xe4>
 80165e8:	1e6b      	subs	r3, r5, #1
 80165ea:	9301      	str	r3, [sp, #4]
 80165ec:	9b02      	ldr	r3, [sp, #8]
 80165ee:	9a01      	ldr	r2, [sp, #4]
 80165f0:	601a      	str	r2, [r3, #0]
 80165f2:	e7ef      	b.n	80165d4 <_strtol_l.isra.0+0xcc>
 80165f4:	2430      	movs	r4, #48	; 0x30
 80165f6:	2f00      	cmp	r7, #0
 80165f8:	d1aa      	bne.n	8016550 <_strtol_l.isra.0+0x48>
 80165fa:	2708      	movs	r7, #8
 80165fc:	e7a8      	b.n	8016550 <_strtol_l.isra.0+0x48>
 80165fe:	2c30      	cmp	r4, #48	; 0x30
 8016600:	d09e      	beq.n	8016540 <_strtol_l.isra.0+0x38>
 8016602:	270a      	movs	r7, #10
 8016604:	e7a4      	b.n	8016550 <_strtol_l.isra.0+0x48>
 8016606:	46c0      	nop			; (mov r8, r8)
 8016608:	7fffffff 	.word	0x7fffffff

0801660c <strtol>:
 801660c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801660e:	0013      	movs	r3, r2
 8016610:	4a06      	ldr	r2, [pc, #24]	; (801662c <strtol+0x20>)
 8016612:	0005      	movs	r5, r0
 8016614:	6810      	ldr	r0, [r2, #0]
 8016616:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016618:	2c00      	cmp	r4, #0
 801661a:	d100      	bne.n	801661e <strtol+0x12>
 801661c:	4c04      	ldr	r4, [pc, #16]	; (8016630 <strtol+0x24>)
 801661e:	000a      	movs	r2, r1
 8016620:	9400      	str	r4, [sp, #0]
 8016622:	0029      	movs	r1, r5
 8016624:	f7ff ff70 	bl	8016508 <_strtol_l.isra.0>
 8016628:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801662a:	46c0      	nop			; (mov r8, r8)
 801662c:	200000d0 	.word	0x200000d0
 8016630:	20000500 	.word	0x20000500

08016634 <_svfprintf_r>:
 8016634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016636:	b0d9      	sub	sp, #356	; 0x164
 8016638:	910b      	str	r1, [sp, #44]	; 0x2c
 801663a:	9209      	str	r2, [sp, #36]	; 0x24
 801663c:	001c      	movs	r4, r3
 801663e:	900a      	str	r0, [sp, #40]	; 0x28
 8016640:	f002 fd26 	bl	8019090 <_localeconv_r>
 8016644:	6803      	ldr	r3, [r0, #0]
 8016646:	0018      	movs	r0, r3
 8016648:	931c      	str	r3, [sp, #112]	; 0x70
 801664a:	f7e9 fd65 	bl	8000118 <strlen>
 801664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016650:	9014      	str	r0, [sp, #80]	; 0x50
 8016652:	899b      	ldrh	r3, [r3, #12]
 8016654:	061b      	lsls	r3, r3, #24
 8016656:	d518      	bpl.n	801668a <_svfprintf_r+0x56>
 8016658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801665a:	691b      	ldr	r3, [r3, #16]
 801665c:	9308      	str	r3, [sp, #32]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d113      	bne.n	801668a <_svfprintf_r+0x56>
 8016662:	2140      	movs	r1, #64	; 0x40
 8016664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016666:	f7fe fc1f 	bl	8014ea8 <_malloc_r>
 801666a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801666c:	6018      	str	r0, [r3, #0]
 801666e:	6118      	str	r0, [r3, #16]
 8016670:	2800      	cmp	r0, #0
 8016672:	d107      	bne.n	8016684 <_svfprintf_r+0x50>
 8016674:	230c      	movs	r3, #12
 8016676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016678:	6013      	str	r3, [r2, #0]
 801667a:	3b0d      	subs	r3, #13
 801667c:	9315      	str	r3, [sp, #84]	; 0x54
 801667e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016680:	b059      	add	sp, #356	; 0x164
 8016682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016684:	2340      	movs	r3, #64	; 0x40
 8016686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016688:	6153      	str	r3, [r2, #20]
 801668a:	2600      	movs	r6, #0
 801668c:	af2f      	add	r7, sp, #188	; 0xbc
 801668e:	972c      	str	r7, [sp, #176]	; 0xb0
 8016690:	962e      	str	r6, [sp, #184]	; 0xb8
 8016692:	962d      	str	r6, [sp, #180]	; 0xb4
 8016694:	960d      	str	r6, [sp, #52]	; 0x34
 8016696:	961a      	str	r6, [sp, #104]	; 0x68
 8016698:	9619      	str	r6, [sp, #100]	; 0x64
 801669a:	961e      	str	r6, [sp, #120]	; 0x78
 801669c:	961d      	str	r6, [sp, #116]	; 0x74
 801669e:	9613      	str	r6, [sp, #76]	; 0x4c
 80166a0:	961b      	str	r6, [sp, #108]	; 0x6c
 80166a2:	961f      	str	r6, [sp, #124]	; 0x7c
 80166a4:	9615      	str	r6, [sp, #84]	; 0x54
 80166a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80166a8:	782b      	ldrb	r3, [r5, #0]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d002      	beq.n	80166b4 <_svfprintf_r+0x80>
 80166ae:	2b25      	cmp	r3, #37	; 0x25
 80166b0:	d000      	beq.n	80166b4 <_svfprintf_r+0x80>
 80166b2:	e095      	b.n	80167e0 <_svfprintf_r+0x1ac>
 80166b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166b6:	1aee      	subs	r6, r5, r3
 80166b8:	d017      	beq.n	80166ea <_svfprintf_r+0xb6>
 80166ba:	603b      	str	r3, [r7, #0]
 80166bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166be:	607e      	str	r6, [r7, #4]
 80166c0:	199b      	adds	r3, r3, r6
 80166c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80166c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166c6:	3708      	adds	r7, #8
 80166c8:	9308      	str	r3, [sp, #32]
 80166ca:	3301      	adds	r3, #1
 80166cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80166ce:	2b07      	cmp	r3, #7
 80166d0:	dd08      	ble.n	80166e4 <_svfprintf_r+0xb0>
 80166d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80166d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166d8:	f003 f900 	bl	80198dc <__ssprint_r>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d000      	beq.n	80166e2 <_svfprintf_r+0xae>
 80166e0:	e2d9      	b.n	8016c96 <_svfprintf_r+0x662>
 80166e2:	af2f      	add	r7, sp, #188	; 0xbc
 80166e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166e6:	199b      	adds	r3, r3, r6
 80166e8:	9315      	str	r3, [sp, #84]	; 0x54
 80166ea:	782b      	ldrb	r3, [r5, #0]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d101      	bne.n	80166f4 <_svfprintf_r+0xc0>
 80166f0:	f001 f9e5 	bl	8017abe <_svfprintf_r+0x148a>
 80166f4:	1c6b      	adds	r3, r5, #1
 80166f6:	221b      	movs	r2, #27
 80166f8:	9311      	str	r3, [sp, #68]	; 0x44
 80166fa:	2300      	movs	r3, #0
 80166fc:	a91e      	add	r1, sp, #120	; 0x78
 80166fe:	1852      	adds	r2, r2, r1
 8016700:	7013      	strb	r3, [r2, #0]
 8016702:	2201      	movs	r2, #1
 8016704:	001e      	movs	r6, r3
 8016706:	2520      	movs	r5, #32
 8016708:	4252      	negs	r2, r2
 801670a:	9208      	str	r2, [sp, #32]
 801670c:	9316      	str	r3, [sp, #88]	; 0x58
 801670e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	930e      	str	r3, [sp, #56]	; 0x38
 8016714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016716:	3301      	adds	r3, #1
 8016718:	9311      	str	r3, [sp, #68]	; 0x44
 801671a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801671c:	3820      	subs	r0, #32
 801671e:	285a      	cmp	r0, #90	; 0x5a
 8016720:	d901      	bls.n	8016726 <_svfprintf_r+0xf2>
 8016722:	f000 fe3d 	bl	80173a0 <_svfprintf_r+0xd6c>
 8016726:	f7e9 fd09 	bl	800013c <__gnu_thumb1_case_shi>
 801672a:	009e      	.short	0x009e
 801672c:	063b063b 	.word	0x063b063b
 8016730:	063b00a7 	.word	0x063b00a7
 8016734:	063b063b 	.word	0x063b063b
 8016738:	063b0080 	.word	0x063b0080
 801673c:	00a9063b 	.word	0x00a9063b
 8016740:	063b00b3 	.word	0x063b00b3
 8016744:	00b900b1 	.word	0x00b900b1
 8016748:	00dd063b 	.word	0x00dd063b
 801674c:	00df00df 	.word	0x00df00df
 8016750:	00df00df 	.word	0x00df00df
 8016754:	00df00df 	.word	0x00df00df
 8016758:	00df00df 	.word	0x00df00df
 801675c:	063b00df 	.word	0x063b00df
 8016760:	063b063b 	.word	0x063b063b
 8016764:	063b063b 	.word	0x063b063b
 8016768:	063b063b 	.word	0x063b063b
 801676c:	063b0240 	.word	0x063b0240
 8016770:	01fd010a 	.word	0x01fd010a
 8016774:	02400240 	.word	0x02400240
 8016778:	063b0240 	.word	0x063b0240
 801677c:	063b063b 	.word	0x063b063b
 8016780:	00f1063b 	.word	0x00f1063b
 8016784:	063b063b 	.word	0x063b063b
 8016788:	063b04e2 	.word	0x063b04e2
 801678c:	063b063b 	.word	0x063b063b
 8016790:	063b0537 	.word	0x063b0537
 8016794:	063b0557 	.word	0x063b0557
 8016798:	005d063b 	.word	0x005d063b
 801679c:	063b063b 	.word	0x063b063b
 80167a0:	063b063b 	.word	0x063b063b
 80167a4:	063b063b 	.word	0x063b063b
 80167a8:	063b063b 	.word	0x063b063b
 80167ac:	063b0240 	.word	0x063b0240
 80167b0:	01ff010a 	.word	0x01ff010a
 80167b4:	02400240 	.word	0x02400240
 80167b8:	00f30240 	.word	0x00f30240
 80167bc:	010601ff 	.word	0x010601ff
 80167c0:	00ff063b 	.word	0x00ff063b
 80167c4:	04c5063b 	.word	0x04c5063b
 80167c8:	052704e4 	.word	0x052704e4
 80167cc:	063b0106 	.word	0x063b0106
 80167d0:	fff20537 	.word	0xfff20537
 80167d4:	063b0559 	.word	0x063b0559
 80167d8:	0582063b 	.word	0x0582063b
 80167dc:	fff2063b 	.word	0xfff2063b
 80167e0:	3501      	adds	r5, #1
 80167e2:	e761      	b.n	80166a8 <_svfprintf_r+0x74>
 80167e4:	4bcb      	ldr	r3, [pc, #812]	; (8016b14 <_svfprintf_r+0x4e0>)
 80167e6:	2220      	movs	r2, #32
 80167e8:	931e      	str	r3, [sp, #120]	; 0x78
 80167ea:	4032      	ands	r2, r6
 80167ec:	d101      	bne.n	80167f2 <_svfprintf_r+0x1be>
 80167ee:	f000 fd21 	bl	8017234 <_svfprintf_r+0xc00>
 80167f2:	2307      	movs	r3, #7
 80167f4:	3407      	adds	r4, #7
 80167f6:	439c      	bics	r4, r3
 80167f8:	0023      	movs	r3, r4
 80167fa:	3308      	adds	r3, #8
 80167fc:	9312      	str	r3, [sp, #72]	; 0x48
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	6864      	ldr	r4, [r4, #4]
 8016802:	9306      	str	r3, [sp, #24]
 8016804:	9407      	str	r4, [sp, #28]
 8016806:	07f3      	lsls	r3, r6, #31
 8016808:	d50a      	bpl.n	8016820 <_svfprintf_r+0x1ec>
 801680a:	9b06      	ldr	r3, [sp, #24]
 801680c:	9a07      	ldr	r2, [sp, #28]
 801680e:	4313      	orrs	r3, r2
 8016810:	d006      	beq.n	8016820 <_svfprintf_r+0x1ec>
 8016812:	2230      	movs	r2, #48	; 0x30
 8016814:	ab25      	add	r3, sp, #148	; 0x94
 8016816:	701a      	strb	r2, [r3, #0]
 8016818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801681a:	705a      	strb	r2, [r3, #1]
 801681c:	2302      	movs	r3, #2
 801681e:	431e      	orrs	r6, r3
 8016820:	4bbd      	ldr	r3, [pc, #756]	; (8016b18 <_svfprintf_r+0x4e4>)
 8016822:	401e      	ands	r6, r3
 8016824:	2302      	movs	r3, #2
 8016826:	f000 fc74 	bl	8017112 <_svfprintf_r+0xade>
 801682a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801682c:	f002 fc30 	bl	8019090 <_localeconv_r>
 8016830:	6843      	ldr	r3, [r0, #4]
 8016832:	0018      	movs	r0, r3
 8016834:	931f      	str	r3, [sp, #124]	; 0x7c
 8016836:	f7e9 fc6f 	bl	8000118 <strlen>
 801683a:	901b      	str	r0, [sp, #108]	; 0x6c
 801683c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801683e:	f002 fc27 	bl	8019090 <_localeconv_r>
 8016842:	6883      	ldr	r3, [r0, #8]
 8016844:	9313      	str	r3, [sp, #76]	; 0x4c
 8016846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016848:	2b00      	cmp	r3, #0
 801684a:	d100      	bne.n	801684e <_svfprintf_r+0x21a>
 801684c:	e75f      	b.n	801670e <_svfprintf_r+0xda>
 801684e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016850:	2b00      	cmp	r3, #0
 8016852:	d100      	bne.n	8016856 <_svfprintf_r+0x222>
 8016854:	e75b      	b.n	801670e <_svfprintf_r+0xda>
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d100      	bne.n	801685e <_svfprintf_r+0x22a>
 801685c:	e757      	b.n	801670e <_svfprintf_r+0xda>
 801685e:	2380      	movs	r3, #128	; 0x80
 8016860:	00db      	lsls	r3, r3, #3
 8016862:	431e      	orrs	r6, r3
 8016864:	e753      	b.n	801670e <_svfprintf_r+0xda>
 8016866:	231b      	movs	r3, #27
 8016868:	aa1e      	add	r2, sp, #120	; 0x78
 801686a:	189b      	adds	r3, r3, r2
 801686c:	781a      	ldrb	r2, [r3, #0]
 801686e:	2a00      	cmp	r2, #0
 8016870:	d000      	beq.n	8016874 <_svfprintf_r+0x240>
 8016872:	e74c      	b.n	801670e <_svfprintf_r+0xda>
 8016874:	701d      	strb	r5, [r3, #0]
 8016876:	e74a      	b.n	801670e <_svfprintf_r+0xda>
 8016878:	2301      	movs	r3, #1
 801687a:	e7f2      	b.n	8016862 <_svfprintf_r+0x22e>
 801687c:	6823      	ldr	r3, [r4, #0]
 801687e:	3404      	adds	r4, #4
 8016880:	9316      	str	r3, [sp, #88]	; 0x58
 8016882:	2b00      	cmp	r3, #0
 8016884:	db00      	blt.n	8016888 <_svfprintf_r+0x254>
 8016886:	e742      	b.n	801670e <_svfprintf_r+0xda>
 8016888:	425b      	negs	r3, r3
 801688a:	9316      	str	r3, [sp, #88]	; 0x58
 801688c:	2304      	movs	r3, #4
 801688e:	e7e8      	b.n	8016862 <_svfprintf_r+0x22e>
 8016890:	231b      	movs	r3, #27
 8016892:	aa1e      	add	r2, sp, #120	; 0x78
 8016894:	189b      	adds	r3, r3, r2
 8016896:	222b      	movs	r2, #43	; 0x2b
 8016898:	701a      	strb	r2, [r3, #0]
 801689a:	e738      	b.n	801670e <_svfprintf_r+0xda>
 801689c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801689e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80168a0:	7812      	ldrb	r2, [r2, #0]
 80168a2:	3301      	adds	r3, #1
 80168a4:	920e      	str	r2, [sp, #56]	; 0x38
 80168a6:	2a2a      	cmp	r2, #42	; 0x2a
 80168a8:	d008      	beq.n	80168bc <_svfprintf_r+0x288>
 80168aa:	2200      	movs	r2, #0
 80168ac:	9208      	str	r2, [sp, #32]
 80168ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80168b0:	001a      	movs	r2, r3
 80168b2:	3930      	subs	r1, #48	; 0x30
 80168b4:	2909      	cmp	r1, #9
 80168b6:	d90c      	bls.n	80168d2 <_svfprintf_r+0x29e>
 80168b8:	9211      	str	r2, [sp, #68]	; 0x44
 80168ba:	e72e      	b.n	801671a <_svfprintf_r+0xe6>
 80168bc:	6821      	ldr	r1, [r4, #0]
 80168be:	1d22      	adds	r2, r4, #4
 80168c0:	9108      	str	r1, [sp, #32]
 80168c2:	2900      	cmp	r1, #0
 80168c4:	da02      	bge.n	80168cc <_svfprintf_r+0x298>
 80168c6:	2101      	movs	r1, #1
 80168c8:	4249      	negs	r1, r1
 80168ca:	9108      	str	r1, [sp, #32]
 80168cc:	0014      	movs	r4, r2
 80168ce:	9311      	str	r3, [sp, #68]	; 0x44
 80168d0:	e71d      	b.n	801670e <_svfprintf_r+0xda>
 80168d2:	200a      	movs	r0, #10
 80168d4:	9a08      	ldr	r2, [sp, #32]
 80168d6:	4342      	muls	r2, r0
 80168d8:	1852      	adds	r2, r2, r1
 80168da:	9208      	str	r2, [sp, #32]
 80168dc:	781a      	ldrb	r2, [r3, #0]
 80168de:	3301      	adds	r3, #1
 80168e0:	920e      	str	r2, [sp, #56]	; 0x38
 80168e2:	e7e4      	b.n	80168ae <_svfprintf_r+0x27a>
 80168e4:	2380      	movs	r3, #128	; 0x80
 80168e6:	e7bc      	b.n	8016862 <_svfprintf_r+0x22e>
 80168e8:	2300      	movs	r3, #0
 80168ea:	9316      	str	r3, [sp, #88]	; 0x58
 80168ec:	220a      	movs	r2, #10
 80168ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80168f0:	4353      	muls	r3, r2
 80168f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80168f4:	3a30      	subs	r2, #48	; 0x30
 80168f6:	18d3      	adds	r3, r2, r3
 80168f8:	9316      	str	r3, [sp, #88]	; 0x58
 80168fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80168fc:	1c5a      	adds	r2, r3, #1
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	9211      	str	r2, [sp, #68]	; 0x44
 8016902:	930e      	str	r3, [sp, #56]	; 0x38
 8016904:	3b30      	subs	r3, #48	; 0x30
 8016906:	2b09      	cmp	r3, #9
 8016908:	d9f0      	bls.n	80168ec <_svfprintf_r+0x2b8>
 801690a:	e7d5      	b.n	80168b8 <_svfprintf_r+0x284>
 801690c:	2308      	movs	r3, #8
 801690e:	e7a8      	b.n	8016862 <_svfprintf_r+0x22e>
 8016910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	2b68      	cmp	r3, #104	; 0x68
 8016916:	d105      	bne.n	8016924 <_svfprintf_r+0x2f0>
 8016918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801691a:	3301      	adds	r3, #1
 801691c:	9311      	str	r3, [sp, #68]	; 0x44
 801691e:	2380      	movs	r3, #128	; 0x80
 8016920:	009b      	lsls	r3, r3, #2
 8016922:	e79e      	b.n	8016862 <_svfprintf_r+0x22e>
 8016924:	2340      	movs	r3, #64	; 0x40
 8016926:	e79c      	b.n	8016862 <_svfprintf_r+0x22e>
 8016928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	2b6c      	cmp	r3, #108	; 0x6c
 801692e:	d104      	bne.n	801693a <_svfprintf_r+0x306>
 8016930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016932:	3301      	adds	r3, #1
 8016934:	9311      	str	r3, [sp, #68]	; 0x44
 8016936:	432e      	orrs	r6, r5
 8016938:	e6e9      	b.n	801670e <_svfprintf_r+0xda>
 801693a:	2310      	movs	r3, #16
 801693c:	e791      	b.n	8016862 <_svfprintf_r+0x22e>
 801693e:	1d23      	adds	r3, r4, #4
 8016940:	6822      	ldr	r2, [r4, #0]
 8016942:	9312      	str	r3, [sp, #72]	; 0x48
 8016944:	ab3f      	add	r3, sp, #252	; 0xfc
 8016946:	701a      	strb	r2, [r3, #0]
 8016948:	221b      	movs	r2, #27
 801694a:	2000      	movs	r0, #0
 801694c:	a91e      	add	r1, sp, #120	; 0x78
 801694e:	1852      	adds	r2, r2, r1
 8016950:	7010      	strb	r0, [r2, #0]
 8016952:	2201      	movs	r2, #1
 8016954:	0005      	movs	r5, r0
 8016956:	900c      	str	r0, [sp, #48]	; 0x30
 8016958:	9208      	str	r2, [sp, #32]
 801695a:	9017      	str	r0, [sp, #92]	; 0x5c
 801695c:	9010      	str	r0, [sp, #64]	; 0x40
 801695e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016960:	9309      	str	r3, [sp, #36]	; 0x24
 8016962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016964:	9a08      	ldr	r2, [sp, #32]
 8016966:	9318      	str	r3, [sp, #96]	; 0x60
 8016968:	4293      	cmp	r3, r2
 801696a:	da00      	bge.n	801696e <_svfprintf_r+0x33a>
 801696c:	9218      	str	r2, [sp, #96]	; 0x60
 801696e:	231b      	movs	r3, #27
 8016970:	aa1e      	add	r2, sp, #120	; 0x78
 8016972:	189b      	adds	r3, r3, r2
 8016974:	781b      	ldrb	r3, [r3, #0]
 8016976:	1e5a      	subs	r2, r3, #1
 8016978:	4193      	sbcs	r3, r2
 801697a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801697c:	18d3      	adds	r3, r2, r3
 801697e:	9318      	str	r3, [sp, #96]	; 0x60
 8016980:	2302      	movs	r3, #2
 8016982:	4033      	ands	r3, r6
 8016984:	9320      	str	r3, [sp, #128]	; 0x80
 8016986:	d002      	beq.n	801698e <_svfprintf_r+0x35a>
 8016988:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801698a:	3302      	adds	r3, #2
 801698c:	9318      	str	r3, [sp, #96]	; 0x60
 801698e:	2384      	movs	r3, #132	; 0x84
 8016990:	4033      	ands	r3, r6
 8016992:	9321      	str	r3, [sp, #132]	; 0x84
 8016994:	d121      	bne.n	80169da <_svfprintf_r+0x3a6>
 8016996:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016998:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801699a:	1a9c      	subs	r4, r3, r2
 801699c:	2c00      	cmp	r4, #0
 801699e:	dd1c      	ble.n	80169da <_svfprintf_r+0x3a6>
 80169a0:	0039      	movs	r1, r7
 80169a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169a4:	485d      	ldr	r0, [pc, #372]	; (8016b1c <_svfprintf_r+0x4e8>)
 80169a6:	9322      	str	r3, [sp, #136]	; 0x88
 80169a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80169aa:	3301      	adds	r3, #1
 80169ac:	3108      	adds	r1, #8
 80169ae:	6038      	str	r0, [r7, #0]
 80169b0:	2c10      	cmp	r4, #16
 80169b2:	dd01      	ble.n	80169b8 <_svfprintf_r+0x384>
 80169b4:	f000 fd08 	bl	80173c8 <_svfprintf_r+0xd94>
 80169b8:	607c      	str	r4, [r7, #4]
 80169ba:	18a4      	adds	r4, r4, r2
 80169bc:	942e      	str	r4, [sp, #184]	; 0xb8
 80169be:	932d      	str	r3, [sp, #180]	; 0xb4
 80169c0:	000f      	movs	r7, r1
 80169c2:	2b07      	cmp	r3, #7
 80169c4:	dd09      	ble.n	80169da <_svfprintf_r+0x3a6>
 80169c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80169c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169cc:	f002 ff86 	bl	80198dc <__ssprint_r>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d001      	beq.n	80169d8 <_svfprintf_r+0x3a4>
 80169d4:	f001 f852 	bl	8017a7c <_svfprintf_r+0x1448>
 80169d8:	af2f      	add	r7, sp, #188	; 0xbc
 80169da:	231b      	movs	r3, #27
 80169dc:	aa1e      	add	r2, sp, #120	; 0x78
 80169de:	189b      	adds	r3, r3, r2
 80169e0:	781a      	ldrb	r2, [r3, #0]
 80169e2:	2a00      	cmp	r2, #0
 80169e4:	d017      	beq.n	8016a16 <_svfprintf_r+0x3e2>
 80169e6:	603b      	str	r3, [r7, #0]
 80169e8:	2301      	movs	r3, #1
 80169ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80169ec:	607b      	str	r3, [r7, #4]
 80169ee:	0013      	movs	r3, r2
 80169f0:	3301      	adds	r3, #1
 80169f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80169f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169f6:	3708      	adds	r7, #8
 80169f8:	9322      	str	r3, [sp, #136]	; 0x88
 80169fa:	3301      	adds	r3, #1
 80169fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80169fe:	2b07      	cmp	r3, #7
 8016a00:	dd09      	ble.n	8016a16 <_svfprintf_r+0x3e2>
 8016a02:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a08:	f002 ff68 	bl	80198dc <__ssprint_r>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d001      	beq.n	8016a14 <_svfprintf_r+0x3e0>
 8016a10:	f001 f834 	bl	8017a7c <_svfprintf_r+0x1448>
 8016a14:	af2f      	add	r7, sp, #188	; 0xbc
 8016a16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d019      	beq.n	8016a50 <_svfprintf_r+0x41c>
 8016a1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a1e:	9320      	str	r3, [sp, #128]	; 0x80
 8016a20:	ab25      	add	r3, sp, #148	; 0x94
 8016a22:	603b      	str	r3, [r7, #0]
 8016a24:	2302      	movs	r3, #2
 8016a26:	607b      	str	r3, [r7, #4]
 8016a28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	3302      	adds	r3, #2
 8016a2e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016a30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a32:	9320      	str	r3, [sp, #128]	; 0x80
 8016a34:	3301      	adds	r3, #1
 8016a36:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a38:	2b07      	cmp	r3, #7
 8016a3a:	dd09      	ble.n	8016a50 <_svfprintf_r+0x41c>
 8016a3c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a42:	f002 ff4b 	bl	80198dc <__ssprint_r>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d001      	beq.n	8016a4e <_svfprintf_r+0x41a>
 8016a4a:	f001 f817 	bl	8017a7c <_svfprintf_r+0x1448>
 8016a4e:	af2f      	add	r7, sp, #188	; 0xbc
 8016a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a52:	2b80      	cmp	r3, #128	; 0x80
 8016a54:	d121      	bne.n	8016a9a <_svfprintf_r+0x466>
 8016a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a5a:	1a9c      	subs	r4, r3, r2
 8016a5c:	2c00      	cmp	r4, #0
 8016a5e:	dd1c      	ble.n	8016a9a <_svfprintf_r+0x466>
 8016a60:	0039      	movs	r1, r7
 8016a62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a64:	482e      	ldr	r0, [pc, #184]	; (8016b20 <_svfprintf_r+0x4ec>)
 8016a66:	9320      	str	r3, [sp, #128]	; 0x80
 8016a68:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	3108      	adds	r1, #8
 8016a6e:	6038      	str	r0, [r7, #0]
 8016a70:	2c10      	cmp	r4, #16
 8016a72:	dd01      	ble.n	8016a78 <_svfprintf_r+0x444>
 8016a74:	f000 fcbc 	bl	80173f0 <_svfprintf_r+0xdbc>
 8016a78:	607c      	str	r4, [r7, #4]
 8016a7a:	18a4      	adds	r4, r4, r2
 8016a7c:	942e      	str	r4, [sp, #184]	; 0xb8
 8016a7e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a80:	000f      	movs	r7, r1
 8016a82:	2b07      	cmp	r3, #7
 8016a84:	dd09      	ble.n	8016a9a <_svfprintf_r+0x466>
 8016a86:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a8c:	f002 ff26 	bl	80198dc <__ssprint_r>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d001      	beq.n	8016a98 <_svfprintf_r+0x464>
 8016a94:	f000 fff2 	bl	8017a7c <_svfprintf_r+0x1448>
 8016a98:	af2f      	add	r7, sp, #188	; 0xbc
 8016a9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a9c:	9a08      	ldr	r2, [sp, #32]
 8016a9e:	1a9c      	subs	r4, r3, r2
 8016aa0:	2c00      	cmp	r4, #0
 8016aa2:	dd1c      	ble.n	8016ade <_svfprintf_r+0x4aa>
 8016aa4:	0039      	movs	r1, r7
 8016aa6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016aa8:	481d      	ldr	r0, [pc, #116]	; (8016b20 <_svfprintf_r+0x4ec>)
 8016aaa:	9317      	str	r3, [sp, #92]	; 0x5c
 8016aac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016aae:	3301      	adds	r3, #1
 8016ab0:	3108      	adds	r1, #8
 8016ab2:	6038      	str	r0, [r7, #0]
 8016ab4:	2c10      	cmp	r4, #16
 8016ab6:	dd01      	ble.n	8016abc <_svfprintf_r+0x488>
 8016ab8:	f000 fcb4 	bl	8017424 <_svfprintf_r+0xdf0>
 8016abc:	18a2      	adds	r2, r4, r2
 8016abe:	607c      	str	r4, [r7, #4]
 8016ac0:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ac2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ac4:	000f      	movs	r7, r1
 8016ac6:	2b07      	cmp	r3, #7
 8016ac8:	dd09      	ble.n	8016ade <_svfprintf_r+0x4aa>
 8016aca:	aa2c      	add	r2, sp, #176	; 0xb0
 8016acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ad0:	f002 ff04 	bl	80198dc <__ssprint_r>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d001      	beq.n	8016adc <_svfprintf_r+0x4a8>
 8016ad8:	f000 ffd0 	bl	8017a7c <_svfprintf_r+0x1448>
 8016adc:	af2f      	add	r7, sp, #188	; 0xbc
 8016ade:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ae0:	9317      	str	r3, [sp, #92]	; 0x5c
 8016ae2:	05f3      	lsls	r3, r6, #23
 8016ae4:	d501      	bpl.n	8016aea <_svfprintf_r+0x4b6>
 8016ae6:	f000 fcb1 	bl	801744c <_svfprintf_r+0xe18>
 8016aea:	9a08      	ldr	r2, [sp, #32]
 8016aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aee:	4694      	mov	ip, r2
 8016af0:	603b      	str	r3, [r7, #0]
 8016af2:	9b08      	ldr	r3, [sp, #32]
 8016af4:	607b      	str	r3, [r7, #4]
 8016af6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016af8:	4463      	add	r3, ip
 8016afa:	932e      	str	r3, [sp, #184]	; 0xb8
 8016afc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016afe:	9308      	str	r3, [sp, #32]
 8016b00:	3301      	adds	r3, #1
 8016b02:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b04:	2b07      	cmp	r3, #7
 8016b06:	dd01      	ble.n	8016b0c <_svfprintf_r+0x4d8>
 8016b08:	f000 fd94 	bl	8017634 <_svfprintf_r+0x1000>
 8016b0c:	3708      	adds	r7, #8
 8016b0e:	f000 fce4 	bl	80174da <_svfprintf_r+0xea6>
 8016b12:	46c0      	nop			; (mov r8, r8)
 8016b14:	0801d2e1 	.word	0x0801d2e1
 8016b18:	fffffbff 	.word	0xfffffbff
 8016b1c:	0801d2f4 	.word	0x0801d2f4
 8016b20:	0801d304 	.word	0x0801d304
 8016b24:	2310      	movs	r3, #16
 8016b26:	431e      	orrs	r6, r3
 8016b28:	06b3      	lsls	r3, r6, #26
 8016b2a:	d52c      	bpl.n	8016b86 <_svfprintf_r+0x552>
 8016b2c:	2307      	movs	r3, #7
 8016b2e:	3407      	adds	r4, #7
 8016b30:	439c      	bics	r4, r3
 8016b32:	0023      	movs	r3, r4
 8016b34:	3308      	adds	r3, #8
 8016b36:	9312      	str	r3, [sp, #72]	; 0x48
 8016b38:	6823      	ldr	r3, [r4, #0]
 8016b3a:	6864      	ldr	r4, [r4, #4]
 8016b3c:	9306      	str	r3, [sp, #24]
 8016b3e:	9407      	str	r4, [sp, #28]
 8016b40:	9b07      	ldr	r3, [sp, #28]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	da0b      	bge.n	8016b5e <_svfprintf_r+0x52a>
 8016b46:	9906      	ldr	r1, [sp, #24]
 8016b48:	9a07      	ldr	r2, [sp, #28]
 8016b4a:	2400      	movs	r4, #0
 8016b4c:	424b      	negs	r3, r1
 8016b4e:	4194      	sbcs	r4, r2
 8016b50:	9306      	str	r3, [sp, #24]
 8016b52:	9407      	str	r4, [sp, #28]
 8016b54:	231b      	movs	r3, #27
 8016b56:	aa1e      	add	r2, sp, #120	; 0x78
 8016b58:	189b      	adds	r3, r3, r2
 8016b5a:	222d      	movs	r2, #45	; 0x2d
 8016b5c:	701a      	strb	r2, [r3, #0]
 8016b5e:	9b08      	ldr	r3, [sp, #32]
 8016b60:	3301      	adds	r3, #1
 8016b62:	d000      	beq.n	8016b66 <_svfprintf_r+0x532>
 8016b64:	e382      	b.n	801726c <_svfprintf_r+0xc38>
 8016b66:	9b07      	ldr	r3, [sp, #28]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d000      	beq.n	8016b6e <_svfprintf_r+0x53a>
 8016b6c:	e3b0      	b.n	80172d0 <_svfprintf_r+0xc9c>
 8016b6e:	9b06      	ldr	r3, [sp, #24]
 8016b70:	2b09      	cmp	r3, #9
 8016b72:	d900      	bls.n	8016b76 <_svfprintf_r+0x542>
 8016b74:	e3ac      	b.n	80172d0 <_svfprintf_r+0xc9c>
 8016b76:	23e7      	movs	r3, #231	; 0xe7
 8016b78:	aa1e      	add	r2, sp, #120	; 0x78
 8016b7a:	189b      	adds	r3, r3, r2
 8016b7c:	9a06      	ldr	r2, [sp, #24]
 8016b7e:	3230      	adds	r2, #48	; 0x30
 8016b80:	701a      	strb	r2, [r3, #0]
 8016b82:	9309      	str	r3, [sp, #36]	; 0x24
 8016b84:	e395      	b.n	80172b2 <_svfprintf_r+0xc7e>
 8016b86:	1d23      	adds	r3, r4, #4
 8016b88:	9312      	str	r3, [sp, #72]	; 0x48
 8016b8a:	06f3      	lsls	r3, r6, #27
 8016b8c:	d504      	bpl.n	8016b98 <_svfprintf_r+0x564>
 8016b8e:	6823      	ldr	r3, [r4, #0]
 8016b90:	9306      	str	r3, [sp, #24]
 8016b92:	17db      	asrs	r3, r3, #31
 8016b94:	9307      	str	r3, [sp, #28]
 8016b96:	e7d3      	b.n	8016b40 <_svfprintf_r+0x50c>
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	0672      	lsls	r2, r6, #25
 8016b9c:	d501      	bpl.n	8016ba2 <_svfprintf_r+0x56e>
 8016b9e:	b21b      	sxth	r3, r3
 8016ba0:	e7f6      	b.n	8016b90 <_svfprintf_r+0x55c>
 8016ba2:	05b2      	lsls	r2, r6, #22
 8016ba4:	d5f4      	bpl.n	8016b90 <_svfprintf_r+0x55c>
 8016ba6:	b25b      	sxtb	r3, r3
 8016ba8:	e7f2      	b.n	8016b90 <_svfprintf_r+0x55c>
 8016baa:	2307      	movs	r3, #7
 8016bac:	3407      	adds	r4, #7
 8016bae:	439c      	bics	r4, r3
 8016bb0:	0023      	movs	r3, r4
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	3308      	adds	r3, #8
 8016bb6:	9312      	str	r3, [sp, #72]	; 0x48
 8016bb8:	6823      	ldr	r3, [r4, #0]
 8016bba:	4252      	negs	r2, r2
 8016bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8016bbe:	6863      	ldr	r3, [r4, #4]
 8016bc0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016bc2:	005c      	lsls	r4, r3, #1
 8016bc4:	0864      	lsrs	r4, r4, #1
 8016bc6:	9319      	str	r3, [sp, #100]	; 0x64
 8016bc8:	0028      	movs	r0, r5
 8016bca:	4bcf      	ldr	r3, [pc, #828]	; (8016f08 <_svfprintf_r+0x8d4>)
 8016bcc:	0021      	movs	r1, r4
 8016bce:	f7ec f9eb 	bl	8002fa8 <__aeabi_dcmpun>
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d125      	bne.n	8016c22 <_svfprintf_r+0x5ee>
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	4bcb      	ldr	r3, [pc, #812]	; (8016f08 <_svfprintf_r+0x8d4>)
 8016bda:	4252      	negs	r2, r2
 8016bdc:	0028      	movs	r0, r5
 8016bde:	0021      	movs	r1, r4
 8016be0:	f7e9 fc4c 	bl	800047c <__aeabi_dcmple>
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d11c      	bne.n	8016c22 <_svfprintf_r+0x5ee>
 8016be8:	2200      	movs	r2, #0
 8016bea:	2300      	movs	r3, #0
 8016bec:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016bee:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016bf0:	f7e9 fc3a 	bl	8000468 <__aeabi_dcmplt>
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	d004      	beq.n	8016c02 <_svfprintf_r+0x5ce>
 8016bf8:	231b      	movs	r3, #27
 8016bfa:	aa1e      	add	r2, sp, #120	; 0x78
 8016bfc:	189b      	adds	r3, r3, r2
 8016bfe:	222d      	movs	r2, #45	; 0x2d
 8016c00:	701a      	strb	r2, [r3, #0]
 8016c02:	4bc2      	ldr	r3, [pc, #776]	; (8016f0c <_svfprintf_r+0x8d8>)
 8016c04:	9309      	str	r3, [sp, #36]	; 0x24
 8016c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c08:	2b47      	cmp	r3, #71	; 0x47
 8016c0a:	dc01      	bgt.n	8016c10 <_svfprintf_r+0x5dc>
 8016c0c:	4bc0      	ldr	r3, [pc, #768]	; (8016f10 <_svfprintf_r+0x8dc>)
 8016c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c10:	2380      	movs	r3, #128	; 0x80
 8016c12:	439e      	bics	r6, r3
 8016c14:	2300      	movs	r3, #0
 8016c16:	930c      	str	r3, [sp, #48]	; 0x30
 8016c18:	3303      	adds	r3, #3
 8016c1a:	9308      	str	r3, [sp, #32]
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c20:	e34f      	b.n	80172c2 <_svfprintf_r+0xc8e>
 8016c22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c26:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016c28:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016c2a:	f7ec f9bd 	bl	8002fa8 <__aeabi_dcmpun>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d00e      	beq.n	8016c50 <_svfprintf_r+0x61c>
 8016c32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	da04      	bge.n	8016c42 <_svfprintf_r+0x60e>
 8016c38:	231b      	movs	r3, #27
 8016c3a:	aa1e      	add	r2, sp, #120	; 0x78
 8016c3c:	189b      	adds	r3, r3, r2
 8016c3e:	222d      	movs	r2, #45	; 0x2d
 8016c40:	701a      	strb	r2, [r3, #0]
 8016c42:	4bb4      	ldr	r3, [pc, #720]	; (8016f14 <_svfprintf_r+0x8e0>)
 8016c44:	9309      	str	r3, [sp, #36]	; 0x24
 8016c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c48:	2b47      	cmp	r3, #71	; 0x47
 8016c4a:	dce1      	bgt.n	8016c10 <_svfprintf_r+0x5dc>
 8016c4c:	4bb2      	ldr	r3, [pc, #712]	; (8016f18 <_svfprintf_r+0x8e4>)
 8016c4e:	e7de      	b.n	8016c0e <_svfprintf_r+0x5da>
 8016c50:	2320      	movs	r3, #32
 8016c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c54:	439a      	bics	r2, r3
 8016c56:	920f      	str	r2, [sp, #60]	; 0x3c
 8016c58:	2a41      	cmp	r2, #65	; 0x41
 8016c5a:	d124      	bne.n	8016ca6 <_svfprintf_r+0x672>
 8016c5c:	2230      	movs	r2, #48	; 0x30
 8016c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016c60:	ab25      	add	r3, sp, #148	; 0x94
 8016c62:	701a      	strb	r2, [r3, #0]
 8016c64:	3228      	adds	r2, #40	; 0x28
 8016c66:	2961      	cmp	r1, #97	; 0x61
 8016c68:	d100      	bne.n	8016c6c <_svfprintf_r+0x638>
 8016c6a:	3220      	adds	r2, #32
 8016c6c:	705a      	strb	r2, [r3, #1]
 8016c6e:	2302      	movs	r3, #2
 8016c70:	431e      	orrs	r6, r3
 8016c72:	9b08      	ldr	r3, [sp, #32]
 8016c74:	2b63      	cmp	r3, #99	; 0x63
 8016c76:	dc00      	bgt.n	8016c7a <_svfprintf_r+0x646>
 8016c78:	e09e      	b.n	8016db8 <_svfprintf_r+0x784>
 8016c7a:	1c59      	adds	r1, r3, #1
 8016c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c7e:	f7fe f913 	bl	8014ea8 <_malloc_r>
 8016c82:	9009      	str	r0, [sp, #36]	; 0x24
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d000      	beq.n	8016c8a <_svfprintf_r+0x656>
 8016c88:	e09b      	b.n	8016dc2 <_svfprintf_r+0x78e>
 8016c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c8c:	899a      	ldrh	r2, [r3, #12]
 8016c8e:	2340      	movs	r3, #64	; 0x40
 8016c90:	4313      	orrs	r3, r2
 8016c92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c94:	8193      	strh	r3, [r2, #12]
 8016c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c98:	899b      	ldrh	r3, [r3, #12]
 8016c9a:	065b      	lsls	r3, r3, #25
 8016c9c:	d400      	bmi.n	8016ca0 <_svfprintf_r+0x66c>
 8016c9e:	e4ee      	b.n	801667e <_svfprintf_r+0x4a>
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	425b      	negs	r3, r3
 8016ca4:	e4ea      	b.n	801667c <_svfprintf_r+0x48>
 8016ca6:	9b08      	ldr	r3, [sp, #32]
 8016ca8:	900c      	str	r0, [sp, #48]	; 0x30
 8016caa:	3301      	adds	r3, #1
 8016cac:	d100      	bne.n	8016cb0 <_svfprintf_r+0x67c>
 8016cae:	e08b      	b.n	8016dc8 <_svfprintf_r+0x794>
 8016cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cb2:	2b47      	cmp	r3, #71	; 0x47
 8016cb4:	d103      	bne.n	8016cbe <_svfprintf_r+0x68a>
 8016cb6:	9b08      	ldr	r3, [sp, #32]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d100      	bne.n	8016cbe <_svfprintf_r+0x68a>
 8016cbc:	e087      	b.n	8016dce <_svfprintf_r+0x79a>
 8016cbe:	2380      	movs	r3, #128	; 0x80
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4333      	orrs	r3, r6
 8016cc4:	9320      	str	r3, [sp, #128]	; 0x80
 8016cc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016cc8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	db00      	blt.n	8016cd0 <_svfprintf_r+0x69c>
 8016cce:	e082      	b.n	8016dd6 <_svfprintf_r+0x7a2>
 8016cd0:	2280      	movs	r2, #128	; 0x80
 8016cd2:	0612      	lsls	r2, r2, #24
 8016cd4:	4694      	mov	ip, r2
 8016cd6:	4463      	add	r3, ip
 8016cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8016cda:	232d      	movs	r3, #45	; 0x2d
 8016cdc:	9322      	str	r3, [sp, #136]	; 0x88
 8016cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ce0:	2b41      	cmp	r3, #65	; 0x41
 8016ce2:	d000      	beq.n	8016ce6 <_svfprintf_r+0x6b2>
 8016ce4:	e105      	b.n	8016ef2 <_svfprintf_r+0x8be>
 8016ce6:	aa26      	add	r2, sp, #152	; 0x98
 8016ce8:	0020      	movs	r0, r4
 8016cea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016cec:	f002 fdc4 	bl	8019878 <frexp>
 8016cf0:	23ff      	movs	r3, #255	; 0xff
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	059b      	lsls	r3, r3, #22
 8016cf6:	f7eb fb9d 	bl	8002434 <__aeabi_dmul>
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	0004      	movs	r4, r0
 8016d00:	000d      	movs	r5, r1
 8016d02:	f7e9 fbab 	bl	800045c <__aeabi_dcmpeq>
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d001      	beq.n	8016d0e <_svfprintf_r+0x6da>
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	9326      	str	r3, [sp, #152]	; 0x98
 8016d0e:	4b83      	ldr	r3, [pc, #524]	; (8016f1c <_svfprintf_r+0x8e8>)
 8016d10:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d14:	2b61      	cmp	r3, #97	; 0x61
 8016d16:	d101      	bne.n	8016d1c <_svfprintf_r+0x6e8>
 8016d18:	4b81      	ldr	r3, [pc, #516]	; (8016f20 <_svfprintf_r+0x8ec>)
 8016d1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d1c:	9b08      	ldr	r3, [sp, #32]
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	9310      	str	r3, [sp, #64]	; 0x40
 8016d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d24:	9318      	str	r3, [sp, #96]	; 0x60
 8016d26:	2200      	movs	r2, #0
 8016d28:	4b7e      	ldr	r3, [pc, #504]	; (8016f24 <_svfprintf_r+0x8f0>)
 8016d2a:	0020      	movs	r0, r4
 8016d2c:	0029      	movs	r1, r5
 8016d2e:	f7eb fb81 	bl	8002434 <__aeabi_dmul>
 8016d32:	000d      	movs	r5, r1
 8016d34:	0004      	movs	r4, r0
 8016d36:	f7ec f953 	bl	8002fe0 <__aeabi_d2iz>
 8016d3a:	9021      	str	r0, [sp, #132]	; 0x84
 8016d3c:	f7ec f986 	bl	800304c <__aeabi_i2d>
 8016d40:	0002      	movs	r2, r0
 8016d42:	000b      	movs	r3, r1
 8016d44:	0020      	movs	r0, r4
 8016d46:	0029      	movs	r1, r5
 8016d48:	f7eb fde6 	bl	8002918 <__aeabi_dsub>
 8016d4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d50:	3301      	adds	r3, #1
 8016d52:	930d      	str	r3, [sp, #52]	; 0x34
 8016d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d56:	0004      	movs	r4, r0
 8016d58:	5c9b      	ldrb	r3, [r3, r2]
 8016d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016d5c:	000d      	movs	r5, r1
 8016d5e:	7013      	strb	r3, [r2, #0]
 8016d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d62:	9323      	str	r3, [sp, #140]	; 0x8c
 8016d64:	3301      	adds	r3, #1
 8016d66:	d00a      	beq.n	8016d7e <_svfprintf_r+0x74a>
 8016d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	3b01      	subs	r3, #1
 8016d6e:	9310      	str	r3, [sp, #64]	; 0x40
 8016d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d72:	9318      	str	r3, [sp, #96]	; 0x60
 8016d74:	2300      	movs	r3, #0
 8016d76:	f7e9 fb71 	bl	800045c <__aeabi_dcmpeq>
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	d0d3      	beq.n	8016d26 <_svfprintf_r+0x6f2>
 8016d7e:	2200      	movs	r2, #0
 8016d80:	4b69      	ldr	r3, [pc, #420]	; (8016f28 <_svfprintf_r+0x8f4>)
 8016d82:	0020      	movs	r0, r4
 8016d84:	0029      	movs	r1, r5
 8016d86:	f7e9 fb83 	bl	8000490 <__aeabi_dcmpgt>
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	d126      	bne.n	8016ddc <_svfprintf_r+0x7a8>
 8016d8e:	2200      	movs	r2, #0
 8016d90:	4b65      	ldr	r3, [pc, #404]	; (8016f28 <_svfprintf_r+0x8f4>)
 8016d92:	0020      	movs	r0, r4
 8016d94:	0029      	movs	r1, r5
 8016d96:	f7e9 fb61 	bl	800045c <__aeabi_dcmpeq>
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	d002      	beq.n	8016da4 <_svfprintf_r+0x770>
 8016d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016da0:	07db      	lsls	r3, r3, #31
 8016da2:	d41b      	bmi.n	8016ddc <_svfprintf_r+0x7a8>
 8016da4:	2130      	movs	r1, #48	; 0x30
 8016da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016da8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016daa:	1898      	adds	r0, r3, r2
 8016dac:	930d      	str	r3, [sp, #52]	; 0x34
 8016dae:	1ac2      	subs	r2, r0, r3
 8016db0:	d426      	bmi.n	8016e00 <_svfprintf_r+0x7cc>
 8016db2:	7019      	strb	r1, [r3, #0]
 8016db4:	3301      	adds	r3, #1
 8016db6:	e7f9      	b.n	8016dac <_svfprintf_r+0x778>
 8016db8:	2300      	movs	r3, #0
 8016dba:	930c      	str	r3, [sp, #48]	; 0x30
 8016dbc:	ab3f      	add	r3, sp, #252	; 0xfc
 8016dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc0:	e77d      	b.n	8016cbe <_svfprintf_r+0x68a>
 8016dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8016dc6:	e77a      	b.n	8016cbe <_svfprintf_r+0x68a>
 8016dc8:	2306      	movs	r3, #6
 8016dca:	9308      	str	r3, [sp, #32]
 8016dcc:	e777      	b.n	8016cbe <_svfprintf_r+0x68a>
 8016dce:	9b08      	ldr	r3, [sp, #32]
 8016dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e7f9      	b.n	8016dca <_svfprintf_r+0x796>
 8016dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8016dd8:	2300      	movs	r3, #0
 8016dda:	e77f      	b.n	8016cdc <_svfprintf_r+0x6a8>
 8016ddc:	2030      	movs	r0, #48	; 0x30
 8016dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016de0:	932a      	str	r3, [sp, #168]	; 0xa8
 8016de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016de4:	7bda      	ldrb	r2, [r3, #15]
 8016de6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016de8:	3b01      	subs	r3, #1
 8016dea:	932a      	str	r3, [sp, #168]	; 0xa8
 8016dec:	7819      	ldrb	r1, [r3, #0]
 8016dee:	4291      	cmp	r1, r2
 8016df0:	d07d      	beq.n	8016eee <_svfprintf_r+0x8ba>
 8016df2:	1c4a      	adds	r2, r1, #1
 8016df4:	b2d2      	uxtb	r2, r2
 8016df6:	2939      	cmp	r1, #57	; 0x39
 8016df8:	d101      	bne.n	8016dfe <_svfprintf_r+0x7ca>
 8016dfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016dfc:	7a92      	ldrb	r2, [r2, #10]
 8016dfe:	701a      	strb	r2, [r3, #0]
 8016e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e04:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016e06:	1a9b      	subs	r3, r3, r2
 8016e08:	930d      	str	r3, [sp, #52]	; 0x34
 8016e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e0c:	2b47      	cmp	r3, #71	; 0x47
 8016e0e:	d000      	beq.n	8016e12 <_svfprintf_r+0x7de>
 8016e10:	e0d2      	b.n	8016fb8 <_svfprintf_r+0x984>
 8016e12:	1ceb      	adds	r3, r5, #3
 8016e14:	db03      	blt.n	8016e1e <_svfprintf_r+0x7ea>
 8016e16:	9b08      	ldr	r3, [sp, #32]
 8016e18:	42ab      	cmp	r3, r5
 8016e1a:	db00      	blt.n	8016e1e <_svfprintf_r+0x7ea>
 8016e1c:	e0fd      	b.n	801701a <_svfprintf_r+0x9e6>
 8016e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e20:	3b02      	subs	r3, #2
 8016e22:	930e      	str	r3, [sp, #56]	; 0x38
 8016e24:	2238      	movs	r2, #56	; 0x38
 8016e26:	466b      	mov	r3, sp
 8016e28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016e2a:	189b      	adds	r3, r3, r2
 8016e2c:	3a18      	subs	r2, #24
 8016e2e:	4391      	bics	r1, r2
 8016e30:	1e6c      	subs	r4, r5, #1
 8016e32:	000a      	movs	r2, r1
 8016e34:	9426      	str	r4, [sp, #152]	; 0x98
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	2100      	movs	r1, #0
 8016e3a:	2a41      	cmp	r2, #65	; 0x41
 8016e3c:	d102      	bne.n	8016e44 <_svfprintf_r+0x810>
 8016e3e:	330f      	adds	r3, #15
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	3101      	adds	r1, #1
 8016e44:	aa28      	add	r2, sp, #160	; 0xa0
 8016e46:	7013      	strb	r3, [r2, #0]
 8016e48:	232b      	movs	r3, #43	; 0x2b
 8016e4a:	2c00      	cmp	r4, #0
 8016e4c:	da02      	bge.n	8016e54 <_svfprintf_r+0x820>
 8016e4e:	2401      	movs	r4, #1
 8016e50:	232d      	movs	r3, #45	; 0x2d
 8016e52:	1b64      	subs	r4, r4, r5
 8016e54:	7053      	strb	r3, [r2, #1]
 8016e56:	2c09      	cmp	r4, #9
 8016e58:	dc00      	bgt.n	8016e5c <_svfprintf_r+0x828>
 8016e5a:	e0c7      	b.n	8016fec <_svfprintf_r+0x9b8>
 8016e5c:	2537      	movs	r5, #55	; 0x37
 8016e5e:	ab1e      	add	r3, sp, #120	; 0x78
 8016e60:	18ed      	adds	r5, r5, r3
 8016e62:	1e6b      	subs	r3, r5, #1
 8016e64:	0020      	movs	r0, r4
 8016e66:	210a      	movs	r1, #10
 8016e68:	9308      	str	r3, [sp, #32]
 8016e6a:	f7e9 fae1 	bl	8000430 <__aeabi_idivmod>
 8016e6e:	1e6b      	subs	r3, r5, #1
 8016e70:	3130      	adds	r1, #48	; 0x30
 8016e72:	7019      	strb	r1, [r3, #0]
 8016e74:	0020      	movs	r0, r4
 8016e76:	210a      	movs	r1, #10
 8016e78:	f7e9 f9f4 	bl	8000264 <__divsi3>
 8016e7c:	0004      	movs	r4, r0
 8016e7e:	2809      	cmp	r0, #9
 8016e80:	dd00      	ble.n	8016e84 <_svfprintf_r+0x850>
 8016e82:	e0ac      	b.n	8016fde <_svfprintf_r+0x9aa>
 8016e84:	232a      	movs	r3, #42	; 0x2a
 8016e86:	2137      	movs	r1, #55	; 0x37
 8016e88:	aa1e      	add	r2, sp, #120	; 0x78
 8016e8a:	3d02      	subs	r5, #2
 8016e8c:	3430      	adds	r4, #48	; 0x30
 8016e8e:	702c      	strb	r4, [r5, #0]
 8016e90:	189b      	adds	r3, r3, r2
 8016e92:	1889      	adds	r1, r1, r2
 8016e94:	001a      	movs	r2, r3
 8016e96:	428d      	cmp	r5, r1
 8016e98:	d200      	bcs.n	8016e9c <_svfprintf_r+0x868>
 8016e9a:	e0a2      	b.n	8016fe2 <_svfprintf_r+0x9ae>
 8016e9c:	ab28      	add	r3, sp, #160	; 0xa0
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	931d      	str	r3, [sp, #116]	; 0x74
 8016ea2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ea6:	4694      	mov	ip, r2
 8016ea8:	4463      	add	r3, ip
 8016eaa:	9308      	str	r3, [sp, #32]
 8016eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	dc01      	bgt.n	8016eb6 <_svfprintf_r+0x882>
 8016eb2:	07f3      	lsls	r3, r6, #31
 8016eb4:	d504      	bpl.n	8016ec0 <_svfprintf_r+0x88c>
 8016eb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016eb8:	9b08      	ldr	r3, [sp, #32]
 8016eba:	4694      	mov	ip, r2
 8016ebc:	4463      	add	r3, ip
 8016ebe:	9308      	str	r3, [sp, #32]
 8016ec0:	2280      	movs	r2, #128	; 0x80
 8016ec2:	4b1a      	ldr	r3, [pc, #104]	; (8016f2c <_svfprintf_r+0x8f8>)
 8016ec4:	0052      	lsls	r2, r2, #1
 8016ec6:	4033      	ands	r3, r6
 8016ec8:	431a      	orrs	r2, r3
 8016eca:	2300      	movs	r3, #0
 8016ecc:	001d      	movs	r5, r3
 8016ece:	9220      	str	r2, [sp, #128]	; 0x80
 8016ed0:	9310      	str	r3, [sp, #64]	; 0x40
 8016ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d100      	bne.n	8016edc <_svfprintf_r+0x8a8>
 8016eda:	e270      	b.n	80173be <_svfprintf_r+0xd8a>
 8016edc:	231b      	movs	r3, #27
 8016ede:	aa1e      	add	r2, sp, #120	; 0x78
 8016ee0:	189b      	adds	r3, r3, r2
 8016ee2:	222d      	movs	r2, #45	; 0x2d
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016eea:	9317      	str	r3, [sp, #92]	; 0x5c
 8016eec:	e539      	b.n	8016962 <_svfprintf_r+0x32e>
 8016eee:	7018      	strb	r0, [r3, #0]
 8016ef0:	e779      	b.n	8016de6 <_svfprintf_r+0x7b2>
 8016ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ef4:	2b46      	cmp	r3, #70	; 0x46
 8016ef6:	d01b      	beq.n	8016f30 <_svfprintf_r+0x8fc>
 8016ef8:	9d08      	ldr	r5, [sp, #32]
 8016efa:	2b45      	cmp	r3, #69	; 0x45
 8016efc:	d101      	bne.n	8016f02 <_svfprintf_r+0x8ce>
 8016efe:	9b08      	ldr	r3, [sp, #32]
 8016f00:	1c5d      	adds	r5, r3, #1
 8016f02:	2302      	movs	r3, #2
 8016f04:	e016      	b.n	8016f34 <_svfprintf_r+0x900>
 8016f06:	46c0      	nop			; (mov r8, r8)
 8016f08:	7fefffff 	.word	0x7fefffff
 8016f0c:	0801d2c4 	.word	0x0801d2c4
 8016f10:	0801d2c0 	.word	0x0801d2c0
 8016f14:	0801d2cc 	.word	0x0801d2cc
 8016f18:	0801d2c8 	.word	0x0801d2c8
 8016f1c:	0801d2e1 	.word	0x0801d2e1
 8016f20:	0801d2d0 	.word	0x0801d2d0
 8016f24:	40300000 	.word	0x40300000
 8016f28:	3fe00000 	.word	0x3fe00000
 8016f2c:	fffffbff 	.word	0xfffffbff
 8016f30:	2303      	movs	r3, #3
 8016f32:	9d08      	ldr	r5, [sp, #32]
 8016f34:	aa2a      	add	r2, sp, #168	; 0xa8
 8016f36:	9204      	str	r2, [sp, #16]
 8016f38:	aa27      	add	r2, sp, #156	; 0x9c
 8016f3a:	9203      	str	r2, [sp, #12]
 8016f3c:	aa26      	add	r2, sp, #152	; 0x98
 8016f3e:	9202      	str	r2, [sp, #8]
 8016f40:	9300      	str	r3, [sp, #0]
 8016f42:	9501      	str	r5, [sp, #4]
 8016f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f46:	0022      	movs	r2, r4
 8016f48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f4a:	f000 fe79 	bl	8017c40 <_dtoa_r>
 8016f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f50:	9009      	str	r0, [sp, #36]	; 0x24
 8016f52:	2b47      	cmp	r3, #71	; 0x47
 8016f54:	d101      	bne.n	8016f5a <_svfprintf_r+0x926>
 8016f56:	07f3      	lsls	r3, r6, #31
 8016f58:	d524      	bpl.n	8016fa4 <_svfprintf_r+0x970>
 8016f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f5c:	195b      	adds	r3, r3, r5
 8016f5e:	9310      	str	r3, [sp, #64]	; 0x40
 8016f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f62:	2b46      	cmp	r3, #70	; 0x46
 8016f64:	d113      	bne.n	8016f8e <_svfprintf_r+0x95a>
 8016f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	2b30      	cmp	r3, #48	; 0x30
 8016f6c:	d10a      	bne.n	8016f84 <_svfprintf_r+0x950>
 8016f6e:	2200      	movs	r2, #0
 8016f70:	2300      	movs	r3, #0
 8016f72:	0020      	movs	r0, r4
 8016f74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016f76:	f7e9 fa71 	bl	800045c <__aeabi_dcmpeq>
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	d102      	bne.n	8016f84 <_svfprintf_r+0x950>
 8016f7e:	2301      	movs	r3, #1
 8016f80:	1b5d      	subs	r5, r3, r5
 8016f82:	9526      	str	r5, [sp, #152]	; 0x98
 8016f84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f88:	4694      	mov	ip, r2
 8016f8a:	4463      	add	r3, ip
 8016f8c:	9310      	str	r3, [sp, #64]	; 0x40
 8016f8e:	2200      	movs	r2, #0
 8016f90:	2300      	movs	r3, #0
 8016f92:	0020      	movs	r0, r4
 8016f94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016f96:	f7e9 fa61 	bl	800045c <__aeabi_dcmpeq>
 8016f9a:	2230      	movs	r2, #48	; 0x30
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d006      	beq.n	8016fae <_svfprintf_r+0x97a>
 8016fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fa2:	932a      	str	r3, [sp, #168]	; 0xa8
 8016fa4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016fa6:	e72c      	b.n	8016e02 <_svfprintf_r+0x7ce>
 8016fa8:	1c59      	adds	r1, r3, #1
 8016faa:	912a      	str	r1, [sp, #168]	; 0xa8
 8016fac:	701a      	strb	r2, [r3, #0]
 8016fae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016fb0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	d8f8      	bhi.n	8016fa8 <_svfprintf_r+0x974>
 8016fb6:	e7f5      	b.n	8016fa4 <_svfprintf_r+0x970>
 8016fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fba:	2b46      	cmp	r3, #70	; 0x46
 8016fbc:	d000      	beq.n	8016fc0 <_svfprintf_r+0x98c>
 8016fbe:	e731      	b.n	8016e24 <_svfprintf_r+0x7f0>
 8016fc0:	9b08      	ldr	r3, [sp, #32]
 8016fc2:	2d00      	cmp	r5, #0
 8016fc4:	dd21      	ble.n	801700a <_svfprintf_r+0x9d6>
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d101      	bne.n	8016fce <_svfprintf_r+0x99a>
 8016fca:	07f3      	lsls	r3, r6, #31
 8016fcc:	d54a      	bpl.n	8017064 <_svfprintf_r+0xa30>
 8016fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fd0:	18eb      	adds	r3, r5, r3
 8016fd2:	9a08      	ldr	r2, [sp, #32]
 8016fd4:	18d3      	adds	r3, r2, r3
 8016fd6:	9308      	str	r3, [sp, #32]
 8016fd8:	2366      	movs	r3, #102	; 0x66
 8016fda:	930e      	str	r3, [sp, #56]	; 0x38
 8016fdc:	e034      	b.n	8017048 <_svfprintf_r+0xa14>
 8016fde:	9d08      	ldr	r5, [sp, #32]
 8016fe0:	e73f      	b.n	8016e62 <_svfprintf_r+0x82e>
 8016fe2:	782a      	ldrb	r2, [r5, #0]
 8016fe4:	3501      	adds	r5, #1
 8016fe6:	701a      	strb	r2, [r3, #0]
 8016fe8:	3301      	adds	r3, #1
 8016fea:	e753      	b.n	8016e94 <_svfprintf_r+0x860>
 8016fec:	232a      	movs	r3, #42	; 0x2a
 8016fee:	aa1e      	add	r2, sp, #120	; 0x78
 8016ff0:	189b      	adds	r3, r3, r2
 8016ff2:	2900      	cmp	r1, #0
 8016ff4:	d105      	bne.n	8017002 <_svfprintf_r+0x9ce>
 8016ff6:	2230      	movs	r2, #48	; 0x30
 8016ff8:	ab28      	add	r3, sp, #160	; 0xa0
 8016ffa:	709a      	strb	r2, [r3, #2]
 8016ffc:	232b      	movs	r3, #43	; 0x2b
 8016ffe:	aa1e      	add	r2, sp, #120	; 0x78
 8017000:	189b      	adds	r3, r3, r2
 8017002:	3430      	adds	r4, #48	; 0x30
 8017004:	1c5a      	adds	r2, r3, #1
 8017006:	701c      	strb	r4, [r3, #0]
 8017008:	e748      	b.n	8016e9c <_svfprintf_r+0x868>
 801700a:	2b00      	cmp	r3, #0
 801700c:	d102      	bne.n	8017014 <_svfprintf_r+0x9e0>
 801700e:	3301      	adds	r3, #1
 8017010:	421e      	tst	r6, r3
 8017012:	d029      	beq.n	8017068 <_svfprintf_r+0xa34>
 8017014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017016:	3301      	adds	r3, #1
 8017018:	e7db      	b.n	8016fd2 <_svfprintf_r+0x99e>
 801701a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801701c:	42ab      	cmp	r3, r5
 801701e:	dc06      	bgt.n	801702e <_svfprintf_r+0x9fa>
 8017020:	07f3      	lsls	r3, r6, #31
 8017022:	d524      	bpl.n	801706e <_svfprintf_r+0xa3a>
 8017024:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017026:	18eb      	adds	r3, r5, r3
 8017028:	9308      	str	r3, [sp, #32]
 801702a:	2367      	movs	r3, #103	; 0x67
 801702c:	e7d5      	b.n	8016fda <_svfprintf_r+0x9a6>
 801702e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017032:	4694      	mov	ip, r2
 8017034:	4463      	add	r3, ip
 8017036:	9308      	str	r3, [sp, #32]
 8017038:	2367      	movs	r3, #103	; 0x67
 801703a:	930e      	str	r3, [sp, #56]	; 0x38
 801703c:	2d00      	cmp	r5, #0
 801703e:	dc03      	bgt.n	8017048 <_svfprintf_r+0xa14>
 8017040:	9b08      	ldr	r3, [sp, #32]
 8017042:	1b5b      	subs	r3, r3, r5
 8017044:	3301      	adds	r3, #1
 8017046:	9308      	str	r3, [sp, #32]
 8017048:	2380      	movs	r3, #128	; 0x80
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	401e      	ands	r6, r3
 801704e:	2300      	movs	r3, #0
 8017050:	960f      	str	r6, [sp, #60]	; 0x3c
 8017052:	9310      	str	r3, [sp, #64]	; 0x40
 8017054:	2e00      	cmp	r6, #0
 8017056:	d100      	bne.n	801705a <_svfprintf_r+0xa26>
 8017058:	e73c      	b.n	8016ed4 <_svfprintf_r+0x8a0>
 801705a:	2d00      	cmp	r5, #0
 801705c:	dc27      	bgt.n	80170ae <_svfprintf_r+0xa7a>
 801705e:	2300      	movs	r3, #0
 8017060:	930f      	str	r3, [sp, #60]	; 0x3c
 8017062:	e737      	b.n	8016ed4 <_svfprintf_r+0x8a0>
 8017064:	9508      	str	r5, [sp, #32]
 8017066:	e7b7      	b.n	8016fd8 <_svfprintf_r+0x9a4>
 8017068:	2266      	movs	r2, #102	; 0x66
 801706a:	920e      	str	r2, [sp, #56]	; 0x38
 801706c:	e7eb      	b.n	8017046 <_svfprintf_r+0xa12>
 801706e:	9508      	str	r5, [sp, #32]
 8017070:	e7db      	b.n	801702a <_svfprintf_r+0x9f6>
 8017072:	42ab      	cmp	r3, r5
 8017074:	da0e      	bge.n	8017094 <_svfprintf_r+0xa60>
 8017076:	1aed      	subs	r5, r5, r3
 8017078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801707a:	785b      	ldrb	r3, [r3, #1]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d012      	beq.n	80170a6 <_svfprintf_r+0xa72>
 8017080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017082:	3301      	adds	r3, #1
 8017084:	930f      	str	r3, [sp, #60]	; 0x3c
 8017086:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017088:	3301      	adds	r3, #1
 801708a:	9313      	str	r3, [sp, #76]	; 0x4c
 801708c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	2bff      	cmp	r3, #255	; 0xff
 8017092:	d1ee      	bne.n	8017072 <_svfprintf_r+0xa3e>
 8017094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017098:	189b      	adds	r3, r3, r2
 801709a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801709c:	4353      	muls	r3, r2
 801709e:	9a08      	ldr	r2, [sp, #32]
 80170a0:	189b      	adds	r3, r3, r2
 80170a2:	9308      	str	r3, [sp, #32]
 80170a4:	e716      	b.n	8016ed4 <_svfprintf_r+0x8a0>
 80170a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170a8:	3301      	adds	r3, #1
 80170aa:	9310      	str	r3, [sp, #64]	; 0x40
 80170ac:	e7ee      	b.n	801708c <_svfprintf_r+0xa58>
 80170ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80170b2:	e7eb      	b.n	801708c <_svfprintf_r+0xa58>
 80170b4:	0022      	movs	r2, r4
 80170b6:	ca08      	ldmia	r2!, {r3}
 80170b8:	9212      	str	r2, [sp, #72]	; 0x48
 80170ba:	06b2      	lsls	r2, r6, #26
 80170bc:	d508      	bpl.n	80170d0 <_svfprintf_r+0xa9c>
 80170be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170c0:	601a      	str	r2, [r3, #0]
 80170c2:	17d2      	asrs	r2, r2, #31
 80170c4:	605a      	str	r2, [r3, #4]
 80170c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80170ca:	9309      	str	r3, [sp, #36]	; 0x24
 80170cc:	f7ff faeb 	bl	80166a6 <_svfprintf_r+0x72>
 80170d0:	06f2      	lsls	r2, r6, #27
 80170d2:	d502      	bpl.n	80170da <_svfprintf_r+0xaa6>
 80170d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170d6:	601a      	str	r2, [r3, #0]
 80170d8:	e7f5      	b.n	80170c6 <_svfprintf_r+0xa92>
 80170da:	0672      	lsls	r2, r6, #25
 80170dc:	d502      	bpl.n	80170e4 <_svfprintf_r+0xab0>
 80170de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170e0:	801a      	strh	r2, [r3, #0]
 80170e2:	e7f0      	b.n	80170c6 <_svfprintf_r+0xa92>
 80170e4:	05b2      	lsls	r2, r6, #22
 80170e6:	d5f5      	bpl.n	80170d4 <_svfprintf_r+0xaa0>
 80170e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170ea:	701a      	strb	r2, [r3, #0]
 80170ec:	e7eb      	b.n	80170c6 <_svfprintf_r+0xa92>
 80170ee:	2310      	movs	r3, #16
 80170f0:	431e      	orrs	r6, r3
 80170f2:	2220      	movs	r2, #32
 80170f4:	4032      	ands	r2, r6
 80170f6:	d025      	beq.n	8017144 <_svfprintf_r+0xb10>
 80170f8:	2307      	movs	r3, #7
 80170fa:	3407      	adds	r4, #7
 80170fc:	439c      	bics	r4, r3
 80170fe:	0023      	movs	r3, r4
 8017100:	3308      	adds	r3, #8
 8017102:	9312      	str	r3, [sp, #72]	; 0x48
 8017104:	6823      	ldr	r3, [r4, #0]
 8017106:	6864      	ldr	r4, [r4, #4]
 8017108:	9306      	str	r3, [sp, #24]
 801710a:	9407      	str	r4, [sp, #28]
 801710c:	4bc2      	ldr	r3, [pc, #776]	; (8017418 <_svfprintf_r+0xde4>)
 801710e:	401e      	ands	r6, r3
 8017110:	2300      	movs	r3, #0
 8017112:	221b      	movs	r2, #27
 8017114:	a91e      	add	r1, sp, #120	; 0x78
 8017116:	1852      	adds	r2, r2, r1
 8017118:	2100      	movs	r1, #0
 801711a:	7011      	strb	r1, [r2, #0]
 801711c:	9a08      	ldr	r2, [sp, #32]
 801711e:	3201      	adds	r2, #1
 8017120:	d100      	bne.n	8017124 <_svfprintf_r+0xaf0>
 8017122:	e0a6      	b.n	8017272 <_svfprintf_r+0xc3e>
 8017124:	0032      	movs	r2, r6
 8017126:	2180      	movs	r1, #128	; 0x80
 8017128:	9807      	ldr	r0, [sp, #28]
 801712a:	438e      	bics	r6, r1
 801712c:	9906      	ldr	r1, [sp, #24]
 801712e:	4301      	orrs	r1, r0
 8017130:	d000      	beq.n	8017134 <_svfprintf_r+0xb00>
 8017132:	e09e      	b.n	8017272 <_svfprintf_r+0xc3e>
 8017134:	9908      	ldr	r1, [sp, #32]
 8017136:	2900      	cmp	r1, #0
 8017138:	d100      	bne.n	801713c <_svfprintf_r+0xb08>
 801713a:	e125      	b.n	8017388 <_svfprintf_r+0xd54>
 801713c:	2b01      	cmp	r3, #1
 801713e:	d000      	beq.n	8017142 <_svfprintf_r+0xb0e>
 8017140:	e09a      	b.n	8017278 <_svfprintf_r+0xc44>
 8017142:	e518      	b.n	8016b76 <_svfprintf_r+0x542>
 8017144:	1d23      	adds	r3, r4, #4
 8017146:	9312      	str	r3, [sp, #72]	; 0x48
 8017148:	2310      	movs	r3, #16
 801714a:	4033      	ands	r3, r6
 801714c:	d003      	beq.n	8017156 <_svfprintf_r+0xb22>
 801714e:	6823      	ldr	r3, [r4, #0]
 8017150:	9306      	str	r3, [sp, #24]
 8017152:	9207      	str	r2, [sp, #28]
 8017154:	e7da      	b.n	801710c <_svfprintf_r+0xad8>
 8017156:	2240      	movs	r2, #64	; 0x40
 8017158:	4032      	ands	r2, r6
 801715a:	d004      	beq.n	8017166 <_svfprintf_r+0xb32>
 801715c:	6822      	ldr	r2, [r4, #0]
 801715e:	b292      	uxth	r2, r2
 8017160:	9206      	str	r2, [sp, #24]
 8017162:	9307      	str	r3, [sp, #28]
 8017164:	e7d2      	b.n	801710c <_svfprintf_r+0xad8>
 8017166:	2380      	movs	r3, #128	; 0x80
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	4033      	ands	r3, r6
 801716c:	d002      	beq.n	8017174 <_svfprintf_r+0xb40>
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	b2db      	uxtb	r3, r3
 8017172:	e7ed      	b.n	8017150 <_svfprintf_r+0xb1c>
 8017174:	6822      	ldr	r2, [r4, #0]
 8017176:	e7f3      	b.n	8017160 <_svfprintf_r+0xb2c>
 8017178:	1d23      	adds	r3, r4, #4
 801717a:	49a8      	ldr	r1, [pc, #672]	; (801741c <_svfprintf_r+0xde8>)
 801717c:	aa25      	add	r2, sp, #148	; 0x94
 801717e:	9312      	str	r3, [sp, #72]	; 0x48
 8017180:	6823      	ldr	r3, [r4, #0]
 8017182:	8011      	strh	r1, [r2, #0]
 8017184:	4aa6      	ldr	r2, [pc, #664]	; (8017420 <_svfprintf_r+0xdec>)
 8017186:	9306      	str	r3, [sp, #24]
 8017188:	2300      	movs	r3, #0
 801718a:	921e      	str	r2, [sp, #120]	; 0x78
 801718c:	2278      	movs	r2, #120	; 0x78
 801718e:	9307      	str	r3, [sp, #28]
 8017190:	3302      	adds	r3, #2
 8017192:	431e      	orrs	r6, r3
 8017194:	920e      	str	r2, [sp, #56]	; 0x38
 8017196:	e7bc      	b.n	8017112 <_svfprintf_r+0xade>
 8017198:	1d23      	adds	r3, r4, #4
 801719a:	9312      	str	r3, [sp, #72]	; 0x48
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	2400      	movs	r4, #0
 80171a0:	9309      	str	r3, [sp, #36]	; 0x24
 80171a2:	231b      	movs	r3, #27
 80171a4:	aa1e      	add	r2, sp, #120	; 0x78
 80171a6:	189b      	adds	r3, r3, r2
 80171a8:	701c      	strb	r4, [r3, #0]
 80171aa:	9b08      	ldr	r3, [sp, #32]
 80171ac:	3301      	adds	r3, #1
 80171ae:	d00e      	beq.n	80171ce <_svfprintf_r+0xb9a>
 80171b0:	9a08      	ldr	r2, [sp, #32]
 80171b2:	0021      	movs	r1, r4
 80171b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171b6:	f001 ff79 	bl	80190ac <memchr>
 80171ba:	900c      	str	r0, [sp, #48]	; 0x30
 80171bc:	42a0      	cmp	r0, r4
 80171be:	d100      	bne.n	80171c2 <_svfprintf_r+0xb8e>
 80171c0:	e100      	b.n	80173c4 <_svfprintf_r+0xd90>
 80171c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171c4:	1a83      	subs	r3, r0, r2
 80171c6:	9308      	str	r3, [sp, #32]
 80171c8:	940c      	str	r4, [sp, #48]	; 0x30
 80171ca:	0023      	movs	r3, r4
 80171cc:	e527      	b.n	8016c1e <_svfprintf_r+0x5ea>
 80171ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171d0:	f7e8 ffa2 	bl	8000118 <strlen>
 80171d4:	9008      	str	r0, [sp, #32]
 80171d6:	e7f7      	b.n	80171c8 <_svfprintf_r+0xb94>
 80171d8:	2310      	movs	r3, #16
 80171da:	431e      	orrs	r6, r3
 80171dc:	2220      	movs	r2, #32
 80171de:	4032      	ands	r2, r6
 80171e0:	d00b      	beq.n	80171fa <_svfprintf_r+0xbc6>
 80171e2:	2307      	movs	r3, #7
 80171e4:	3407      	adds	r4, #7
 80171e6:	439c      	bics	r4, r3
 80171e8:	0023      	movs	r3, r4
 80171ea:	3308      	adds	r3, #8
 80171ec:	9312      	str	r3, [sp, #72]	; 0x48
 80171ee:	6823      	ldr	r3, [r4, #0]
 80171f0:	6864      	ldr	r4, [r4, #4]
 80171f2:	9306      	str	r3, [sp, #24]
 80171f4:	9407      	str	r4, [sp, #28]
 80171f6:	2301      	movs	r3, #1
 80171f8:	e78b      	b.n	8017112 <_svfprintf_r+0xade>
 80171fa:	1d23      	adds	r3, r4, #4
 80171fc:	9312      	str	r3, [sp, #72]	; 0x48
 80171fe:	2310      	movs	r3, #16
 8017200:	4033      	ands	r3, r6
 8017202:	d003      	beq.n	801720c <_svfprintf_r+0xbd8>
 8017204:	6823      	ldr	r3, [r4, #0]
 8017206:	9306      	str	r3, [sp, #24]
 8017208:	9207      	str	r2, [sp, #28]
 801720a:	e7f4      	b.n	80171f6 <_svfprintf_r+0xbc2>
 801720c:	2240      	movs	r2, #64	; 0x40
 801720e:	4032      	ands	r2, r6
 8017210:	d004      	beq.n	801721c <_svfprintf_r+0xbe8>
 8017212:	6822      	ldr	r2, [r4, #0]
 8017214:	b292      	uxth	r2, r2
 8017216:	9206      	str	r2, [sp, #24]
 8017218:	9307      	str	r3, [sp, #28]
 801721a:	e7ec      	b.n	80171f6 <_svfprintf_r+0xbc2>
 801721c:	2380      	movs	r3, #128	; 0x80
 801721e:	009b      	lsls	r3, r3, #2
 8017220:	4033      	ands	r3, r6
 8017222:	d002      	beq.n	801722a <_svfprintf_r+0xbf6>
 8017224:	6823      	ldr	r3, [r4, #0]
 8017226:	b2db      	uxtb	r3, r3
 8017228:	e7ed      	b.n	8017206 <_svfprintf_r+0xbd2>
 801722a:	6822      	ldr	r2, [r4, #0]
 801722c:	e7f3      	b.n	8017216 <_svfprintf_r+0xbe2>
 801722e:	4b7c      	ldr	r3, [pc, #496]	; (8017420 <_svfprintf_r+0xdec>)
 8017230:	f7ff fad9 	bl	80167e6 <_svfprintf_r+0x1b2>
 8017234:	1d23      	adds	r3, r4, #4
 8017236:	9312      	str	r3, [sp, #72]	; 0x48
 8017238:	2310      	movs	r3, #16
 801723a:	4033      	ands	r3, r6
 801723c:	d004      	beq.n	8017248 <_svfprintf_r+0xc14>
 801723e:	6823      	ldr	r3, [r4, #0]
 8017240:	9306      	str	r3, [sp, #24]
 8017242:	9207      	str	r2, [sp, #28]
 8017244:	f7ff fadf 	bl	8016806 <_svfprintf_r+0x1d2>
 8017248:	2240      	movs	r2, #64	; 0x40
 801724a:	4032      	ands	r2, r6
 801724c:	d005      	beq.n	801725a <_svfprintf_r+0xc26>
 801724e:	6822      	ldr	r2, [r4, #0]
 8017250:	b292      	uxth	r2, r2
 8017252:	9206      	str	r2, [sp, #24]
 8017254:	9307      	str	r3, [sp, #28]
 8017256:	f7ff fad6 	bl	8016806 <_svfprintf_r+0x1d2>
 801725a:	2380      	movs	r3, #128	; 0x80
 801725c:	009b      	lsls	r3, r3, #2
 801725e:	4033      	ands	r3, r6
 8017260:	d002      	beq.n	8017268 <_svfprintf_r+0xc34>
 8017262:	6823      	ldr	r3, [r4, #0]
 8017264:	b2db      	uxtb	r3, r3
 8017266:	e7eb      	b.n	8017240 <_svfprintf_r+0xc0c>
 8017268:	6822      	ldr	r2, [r4, #0]
 801726a:	e7f2      	b.n	8017252 <_svfprintf_r+0xc1e>
 801726c:	0032      	movs	r2, r6
 801726e:	2301      	movs	r3, #1
 8017270:	e759      	b.n	8017126 <_svfprintf_r+0xaf2>
 8017272:	2b01      	cmp	r3, #1
 8017274:	d100      	bne.n	8017278 <_svfprintf_r+0xc44>
 8017276:	e476      	b.n	8016b66 <_svfprintf_r+0x532>
 8017278:	2b02      	cmp	r3, #2
 801727a:	d06b      	beq.n	8017354 <_svfprintf_r+0xd20>
 801727c:	2507      	movs	r5, #7
 801727e:	ab58      	add	r3, sp, #352	; 0x160
 8017280:	1e5a      	subs	r2, r3, #1
 8017282:	9209      	str	r2, [sp, #36]	; 0x24
 8017284:	9a06      	ldr	r2, [sp, #24]
 8017286:	1e59      	subs	r1, r3, #1
 8017288:	402a      	ands	r2, r5
 801728a:	3230      	adds	r2, #48	; 0x30
 801728c:	700a      	strb	r2, [r1, #0]
 801728e:	9907      	ldr	r1, [sp, #28]
 8017290:	074c      	lsls	r4, r1, #29
 8017292:	9906      	ldr	r1, [sp, #24]
 8017294:	08c8      	lsrs	r0, r1, #3
 8017296:	9907      	ldr	r1, [sp, #28]
 8017298:	4304      	orrs	r4, r0
 801729a:	08c9      	lsrs	r1, r1, #3
 801729c:	9107      	str	r1, [sp, #28]
 801729e:	0021      	movs	r1, r4
 80172a0:	9807      	ldr	r0, [sp, #28]
 80172a2:	9406      	str	r4, [sp, #24]
 80172a4:	4301      	orrs	r1, r0
 80172a6:	d111      	bne.n	80172cc <_svfprintf_r+0xc98>
 80172a8:	07f1      	lsls	r1, r6, #31
 80172aa:	d502      	bpl.n	80172b2 <_svfprintf_r+0xc7e>
 80172ac:	3b02      	subs	r3, #2
 80172ae:	2a30      	cmp	r2, #48	; 0x30
 80172b0:	d173      	bne.n	801739a <_svfprintf_r+0xd66>
 80172b2:	9b08      	ldr	r3, [sp, #32]
 80172b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80172b8:	ab58      	add	r3, sp, #352	; 0x160
 80172ba:	1a9b      	subs	r3, r3, r2
 80172bc:	9308      	str	r3, [sp, #32]
 80172be:	2300      	movs	r3, #0
 80172c0:	930c      	str	r3, [sp, #48]	; 0x30
 80172c2:	9310      	str	r3, [sp, #64]	; 0x40
 80172c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80172c6:	001d      	movs	r5, r3
 80172c8:	f7ff fb4b 	bl	8016962 <_svfprintf_r+0x32e>
 80172cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ce:	e7d7      	b.n	8017280 <_svfprintf_r+0xc4c>
 80172d0:	2480      	movs	r4, #128	; 0x80
 80172d2:	2300      	movs	r3, #0
 80172d4:	00e4      	lsls	r4, r4, #3
 80172d6:	930d      	str	r3, [sp, #52]	; 0x34
 80172d8:	4034      	ands	r4, r6
 80172da:	ab58      	add	r3, sp, #352	; 0x160
 80172dc:	3b01      	subs	r3, #1
 80172de:	9309      	str	r3, [sp, #36]	; 0x24
 80172e0:	220a      	movs	r2, #10
 80172e2:	9806      	ldr	r0, [sp, #24]
 80172e4:	9907      	ldr	r1, [sp, #28]
 80172e6:	2300      	movs	r3, #0
 80172e8:	f7e9 f92a 	bl	8000540 <__aeabi_uldivmod>
 80172ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ee:	3230      	adds	r2, #48	; 0x30
 80172f0:	701a      	strb	r2, [r3, #0]
 80172f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172f4:	3301      	adds	r3, #1
 80172f6:	930d      	str	r3, [sp, #52]	; 0x34
 80172f8:	2c00      	cmp	r4, #0
 80172fa:	d01d      	beq.n	8017338 <_svfprintf_r+0xd04>
 80172fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80172fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	429a      	cmp	r2, r3
 8017304:	d118      	bne.n	8017338 <_svfprintf_r+0xd04>
 8017306:	2aff      	cmp	r2, #255	; 0xff
 8017308:	d016      	beq.n	8017338 <_svfprintf_r+0xd04>
 801730a:	9b07      	ldr	r3, [sp, #28]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d102      	bne.n	8017316 <_svfprintf_r+0xce2>
 8017310:	9b06      	ldr	r3, [sp, #24]
 8017312:	2b09      	cmp	r3, #9
 8017314:	d910      	bls.n	8017338 <_svfprintf_r+0xd04>
 8017316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017318:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801731a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801731c:	1a9b      	subs	r3, r3, r2
 801731e:	0018      	movs	r0, r3
 8017320:	9309      	str	r3, [sp, #36]	; 0x24
 8017322:	f7fe fa52 	bl	80157ca <strncpy>
 8017326:	2200      	movs	r2, #0
 8017328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801732a:	920d      	str	r2, [sp, #52]	; 0x34
 801732c:	785b      	ldrb	r3, [r3, #1]
 801732e:	1e5a      	subs	r2, r3, #1
 8017330:	4193      	sbcs	r3, r2
 8017332:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017334:	18d3      	adds	r3, r2, r3
 8017336:	9313      	str	r3, [sp, #76]	; 0x4c
 8017338:	220a      	movs	r2, #10
 801733a:	9806      	ldr	r0, [sp, #24]
 801733c:	9907      	ldr	r1, [sp, #28]
 801733e:	2300      	movs	r3, #0
 8017340:	f7e9 f8fe 	bl	8000540 <__aeabi_uldivmod>
 8017344:	9006      	str	r0, [sp, #24]
 8017346:	9107      	str	r1, [sp, #28]
 8017348:	9b06      	ldr	r3, [sp, #24]
 801734a:	9a07      	ldr	r2, [sp, #28]
 801734c:	4313      	orrs	r3, r2
 801734e:	d0b0      	beq.n	80172b2 <_svfprintf_r+0xc7e>
 8017350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017352:	e7c3      	b.n	80172dc <_svfprintf_r+0xca8>
 8017354:	200f      	movs	r0, #15
 8017356:	ab58      	add	r3, sp, #352	; 0x160
 8017358:	9309      	str	r3, [sp, #36]	; 0x24
 801735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801735c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801735e:	3b01      	subs	r3, #1
 8017360:	9309      	str	r3, [sp, #36]	; 0x24
 8017362:	9b06      	ldr	r3, [sp, #24]
 8017364:	4003      	ands	r3, r0
 8017366:	5cd3      	ldrb	r3, [r2, r3]
 8017368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801736a:	7013      	strb	r3, [r2, #0]
 801736c:	9b07      	ldr	r3, [sp, #28]
 801736e:	0719      	lsls	r1, r3, #28
 8017370:	9b06      	ldr	r3, [sp, #24]
 8017372:	091a      	lsrs	r2, r3, #4
 8017374:	9b07      	ldr	r3, [sp, #28]
 8017376:	4311      	orrs	r1, r2
 8017378:	091b      	lsrs	r3, r3, #4
 801737a:	9307      	str	r3, [sp, #28]
 801737c:	000b      	movs	r3, r1
 801737e:	9a07      	ldr	r2, [sp, #28]
 8017380:	9106      	str	r1, [sp, #24]
 8017382:	4313      	orrs	r3, r2
 8017384:	d1e9      	bne.n	801735a <_svfprintf_r+0xd26>
 8017386:	e794      	b.n	80172b2 <_svfprintf_r+0xc7e>
 8017388:	a958      	add	r1, sp, #352	; 0x160
 801738a:	9109      	str	r1, [sp, #36]	; 0x24
 801738c:	2b00      	cmp	r3, #0
 801738e:	d190      	bne.n	80172b2 <_svfprintf_r+0xc7e>
 8017390:	07d3      	lsls	r3, r2, #31
 8017392:	d58e      	bpl.n	80172b2 <_svfprintf_r+0xc7e>
 8017394:	23e7      	movs	r3, #231	; 0xe7
 8017396:	aa1e      	add	r2, sp, #120	; 0x78
 8017398:	189b      	adds	r3, r3, r2
 801739a:	2230      	movs	r2, #48	; 0x30
 801739c:	f7ff fbf0 	bl	8016b80 <_svfprintf_r+0x54c>
 80173a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d100      	bne.n	80173a8 <_svfprintf_r+0xd74>
 80173a6:	e38a      	b.n	8017abe <_svfprintf_r+0x148a>
 80173a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173aa:	ab3f      	add	r3, sp, #252	; 0xfc
 80173ac:	701a      	strb	r2, [r3, #0]
 80173ae:	221b      	movs	r2, #27
 80173b0:	2000      	movs	r0, #0
 80173b2:	a91e      	add	r1, sp, #120	; 0x78
 80173b4:	1852      	adds	r2, r2, r1
 80173b6:	7010      	strb	r0, [r2, #0]
 80173b8:	9412      	str	r4, [sp, #72]	; 0x48
 80173ba:	f7ff faca 	bl	8016952 <_svfprintf_r+0x31e>
 80173be:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80173c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80173c2:	e592      	b.n	8016eea <_svfprintf_r+0x8b6>
 80173c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173c6:	e42a      	b.n	8016c1e <_svfprintf_r+0x5ea>
 80173c8:	2010      	movs	r0, #16
 80173ca:	1812      	adds	r2, r2, r0
 80173cc:	6078      	str	r0, [r7, #4]
 80173ce:	922e      	str	r2, [sp, #184]	; 0xb8
 80173d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80173d2:	2b07      	cmp	r3, #7
 80173d4:	dd08      	ble.n	80173e8 <_svfprintf_r+0xdb4>
 80173d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80173d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80173da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80173dc:	f002 fa7e 	bl	80198dc <__ssprint_r>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d000      	beq.n	80173e6 <_svfprintf_r+0xdb2>
 80173e4:	e34a      	b.n	8017a7c <_svfprintf_r+0x1448>
 80173e6:	a92f      	add	r1, sp, #188	; 0xbc
 80173e8:	3c10      	subs	r4, #16
 80173ea:	000f      	movs	r7, r1
 80173ec:	f7ff fad8 	bl	80169a0 <_svfprintf_r+0x36c>
 80173f0:	2010      	movs	r0, #16
 80173f2:	1812      	adds	r2, r2, r0
 80173f4:	6078      	str	r0, [r7, #4]
 80173f6:	922e      	str	r2, [sp, #184]	; 0xb8
 80173f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80173fa:	2b07      	cmp	r3, #7
 80173fc:	dd08      	ble.n	8017410 <_svfprintf_r+0xddc>
 80173fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8017400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017402:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017404:	f002 fa6a 	bl	80198dc <__ssprint_r>
 8017408:	2800      	cmp	r0, #0
 801740a:	d000      	beq.n	801740e <_svfprintf_r+0xdda>
 801740c:	e336      	b.n	8017a7c <_svfprintf_r+0x1448>
 801740e:	a92f      	add	r1, sp, #188	; 0xbc
 8017410:	3c10      	subs	r4, #16
 8017412:	000f      	movs	r7, r1
 8017414:	f7ff fb24 	bl	8016a60 <_svfprintf_r+0x42c>
 8017418:	fffffbff 	.word	0xfffffbff
 801741c:	00007830 	.word	0x00007830
 8017420:	0801d2d0 	.word	0x0801d2d0
 8017424:	2010      	movs	r0, #16
 8017426:	1812      	adds	r2, r2, r0
 8017428:	6078      	str	r0, [r7, #4]
 801742a:	922e      	str	r2, [sp, #184]	; 0xb8
 801742c:	932d      	str	r3, [sp, #180]	; 0xb4
 801742e:	2b07      	cmp	r3, #7
 8017430:	dd08      	ble.n	8017444 <_svfprintf_r+0xe10>
 8017432:	aa2c      	add	r2, sp, #176	; 0xb0
 8017434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017436:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017438:	f002 fa50 	bl	80198dc <__ssprint_r>
 801743c:	2800      	cmp	r0, #0
 801743e:	d000      	beq.n	8017442 <_svfprintf_r+0xe0e>
 8017440:	e31c      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017442:	a92f      	add	r1, sp, #188	; 0xbc
 8017444:	3c10      	subs	r4, #16
 8017446:	000f      	movs	r7, r1
 8017448:	f7ff fb2c 	bl	8016aa4 <_svfprintf_r+0x470>
 801744c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801744e:	2b65      	cmp	r3, #101	; 0x65
 8017450:	dc00      	bgt.n	8017454 <_svfprintf_r+0xe20>
 8017452:	e259      	b.n	8017908 <_svfprintf_r+0x12d4>
 8017454:	2200      	movs	r2, #0
 8017456:	2300      	movs	r3, #0
 8017458:	981a      	ldr	r0, [sp, #104]	; 0x68
 801745a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801745c:	f7e8 fffe 	bl	800045c <__aeabi_dcmpeq>
 8017460:	2800      	cmp	r0, #0
 8017462:	d07c      	beq.n	801755e <_svfprintf_r+0xf2a>
 8017464:	4b81      	ldr	r3, [pc, #516]	; (801766c <_svfprintf_r+0x1038>)
 8017466:	603b      	str	r3, [r7, #0]
 8017468:	2301      	movs	r3, #1
 801746a:	607b      	str	r3, [r7, #4]
 801746c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801746e:	3708      	adds	r7, #8
 8017470:	3301      	adds	r3, #1
 8017472:	932e      	str	r3, [sp, #184]	; 0xb8
 8017474:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017476:	9308      	str	r3, [sp, #32]
 8017478:	3301      	adds	r3, #1
 801747a:	932d      	str	r3, [sp, #180]	; 0xb4
 801747c:	2b07      	cmp	r3, #7
 801747e:	dd08      	ble.n	8017492 <_svfprintf_r+0xe5e>
 8017480:	aa2c      	add	r2, sp, #176	; 0xb0
 8017482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017484:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017486:	f002 fa29 	bl	80198dc <__ssprint_r>
 801748a:	2800      	cmp	r0, #0
 801748c:	d000      	beq.n	8017490 <_svfprintf_r+0xe5c>
 801748e:	e2f5      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017490:	af2f      	add	r7, sp, #188	; 0xbc
 8017492:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017496:	4293      	cmp	r3, r2
 8017498:	db01      	blt.n	801749e <_svfprintf_r+0xe6a>
 801749a:	07f3      	lsls	r3, r6, #31
 801749c:	d51d      	bpl.n	80174da <_svfprintf_r+0xea6>
 801749e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80174a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80174a2:	4694      	mov	ip, r2
 80174a4:	603b      	str	r3, [r7, #0]
 80174a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174a8:	607b      	str	r3, [r7, #4]
 80174aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80174ac:	3708      	adds	r7, #8
 80174ae:	4463      	add	r3, ip
 80174b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80174b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80174b4:	9308      	str	r3, [sp, #32]
 80174b6:	3301      	adds	r3, #1
 80174b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80174ba:	2b07      	cmp	r3, #7
 80174bc:	dd08      	ble.n	80174d0 <_svfprintf_r+0xe9c>
 80174be:	aa2c      	add	r2, sp, #176	; 0xb0
 80174c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174c4:	f002 fa0a 	bl	80198dc <__ssprint_r>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d000      	beq.n	80174ce <_svfprintf_r+0xe9a>
 80174cc:	e2d6      	b.n	8017a7c <_svfprintf_r+0x1448>
 80174ce:	af2f      	add	r7, sp, #188	; 0xbc
 80174d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174d2:	2510      	movs	r5, #16
 80174d4:	1e5c      	subs	r4, r3, #1
 80174d6:	2c00      	cmp	r4, #0
 80174d8:	dc2f      	bgt.n	801753a <_svfprintf_r+0xf06>
 80174da:	0773      	lsls	r3, r6, #29
 80174dc:	d500      	bpl.n	80174e0 <_svfprintf_r+0xeac>
 80174de:	e2af      	b.n	8017a40 <_svfprintf_r+0x140c>
 80174e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80174e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174e4:	4293      	cmp	r3, r2
 80174e6:	da00      	bge.n	80174ea <_svfprintf_r+0xeb6>
 80174e8:	0013      	movs	r3, r2
 80174ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80174ec:	18d3      	adds	r3, r2, r3
 80174ee:	9315      	str	r3, [sp, #84]	; 0x54
 80174f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80174f2:	9308      	str	r3, [sp, #32]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d007      	beq.n	8017508 <_svfprintf_r+0xed4>
 80174f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80174fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174fe:	f002 f9ed 	bl	80198dc <__ssprint_r>
 8017502:	2800      	cmp	r0, #0
 8017504:	d000      	beq.n	8017508 <_svfprintf_r+0xed4>
 8017506:	e2b9      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017508:	2300      	movs	r3, #0
 801750a:	932d      	str	r3, [sp, #180]	; 0xb4
 801750c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801750e:	2b00      	cmp	r3, #0
 8017510:	d000      	beq.n	8017514 <_svfprintf_r+0xee0>
 8017512:	e2cf      	b.n	8017ab4 <_svfprintf_r+0x1480>
 8017514:	af2f      	add	r7, sp, #188	; 0xbc
 8017516:	e5d6      	b.n	80170c6 <_svfprintf_r+0xa92>
 8017518:	3210      	adds	r2, #16
 801751a:	607d      	str	r5, [r7, #4]
 801751c:	922e      	str	r2, [sp, #184]	; 0xb8
 801751e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017520:	2b07      	cmp	r3, #7
 8017522:	dd08      	ble.n	8017536 <_svfprintf_r+0xf02>
 8017524:	aa2c      	add	r2, sp, #176	; 0xb0
 8017526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017528:	980a      	ldr	r0, [sp, #40]	; 0x28
 801752a:	f002 f9d7 	bl	80198dc <__ssprint_r>
 801752e:	2800      	cmp	r0, #0
 8017530:	d000      	beq.n	8017534 <_svfprintf_r+0xf00>
 8017532:	e2a3      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017534:	a92f      	add	r1, sp, #188	; 0xbc
 8017536:	000f      	movs	r7, r1
 8017538:	3c10      	subs	r4, #16
 801753a:	0039      	movs	r1, r7
 801753c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801753e:	484c      	ldr	r0, [pc, #304]	; (8017670 <_svfprintf_r+0x103c>)
 8017540:	9308      	str	r3, [sp, #32]
 8017542:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017544:	3301      	adds	r3, #1
 8017546:	3108      	adds	r1, #8
 8017548:	6038      	str	r0, [r7, #0]
 801754a:	2c10      	cmp	r4, #16
 801754c:	dce4      	bgt.n	8017518 <_svfprintf_r+0xee4>
 801754e:	607c      	str	r4, [r7, #4]
 8017550:	18a4      	adds	r4, r4, r2
 8017552:	942e      	str	r4, [sp, #184]	; 0xb8
 8017554:	932d      	str	r3, [sp, #180]	; 0xb4
 8017556:	000f      	movs	r7, r1
 8017558:	2b07      	cmp	r3, #7
 801755a:	ddbe      	ble.n	80174da <_svfprintf_r+0xea6>
 801755c:	e06a      	b.n	8017634 <_svfprintf_r+0x1000>
 801755e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017560:	2b00      	cmp	r3, #0
 8017562:	dd00      	ble.n	8017566 <_svfprintf_r+0xf32>
 8017564:	e086      	b.n	8017674 <_svfprintf_r+0x1040>
 8017566:	4b41      	ldr	r3, [pc, #260]	; (801766c <_svfprintf_r+0x1038>)
 8017568:	603b      	str	r3, [r7, #0]
 801756a:	2301      	movs	r3, #1
 801756c:	607b      	str	r3, [r7, #4]
 801756e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017570:	3708      	adds	r7, #8
 8017572:	3301      	adds	r3, #1
 8017574:	932e      	str	r3, [sp, #184]	; 0xb8
 8017576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017578:	9308      	str	r3, [sp, #32]
 801757a:	3301      	adds	r3, #1
 801757c:	932d      	str	r3, [sp, #180]	; 0xb4
 801757e:	2b07      	cmp	r3, #7
 8017580:	dd08      	ble.n	8017594 <_svfprintf_r+0xf60>
 8017582:	aa2c      	add	r2, sp, #176	; 0xb0
 8017584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017586:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017588:	f002 f9a8 	bl	80198dc <__ssprint_r>
 801758c:	2800      	cmp	r0, #0
 801758e:	d000      	beq.n	8017592 <_svfprintf_r+0xf5e>
 8017590:	e274      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017592:	af2f      	add	r7, sp, #188	; 0xbc
 8017594:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017596:	2b00      	cmp	r3, #0
 8017598:	d104      	bne.n	80175a4 <_svfprintf_r+0xf70>
 801759a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801759c:	2b00      	cmp	r3, #0
 801759e:	d101      	bne.n	80175a4 <_svfprintf_r+0xf70>
 80175a0:	07f3      	lsls	r3, r6, #31
 80175a2:	d59a      	bpl.n	80174da <_svfprintf_r+0xea6>
 80175a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80175a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80175a8:	4694      	mov	ip, r2
 80175aa:	603b      	str	r3, [r7, #0]
 80175ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175ae:	607b      	str	r3, [r7, #4]
 80175b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80175b2:	3708      	adds	r7, #8
 80175b4:	4463      	add	r3, ip
 80175b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80175b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80175ba:	9308      	str	r3, [sp, #32]
 80175bc:	3301      	adds	r3, #1
 80175be:	932d      	str	r3, [sp, #180]	; 0xb4
 80175c0:	2b07      	cmp	r3, #7
 80175c2:	dd08      	ble.n	80175d6 <_svfprintf_r+0xfa2>
 80175c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80175c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80175ca:	f002 f987 	bl	80198dc <__ssprint_r>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	d000      	beq.n	80175d4 <_svfprintf_r+0xfa0>
 80175d2:	e253      	b.n	8017a7c <_svfprintf_r+0x1448>
 80175d4:	af2f      	add	r7, sp, #188	; 0xbc
 80175d6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80175d8:	2c00      	cmp	r4, #0
 80175da:	da1a      	bge.n	8017612 <_svfprintf_r+0xfde>
 80175dc:	0039      	movs	r1, r7
 80175de:	2510      	movs	r5, #16
 80175e0:	4264      	negs	r4, r4
 80175e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80175e4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80175e6:	9308      	str	r3, [sp, #32]
 80175e8:	1c5a      	adds	r2, r3, #1
 80175ea:	4b21      	ldr	r3, [pc, #132]	; (8017670 <_svfprintf_r+0x103c>)
 80175ec:	3708      	adds	r7, #8
 80175ee:	600b      	str	r3, [r1, #0]
 80175f0:	2c10      	cmp	r4, #16
 80175f2:	dc29      	bgt.n	8017648 <_svfprintf_r+0x1014>
 80175f4:	604c      	str	r4, [r1, #4]
 80175f6:	1824      	adds	r4, r4, r0
 80175f8:	942e      	str	r4, [sp, #184]	; 0xb8
 80175fa:	922d      	str	r2, [sp, #180]	; 0xb4
 80175fc:	2a07      	cmp	r2, #7
 80175fe:	dd08      	ble.n	8017612 <_svfprintf_r+0xfde>
 8017600:	aa2c      	add	r2, sp, #176	; 0xb0
 8017602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017604:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017606:	f002 f969 	bl	80198dc <__ssprint_r>
 801760a:	2800      	cmp	r0, #0
 801760c:	d000      	beq.n	8017610 <_svfprintf_r+0xfdc>
 801760e:	e235      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017610:	af2f      	add	r7, sp, #188	; 0xbc
 8017612:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017616:	468c      	mov	ip, r1
 8017618:	603b      	str	r3, [r7, #0]
 801761a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801761c:	607b      	str	r3, [r7, #4]
 801761e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017620:	4463      	add	r3, ip
 8017622:	932e      	str	r3, [sp, #184]	; 0xb8
 8017624:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017626:	1c5a      	adds	r2, r3, #1
 8017628:	9308      	str	r3, [sp, #32]
 801762a:	922d      	str	r2, [sp, #180]	; 0xb4
 801762c:	2a07      	cmp	r2, #7
 801762e:	dc01      	bgt.n	8017634 <_svfprintf_r+0x1000>
 8017630:	f7ff fa6c 	bl	8016b0c <_svfprintf_r+0x4d8>
 8017634:	aa2c      	add	r2, sp, #176	; 0xb0
 8017636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017638:	980a      	ldr	r0, [sp, #40]	; 0x28
 801763a:	f002 f94f 	bl	80198dc <__ssprint_r>
 801763e:	2800      	cmp	r0, #0
 8017640:	d000      	beq.n	8017644 <_svfprintf_r+0x1010>
 8017642:	e21b      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017644:	af2f      	add	r7, sp, #188	; 0xbc
 8017646:	e748      	b.n	80174da <_svfprintf_r+0xea6>
 8017648:	3010      	adds	r0, #16
 801764a:	604d      	str	r5, [r1, #4]
 801764c:	902e      	str	r0, [sp, #184]	; 0xb8
 801764e:	922d      	str	r2, [sp, #180]	; 0xb4
 8017650:	2a07      	cmp	r2, #7
 8017652:	dd08      	ble.n	8017666 <_svfprintf_r+0x1032>
 8017654:	aa2c      	add	r2, sp, #176	; 0xb0
 8017656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017658:	980a      	ldr	r0, [sp, #40]	; 0x28
 801765a:	f002 f93f 	bl	80198dc <__ssprint_r>
 801765e:	2800      	cmp	r0, #0
 8017660:	d000      	beq.n	8017664 <_svfprintf_r+0x1030>
 8017662:	e20b      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017664:	af2f      	add	r7, sp, #188	; 0xbc
 8017666:	3c10      	subs	r4, #16
 8017668:	0039      	movs	r1, r7
 801766a:	e7ba      	b.n	80175e2 <_svfprintf_r+0xfae>
 801766c:	0801d2f2 	.word	0x0801d2f2
 8017670:	0801d304 	.word	0x0801d304
 8017674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017676:	002c      	movs	r4, r5
 8017678:	429d      	cmp	r5, r3
 801767a:	dd00      	ble.n	801767e <_svfprintf_r+0x104a>
 801767c:	001c      	movs	r4, r3
 801767e:	2c00      	cmp	r4, #0
 8017680:	dd15      	ble.n	80176ae <_svfprintf_r+0x107a>
 8017682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017684:	607c      	str	r4, [r7, #4]
 8017686:	603b      	str	r3, [r7, #0]
 8017688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801768a:	3708      	adds	r7, #8
 801768c:	18e3      	adds	r3, r4, r3
 801768e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017690:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017692:	9308      	str	r3, [sp, #32]
 8017694:	3301      	adds	r3, #1
 8017696:	932d      	str	r3, [sp, #180]	; 0xb4
 8017698:	2b07      	cmp	r3, #7
 801769a:	dd08      	ble.n	80176ae <_svfprintf_r+0x107a>
 801769c:	aa2c      	add	r2, sp, #176	; 0xb0
 801769e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176a2:	f002 f91b 	bl	80198dc <__ssprint_r>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d000      	beq.n	80176ac <_svfprintf_r+0x1078>
 80176aa:	e1e7      	b.n	8017a7c <_svfprintf_r+0x1448>
 80176ac:	af2f      	add	r7, sp, #188	; 0xbc
 80176ae:	43e3      	mvns	r3, r4
 80176b0:	17db      	asrs	r3, r3, #31
 80176b2:	401c      	ands	r4, r3
 80176b4:	1b2c      	subs	r4, r5, r4
 80176b6:	2c00      	cmp	r4, #0
 80176b8:	dd1a      	ble.n	80176f0 <_svfprintf_r+0x10bc>
 80176ba:	0039      	movs	r1, r7
 80176bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176be:	48d4      	ldr	r0, [pc, #848]	; (8017a10 <_svfprintf_r+0x13dc>)
 80176c0:	9308      	str	r3, [sp, #32]
 80176c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80176c4:	3301      	adds	r3, #1
 80176c6:	3108      	adds	r1, #8
 80176c8:	6038      	str	r0, [r7, #0]
 80176ca:	2c10      	cmp	r4, #16
 80176cc:	dd00      	ble.n	80176d0 <_svfprintf_r+0x109c>
 80176ce:	e089      	b.n	80177e4 <_svfprintf_r+0x11b0>
 80176d0:	607c      	str	r4, [r7, #4]
 80176d2:	18a4      	adds	r4, r4, r2
 80176d4:	942e      	str	r4, [sp, #184]	; 0xb8
 80176d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80176d8:	000f      	movs	r7, r1
 80176da:	2b07      	cmp	r3, #7
 80176dc:	dd08      	ble.n	80176f0 <_svfprintf_r+0x10bc>
 80176de:	aa2c      	add	r2, sp, #176	; 0xb0
 80176e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176e4:	f002 f8fa 	bl	80198dc <__ssprint_r>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d000      	beq.n	80176ee <_svfprintf_r+0x10ba>
 80176ec:	e1c6      	b.n	8017a7c <_svfprintf_r+0x1448>
 80176ee:	af2f      	add	r7, sp, #188	; 0xbc
 80176f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176f2:	195d      	adds	r5, r3, r5
 80176f4:	0573      	lsls	r3, r6, #21
 80176f6:	d50d      	bpl.n	8017714 <_svfprintf_r+0x10e0>
 80176f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d000      	beq.n	8017700 <_svfprintf_r+0x10cc>
 80176fe:	e084      	b.n	801780a <_svfprintf_r+0x11d6>
 8017700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017702:	2b00      	cmp	r3, #0
 8017704:	d000      	beq.n	8017708 <_svfprintf_r+0x10d4>
 8017706:	e083      	b.n	8017810 <_svfprintf_r+0x11dc>
 8017708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801770a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801770c:	189b      	adds	r3, r3, r2
 801770e:	429d      	cmp	r5, r3
 8017710:	d900      	bls.n	8017714 <_svfprintf_r+0x10e0>
 8017712:	001d      	movs	r5, r3
 8017714:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017718:	4293      	cmp	r3, r2
 801771a:	db01      	blt.n	8017720 <_svfprintf_r+0x10ec>
 801771c:	07f3      	lsls	r3, r6, #31
 801771e:	d518      	bpl.n	8017752 <_svfprintf_r+0x111e>
 8017720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017722:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017724:	4694      	mov	ip, r2
 8017726:	603b      	str	r3, [r7, #0]
 8017728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801772a:	607b      	str	r3, [r7, #4]
 801772c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801772e:	3708      	adds	r7, #8
 8017730:	4463      	add	r3, ip
 8017732:	932e      	str	r3, [sp, #184]	; 0xb8
 8017734:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017736:	9308      	str	r3, [sp, #32]
 8017738:	3301      	adds	r3, #1
 801773a:	932d      	str	r3, [sp, #180]	; 0xb4
 801773c:	2b07      	cmp	r3, #7
 801773e:	dd08      	ble.n	8017752 <_svfprintf_r+0x111e>
 8017740:	aa2c      	add	r2, sp, #176	; 0xb0
 8017742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017744:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017746:	f002 f8c9 	bl	80198dc <__ssprint_r>
 801774a:	2800      	cmp	r0, #0
 801774c:	d000      	beq.n	8017750 <_svfprintf_r+0x111c>
 801774e:	e195      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017750:	af2f      	add	r7, sp, #188	; 0xbc
 8017752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017756:	4694      	mov	ip, r2
 8017758:	9926      	ldr	r1, [sp, #152]	; 0x98
 801775a:	4463      	add	r3, ip
 801775c:	1b5b      	subs	r3, r3, r5
 801775e:	1a54      	subs	r4, r2, r1
 8017760:	429c      	cmp	r4, r3
 8017762:	dd00      	ble.n	8017766 <_svfprintf_r+0x1132>
 8017764:	001c      	movs	r4, r3
 8017766:	2c00      	cmp	r4, #0
 8017768:	dd14      	ble.n	8017794 <_svfprintf_r+0x1160>
 801776a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801776c:	603d      	str	r5, [r7, #0]
 801776e:	18e3      	adds	r3, r4, r3
 8017770:	932e      	str	r3, [sp, #184]	; 0xb8
 8017772:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017774:	607c      	str	r4, [r7, #4]
 8017776:	9308      	str	r3, [sp, #32]
 8017778:	3301      	adds	r3, #1
 801777a:	932d      	str	r3, [sp, #180]	; 0xb4
 801777c:	3708      	adds	r7, #8
 801777e:	2b07      	cmp	r3, #7
 8017780:	dd08      	ble.n	8017794 <_svfprintf_r+0x1160>
 8017782:	aa2c      	add	r2, sp, #176	; 0xb0
 8017784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017786:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017788:	f002 f8a8 	bl	80198dc <__ssprint_r>
 801778c:	2800      	cmp	r0, #0
 801778e:	d000      	beq.n	8017792 <_svfprintf_r+0x115e>
 8017790:	e174      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017792:	af2f      	add	r7, sp, #188	; 0xbc
 8017794:	43e3      	mvns	r3, r4
 8017796:	17db      	asrs	r3, r3, #31
 8017798:	401c      	ands	r4, r3
 801779a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801779c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801779e:	2510      	movs	r5, #16
 80177a0:	1a9b      	subs	r3, r3, r2
 80177a2:	1b1c      	subs	r4, r3, r4
 80177a4:	2c00      	cmp	r4, #0
 80177a6:	dc00      	bgt.n	80177aa <_svfprintf_r+0x1176>
 80177a8:	e697      	b.n	80174da <_svfprintf_r+0xea6>
 80177aa:	0039      	movs	r1, r7
 80177ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80177ae:	4898      	ldr	r0, [pc, #608]	; (8017a10 <_svfprintf_r+0x13dc>)
 80177b0:	9308      	str	r3, [sp, #32]
 80177b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80177b4:	3301      	adds	r3, #1
 80177b6:	3108      	adds	r1, #8
 80177b8:	6038      	str	r0, [r7, #0]
 80177ba:	2c10      	cmp	r4, #16
 80177bc:	dc00      	bgt.n	80177c0 <_svfprintf_r+0x118c>
 80177be:	e6c6      	b.n	801754e <_svfprintf_r+0xf1a>
 80177c0:	3210      	adds	r2, #16
 80177c2:	607d      	str	r5, [r7, #4]
 80177c4:	922e      	str	r2, [sp, #184]	; 0xb8
 80177c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80177c8:	2b07      	cmp	r3, #7
 80177ca:	dd08      	ble.n	80177de <_svfprintf_r+0x11aa>
 80177cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80177ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177d2:	f002 f883 	bl	80198dc <__ssprint_r>
 80177d6:	2800      	cmp	r0, #0
 80177d8:	d000      	beq.n	80177dc <_svfprintf_r+0x11a8>
 80177da:	e14f      	b.n	8017a7c <_svfprintf_r+0x1448>
 80177dc:	a92f      	add	r1, sp, #188	; 0xbc
 80177de:	3c10      	subs	r4, #16
 80177e0:	000f      	movs	r7, r1
 80177e2:	e7e2      	b.n	80177aa <_svfprintf_r+0x1176>
 80177e4:	2010      	movs	r0, #16
 80177e6:	1812      	adds	r2, r2, r0
 80177e8:	6078      	str	r0, [r7, #4]
 80177ea:	922e      	str	r2, [sp, #184]	; 0xb8
 80177ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80177ee:	2b07      	cmp	r3, #7
 80177f0:	dd08      	ble.n	8017804 <_svfprintf_r+0x11d0>
 80177f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80177f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177f8:	f002 f870 	bl	80198dc <__ssprint_r>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	d000      	beq.n	8017802 <_svfprintf_r+0x11ce>
 8017800:	e13c      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017802:	a92f      	add	r1, sp, #188	; 0xbc
 8017804:	3c10      	subs	r4, #16
 8017806:	000f      	movs	r7, r1
 8017808:	e757      	b.n	80176ba <_svfprintf_r+0x1086>
 801780a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801780c:	2b00      	cmp	r3, #0
 801780e:	d061      	beq.n	80178d4 <_svfprintf_r+0x12a0>
 8017810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017812:	3b01      	subs	r3, #1
 8017814:	9310      	str	r3, [sp, #64]	; 0x40
 8017816:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801781a:	4694      	mov	ip, r2
 801781c:	603b      	str	r3, [r7, #0]
 801781e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017820:	607b      	str	r3, [r7, #4]
 8017822:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017824:	3708      	adds	r7, #8
 8017826:	4463      	add	r3, ip
 8017828:	932e      	str	r3, [sp, #184]	; 0xb8
 801782a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801782c:	9308      	str	r3, [sp, #32]
 801782e:	3301      	adds	r3, #1
 8017830:	932d      	str	r3, [sp, #180]	; 0xb4
 8017832:	2b07      	cmp	r3, #7
 8017834:	dd08      	ble.n	8017848 <_svfprintf_r+0x1214>
 8017836:	aa2c      	add	r2, sp, #176	; 0xb0
 8017838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801783a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801783c:	f002 f84e 	bl	80198dc <__ssprint_r>
 8017840:	2800      	cmp	r0, #0
 8017842:	d000      	beq.n	8017846 <_svfprintf_r+0x1212>
 8017844:	e11a      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017846:	af2f      	add	r7, sp, #188	; 0xbc
 8017848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801784c:	189b      	adds	r3, r3, r2
 801784e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017850:	1b5b      	subs	r3, r3, r5
 8017852:	7814      	ldrb	r4, [r2, #0]
 8017854:	429c      	cmp	r4, r3
 8017856:	dd00      	ble.n	801785a <_svfprintf_r+0x1226>
 8017858:	001c      	movs	r4, r3
 801785a:	2c00      	cmp	r4, #0
 801785c:	dd14      	ble.n	8017888 <_svfprintf_r+0x1254>
 801785e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017860:	603d      	str	r5, [r7, #0]
 8017862:	18e3      	adds	r3, r4, r3
 8017864:	932e      	str	r3, [sp, #184]	; 0xb8
 8017866:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017868:	607c      	str	r4, [r7, #4]
 801786a:	9308      	str	r3, [sp, #32]
 801786c:	3301      	adds	r3, #1
 801786e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017870:	3708      	adds	r7, #8
 8017872:	2b07      	cmp	r3, #7
 8017874:	dd08      	ble.n	8017888 <_svfprintf_r+0x1254>
 8017876:	aa2c      	add	r2, sp, #176	; 0xb0
 8017878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801787a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801787c:	f002 f82e 	bl	80198dc <__ssprint_r>
 8017880:	2800      	cmp	r0, #0
 8017882:	d000      	beq.n	8017886 <_svfprintf_r+0x1252>
 8017884:	e0fa      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017886:	af2f      	add	r7, sp, #188	; 0xbc
 8017888:	43e3      	mvns	r3, r4
 801788a:	17db      	asrs	r3, r3, #31
 801788c:	401c      	ands	r4, r3
 801788e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017890:	781b      	ldrb	r3, [r3, #0]
 8017892:	1b1c      	subs	r4, r3, r4
 8017894:	2c00      	cmp	r4, #0
 8017896:	dd19      	ble.n	80178cc <_svfprintf_r+0x1298>
 8017898:	0039      	movs	r1, r7
 801789a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801789c:	485c      	ldr	r0, [pc, #368]	; (8017a10 <_svfprintf_r+0x13dc>)
 801789e:	9308      	str	r3, [sp, #32]
 80178a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80178a2:	3301      	adds	r3, #1
 80178a4:	3108      	adds	r1, #8
 80178a6:	6038      	str	r0, [r7, #0]
 80178a8:	2c10      	cmp	r4, #16
 80178aa:	dc1a      	bgt.n	80178e2 <_svfprintf_r+0x12ae>
 80178ac:	607c      	str	r4, [r7, #4]
 80178ae:	18a4      	adds	r4, r4, r2
 80178b0:	942e      	str	r4, [sp, #184]	; 0xb8
 80178b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80178b4:	000f      	movs	r7, r1
 80178b6:	2b07      	cmp	r3, #7
 80178b8:	dd08      	ble.n	80178cc <_svfprintf_r+0x1298>
 80178ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80178bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178c0:	f002 f80c 	bl	80198dc <__ssprint_r>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d000      	beq.n	80178ca <_svfprintf_r+0x1296>
 80178c8:	e0d8      	b.n	8017a7c <_svfprintf_r+0x1448>
 80178ca:	af2f      	add	r7, sp, #188	; 0xbc
 80178cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	18ed      	adds	r5, r5, r3
 80178d2:	e711      	b.n	80176f8 <_svfprintf_r+0x10c4>
 80178d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80178d6:	3b01      	subs	r3, #1
 80178d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80178da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178dc:	3b01      	subs	r3, #1
 80178de:	930f      	str	r3, [sp, #60]	; 0x3c
 80178e0:	e799      	b.n	8017816 <_svfprintf_r+0x11e2>
 80178e2:	2010      	movs	r0, #16
 80178e4:	1812      	adds	r2, r2, r0
 80178e6:	6078      	str	r0, [r7, #4]
 80178e8:	922e      	str	r2, [sp, #184]	; 0xb8
 80178ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80178ec:	2b07      	cmp	r3, #7
 80178ee:	dd08      	ble.n	8017902 <_svfprintf_r+0x12ce>
 80178f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80178f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178f6:	f001 fff1 	bl	80198dc <__ssprint_r>
 80178fa:	2800      	cmp	r0, #0
 80178fc:	d000      	beq.n	8017900 <_svfprintf_r+0x12cc>
 80178fe:	e0bd      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017900:	a92f      	add	r1, sp, #188	; 0xbc
 8017902:	3c10      	subs	r4, #16
 8017904:	000f      	movs	r7, r1
 8017906:	e7c7      	b.n	8017898 <_svfprintf_r+0x1264>
 8017908:	003c      	movs	r4, r7
 801790a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801790c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801790e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017910:	9308      	str	r3, [sp, #32]
 8017912:	3101      	adds	r1, #1
 8017914:	3301      	adds	r3, #1
 8017916:	3408      	adds	r4, #8
 8017918:	2a01      	cmp	r2, #1
 801791a:	dc03      	bgt.n	8017924 <_svfprintf_r+0x12f0>
 801791c:	2201      	movs	r2, #1
 801791e:	4216      	tst	r6, r2
 8017920:	d100      	bne.n	8017924 <_svfprintf_r+0x12f0>
 8017922:	e088      	b.n	8017a36 <_svfprintf_r+0x1402>
 8017924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017926:	912e      	str	r1, [sp, #184]	; 0xb8
 8017928:	603a      	str	r2, [r7, #0]
 801792a:	2201      	movs	r2, #1
 801792c:	932d      	str	r3, [sp, #180]	; 0xb4
 801792e:	607a      	str	r2, [r7, #4]
 8017930:	2b07      	cmp	r3, #7
 8017932:	dd08      	ble.n	8017946 <_svfprintf_r+0x1312>
 8017934:	aa2c      	add	r2, sp, #176	; 0xb0
 8017936:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017938:	980a      	ldr	r0, [sp, #40]	; 0x28
 801793a:	f001 ffcf 	bl	80198dc <__ssprint_r>
 801793e:	2800      	cmp	r0, #0
 8017940:	d000      	beq.n	8017944 <_svfprintf_r+0x1310>
 8017942:	e09b      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017944:	ac2f      	add	r4, sp, #188	; 0xbc
 8017946:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017948:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801794a:	4694      	mov	ip, r2
 801794c:	6023      	str	r3, [r4, #0]
 801794e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017950:	6063      	str	r3, [r4, #4]
 8017952:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017954:	3408      	adds	r4, #8
 8017956:	4463      	add	r3, ip
 8017958:	932e      	str	r3, [sp, #184]	; 0xb8
 801795a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801795c:	9308      	str	r3, [sp, #32]
 801795e:	3301      	adds	r3, #1
 8017960:	932d      	str	r3, [sp, #180]	; 0xb4
 8017962:	2b07      	cmp	r3, #7
 8017964:	dd08      	ble.n	8017978 <_svfprintf_r+0x1344>
 8017966:	aa2c      	add	r2, sp, #176	; 0xb0
 8017968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801796a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801796c:	f001 ffb6 	bl	80198dc <__ssprint_r>
 8017970:	2800      	cmp	r0, #0
 8017972:	d000      	beq.n	8017976 <_svfprintf_r+0x1342>
 8017974:	e082      	b.n	8017a7c <_svfprintf_r+0x1448>
 8017976:	ac2f      	add	r4, sp, #188	; 0xbc
 8017978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801797a:	2200      	movs	r2, #0
 801797c:	1e5d      	subs	r5, r3, #1
 801797e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017980:	2300      	movs	r3, #0
 8017982:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017984:	f7e8 fd6a 	bl	800045c <__aeabi_dcmpeq>
 8017988:	2800      	cmp	r0, #0
 801798a:	d12c      	bne.n	80179e6 <_svfprintf_r+0x13b2>
 801798c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801798e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017990:	9308      	str	r3, [sp, #32]
 8017992:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017994:	6065      	str	r5, [r4, #4]
 8017996:	1c5a      	adds	r2, r3, #1
 8017998:	930e      	str	r3, [sp, #56]	; 0x38
 801799a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801799c:	922d      	str	r2, [sp, #180]	; 0xb4
 801799e:	3301      	adds	r3, #1
 80179a0:	6023      	str	r3, [r4, #0]
 80179a2:	9b08      	ldr	r3, [sp, #32]
 80179a4:	3408      	adds	r4, #8
 80179a6:	3b01      	subs	r3, #1
 80179a8:	185b      	adds	r3, r3, r1
 80179aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80179ac:	2a07      	cmp	r2, #7
 80179ae:	dd07      	ble.n	80179c0 <_svfprintf_r+0x138c>
 80179b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80179b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80179b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80179b6:	f001 ff91 	bl	80198dc <__ssprint_r>
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d15e      	bne.n	8017a7c <_svfprintf_r+0x1448>
 80179be:	ac2f      	add	r4, sp, #188	; 0xbc
 80179c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80179c2:	ab28      	add	r3, sp, #160	; 0xa0
 80179c4:	4694      	mov	ip, r2
 80179c6:	6023      	str	r3, [r4, #0]
 80179c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179ca:	6063      	str	r3, [r4, #4]
 80179cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80179ce:	4463      	add	r3, ip
 80179d0:	932e      	str	r3, [sp, #184]	; 0xb8
 80179d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80179d4:	9308      	str	r3, [sp, #32]
 80179d6:	3301      	adds	r3, #1
 80179d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80179da:	2b07      	cmp	r3, #7
 80179dc:	dd00      	ble.n	80179e0 <_svfprintf_r+0x13ac>
 80179de:	e629      	b.n	8017634 <_svfprintf_r+0x1000>
 80179e0:	3408      	adds	r4, #8
 80179e2:	0027      	movs	r7, r4
 80179e4:	e579      	b.n	80174da <_svfprintf_r+0xea6>
 80179e6:	2710      	movs	r7, #16
 80179e8:	2d00      	cmp	r5, #0
 80179ea:	dde9      	ble.n	80179c0 <_svfprintf_r+0x138c>
 80179ec:	0021      	movs	r1, r4
 80179ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80179f0:	4807      	ldr	r0, [pc, #28]	; (8017a10 <_svfprintf_r+0x13dc>)
 80179f2:	9308      	str	r3, [sp, #32]
 80179f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80179f6:	3301      	adds	r3, #1
 80179f8:	3108      	adds	r1, #8
 80179fa:	6020      	str	r0, [r4, #0]
 80179fc:	2d10      	cmp	r5, #16
 80179fe:	dc09      	bgt.n	8017a14 <_svfprintf_r+0x13e0>
 8017a00:	6065      	str	r5, [r4, #4]
 8017a02:	000c      	movs	r4, r1
 8017a04:	18ad      	adds	r5, r5, r2
 8017a06:	952e      	str	r5, [sp, #184]	; 0xb8
 8017a08:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a0a:	2b07      	cmp	r3, #7
 8017a0c:	ddd8      	ble.n	80179c0 <_svfprintf_r+0x138c>
 8017a0e:	e7cf      	b.n	80179b0 <_svfprintf_r+0x137c>
 8017a10:	0801d304 	.word	0x0801d304
 8017a14:	3210      	adds	r2, #16
 8017a16:	6067      	str	r7, [r4, #4]
 8017a18:	922e      	str	r2, [sp, #184]	; 0xb8
 8017a1a:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a1c:	2b07      	cmp	r3, #7
 8017a1e:	dd07      	ble.n	8017a30 <_svfprintf_r+0x13fc>
 8017a20:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a26:	f001 ff59 	bl	80198dc <__ssprint_r>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	d126      	bne.n	8017a7c <_svfprintf_r+0x1448>
 8017a2e:	a92f      	add	r1, sp, #188	; 0xbc
 8017a30:	3d10      	subs	r5, #16
 8017a32:	000c      	movs	r4, r1
 8017a34:	e7da      	b.n	80179ec <_svfprintf_r+0x13b8>
 8017a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a38:	912e      	str	r1, [sp, #184]	; 0xb8
 8017a3a:	c705      	stmia	r7!, {r0, r2}
 8017a3c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a3e:	e7e4      	b.n	8017a0a <_svfprintf_r+0x13d6>
 8017a40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017a42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017a44:	2510      	movs	r5, #16
 8017a46:	1a9c      	subs	r4, r3, r2
 8017a48:	2c00      	cmp	r4, #0
 8017a4a:	dc00      	bgt.n	8017a4e <_svfprintf_r+0x141a>
 8017a4c:	e548      	b.n	80174e0 <_svfprintf_r+0xeac>
 8017a4e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017a50:	4921      	ldr	r1, [pc, #132]	; (8017ad8 <_svfprintf_r+0x14a4>)
 8017a52:	9308      	str	r3, [sp, #32]
 8017a54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017a56:	3301      	adds	r3, #1
 8017a58:	6039      	str	r1, [r7, #0]
 8017a5a:	2c10      	cmp	r4, #16
 8017a5c:	dc19      	bgt.n	8017a92 <_svfprintf_r+0x145e>
 8017a5e:	607c      	str	r4, [r7, #4]
 8017a60:	18a4      	adds	r4, r4, r2
 8017a62:	942e      	str	r4, [sp, #184]	; 0xb8
 8017a64:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a66:	2b07      	cmp	r3, #7
 8017a68:	dc00      	bgt.n	8017a6c <_svfprintf_r+0x1438>
 8017a6a:	e539      	b.n	80174e0 <_svfprintf_r+0xeac>
 8017a6c:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a72:	f001 ff33 	bl	80198dc <__ssprint_r>
 8017a76:	2800      	cmp	r0, #0
 8017a78:	d100      	bne.n	8017a7c <_svfprintf_r+0x1448>
 8017a7a:	e531      	b.n	80174e0 <_svfprintf_r+0xeac>
 8017a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d101      	bne.n	8017a86 <_svfprintf_r+0x1452>
 8017a82:	f7ff f908 	bl	8016c96 <_svfprintf_r+0x662>
 8017a86:	0019      	movs	r1, r3
 8017a88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a8a:	f000 ff19 	bl	80188c0 <_free_r>
 8017a8e:	f7ff f902 	bl	8016c96 <_svfprintf_r+0x662>
 8017a92:	3210      	adds	r2, #16
 8017a94:	607d      	str	r5, [r7, #4]
 8017a96:	922e      	str	r2, [sp, #184]	; 0xb8
 8017a98:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	2b07      	cmp	r3, #7
 8017a9e:	dd07      	ble.n	8017ab0 <_svfprintf_r+0x147c>
 8017aa0:	aa2c      	add	r2, sp, #176	; 0xb0
 8017aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017aa4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017aa6:	f001 ff19 	bl	80198dc <__ssprint_r>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	d1e6      	bne.n	8017a7c <_svfprintf_r+0x1448>
 8017aae:	af2f      	add	r7, sp, #188	; 0xbc
 8017ab0:	3c10      	subs	r4, #16
 8017ab2:	e7cc      	b.n	8017a4e <_svfprintf_r+0x141a>
 8017ab4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ab6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017ab8:	f000 ff02 	bl	80188c0 <_free_r>
 8017abc:	e52a      	b.n	8017514 <_svfprintf_r+0xee0>
 8017abe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017ac0:	9306      	str	r3, [sp, #24]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d101      	bne.n	8017aca <_svfprintf_r+0x1496>
 8017ac6:	f7ff f8e6 	bl	8016c96 <_svfprintf_r+0x662>
 8017aca:	aa2c      	add	r2, sp, #176	; 0xb0
 8017acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017ad0:	f001 ff04 	bl	80198dc <__ssprint_r>
 8017ad4:	f7ff f8df 	bl	8016c96 <_svfprintf_r+0x662>
 8017ad8:	0801d2f4 	.word	0x0801d2f4

08017adc <sysconf>:
 8017adc:	2380      	movs	r3, #128	; 0x80
 8017ade:	b510      	push	{r4, lr}
 8017ae0:	015b      	lsls	r3, r3, #5
 8017ae2:	2808      	cmp	r0, #8
 8017ae4:	d004      	beq.n	8017af0 <sysconf+0x14>
 8017ae6:	f000 fe7d 	bl	80187e4 <__errno>
 8017aea:	2316      	movs	r3, #22
 8017aec:	6003      	str	r3, [r0, #0]
 8017aee:	3b17      	subs	r3, #23
 8017af0:	0018      	movs	r0, r3
 8017af2:	bd10      	pop	{r4, pc}

08017af4 <__ascii_wctomb>:
 8017af4:	1e0b      	subs	r3, r1, #0
 8017af6:	d004      	beq.n	8017b02 <__ascii_wctomb+0xe>
 8017af8:	2aff      	cmp	r2, #255	; 0xff
 8017afa:	d904      	bls.n	8017b06 <__ascii_wctomb+0x12>
 8017afc:	238a      	movs	r3, #138	; 0x8a
 8017afe:	6003      	str	r3, [r0, #0]
 8017b00:	3b8b      	subs	r3, #139	; 0x8b
 8017b02:	0018      	movs	r0, r3
 8017b04:	4770      	bx	lr
 8017b06:	700a      	strb	r2, [r1, #0]
 8017b08:	2301      	movs	r3, #1
 8017b0a:	e7fa      	b.n	8017b02 <__ascii_wctomb+0xe>

08017b0c <register_fini>:
 8017b0c:	4b03      	ldr	r3, [pc, #12]	; (8017b1c <register_fini+0x10>)
 8017b0e:	b510      	push	{r4, lr}
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <register_fini+0xe>
 8017b14:	4802      	ldr	r0, [pc, #8]	; (8017b20 <register_fini+0x14>)
 8017b16:	f000 f805 	bl	8017b24 <atexit>
 8017b1a:	bd10      	pop	{r4, pc}
 8017b1c:	00000000 	.word	0x00000000
 8017b20:	080187f1 	.word	0x080187f1

08017b24 <atexit>:
 8017b24:	2300      	movs	r3, #0
 8017b26:	b510      	push	{r4, lr}
 8017b28:	0001      	movs	r1, r0
 8017b2a:	001a      	movs	r2, r3
 8017b2c:	0018      	movs	r0, r3
 8017b2e:	f001 ff53 	bl	80199d8 <__register_exitproc>
 8017b32:	bd10      	pop	{r4, pc}

08017b34 <quorem>:
 8017b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b36:	6903      	ldr	r3, [r0, #16]
 8017b38:	690c      	ldr	r4, [r1, #16]
 8017b3a:	b089      	sub	sp, #36	; 0x24
 8017b3c:	0007      	movs	r7, r0
 8017b3e:	9105      	str	r1, [sp, #20]
 8017b40:	2600      	movs	r6, #0
 8017b42:	42a3      	cmp	r3, r4
 8017b44:	db65      	blt.n	8017c12 <quorem+0xde>
 8017b46:	000b      	movs	r3, r1
 8017b48:	3c01      	subs	r4, #1
 8017b4a:	3314      	adds	r3, #20
 8017b4c:	00a5      	lsls	r5, r4, #2
 8017b4e:	9303      	str	r3, [sp, #12]
 8017b50:	195b      	adds	r3, r3, r5
 8017b52:	9304      	str	r3, [sp, #16]
 8017b54:	0003      	movs	r3, r0
 8017b56:	3314      	adds	r3, #20
 8017b58:	9302      	str	r3, [sp, #8]
 8017b5a:	195d      	adds	r5, r3, r5
 8017b5c:	9b04      	ldr	r3, [sp, #16]
 8017b5e:	6828      	ldr	r0, [r5, #0]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	1c59      	adds	r1, r3, #1
 8017b64:	9301      	str	r3, [sp, #4]
 8017b66:	f7e8 faf3 	bl	8000150 <__udivsi3>
 8017b6a:	9001      	str	r0, [sp, #4]
 8017b6c:	42b0      	cmp	r0, r6
 8017b6e:	d029      	beq.n	8017bc4 <quorem+0x90>
 8017b70:	9b03      	ldr	r3, [sp, #12]
 8017b72:	9802      	ldr	r0, [sp, #8]
 8017b74:	469c      	mov	ip, r3
 8017b76:	9606      	str	r6, [sp, #24]
 8017b78:	4662      	mov	r2, ip
 8017b7a:	ca08      	ldmia	r2!, {r3}
 8017b7c:	4694      	mov	ip, r2
 8017b7e:	9a01      	ldr	r2, [sp, #4]
 8017b80:	b299      	uxth	r1, r3
 8017b82:	4351      	muls	r1, r2
 8017b84:	0c1b      	lsrs	r3, r3, #16
 8017b86:	4353      	muls	r3, r2
 8017b88:	1989      	adds	r1, r1, r6
 8017b8a:	0c0a      	lsrs	r2, r1, #16
 8017b8c:	189b      	adds	r3, r3, r2
 8017b8e:	9307      	str	r3, [sp, #28]
 8017b90:	0c1e      	lsrs	r6, r3, #16
 8017b92:	6803      	ldr	r3, [r0, #0]
 8017b94:	b289      	uxth	r1, r1
 8017b96:	b29a      	uxth	r2, r3
 8017b98:	9b06      	ldr	r3, [sp, #24]
 8017b9a:	18d2      	adds	r2, r2, r3
 8017b9c:	6803      	ldr	r3, [r0, #0]
 8017b9e:	1a52      	subs	r2, r2, r1
 8017ba0:	0c19      	lsrs	r1, r3, #16
 8017ba2:	466b      	mov	r3, sp
 8017ba4:	8b9b      	ldrh	r3, [r3, #28]
 8017ba6:	1acb      	subs	r3, r1, r3
 8017ba8:	1411      	asrs	r1, r2, #16
 8017baa:	185b      	adds	r3, r3, r1
 8017bac:	1419      	asrs	r1, r3, #16
 8017bae:	b292      	uxth	r2, r2
 8017bb0:	041b      	lsls	r3, r3, #16
 8017bb2:	431a      	orrs	r2, r3
 8017bb4:	9b04      	ldr	r3, [sp, #16]
 8017bb6:	9106      	str	r1, [sp, #24]
 8017bb8:	c004      	stmia	r0!, {r2}
 8017bba:	4563      	cmp	r3, ip
 8017bbc:	d2dc      	bcs.n	8017b78 <quorem+0x44>
 8017bbe:	682b      	ldr	r3, [r5, #0]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d02d      	beq.n	8017c20 <quorem+0xec>
 8017bc4:	9905      	ldr	r1, [sp, #20]
 8017bc6:	0038      	movs	r0, r7
 8017bc8:	f001 fcb2 	bl	8019530 <__mcmp>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	db1f      	blt.n	8017c10 <quorem+0xdc>
 8017bd0:	2500      	movs	r5, #0
 8017bd2:	9b01      	ldr	r3, [sp, #4]
 8017bd4:	9802      	ldr	r0, [sp, #8]
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	9903      	ldr	r1, [sp, #12]
 8017bda:	9301      	str	r3, [sp, #4]
 8017bdc:	6802      	ldr	r2, [r0, #0]
 8017bde:	c908      	ldmia	r1!, {r3}
 8017be0:	b292      	uxth	r2, r2
 8017be2:	1955      	adds	r5, r2, r5
 8017be4:	b29a      	uxth	r2, r3
 8017be6:	1aaa      	subs	r2, r5, r2
 8017be8:	6805      	ldr	r5, [r0, #0]
 8017bea:	0c1b      	lsrs	r3, r3, #16
 8017bec:	0c2d      	lsrs	r5, r5, #16
 8017bee:	1aeb      	subs	r3, r5, r3
 8017bf0:	1415      	asrs	r5, r2, #16
 8017bf2:	195b      	adds	r3, r3, r5
 8017bf4:	141d      	asrs	r5, r3, #16
 8017bf6:	b292      	uxth	r2, r2
 8017bf8:	041b      	lsls	r3, r3, #16
 8017bfa:	4313      	orrs	r3, r2
 8017bfc:	c008      	stmia	r0!, {r3}
 8017bfe:	9b04      	ldr	r3, [sp, #16]
 8017c00:	428b      	cmp	r3, r1
 8017c02:	d2eb      	bcs.n	8017bdc <quorem+0xa8>
 8017c04:	9a02      	ldr	r2, [sp, #8]
 8017c06:	00a3      	lsls	r3, r4, #2
 8017c08:	18d3      	adds	r3, r2, r3
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	2a00      	cmp	r2, #0
 8017c0e:	d011      	beq.n	8017c34 <quorem+0x100>
 8017c10:	9e01      	ldr	r6, [sp, #4]
 8017c12:	0030      	movs	r0, r6
 8017c14:	b009      	add	sp, #36	; 0x24
 8017c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c18:	682b      	ldr	r3, [r5, #0]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d104      	bne.n	8017c28 <quorem+0xf4>
 8017c1e:	3c01      	subs	r4, #1
 8017c20:	9b02      	ldr	r3, [sp, #8]
 8017c22:	3d04      	subs	r5, #4
 8017c24:	42ab      	cmp	r3, r5
 8017c26:	d3f7      	bcc.n	8017c18 <quorem+0xe4>
 8017c28:	613c      	str	r4, [r7, #16]
 8017c2a:	e7cb      	b.n	8017bc4 <quorem+0x90>
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	2a00      	cmp	r2, #0
 8017c30:	d104      	bne.n	8017c3c <quorem+0x108>
 8017c32:	3c01      	subs	r4, #1
 8017c34:	9a02      	ldr	r2, [sp, #8]
 8017c36:	3b04      	subs	r3, #4
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d3f7      	bcc.n	8017c2c <quorem+0xf8>
 8017c3c:	613c      	str	r4, [r7, #16]
 8017c3e:	e7e7      	b.n	8017c10 <quorem+0xdc>

08017c40 <_dtoa_r>:
 8017c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c42:	0014      	movs	r4, r2
 8017c44:	001d      	movs	r5, r3
 8017c46:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017c48:	b09b      	sub	sp, #108	; 0x6c
 8017c4a:	9002      	str	r0, [sp, #8]
 8017c4c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017c4e:	9406      	str	r4, [sp, #24]
 8017c50:	9507      	str	r5, [sp, #28]
 8017c52:	2900      	cmp	r1, #0
 8017c54:	d009      	beq.n	8017c6a <_dtoa_r+0x2a>
 8017c56:	2301      	movs	r3, #1
 8017c58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017c5a:	4093      	lsls	r3, r2
 8017c5c:	604a      	str	r2, [r1, #4]
 8017c5e:	608b      	str	r3, [r1, #8]
 8017c60:	f001 fa6a 	bl	8019138 <_Bfree>
 8017c64:	2300      	movs	r3, #0
 8017c66:	9a02      	ldr	r2, [sp, #8]
 8017c68:	6413      	str	r3, [r2, #64]	; 0x40
 8017c6a:	2d00      	cmp	r5, #0
 8017c6c:	da20      	bge.n	8017cb0 <_dtoa_r+0x70>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	6033      	str	r3, [r6, #0]
 8017c72:	006b      	lsls	r3, r5, #1
 8017c74:	085b      	lsrs	r3, r3, #1
 8017c76:	9307      	str	r3, [sp, #28]
 8017c78:	9c07      	ldr	r4, [sp, #28]
 8017c7a:	4bb2      	ldr	r3, [pc, #712]	; (8017f44 <_dtoa_r+0x304>)
 8017c7c:	0022      	movs	r2, r4
 8017c7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017c80:	401a      	ands	r2, r3
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d117      	bne.n	8017cb6 <_dtoa_r+0x76>
 8017c86:	4bb0      	ldr	r3, [pc, #704]	; (8017f48 <_dtoa_r+0x308>)
 8017c88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017c8a:	6013      	str	r3, [r2, #0]
 8017c8c:	9b06      	ldr	r3, [sp, #24]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d103      	bne.n	8017c9a <_dtoa_r+0x5a>
 8017c92:	0324      	lsls	r4, r4, #12
 8017c94:	d101      	bne.n	8017c9a <_dtoa_r+0x5a>
 8017c96:	f000 fd89 	bl	80187ac <_dtoa_r+0xb6c>
 8017c9a:	4bac      	ldr	r3, [pc, #688]	; (8017f4c <_dtoa_r+0x30c>)
 8017c9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c9e:	9308      	str	r3, [sp, #32]
 8017ca0:	2a00      	cmp	r2, #0
 8017ca2:	d002      	beq.n	8017caa <_dtoa_r+0x6a>
 8017ca4:	4baa      	ldr	r3, [pc, #680]	; (8017f50 <_dtoa_r+0x310>)
 8017ca6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017ca8:	6013      	str	r3, [r2, #0]
 8017caa:	9808      	ldr	r0, [sp, #32]
 8017cac:	b01b      	add	sp, #108	; 0x6c
 8017cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	6033      	str	r3, [r6, #0]
 8017cb4:	e7e0      	b.n	8017c78 <_dtoa_r+0x38>
 8017cb6:	9e06      	ldr	r6, [sp, #24]
 8017cb8:	9f07      	ldr	r7, [sp, #28]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	0030      	movs	r0, r6
 8017cc0:	0039      	movs	r1, r7
 8017cc2:	f7e8 fbcb 	bl	800045c <__aeabi_dcmpeq>
 8017cc6:	1e05      	subs	r5, r0, #0
 8017cc8:	d00b      	beq.n	8017ce2 <_dtoa_r+0xa2>
 8017cca:	2301      	movs	r3, #1
 8017ccc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017cce:	6013      	str	r3, [r2, #0]
 8017cd0:	4ba0      	ldr	r3, [pc, #640]	; (8017f54 <_dtoa_r+0x314>)
 8017cd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017cd4:	9308      	str	r3, [sp, #32]
 8017cd6:	2a00      	cmp	r2, #0
 8017cd8:	d0e7      	beq.n	8017caa <_dtoa_r+0x6a>
 8017cda:	4a9f      	ldr	r2, [pc, #636]	; (8017f58 <_dtoa_r+0x318>)
 8017cdc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017cde:	600a      	str	r2, [r1, #0]
 8017ce0:	e7e3      	b.n	8017caa <_dtoa_r+0x6a>
 8017ce2:	ab18      	add	r3, sp, #96	; 0x60
 8017ce4:	9301      	str	r3, [sp, #4]
 8017ce6:	ab19      	add	r3, sp, #100	; 0x64
 8017ce8:	9300      	str	r3, [sp, #0]
 8017cea:	0032      	movs	r2, r6
 8017cec:	003b      	movs	r3, r7
 8017cee:	9802      	ldr	r0, [sp, #8]
 8017cf0:	f001 fd0e 	bl	8019710 <__d2b>
 8017cf4:	0063      	lsls	r3, r4, #1
 8017cf6:	9003      	str	r0, [sp, #12]
 8017cf8:	0d5b      	lsrs	r3, r3, #21
 8017cfa:	d074      	beq.n	8017de6 <_dtoa_r+0x1a6>
 8017cfc:	033a      	lsls	r2, r7, #12
 8017cfe:	4c97      	ldr	r4, [pc, #604]	; (8017f5c <_dtoa_r+0x31c>)
 8017d00:	0b12      	lsrs	r2, r2, #12
 8017d02:	4314      	orrs	r4, r2
 8017d04:	0021      	movs	r1, r4
 8017d06:	4a96      	ldr	r2, [pc, #600]	; (8017f60 <_dtoa_r+0x320>)
 8017d08:	0030      	movs	r0, r6
 8017d0a:	9516      	str	r5, [sp, #88]	; 0x58
 8017d0c:	189e      	adds	r6, r3, r2
 8017d0e:	2200      	movs	r2, #0
 8017d10:	4b94      	ldr	r3, [pc, #592]	; (8017f64 <_dtoa_r+0x324>)
 8017d12:	f7ea fe01 	bl	8002918 <__aeabi_dsub>
 8017d16:	4a94      	ldr	r2, [pc, #592]	; (8017f68 <_dtoa_r+0x328>)
 8017d18:	4b94      	ldr	r3, [pc, #592]	; (8017f6c <_dtoa_r+0x32c>)
 8017d1a:	f7ea fb8b 	bl	8002434 <__aeabi_dmul>
 8017d1e:	4a94      	ldr	r2, [pc, #592]	; (8017f70 <_dtoa_r+0x330>)
 8017d20:	4b94      	ldr	r3, [pc, #592]	; (8017f74 <_dtoa_r+0x334>)
 8017d22:	f7e9 fc61 	bl	80015e8 <__aeabi_dadd>
 8017d26:	0004      	movs	r4, r0
 8017d28:	0030      	movs	r0, r6
 8017d2a:	000d      	movs	r5, r1
 8017d2c:	f7eb f98e 	bl	800304c <__aeabi_i2d>
 8017d30:	4a91      	ldr	r2, [pc, #580]	; (8017f78 <_dtoa_r+0x338>)
 8017d32:	4b92      	ldr	r3, [pc, #584]	; (8017f7c <_dtoa_r+0x33c>)
 8017d34:	f7ea fb7e 	bl	8002434 <__aeabi_dmul>
 8017d38:	0002      	movs	r2, r0
 8017d3a:	000b      	movs	r3, r1
 8017d3c:	0020      	movs	r0, r4
 8017d3e:	0029      	movs	r1, r5
 8017d40:	f7e9 fc52 	bl	80015e8 <__aeabi_dadd>
 8017d44:	0004      	movs	r4, r0
 8017d46:	000d      	movs	r5, r1
 8017d48:	f7eb f94a 	bl	8002fe0 <__aeabi_d2iz>
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	0007      	movs	r7, r0
 8017d50:	2300      	movs	r3, #0
 8017d52:	0020      	movs	r0, r4
 8017d54:	0029      	movs	r1, r5
 8017d56:	f7e8 fb87 	bl	8000468 <__aeabi_dcmplt>
 8017d5a:	2800      	cmp	r0, #0
 8017d5c:	d009      	beq.n	8017d72 <_dtoa_r+0x132>
 8017d5e:	0038      	movs	r0, r7
 8017d60:	f7eb f974 	bl	800304c <__aeabi_i2d>
 8017d64:	002b      	movs	r3, r5
 8017d66:	0022      	movs	r2, r4
 8017d68:	f7e8 fb78 	bl	800045c <__aeabi_dcmpeq>
 8017d6c:	4243      	negs	r3, r0
 8017d6e:	4158      	adcs	r0, r3
 8017d70:	1a3f      	subs	r7, r7, r0
 8017d72:	2301      	movs	r3, #1
 8017d74:	9314      	str	r3, [sp, #80]	; 0x50
 8017d76:	2f16      	cmp	r7, #22
 8017d78:	d80d      	bhi.n	8017d96 <_dtoa_r+0x156>
 8017d7a:	4981      	ldr	r1, [pc, #516]	; (8017f80 <_dtoa_r+0x340>)
 8017d7c:	00fb      	lsls	r3, r7, #3
 8017d7e:	18c9      	adds	r1, r1, r3
 8017d80:	6808      	ldr	r0, [r1, #0]
 8017d82:	6849      	ldr	r1, [r1, #4]
 8017d84:	9a06      	ldr	r2, [sp, #24]
 8017d86:	9b07      	ldr	r3, [sp, #28]
 8017d88:	f7e8 fb82 	bl	8000490 <__aeabi_dcmpgt>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d046      	beq.n	8017e1e <_dtoa_r+0x1de>
 8017d90:	2300      	movs	r3, #0
 8017d92:	3f01      	subs	r7, #1
 8017d94:	9314      	str	r3, [sp, #80]	; 0x50
 8017d96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017d98:	1b9e      	subs	r6, r3, r6
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8017d9e:	0033      	movs	r3, r6
 8017da0:	3b01      	subs	r3, #1
 8017da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017da4:	d504      	bpl.n	8017db0 <_dtoa_r+0x170>
 8017da6:	2301      	movs	r3, #1
 8017da8:	1b9b      	subs	r3, r3, r6
 8017daa:	930a      	str	r3, [sp, #40]	; 0x28
 8017dac:	2300      	movs	r3, #0
 8017dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8017db0:	2f00      	cmp	r7, #0
 8017db2:	db36      	blt.n	8017e22 <_dtoa_r+0x1e2>
 8017db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017db6:	9711      	str	r7, [sp, #68]	; 0x44
 8017db8:	19db      	adds	r3, r3, r7
 8017dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	9304      	str	r3, [sp, #16]
 8017dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017dc2:	2401      	movs	r4, #1
 8017dc4:	2b09      	cmp	r3, #9
 8017dc6:	d900      	bls.n	8017dca <_dtoa_r+0x18a>
 8017dc8:	e082      	b.n	8017ed0 <_dtoa_r+0x290>
 8017dca:	2b05      	cmp	r3, #5
 8017dcc:	dd02      	ble.n	8017dd4 <_dtoa_r+0x194>
 8017dce:	2400      	movs	r4, #0
 8017dd0:	3b04      	subs	r3, #4
 8017dd2:	9320      	str	r3, [sp, #128]	; 0x80
 8017dd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017dd6:	1e98      	subs	r0, r3, #2
 8017dd8:	2803      	cmp	r0, #3
 8017dda:	d900      	bls.n	8017dde <_dtoa_r+0x19e>
 8017ddc:	e082      	b.n	8017ee4 <_dtoa_r+0x2a4>
 8017dde:	f7e8 f9a3 	bl	8000128 <__gnu_thumb1_case_uqi>
 8017de2:	7573      	.short	0x7573
 8017de4:	6828      	.short	0x6828
 8017de6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017dea:	189e      	adds	r6, r3, r2
 8017dec:	4b65      	ldr	r3, [pc, #404]	; (8017f84 <_dtoa_r+0x344>)
 8017dee:	18f2      	adds	r2, r6, r3
 8017df0:	2a20      	cmp	r2, #32
 8017df2:	dd0f      	ble.n	8017e14 <_dtoa_r+0x1d4>
 8017df4:	2340      	movs	r3, #64	; 0x40
 8017df6:	1a9b      	subs	r3, r3, r2
 8017df8:	409c      	lsls	r4, r3
 8017dfa:	4b63      	ldr	r3, [pc, #396]	; (8017f88 <_dtoa_r+0x348>)
 8017dfc:	9806      	ldr	r0, [sp, #24]
 8017dfe:	18f3      	adds	r3, r6, r3
 8017e00:	40d8      	lsrs	r0, r3
 8017e02:	4320      	orrs	r0, r4
 8017e04:	f7eb f95c 	bl	80030c0 <__aeabi_ui2d>
 8017e08:	2301      	movs	r3, #1
 8017e0a:	4c60      	ldr	r4, [pc, #384]	; (8017f8c <_dtoa_r+0x34c>)
 8017e0c:	3e01      	subs	r6, #1
 8017e0e:	1909      	adds	r1, r1, r4
 8017e10:	9316      	str	r3, [sp, #88]	; 0x58
 8017e12:	e77c      	b.n	8017d0e <_dtoa_r+0xce>
 8017e14:	2320      	movs	r3, #32
 8017e16:	9806      	ldr	r0, [sp, #24]
 8017e18:	1a9b      	subs	r3, r3, r2
 8017e1a:	4098      	lsls	r0, r3
 8017e1c:	e7f2      	b.n	8017e04 <_dtoa_r+0x1c4>
 8017e1e:	9014      	str	r0, [sp, #80]	; 0x50
 8017e20:	e7b9      	b.n	8017d96 <_dtoa_r+0x156>
 8017e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e24:	1bdb      	subs	r3, r3, r7
 8017e26:	930a      	str	r3, [sp, #40]	; 0x28
 8017e28:	427b      	negs	r3, r7
 8017e2a:	9304      	str	r3, [sp, #16]
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8017e30:	e7c6      	b.n	8017dc0 <_dtoa_r+0x180>
 8017e32:	2301      	movs	r3, #1
 8017e34:	930d      	str	r3, [sp, #52]	; 0x34
 8017e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	dd57      	ble.n	8017eec <_dtoa_r+0x2ac>
 8017e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8017e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e40:	2200      	movs	r2, #0
 8017e42:	9902      	ldr	r1, [sp, #8]
 8017e44:	644a      	str	r2, [r1, #68]	; 0x44
 8017e46:	3204      	adds	r2, #4
 8017e48:	0010      	movs	r0, r2
 8017e4a:	9902      	ldr	r1, [sp, #8]
 8017e4c:	3014      	adds	r0, #20
 8017e4e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8017e50:	4298      	cmp	r0, r3
 8017e52:	d950      	bls.n	8017ef6 <_dtoa_r+0x2b6>
 8017e54:	9802      	ldr	r0, [sp, #8]
 8017e56:	f001 f947 	bl	80190e8 <_Balloc>
 8017e5a:	9b02      	ldr	r3, [sp, #8]
 8017e5c:	9008      	str	r0, [sp, #32]
 8017e5e:	6418      	str	r0, [r3, #64]	; 0x40
 8017e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e62:	2b0e      	cmp	r3, #14
 8017e64:	d900      	bls.n	8017e68 <_dtoa_r+0x228>
 8017e66:	e10c      	b.n	8018082 <_dtoa_r+0x442>
 8017e68:	2c00      	cmp	r4, #0
 8017e6a:	d100      	bne.n	8017e6e <_dtoa_r+0x22e>
 8017e6c:	e109      	b.n	8018082 <_dtoa_r+0x442>
 8017e6e:	9b06      	ldr	r3, [sp, #24]
 8017e70:	9c07      	ldr	r4, [sp, #28]
 8017e72:	9312      	str	r3, [sp, #72]	; 0x48
 8017e74:	9413      	str	r4, [sp, #76]	; 0x4c
 8017e76:	2f00      	cmp	r7, #0
 8017e78:	dc00      	bgt.n	8017e7c <_dtoa_r+0x23c>
 8017e7a:	e08b      	b.n	8017f94 <_dtoa_r+0x354>
 8017e7c:	210f      	movs	r1, #15
 8017e7e:	003a      	movs	r2, r7
 8017e80:	4b3f      	ldr	r3, [pc, #252]	; (8017f80 <_dtoa_r+0x340>)
 8017e82:	400a      	ands	r2, r1
 8017e84:	00d2      	lsls	r2, r2, #3
 8017e86:	189b      	adds	r3, r3, r2
 8017e88:	681d      	ldr	r5, [r3, #0]
 8017e8a:	685e      	ldr	r6, [r3, #4]
 8017e8c:	2302      	movs	r3, #2
 8017e8e:	113c      	asrs	r4, r7, #4
 8017e90:	930e      	str	r3, [sp, #56]	; 0x38
 8017e92:	06e3      	lsls	r3, r4, #27
 8017e94:	d50b      	bpl.n	8017eae <_dtoa_r+0x26e>
 8017e96:	4b3e      	ldr	r3, [pc, #248]	; (8017f90 <_dtoa_r+0x350>)
 8017e98:	400c      	ands	r4, r1
 8017e9a:	6a1a      	ldr	r2, [r3, #32]
 8017e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017ea0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017ea2:	f7e9 febd 	bl	8001c20 <__aeabi_ddiv>
 8017ea6:	2303      	movs	r3, #3
 8017ea8:	9006      	str	r0, [sp, #24]
 8017eaa:	9107      	str	r1, [sp, #28]
 8017eac:	930e      	str	r3, [sp, #56]	; 0x38
 8017eae:	2300      	movs	r3, #0
 8017eb0:	e03b      	b.n	8017f2a <_dtoa_r+0x2ea>
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8017eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017eb8:	18fb      	adds	r3, r7, r3
 8017eba:	930c      	str	r3, [sp, #48]	; 0x30
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	dcbd      	bgt.n	8017e40 <_dtoa_r+0x200>
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	e7bb      	b.n	8017e40 <_dtoa_r+0x200>
 8017ec8:	2300      	movs	r3, #0
 8017eca:	e7b3      	b.n	8017e34 <_dtoa_r+0x1f4>
 8017ecc:	2300      	movs	r3, #0
 8017ece:	e7f1      	b.n	8017eb4 <_dtoa_r+0x274>
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	940d      	str	r4, [sp, #52]	; 0x34
 8017ed4:	9320      	str	r3, [sp, #128]	; 0x80
 8017ed6:	3b01      	subs	r3, #1
 8017ed8:	2200      	movs	r2, #0
 8017eda:	930c      	str	r3, [sp, #48]	; 0x30
 8017edc:	9309      	str	r3, [sp, #36]	; 0x24
 8017ede:	3313      	adds	r3, #19
 8017ee0:	9221      	str	r2, [sp, #132]	; 0x84
 8017ee2:	e7ad      	b.n	8017e40 <_dtoa_r+0x200>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8017ee8:	3b02      	subs	r3, #2
 8017eea:	e7f5      	b.n	8017ed8 <_dtoa_r+0x298>
 8017eec:	2301      	movs	r3, #1
 8017eee:	930c      	str	r3, [sp, #48]	; 0x30
 8017ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ef2:	001a      	movs	r2, r3
 8017ef4:	e7f4      	b.n	8017ee0 <_dtoa_r+0x2a0>
 8017ef6:	9802      	ldr	r0, [sp, #8]
 8017ef8:	3101      	adds	r1, #1
 8017efa:	6441      	str	r1, [r0, #68]	; 0x44
 8017efc:	0052      	lsls	r2, r2, #1
 8017efe:	e7a3      	b.n	8017e48 <_dtoa_r+0x208>
 8017f00:	2301      	movs	r3, #1
 8017f02:	421c      	tst	r4, r3
 8017f04:	d00e      	beq.n	8017f24 <_dtoa_r+0x2e4>
 8017f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f08:	4a21      	ldr	r2, [pc, #132]	; (8017f90 <_dtoa_r+0x350>)
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8017f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f10:	0028      	movs	r0, r5
 8017f12:	00db      	lsls	r3, r3, #3
 8017f14:	189b      	adds	r3, r3, r2
 8017f16:	0031      	movs	r1, r6
 8017f18:	681a      	ldr	r2, [r3, #0]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	f7ea fa8a 	bl	8002434 <__aeabi_dmul>
 8017f20:	0005      	movs	r5, r0
 8017f22:	000e      	movs	r6, r1
 8017f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f26:	1064      	asrs	r4, r4, #1
 8017f28:	3301      	adds	r3, #1
 8017f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8017f2c:	2c00      	cmp	r4, #0
 8017f2e:	d1e7      	bne.n	8017f00 <_dtoa_r+0x2c0>
 8017f30:	9806      	ldr	r0, [sp, #24]
 8017f32:	9907      	ldr	r1, [sp, #28]
 8017f34:	002a      	movs	r2, r5
 8017f36:	0033      	movs	r3, r6
 8017f38:	f7e9 fe72 	bl	8001c20 <__aeabi_ddiv>
 8017f3c:	9006      	str	r0, [sp, #24]
 8017f3e:	9107      	str	r1, [sp, #28]
 8017f40:	e043      	b.n	8017fca <_dtoa_r+0x38a>
 8017f42:	46c0      	nop			; (mov r8, r8)
 8017f44:	7ff00000 	.word	0x7ff00000
 8017f48:	0000270f 	.word	0x0000270f
 8017f4c:	0801d41e 	.word	0x0801d41e
 8017f50:	0801d421 	.word	0x0801d421
 8017f54:	0801d2f2 	.word	0x0801d2f2
 8017f58:	0801d2f3 	.word	0x0801d2f3
 8017f5c:	3ff00000 	.word	0x3ff00000
 8017f60:	fffffc01 	.word	0xfffffc01
 8017f64:	3ff80000 	.word	0x3ff80000
 8017f68:	636f4361 	.word	0x636f4361
 8017f6c:	3fd287a7 	.word	0x3fd287a7
 8017f70:	8b60c8b3 	.word	0x8b60c8b3
 8017f74:	3fc68a28 	.word	0x3fc68a28
 8017f78:	509f79fb 	.word	0x509f79fb
 8017f7c:	3fd34413 	.word	0x3fd34413
 8017f80:	0801d450 	.word	0x0801d450
 8017f84:	00000432 	.word	0x00000432
 8017f88:	00000412 	.word	0x00000412
 8017f8c:	fe100000 	.word	0xfe100000
 8017f90:	0801d428 	.word	0x0801d428
 8017f94:	2302      	movs	r3, #2
 8017f96:	930e      	str	r3, [sp, #56]	; 0x38
 8017f98:	2f00      	cmp	r7, #0
 8017f9a:	d016      	beq.n	8017fca <_dtoa_r+0x38a>
 8017f9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017f9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017fa0:	427c      	negs	r4, r7
 8017fa2:	330d      	adds	r3, #13
 8017fa4:	4023      	ands	r3, r4
 8017fa6:	4acf      	ldr	r2, [pc, #828]	; (80182e4 <_dtoa_r+0x6a4>)
 8017fa8:	00db      	lsls	r3, r3, #3
 8017faa:	18d3      	adds	r3, r2, r3
 8017fac:	681a      	ldr	r2, [r3, #0]
 8017fae:	685b      	ldr	r3, [r3, #4]
 8017fb0:	f7ea fa40 	bl	8002434 <__aeabi_dmul>
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	2601      	movs	r6, #1
 8017fb8:	001d      	movs	r5, r3
 8017fba:	9006      	str	r0, [sp, #24]
 8017fbc:	9107      	str	r1, [sp, #28]
 8017fbe:	1124      	asrs	r4, r4, #4
 8017fc0:	2c00      	cmp	r4, #0
 8017fc2:	d000      	beq.n	8017fc6 <_dtoa_r+0x386>
 8017fc4:	e08c      	b.n	80180e0 <_dtoa_r+0x4a0>
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d1b8      	bne.n	8017f3c <_dtoa_r+0x2fc>
 8017fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d100      	bne.n	8017fd2 <_dtoa_r+0x392>
 8017fd0:	e096      	b.n	8018100 <_dtoa_r+0x4c0>
 8017fd2:	9c06      	ldr	r4, [sp, #24]
 8017fd4:	9d07      	ldr	r5, [sp, #28]
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	4bc3      	ldr	r3, [pc, #780]	; (80182e8 <_dtoa_r+0x6a8>)
 8017fda:	0020      	movs	r0, r4
 8017fdc:	0029      	movs	r1, r5
 8017fde:	f7e8 fa43 	bl	8000468 <__aeabi_dcmplt>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d100      	bne.n	8017fe8 <_dtoa_r+0x3a8>
 8017fe6:	e08b      	b.n	8018100 <_dtoa_r+0x4c0>
 8017fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d100      	bne.n	8017ff0 <_dtoa_r+0x3b0>
 8017fee:	e087      	b.n	8018100 <_dtoa_r+0x4c0>
 8017ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	dd41      	ble.n	801807a <_dtoa_r+0x43a>
 8017ff6:	4bbd      	ldr	r3, [pc, #756]	; (80182ec <_dtoa_r+0x6ac>)
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	0020      	movs	r0, r4
 8017ffc:	0029      	movs	r1, r5
 8017ffe:	f7ea fa19 	bl	8002434 <__aeabi_dmul>
 8018002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018004:	9006      	str	r0, [sp, #24]
 8018006:	9107      	str	r1, [sp, #28]
 8018008:	3301      	adds	r3, #1
 801800a:	930e      	str	r3, [sp, #56]	; 0x38
 801800c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801800e:	1e7e      	subs	r6, r7, #1
 8018010:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018012:	9310      	str	r3, [sp, #64]	; 0x40
 8018014:	f7eb f81a 	bl	800304c <__aeabi_i2d>
 8018018:	9a06      	ldr	r2, [sp, #24]
 801801a:	9b07      	ldr	r3, [sp, #28]
 801801c:	f7ea fa0a 	bl	8002434 <__aeabi_dmul>
 8018020:	2200      	movs	r2, #0
 8018022:	4bb3      	ldr	r3, [pc, #716]	; (80182f0 <_dtoa_r+0x6b0>)
 8018024:	f7e9 fae0 	bl	80015e8 <__aeabi_dadd>
 8018028:	4ab2      	ldr	r2, [pc, #712]	; (80182f4 <_dtoa_r+0x6b4>)
 801802a:	900e      	str	r0, [sp, #56]	; 0x38
 801802c:	910f      	str	r1, [sp, #60]	; 0x3c
 801802e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018030:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018032:	4694      	mov	ip, r2
 8018034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018036:	4463      	add	r3, ip
 8018038:	9315      	str	r3, [sp, #84]	; 0x54
 801803a:	001d      	movs	r5, r3
 801803c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801803e:	2b00      	cmp	r3, #0
 8018040:	d161      	bne.n	8018106 <_dtoa_r+0x4c6>
 8018042:	9806      	ldr	r0, [sp, #24]
 8018044:	9907      	ldr	r1, [sp, #28]
 8018046:	2200      	movs	r2, #0
 8018048:	4bab      	ldr	r3, [pc, #684]	; (80182f8 <_dtoa_r+0x6b8>)
 801804a:	f7ea fc65 	bl	8002918 <__aeabi_dsub>
 801804e:	0022      	movs	r2, r4
 8018050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018052:	9006      	str	r0, [sp, #24]
 8018054:	9107      	str	r1, [sp, #28]
 8018056:	f7e8 fa1b 	bl	8000490 <__aeabi_dcmpgt>
 801805a:	2800      	cmp	r0, #0
 801805c:	d000      	beq.n	8018060 <_dtoa_r+0x420>
 801805e:	e2aa      	b.n	80185b6 <_dtoa_r+0x976>
 8018060:	48a6      	ldr	r0, [pc, #664]	; (80182fc <_dtoa_r+0x6bc>)
 8018062:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018064:	4684      	mov	ip, r0
 8018066:	4461      	add	r1, ip
 8018068:	000b      	movs	r3, r1
 801806a:	9806      	ldr	r0, [sp, #24]
 801806c:	9907      	ldr	r1, [sp, #28]
 801806e:	0022      	movs	r2, r4
 8018070:	f7e8 f9fa 	bl	8000468 <__aeabi_dcmplt>
 8018074:	2800      	cmp	r0, #0
 8018076:	d000      	beq.n	801807a <_dtoa_r+0x43a>
 8018078:	e297      	b.n	80185aa <_dtoa_r+0x96a>
 801807a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801807c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801807e:	9306      	str	r3, [sp, #24]
 8018080:	9407      	str	r4, [sp, #28]
 8018082:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018084:	2b00      	cmp	r3, #0
 8018086:	da00      	bge.n	801808a <_dtoa_r+0x44a>
 8018088:	e15e      	b.n	8018348 <_dtoa_r+0x708>
 801808a:	2f0e      	cmp	r7, #14
 801808c:	dd00      	ble.n	8018090 <_dtoa_r+0x450>
 801808e:	e15b      	b.n	8018348 <_dtoa_r+0x708>
 8018090:	4b94      	ldr	r3, [pc, #592]	; (80182e4 <_dtoa_r+0x6a4>)
 8018092:	00fa      	lsls	r2, r7, #3
 8018094:	189b      	adds	r3, r3, r2
 8018096:	685c      	ldr	r4, [r3, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	9405      	str	r4, [sp, #20]
 801809e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	db00      	blt.n	80180a6 <_dtoa_r+0x466>
 80180a4:	e0da      	b.n	801825c <_dtoa_r+0x61c>
 80180a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	dd00      	ble.n	80180ae <_dtoa_r+0x46e>
 80180ac:	e0d6      	b.n	801825c <_dtoa_r+0x61c>
 80180ae:	d000      	beq.n	80180b2 <_dtoa_r+0x472>
 80180b0:	e27f      	b.n	80185b2 <_dtoa_r+0x972>
 80180b2:	9804      	ldr	r0, [sp, #16]
 80180b4:	9905      	ldr	r1, [sp, #20]
 80180b6:	2200      	movs	r2, #0
 80180b8:	4b8f      	ldr	r3, [pc, #572]	; (80182f8 <_dtoa_r+0x6b8>)
 80180ba:	f7ea f9bb 	bl	8002434 <__aeabi_dmul>
 80180be:	9a06      	ldr	r2, [sp, #24]
 80180c0:	9b07      	ldr	r3, [sp, #28]
 80180c2:	f7e8 f9ef 	bl	80004a4 <__aeabi_dcmpge>
 80180c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c8:	9304      	str	r3, [sp, #16]
 80180ca:	001e      	movs	r6, r3
 80180cc:	2800      	cmp	r0, #0
 80180ce:	d000      	beq.n	80180d2 <_dtoa_r+0x492>
 80180d0:	e251      	b.n	8018576 <_dtoa_r+0x936>
 80180d2:	9b08      	ldr	r3, [sp, #32]
 80180d4:	9a08      	ldr	r2, [sp, #32]
 80180d6:	1c5d      	adds	r5, r3, #1
 80180d8:	2331      	movs	r3, #49	; 0x31
 80180da:	3701      	adds	r7, #1
 80180dc:	7013      	strb	r3, [r2, #0]
 80180de:	e24d      	b.n	801857c <_dtoa_r+0x93c>
 80180e0:	4234      	tst	r4, r6
 80180e2:	d00a      	beq.n	80180fa <_dtoa_r+0x4ba>
 80180e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180e6:	4a86      	ldr	r2, [pc, #536]	; (8018300 <_dtoa_r+0x6c0>)
 80180e8:	3301      	adds	r3, #1
 80180ea:	930e      	str	r3, [sp, #56]	; 0x38
 80180ec:	00eb      	lsls	r3, r5, #3
 80180ee:	189b      	adds	r3, r3, r2
 80180f0:	681a      	ldr	r2, [r3, #0]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	f7ea f99e 	bl	8002434 <__aeabi_dmul>
 80180f8:	0033      	movs	r3, r6
 80180fa:	1064      	asrs	r4, r4, #1
 80180fc:	3501      	adds	r5, #1
 80180fe:	e75f      	b.n	8017fc0 <_dtoa_r+0x380>
 8018100:	003e      	movs	r6, r7
 8018102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018104:	e784      	b.n	8018010 <_dtoa_r+0x3d0>
 8018106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018108:	1e5a      	subs	r2, r3, #1
 801810a:	4b76      	ldr	r3, [pc, #472]	; (80182e4 <_dtoa_r+0x6a4>)
 801810c:	00d2      	lsls	r2, r2, #3
 801810e:	189b      	adds	r3, r3, r2
 8018110:	6818      	ldr	r0, [r3, #0]
 8018112:	6859      	ldr	r1, [r3, #4]
 8018114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018116:	2b00      	cmp	r3, #0
 8018118:	d04b      	beq.n	80181b2 <_dtoa_r+0x572>
 801811a:	0002      	movs	r2, r0
 801811c:	000b      	movs	r3, r1
 801811e:	2000      	movs	r0, #0
 8018120:	4978      	ldr	r1, [pc, #480]	; (8018304 <_dtoa_r+0x6c4>)
 8018122:	f7e9 fd7d 	bl	8001c20 <__aeabi_ddiv>
 8018126:	002b      	movs	r3, r5
 8018128:	0022      	movs	r2, r4
 801812a:	f7ea fbf5 	bl	8002918 <__aeabi_dsub>
 801812e:	9b08      	ldr	r3, [sp, #32]
 8018130:	900e      	str	r0, [sp, #56]	; 0x38
 8018132:	910f      	str	r1, [sp, #60]	; 0x3c
 8018134:	9315      	str	r3, [sp, #84]	; 0x54
 8018136:	9806      	ldr	r0, [sp, #24]
 8018138:	9907      	ldr	r1, [sp, #28]
 801813a:	f7ea ff51 	bl	8002fe0 <__aeabi_d2iz>
 801813e:	0004      	movs	r4, r0
 8018140:	f7ea ff84 	bl	800304c <__aeabi_i2d>
 8018144:	0002      	movs	r2, r0
 8018146:	000b      	movs	r3, r1
 8018148:	9806      	ldr	r0, [sp, #24]
 801814a:	9907      	ldr	r1, [sp, #28]
 801814c:	f7ea fbe4 	bl	8002918 <__aeabi_dsub>
 8018150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018152:	3430      	adds	r4, #48	; 0x30
 8018154:	1c5d      	adds	r5, r3, #1
 8018156:	701c      	strb	r4, [r3, #0]
 8018158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801815a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801815c:	9006      	str	r0, [sp, #24]
 801815e:	9107      	str	r1, [sp, #28]
 8018160:	f7e8 f982 	bl	8000468 <__aeabi_dcmplt>
 8018164:	2800      	cmp	r0, #0
 8018166:	d16c      	bne.n	8018242 <_dtoa_r+0x602>
 8018168:	9a06      	ldr	r2, [sp, #24]
 801816a:	9b07      	ldr	r3, [sp, #28]
 801816c:	2000      	movs	r0, #0
 801816e:	495e      	ldr	r1, [pc, #376]	; (80182e8 <_dtoa_r+0x6a8>)
 8018170:	f7ea fbd2 	bl	8002918 <__aeabi_dsub>
 8018174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018178:	f7e8 f976 	bl	8000468 <__aeabi_dcmplt>
 801817c:	2800      	cmp	r0, #0
 801817e:	d000      	beq.n	8018182 <_dtoa_r+0x542>
 8018180:	e0c3      	b.n	801830a <_dtoa_r+0x6ca>
 8018182:	9b08      	ldr	r3, [sp, #32]
 8018184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018186:	1aeb      	subs	r3, r5, r3
 8018188:	429a      	cmp	r2, r3
 801818a:	dc00      	bgt.n	801818e <_dtoa_r+0x54e>
 801818c:	e775      	b.n	801807a <_dtoa_r+0x43a>
 801818e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018192:	2200      	movs	r2, #0
 8018194:	4b55      	ldr	r3, [pc, #340]	; (80182ec <_dtoa_r+0x6ac>)
 8018196:	f7ea f94d 	bl	8002434 <__aeabi_dmul>
 801819a:	2200      	movs	r2, #0
 801819c:	900e      	str	r0, [sp, #56]	; 0x38
 801819e:	910f      	str	r1, [sp, #60]	; 0x3c
 80181a0:	9806      	ldr	r0, [sp, #24]
 80181a2:	9907      	ldr	r1, [sp, #28]
 80181a4:	4b51      	ldr	r3, [pc, #324]	; (80182ec <_dtoa_r+0x6ac>)
 80181a6:	f7ea f945 	bl	8002434 <__aeabi_dmul>
 80181aa:	9515      	str	r5, [sp, #84]	; 0x54
 80181ac:	9006      	str	r0, [sp, #24]
 80181ae:	9107      	str	r1, [sp, #28]
 80181b0:	e7c1      	b.n	8018136 <_dtoa_r+0x4f6>
 80181b2:	0022      	movs	r2, r4
 80181b4:	002b      	movs	r3, r5
 80181b6:	f7ea f93d 	bl	8002434 <__aeabi_dmul>
 80181ba:	9c08      	ldr	r4, [sp, #32]
 80181bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181be:	0023      	movs	r3, r4
 80181c0:	4694      	mov	ip, r2
 80181c2:	900e      	str	r0, [sp, #56]	; 0x38
 80181c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80181c6:	4463      	add	r3, ip
 80181c8:	9315      	str	r3, [sp, #84]	; 0x54
 80181ca:	9806      	ldr	r0, [sp, #24]
 80181cc:	9907      	ldr	r1, [sp, #28]
 80181ce:	f7ea ff07 	bl	8002fe0 <__aeabi_d2iz>
 80181d2:	0005      	movs	r5, r0
 80181d4:	f7ea ff3a 	bl	800304c <__aeabi_i2d>
 80181d8:	000b      	movs	r3, r1
 80181da:	0002      	movs	r2, r0
 80181dc:	9806      	ldr	r0, [sp, #24]
 80181de:	9907      	ldr	r1, [sp, #28]
 80181e0:	f7ea fb9a 	bl	8002918 <__aeabi_dsub>
 80181e4:	3530      	adds	r5, #48	; 0x30
 80181e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181e8:	7025      	strb	r5, [r4, #0]
 80181ea:	3401      	adds	r4, #1
 80181ec:	9006      	str	r0, [sp, #24]
 80181ee:	9107      	str	r1, [sp, #28]
 80181f0:	42a3      	cmp	r3, r4
 80181f2:	d12a      	bne.n	801824a <_dtoa_r+0x60a>
 80181f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80181f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80181f8:	9a08      	ldr	r2, [sp, #32]
 80181fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181fc:	4694      	mov	ip, r2
 80181fe:	4463      	add	r3, ip
 8018200:	2200      	movs	r2, #0
 8018202:	001d      	movs	r5, r3
 8018204:	4b3f      	ldr	r3, [pc, #252]	; (8018304 <_dtoa_r+0x6c4>)
 8018206:	f7e9 f9ef 	bl	80015e8 <__aeabi_dadd>
 801820a:	0002      	movs	r2, r0
 801820c:	000b      	movs	r3, r1
 801820e:	9806      	ldr	r0, [sp, #24]
 8018210:	9907      	ldr	r1, [sp, #28]
 8018212:	f7e8 f93d 	bl	8000490 <__aeabi_dcmpgt>
 8018216:	2800      	cmp	r0, #0
 8018218:	d000      	beq.n	801821c <_dtoa_r+0x5dc>
 801821a:	e076      	b.n	801830a <_dtoa_r+0x6ca>
 801821c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801821e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018220:	2000      	movs	r0, #0
 8018222:	4938      	ldr	r1, [pc, #224]	; (8018304 <_dtoa_r+0x6c4>)
 8018224:	f7ea fb78 	bl	8002918 <__aeabi_dsub>
 8018228:	0002      	movs	r2, r0
 801822a:	000b      	movs	r3, r1
 801822c:	9806      	ldr	r0, [sp, #24]
 801822e:	9907      	ldr	r1, [sp, #28]
 8018230:	f7e8 f91a 	bl	8000468 <__aeabi_dcmplt>
 8018234:	2800      	cmp	r0, #0
 8018236:	d100      	bne.n	801823a <_dtoa_r+0x5fa>
 8018238:	e71f      	b.n	801807a <_dtoa_r+0x43a>
 801823a:	1e6b      	subs	r3, r5, #1
 801823c:	781a      	ldrb	r2, [r3, #0]
 801823e:	2a30      	cmp	r2, #48	; 0x30
 8018240:	d001      	beq.n	8018246 <_dtoa_r+0x606>
 8018242:	0037      	movs	r7, r6
 8018244:	e03f      	b.n	80182c6 <_dtoa_r+0x686>
 8018246:	001d      	movs	r5, r3
 8018248:	e7f7      	b.n	801823a <_dtoa_r+0x5fa>
 801824a:	9806      	ldr	r0, [sp, #24]
 801824c:	9907      	ldr	r1, [sp, #28]
 801824e:	2200      	movs	r2, #0
 8018250:	4b26      	ldr	r3, [pc, #152]	; (80182ec <_dtoa_r+0x6ac>)
 8018252:	f7ea f8ef 	bl	8002434 <__aeabi_dmul>
 8018256:	9006      	str	r0, [sp, #24]
 8018258:	9107      	str	r1, [sp, #28]
 801825a:	e7b6      	b.n	80181ca <_dtoa_r+0x58a>
 801825c:	9e08      	ldr	r6, [sp, #32]
 801825e:	9a04      	ldr	r2, [sp, #16]
 8018260:	9b05      	ldr	r3, [sp, #20]
 8018262:	9806      	ldr	r0, [sp, #24]
 8018264:	9907      	ldr	r1, [sp, #28]
 8018266:	f7e9 fcdb 	bl	8001c20 <__aeabi_ddiv>
 801826a:	f7ea feb9 	bl	8002fe0 <__aeabi_d2iz>
 801826e:	0004      	movs	r4, r0
 8018270:	f7ea feec 	bl	800304c <__aeabi_i2d>
 8018274:	9a04      	ldr	r2, [sp, #16]
 8018276:	9b05      	ldr	r3, [sp, #20]
 8018278:	f7ea f8dc 	bl	8002434 <__aeabi_dmul>
 801827c:	0002      	movs	r2, r0
 801827e:	000b      	movs	r3, r1
 8018280:	9806      	ldr	r0, [sp, #24]
 8018282:	9907      	ldr	r1, [sp, #28]
 8018284:	f7ea fb48 	bl	8002918 <__aeabi_dsub>
 8018288:	0023      	movs	r3, r4
 801828a:	3330      	adds	r3, #48	; 0x30
 801828c:	7033      	strb	r3, [r6, #0]
 801828e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018290:	9b08      	ldr	r3, [sp, #32]
 8018292:	1c75      	adds	r5, r6, #1
 8018294:	1aeb      	subs	r3, r5, r3
 8018296:	429a      	cmp	r2, r3
 8018298:	d148      	bne.n	801832c <_dtoa_r+0x6ec>
 801829a:	0002      	movs	r2, r0
 801829c:	000b      	movs	r3, r1
 801829e:	f7e9 f9a3 	bl	80015e8 <__aeabi_dadd>
 80182a2:	9a04      	ldr	r2, [sp, #16]
 80182a4:	9b05      	ldr	r3, [sp, #20]
 80182a6:	9006      	str	r0, [sp, #24]
 80182a8:	9107      	str	r1, [sp, #28]
 80182aa:	f7e8 f8f1 	bl	8000490 <__aeabi_dcmpgt>
 80182ae:	2800      	cmp	r0, #0
 80182b0:	d12a      	bne.n	8018308 <_dtoa_r+0x6c8>
 80182b2:	9a04      	ldr	r2, [sp, #16]
 80182b4:	9b05      	ldr	r3, [sp, #20]
 80182b6:	9806      	ldr	r0, [sp, #24]
 80182b8:	9907      	ldr	r1, [sp, #28]
 80182ba:	f7e8 f8cf 	bl	800045c <__aeabi_dcmpeq>
 80182be:	2800      	cmp	r0, #0
 80182c0:	d001      	beq.n	80182c6 <_dtoa_r+0x686>
 80182c2:	07e3      	lsls	r3, r4, #31
 80182c4:	d420      	bmi.n	8018308 <_dtoa_r+0x6c8>
 80182c6:	9903      	ldr	r1, [sp, #12]
 80182c8:	9802      	ldr	r0, [sp, #8]
 80182ca:	f000 ff35 	bl	8019138 <_Bfree>
 80182ce:	2300      	movs	r3, #0
 80182d0:	702b      	strb	r3, [r5, #0]
 80182d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80182d4:	3701      	adds	r7, #1
 80182d6:	601f      	str	r7, [r3, #0]
 80182d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d100      	bne.n	80182e0 <_dtoa_r+0x6a0>
 80182de:	e4e4      	b.n	8017caa <_dtoa_r+0x6a>
 80182e0:	601d      	str	r5, [r3, #0]
 80182e2:	e4e2      	b.n	8017caa <_dtoa_r+0x6a>
 80182e4:	0801d450 	.word	0x0801d450
 80182e8:	3ff00000 	.word	0x3ff00000
 80182ec:	40240000 	.word	0x40240000
 80182f0:	401c0000 	.word	0x401c0000
 80182f4:	fcc00000 	.word	0xfcc00000
 80182f8:	40140000 	.word	0x40140000
 80182fc:	7cc00000 	.word	0x7cc00000
 8018300:	0801d428 	.word	0x0801d428
 8018304:	3fe00000 	.word	0x3fe00000
 8018308:	003e      	movs	r6, r7
 801830a:	1e6b      	subs	r3, r5, #1
 801830c:	781a      	ldrb	r2, [r3, #0]
 801830e:	2a39      	cmp	r2, #57	; 0x39
 8018310:	d106      	bne.n	8018320 <_dtoa_r+0x6e0>
 8018312:	9a08      	ldr	r2, [sp, #32]
 8018314:	429a      	cmp	r2, r3
 8018316:	d107      	bne.n	8018328 <_dtoa_r+0x6e8>
 8018318:	2330      	movs	r3, #48	; 0x30
 801831a:	7013      	strb	r3, [r2, #0]
 801831c:	0013      	movs	r3, r2
 801831e:	3601      	adds	r6, #1
 8018320:	781a      	ldrb	r2, [r3, #0]
 8018322:	3201      	adds	r2, #1
 8018324:	701a      	strb	r2, [r3, #0]
 8018326:	e78c      	b.n	8018242 <_dtoa_r+0x602>
 8018328:	001d      	movs	r5, r3
 801832a:	e7ee      	b.n	801830a <_dtoa_r+0x6ca>
 801832c:	2200      	movs	r2, #0
 801832e:	4ba4      	ldr	r3, [pc, #656]	; (80185c0 <_dtoa_r+0x980>)
 8018330:	f7ea f880 	bl	8002434 <__aeabi_dmul>
 8018334:	2200      	movs	r2, #0
 8018336:	2300      	movs	r3, #0
 8018338:	9006      	str	r0, [sp, #24]
 801833a:	9107      	str	r1, [sp, #28]
 801833c:	002e      	movs	r6, r5
 801833e:	f7e8 f88d 	bl	800045c <__aeabi_dcmpeq>
 8018342:	2800      	cmp	r0, #0
 8018344:	d08b      	beq.n	801825e <_dtoa_r+0x61e>
 8018346:	e7be      	b.n	80182c6 <_dtoa_r+0x686>
 8018348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801834a:	2a00      	cmp	r2, #0
 801834c:	d100      	bne.n	8018350 <_dtoa_r+0x710>
 801834e:	e0da      	b.n	8018506 <_dtoa_r+0x8c6>
 8018350:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018352:	2a01      	cmp	r2, #1
 8018354:	dd00      	ble.n	8018358 <_dtoa_r+0x718>
 8018356:	e0bd      	b.n	80184d4 <_dtoa_r+0x894>
 8018358:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801835a:	2a00      	cmp	r2, #0
 801835c:	d100      	bne.n	8018360 <_dtoa_r+0x720>
 801835e:	e0b5      	b.n	80184cc <_dtoa_r+0x88c>
 8018360:	4a98      	ldr	r2, [pc, #608]	; (80185c4 <_dtoa_r+0x984>)
 8018362:	189b      	adds	r3, r3, r2
 8018364:	9d04      	ldr	r5, [sp, #16]
 8018366:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801836a:	2101      	movs	r1, #1
 801836c:	18d2      	adds	r2, r2, r3
 801836e:	920a      	str	r2, [sp, #40]	; 0x28
 8018370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018372:	9802      	ldr	r0, [sp, #8]
 8018374:	18d3      	adds	r3, r2, r3
 8018376:	930b      	str	r3, [sp, #44]	; 0x2c
 8018378:	f000 ffad 	bl	80192d6 <__i2b>
 801837c:	0006      	movs	r6, r0
 801837e:	2c00      	cmp	r4, #0
 8018380:	dd0e      	ble.n	80183a0 <_dtoa_r+0x760>
 8018382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018384:	2b00      	cmp	r3, #0
 8018386:	dd0b      	ble.n	80183a0 <_dtoa_r+0x760>
 8018388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801838a:	0023      	movs	r3, r4
 801838c:	4294      	cmp	r4, r2
 801838e:	dd00      	ble.n	8018392 <_dtoa_r+0x752>
 8018390:	0013      	movs	r3, r2
 8018392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018394:	1ae4      	subs	r4, r4, r3
 8018396:	1ad2      	subs	r2, r2, r3
 8018398:	920a      	str	r2, [sp, #40]	; 0x28
 801839a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	930b      	str	r3, [sp, #44]	; 0x2c
 80183a0:	9b04      	ldr	r3, [sp, #16]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d01f      	beq.n	80183e6 <_dtoa_r+0x7a6>
 80183a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d100      	bne.n	80183ae <_dtoa_r+0x76e>
 80183ac:	e0af      	b.n	801850e <_dtoa_r+0x8ce>
 80183ae:	2d00      	cmp	r5, #0
 80183b0:	d011      	beq.n	80183d6 <_dtoa_r+0x796>
 80183b2:	0031      	movs	r1, r6
 80183b4:	002a      	movs	r2, r5
 80183b6:	9802      	ldr	r0, [sp, #8]
 80183b8:	f001 f826 	bl	8019408 <__pow5mult>
 80183bc:	9a03      	ldr	r2, [sp, #12]
 80183be:	0001      	movs	r1, r0
 80183c0:	0006      	movs	r6, r0
 80183c2:	9802      	ldr	r0, [sp, #8]
 80183c4:	f000 ff90 	bl	80192e8 <__multiply>
 80183c8:	9903      	ldr	r1, [sp, #12]
 80183ca:	9010      	str	r0, [sp, #64]	; 0x40
 80183cc:	9802      	ldr	r0, [sp, #8]
 80183ce:	f000 feb3 	bl	8019138 <_Bfree>
 80183d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183d4:	9303      	str	r3, [sp, #12]
 80183d6:	9b04      	ldr	r3, [sp, #16]
 80183d8:	1b5a      	subs	r2, r3, r5
 80183da:	d004      	beq.n	80183e6 <_dtoa_r+0x7a6>
 80183dc:	9903      	ldr	r1, [sp, #12]
 80183de:	9802      	ldr	r0, [sp, #8]
 80183e0:	f001 f812 	bl	8019408 <__pow5mult>
 80183e4:	9003      	str	r0, [sp, #12]
 80183e6:	2101      	movs	r1, #1
 80183e8:	9802      	ldr	r0, [sp, #8]
 80183ea:	f000 ff74 	bl	80192d6 <__i2b>
 80183ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183f0:	9004      	str	r0, [sp, #16]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d100      	bne.n	80183f8 <_dtoa_r+0x7b8>
 80183f6:	e1e3      	b.n	80187c0 <_dtoa_r+0xb80>
 80183f8:	001a      	movs	r2, r3
 80183fa:	0001      	movs	r1, r0
 80183fc:	9802      	ldr	r0, [sp, #8]
 80183fe:	f001 f803 	bl	8019408 <__pow5mult>
 8018402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018404:	9004      	str	r0, [sp, #16]
 8018406:	2b01      	cmp	r3, #1
 8018408:	dd00      	ble.n	801840c <_dtoa_r+0x7cc>
 801840a:	e082      	b.n	8018512 <_dtoa_r+0x8d2>
 801840c:	2500      	movs	r5, #0
 801840e:	9b06      	ldr	r3, [sp, #24]
 8018410:	42ab      	cmp	r3, r5
 8018412:	d10e      	bne.n	8018432 <_dtoa_r+0x7f2>
 8018414:	9b07      	ldr	r3, [sp, #28]
 8018416:	031b      	lsls	r3, r3, #12
 8018418:	42ab      	cmp	r3, r5
 801841a:	d10a      	bne.n	8018432 <_dtoa_r+0x7f2>
 801841c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801841e:	9a07      	ldr	r2, [sp, #28]
 8018420:	4213      	tst	r3, r2
 8018422:	d006      	beq.n	8018432 <_dtoa_r+0x7f2>
 8018424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018426:	3501      	adds	r5, #1
 8018428:	3301      	adds	r3, #1
 801842a:	930a      	str	r3, [sp, #40]	; 0x28
 801842c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801842e:	3301      	adds	r3, #1
 8018430:	930b      	str	r3, [sp, #44]	; 0x2c
 8018432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018434:	2001      	movs	r0, #1
 8018436:	2b00      	cmp	r3, #0
 8018438:	d16c      	bne.n	8018514 <_dtoa_r+0x8d4>
 801843a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801843c:	1818      	adds	r0, r3, r0
 801843e:	231f      	movs	r3, #31
 8018440:	4018      	ands	r0, r3
 8018442:	d07e      	beq.n	8018542 <_dtoa_r+0x902>
 8018444:	3301      	adds	r3, #1
 8018446:	1a1b      	subs	r3, r3, r0
 8018448:	2b04      	cmp	r3, #4
 801844a:	dd70      	ble.n	801852e <_dtoa_r+0x8ee>
 801844c:	231c      	movs	r3, #28
 801844e:	1a18      	subs	r0, r3, r0
 8018450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018452:	1824      	adds	r4, r4, r0
 8018454:	181b      	adds	r3, r3, r0
 8018456:	930a      	str	r3, [sp, #40]	; 0x28
 8018458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801845a:	181b      	adds	r3, r3, r0
 801845c:	930b      	str	r3, [sp, #44]	; 0x2c
 801845e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018460:	2b00      	cmp	r3, #0
 8018462:	dd05      	ble.n	8018470 <_dtoa_r+0x830>
 8018464:	001a      	movs	r2, r3
 8018466:	9903      	ldr	r1, [sp, #12]
 8018468:	9802      	ldr	r0, [sp, #8]
 801846a:	f001 f80f 	bl	801948c <__lshift>
 801846e:	9003      	str	r0, [sp, #12]
 8018470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018472:	2b00      	cmp	r3, #0
 8018474:	dd05      	ble.n	8018482 <_dtoa_r+0x842>
 8018476:	001a      	movs	r2, r3
 8018478:	9904      	ldr	r1, [sp, #16]
 801847a:	9802      	ldr	r0, [sp, #8]
 801847c:	f001 f806 	bl	801948c <__lshift>
 8018480:	9004      	str	r0, [sp, #16]
 8018482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018484:	2b00      	cmp	r3, #0
 8018486:	d05e      	beq.n	8018546 <_dtoa_r+0x906>
 8018488:	9904      	ldr	r1, [sp, #16]
 801848a:	9803      	ldr	r0, [sp, #12]
 801848c:	f001 f850 	bl	8019530 <__mcmp>
 8018490:	2800      	cmp	r0, #0
 8018492:	da58      	bge.n	8018546 <_dtoa_r+0x906>
 8018494:	2300      	movs	r3, #0
 8018496:	220a      	movs	r2, #10
 8018498:	9903      	ldr	r1, [sp, #12]
 801849a:	9802      	ldr	r0, [sp, #8]
 801849c:	f000 fe56 	bl	801914c <__multadd>
 80184a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184a2:	3f01      	subs	r7, #1
 80184a4:	9003      	str	r0, [sp, #12]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d100      	bne.n	80184ac <_dtoa_r+0x86c>
 80184aa:	e190      	b.n	80187ce <_dtoa_r+0xb8e>
 80184ac:	2300      	movs	r3, #0
 80184ae:	0031      	movs	r1, r6
 80184b0:	220a      	movs	r2, #10
 80184b2:	9802      	ldr	r0, [sp, #8]
 80184b4:	f000 fe4a 	bl	801914c <__multadd>
 80184b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184ba:	0006      	movs	r6, r0
 80184bc:	2b00      	cmp	r3, #0
 80184be:	dd00      	ble.n	80184c2 <_dtoa_r+0x882>
 80184c0:	e088      	b.n	80185d4 <_dtoa_r+0x994>
 80184c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80184c4:	2b02      	cmp	r3, #2
 80184c6:	dc00      	bgt.n	80184ca <_dtoa_r+0x88a>
 80184c8:	e084      	b.n	80185d4 <_dtoa_r+0x994>
 80184ca:	e044      	b.n	8018556 <_dtoa_r+0x916>
 80184cc:	2336      	movs	r3, #54	; 0x36
 80184ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80184d0:	1a9b      	subs	r3, r3, r2
 80184d2:	e747      	b.n	8018364 <_dtoa_r+0x724>
 80184d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184d6:	1e5d      	subs	r5, r3, #1
 80184d8:	9b04      	ldr	r3, [sp, #16]
 80184da:	42ab      	cmp	r3, r5
 80184dc:	db08      	blt.n	80184f0 <_dtoa_r+0x8b0>
 80184de:	1b5d      	subs	r5, r3, r5
 80184e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	da0c      	bge.n	8018500 <_dtoa_r+0x8c0>
 80184e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184ea:	1a9c      	subs	r4, r3, r2
 80184ec:	2300      	movs	r3, #0
 80184ee:	e73b      	b.n	8018368 <_dtoa_r+0x728>
 80184f0:	9b04      	ldr	r3, [sp, #16]
 80184f2:	9504      	str	r5, [sp, #16]
 80184f4:	1aea      	subs	r2, r5, r3
 80184f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184f8:	2500      	movs	r5, #0
 80184fa:	189b      	adds	r3, r3, r2
 80184fc:	9311      	str	r3, [sp, #68]	; 0x44
 80184fe:	e7ef      	b.n	80184e0 <_dtoa_r+0x8a0>
 8018500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018504:	e730      	b.n	8018368 <_dtoa_r+0x728>
 8018506:	9d04      	ldr	r5, [sp, #16]
 8018508:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801850a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801850c:	e737      	b.n	801837e <_dtoa_r+0x73e>
 801850e:	9a04      	ldr	r2, [sp, #16]
 8018510:	e764      	b.n	80183dc <_dtoa_r+0x79c>
 8018512:	2500      	movs	r5, #0
 8018514:	9b04      	ldr	r3, [sp, #16]
 8018516:	9a04      	ldr	r2, [sp, #16]
 8018518:	691b      	ldr	r3, [r3, #16]
 801851a:	9310      	str	r3, [sp, #64]	; 0x40
 801851c:	3303      	adds	r3, #3
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	18d3      	adds	r3, r2, r3
 8018522:	6858      	ldr	r0, [r3, #4]
 8018524:	f000 fe8e 	bl	8019244 <__hi0bits>
 8018528:	2320      	movs	r3, #32
 801852a:	1a18      	subs	r0, r3, r0
 801852c:	e785      	b.n	801843a <_dtoa_r+0x7fa>
 801852e:	2b04      	cmp	r3, #4
 8018530:	d095      	beq.n	801845e <_dtoa_r+0x81e>
 8018532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018534:	331c      	adds	r3, #28
 8018536:	18d2      	adds	r2, r2, r3
 8018538:	920a      	str	r2, [sp, #40]	; 0x28
 801853a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801853c:	18e4      	adds	r4, r4, r3
 801853e:	18d3      	adds	r3, r2, r3
 8018540:	e78c      	b.n	801845c <_dtoa_r+0x81c>
 8018542:	0003      	movs	r3, r0
 8018544:	e7f5      	b.n	8018532 <_dtoa_r+0x8f2>
 8018546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018548:	2b00      	cmp	r3, #0
 801854a:	dc3d      	bgt.n	80185c8 <_dtoa_r+0x988>
 801854c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801854e:	2b02      	cmp	r3, #2
 8018550:	dd3a      	ble.n	80185c8 <_dtoa_r+0x988>
 8018552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018554:	930c      	str	r3, [sp, #48]	; 0x30
 8018556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018558:	2b00      	cmp	r3, #0
 801855a:	d10c      	bne.n	8018576 <_dtoa_r+0x936>
 801855c:	9904      	ldr	r1, [sp, #16]
 801855e:	2205      	movs	r2, #5
 8018560:	9802      	ldr	r0, [sp, #8]
 8018562:	f000 fdf3 	bl	801914c <__multadd>
 8018566:	9004      	str	r0, [sp, #16]
 8018568:	0001      	movs	r1, r0
 801856a:	9803      	ldr	r0, [sp, #12]
 801856c:	f000 ffe0 	bl	8019530 <__mcmp>
 8018570:	2800      	cmp	r0, #0
 8018572:	dd00      	ble.n	8018576 <_dtoa_r+0x936>
 8018574:	e5ad      	b.n	80180d2 <_dtoa_r+0x492>
 8018576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018578:	9d08      	ldr	r5, [sp, #32]
 801857a:	43df      	mvns	r7, r3
 801857c:	2300      	movs	r3, #0
 801857e:	9309      	str	r3, [sp, #36]	; 0x24
 8018580:	9904      	ldr	r1, [sp, #16]
 8018582:	9802      	ldr	r0, [sp, #8]
 8018584:	f000 fdd8 	bl	8019138 <_Bfree>
 8018588:	2e00      	cmp	r6, #0
 801858a:	d100      	bne.n	801858e <_dtoa_r+0x94e>
 801858c:	e69b      	b.n	80182c6 <_dtoa_r+0x686>
 801858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018590:	2b00      	cmp	r3, #0
 8018592:	d005      	beq.n	80185a0 <_dtoa_r+0x960>
 8018594:	42b3      	cmp	r3, r6
 8018596:	d003      	beq.n	80185a0 <_dtoa_r+0x960>
 8018598:	0019      	movs	r1, r3
 801859a:	9802      	ldr	r0, [sp, #8]
 801859c:	f000 fdcc 	bl	8019138 <_Bfree>
 80185a0:	0031      	movs	r1, r6
 80185a2:	9802      	ldr	r0, [sp, #8]
 80185a4:	f000 fdc8 	bl	8019138 <_Bfree>
 80185a8:	e68d      	b.n	80182c6 <_dtoa_r+0x686>
 80185aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185ac:	9304      	str	r3, [sp, #16]
 80185ae:	001e      	movs	r6, r3
 80185b0:	e7e1      	b.n	8018576 <_dtoa_r+0x936>
 80185b2:	2300      	movs	r3, #0
 80185b4:	e7fa      	b.n	80185ac <_dtoa_r+0x96c>
 80185b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185b8:	0037      	movs	r7, r6
 80185ba:	9304      	str	r3, [sp, #16]
 80185bc:	001e      	movs	r6, r3
 80185be:	e588      	b.n	80180d2 <_dtoa_r+0x492>
 80185c0:	40240000 	.word	0x40240000
 80185c4:	00000433 	.word	0x00000433
 80185c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d100      	bne.n	80185d0 <_dtoa_r+0x990>
 80185ce:	e0b2      	b.n	8018736 <_dtoa_r+0xaf6>
 80185d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185d2:	930c      	str	r3, [sp, #48]	; 0x30
 80185d4:	2c00      	cmp	r4, #0
 80185d6:	dd05      	ble.n	80185e4 <_dtoa_r+0x9a4>
 80185d8:	0031      	movs	r1, r6
 80185da:	0022      	movs	r2, r4
 80185dc:	9802      	ldr	r0, [sp, #8]
 80185de:	f000 ff55 	bl	801948c <__lshift>
 80185e2:	0006      	movs	r6, r0
 80185e4:	0030      	movs	r0, r6
 80185e6:	2d00      	cmp	r5, #0
 80185e8:	d011      	beq.n	801860e <_dtoa_r+0x9ce>
 80185ea:	6871      	ldr	r1, [r6, #4]
 80185ec:	9802      	ldr	r0, [sp, #8]
 80185ee:	f000 fd7b 	bl	80190e8 <_Balloc>
 80185f2:	0031      	movs	r1, r6
 80185f4:	0004      	movs	r4, r0
 80185f6:	6933      	ldr	r3, [r6, #16]
 80185f8:	310c      	adds	r1, #12
 80185fa:	1c9a      	adds	r2, r3, #2
 80185fc:	0092      	lsls	r2, r2, #2
 80185fe:	300c      	adds	r0, #12
 8018600:	f7fc fe8b 	bl	801531a <memcpy>
 8018604:	2201      	movs	r2, #1
 8018606:	0021      	movs	r1, r4
 8018608:	9802      	ldr	r0, [sp, #8]
 801860a:	f000 ff3f 	bl	801948c <__lshift>
 801860e:	9609      	str	r6, [sp, #36]	; 0x24
 8018610:	0006      	movs	r6, r0
 8018612:	9b08      	ldr	r3, [sp, #32]
 8018614:	930a      	str	r3, [sp, #40]	; 0x28
 8018616:	9904      	ldr	r1, [sp, #16]
 8018618:	9803      	ldr	r0, [sp, #12]
 801861a:	f7ff fa8b 	bl	8017b34 <quorem>
 801861e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018620:	900d      	str	r0, [sp, #52]	; 0x34
 8018622:	0004      	movs	r4, r0
 8018624:	9803      	ldr	r0, [sp, #12]
 8018626:	f000 ff83 	bl	8019530 <__mcmp>
 801862a:	0032      	movs	r2, r6
 801862c:	9010      	str	r0, [sp, #64]	; 0x40
 801862e:	9904      	ldr	r1, [sp, #16]
 8018630:	9802      	ldr	r0, [sp, #8]
 8018632:	f000 ff97 	bl	8019564 <__mdiff>
 8018636:	2301      	movs	r3, #1
 8018638:	930b      	str	r3, [sp, #44]	; 0x2c
 801863a:	68c3      	ldr	r3, [r0, #12]
 801863c:	3430      	adds	r4, #48	; 0x30
 801863e:	0005      	movs	r5, r0
 8018640:	2b00      	cmp	r3, #0
 8018642:	d104      	bne.n	801864e <_dtoa_r+0xa0e>
 8018644:	0001      	movs	r1, r0
 8018646:	9803      	ldr	r0, [sp, #12]
 8018648:	f000 ff72 	bl	8019530 <__mcmp>
 801864c:	900b      	str	r0, [sp, #44]	; 0x2c
 801864e:	0029      	movs	r1, r5
 8018650:	9802      	ldr	r0, [sp, #8]
 8018652:	f000 fd71 	bl	8019138 <_Bfree>
 8018656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801865a:	4313      	orrs	r3, r2
 801865c:	d10e      	bne.n	801867c <_dtoa_r+0xa3c>
 801865e:	9a06      	ldr	r2, [sp, #24]
 8018660:	3301      	adds	r3, #1
 8018662:	4213      	tst	r3, r2
 8018664:	d10a      	bne.n	801867c <_dtoa_r+0xa3c>
 8018666:	2c39      	cmp	r4, #57	; 0x39
 8018668:	d026      	beq.n	80186b8 <_dtoa_r+0xa78>
 801866a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801866c:	2b00      	cmp	r3, #0
 801866e:	dd01      	ble.n	8018674 <_dtoa_r+0xa34>
 8018670:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018672:	3431      	adds	r4, #49	; 0x31
 8018674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018676:	1c5d      	adds	r5, r3, #1
 8018678:	701c      	strb	r4, [r3, #0]
 801867a:	e781      	b.n	8018580 <_dtoa_r+0x940>
 801867c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801867e:	2b00      	cmp	r3, #0
 8018680:	db07      	blt.n	8018692 <_dtoa_r+0xa52>
 8018682:	001d      	movs	r5, r3
 8018684:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018686:	431d      	orrs	r5, r3
 8018688:	d122      	bne.n	80186d0 <_dtoa_r+0xa90>
 801868a:	2301      	movs	r3, #1
 801868c:	9a06      	ldr	r2, [sp, #24]
 801868e:	4213      	tst	r3, r2
 8018690:	d11e      	bne.n	80186d0 <_dtoa_r+0xa90>
 8018692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018694:	2b00      	cmp	r3, #0
 8018696:	dded      	ble.n	8018674 <_dtoa_r+0xa34>
 8018698:	9903      	ldr	r1, [sp, #12]
 801869a:	2201      	movs	r2, #1
 801869c:	9802      	ldr	r0, [sp, #8]
 801869e:	f000 fef5 	bl	801948c <__lshift>
 80186a2:	9904      	ldr	r1, [sp, #16]
 80186a4:	9003      	str	r0, [sp, #12]
 80186a6:	f000 ff43 	bl	8019530 <__mcmp>
 80186aa:	2800      	cmp	r0, #0
 80186ac:	dc02      	bgt.n	80186b4 <_dtoa_r+0xa74>
 80186ae:	d1e1      	bne.n	8018674 <_dtoa_r+0xa34>
 80186b0:	07e3      	lsls	r3, r4, #31
 80186b2:	d5df      	bpl.n	8018674 <_dtoa_r+0xa34>
 80186b4:	2c39      	cmp	r4, #57	; 0x39
 80186b6:	d1db      	bne.n	8018670 <_dtoa_r+0xa30>
 80186b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186bc:	1c5d      	adds	r5, r3, #1
 80186be:	2339      	movs	r3, #57	; 0x39
 80186c0:	7013      	strb	r3, [r2, #0]
 80186c2:	1e6b      	subs	r3, r5, #1
 80186c4:	781a      	ldrb	r2, [r3, #0]
 80186c6:	2a39      	cmp	r2, #57	; 0x39
 80186c8:	d067      	beq.n	801879a <_dtoa_r+0xb5a>
 80186ca:	3201      	adds	r2, #1
 80186cc:	701a      	strb	r2, [r3, #0]
 80186ce:	e757      	b.n	8018580 <_dtoa_r+0x940>
 80186d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186d2:	1c5d      	adds	r5, r3, #1
 80186d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	dd04      	ble.n	80186e4 <_dtoa_r+0xaa4>
 80186da:	2c39      	cmp	r4, #57	; 0x39
 80186dc:	d0ec      	beq.n	80186b8 <_dtoa_r+0xa78>
 80186de:	3401      	adds	r4, #1
 80186e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186e2:	e7c9      	b.n	8018678 <_dtoa_r+0xa38>
 80186e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186e8:	701c      	strb	r4, [r3, #0]
 80186ea:	9b08      	ldr	r3, [sp, #32]
 80186ec:	1aeb      	subs	r3, r5, r3
 80186ee:	4293      	cmp	r3, r2
 80186f0:	d03e      	beq.n	8018770 <_dtoa_r+0xb30>
 80186f2:	2300      	movs	r3, #0
 80186f4:	220a      	movs	r2, #10
 80186f6:	9903      	ldr	r1, [sp, #12]
 80186f8:	9802      	ldr	r0, [sp, #8]
 80186fa:	f000 fd27 	bl	801914c <__multadd>
 80186fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018700:	9003      	str	r0, [sp, #12]
 8018702:	42b3      	cmp	r3, r6
 8018704:	d109      	bne.n	801871a <_dtoa_r+0xada>
 8018706:	2300      	movs	r3, #0
 8018708:	220a      	movs	r2, #10
 801870a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801870c:	9802      	ldr	r0, [sp, #8]
 801870e:	f000 fd1d 	bl	801914c <__multadd>
 8018712:	9009      	str	r0, [sp, #36]	; 0x24
 8018714:	0006      	movs	r6, r0
 8018716:	950a      	str	r5, [sp, #40]	; 0x28
 8018718:	e77d      	b.n	8018616 <_dtoa_r+0x9d6>
 801871a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801871c:	2300      	movs	r3, #0
 801871e:	220a      	movs	r2, #10
 8018720:	9802      	ldr	r0, [sp, #8]
 8018722:	f000 fd13 	bl	801914c <__multadd>
 8018726:	2300      	movs	r3, #0
 8018728:	9009      	str	r0, [sp, #36]	; 0x24
 801872a:	220a      	movs	r2, #10
 801872c:	0031      	movs	r1, r6
 801872e:	9802      	ldr	r0, [sp, #8]
 8018730:	f000 fd0c 	bl	801914c <__multadd>
 8018734:	e7ee      	b.n	8018714 <_dtoa_r+0xad4>
 8018736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018738:	930c      	str	r3, [sp, #48]	; 0x30
 801873a:	9b08      	ldr	r3, [sp, #32]
 801873c:	9306      	str	r3, [sp, #24]
 801873e:	9904      	ldr	r1, [sp, #16]
 8018740:	9803      	ldr	r0, [sp, #12]
 8018742:	f7ff f9f7 	bl	8017b34 <quorem>
 8018746:	9b06      	ldr	r3, [sp, #24]
 8018748:	3030      	adds	r0, #48	; 0x30
 801874a:	1c5d      	adds	r5, r3, #1
 801874c:	7018      	strb	r0, [r3, #0]
 801874e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018750:	9b08      	ldr	r3, [sp, #32]
 8018752:	0004      	movs	r4, r0
 8018754:	1aeb      	subs	r3, r5, r3
 8018756:	429a      	cmp	r2, r3
 8018758:	dd08      	ble.n	801876c <_dtoa_r+0xb2c>
 801875a:	2300      	movs	r3, #0
 801875c:	220a      	movs	r2, #10
 801875e:	9903      	ldr	r1, [sp, #12]
 8018760:	9802      	ldr	r0, [sp, #8]
 8018762:	f000 fcf3 	bl	801914c <__multadd>
 8018766:	9506      	str	r5, [sp, #24]
 8018768:	9003      	str	r0, [sp, #12]
 801876a:	e7e8      	b.n	801873e <_dtoa_r+0xafe>
 801876c:	2300      	movs	r3, #0
 801876e:	9309      	str	r3, [sp, #36]	; 0x24
 8018770:	9903      	ldr	r1, [sp, #12]
 8018772:	2201      	movs	r2, #1
 8018774:	9802      	ldr	r0, [sp, #8]
 8018776:	f000 fe89 	bl	801948c <__lshift>
 801877a:	9904      	ldr	r1, [sp, #16]
 801877c:	9003      	str	r0, [sp, #12]
 801877e:	f000 fed7 	bl	8019530 <__mcmp>
 8018782:	2800      	cmp	r0, #0
 8018784:	dc9d      	bgt.n	80186c2 <_dtoa_r+0xa82>
 8018786:	d101      	bne.n	801878c <_dtoa_r+0xb4c>
 8018788:	07e3      	lsls	r3, r4, #31
 801878a:	d49a      	bmi.n	80186c2 <_dtoa_r+0xa82>
 801878c:	1e6b      	subs	r3, r5, #1
 801878e:	781a      	ldrb	r2, [r3, #0]
 8018790:	2a30      	cmp	r2, #48	; 0x30
 8018792:	d000      	beq.n	8018796 <_dtoa_r+0xb56>
 8018794:	e6f4      	b.n	8018580 <_dtoa_r+0x940>
 8018796:	001d      	movs	r5, r3
 8018798:	e7f8      	b.n	801878c <_dtoa_r+0xb4c>
 801879a:	9a08      	ldr	r2, [sp, #32]
 801879c:	429a      	cmp	r2, r3
 801879e:	d103      	bne.n	80187a8 <_dtoa_r+0xb68>
 80187a0:	2331      	movs	r3, #49	; 0x31
 80187a2:	3701      	adds	r7, #1
 80187a4:	7013      	strb	r3, [r2, #0]
 80187a6:	e6eb      	b.n	8018580 <_dtoa_r+0x940>
 80187a8:	001d      	movs	r5, r3
 80187aa:	e78a      	b.n	80186c2 <_dtoa_r+0xa82>
 80187ac:	4b0b      	ldr	r3, [pc, #44]	; (80187dc <_dtoa_r+0xb9c>)
 80187ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80187b0:	9308      	str	r3, [sp, #32]
 80187b2:	4b0b      	ldr	r3, [pc, #44]	; (80187e0 <_dtoa_r+0xba0>)
 80187b4:	2a00      	cmp	r2, #0
 80187b6:	d001      	beq.n	80187bc <_dtoa_r+0xb7c>
 80187b8:	f7ff fa75 	bl	8017ca6 <_dtoa_r+0x66>
 80187bc:	f7ff fa75 	bl	8017caa <_dtoa_r+0x6a>
 80187c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	dc00      	bgt.n	80187c8 <_dtoa_r+0xb88>
 80187c6:	e621      	b.n	801840c <_dtoa_r+0x7cc>
 80187c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80187ca:	2001      	movs	r0, #1
 80187cc:	e635      	b.n	801843a <_dtoa_r+0x7fa>
 80187ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	dcb2      	bgt.n	801873a <_dtoa_r+0xafa>
 80187d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80187d6:	2b02      	cmp	r3, #2
 80187d8:	ddaf      	ble.n	801873a <_dtoa_r+0xafa>
 80187da:	e6bc      	b.n	8018556 <_dtoa_r+0x916>
 80187dc:	0801d415 	.word	0x0801d415
 80187e0:	0801d41d 	.word	0x0801d41d

080187e4 <__errno>:
 80187e4:	4b01      	ldr	r3, [pc, #4]	; (80187ec <__errno+0x8>)
 80187e6:	6818      	ldr	r0, [r3, #0]
 80187e8:	4770      	bx	lr
 80187ea:	46c0      	nop			; (mov r8, r8)
 80187ec:	200000d0 	.word	0x200000d0

080187f0 <__libc_fini_array>:
 80187f0:	b570      	push	{r4, r5, r6, lr}
 80187f2:	4d07      	ldr	r5, [pc, #28]	; (8018810 <__libc_fini_array+0x20>)
 80187f4:	4c07      	ldr	r4, [pc, #28]	; (8018814 <__libc_fini_array+0x24>)
 80187f6:	1b64      	subs	r4, r4, r5
 80187f8:	10a4      	asrs	r4, r4, #2
 80187fa:	2c00      	cmp	r4, #0
 80187fc:	d102      	bne.n	8018804 <__libc_fini_array+0x14>
 80187fe:	f001 f987 	bl	8019b10 <_fini>
 8018802:	bd70      	pop	{r4, r5, r6, pc}
 8018804:	3c01      	subs	r4, #1
 8018806:	00a3      	lsls	r3, r4, #2
 8018808:	58eb      	ldr	r3, [r5, r3]
 801880a:	4798      	blx	r3
 801880c:	e7f5      	b.n	80187fa <__libc_fini_array+0xa>
 801880e:	46c0      	nop			; (mov r8, r8)
 8018810:	0801d534 	.word	0x0801d534
 8018814:	0801d538 	.word	0x0801d538

08018818 <_malloc_trim_r>:
 8018818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801881a:	0005      	movs	r5, r0
 801881c:	2008      	movs	r0, #8
 801881e:	000c      	movs	r4, r1
 8018820:	f7ff f95c 	bl	8017adc <sysconf>
 8018824:	0007      	movs	r7, r0
 8018826:	0028      	movs	r0, r5
 8018828:	f7fc fd88 	bl	801533c <__malloc_lock>
 801882c:	2203      	movs	r2, #3
 801882e:	4e21      	ldr	r6, [pc, #132]	; (80188b4 <_malloc_trim_r+0x9c>)
 8018830:	0039      	movs	r1, r7
 8018832:	68b3      	ldr	r3, [r6, #8]
 8018834:	685b      	ldr	r3, [r3, #4]
 8018836:	4393      	bics	r3, r2
 8018838:	1b18      	subs	r0, r3, r4
 801883a:	3811      	subs	r0, #17
 801883c:	19c0      	adds	r0, r0, r7
 801883e:	9301      	str	r3, [sp, #4]
 8018840:	f7e7 fc86 	bl	8000150 <__udivsi3>
 8018844:	1e44      	subs	r4, r0, #1
 8018846:	437c      	muls	r4, r7
 8018848:	42a7      	cmp	r7, r4
 801884a:	dd04      	ble.n	8018856 <_malloc_trim_r+0x3e>
 801884c:	0028      	movs	r0, r5
 801884e:	f7fc fd7d 	bl	801534c <__malloc_unlock>
 8018852:	2000      	movs	r0, #0
 8018854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018856:	2100      	movs	r1, #0
 8018858:	0028      	movs	r0, r5
 801885a:	f7fc ff4f 	bl	80156fc <_sbrk_r>
 801885e:	68b3      	ldr	r3, [r6, #8]
 8018860:	9a01      	ldr	r2, [sp, #4]
 8018862:	189b      	adds	r3, r3, r2
 8018864:	4298      	cmp	r0, r3
 8018866:	d1f1      	bne.n	801884c <_malloc_trim_r+0x34>
 8018868:	4261      	negs	r1, r4
 801886a:	0028      	movs	r0, r5
 801886c:	f7fc ff46 	bl	80156fc <_sbrk_r>
 8018870:	1c43      	adds	r3, r0, #1
 8018872:	d110      	bne.n	8018896 <_malloc_trim_r+0x7e>
 8018874:	2100      	movs	r1, #0
 8018876:	0028      	movs	r0, r5
 8018878:	f7fc ff40 	bl	80156fc <_sbrk_r>
 801887c:	68b2      	ldr	r2, [r6, #8]
 801887e:	1a81      	subs	r1, r0, r2
 8018880:	290f      	cmp	r1, #15
 8018882:	dde3      	ble.n	801884c <_malloc_trim_r+0x34>
 8018884:	4b0c      	ldr	r3, [pc, #48]	; (80188b8 <_malloc_trim_r+0xa0>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	1ac0      	subs	r0, r0, r3
 801888a:	4b0c      	ldr	r3, [pc, #48]	; (80188bc <_malloc_trim_r+0xa4>)
 801888c:	6018      	str	r0, [r3, #0]
 801888e:	2301      	movs	r3, #1
 8018890:	430b      	orrs	r3, r1
 8018892:	6053      	str	r3, [r2, #4]
 8018894:	e7da      	b.n	801884c <_malloc_trim_r+0x34>
 8018896:	68b2      	ldr	r2, [r6, #8]
 8018898:	2601      	movs	r6, #1
 801889a:	9b01      	ldr	r3, [sp, #4]
 801889c:	0028      	movs	r0, r5
 801889e:	1b1b      	subs	r3, r3, r4
 80188a0:	4333      	orrs	r3, r6
 80188a2:	6053      	str	r3, [r2, #4]
 80188a4:	4b05      	ldr	r3, [pc, #20]	; (80188bc <_malloc_trim_r+0xa4>)
 80188a6:	681a      	ldr	r2, [r3, #0]
 80188a8:	1b14      	subs	r4, r2, r4
 80188aa:	601c      	str	r4, [r3, #0]
 80188ac:	f7fc fd4e 	bl	801534c <__malloc_unlock>
 80188b0:	0030      	movs	r0, r6
 80188b2:	e7cf      	b.n	8018854 <_malloc_trim_r+0x3c>
 80188b4:	2000066c 	.word	0x2000066c
 80188b8:	20000a74 	.word	0x20000a74
 80188bc:	20006cec 	.word	0x20006cec

080188c0 <_free_r>:
 80188c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188c2:	1e0d      	subs	r5, r1, #0
 80188c4:	9001      	str	r0, [sp, #4]
 80188c6:	d02d      	beq.n	8018924 <_free_r+0x64>
 80188c8:	f7fc fd38 	bl	801533c <__malloc_lock>
 80188cc:	2301      	movs	r3, #1
 80188ce:	0029      	movs	r1, r5
 80188d0:	469c      	mov	ip, r3
 80188d2:	3908      	subs	r1, #8
 80188d4:	684f      	ldr	r7, [r1, #4]
 80188d6:	4662      	mov	r2, ip
 80188d8:	003b      	movs	r3, r7
 80188da:	4666      	mov	r6, ip
 80188dc:	4393      	bics	r3, r2
 80188de:	18c8      	adds	r0, r1, r3
 80188e0:	6845      	ldr	r5, [r0, #4]
 80188e2:	3202      	adds	r2, #2
 80188e4:	4395      	bics	r5, r2
 80188e6:	4a4a      	ldr	r2, [pc, #296]	; (8018a10 <_free_r+0x150>)
 80188e8:	4037      	ands	r7, r6
 80188ea:	6896      	ldr	r6, [r2, #8]
 80188ec:	4286      	cmp	r6, r0
 80188ee:	d11a      	bne.n	8018926 <_free_r+0x66>
 80188f0:	195b      	adds	r3, r3, r5
 80188f2:	2f00      	cmp	r7, #0
 80188f4:	d106      	bne.n	8018904 <_free_r+0x44>
 80188f6:	6808      	ldr	r0, [r1, #0]
 80188f8:	1a09      	subs	r1, r1, r0
 80188fa:	688d      	ldr	r5, [r1, #8]
 80188fc:	181b      	adds	r3, r3, r0
 80188fe:	68c8      	ldr	r0, [r1, #12]
 8018900:	60e8      	str	r0, [r5, #12]
 8018902:	6085      	str	r5, [r0, #8]
 8018904:	2001      	movs	r0, #1
 8018906:	4318      	orrs	r0, r3
 8018908:	6048      	str	r0, [r1, #4]
 801890a:	6091      	str	r1, [r2, #8]
 801890c:	4a41      	ldr	r2, [pc, #260]	; (8018a14 <_free_r+0x154>)
 801890e:	6812      	ldr	r2, [r2, #0]
 8018910:	429a      	cmp	r2, r3
 8018912:	d804      	bhi.n	801891e <_free_r+0x5e>
 8018914:	4b40      	ldr	r3, [pc, #256]	; (8018a18 <_free_r+0x158>)
 8018916:	9801      	ldr	r0, [sp, #4]
 8018918:	6819      	ldr	r1, [r3, #0]
 801891a:	f7ff ff7d 	bl	8018818 <_malloc_trim_r>
 801891e:	9801      	ldr	r0, [sp, #4]
 8018920:	f7fc fd14 	bl	801534c <__malloc_unlock>
 8018924:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018926:	2600      	movs	r6, #0
 8018928:	6045      	str	r5, [r0, #4]
 801892a:	42b7      	cmp	r7, r6
 801892c:	d109      	bne.n	8018942 <_free_r+0x82>
 801892e:	680f      	ldr	r7, [r1, #0]
 8018930:	4c3a      	ldr	r4, [pc, #232]	; (8018a1c <_free_r+0x15c>)
 8018932:	1bc9      	subs	r1, r1, r7
 8018934:	19db      	adds	r3, r3, r7
 8018936:	688f      	ldr	r7, [r1, #8]
 8018938:	42a7      	cmp	r7, r4
 801893a:	d02b      	beq.n	8018994 <_free_r+0xd4>
 801893c:	68cc      	ldr	r4, [r1, #12]
 801893e:	60fc      	str	r4, [r7, #12]
 8018940:	60a7      	str	r7, [r4, #8]
 8018942:	1947      	adds	r7, r0, r5
 8018944:	687c      	ldr	r4, [r7, #4]
 8018946:	2701      	movs	r7, #1
 8018948:	423c      	tst	r4, r7
 801894a:	d10b      	bne.n	8018964 <_free_r+0xa4>
 801894c:	195b      	adds	r3, r3, r5
 801894e:	6885      	ldr	r5, [r0, #8]
 8018950:	2e00      	cmp	r6, #0
 8018952:	d121      	bne.n	8018998 <_free_r+0xd8>
 8018954:	4c31      	ldr	r4, [pc, #196]	; (8018a1c <_free_r+0x15c>)
 8018956:	42a5      	cmp	r5, r4
 8018958:	d11e      	bne.n	8018998 <_free_r+0xd8>
 801895a:	003e      	movs	r6, r7
 801895c:	6151      	str	r1, [r2, #20]
 801895e:	6111      	str	r1, [r2, #16]
 8018960:	60cd      	str	r5, [r1, #12]
 8018962:	608d      	str	r5, [r1, #8]
 8018964:	2001      	movs	r0, #1
 8018966:	0005      	movs	r5, r0
 8018968:	431d      	orrs	r5, r3
 801896a:	604d      	str	r5, [r1, #4]
 801896c:	50cb      	str	r3, [r1, r3]
 801896e:	2e00      	cmp	r6, #0
 8018970:	d1d5      	bne.n	801891e <_free_r+0x5e>
 8018972:	4d2b      	ldr	r5, [pc, #172]	; (8018a20 <_free_r+0x160>)
 8018974:	42ab      	cmp	r3, r5
 8018976:	d813      	bhi.n	80189a0 <_free_r+0xe0>
 8018978:	08db      	lsrs	r3, r3, #3
 801897a:	109d      	asrs	r5, r3, #2
 801897c:	40a8      	lsls	r0, r5
 801897e:	6854      	ldr	r4, [r2, #4]
 8018980:	00db      	lsls	r3, r3, #3
 8018982:	4320      	orrs	r0, r4
 8018984:	6050      	str	r0, [r2, #4]
 8018986:	189a      	adds	r2, r3, r2
 8018988:	6893      	ldr	r3, [r2, #8]
 801898a:	60ca      	str	r2, [r1, #12]
 801898c:	608b      	str	r3, [r1, #8]
 801898e:	6091      	str	r1, [r2, #8]
 8018990:	60d9      	str	r1, [r3, #12]
 8018992:	e7c4      	b.n	801891e <_free_r+0x5e>
 8018994:	4666      	mov	r6, ip
 8018996:	e7d4      	b.n	8018942 <_free_r+0x82>
 8018998:	68c0      	ldr	r0, [r0, #12]
 801899a:	60e8      	str	r0, [r5, #12]
 801899c:	6085      	str	r5, [r0, #8]
 801899e:	e7e1      	b.n	8018964 <_free_r+0xa4>
 80189a0:	0a5d      	lsrs	r5, r3, #9
 80189a2:	2d04      	cmp	r5, #4
 80189a4:	d812      	bhi.n	80189cc <_free_r+0x10c>
 80189a6:	0998      	lsrs	r0, r3, #6
 80189a8:	3038      	adds	r0, #56	; 0x38
 80189aa:	00c6      	lsls	r6, r0, #3
 80189ac:	18b6      	adds	r6, r6, r2
 80189ae:	68b5      	ldr	r5, [r6, #8]
 80189b0:	2703      	movs	r7, #3
 80189b2:	42ae      	cmp	r6, r5
 80189b4:	d125      	bne.n	8018a02 <_free_r+0x142>
 80189b6:	2301      	movs	r3, #1
 80189b8:	1080      	asrs	r0, r0, #2
 80189ba:	4083      	lsls	r3, r0
 80189bc:	6850      	ldr	r0, [r2, #4]
 80189be:	4303      	orrs	r3, r0
 80189c0:	6053      	str	r3, [r2, #4]
 80189c2:	60ce      	str	r6, [r1, #12]
 80189c4:	608d      	str	r5, [r1, #8]
 80189c6:	60b1      	str	r1, [r6, #8]
 80189c8:	60e9      	str	r1, [r5, #12]
 80189ca:	e7a8      	b.n	801891e <_free_r+0x5e>
 80189cc:	2d14      	cmp	r5, #20
 80189ce:	d802      	bhi.n	80189d6 <_free_r+0x116>
 80189d0:	0028      	movs	r0, r5
 80189d2:	305b      	adds	r0, #91	; 0x5b
 80189d4:	e7e9      	b.n	80189aa <_free_r+0xea>
 80189d6:	2d54      	cmp	r5, #84	; 0x54
 80189d8:	d802      	bhi.n	80189e0 <_free_r+0x120>
 80189da:	0b18      	lsrs	r0, r3, #12
 80189dc:	306e      	adds	r0, #110	; 0x6e
 80189de:	e7e4      	b.n	80189aa <_free_r+0xea>
 80189e0:	20aa      	movs	r0, #170	; 0xaa
 80189e2:	0040      	lsls	r0, r0, #1
 80189e4:	4285      	cmp	r5, r0
 80189e6:	d802      	bhi.n	80189ee <_free_r+0x12e>
 80189e8:	0bd8      	lsrs	r0, r3, #15
 80189ea:	3077      	adds	r0, #119	; 0x77
 80189ec:	e7dd      	b.n	80189aa <_free_r+0xea>
 80189ee:	4e0d      	ldr	r6, [pc, #52]	; (8018a24 <_free_r+0x164>)
 80189f0:	207e      	movs	r0, #126	; 0x7e
 80189f2:	42b5      	cmp	r5, r6
 80189f4:	d8d9      	bhi.n	80189aa <_free_r+0xea>
 80189f6:	0c98      	lsrs	r0, r3, #18
 80189f8:	307c      	adds	r0, #124	; 0x7c
 80189fa:	e7d6      	b.n	80189aa <_free_r+0xea>
 80189fc:	68ad      	ldr	r5, [r5, #8]
 80189fe:	42ae      	cmp	r6, r5
 8018a00:	d003      	beq.n	8018a0a <_free_r+0x14a>
 8018a02:	686a      	ldr	r2, [r5, #4]
 8018a04:	43ba      	bics	r2, r7
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d8f8      	bhi.n	80189fc <_free_r+0x13c>
 8018a0a:	68ee      	ldr	r6, [r5, #12]
 8018a0c:	e7d9      	b.n	80189c2 <_free_r+0x102>
 8018a0e:	46c0      	nop			; (mov r8, r8)
 8018a10:	2000066c 	.word	0x2000066c
 8018a14:	20000a78 	.word	0x20000a78
 8018a18:	20006d1c 	.word	0x20006d1c
 8018a1c:	20000674 	.word	0x20000674
 8018a20:	000001ff 	.word	0x000001ff
 8018a24:	00000554 	.word	0x00000554

08018a28 <rshift>:
 8018a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a2a:	0004      	movs	r4, r0
 8018a2c:	6905      	ldr	r5, [r0, #16]
 8018a2e:	3414      	adds	r4, #20
 8018a30:	114b      	asrs	r3, r1, #5
 8018a32:	0026      	movs	r6, r4
 8018a34:	429d      	cmp	r5, r3
 8018a36:	dd14      	ble.n	8018a62 <rshift+0x3a>
 8018a38:	221f      	movs	r2, #31
 8018a3a:	00ad      	lsls	r5, r5, #2
 8018a3c:	009b      	lsls	r3, r3, #2
 8018a3e:	4011      	ands	r1, r2
 8018a40:	1965      	adds	r5, r4, r5
 8018a42:	18e3      	adds	r3, r4, r3
 8018a44:	0022      	movs	r2, r4
 8018a46:	2900      	cmp	r1, #0
 8018a48:	d01e      	beq.n	8018a88 <rshift+0x60>
 8018a4a:	cb04      	ldmia	r3!, {r2}
 8018a4c:	2720      	movs	r7, #32
 8018a4e:	40ca      	lsrs	r2, r1
 8018a50:	46a4      	mov	ip, r4
 8018a52:	1a7f      	subs	r7, r7, r1
 8018a54:	4666      	mov	r6, ip
 8018a56:	429d      	cmp	r5, r3
 8018a58:	d80b      	bhi.n	8018a72 <rshift+0x4a>
 8018a5a:	6032      	str	r2, [r6, #0]
 8018a5c:	2a00      	cmp	r2, #0
 8018a5e:	d000      	beq.n	8018a62 <rshift+0x3a>
 8018a60:	3604      	adds	r6, #4
 8018a62:	1b33      	subs	r3, r6, r4
 8018a64:	109b      	asrs	r3, r3, #2
 8018a66:	6103      	str	r3, [r0, #16]
 8018a68:	42a6      	cmp	r6, r4
 8018a6a:	d101      	bne.n	8018a70 <rshift+0x48>
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	6143      	str	r3, [r0, #20]
 8018a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a72:	681e      	ldr	r6, [r3, #0]
 8018a74:	40be      	lsls	r6, r7
 8018a76:	4332      	orrs	r2, r6
 8018a78:	4666      	mov	r6, ip
 8018a7a:	c604      	stmia	r6!, {r2}
 8018a7c:	cb04      	ldmia	r3!, {r2}
 8018a7e:	46b4      	mov	ip, r6
 8018a80:	40ca      	lsrs	r2, r1
 8018a82:	e7e7      	b.n	8018a54 <rshift+0x2c>
 8018a84:	cb02      	ldmia	r3!, {r1}
 8018a86:	c202      	stmia	r2!, {r1}
 8018a88:	0016      	movs	r6, r2
 8018a8a:	429d      	cmp	r5, r3
 8018a8c:	d8fa      	bhi.n	8018a84 <rshift+0x5c>
 8018a8e:	e7e8      	b.n	8018a62 <rshift+0x3a>

08018a90 <__hexdig_fun>:
 8018a90:	0003      	movs	r3, r0
 8018a92:	3b30      	subs	r3, #48	; 0x30
 8018a94:	2b09      	cmp	r3, #9
 8018a96:	d803      	bhi.n	8018aa0 <__hexdig_fun+0x10>
 8018a98:	3820      	subs	r0, #32
 8018a9a:	b2c3      	uxtb	r3, r0
 8018a9c:	0018      	movs	r0, r3
 8018a9e:	4770      	bx	lr
 8018aa0:	0003      	movs	r3, r0
 8018aa2:	3b61      	subs	r3, #97	; 0x61
 8018aa4:	2b05      	cmp	r3, #5
 8018aa6:	d801      	bhi.n	8018aac <__hexdig_fun+0x1c>
 8018aa8:	3847      	subs	r0, #71	; 0x47
 8018aaa:	e7f6      	b.n	8018a9a <__hexdig_fun+0xa>
 8018aac:	0002      	movs	r2, r0
 8018aae:	3a41      	subs	r2, #65	; 0x41
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	2a05      	cmp	r2, #5
 8018ab4:	d8f2      	bhi.n	8018a9c <__hexdig_fun+0xc>
 8018ab6:	3827      	subs	r0, #39	; 0x27
 8018ab8:	e7ef      	b.n	8018a9a <__hexdig_fun+0xa>

08018aba <__gethex>:
 8018aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018abc:	b08d      	sub	sp, #52	; 0x34
 8018abe:	9005      	str	r0, [sp, #20]
 8018ac0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018ac2:	9109      	str	r1, [sp, #36]	; 0x24
 8018ac4:	9202      	str	r2, [sp, #8]
 8018ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8018ac8:	f000 fadf 	bl	801908a <__localeconv_l>
 8018acc:	6803      	ldr	r3, [r0, #0]
 8018ace:	0018      	movs	r0, r3
 8018ad0:	9307      	str	r3, [sp, #28]
 8018ad2:	f7e7 fb21 	bl	8000118 <strlen>
 8018ad6:	2202      	movs	r2, #2
 8018ad8:	9b07      	ldr	r3, [sp, #28]
 8018ada:	4252      	negs	r2, r2
 8018adc:	181b      	adds	r3, r3, r0
 8018ade:	3b01      	subs	r3, #1
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	9004      	str	r0, [sp, #16]
 8018ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ae8:	6819      	ldr	r1, [r3, #0]
 8018aea:	1c8b      	adds	r3, r1, #2
 8018aec:	1a52      	subs	r2, r2, r1
 8018aee:	18d1      	adds	r1, r2, r3
 8018af0:	9301      	str	r3, [sp, #4]
 8018af2:	9108      	str	r1, [sp, #32]
 8018af4:	9901      	ldr	r1, [sp, #4]
 8018af6:	3301      	adds	r3, #1
 8018af8:	7808      	ldrb	r0, [r1, #0]
 8018afa:	2830      	cmp	r0, #48	; 0x30
 8018afc:	d0f7      	beq.n	8018aee <__gethex+0x34>
 8018afe:	f7ff ffc7 	bl	8018a90 <__hexdig_fun>
 8018b02:	1e07      	subs	r7, r0, #0
 8018b04:	d000      	beq.n	8018b08 <__gethex+0x4e>
 8018b06:	e06f      	b.n	8018be8 <__gethex+0x12e>
 8018b08:	9a04      	ldr	r2, [sp, #16]
 8018b0a:	9907      	ldr	r1, [sp, #28]
 8018b0c:	9801      	ldr	r0, [sp, #4]
 8018b0e:	f7fc fe4b 	bl	80157a8 <strncmp>
 8018b12:	2800      	cmp	r0, #0
 8018b14:	d000      	beq.n	8018b18 <__gethex+0x5e>
 8018b16:	e06d      	b.n	8018bf4 <__gethex+0x13a>
 8018b18:	9b01      	ldr	r3, [sp, #4]
 8018b1a:	9a04      	ldr	r2, [sp, #16]
 8018b1c:	189c      	adds	r4, r3, r2
 8018b1e:	7820      	ldrb	r0, [r4, #0]
 8018b20:	f7ff ffb6 	bl	8018a90 <__hexdig_fun>
 8018b24:	2800      	cmp	r0, #0
 8018b26:	d069      	beq.n	8018bfc <__gethex+0x142>
 8018b28:	9401      	str	r4, [sp, #4]
 8018b2a:	9b01      	ldr	r3, [sp, #4]
 8018b2c:	7818      	ldrb	r0, [r3, #0]
 8018b2e:	2830      	cmp	r0, #48	; 0x30
 8018b30:	d009      	beq.n	8018b46 <__gethex+0x8c>
 8018b32:	f7ff ffad 	bl	8018a90 <__hexdig_fun>
 8018b36:	4243      	negs	r3, r0
 8018b38:	4143      	adcs	r3, r0
 8018b3a:	9303      	str	r3, [sp, #12]
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	0026      	movs	r6, r4
 8018b40:	9308      	str	r3, [sp, #32]
 8018b42:	9c01      	ldr	r4, [sp, #4]
 8018b44:	e004      	b.n	8018b50 <__gethex+0x96>
 8018b46:	9b01      	ldr	r3, [sp, #4]
 8018b48:	3301      	adds	r3, #1
 8018b4a:	9301      	str	r3, [sp, #4]
 8018b4c:	e7ed      	b.n	8018b2a <__gethex+0x70>
 8018b4e:	3401      	adds	r4, #1
 8018b50:	7820      	ldrb	r0, [r4, #0]
 8018b52:	f7ff ff9d 	bl	8018a90 <__hexdig_fun>
 8018b56:	2800      	cmp	r0, #0
 8018b58:	d1f9      	bne.n	8018b4e <__gethex+0x94>
 8018b5a:	9a04      	ldr	r2, [sp, #16]
 8018b5c:	9907      	ldr	r1, [sp, #28]
 8018b5e:	0020      	movs	r0, r4
 8018b60:	f7fc fe22 	bl	80157a8 <strncmp>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	d109      	bne.n	8018b7c <__gethex+0xc2>
 8018b68:	2e00      	cmp	r6, #0
 8018b6a:	d10a      	bne.n	8018b82 <__gethex+0xc8>
 8018b6c:	9b04      	ldr	r3, [sp, #16]
 8018b6e:	18e4      	adds	r4, r4, r3
 8018b70:	0026      	movs	r6, r4
 8018b72:	7820      	ldrb	r0, [r4, #0]
 8018b74:	f7ff ff8c 	bl	8018a90 <__hexdig_fun>
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d139      	bne.n	8018bf0 <__gethex+0x136>
 8018b7c:	2700      	movs	r7, #0
 8018b7e:	42be      	cmp	r6, r7
 8018b80:	d001      	beq.n	8018b86 <__gethex+0xcc>
 8018b82:	1b37      	subs	r7, r6, r4
 8018b84:	00bf      	lsls	r7, r7, #2
 8018b86:	7823      	ldrb	r3, [r4, #0]
 8018b88:	2b50      	cmp	r3, #80	; 0x50
 8018b8a:	d001      	beq.n	8018b90 <__gethex+0xd6>
 8018b8c:	2b70      	cmp	r3, #112	; 0x70
 8018b8e:	d142      	bne.n	8018c16 <__gethex+0x15c>
 8018b90:	7863      	ldrb	r3, [r4, #1]
 8018b92:	2b2b      	cmp	r3, #43	; 0x2b
 8018b94:	d034      	beq.n	8018c00 <__gethex+0x146>
 8018b96:	2b2d      	cmp	r3, #45	; 0x2d
 8018b98:	d036      	beq.n	8018c08 <__gethex+0x14e>
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	1c66      	adds	r6, r4, #1
 8018b9e:	9306      	str	r3, [sp, #24]
 8018ba0:	7830      	ldrb	r0, [r6, #0]
 8018ba2:	f7ff ff75 	bl	8018a90 <__hexdig_fun>
 8018ba6:	1e43      	subs	r3, r0, #1
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	2b18      	cmp	r3, #24
 8018bac:	d833      	bhi.n	8018c16 <__gethex+0x15c>
 8018bae:	3810      	subs	r0, #16
 8018bb0:	0005      	movs	r5, r0
 8018bb2:	3601      	adds	r6, #1
 8018bb4:	7830      	ldrb	r0, [r6, #0]
 8018bb6:	f7ff ff6b 	bl	8018a90 <__hexdig_fun>
 8018bba:	1e43      	subs	r3, r0, #1
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b18      	cmp	r3, #24
 8018bc0:	d924      	bls.n	8018c0c <__gethex+0x152>
 8018bc2:	9b06      	ldr	r3, [sp, #24]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d000      	beq.n	8018bca <__gethex+0x110>
 8018bc8:	426d      	negs	r5, r5
 8018bca:	197f      	adds	r7, r7, r5
 8018bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bce:	601e      	str	r6, [r3, #0]
 8018bd0:	9b03      	ldr	r3, [sp, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d021      	beq.n	8018c1a <__gethex+0x160>
 8018bd6:	9b08      	ldr	r3, [sp, #32]
 8018bd8:	2606      	movs	r6, #6
 8018bda:	425a      	negs	r2, r3
 8018bdc:	4153      	adcs	r3, r2
 8018bde:	425b      	negs	r3, r3
 8018be0:	401e      	ands	r6, r3
 8018be2:	0030      	movs	r0, r6
 8018be4:	b00d      	add	sp, #52	; 0x34
 8018be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018be8:	2300      	movs	r3, #0
 8018bea:	9303      	str	r3, [sp, #12]
 8018bec:	001e      	movs	r6, r3
 8018bee:	e7a8      	b.n	8018b42 <__gethex+0x88>
 8018bf0:	3401      	adds	r4, #1
 8018bf2:	e7be      	b.n	8018b72 <__gethex+0xb8>
 8018bf4:	9c01      	ldr	r4, [sp, #4]
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	9303      	str	r3, [sp, #12]
 8018bfa:	e7c4      	b.n	8018b86 <__gethex+0xcc>
 8018bfc:	0007      	movs	r7, r0
 8018bfe:	e7fa      	b.n	8018bf6 <__gethex+0x13c>
 8018c00:	2300      	movs	r3, #0
 8018c02:	9306      	str	r3, [sp, #24]
 8018c04:	1ca6      	adds	r6, r4, #2
 8018c06:	e7cb      	b.n	8018ba0 <__gethex+0xe6>
 8018c08:	2301      	movs	r3, #1
 8018c0a:	e7fa      	b.n	8018c02 <__gethex+0x148>
 8018c0c:	230a      	movs	r3, #10
 8018c0e:	435d      	muls	r5, r3
 8018c10:	182d      	adds	r5, r5, r0
 8018c12:	3d10      	subs	r5, #16
 8018c14:	e7cd      	b.n	8018bb2 <__gethex+0xf8>
 8018c16:	0026      	movs	r6, r4
 8018c18:	e7d8      	b.n	8018bcc <__gethex+0x112>
 8018c1a:	9b01      	ldr	r3, [sp, #4]
 8018c1c:	9903      	ldr	r1, [sp, #12]
 8018c1e:	1ae3      	subs	r3, r4, r3
 8018c20:	3b01      	subs	r3, #1
 8018c22:	2b07      	cmp	r3, #7
 8018c24:	dc47      	bgt.n	8018cb6 <__gethex+0x1fc>
 8018c26:	9805      	ldr	r0, [sp, #20]
 8018c28:	f000 fa5e 	bl	80190e8 <_Balloc>
 8018c2c:	0003      	movs	r3, r0
 8018c2e:	3314      	adds	r3, #20
 8018c30:	9303      	str	r3, [sp, #12]
 8018c32:	9308      	str	r3, [sp, #32]
 8018c34:	2300      	movs	r3, #0
 8018c36:	0005      	movs	r5, r0
 8018c38:	001e      	movs	r6, r3
 8018c3a:	9306      	str	r3, [sp, #24]
 8018c3c:	9b01      	ldr	r3, [sp, #4]
 8018c3e:	42a3      	cmp	r3, r4
 8018c40:	d33c      	bcc.n	8018cbc <__gethex+0x202>
 8018c42:	9c08      	ldr	r4, [sp, #32]
 8018c44:	9b03      	ldr	r3, [sp, #12]
 8018c46:	c440      	stmia	r4!, {r6}
 8018c48:	1ae4      	subs	r4, r4, r3
 8018c4a:	10a4      	asrs	r4, r4, #2
 8018c4c:	612c      	str	r4, [r5, #16]
 8018c4e:	0030      	movs	r0, r6
 8018c50:	f000 faf8 	bl	8019244 <__hi0bits>
 8018c54:	9b02      	ldr	r3, [sp, #8]
 8018c56:	0164      	lsls	r4, r4, #5
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	1a26      	subs	r6, r4, r0
 8018c5c:	9301      	str	r3, [sp, #4]
 8018c5e:	429e      	cmp	r6, r3
 8018c60:	dd5f      	ble.n	8018d22 <__gethex+0x268>
 8018c62:	1af6      	subs	r6, r6, r3
 8018c64:	0031      	movs	r1, r6
 8018c66:	0028      	movs	r0, r5
 8018c68:	f000 fde3 	bl	8019832 <__any_on>
 8018c6c:	1e04      	subs	r4, r0, #0
 8018c6e:	d00f      	beq.n	8018c90 <__gethex+0x1d6>
 8018c70:	2401      	movs	r4, #1
 8018c72:	211f      	movs	r1, #31
 8018c74:	0020      	movs	r0, r4
 8018c76:	1e73      	subs	r3, r6, #1
 8018c78:	4019      	ands	r1, r3
 8018c7a:	4088      	lsls	r0, r1
 8018c7c:	0001      	movs	r1, r0
 8018c7e:	115a      	asrs	r2, r3, #5
 8018c80:	9803      	ldr	r0, [sp, #12]
 8018c82:	0092      	lsls	r2, r2, #2
 8018c84:	5812      	ldr	r2, [r2, r0]
 8018c86:	420a      	tst	r2, r1
 8018c88:	d002      	beq.n	8018c90 <__gethex+0x1d6>
 8018c8a:	42a3      	cmp	r3, r4
 8018c8c:	dc41      	bgt.n	8018d12 <__gethex+0x258>
 8018c8e:	2402      	movs	r4, #2
 8018c90:	0031      	movs	r1, r6
 8018c92:	0028      	movs	r0, r5
 8018c94:	f7ff fec8 	bl	8018a28 <rshift>
 8018c98:	19bf      	adds	r7, r7, r6
 8018c9a:	9b02      	ldr	r3, [sp, #8]
 8018c9c:	689b      	ldr	r3, [r3, #8]
 8018c9e:	9304      	str	r3, [sp, #16]
 8018ca0:	42bb      	cmp	r3, r7
 8018ca2:	da4e      	bge.n	8018d42 <__gethex+0x288>
 8018ca4:	0029      	movs	r1, r5
 8018ca6:	9805      	ldr	r0, [sp, #20]
 8018ca8:	f000 fa46 	bl	8019138 <_Bfree>
 8018cac:	2300      	movs	r3, #0
 8018cae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018cb0:	26a3      	movs	r6, #163	; 0xa3
 8018cb2:	6013      	str	r3, [r2, #0]
 8018cb4:	e795      	b.n	8018be2 <__gethex+0x128>
 8018cb6:	3101      	adds	r1, #1
 8018cb8:	105b      	asrs	r3, r3, #1
 8018cba:	e7b2      	b.n	8018c22 <__gethex+0x168>
 8018cbc:	1e63      	subs	r3, r4, #1
 8018cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8018cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018cc2:	781b      	ldrb	r3, [r3, #0]
 8018cc4:	4293      	cmp	r3, r2
 8018cc6:	d015      	beq.n	8018cf4 <__gethex+0x23a>
 8018cc8:	9b06      	ldr	r3, [sp, #24]
 8018cca:	2b20      	cmp	r3, #32
 8018ccc:	d105      	bne.n	8018cda <__gethex+0x220>
 8018cce:	9b08      	ldr	r3, [sp, #32]
 8018cd0:	601e      	str	r6, [r3, #0]
 8018cd2:	2600      	movs	r6, #0
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	9308      	str	r3, [sp, #32]
 8018cd8:	9606      	str	r6, [sp, #24]
 8018cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cdc:	7818      	ldrb	r0, [r3, #0]
 8018cde:	f7ff fed7 	bl	8018a90 <__hexdig_fun>
 8018ce2:	230f      	movs	r3, #15
 8018ce4:	4018      	ands	r0, r3
 8018ce6:	9b06      	ldr	r3, [sp, #24]
 8018ce8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018cea:	4098      	lsls	r0, r3
 8018cec:	3304      	adds	r3, #4
 8018cee:	4306      	orrs	r6, r0
 8018cf0:	9306      	str	r3, [sp, #24]
 8018cf2:	e7a3      	b.n	8018c3c <__gethex+0x182>
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	9a04      	ldr	r2, [sp, #16]
 8018cf8:	1a9c      	subs	r4, r3, r2
 8018cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cfc:	191c      	adds	r4, r3, r4
 8018cfe:	9b01      	ldr	r3, [sp, #4]
 8018d00:	429c      	cmp	r4, r3
 8018d02:	d3e1      	bcc.n	8018cc8 <__gethex+0x20e>
 8018d04:	9907      	ldr	r1, [sp, #28]
 8018d06:	0020      	movs	r0, r4
 8018d08:	f7fc fd4e 	bl	80157a8 <strncmp>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d1db      	bne.n	8018cc8 <__gethex+0x20e>
 8018d10:	e794      	b.n	8018c3c <__gethex+0x182>
 8018d12:	1eb1      	subs	r1, r6, #2
 8018d14:	0028      	movs	r0, r5
 8018d16:	f000 fd8c 	bl	8019832 <__any_on>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	d0b7      	beq.n	8018c8e <__gethex+0x1d4>
 8018d1e:	2403      	movs	r4, #3
 8018d20:	e7b6      	b.n	8018c90 <__gethex+0x1d6>
 8018d22:	9b01      	ldr	r3, [sp, #4]
 8018d24:	2400      	movs	r4, #0
 8018d26:	429e      	cmp	r6, r3
 8018d28:	dab7      	bge.n	8018c9a <__gethex+0x1e0>
 8018d2a:	1b9e      	subs	r6, r3, r6
 8018d2c:	0029      	movs	r1, r5
 8018d2e:	0032      	movs	r2, r6
 8018d30:	9805      	ldr	r0, [sp, #20]
 8018d32:	f000 fbab 	bl	801948c <__lshift>
 8018d36:	0003      	movs	r3, r0
 8018d38:	3314      	adds	r3, #20
 8018d3a:	0005      	movs	r5, r0
 8018d3c:	1bbf      	subs	r7, r7, r6
 8018d3e:	9303      	str	r3, [sp, #12]
 8018d40:	e7ab      	b.n	8018c9a <__gethex+0x1e0>
 8018d42:	9b02      	ldr	r3, [sp, #8]
 8018d44:	685e      	ldr	r6, [r3, #4]
 8018d46:	42be      	cmp	r6, r7
 8018d48:	dd6b      	ble.n	8018e22 <__gethex+0x368>
 8018d4a:	9b01      	ldr	r3, [sp, #4]
 8018d4c:	1bf6      	subs	r6, r6, r7
 8018d4e:	42b3      	cmp	r3, r6
 8018d50:	dc32      	bgt.n	8018db8 <__gethex+0x2fe>
 8018d52:	9b02      	ldr	r3, [sp, #8]
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	2b02      	cmp	r3, #2
 8018d58:	d026      	beq.n	8018da8 <__gethex+0x2ee>
 8018d5a:	2b03      	cmp	r3, #3
 8018d5c:	d028      	beq.n	8018db0 <__gethex+0x2f6>
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d119      	bne.n	8018d96 <__gethex+0x2dc>
 8018d62:	9b01      	ldr	r3, [sp, #4]
 8018d64:	42b3      	cmp	r3, r6
 8018d66:	d116      	bne.n	8018d96 <__gethex+0x2dc>
 8018d68:	2b01      	cmp	r3, #1
 8018d6a:	dc0d      	bgt.n	8018d88 <__gethex+0x2ce>
 8018d6c:	9b02      	ldr	r3, [sp, #8]
 8018d6e:	2662      	movs	r6, #98	; 0x62
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	9301      	str	r3, [sp, #4]
 8018d74:	9a01      	ldr	r2, [sp, #4]
 8018d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d78:	601a      	str	r2, [r3, #0]
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	9a03      	ldr	r2, [sp, #12]
 8018d7e:	612b      	str	r3, [r5, #16]
 8018d80:	6013      	str	r3, [r2, #0]
 8018d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018d84:	601d      	str	r5, [r3, #0]
 8018d86:	e72c      	b.n	8018be2 <__gethex+0x128>
 8018d88:	9901      	ldr	r1, [sp, #4]
 8018d8a:	0028      	movs	r0, r5
 8018d8c:	3901      	subs	r1, #1
 8018d8e:	f000 fd50 	bl	8019832 <__any_on>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	d1ea      	bne.n	8018d6c <__gethex+0x2b2>
 8018d96:	0029      	movs	r1, r5
 8018d98:	9805      	ldr	r0, [sp, #20]
 8018d9a:	f000 f9cd 	bl	8019138 <_Bfree>
 8018d9e:	2300      	movs	r3, #0
 8018da0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018da2:	2650      	movs	r6, #80	; 0x50
 8018da4:	6013      	str	r3, [r2, #0]
 8018da6:	e71c      	b.n	8018be2 <__gethex+0x128>
 8018da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d0de      	beq.n	8018d6c <__gethex+0x2b2>
 8018dae:	e7f2      	b.n	8018d96 <__gethex+0x2dc>
 8018db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d1da      	bne.n	8018d6c <__gethex+0x2b2>
 8018db6:	e7ee      	b.n	8018d96 <__gethex+0x2dc>
 8018db8:	1e77      	subs	r7, r6, #1
 8018dba:	2c00      	cmp	r4, #0
 8018dbc:	d12f      	bne.n	8018e1e <__gethex+0x364>
 8018dbe:	2f00      	cmp	r7, #0
 8018dc0:	d004      	beq.n	8018dcc <__gethex+0x312>
 8018dc2:	0039      	movs	r1, r7
 8018dc4:	0028      	movs	r0, r5
 8018dc6:	f000 fd34 	bl	8019832 <__any_on>
 8018dca:	0004      	movs	r4, r0
 8018dcc:	231f      	movs	r3, #31
 8018dce:	117a      	asrs	r2, r7, #5
 8018dd0:	401f      	ands	r7, r3
 8018dd2:	3b1e      	subs	r3, #30
 8018dd4:	40bb      	lsls	r3, r7
 8018dd6:	9903      	ldr	r1, [sp, #12]
 8018dd8:	0092      	lsls	r2, r2, #2
 8018dda:	5852      	ldr	r2, [r2, r1]
 8018ddc:	421a      	tst	r2, r3
 8018dde:	d001      	beq.n	8018de4 <__gethex+0x32a>
 8018de0:	2302      	movs	r3, #2
 8018de2:	431c      	orrs	r4, r3
 8018de4:	9b01      	ldr	r3, [sp, #4]
 8018de6:	0031      	movs	r1, r6
 8018de8:	1b9b      	subs	r3, r3, r6
 8018dea:	2602      	movs	r6, #2
 8018dec:	0028      	movs	r0, r5
 8018dee:	9301      	str	r3, [sp, #4]
 8018df0:	f7ff fe1a 	bl	8018a28 <rshift>
 8018df4:	9b02      	ldr	r3, [sp, #8]
 8018df6:	685f      	ldr	r7, [r3, #4]
 8018df8:	2c00      	cmp	r4, #0
 8018dfa:	d040      	beq.n	8018e7e <__gethex+0x3c4>
 8018dfc:	9b02      	ldr	r3, [sp, #8]
 8018dfe:	68db      	ldr	r3, [r3, #12]
 8018e00:	2b02      	cmp	r3, #2
 8018e02:	d010      	beq.n	8018e26 <__gethex+0x36c>
 8018e04:	2b03      	cmp	r3, #3
 8018e06:	d012      	beq.n	8018e2e <__gethex+0x374>
 8018e08:	2b01      	cmp	r3, #1
 8018e0a:	d106      	bne.n	8018e1a <__gethex+0x360>
 8018e0c:	07a2      	lsls	r2, r4, #30
 8018e0e:	d504      	bpl.n	8018e1a <__gethex+0x360>
 8018e10:	9a03      	ldr	r2, [sp, #12]
 8018e12:	6812      	ldr	r2, [r2, #0]
 8018e14:	4314      	orrs	r4, r2
 8018e16:	421c      	tst	r4, r3
 8018e18:	d10c      	bne.n	8018e34 <__gethex+0x37a>
 8018e1a:	2310      	movs	r3, #16
 8018e1c:	e02e      	b.n	8018e7c <__gethex+0x3c2>
 8018e1e:	2401      	movs	r4, #1
 8018e20:	e7d4      	b.n	8018dcc <__gethex+0x312>
 8018e22:	2601      	movs	r6, #1
 8018e24:	e7e8      	b.n	8018df8 <__gethex+0x33e>
 8018e26:	2301      	movs	r3, #1
 8018e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e2a:	1a9b      	subs	r3, r3, r2
 8018e2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8018e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d0f2      	beq.n	8018e1a <__gethex+0x360>
 8018e34:	692c      	ldr	r4, [r5, #16]
 8018e36:	00a3      	lsls	r3, r4, #2
 8018e38:	9304      	str	r3, [sp, #16]
 8018e3a:	002b      	movs	r3, r5
 8018e3c:	00a2      	lsls	r2, r4, #2
 8018e3e:	3314      	adds	r3, #20
 8018e40:	1899      	adds	r1, r3, r2
 8018e42:	2200      	movs	r2, #0
 8018e44:	4694      	mov	ip, r2
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	1c50      	adds	r0, r2, #1
 8018e4a:	d01d      	beq.n	8018e88 <__gethex+0x3ce>
 8018e4c:	3201      	adds	r2, #1
 8018e4e:	601a      	str	r2, [r3, #0]
 8018e50:	002b      	movs	r3, r5
 8018e52:	3314      	adds	r3, #20
 8018e54:	2e02      	cmp	r6, #2
 8018e56:	d13a      	bne.n	8018ece <__gethex+0x414>
 8018e58:	9a02      	ldr	r2, [sp, #8]
 8018e5a:	9901      	ldr	r1, [sp, #4]
 8018e5c:	6812      	ldr	r2, [r2, #0]
 8018e5e:	3a01      	subs	r2, #1
 8018e60:	428a      	cmp	r2, r1
 8018e62:	d10a      	bne.n	8018e7a <__gethex+0x3c0>
 8018e64:	114a      	asrs	r2, r1, #5
 8018e66:	211f      	movs	r1, #31
 8018e68:	9801      	ldr	r0, [sp, #4]
 8018e6a:	0092      	lsls	r2, r2, #2
 8018e6c:	4001      	ands	r1, r0
 8018e6e:	2001      	movs	r0, #1
 8018e70:	0004      	movs	r4, r0
 8018e72:	408c      	lsls	r4, r1
 8018e74:	58d3      	ldr	r3, [r2, r3]
 8018e76:	4223      	tst	r3, r4
 8018e78:	d148      	bne.n	8018f0c <__gethex+0x452>
 8018e7a:	2320      	movs	r3, #32
 8018e7c:	431e      	orrs	r6, r3
 8018e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e80:	601d      	str	r5, [r3, #0]
 8018e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e84:	601f      	str	r7, [r3, #0]
 8018e86:	e6ac      	b.n	8018be2 <__gethex+0x128>
 8018e88:	4662      	mov	r2, ip
 8018e8a:	c304      	stmia	r3!, {r2}
 8018e8c:	4299      	cmp	r1, r3
 8018e8e:	d8da      	bhi.n	8018e46 <__gethex+0x38c>
 8018e90:	68ab      	ldr	r3, [r5, #8]
 8018e92:	429c      	cmp	r4, r3
 8018e94:	db12      	blt.n	8018ebc <__gethex+0x402>
 8018e96:	686b      	ldr	r3, [r5, #4]
 8018e98:	9805      	ldr	r0, [sp, #20]
 8018e9a:	1c59      	adds	r1, r3, #1
 8018e9c:	f000 f924 	bl	80190e8 <_Balloc>
 8018ea0:	0029      	movs	r1, r5
 8018ea2:	692b      	ldr	r3, [r5, #16]
 8018ea4:	9003      	str	r0, [sp, #12]
 8018ea6:	1c9a      	adds	r2, r3, #2
 8018ea8:	0092      	lsls	r2, r2, #2
 8018eaa:	310c      	adds	r1, #12
 8018eac:	300c      	adds	r0, #12
 8018eae:	f7fc fa34 	bl	801531a <memcpy>
 8018eb2:	0029      	movs	r1, r5
 8018eb4:	9805      	ldr	r0, [sp, #20]
 8018eb6:	f000 f93f 	bl	8019138 <_Bfree>
 8018eba:	9d03      	ldr	r5, [sp, #12]
 8018ebc:	692b      	ldr	r3, [r5, #16]
 8018ebe:	1c5a      	adds	r2, r3, #1
 8018ec0:	612a      	str	r2, [r5, #16]
 8018ec2:	2201      	movs	r2, #1
 8018ec4:	3304      	adds	r3, #4
 8018ec6:	009b      	lsls	r3, r3, #2
 8018ec8:	18eb      	adds	r3, r5, r3
 8018eca:	605a      	str	r2, [r3, #4]
 8018ecc:	e7c0      	b.n	8018e50 <__gethex+0x396>
 8018ece:	692a      	ldr	r2, [r5, #16]
 8018ed0:	42a2      	cmp	r2, r4
 8018ed2:	dd0a      	ble.n	8018eea <__gethex+0x430>
 8018ed4:	2101      	movs	r1, #1
 8018ed6:	0028      	movs	r0, r5
 8018ed8:	f7ff fda6 	bl	8018a28 <rshift>
 8018edc:	9b02      	ldr	r3, [sp, #8]
 8018ede:	3701      	adds	r7, #1
 8018ee0:	689b      	ldr	r3, [r3, #8]
 8018ee2:	2601      	movs	r6, #1
 8018ee4:	42bb      	cmp	r3, r7
 8018ee6:	dac8      	bge.n	8018e7a <__gethex+0x3c0>
 8018ee8:	e6dc      	b.n	8018ca4 <__gethex+0x1ea>
 8018eea:	241f      	movs	r4, #31
 8018eec:	9a01      	ldr	r2, [sp, #4]
 8018eee:	2601      	movs	r6, #1
 8018ef0:	4022      	ands	r2, r4
 8018ef2:	1e14      	subs	r4, r2, #0
 8018ef4:	d0c1      	beq.n	8018e7a <__gethex+0x3c0>
 8018ef6:	9a04      	ldr	r2, [sp, #16]
 8018ef8:	189b      	adds	r3, r3, r2
 8018efa:	3b04      	subs	r3, #4
 8018efc:	6818      	ldr	r0, [r3, #0]
 8018efe:	f000 f9a1 	bl	8019244 <__hi0bits>
 8018f02:	2120      	movs	r1, #32
 8018f04:	1b0c      	subs	r4, r1, r4
 8018f06:	42a0      	cmp	r0, r4
 8018f08:	dbe4      	blt.n	8018ed4 <__gethex+0x41a>
 8018f0a:	e7b6      	b.n	8018e7a <__gethex+0x3c0>
 8018f0c:	0006      	movs	r6, r0
 8018f0e:	e7b4      	b.n	8018e7a <__gethex+0x3c0>

08018f10 <L_shift>:
 8018f10:	2308      	movs	r3, #8
 8018f12:	b570      	push	{r4, r5, r6, lr}
 8018f14:	2520      	movs	r5, #32
 8018f16:	1a9a      	subs	r2, r3, r2
 8018f18:	0092      	lsls	r2, r2, #2
 8018f1a:	1aad      	subs	r5, r5, r2
 8018f1c:	6843      	ldr	r3, [r0, #4]
 8018f1e:	6806      	ldr	r6, [r0, #0]
 8018f20:	001c      	movs	r4, r3
 8018f22:	40ac      	lsls	r4, r5
 8018f24:	40d3      	lsrs	r3, r2
 8018f26:	4334      	orrs	r4, r6
 8018f28:	6004      	str	r4, [r0, #0]
 8018f2a:	6043      	str	r3, [r0, #4]
 8018f2c:	3004      	adds	r0, #4
 8018f2e:	4288      	cmp	r0, r1
 8018f30:	d3f4      	bcc.n	8018f1c <L_shift+0xc>
 8018f32:	bd70      	pop	{r4, r5, r6, pc}

08018f34 <__match>:
 8018f34:	b530      	push	{r4, r5, lr}
 8018f36:	6803      	ldr	r3, [r0, #0]
 8018f38:	780c      	ldrb	r4, [r1, #0]
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	2c00      	cmp	r4, #0
 8018f3e:	d102      	bne.n	8018f46 <__match+0x12>
 8018f40:	6003      	str	r3, [r0, #0]
 8018f42:	2001      	movs	r0, #1
 8018f44:	bd30      	pop	{r4, r5, pc}
 8018f46:	781a      	ldrb	r2, [r3, #0]
 8018f48:	0015      	movs	r5, r2
 8018f4a:	3d41      	subs	r5, #65	; 0x41
 8018f4c:	2d19      	cmp	r5, #25
 8018f4e:	d800      	bhi.n	8018f52 <__match+0x1e>
 8018f50:	3220      	adds	r2, #32
 8018f52:	3101      	adds	r1, #1
 8018f54:	42a2      	cmp	r2, r4
 8018f56:	d0ef      	beq.n	8018f38 <__match+0x4>
 8018f58:	2000      	movs	r0, #0
 8018f5a:	e7f3      	b.n	8018f44 <__match+0x10>

08018f5c <__hexnan>:
 8018f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f5e:	b08b      	sub	sp, #44	; 0x2c
 8018f60:	9201      	str	r2, [sp, #4]
 8018f62:	680a      	ldr	r2, [r1, #0]
 8018f64:	9901      	ldr	r1, [sp, #4]
 8018f66:	1153      	asrs	r3, r2, #5
 8018f68:	009b      	lsls	r3, r3, #2
 8018f6a:	18cb      	adds	r3, r1, r3
 8018f6c:	9304      	str	r3, [sp, #16]
 8018f6e:	231f      	movs	r3, #31
 8018f70:	401a      	ands	r2, r3
 8018f72:	9008      	str	r0, [sp, #32]
 8018f74:	9206      	str	r2, [sp, #24]
 8018f76:	d002      	beq.n	8018f7e <__hexnan+0x22>
 8018f78:	9b04      	ldr	r3, [sp, #16]
 8018f7a:	3304      	adds	r3, #4
 8018f7c:	9304      	str	r3, [sp, #16]
 8018f7e:	9b04      	ldr	r3, [sp, #16]
 8018f80:	2500      	movs	r5, #0
 8018f82:	1f1e      	subs	r6, r3, #4
 8018f84:	0037      	movs	r7, r6
 8018f86:	0034      	movs	r4, r6
 8018f88:	9b08      	ldr	r3, [sp, #32]
 8018f8a:	6035      	str	r5, [r6, #0]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	9507      	str	r5, [sp, #28]
 8018f90:	9305      	str	r3, [sp, #20]
 8018f92:	9502      	str	r5, [sp, #8]
 8018f94:	9b05      	ldr	r3, [sp, #20]
 8018f96:	3301      	adds	r3, #1
 8018f98:	9309      	str	r3, [sp, #36]	; 0x24
 8018f9a:	9b05      	ldr	r3, [sp, #20]
 8018f9c:	785b      	ldrb	r3, [r3, #1]
 8018f9e:	9303      	str	r3, [sp, #12]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d028      	beq.n	8018ff6 <__hexnan+0x9a>
 8018fa4:	9803      	ldr	r0, [sp, #12]
 8018fa6:	f7ff fd73 	bl	8018a90 <__hexdig_fun>
 8018faa:	2800      	cmp	r0, #0
 8018fac:	d145      	bne.n	801903a <__hexnan+0xde>
 8018fae:	9b03      	ldr	r3, [sp, #12]
 8018fb0:	2b20      	cmp	r3, #32
 8018fb2:	d819      	bhi.n	8018fe8 <__hexnan+0x8c>
 8018fb4:	9b02      	ldr	r3, [sp, #8]
 8018fb6:	9a07      	ldr	r2, [sp, #28]
 8018fb8:	4293      	cmp	r3, r2
 8018fba:	dd12      	ble.n	8018fe2 <__hexnan+0x86>
 8018fbc:	42bc      	cmp	r4, r7
 8018fbe:	d206      	bcs.n	8018fce <__hexnan+0x72>
 8018fc0:	2d07      	cmp	r5, #7
 8018fc2:	dc04      	bgt.n	8018fce <__hexnan+0x72>
 8018fc4:	002a      	movs	r2, r5
 8018fc6:	0039      	movs	r1, r7
 8018fc8:	0020      	movs	r0, r4
 8018fca:	f7ff ffa1 	bl	8018f10 <L_shift>
 8018fce:	9b01      	ldr	r3, [sp, #4]
 8018fd0:	2508      	movs	r5, #8
 8018fd2:	429c      	cmp	r4, r3
 8018fd4:	d905      	bls.n	8018fe2 <__hexnan+0x86>
 8018fd6:	1f27      	subs	r7, r4, #4
 8018fd8:	2500      	movs	r5, #0
 8018fda:	003c      	movs	r4, r7
 8018fdc:	9b02      	ldr	r3, [sp, #8]
 8018fde:	603d      	str	r5, [r7, #0]
 8018fe0:	9307      	str	r3, [sp, #28]
 8018fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fe4:	9305      	str	r3, [sp, #20]
 8018fe6:	e7d5      	b.n	8018f94 <__hexnan+0x38>
 8018fe8:	9b03      	ldr	r3, [sp, #12]
 8018fea:	2b29      	cmp	r3, #41	; 0x29
 8018fec:	d14a      	bne.n	8019084 <__hexnan+0x128>
 8018fee:	9b05      	ldr	r3, [sp, #20]
 8018ff0:	9a08      	ldr	r2, [sp, #32]
 8018ff2:	3302      	adds	r3, #2
 8018ff4:	6013      	str	r3, [r2, #0]
 8018ff6:	9b02      	ldr	r3, [sp, #8]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d043      	beq.n	8019084 <__hexnan+0x128>
 8018ffc:	42bc      	cmp	r4, r7
 8018ffe:	d206      	bcs.n	801900e <__hexnan+0xb2>
 8019000:	2d07      	cmp	r5, #7
 8019002:	dc04      	bgt.n	801900e <__hexnan+0xb2>
 8019004:	002a      	movs	r2, r5
 8019006:	0039      	movs	r1, r7
 8019008:	0020      	movs	r0, r4
 801900a:	f7ff ff81 	bl	8018f10 <L_shift>
 801900e:	9b01      	ldr	r3, [sp, #4]
 8019010:	429c      	cmp	r4, r3
 8019012:	d926      	bls.n	8019062 <__hexnan+0x106>
 8019014:	cc04      	ldmia	r4!, {r2}
 8019016:	601a      	str	r2, [r3, #0]
 8019018:	3304      	adds	r3, #4
 801901a:	42a6      	cmp	r6, r4
 801901c:	d2fa      	bcs.n	8019014 <__hexnan+0xb8>
 801901e:	2200      	movs	r2, #0
 8019020:	c304      	stmia	r3!, {r2}
 8019022:	429e      	cmp	r6, r3
 8019024:	d2fc      	bcs.n	8019020 <__hexnan+0xc4>
 8019026:	6833      	ldr	r3, [r6, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d104      	bne.n	8019036 <__hexnan+0xda>
 801902c:	9b01      	ldr	r3, [sp, #4]
 801902e:	429e      	cmp	r6, r3
 8019030:	d126      	bne.n	8019080 <__hexnan+0x124>
 8019032:	2301      	movs	r3, #1
 8019034:	6033      	str	r3, [r6, #0]
 8019036:	2005      	movs	r0, #5
 8019038:	e025      	b.n	8019086 <__hexnan+0x12a>
 801903a:	9b02      	ldr	r3, [sp, #8]
 801903c:	3501      	adds	r5, #1
 801903e:	3301      	adds	r3, #1
 8019040:	9302      	str	r3, [sp, #8]
 8019042:	2d08      	cmp	r5, #8
 8019044:	dd06      	ble.n	8019054 <__hexnan+0xf8>
 8019046:	9b01      	ldr	r3, [sp, #4]
 8019048:	429c      	cmp	r4, r3
 801904a:	d9ca      	bls.n	8018fe2 <__hexnan+0x86>
 801904c:	2300      	movs	r3, #0
 801904e:	2501      	movs	r5, #1
 8019050:	3c04      	subs	r4, #4
 8019052:	6023      	str	r3, [r4, #0]
 8019054:	220f      	movs	r2, #15
 8019056:	6823      	ldr	r3, [r4, #0]
 8019058:	4010      	ands	r0, r2
 801905a:	011b      	lsls	r3, r3, #4
 801905c:	4318      	orrs	r0, r3
 801905e:	6020      	str	r0, [r4, #0]
 8019060:	e7bf      	b.n	8018fe2 <__hexnan+0x86>
 8019062:	9b06      	ldr	r3, [sp, #24]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d0de      	beq.n	8019026 <__hexnan+0xca>
 8019068:	2120      	movs	r1, #32
 801906a:	9a06      	ldr	r2, [sp, #24]
 801906c:	9b04      	ldr	r3, [sp, #16]
 801906e:	1a89      	subs	r1, r1, r2
 8019070:	2201      	movs	r2, #1
 8019072:	4252      	negs	r2, r2
 8019074:	40ca      	lsrs	r2, r1
 8019076:	3b04      	subs	r3, #4
 8019078:	6819      	ldr	r1, [r3, #0]
 801907a:	400a      	ands	r2, r1
 801907c:	601a      	str	r2, [r3, #0]
 801907e:	e7d2      	b.n	8019026 <__hexnan+0xca>
 8019080:	3e04      	subs	r6, #4
 8019082:	e7d0      	b.n	8019026 <__hexnan+0xca>
 8019084:	2004      	movs	r0, #4
 8019086:	b00b      	add	sp, #44	; 0x2c
 8019088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801908a <__localeconv_l>:
 801908a:	30f0      	adds	r0, #240	; 0xf0
 801908c:	4770      	bx	lr
	...

08019090 <_localeconv_r>:
 8019090:	4b03      	ldr	r3, [pc, #12]	; (80190a0 <_localeconv_r+0x10>)
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8019096:	2800      	cmp	r0, #0
 8019098:	d100      	bne.n	801909c <_localeconv_r+0xc>
 801909a:	4802      	ldr	r0, [pc, #8]	; (80190a4 <_localeconv_r+0x14>)
 801909c:	30f0      	adds	r0, #240	; 0xf0
 801909e:	4770      	bx	lr
 80190a0:	200000d0 	.word	0x200000d0
 80190a4:	20000500 	.word	0x20000500

080190a8 <__retarget_lock_acquire_recursive>:
 80190a8:	4770      	bx	lr

080190aa <__retarget_lock_release_recursive>:
 80190aa:	4770      	bx	lr

080190ac <memchr>:
 80190ac:	b2c9      	uxtb	r1, r1
 80190ae:	1882      	adds	r2, r0, r2
 80190b0:	4290      	cmp	r0, r2
 80190b2:	d101      	bne.n	80190b8 <memchr+0xc>
 80190b4:	2000      	movs	r0, #0
 80190b6:	4770      	bx	lr
 80190b8:	7803      	ldrb	r3, [r0, #0]
 80190ba:	428b      	cmp	r3, r1
 80190bc:	d0fb      	beq.n	80190b6 <memchr+0xa>
 80190be:	3001      	adds	r0, #1
 80190c0:	e7f6      	b.n	80190b0 <memchr+0x4>

080190c2 <memmove>:
 80190c2:	b510      	push	{r4, lr}
 80190c4:	4288      	cmp	r0, r1
 80190c6:	d902      	bls.n	80190ce <memmove+0xc>
 80190c8:	188b      	adds	r3, r1, r2
 80190ca:	4298      	cmp	r0, r3
 80190cc:	d303      	bcc.n	80190d6 <memmove+0x14>
 80190ce:	2300      	movs	r3, #0
 80190d0:	e007      	b.n	80190e2 <memmove+0x20>
 80190d2:	5c8b      	ldrb	r3, [r1, r2]
 80190d4:	5483      	strb	r3, [r0, r2]
 80190d6:	3a01      	subs	r2, #1
 80190d8:	d2fb      	bcs.n	80190d2 <memmove+0x10>
 80190da:	bd10      	pop	{r4, pc}
 80190dc:	5ccc      	ldrb	r4, [r1, r3]
 80190de:	54c4      	strb	r4, [r0, r3]
 80190e0:	3301      	adds	r3, #1
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d1fa      	bne.n	80190dc <memmove+0x1a>
 80190e6:	e7f8      	b.n	80190da <memmove+0x18>

080190e8 <_Balloc>:
 80190e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80190ea:	b570      	push	{r4, r5, r6, lr}
 80190ec:	0004      	movs	r4, r0
 80190ee:	000d      	movs	r5, r1
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d012      	beq.n	801911a <_Balloc+0x32>
 80190f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80190f6:	00ab      	lsls	r3, r5, #2
 80190f8:	18d3      	adds	r3, r2, r3
 80190fa:	6818      	ldr	r0, [r3, #0]
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d115      	bne.n	801912c <_Balloc+0x44>
 8019100:	2101      	movs	r1, #1
 8019102:	000e      	movs	r6, r1
 8019104:	40ae      	lsls	r6, r5
 8019106:	1d72      	adds	r2, r6, #5
 8019108:	0092      	lsls	r2, r2, #2
 801910a:	0020      	movs	r0, r4
 801910c:	f000 fcbe 	bl	8019a8c <_calloc_r>
 8019110:	2800      	cmp	r0, #0
 8019112:	d009      	beq.n	8019128 <_Balloc+0x40>
 8019114:	6045      	str	r5, [r0, #4]
 8019116:	6086      	str	r6, [r0, #8]
 8019118:	e00a      	b.n	8019130 <_Balloc+0x48>
 801911a:	2221      	movs	r2, #33	; 0x21
 801911c:	2104      	movs	r1, #4
 801911e:	f000 fcb5 	bl	8019a8c <_calloc_r>
 8019122:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019124:	2800      	cmp	r0, #0
 8019126:	d1e5      	bne.n	80190f4 <_Balloc+0xc>
 8019128:	2000      	movs	r0, #0
 801912a:	bd70      	pop	{r4, r5, r6, pc}
 801912c:	6802      	ldr	r2, [r0, #0]
 801912e:	601a      	str	r2, [r3, #0]
 8019130:	2300      	movs	r3, #0
 8019132:	6103      	str	r3, [r0, #16]
 8019134:	60c3      	str	r3, [r0, #12]
 8019136:	e7f8      	b.n	801912a <_Balloc+0x42>

08019138 <_Bfree>:
 8019138:	2900      	cmp	r1, #0
 801913a:	d006      	beq.n	801914a <_Bfree+0x12>
 801913c:	684b      	ldr	r3, [r1, #4]
 801913e:	009a      	lsls	r2, r3, #2
 8019140:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8019142:	189b      	adds	r3, r3, r2
 8019144:	681a      	ldr	r2, [r3, #0]
 8019146:	600a      	str	r2, [r1, #0]
 8019148:	6019      	str	r1, [r3, #0]
 801914a:	4770      	bx	lr

0801914c <__multadd>:
 801914c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801914e:	001e      	movs	r6, r3
 8019150:	2314      	movs	r3, #20
 8019152:	469c      	mov	ip, r3
 8019154:	0007      	movs	r7, r0
 8019156:	000c      	movs	r4, r1
 8019158:	2000      	movs	r0, #0
 801915a:	690d      	ldr	r5, [r1, #16]
 801915c:	448c      	add	ip, r1
 801915e:	4663      	mov	r3, ip
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	3001      	adds	r0, #1
 8019164:	b299      	uxth	r1, r3
 8019166:	4663      	mov	r3, ip
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	4351      	muls	r1, r2
 801916c:	0c1b      	lsrs	r3, r3, #16
 801916e:	4353      	muls	r3, r2
 8019170:	1989      	adds	r1, r1, r6
 8019172:	0c0e      	lsrs	r6, r1, #16
 8019174:	199b      	adds	r3, r3, r6
 8019176:	b289      	uxth	r1, r1
 8019178:	0c1e      	lsrs	r6, r3, #16
 801917a:	041b      	lsls	r3, r3, #16
 801917c:	185b      	adds	r3, r3, r1
 801917e:	4661      	mov	r1, ip
 8019180:	c108      	stmia	r1!, {r3}
 8019182:	468c      	mov	ip, r1
 8019184:	4285      	cmp	r5, r0
 8019186:	dcea      	bgt.n	801915e <__multadd+0x12>
 8019188:	2e00      	cmp	r6, #0
 801918a:	d01b      	beq.n	80191c4 <__multadd+0x78>
 801918c:	68a3      	ldr	r3, [r4, #8]
 801918e:	42ab      	cmp	r3, r5
 8019190:	dc12      	bgt.n	80191b8 <__multadd+0x6c>
 8019192:	6863      	ldr	r3, [r4, #4]
 8019194:	0038      	movs	r0, r7
 8019196:	1c59      	adds	r1, r3, #1
 8019198:	f7ff ffa6 	bl	80190e8 <_Balloc>
 801919c:	0021      	movs	r1, r4
 801919e:	6923      	ldr	r3, [r4, #16]
 80191a0:	9001      	str	r0, [sp, #4]
 80191a2:	1c9a      	adds	r2, r3, #2
 80191a4:	0092      	lsls	r2, r2, #2
 80191a6:	310c      	adds	r1, #12
 80191a8:	300c      	adds	r0, #12
 80191aa:	f7fc f8b6 	bl	801531a <memcpy>
 80191ae:	0021      	movs	r1, r4
 80191b0:	0038      	movs	r0, r7
 80191b2:	f7ff ffc1 	bl	8019138 <_Bfree>
 80191b6:	9c01      	ldr	r4, [sp, #4]
 80191b8:	1d2b      	adds	r3, r5, #4
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	18e3      	adds	r3, r4, r3
 80191be:	3501      	adds	r5, #1
 80191c0:	605e      	str	r6, [r3, #4]
 80191c2:	6125      	str	r5, [r4, #16]
 80191c4:	0020      	movs	r0, r4
 80191c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080191c8 <__s2b>:
 80191c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191ca:	0006      	movs	r6, r0
 80191cc:	0018      	movs	r0, r3
 80191ce:	000c      	movs	r4, r1
 80191d0:	3008      	adds	r0, #8
 80191d2:	2109      	movs	r1, #9
 80191d4:	9301      	str	r3, [sp, #4]
 80191d6:	0015      	movs	r5, r2
 80191d8:	f7e7 f844 	bl	8000264 <__divsi3>
 80191dc:	2301      	movs	r3, #1
 80191de:	2100      	movs	r1, #0
 80191e0:	4283      	cmp	r3, r0
 80191e2:	db1f      	blt.n	8019224 <__s2b+0x5c>
 80191e4:	0030      	movs	r0, r6
 80191e6:	f7ff ff7f 	bl	80190e8 <_Balloc>
 80191ea:	9b08      	ldr	r3, [sp, #32]
 80191ec:	6143      	str	r3, [r0, #20]
 80191ee:	2301      	movs	r3, #1
 80191f0:	6103      	str	r3, [r0, #16]
 80191f2:	2d09      	cmp	r5, #9
 80191f4:	dd19      	ble.n	801922a <__s2b+0x62>
 80191f6:	0023      	movs	r3, r4
 80191f8:	3309      	adds	r3, #9
 80191fa:	001f      	movs	r7, r3
 80191fc:	9300      	str	r3, [sp, #0]
 80191fe:	1964      	adds	r4, r4, r5
 8019200:	783b      	ldrb	r3, [r7, #0]
 8019202:	0001      	movs	r1, r0
 8019204:	3b30      	subs	r3, #48	; 0x30
 8019206:	220a      	movs	r2, #10
 8019208:	0030      	movs	r0, r6
 801920a:	3701      	adds	r7, #1
 801920c:	f7ff ff9e 	bl	801914c <__multadd>
 8019210:	42a7      	cmp	r7, r4
 8019212:	d1f5      	bne.n	8019200 <__s2b+0x38>
 8019214:	9b00      	ldr	r3, [sp, #0]
 8019216:	195c      	adds	r4, r3, r5
 8019218:	3c08      	subs	r4, #8
 801921a:	002f      	movs	r7, r5
 801921c:	9b01      	ldr	r3, [sp, #4]
 801921e:	429f      	cmp	r7, r3
 8019220:	db06      	blt.n	8019230 <__s2b+0x68>
 8019222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019224:	005b      	lsls	r3, r3, #1
 8019226:	3101      	adds	r1, #1
 8019228:	e7da      	b.n	80191e0 <__s2b+0x18>
 801922a:	340a      	adds	r4, #10
 801922c:	2509      	movs	r5, #9
 801922e:	e7f4      	b.n	801921a <__s2b+0x52>
 8019230:	1b63      	subs	r3, r4, r5
 8019232:	5ddb      	ldrb	r3, [r3, r7]
 8019234:	0001      	movs	r1, r0
 8019236:	3b30      	subs	r3, #48	; 0x30
 8019238:	220a      	movs	r2, #10
 801923a:	0030      	movs	r0, r6
 801923c:	f7ff ff86 	bl	801914c <__multadd>
 8019240:	3701      	adds	r7, #1
 8019242:	e7eb      	b.n	801921c <__s2b+0x54>

08019244 <__hi0bits>:
 8019244:	0003      	movs	r3, r0
 8019246:	0c02      	lsrs	r2, r0, #16
 8019248:	2000      	movs	r0, #0
 801924a:	4282      	cmp	r2, r0
 801924c:	d101      	bne.n	8019252 <__hi0bits+0xe>
 801924e:	041b      	lsls	r3, r3, #16
 8019250:	3010      	adds	r0, #16
 8019252:	0e1a      	lsrs	r2, r3, #24
 8019254:	d101      	bne.n	801925a <__hi0bits+0x16>
 8019256:	3008      	adds	r0, #8
 8019258:	021b      	lsls	r3, r3, #8
 801925a:	0f1a      	lsrs	r2, r3, #28
 801925c:	d101      	bne.n	8019262 <__hi0bits+0x1e>
 801925e:	3004      	adds	r0, #4
 8019260:	011b      	lsls	r3, r3, #4
 8019262:	0f9a      	lsrs	r2, r3, #30
 8019264:	d101      	bne.n	801926a <__hi0bits+0x26>
 8019266:	3002      	adds	r0, #2
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	2b00      	cmp	r3, #0
 801926c:	db03      	blt.n	8019276 <__hi0bits+0x32>
 801926e:	3001      	adds	r0, #1
 8019270:	005b      	lsls	r3, r3, #1
 8019272:	d400      	bmi.n	8019276 <__hi0bits+0x32>
 8019274:	2020      	movs	r0, #32
 8019276:	4770      	bx	lr

08019278 <__lo0bits>:
 8019278:	2207      	movs	r2, #7
 801927a:	6803      	ldr	r3, [r0, #0]
 801927c:	b510      	push	{r4, lr}
 801927e:	0001      	movs	r1, r0
 8019280:	401a      	ands	r2, r3
 8019282:	d00d      	beq.n	80192a0 <__lo0bits+0x28>
 8019284:	2401      	movs	r4, #1
 8019286:	2000      	movs	r0, #0
 8019288:	4223      	tst	r3, r4
 801928a:	d105      	bne.n	8019298 <__lo0bits+0x20>
 801928c:	3002      	adds	r0, #2
 801928e:	4203      	tst	r3, r0
 8019290:	d003      	beq.n	801929a <__lo0bits+0x22>
 8019292:	40e3      	lsrs	r3, r4
 8019294:	0020      	movs	r0, r4
 8019296:	600b      	str	r3, [r1, #0]
 8019298:	bd10      	pop	{r4, pc}
 801929a:	089b      	lsrs	r3, r3, #2
 801929c:	600b      	str	r3, [r1, #0]
 801929e:	e7fb      	b.n	8019298 <__lo0bits+0x20>
 80192a0:	b29c      	uxth	r4, r3
 80192a2:	0010      	movs	r0, r2
 80192a4:	2c00      	cmp	r4, #0
 80192a6:	d101      	bne.n	80192ac <__lo0bits+0x34>
 80192a8:	2010      	movs	r0, #16
 80192aa:	0c1b      	lsrs	r3, r3, #16
 80192ac:	b2da      	uxtb	r2, r3
 80192ae:	2a00      	cmp	r2, #0
 80192b0:	d101      	bne.n	80192b6 <__lo0bits+0x3e>
 80192b2:	3008      	adds	r0, #8
 80192b4:	0a1b      	lsrs	r3, r3, #8
 80192b6:	071a      	lsls	r2, r3, #28
 80192b8:	d101      	bne.n	80192be <__lo0bits+0x46>
 80192ba:	3004      	adds	r0, #4
 80192bc:	091b      	lsrs	r3, r3, #4
 80192be:	079a      	lsls	r2, r3, #30
 80192c0:	d101      	bne.n	80192c6 <__lo0bits+0x4e>
 80192c2:	3002      	adds	r0, #2
 80192c4:	089b      	lsrs	r3, r3, #2
 80192c6:	07da      	lsls	r2, r3, #31
 80192c8:	d4e8      	bmi.n	801929c <__lo0bits+0x24>
 80192ca:	085b      	lsrs	r3, r3, #1
 80192cc:	d001      	beq.n	80192d2 <__lo0bits+0x5a>
 80192ce:	3001      	adds	r0, #1
 80192d0:	e7e4      	b.n	801929c <__lo0bits+0x24>
 80192d2:	2020      	movs	r0, #32
 80192d4:	e7e0      	b.n	8019298 <__lo0bits+0x20>

080192d6 <__i2b>:
 80192d6:	b510      	push	{r4, lr}
 80192d8:	000c      	movs	r4, r1
 80192da:	2101      	movs	r1, #1
 80192dc:	f7ff ff04 	bl	80190e8 <_Balloc>
 80192e0:	2301      	movs	r3, #1
 80192e2:	6144      	str	r4, [r0, #20]
 80192e4:	6103      	str	r3, [r0, #16]
 80192e6:	bd10      	pop	{r4, pc}

080192e8 <__multiply>:
 80192e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192ea:	690b      	ldr	r3, [r1, #16]
 80192ec:	0014      	movs	r4, r2
 80192ee:	6912      	ldr	r2, [r2, #16]
 80192f0:	b089      	sub	sp, #36	; 0x24
 80192f2:	000d      	movs	r5, r1
 80192f4:	4293      	cmp	r3, r2
 80192f6:	da01      	bge.n	80192fc <__multiply+0x14>
 80192f8:	0025      	movs	r5, r4
 80192fa:	000c      	movs	r4, r1
 80192fc:	692f      	ldr	r7, [r5, #16]
 80192fe:	6926      	ldr	r6, [r4, #16]
 8019300:	6869      	ldr	r1, [r5, #4]
 8019302:	19bb      	adds	r3, r7, r6
 8019304:	9302      	str	r3, [sp, #8]
 8019306:	68ab      	ldr	r3, [r5, #8]
 8019308:	19ba      	adds	r2, r7, r6
 801930a:	4293      	cmp	r3, r2
 801930c:	da00      	bge.n	8019310 <__multiply+0x28>
 801930e:	3101      	adds	r1, #1
 8019310:	f7ff feea 	bl	80190e8 <_Balloc>
 8019314:	0002      	movs	r2, r0
 8019316:	19bb      	adds	r3, r7, r6
 8019318:	3214      	adds	r2, #20
 801931a:	009b      	lsls	r3, r3, #2
 801931c:	18d3      	adds	r3, r2, r3
 801931e:	469c      	mov	ip, r3
 8019320:	2100      	movs	r1, #0
 8019322:	0013      	movs	r3, r2
 8019324:	9004      	str	r0, [sp, #16]
 8019326:	4563      	cmp	r3, ip
 8019328:	d31d      	bcc.n	8019366 <__multiply+0x7e>
 801932a:	3514      	adds	r5, #20
 801932c:	00bf      	lsls	r7, r7, #2
 801932e:	19eb      	adds	r3, r5, r7
 8019330:	3414      	adds	r4, #20
 8019332:	00b6      	lsls	r6, r6, #2
 8019334:	9305      	str	r3, [sp, #20]
 8019336:	19a3      	adds	r3, r4, r6
 8019338:	9503      	str	r5, [sp, #12]
 801933a:	9401      	str	r4, [sp, #4]
 801933c:	9307      	str	r3, [sp, #28]
 801933e:	9b07      	ldr	r3, [sp, #28]
 8019340:	9901      	ldr	r1, [sp, #4]
 8019342:	4299      	cmp	r1, r3
 8019344:	d311      	bcc.n	801936a <__multiply+0x82>
 8019346:	9b02      	ldr	r3, [sp, #8]
 8019348:	2b00      	cmp	r3, #0
 801934a:	dd06      	ble.n	801935a <__multiply+0x72>
 801934c:	2304      	movs	r3, #4
 801934e:	425b      	negs	r3, r3
 8019350:	449c      	add	ip, r3
 8019352:	4663      	mov	r3, ip
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d051      	beq.n	80193fe <__multiply+0x116>
 801935a:	9b04      	ldr	r3, [sp, #16]
 801935c:	9a02      	ldr	r2, [sp, #8]
 801935e:	0018      	movs	r0, r3
 8019360:	611a      	str	r2, [r3, #16]
 8019362:	b009      	add	sp, #36	; 0x24
 8019364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019366:	c302      	stmia	r3!, {r1}
 8019368:	e7dd      	b.n	8019326 <__multiply+0x3e>
 801936a:	9b01      	ldr	r3, [sp, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	b298      	uxth	r0, r3
 8019370:	2800      	cmp	r0, #0
 8019372:	d01c      	beq.n	80193ae <__multiply+0xc6>
 8019374:	0015      	movs	r5, r2
 8019376:	2600      	movs	r6, #0
 8019378:	9f03      	ldr	r7, [sp, #12]
 801937a:	cf02      	ldmia	r7!, {r1}
 801937c:	682c      	ldr	r4, [r5, #0]
 801937e:	b28b      	uxth	r3, r1
 8019380:	4343      	muls	r3, r0
 8019382:	0c09      	lsrs	r1, r1, #16
 8019384:	4341      	muls	r1, r0
 8019386:	b2a4      	uxth	r4, r4
 8019388:	191b      	adds	r3, r3, r4
 801938a:	199b      	adds	r3, r3, r6
 801938c:	000e      	movs	r6, r1
 801938e:	6829      	ldr	r1, [r5, #0]
 8019390:	9506      	str	r5, [sp, #24]
 8019392:	0c09      	lsrs	r1, r1, #16
 8019394:	1871      	adds	r1, r6, r1
 8019396:	0c1e      	lsrs	r6, r3, #16
 8019398:	1989      	adds	r1, r1, r6
 801939a:	0c0e      	lsrs	r6, r1, #16
 801939c:	b29b      	uxth	r3, r3
 801939e:	0409      	lsls	r1, r1, #16
 80193a0:	430b      	orrs	r3, r1
 80193a2:	c508      	stmia	r5!, {r3}
 80193a4:	9b05      	ldr	r3, [sp, #20]
 80193a6:	42bb      	cmp	r3, r7
 80193a8:	d8e7      	bhi.n	801937a <__multiply+0x92>
 80193aa:	9b06      	ldr	r3, [sp, #24]
 80193ac:	605e      	str	r6, [r3, #4]
 80193ae:	9b01      	ldr	r3, [sp, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	0c1d      	lsrs	r5, r3, #16
 80193b4:	d01e      	beq.n	80193f4 <__multiply+0x10c>
 80193b6:	0010      	movs	r0, r2
 80193b8:	2700      	movs	r7, #0
 80193ba:	6813      	ldr	r3, [r2, #0]
 80193bc:	9e03      	ldr	r6, [sp, #12]
 80193be:	6831      	ldr	r1, [r6, #0]
 80193c0:	6804      	ldr	r4, [r0, #0]
 80193c2:	b289      	uxth	r1, r1
 80193c4:	4369      	muls	r1, r5
 80193c6:	0c24      	lsrs	r4, r4, #16
 80193c8:	1909      	adds	r1, r1, r4
 80193ca:	19c9      	adds	r1, r1, r7
 80193cc:	040f      	lsls	r7, r1, #16
 80193ce:	b29b      	uxth	r3, r3
 80193d0:	433b      	orrs	r3, r7
 80193d2:	6003      	str	r3, [r0, #0]
 80193d4:	ce80      	ldmia	r6!, {r7}
 80193d6:	6843      	ldr	r3, [r0, #4]
 80193d8:	0c3f      	lsrs	r7, r7, #16
 80193da:	436f      	muls	r7, r5
 80193dc:	b29b      	uxth	r3, r3
 80193de:	18fb      	adds	r3, r7, r3
 80193e0:	0c09      	lsrs	r1, r1, #16
 80193e2:	185b      	adds	r3, r3, r1
 80193e4:	9905      	ldr	r1, [sp, #20]
 80193e6:	9006      	str	r0, [sp, #24]
 80193e8:	0c1f      	lsrs	r7, r3, #16
 80193ea:	3004      	adds	r0, #4
 80193ec:	42b1      	cmp	r1, r6
 80193ee:	d8e6      	bhi.n	80193be <__multiply+0xd6>
 80193f0:	9906      	ldr	r1, [sp, #24]
 80193f2:	604b      	str	r3, [r1, #4]
 80193f4:	9b01      	ldr	r3, [sp, #4]
 80193f6:	3204      	adds	r2, #4
 80193f8:	3304      	adds	r3, #4
 80193fa:	9301      	str	r3, [sp, #4]
 80193fc:	e79f      	b.n	801933e <__multiply+0x56>
 80193fe:	9b02      	ldr	r3, [sp, #8]
 8019400:	3b01      	subs	r3, #1
 8019402:	9302      	str	r3, [sp, #8]
 8019404:	e79f      	b.n	8019346 <__multiply+0x5e>
	...

08019408 <__pow5mult>:
 8019408:	2303      	movs	r3, #3
 801940a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801940c:	4013      	ands	r3, r2
 801940e:	0006      	movs	r6, r0
 8019410:	000f      	movs	r7, r1
 8019412:	0015      	movs	r5, r2
 8019414:	2b00      	cmp	r3, #0
 8019416:	d008      	beq.n	801942a <__pow5mult+0x22>
 8019418:	491a      	ldr	r1, [pc, #104]	; (8019484 <__pow5mult+0x7c>)
 801941a:	3b01      	subs	r3, #1
 801941c:	009a      	lsls	r2, r3, #2
 801941e:	5852      	ldr	r2, [r2, r1]
 8019420:	2300      	movs	r3, #0
 8019422:	0039      	movs	r1, r7
 8019424:	f7ff fe92 	bl	801914c <__multadd>
 8019428:	0007      	movs	r7, r0
 801942a:	10ad      	asrs	r5, r5, #2
 801942c:	d027      	beq.n	801947e <__pow5mult+0x76>
 801942e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8019430:	2c00      	cmp	r4, #0
 8019432:	d107      	bne.n	8019444 <__pow5mult+0x3c>
 8019434:	4914      	ldr	r1, [pc, #80]	; (8019488 <__pow5mult+0x80>)
 8019436:	0030      	movs	r0, r6
 8019438:	f7ff ff4d 	bl	80192d6 <__i2b>
 801943c:	2300      	movs	r3, #0
 801943e:	0004      	movs	r4, r0
 8019440:	64b0      	str	r0, [r6, #72]	; 0x48
 8019442:	6003      	str	r3, [r0, #0]
 8019444:	2301      	movs	r3, #1
 8019446:	421d      	tst	r5, r3
 8019448:	d00a      	beq.n	8019460 <__pow5mult+0x58>
 801944a:	0039      	movs	r1, r7
 801944c:	0022      	movs	r2, r4
 801944e:	0030      	movs	r0, r6
 8019450:	f7ff ff4a 	bl	80192e8 <__multiply>
 8019454:	0039      	movs	r1, r7
 8019456:	9001      	str	r0, [sp, #4]
 8019458:	0030      	movs	r0, r6
 801945a:	f7ff fe6d 	bl	8019138 <_Bfree>
 801945e:	9f01      	ldr	r7, [sp, #4]
 8019460:	106d      	asrs	r5, r5, #1
 8019462:	d00c      	beq.n	801947e <__pow5mult+0x76>
 8019464:	6820      	ldr	r0, [r4, #0]
 8019466:	2800      	cmp	r0, #0
 8019468:	d107      	bne.n	801947a <__pow5mult+0x72>
 801946a:	0022      	movs	r2, r4
 801946c:	0021      	movs	r1, r4
 801946e:	0030      	movs	r0, r6
 8019470:	f7ff ff3a 	bl	80192e8 <__multiply>
 8019474:	2300      	movs	r3, #0
 8019476:	6020      	str	r0, [r4, #0]
 8019478:	6003      	str	r3, [r0, #0]
 801947a:	0004      	movs	r4, r0
 801947c:	e7e2      	b.n	8019444 <__pow5mult+0x3c>
 801947e:	0038      	movs	r0, r7
 8019480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019482:	46c0      	nop			; (mov r8, r8)
 8019484:	0801d518 	.word	0x0801d518
 8019488:	00000271 	.word	0x00000271

0801948c <__lshift>:
 801948c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801948e:	000d      	movs	r5, r1
 8019490:	0017      	movs	r7, r2
 8019492:	692b      	ldr	r3, [r5, #16]
 8019494:	1154      	asrs	r4, r2, #5
 8019496:	b085      	sub	sp, #20
 8019498:	18e3      	adds	r3, r4, r3
 801949a:	9301      	str	r3, [sp, #4]
 801949c:	3301      	adds	r3, #1
 801949e:	9300      	str	r3, [sp, #0]
 80194a0:	6849      	ldr	r1, [r1, #4]
 80194a2:	68ab      	ldr	r3, [r5, #8]
 80194a4:	9002      	str	r0, [sp, #8]
 80194a6:	9a00      	ldr	r2, [sp, #0]
 80194a8:	4293      	cmp	r3, r2
 80194aa:	db35      	blt.n	8019518 <__lshift+0x8c>
 80194ac:	9802      	ldr	r0, [sp, #8]
 80194ae:	f7ff fe1b 	bl	80190e8 <_Balloc>
 80194b2:	2300      	movs	r3, #0
 80194b4:	0002      	movs	r2, r0
 80194b6:	0006      	movs	r6, r0
 80194b8:	0019      	movs	r1, r3
 80194ba:	3214      	adds	r2, #20
 80194bc:	42a3      	cmp	r3, r4
 80194be:	db2e      	blt.n	801951e <__lshift+0x92>
 80194c0:	43e3      	mvns	r3, r4
 80194c2:	17db      	asrs	r3, r3, #31
 80194c4:	401c      	ands	r4, r3
 80194c6:	002b      	movs	r3, r5
 80194c8:	00a4      	lsls	r4, r4, #2
 80194ca:	1914      	adds	r4, r2, r4
 80194cc:	692a      	ldr	r2, [r5, #16]
 80194ce:	3314      	adds	r3, #20
 80194d0:	0092      	lsls	r2, r2, #2
 80194d2:	189a      	adds	r2, r3, r2
 80194d4:	4694      	mov	ip, r2
 80194d6:	221f      	movs	r2, #31
 80194d8:	4017      	ands	r7, r2
 80194da:	d024      	beq.n	8019526 <__lshift+0x9a>
 80194dc:	3201      	adds	r2, #1
 80194de:	1bd2      	subs	r2, r2, r7
 80194e0:	9203      	str	r2, [sp, #12]
 80194e2:	2200      	movs	r2, #0
 80194e4:	6819      	ldr	r1, [r3, #0]
 80194e6:	0020      	movs	r0, r4
 80194e8:	40b9      	lsls	r1, r7
 80194ea:	430a      	orrs	r2, r1
 80194ec:	c404      	stmia	r4!, {r2}
 80194ee:	cb04      	ldmia	r3!, {r2}
 80194f0:	9903      	ldr	r1, [sp, #12]
 80194f2:	40ca      	lsrs	r2, r1
 80194f4:	459c      	cmp	ip, r3
 80194f6:	d8f5      	bhi.n	80194e4 <__lshift+0x58>
 80194f8:	6042      	str	r2, [r0, #4]
 80194fa:	2a00      	cmp	r2, #0
 80194fc:	d002      	beq.n	8019504 <__lshift+0x78>
 80194fe:	9b01      	ldr	r3, [sp, #4]
 8019500:	3302      	adds	r3, #2
 8019502:	9300      	str	r3, [sp, #0]
 8019504:	9b00      	ldr	r3, [sp, #0]
 8019506:	9802      	ldr	r0, [sp, #8]
 8019508:	3b01      	subs	r3, #1
 801950a:	6133      	str	r3, [r6, #16]
 801950c:	0029      	movs	r1, r5
 801950e:	f7ff fe13 	bl	8019138 <_Bfree>
 8019512:	0030      	movs	r0, r6
 8019514:	b005      	add	sp, #20
 8019516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019518:	3101      	adds	r1, #1
 801951a:	005b      	lsls	r3, r3, #1
 801951c:	e7c3      	b.n	80194a6 <__lshift+0x1a>
 801951e:	0098      	lsls	r0, r3, #2
 8019520:	5011      	str	r1, [r2, r0]
 8019522:	3301      	adds	r3, #1
 8019524:	e7ca      	b.n	80194bc <__lshift+0x30>
 8019526:	cb04      	ldmia	r3!, {r2}
 8019528:	c404      	stmia	r4!, {r2}
 801952a:	459c      	cmp	ip, r3
 801952c:	d8fb      	bhi.n	8019526 <__lshift+0x9a>
 801952e:	e7e9      	b.n	8019504 <__lshift+0x78>

08019530 <__mcmp>:
 8019530:	690a      	ldr	r2, [r1, #16]
 8019532:	6903      	ldr	r3, [r0, #16]
 8019534:	b530      	push	{r4, r5, lr}
 8019536:	1a9b      	subs	r3, r3, r2
 8019538:	d10d      	bne.n	8019556 <__mcmp+0x26>
 801953a:	0092      	lsls	r2, r2, #2
 801953c:	3014      	adds	r0, #20
 801953e:	3114      	adds	r1, #20
 8019540:	1884      	adds	r4, r0, r2
 8019542:	1889      	adds	r1, r1, r2
 8019544:	3c04      	subs	r4, #4
 8019546:	3904      	subs	r1, #4
 8019548:	6825      	ldr	r5, [r4, #0]
 801954a:	680a      	ldr	r2, [r1, #0]
 801954c:	4295      	cmp	r5, r2
 801954e:	d004      	beq.n	801955a <__mcmp+0x2a>
 8019550:	2301      	movs	r3, #1
 8019552:	4295      	cmp	r5, r2
 8019554:	d304      	bcc.n	8019560 <__mcmp+0x30>
 8019556:	0018      	movs	r0, r3
 8019558:	bd30      	pop	{r4, r5, pc}
 801955a:	42a0      	cmp	r0, r4
 801955c:	d3f2      	bcc.n	8019544 <__mcmp+0x14>
 801955e:	e7fa      	b.n	8019556 <__mcmp+0x26>
 8019560:	425b      	negs	r3, r3
 8019562:	e7f8      	b.n	8019556 <__mcmp+0x26>

08019564 <__mdiff>:
 8019564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019566:	000d      	movs	r5, r1
 8019568:	b085      	sub	sp, #20
 801956a:	0007      	movs	r7, r0
 801956c:	0011      	movs	r1, r2
 801956e:	0028      	movs	r0, r5
 8019570:	0014      	movs	r4, r2
 8019572:	f7ff ffdd 	bl	8019530 <__mcmp>
 8019576:	1e06      	subs	r6, r0, #0
 8019578:	d108      	bne.n	801958c <__mdiff+0x28>
 801957a:	0001      	movs	r1, r0
 801957c:	0038      	movs	r0, r7
 801957e:	f7ff fdb3 	bl	80190e8 <_Balloc>
 8019582:	2301      	movs	r3, #1
 8019584:	6146      	str	r6, [r0, #20]
 8019586:	6103      	str	r3, [r0, #16]
 8019588:	b005      	add	sp, #20
 801958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801958c:	2301      	movs	r3, #1
 801958e:	9301      	str	r3, [sp, #4]
 8019590:	2800      	cmp	r0, #0
 8019592:	db04      	blt.n	801959e <__mdiff+0x3a>
 8019594:	0023      	movs	r3, r4
 8019596:	002c      	movs	r4, r5
 8019598:	001d      	movs	r5, r3
 801959a:	2300      	movs	r3, #0
 801959c:	9301      	str	r3, [sp, #4]
 801959e:	6861      	ldr	r1, [r4, #4]
 80195a0:	0038      	movs	r0, r7
 80195a2:	f7ff fda1 	bl	80190e8 <_Balloc>
 80195a6:	002f      	movs	r7, r5
 80195a8:	2200      	movs	r2, #0
 80195aa:	9b01      	ldr	r3, [sp, #4]
 80195ac:	6926      	ldr	r6, [r4, #16]
 80195ae:	60c3      	str	r3, [r0, #12]
 80195b0:	3414      	adds	r4, #20
 80195b2:	00b3      	lsls	r3, r6, #2
 80195b4:	18e3      	adds	r3, r4, r3
 80195b6:	9302      	str	r3, [sp, #8]
 80195b8:	692b      	ldr	r3, [r5, #16]
 80195ba:	3714      	adds	r7, #20
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	18fb      	adds	r3, r7, r3
 80195c0:	9303      	str	r3, [sp, #12]
 80195c2:	0003      	movs	r3, r0
 80195c4:	4694      	mov	ip, r2
 80195c6:	3314      	adds	r3, #20
 80195c8:	cc20      	ldmia	r4!, {r5}
 80195ca:	cf04      	ldmia	r7!, {r2}
 80195cc:	9201      	str	r2, [sp, #4]
 80195ce:	b2aa      	uxth	r2, r5
 80195d0:	4494      	add	ip, r2
 80195d2:	466a      	mov	r2, sp
 80195d4:	4661      	mov	r1, ip
 80195d6:	8892      	ldrh	r2, [r2, #4]
 80195d8:	0c2d      	lsrs	r5, r5, #16
 80195da:	1a8a      	subs	r2, r1, r2
 80195dc:	9901      	ldr	r1, [sp, #4]
 80195de:	0c09      	lsrs	r1, r1, #16
 80195e0:	1a69      	subs	r1, r5, r1
 80195e2:	1415      	asrs	r5, r2, #16
 80195e4:	1949      	adds	r1, r1, r5
 80195e6:	140d      	asrs	r5, r1, #16
 80195e8:	b292      	uxth	r2, r2
 80195ea:	0409      	lsls	r1, r1, #16
 80195ec:	430a      	orrs	r2, r1
 80195ee:	601a      	str	r2, [r3, #0]
 80195f0:	9a03      	ldr	r2, [sp, #12]
 80195f2:	46ac      	mov	ip, r5
 80195f4:	3304      	adds	r3, #4
 80195f6:	42ba      	cmp	r2, r7
 80195f8:	d8e6      	bhi.n	80195c8 <__mdiff+0x64>
 80195fa:	9902      	ldr	r1, [sp, #8]
 80195fc:	001a      	movs	r2, r3
 80195fe:	428c      	cmp	r4, r1
 8019600:	d305      	bcc.n	801960e <__mdiff+0xaa>
 8019602:	3a04      	subs	r2, #4
 8019604:	6813      	ldr	r3, [r2, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d00e      	beq.n	8019628 <__mdiff+0xc4>
 801960a:	6106      	str	r6, [r0, #16]
 801960c:	e7bc      	b.n	8019588 <__mdiff+0x24>
 801960e:	cc04      	ldmia	r4!, {r2}
 8019610:	b291      	uxth	r1, r2
 8019612:	4461      	add	r1, ip
 8019614:	140d      	asrs	r5, r1, #16
 8019616:	0c12      	lsrs	r2, r2, #16
 8019618:	1952      	adds	r2, r2, r5
 801961a:	1415      	asrs	r5, r2, #16
 801961c:	b289      	uxth	r1, r1
 801961e:	0412      	lsls	r2, r2, #16
 8019620:	430a      	orrs	r2, r1
 8019622:	46ac      	mov	ip, r5
 8019624:	c304      	stmia	r3!, {r2}
 8019626:	e7e8      	b.n	80195fa <__mdiff+0x96>
 8019628:	3e01      	subs	r6, #1
 801962a:	e7ea      	b.n	8019602 <__mdiff+0x9e>

0801962c <__ulp>:
 801962c:	000b      	movs	r3, r1
 801962e:	4910      	ldr	r1, [pc, #64]	; (8019670 <__ulp+0x44>)
 8019630:	b510      	push	{r4, lr}
 8019632:	4019      	ands	r1, r3
 8019634:	4b0f      	ldr	r3, [pc, #60]	; (8019674 <__ulp+0x48>)
 8019636:	18c9      	adds	r1, r1, r3
 8019638:	2900      	cmp	r1, #0
 801963a:	dd04      	ble.n	8019646 <__ulp+0x1a>
 801963c:	2200      	movs	r2, #0
 801963e:	000b      	movs	r3, r1
 8019640:	0010      	movs	r0, r2
 8019642:	0019      	movs	r1, r3
 8019644:	bd10      	pop	{r4, pc}
 8019646:	4249      	negs	r1, r1
 8019648:	1509      	asrs	r1, r1, #20
 801964a:	2200      	movs	r2, #0
 801964c:	2300      	movs	r3, #0
 801964e:	2913      	cmp	r1, #19
 8019650:	dc04      	bgt.n	801965c <__ulp+0x30>
 8019652:	2080      	movs	r0, #128	; 0x80
 8019654:	0300      	lsls	r0, r0, #12
 8019656:	4108      	asrs	r0, r1
 8019658:	0003      	movs	r3, r0
 801965a:	e7f1      	b.n	8019640 <__ulp+0x14>
 801965c:	3914      	subs	r1, #20
 801965e:	2001      	movs	r0, #1
 8019660:	291e      	cmp	r1, #30
 8019662:	dc02      	bgt.n	801966a <__ulp+0x3e>
 8019664:	241f      	movs	r4, #31
 8019666:	1a61      	subs	r1, r4, r1
 8019668:	4088      	lsls	r0, r1
 801966a:	0002      	movs	r2, r0
 801966c:	e7e8      	b.n	8019640 <__ulp+0x14>
 801966e:	46c0      	nop			; (mov r8, r8)
 8019670:	7ff00000 	.word	0x7ff00000
 8019674:	fcc00000 	.word	0xfcc00000

08019678 <__b2d>:
 8019678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801967a:	0006      	movs	r6, r0
 801967c:	6903      	ldr	r3, [r0, #16]
 801967e:	3614      	adds	r6, #20
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	18f3      	adds	r3, r6, r3
 8019684:	1f1d      	subs	r5, r3, #4
 8019686:	682c      	ldr	r4, [r5, #0]
 8019688:	000f      	movs	r7, r1
 801968a:	0020      	movs	r0, r4
 801968c:	9301      	str	r3, [sp, #4]
 801968e:	f7ff fdd9 	bl	8019244 <__hi0bits>
 8019692:	2320      	movs	r3, #32
 8019694:	1a1b      	subs	r3, r3, r0
 8019696:	603b      	str	r3, [r7, #0]
 8019698:	491c      	ldr	r1, [pc, #112]	; (801970c <__b2d+0x94>)
 801969a:	280a      	cmp	r0, #10
 801969c:	dc16      	bgt.n	80196cc <__b2d+0x54>
 801969e:	230b      	movs	r3, #11
 80196a0:	0027      	movs	r7, r4
 80196a2:	1a1b      	subs	r3, r3, r0
 80196a4:	40df      	lsrs	r7, r3
 80196a6:	4339      	orrs	r1, r7
 80196a8:	469c      	mov	ip, r3
 80196aa:	000b      	movs	r3, r1
 80196ac:	2100      	movs	r1, #0
 80196ae:	42ae      	cmp	r6, r5
 80196b0:	d202      	bcs.n	80196b8 <__b2d+0x40>
 80196b2:	9901      	ldr	r1, [sp, #4]
 80196b4:	3908      	subs	r1, #8
 80196b6:	6809      	ldr	r1, [r1, #0]
 80196b8:	3015      	adds	r0, #21
 80196ba:	4084      	lsls	r4, r0
 80196bc:	4660      	mov	r0, ip
 80196be:	40c1      	lsrs	r1, r0
 80196c0:	430c      	orrs	r4, r1
 80196c2:	0022      	movs	r2, r4
 80196c4:	0010      	movs	r0, r2
 80196c6:	0019      	movs	r1, r3
 80196c8:	b003      	add	sp, #12
 80196ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196cc:	2700      	movs	r7, #0
 80196ce:	42ae      	cmp	r6, r5
 80196d0:	d202      	bcs.n	80196d8 <__b2d+0x60>
 80196d2:	9d01      	ldr	r5, [sp, #4]
 80196d4:	3d08      	subs	r5, #8
 80196d6:	682f      	ldr	r7, [r5, #0]
 80196d8:	380b      	subs	r0, #11
 80196da:	4684      	mov	ip, r0
 80196dc:	1e03      	subs	r3, r0, #0
 80196de:	d012      	beq.n	8019706 <__b2d+0x8e>
 80196e0:	409c      	lsls	r4, r3
 80196e2:	2020      	movs	r0, #32
 80196e4:	4321      	orrs	r1, r4
 80196e6:	003c      	movs	r4, r7
 80196e8:	1ac0      	subs	r0, r0, r3
 80196ea:	40c4      	lsrs	r4, r0
 80196ec:	4321      	orrs	r1, r4
 80196ee:	000b      	movs	r3, r1
 80196f0:	2100      	movs	r1, #0
 80196f2:	42b5      	cmp	r5, r6
 80196f4:	d901      	bls.n	80196fa <__b2d+0x82>
 80196f6:	3d04      	subs	r5, #4
 80196f8:	6829      	ldr	r1, [r5, #0]
 80196fa:	4664      	mov	r4, ip
 80196fc:	40c1      	lsrs	r1, r0
 80196fe:	40a7      	lsls	r7, r4
 8019700:	430f      	orrs	r7, r1
 8019702:	003a      	movs	r2, r7
 8019704:	e7de      	b.n	80196c4 <__b2d+0x4c>
 8019706:	4321      	orrs	r1, r4
 8019708:	000b      	movs	r3, r1
 801970a:	e7fa      	b.n	8019702 <__b2d+0x8a>
 801970c:	3ff00000 	.word	0x3ff00000

08019710 <__d2b>:
 8019710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019712:	001d      	movs	r5, r3
 8019714:	2101      	movs	r1, #1
 8019716:	0014      	movs	r4, r2
 8019718:	9f08      	ldr	r7, [sp, #32]
 801971a:	f7ff fce5 	bl	80190e8 <_Balloc>
 801971e:	032b      	lsls	r3, r5, #12
 8019720:	006d      	lsls	r5, r5, #1
 8019722:	0006      	movs	r6, r0
 8019724:	0b1b      	lsrs	r3, r3, #12
 8019726:	0d6d      	lsrs	r5, r5, #21
 8019728:	d124      	bne.n	8019774 <__d2b+0x64>
 801972a:	9301      	str	r3, [sp, #4]
 801972c:	2c00      	cmp	r4, #0
 801972e:	d027      	beq.n	8019780 <__d2b+0x70>
 8019730:	4668      	mov	r0, sp
 8019732:	9400      	str	r4, [sp, #0]
 8019734:	f7ff fda0 	bl	8019278 <__lo0bits>
 8019738:	9c00      	ldr	r4, [sp, #0]
 801973a:	2800      	cmp	r0, #0
 801973c:	d01e      	beq.n	801977c <__d2b+0x6c>
 801973e:	9b01      	ldr	r3, [sp, #4]
 8019740:	2120      	movs	r1, #32
 8019742:	001a      	movs	r2, r3
 8019744:	1a09      	subs	r1, r1, r0
 8019746:	408a      	lsls	r2, r1
 8019748:	40c3      	lsrs	r3, r0
 801974a:	4322      	orrs	r2, r4
 801974c:	6172      	str	r2, [r6, #20]
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	9c01      	ldr	r4, [sp, #4]
 8019752:	61b4      	str	r4, [r6, #24]
 8019754:	1e63      	subs	r3, r4, #1
 8019756:	419c      	sbcs	r4, r3
 8019758:	3401      	adds	r4, #1
 801975a:	6134      	str	r4, [r6, #16]
 801975c:	2d00      	cmp	r5, #0
 801975e:	d018      	beq.n	8019792 <__d2b+0x82>
 8019760:	4b12      	ldr	r3, [pc, #72]	; (80197ac <__d2b+0x9c>)
 8019762:	18ed      	adds	r5, r5, r3
 8019764:	2335      	movs	r3, #53	; 0x35
 8019766:	182d      	adds	r5, r5, r0
 8019768:	603d      	str	r5, [r7, #0]
 801976a:	1a18      	subs	r0, r3, r0
 801976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801976e:	6018      	str	r0, [r3, #0]
 8019770:	0030      	movs	r0, r6
 8019772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019774:	2280      	movs	r2, #128	; 0x80
 8019776:	0352      	lsls	r2, r2, #13
 8019778:	4313      	orrs	r3, r2
 801977a:	e7d6      	b.n	801972a <__d2b+0x1a>
 801977c:	6174      	str	r4, [r6, #20]
 801977e:	e7e7      	b.n	8019750 <__d2b+0x40>
 8019780:	a801      	add	r0, sp, #4
 8019782:	f7ff fd79 	bl	8019278 <__lo0bits>
 8019786:	2401      	movs	r4, #1
 8019788:	9b01      	ldr	r3, [sp, #4]
 801978a:	6134      	str	r4, [r6, #16]
 801978c:	6173      	str	r3, [r6, #20]
 801978e:	3020      	adds	r0, #32
 8019790:	e7e4      	b.n	801975c <__d2b+0x4c>
 8019792:	4b07      	ldr	r3, [pc, #28]	; (80197b0 <__d2b+0xa0>)
 8019794:	18c0      	adds	r0, r0, r3
 8019796:	4b07      	ldr	r3, [pc, #28]	; (80197b4 <__d2b+0xa4>)
 8019798:	6038      	str	r0, [r7, #0]
 801979a:	18e3      	adds	r3, r4, r3
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	18f3      	adds	r3, r6, r3
 80197a0:	6958      	ldr	r0, [r3, #20]
 80197a2:	f7ff fd4f 	bl	8019244 <__hi0bits>
 80197a6:	0164      	lsls	r4, r4, #5
 80197a8:	1a20      	subs	r0, r4, r0
 80197aa:	e7df      	b.n	801976c <__d2b+0x5c>
 80197ac:	fffffbcd 	.word	0xfffffbcd
 80197b0:	fffffbce 	.word	0xfffffbce
 80197b4:	3fffffff 	.word	0x3fffffff

080197b8 <__ratio>:
 80197b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ba:	b085      	sub	sp, #20
 80197bc:	000f      	movs	r7, r1
 80197be:	a902      	add	r1, sp, #8
 80197c0:	0006      	movs	r6, r0
 80197c2:	f7ff ff59 	bl	8019678 <__b2d>
 80197c6:	0004      	movs	r4, r0
 80197c8:	000d      	movs	r5, r1
 80197ca:	0038      	movs	r0, r7
 80197cc:	a903      	add	r1, sp, #12
 80197ce:	9400      	str	r4, [sp, #0]
 80197d0:	9501      	str	r5, [sp, #4]
 80197d2:	f7ff ff51 	bl	8019678 <__b2d>
 80197d6:	6936      	ldr	r6, [r6, #16]
 80197d8:	693f      	ldr	r7, [r7, #16]
 80197da:	0002      	movs	r2, r0
 80197dc:	1bf7      	subs	r7, r6, r7
 80197de:	017e      	lsls	r6, r7, #5
 80197e0:	46b4      	mov	ip, r6
 80197e2:	9f03      	ldr	r7, [sp, #12]
 80197e4:	9e02      	ldr	r6, [sp, #8]
 80197e6:	000b      	movs	r3, r1
 80197e8:	1bf6      	subs	r6, r6, r7
 80197ea:	4466      	add	r6, ip
 80197ec:	0537      	lsls	r7, r6, #20
 80197ee:	2e00      	cmp	r6, #0
 80197f0:	dd07      	ble.n	8019802 <__ratio+0x4a>
 80197f2:	1979      	adds	r1, r7, r5
 80197f4:	9101      	str	r1, [sp, #4]
 80197f6:	9800      	ldr	r0, [sp, #0]
 80197f8:	9901      	ldr	r1, [sp, #4]
 80197fa:	f7e8 fa11 	bl	8001c20 <__aeabi_ddiv>
 80197fe:	b005      	add	sp, #20
 8019800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019802:	1bcb      	subs	r3, r1, r7
 8019804:	e7f7      	b.n	80197f6 <__ratio+0x3e>

08019806 <__copybits>:
 8019806:	0013      	movs	r3, r2
 8019808:	3901      	subs	r1, #1
 801980a:	b510      	push	{r4, lr}
 801980c:	1149      	asrs	r1, r1, #5
 801980e:	6912      	ldr	r2, [r2, #16]
 8019810:	3101      	adds	r1, #1
 8019812:	0089      	lsls	r1, r1, #2
 8019814:	3314      	adds	r3, #20
 8019816:	0092      	lsls	r2, r2, #2
 8019818:	1841      	adds	r1, r0, r1
 801981a:	189a      	adds	r2, r3, r2
 801981c:	429a      	cmp	r2, r3
 801981e:	d803      	bhi.n	8019828 <__copybits+0x22>
 8019820:	2300      	movs	r3, #0
 8019822:	4281      	cmp	r1, r0
 8019824:	d803      	bhi.n	801982e <__copybits+0x28>
 8019826:	bd10      	pop	{r4, pc}
 8019828:	cb10      	ldmia	r3!, {r4}
 801982a:	c010      	stmia	r0!, {r4}
 801982c:	e7f6      	b.n	801981c <__copybits+0x16>
 801982e:	c008      	stmia	r0!, {r3}
 8019830:	e7f7      	b.n	8019822 <__copybits+0x1c>

08019832 <__any_on>:
 8019832:	0002      	movs	r2, r0
 8019834:	6900      	ldr	r0, [r0, #16]
 8019836:	b510      	push	{r4, lr}
 8019838:	3214      	adds	r2, #20
 801983a:	114b      	asrs	r3, r1, #5
 801983c:	4298      	cmp	r0, r3
 801983e:	db12      	blt.n	8019866 <__any_on+0x34>
 8019840:	dd0b      	ble.n	801985a <__any_on+0x28>
 8019842:	201f      	movs	r0, #31
 8019844:	4001      	ands	r1, r0
 8019846:	d008      	beq.n	801985a <__any_on+0x28>
 8019848:	0098      	lsls	r0, r3, #2
 801984a:	5884      	ldr	r4, [r0, r2]
 801984c:	0020      	movs	r0, r4
 801984e:	40c8      	lsrs	r0, r1
 8019850:	4088      	lsls	r0, r1
 8019852:	0001      	movs	r1, r0
 8019854:	2001      	movs	r0, #1
 8019856:	428c      	cmp	r4, r1
 8019858:	d104      	bne.n	8019864 <__any_on+0x32>
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	18d3      	adds	r3, r2, r3
 801985e:	4293      	cmp	r3, r2
 8019860:	d803      	bhi.n	801986a <__any_on+0x38>
 8019862:	2000      	movs	r0, #0
 8019864:	bd10      	pop	{r4, pc}
 8019866:	0003      	movs	r3, r0
 8019868:	e7f7      	b.n	801985a <__any_on+0x28>
 801986a:	3b04      	subs	r3, #4
 801986c:	6819      	ldr	r1, [r3, #0]
 801986e:	2900      	cmp	r1, #0
 8019870:	d0f5      	beq.n	801985e <__any_on+0x2c>
 8019872:	2001      	movs	r0, #1
 8019874:	e7f6      	b.n	8019864 <__any_on+0x32>
	...

08019878 <frexp>:
 8019878:	b570      	push	{r4, r5, r6, lr}
 801987a:	0014      	movs	r4, r2
 801987c:	2500      	movs	r5, #0
 801987e:	6025      	str	r5, [r4, #0]
 8019880:	4d10      	ldr	r5, [pc, #64]	; (80198c4 <frexp+0x4c>)
 8019882:	004b      	lsls	r3, r1, #1
 8019884:	000a      	movs	r2, r1
 8019886:	085b      	lsrs	r3, r3, #1
 8019888:	42ab      	cmp	r3, r5
 801988a:	dc1a      	bgt.n	80198c2 <frexp+0x4a>
 801988c:	001d      	movs	r5, r3
 801988e:	4305      	orrs	r5, r0
 8019890:	d017      	beq.n	80198c2 <frexp+0x4a>
 8019892:	4d0d      	ldr	r5, [pc, #52]	; (80198c8 <frexp+0x50>)
 8019894:	42ab      	cmp	r3, r5
 8019896:	dc09      	bgt.n	80198ac <frexp+0x34>
 8019898:	2200      	movs	r2, #0
 801989a:	4b0c      	ldr	r3, [pc, #48]	; (80198cc <frexp+0x54>)
 801989c:	f7e8 fdca 	bl	8002434 <__aeabi_dmul>
 80198a0:	2536      	movs	r5, #54	; 0x36
 80198a2:	000a      	movs	r2, r1
 80198a4:	004b      	lsls	r3, r1, #1
 80198a6:	426d      	negs	r5, r5
 80198a8:	085b      	lsrs	r3, r3, #1
 80198aa:	6025      	str	r5, [r4, #0]
 80198ac:	4d08      	ldr	r5, [pc, #32]	; (80198d0 <frexp+0x58>)
 80198ae:	151b      	asrs	r3, r3, #20
 80198b0:	195b      	adds	r3, r3, r5
 80198b2:	6825      	ldr	r5, [r4, #0]
 80198b4:	18eb      	adds	r3, r5, r3
 80198b6:	6023      	str	r3, [r4, #0]
 80198b8:	4b06      	ldr	r3, [pc, #24]	; (80198d4 <frexp+0x5c>)
 80198ba:	401a      	ands	r2, r3
 80198bc:	4b06      	ldr	r3, [pc, #24]	; (80198d8 <frexp+0x60>)
 80198be:	4313      	orrs	r3, r2
 80198c0:	0019      	movs	r1, r3
 80198c2:	bd70      	pop	{r4, r5, r6, pc}
 80198c4:	7fefffff 	.word	0x7fefffff
 80198c8:	000fffff 	.word	0x000fffff
 80198cc:	43500000 	.word	0x43500000
 80198d0:	fffffc02 	.word	0xfffffc02
 80198d4:	800fffff 	.word	0x800fffff
 80198d8:	3fe00000 	.word	0x3fe00000

080198dc <__ssprint_r>:
 80198dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198de:	6893      	ldr	r3, [r2, #8]
 80198e0:	b087      	sub	sp, #28
 80198e2:	9002      	str	r0, [sp, #8]
 80198e4:	000c      	movs	r4, r1
 80198e6:	0016      	movs	r6, r2
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d063      	beq.n	80199b4 <__ssprint_r+0xd8>
 80198ec:	6813      	ldr	r3, [r2, #0]
 80198ee:	9303      	str	r3, [sp, #12]
 80198f0:	2300      	movs	r3, #0
 80198f2:	001f      	movs	r7, r3
 80198f4:	9305      	str	r3, [sp, #20]
 80198f6:	2f00      	cmp	r7, #0
 80198f8:	d02e      	beq.n	8019958 <__ssprint_r+0x7c>
 80198fa:	68a5      	ldr	r5, [r4, #8]
 80198fc:	42af      	cmp	r7, r5
 80198fe:	d347      	bcc.n	8019990 <__ssprint_r+0xb4>
 8019900:	2390      	movs	r3, #144	; 0x90
 8019902:	89a2      	ldrh	r2, [r4, #12]
 8019904:	00db      	lsls	r3, r3, #3
 8019906:	421a      	tst	r2, r3
 8019908:	d042      	beq.n	8019990 <__ssprint_r+0xb4>
 801990a:	2003      	movs	r0, #3
 801990c:	6921      	ldr	r1, [r4, #16]
 801990e:	6823      	ldr	r3, [r4, #0]
 8019910:	1a5b      	subs	r3, r3, r1
 8019912:	9304      	str	r3, [sp, #16]
 8019914:	6963      	ldr	r3, [r4, #20]
 8019916:	4343      	muls	r3, r0
 8019918:	0fd8      	lsrs	r0, r3, #31
 801991a:	18c3      	adds	r3, r0, r3
 801991c:	105b      	asrs	r3, r3, #1
 801991e:	9301      	str	r3, [sp, #4]
 8019920:	9b04      	ldr	r3, [sp, #16]
 8019922:	9801      	ldr	r0, [sp, #4]
 8019924:	3301      	adds	r3, #1
 8019926:	19db      	adds	r3, r3, r7
 8019928:	4283      	cmp	r3, r0
 801992a:	d900      	bls.n	801992e <__ssprint_r+0x52>
 801992c:	9301      	str	r3, [sp, #4]
 801992e:	0553      	lsls	r3, r2, #21
 8019930:	d544      	bpl.n	80199bc <__ssprint_r+0xe0>
 8019932:	9901      	ldr	r1, [sp, #4]
 8019934:	9802      	ldr	r0, [sp, #8]
 8019936:	f7fb fab7 	bl	8014ea8 <_malloc_r>
 801993a:	1e05      	subs	r5, r0, #0
 801993c:	d114      	bne.n	8019968 <__ssprint_r+0x8c>
 801993e:	230c      	movs	r3, #12
 8019940:	9a02      	ldr	r2, [sp, #8]
 8019942:	2001      	movs	r0, #1
 8019944:	6013      	str	r3, [r2, #0]
 8019946:	2340      	movs	r3, #64	; 0x40
 8019948:	89a2      	ldrh	r2, [r4, #12]
 801994a:	4240      	negs	r0, r0
 801994c:	4313      	orrs	r3, r2
 801994e:	81a3      	strh	r3, [r4, #12]
 8019950:	2300      	movs	r3, #0
 8019952:	60b3      	str	r3, [r6, #8]
 8019954:	6073      	str	r3, [r6, #4]
 8019956:	e02f      	b.n	80199b8 <__ssprint_r+0xdc>
 8019958:	9b03      	ldr	r3, [sp, #12]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	9305      	str	r3, [sp, #20]
 801995e:	9b03      	ldr	r3, [sp, #12]
 8019960:	685f      	ldr	r7, [r3, #4]
 8019962:	3308      	adds	r3, #8
 8019964:	9303      	str	r3, [sp, #12]
 8019966:	e7c6      	b.n	80198f6 <__ssprint_r+0x1a>
 8019968:	9a04      	ldr	r2, [sp, #16]
 801996a:	6921      	ldr	r1, [r4, #16]
 801996c:	f7fb fcd5 	bl	801531a <memcpy>
 8019970:	89a3      	ldrh	r3, [r4, #12]
 8019972:	4a18      	ldr	r2, [pc, #96]	; (80199d4 <__ssprint_r+0xf8>)
 8019974:	401a      	ands	r2, r3
 8019976:	2380      	movs	r3, #128	; 0x80
 8019978:	4313      	orrs	r3, r2
 801997a:	81a3      	strh	r3, [r4, #12]
 801997c:	9b04      	ldr	r3, [sp, #16]
 801997e:	6125      	str	r5, [r4, #16]
 8019980:	18ed      	adds	r5, r5, r3
 8019982:	6025      	str	r5, [r4, #0]
 8019984:	003d      	movs	r5, r7
 8019986:	9b01      	ldr	r3, [sp, #4]
 8019988:	9a04      	ldr	r2, [sp, #16]
 801998a:	6163      	str	r3, [r4, #20]
 801998c:	1a9b      	subs	r3, r3, r2
 801998e:	60a3      	str	r3, [r4, #8]
 8019990:	42bd      	cmp	r5, r7
 8019992:	d900      	bls.n	8019996 <__ssprint_r+0xba>
 8019994:	003d      	movs	r5, r7
 8019996:	002a      	movs	r2, r5
 8019998:	9905      	ldr	r1, [sp, #20]
 801999a:	6820      	ldr	r0, [r4, #0]
 801999c:	f7ff fb91 	bl	80190c2 <memmove>
 80199a0:	68a3      	ldr	r3, [r4, #8]
 80199a2:	1b5b      	subs	r3, r3, r5
 80199a4:	60a3      	str	r3, [r4, #8]
 80199a6:	6823      	ldr	r3, [r4, #0]
 80199a8:	195d      	adds	r5, r3, r5
 80199aa:	68b3      	ldr	r3, [r6, #8]
 80199ac:	6025      	str	r5, [r4, #0]
 80199ae:	1bdb      	subs	r3, r3, r7
 80199b0:	60b3      	str	r3, [r6, #8]
 80199b2:	d1d1      	bne.n	8019958 <__ssprint_r+0x7c>
 80199b4:	2000      	movs	r0, #0
 80199b6:	6070      	str	r0, [r6, #4]
 80199b8:	b007      	add	sp, #28
 80199ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199bc:	9a01      	ldr	r2, [sp, #4]
 80199be:	9802      	ldr	r0, [sp, #8]
 80199c0:	f7fb fcf0 	bl	80153a4 <_realloc_r>
 80199c4:	1e05      	subs	r5, r0, #0
 80199c6:	d1d9      	bne.n	801997c <__ssprint_r+0xa0>
 80199c8:	6921      	ldr	r1, [r4, #16]
 80199ca:	9802      	ldr	r0, [sp, #8]
 80199cc:	f7fe ff78 	bl	80188c0 <_free_r>
 80199d0:	e7b5      	b.n	801993e <__ssprint_r+0x62>
 80199d2:	46c0      	nop			; (mov r8, r8)
 80199d4:	fffffb7f 	.word	0xfffffb7f

080199d8 <__register_exitproc>:
 80199d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199da:	4d29      	ldr	r5, [pc, #164]	; (8019a80 <__register_exitproc+0xa8>)
 80199dc:	0006      	movs	r6, r0
 80199de:	6828      	ldr	r0, [r5, #0]
 80199e0:	9301      	str	r3, [sp, #4]
 80199e2:	9100      	str	r1, [sp, #0]
 80199e4:	0017      	movs	r7, r2
 80199e6:	f7ff fb5f 	bl	80190a8 <__retarget_lock_acquire_recursive>
 80199ea:	4b26      	ldr	r3, [pc, #152]	; (8019a84 <__register_exitproc+0xac>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	001c      	movs	r4, r3
 80199f0:	34fc      	adds	r4, #252	; 0xfc
 80199f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80199f4:	2800      	cmp	r0, #0
 80199f6:	d103      	bne.n	8019a00 <__register_exitproc+0x28>
 80199f8:	334d      	adds	r3, #77	; 0x4d
 80199fa:	33ff      	adds	r3, #255	; 0xff
 80199fc:	0018      	movs	r0, r3
 80199fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019a00:	6843      	ldr	r3, [r0, #4]
 8019a02:	2b1f      	cmp	r3, #31
 8019a04:	dd18      	ble.n	8019a38 <__register_exitproc+0x60>
 8019a06:	4b20      	ldr	r3, [pc, #128]	; (8019a88 <__register_exitproc+0xb0>)
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d105      	bne.n	8019a18 <__register_exitproc+0x40>
 8019a0c:	6828      	ldr	r0, [r5, #0]
 8019a0e:	f7ff fb4c 	bl	80190aa <__retarget_lock_release_recursive>
 8019a12:	2001      	movs	r0, #1
 8019a14:	4240      	negs	r0, r0
 8019a16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019a18:	20c8      	movs	r0, #200	; 0xc8
 8019a1a:	0040      	lsls	r0, r0, #1
 8019a1c:	f7fb fa30 	bl	8014e80 <malloc>
 8019a20:	2800      	cmp	r0, #0
 8019a22:	d0f3      	beq.n	8019a0c <__register_exitproc+0x34>
 8019a24:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019a26:	2300      	movs	r3, #0
 8019a28:	6002      	str	r2, [r0, #0]
 8019a2a:	22c4      	movs	r2, #196	; 0xc4
 8019a2c:	0052      	lsls	r2, r2, #1
 8019a2e:	6043      	str	r3, [r0, #4]
 8019a30:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019a32:	5083      	str	r3, [r0, r2]
 8019a34:	3204      	adds	r2, #4
 8019a36:	5083      	str	r3, [r0, r2]
 8019a38:	6843      	ldr	r3, [r0, #4]
 8019a3a:	2e00      	cmp	r6, #0
 8019a3c:	d014      	beq.n	8019a68 <__register_exitproc+0x90>
 8019a3e:	009a      	lsls	r2, r3, #2
 8019a40:	1882      	adds	r2, r0, r2
 8019a42:	0011      	movs	r1, r2
 8019a44:	3188      	adds	r1, #136	; 0x88
 8019a46:	600f      	str	r7, [r1, #0]
 8019a48:	2101      	movs	r1, #1
 8019a4a:	0004      	movs	r4, r0
 8019a4c:	4099      	lsls	r1, r3
 8019a4e:	3485      	adds	r4, #133	; 0x85
 8019a50:	34ff      	adds	r4, #255	; 0xff
 8019a52:	6865      	ldr	r5, [r4, #4]
 8019a54:	32fc      	adds	r2, #252	; 0xfc
 8019a56:	430d      	orrs	r5, r1
 8019a58:	6065      	str	r5, [r4, #4]
 8019a5a:	9d01      	ldr	r5, [sp, #4]
 8019a5c:	60d5      	str	r5, [r2, #12]
 8019a5e:	2e02      	cmp	r6, #2
 8019a60:	d102      	bne.n	8019a68 <__register_exitproc+0x90>
 8019a62:	68a2      	ldr	r2, [r4, #8]
 8019a64:	4311      	orrs	r1, r2
 8019a66:	60a1      	str	r1, [r4, #8]
 8019a68:	1c5a      	adds	r2, r3, #1
 8019a6a:	6042      	str	r2, [r0, #4]
 8019a6c:	3302      	adds	r3, #2
 8019a6e:	9a00      	ldr	r2, [sp, #0]
 8019a70:	009b      	lsls	r3, r3, #2
 8019a72:	501a      	str	r2, [r3, r0]
 8019a74:	4b02      	ldr	r3, [pc, #8]	; (8019a80 <__register_exitproc+0xa8>)
 8019a76:	6818      	ldr	r0, [r3, #0]
 8019a78:	f7ff fb17 	bl	80190aa <__retarget_lock_release_recursive>
 8019a7c:	2000      	movs	r0, #0
 8019a7e:	e7ca      	b.n	8019a16 <__register_exitproc+0x3e>
 8019a80:	20000a7c 	.word	0x20000a7c
 8019a84:	0801d260 	.word	0x0801d260
 8019a88:	08014e81 	.word	0x08014e81

08019a8c <_calloc_r>:
 8019a8c:	b510      	push	{r4, lr}
 8019a8e:	4351      	muls	r1, r2
 8019a90:	f7fb fa0a 	bl	8014ea8 <_malloc_r>
 8019a94:	1e04      	subs	r4, r0, #0
 8019a96:	d01a      	beq.n	8019ace <_calloc_r+0x42>
 8019a98:	0003      	movs	r3, r0
 8019a9a:	3b08      	subs	r3, #8
 8019a9c:	685a      	ldr	r2, [r3, #4]
 8019a9e:	2303      	movs	r3, #3
 8019aa0:	439a      	bics	r2, r3
 8019aa2:	3a04      	subs	r2, #4
 8019aa4:	2a24      	cmp	r2, #36	; 0x24
 8019aa6:	d819      	bhi.n	8019adc <_calloc_r+0x50>
 8019aa8:	0003      	movs	r3, r0
 8019aaa:	2a13      	cmp	r2, #19
 8019aac:	d90b      	bls.n	8019ac6 <_calloc_r+0x3a>
 8019aae:	2100      	movs	r1, #0
 8019ab0:	3308      	adds	r3, #8
 8019ab2:	6001      	str	r1, [r0, #0]
 8019ab4:	6041      	str	r1, [r0, #4]
 8019ab6:	2a1b      	cmp	r2, #27
 8019ab8:	d905      	bls.n	8019ac6 <_calloc_r+0x3a>
 8019aba:	6081      	str	r1, [r0, #8]
 8019abc:	60c1      	str	r1, [r0, #12]
 8019abe:	2a24      	cmp	r2, #36	; 0x24
 8019ac0:	d007      	beq.n	8019ad2 <_calloc_r+0x46>
 8019ac2:	0003      	movs	r3, r0
 8019ac4:	3310      	adds	r3, #16
 8019ac6:	2200      	movs	r2, #0
 8019ac8:	601a      	str	r2, [r3, #0]
 8019aca:	605a      	str	r2, [r3, #4]
 8019acc:	609a      	str	r2, [r3, #8]
 8019ace:	0020      	movs	r0, r4
 8019ad0:	bd10      	pop	{r4, pc}
 8019ad2:	0003      	movs	r3, r0
 8019ad4:	6101      	str	r1, [r0, #16]
 8019ad6:	3318      	adds	r3, #24
 8019ad8:	6141      	str	r1, [r0, #20]
 8019ada:	e7f4      	b.n	8019ac6 <_calloc_r+0x3a>
 8019adc:	2100      	movs	r1, #0
 8019ade:	f7fb fc25 	bl	801532c <memset>
 8019ae2:	e7f4      	b.n	8019ace <_calloc_r+0x42>

08019ae4 <_sbrk>:
 8019ae4:	4b05      	ldr	r3, [pc, #20]	; (8019afc <_sbrk+0x18>)
 8019ae6:	0002      	movs	r2, r0
 8019ae8:	6819      	ldr	r1, [r3, #0]
 8019aea:	2900      	cmp	r1, #0
 8019aec:	d101      	bne.n	8019af2 <_sbrk+0xe>
 8019aee:	4904      	ldr	r1, [pc, #16]	; (8019b00 <_sbrk+0x1c>)
 8019af0:	6019      	str	r1, [r3, #0]
 8019af2:	6818      	ldr	r0, [r3, #0]
 8019af4:	1882      	adds	r2, r0, r2
 8019af6:	601a      	str	r2, [r3, #0]
 8019af8:	4770      	bx	lr
 8019afa:	46c0      	nop			; (mov r8, r8)
 8019afc:	20006d20 	.word	0x20006d20
 8019b00:	200072e0 	.word	0x200072e0

08019b04 <_init>:
 8019b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b06:	46c0      	nop			; (mov r8, r8)
 8019b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b0a:	bc08      	pop	{r3}
 8019b0c:	469e      	mov	lr, r3
 8019b0e:	4770      	bx	lr

08019b10 <_fini>:
 8019b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b12:	46c0      	nop			; (mov r8, r8)
 8019b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b16:	bc08      	pop	{r3}
 8019b18:	469e      	mov	lr, r3
 8019b1a:	4770      	bx	lr
