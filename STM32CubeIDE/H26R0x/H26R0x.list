
H26R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018740  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003654  08018800  08018800  00028800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be54  0801be54  00030ad8  2**0
                  CONTENTS
  4 .ARM          00000008  0801be54  0801be54  0002be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be5c  0801be5c  00030ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801be5c  0801be5c  0002be5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be64  0801be64  0002be64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ad8  20000000  0801be68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063a8  20000ad8  0801c940  00030ad8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006e80  0801c940  00036e80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030ad8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e9a3  00000000  00000000  00030b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000081fd  00000000  00000000  0007f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019e75  00000000  00000000  000876a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d08  00000000  00000000  000a1518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ec8  00000000  00000000  000a3220  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015fe6  00000000  00000000  000a50e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a2e9  00000000  00000000  000bb0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c53b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006278  00000000  00000000  000c5434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ad8 	.word	0x20000ad8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080187e4 	.word	0x080187e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000adc 	.word	0x20000adc
 8000100:	080187e4 	.word	0x080187e4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 ff89 	bl	8002364 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fee1 	bl	8002224 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff7b 	bl	8002364 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff71 	bl	8002364 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff03 	bl	800229c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fef9 	bl	800229c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fca1 	bl	8000e08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc23 	bl	8000d1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc93 	bl	8000e08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc89 	bl	8000e08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc31 	bl	8000d6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc27 	bl	8000d6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	1c08      	adds	r0, r1, #0
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f866 	bl	8000640 <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	002e      	movs	r6, r5
 800058c:	b580      	push	{r7, lr}
 800058e:	0407      	lsls	r7, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0c03      	lsrs	r3, r0, #16
 8000598:	437e      	muls	r6, r7
 800059a:	435d      	muls	r5, r3
 800059c:	4367      	muls	r7, r4
 800059e:	4363      	muls	r3, r4
 80005a0:	197f      	adds	r7, r7, r5
 80005a2:	0c34      	lsrs	r4, r6, #16
 80005a4:	19e4      	adds	r4, r4, r7
 80005a6:	469c      	mov	ip, r3
 80005a8:	42a5      	cmp	r5, r4
 80005aa:	d903      	bls.n	80005b4 <__aeabi_lmul+0x34>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	025b      	lsls	r3, r3, #9
 80005b0:	4698      	mov	r8, r3
 80005b2:	44c4      	add	ip, r8
 80005b4:	464b      	mov	r3, r9
 80005b6:	4343      	muls	r3, r0
 80005b8:	4351      	muls	r1, r2
 80005ba:	0c25      	lsrs	r5, r4, #16
 80005bc:	0436      	lsls	r6, r6, #16
 80005be:	4465      	add	r5, ip
 80005c0:	0c36      	lsrs	r6, r6, #16
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	19a4      	adds	r4, r4, r6
 80005c6:	195b      	adds	r3, r3, r5
 80005c8:	1859      	adds	r1, r3, r1
 80005ca:	0020      	movs	r0, r4
 80005cc:	bc0c      	pop	{r2, r3}
 80005ce:	4690      	mov	r8, r2
 80005d0:	4699      	mov	r9, r3
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 ff55 	bl	8001494 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fd8b 	bl	800110c <__aeabi_fsub>
 80005f6:	f000 ff4d 	bl	8001494 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fce1 	bl	8002fe0 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f976 	bl	8002918 <__aeabi_dsub>
 800062c:	f002 fcd8 	bl	8002fe0 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	b082      	sub	sp, #8
 800064e:	000d      	movs	r5, r1
 8000650:	4691      	mov	r9, r2
 8000652:	4698      	mov	r8, r3
 8000654:	428b      	cmp	r3, r1
 8000656:	d82f      	bhi.n	80006b8 <__udivmoddi4+0x78>
 8000658:	d02c      	beq.n	80006b4 <__udivmoddi4+0x74>
 800065a:	4641      	mov	r1, r8
 800065c:	4648      	mov	r0, r9
 800065e:	f002 fe55 	bl	800330c <__clzdi2>
 8000662:	0029      	movs	r1, r5
 8000664:	0006      	movs	r6, r0
 8000666:	0020      	movs	r0, r4
 8000668:	f002 fe50 	bl	800330c <__clzdi2>
 800066c:	1a33      	subs	r3, r6, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469a      	mov	sl, r3
 8000674:	d500      	bpl.n	8000678 <__udivmoddi4+0x38>
 8000676:	e076      	b.n	8000766 <__udivmoddi4+0x126>
 8000678:	464b      	mov	r3, r9
 800067a:	4652      	mov	r2, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001f      	movs	r7, r3
 8000680:	464b      	mov	r3, r9
 8000682:	4662      	mov	r2, ip
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d828      	bhi.n	80006de <__udivmoddi4+0x9e>
 800068c:	d025      	beq.n	80006da <__udivmoddi4+0x9a>
 800068e:	4653      	mov	r3, sl
 8000690:	1ba4      	subs	r4, r4, r6
 8000692:	41bd      	sbcs	r5, r7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <__udivmoddi4+0x5a>
 8000698:	e07b      	b.n	8000792 <__udivmoddi4+0x152>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4652      	mov	r2, sl
 80006a6:	4093      	lsls	r3, r2
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4662      	mov	r2, ip
 80006ae:	4093      	lsls	r3, r2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	e018      	b.n	80006e6 <__udivmoddi4+0xa6>
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d9d0      	bls.n	800065a <__udivmoddi4+0x1a>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <__udivmoddi4+0x8a>
 80006c6:	601c      	str	r4, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	9800      	ldr	r0, [sp, #0]
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	b002      	add	sp, #8
 80006d0:	bc1c      	pop	{r2, r3, r4}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	46a2      	mov	sl, r4
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d9d7      	bls.n	800068e <__udivmoddi4+0x4e>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4663      	mov	r3, ip
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e9      	beq.n	80006c0 <__udivmoddi4+0x80>
 80006ec:	07fb      	lsls	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	4641      	mov	r1, r8
 80006f2:	0872      	lsrs	r2, r6, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	087b      	lsrs	r3, r7, #1
 80006f8:	4666      	mov	r6, ip
 80006fa:	e00e      	b.n	800071a <__udivmoddi4+0xda>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d101      	bne.n	8000704 <__udivmoddi4+0xc4>
 8000700:	42a2      	cmp	r2, r4
 8000702:	d80c      	bhi.n	800071e <__udivmoddi4+0xde>
 8000704:	1aa4      	subs	r4, r4, r2
 8000706:	419d      	sbcs	r5, r3
 8000708:	2001      	movs	r0, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2100      	movs	r1, #0
 8000710:	3e01      	subs	r6, #1
 8000712:	1824      	adds	r4, r4, r0
 8000714:	414d      	adcs	r5, r1
 8000716:	2e00      	cmp	r6, #0
 8000718:	d006      	beq.n	8000728 <__udivmoddi4+0xe8>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d9ee      	bls.n	80006fc <__udivmoddi4+0xbc>
 800071e:	3e01      	subs	r6, #1
 8000720:	1924      	adds	r4, r4, r4
 8000722:	416d      	adcs	r5, r5
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1f8      	bne.n	800071a <__udivmoddi4+0xda>
 8000728:	9800      	ldr	r0, [sp, #0]
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	4653      	mov	r3, sl
 800072e:	1900      	adds	r0, r0, r4
 8000730:	4169      	adcs	r1, r5
 8000732:	2b00      	cmp	r3, #0
 8000734:	db23      	blt.n	800077e <__udivmoddi4+0x13e>
 8000736:	002b      	movs	r3, r5
 8000738:	4652      	mov	r2, sl
 800073a:	40d3      	lsrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	4664      	mov	r4, ip
 8000740:	40e2      	lsrs	r2, r4
 8000742:	001c      	movs	r4, r3
 8000744:	4653      	mov	r3, sl
 8000746:	0015      	movs	r5, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	db2d      	blt.n	80007a8 <__udivmoddi4+0x168>
 800074c:	0026      	movs	r6, r4
 800074e:	4657      	mov	r7, sl
 8000750:	40be      	lsls	r6, r7
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4667      	mov	r7, ip
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e7ac      	b.n	80006c0 <__udivmoddi4+0x80>
 8000766:	4662      	mov	r2, ip
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	464a      	mov	r2, r9
 800076e:	40da      	lsrs	r2, r3
 8000770:	4661      	mov	r1, ip
 8000772:	0013      	movs	r3, r2
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	0017      	movs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e780      	b.n	8000680 <__udivmoddi4+0x40>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	4666      	mov	r6, ip
 8000788:	409a      	lsls	r2, r3
 800078a:	0023      	movs	r3, r4
 800078c:	40f3      	lsrs	r3, r6
 800078e:	4313      	orrs	r3, r2
 8000790:	e7d4      	b.n	800073c <__udivmoddi4+0xfc>
 8000792:	4662      	mov	r2, ip
 8000794:	2320      	movs	r3, #32
 8000796:	2100      	movs	r1, #0
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	9100      	str	r1, [sp, #0]
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	e780      	b.n	80006aa <__udivmoddi4+0x6a>
 80007a8:	2320      	movs	r3, #32
 80007aa:	4662      	mov	r2, ip
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	002f      	movs	r7, r5
 80007b4:	46b0      	mov	r8, r6
 80007b6:	4666      	mov	r6, ip
 80007b8:	40b7      	lsls	r7, r6
 80007ba:	4646      	mov	r6, r8
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7c8      	b.n	8000754 <__udivmoddi4+0x114>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4647      	mov	r7, r8
 80007c8:	46ce      	mov	lr, r9
 80007ca:	0243      	lsls	r3, r0, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0044      	lsls	r4, r0, #1
 80007d0:	0fc2      	lsrs	r2, r0, #31
 80007d2:	469c      	mov	ip, r3
 80007d4:	0048      	lsls	r0, r1, #1
 80007d6:	00dd      	lsls	r5, r3, #3
 80007d8:	024b      	lsls	r3, r1, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	0e00      	lsrs	r0, r0, #24
 80007e0:	b580      	push	{r7, lr}
 80007e2:	4698      	mov	r8, r3
 80007e4:	0026      	movs	r6, r4
 80007e6:	4691      	mov	r9, r2
 80007e8:	0fc9      	lsrs	r1, r1, #31
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	1a27      	subs	r7, r4, r0
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d029      	beq.n	8000846 <__aeabi_fadd+0x82>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dd15      	ble.n	8000822 <__aeabi_fadd+0x5e>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d14a      	bne.n	8000890 <__aeabi_fadd+0xcc>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x3c>
 80007fe:	e095      	b.n	800092c <__aeabi_fadd+0x168>
 8000800:	08ed      	lsrs	r5, r5, #3
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e088      	b.n	800091a <__aeabi_fadd+0x156>
 8000808:	026b      	lsls	r3, r5, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2e6      	uxtb	r6, r4
 800080e:	025b      	lsls	r3, r3, #9
 8000810:	05f6      	lsls	r6, r6, #23
 8000812:	0a58      	lsrs	r0, r3, #9
 8000814:	4330      	orrs	r0, r6
 8000816:	07d2      	lsls	r2, r2, #31
 8000818:	4310      	orrs	r0, r2
 800081a:	bc0c      	pop	{r2, r3}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	2f00      	cmp	r7, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fadd+0x64>
 8000826:	e087      	b.n	8000938 <__aeabi_fadd+0x174>
 8000828:	1c60      	adds	r0, r4, #1
 800082a:	b2c0      	uxtb	r0, r0
 800082c:	2801      	cmp	r0, #1
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x6e>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 8000832:	1aee      	subs	r6, r5, r3
 8000834:	0172      	lsls	r2, r6, #5
 8000836:	d500      	bpl.n	800083a <__aeabi_fadd+0x76>
 8000838:	e0c5      	b.n	80009c6 <__aeabi_fadd+0x202>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d13d      	bne.n	80008ba <__aeabi_fadd+0xf6>
 800083e:	2200      	movs	r2, #0
 8000840:	2600      	movs	r6, #0
 8000842:	2300      	movs	r3, #0
 8000844:	e7e3      	b.n	800080e <__aeabi_fadd+0x4a>
 8000846:	2f00      	cmp	r7, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e096      	b.n	800097a <__aeabi_fadd+0x1b6>
 800084c:	2800      	cmp	r0, #0
 800084e:	d05d      	beq.n	800090c <__aeabi_fadd+0x148>
 8000850:	2cff      	cmp	r4, #255	; 0xff
 8000852:	d060      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	4313      	orrs	r3, r2
 800085a:	2f1b      	cmp	r7, #27
 800085c:	dd00      	ble.n	8000860 <__aeabi_fadd+0x9c>
 800085e:	e0ec      	b.n	8000a3a <__aeabi_fadd+0x276>
 8000860:	2220      	movs	r2, #32
 8000862:	1bd2      	subs	r2, r2, r7
 8000864:	0018      	movs	r0, r3
 8000866:	4093      	lsls	r3, r2
 8000868:	40f8      	lsrs	r0, r7
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	4193      	sbcs	r3, r2
 800086e:	4303      	orrs	r3, r0
 8000870:	18ed      	adds	r5, r5, r3
 8000872:	016b      	lsls	r3, r5, #5
 8000874:	d57b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 8000876:	3401      	adds	r4, #1
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xba>
 800087c:	e0b7      	b.n	80009ee <__aeabi_fadd+0x22a>
 800087e:	2201      	movs	r2, #1
 8000880:	2607      	movs	r6, #7
 8000882:	402a      	ands	r2, r5
 8000884:	086b      	lsrs	r3, r5, #1
 8000886:	4d9a      	ldr	r5, [pc, #616]	; (8000af0 <__aeabi_fadd+0x32c>)
 8000888:	401d      	ands	r5, r3
 800088a:	4315      	orrs	r5, r2
 800088c:	402e      	ands	r6, r5
 800088e:	e029      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000890:	2cff      	cmp	r4, #255	; 0xff
 8000892:	d0b5      	beq.n	8000800 <__aeabi_fadd+0x3c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	04d2      	lsls	r2, r2, #19
 8000898:	4313      	orrs	r3, r2
 800089a:	2f1b      	cmp	r7, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fadd+0xdc>
 800089e:	e0b2      	b.n	8000a06 <__aeabi_fadd+0x242>
 80008a0:	2220      	movs	r2, #32
 80008a2:	1bd2      	subs	r2, r2, r7
 80008a4:	0019      	movs	r1, r3
 80008a6:	4093      	lsls	r3, r2
 80008a8:	40f9      	lsrs	r1, r7
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	4193      	sbcs	r3, r2
 80008ae:	430b      	orrs	r3, r1
 80008b0:	1aed      	subs	r5, r5, r3
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	d55b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 80008b6:	01ad      	lsls	r5, r5, #6
 80008b8:	09ae      	lsrs	r6, r5, #6
 80008ba:	0030      	movs	r0, r6
 80008bc:	f002 fd08 	bl	80032d0 <__clzsi2>
 80008c0:	3805      	subs	r0, #5
 80008c2:	4086      	lsls	r6, r0
 80008c4:	4284      	cmp	r4, r0
 80008c6:	dc65      	bgt.n	8000994 <__aeabi_fadd+0x1d0>
 80008c8:	1b04      	subs	r4, r0, r4
 80008ca:	0033      	movs	r3, r6
 80008cc:	2020      	movs	r0, #32
 80008ce:	3401      	adds	r4, #1
 80008d0:	40e3      	lsrs	r3, r4
 80008d2:	1b04      	subs	r4, r0, r4
 80008d4:	40a6      	lsls	r6, r4
 80008d6:	1e75      	subs	r5, r6, #1
 80008d8:	41ae      	sbcs	r6, r5
 80008da:	4333      	orrs	r3, r6
 80008dc:	2607      	movs	r6, #7
 80008de:	001d      	movs	r5, r3
 80008e0:	2400      	movs	r4, #0
 80008e2:	401e      	ands	r6, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	464b      	mov	r3, r9
 80008e8:	401a      	ands	r2, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008ee:	230f      	movs	r3, #15
 80008f0:	402b      	ands	r3, r5
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008f6:	3504      	adds	r5, #4
 80008f8:	016b      	lsls	r3, r5, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x13a>
 80008fc:	e780      	b.n	8000800 <__aeabi_fadd+0x3c>
 80008fe:	3401      	adds	r4, #1
 8000900:	b2e6      	uxtb	r6, r4
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d12f      	bne.n	8000966 <__aeabi_fadd+0x1a2>
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e780      	b.n	800080e <__aeabi_fadd+0x4a>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d152      	bne.n	80009b6 <__aeabi_fadd+0x1f2>
 8000910:	2cff      	cmp	r4, #255	; 0xff
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000914:	e774      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000916:	000a      	movs	r2, r1
 8000918:	08ed      	lsrs	r5, r5, #3
 800091a:	2d00      	cmp	r5, #0
 800091c:	d0f3      	beq.n	8000906 <__aeabi_fadd+0x142>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	432b      	orrs	r3, r5
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	0a5b      	lsrs	r3, r3, #9
 8000928:	26ff      	movs	r6, #255	; 0xff
 800092a:	e770      	b.n	800080e <__aeabi_fadd+0x4a>
 800092c:	3f01      	subs	r7, #1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d0be      	beq.n	80008b0 <__aeabi_fadd+0xec>
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d1b1      	bne.n	800089a <__aeabi_fadd+0xd6>
 8000936:	e763      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_fadd+0x208>
 800093c:	28ff      	cmp	r0, #255	; 0xff
 800093e:	d069      	beq.n	8000a14 <__aeabi_fadd+0x250>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	04e4      	lsls	r4, r4, #19
 8000944:	427a      	negs	r2, r7
 8000946:	4325      	orrs	r5, r4
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dd00      	ble.n	800094e <__aeabi_fadd+0x18a>
 800094c:	e0c5      	b.n	8000ada <__aeabi_fadd+0x316>
 800094e:	002c      	movs	r4, r5
 8000950:	2620      	movs	r6, #32
 8000952:	40d4      	lsrs	r4, r2
 8000954:	1ab2      	subs	r2, r6, r2
 8000956:	4095      	lsls	r5, r2
 8000958:	1e6a      	subs	r2, r5, #1
 800095a:	4195      	sbcs	r5, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	1b5d      	subs	r5, r3, r5
 8000960:	0004      	movs	r4, r0
 8000962:	4689      	mov	r9, r1
 8000964:	e7a5      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000966:	01ab      	lsls	r3, r5, #6
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e750      	b.n	800080e <__aeabi_fadd+0x4a>
 800096c:	2400      	movs	r4, #0
 800096e:	2201      	movs	r2, #1
 8000970:	464b      	mov	r3, r9
 8000972:	401a      	ands	r2, r3
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d1ba      	bne.n	80008ee <__aeabi_fadd+0x12a>
 8000978:	e742      	b.n	8000800 <__aeabi_fadd+0x3c>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d13b      	bne.n	80009f6 <__aeabi_fadd+0x232>
 800097e:	3401      	adds	r4, #1
 8000980:	b2e0      	uxtb	r0, r4
 8000982:	2801      	cmp	r0, #1
 8000984:	dd4a      	ble.n	8000a1c <__aeabi_fadd+0x258>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d0bd      	beq.n	8000906 <__aeabi_fadd+0x142>
 800098a:	2607      	movs	r6, #7
 800098c:	18ed      	adds	r5, r5, r3
 800098e:	086d      	lsrs	r5, r5, #1
 8000990:	402e      	ands	r6, r5
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000994:	2307      	movs	r3, #7
 8000996:	4d57      	ldr	r5, [pc, #348]	; (8000af4 <__aeabi_fadd+0x330>)
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	4035      	ands	r5, r6
 800099c:	401e      	ands	r6, r3
 800099e:	e7a1      	b.n	80008e4 <__aeabi_fadd+0x120>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d11b      	bne.n	80009dc <__aeabi_fadd+0x218>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d16e      	bne.n	8000a86 <__aeabi_fadd+0x2c2>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x1ea>
 80009ac:	e09a      	b.n	8000ae4 <__aeabi_fadd+0x320>
 80009ae:	000a      	movs	r2, r1
 80009b0:	001d      	movs	r5, r3
 80009b2:	003c      	movs	r4, r7
 80009b4:	e724      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2f00      	cmp	r7, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fadd+0x1fa>
 80009bc:	e758      	b.n	8000870 <__aeabi_fadd+0xac>
 80009be:	2cff      	cmp	r4, #255	; 0xff
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e74a      	b.n	800085a <__aeabi_fadd+0x96>
 80009c4:	e7a7      	b.n	8000916 <__aeabi_fadd+0x152>
 80009c6:	1b5e      	subs	r6, r3, r5
 80009c8:	4689      	mov	r9, r1
 80009ca:	e776      	b.n	80008ba <__aeabi_fadd+0xf6>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d11c      	bne.n	8000a0a <__aeabi_fadd+0x246>
 80009d0:	000a      	movs	r2, r1
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d01f      	beq.n	8000a16 <__aeabi_fadd+0x252>
 80009d6:	0004      	movs	r4, r0
 80009d8:	001d      	movs	r5, r3
 80009da:	e711      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d15d      	bne.n	8000a9c <__aeabi_fadd+0x2d8>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d117      	bne.n	8000a14 <__aeabi_fadd+0x250>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	2200      	movs	r2, #0
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	26ff      	movs	r6, #255	; 0xff
 80009ec:	e70f      	b.n	800080e <__aeabi_fadd+0x4a>
 80009ee:	000a      	movs	r2, r1
 80009f0:	26ff      	movs	r6, #255	; 0xff
 80009f2:	2300      	movs	r3, #0
 80009f4:	e70b      	b.n	800080e <__aeabi_fadd+0x4a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d121      	bne.n	8000a3e <__aeabi_fadd+0x27a>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d166      	bne.n	8000acc <__aeabi_fadd+0x308>
 80009fe:	28ff      	cmp	r0, #255	; 0xff
 8000a00:	d1e9      	bne.n	80009d6 <__aeabi_fadd+0x212>
 8000a02:	001d      	movs	r5, r3
 8000a04:	e787      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e752      	b.n	80008b0 <__aeabi_fadd+0xec>
 8000a0a:	1c7a      	adds	r2, r7, #1
 8000a0c:	d0a7      	beq.n	800095e <__aeabi_fadd+0x19a>
 8000a0e:	43fa      	mvns	r2, r7
 8000a10:	28ff      	cmp	r0, #255	; 0xff
 8000a12:	d199      	bne.n	8000948 <__aeabi_fadd+0x184>
 8000a14:	000a      	movs	r2, r1
 8000a16:	001d      	movs	r5, r3
 8000a18:	24ff      	movs	r4, #255	; 0xff
 8000a1a:	e6f1      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d121      	bne.n	8000a64 <__aeabi_fadd+0x2a0>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d04f      	beq.n	8000ac4 <__aeabi_fadd+0x300>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d04c      	beq.n	8000ac2 <__aeabi_fadd+0x2fe>
 8000a28:	18ed      	adds	r5, r5, r3
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	d59e      	bpl.n	800096c <__aeabi_fadd+0x1a8>
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <__aeabi_fadd+0x330>)
 8000a30:	3607      	adds	r6, #7
 8000a32:	402e      	ands	r6, r5
 8000a34:	2401      	movs	r4, #1
 8000a36:	401d      	ands	r5, r3
 8000a38:	e754      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xac>
 8000a3e:	28ff      	cmp	r0, #255	; 0xff
 8000a40:	d0df      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a42:	2480      	movs	r4, #128	; 0x80
 8000a44:	04e4      	lsls	r4, r4, #19
 8000a46:	427f      	negs	r7, r7
 8000a48:	4325      	orrs	r5, r4
 8000a4a:	2f1b      	cmp	r7, #27
 8000a4c:	dc4d      	bgt.n	8000aea <__aeabi_fadd+0x326>
 8000a4e:	2620      	movs	r6, #32
 8000a50:	1bf6      	subs	r6, r6, r7
 8000a52:	002c      	movs	r4, r5
 8000a54:	40b5      	lsls	r5, r6
 8000a56:	40fc      	lsrs	r4, r7
 8000a58:	1e6a      	subs	r2, r5, #1
 8000a5a:	4195      	sbcs	r5, r2
 8000a5c:	4325      	orrs	r5, r4
 8000a5e:	18ed      	adds	r5, r5, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	e706      	b.n	8000872 <__aeabi_fadd+0xae>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d0cc      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e753      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4660      	mov	r0, ip
 8000a72:	03c9      	lsls	r1, r1, #15
 8000a74:	4208      	tst	r0, r1
 8000a76:	d003      	beq.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	4208      	tst	r0, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	2101      	movs	r1, #1
 8000a82:	4011      	ands	r1, r2
 8000a84:	e747      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x2c8>
 8000a8a:	e6b9      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a8c:	1aea      	subs	r2, r5, r3
 8000a8e:	0150      	lsls	r0, r2, #5
 8000a90:	d525      	bpl.n	8000ade <__aeabi_fadd+0x31a>
 8000a92:	2607      	movs	r6, #7
 8000a94:	1b5d      	subs	r5, r3, r5
 8000a96:	402e      	ands	r6, r5
 8000a98:	4689      	mov	r9, r1
 8000a9a:	e723      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a9c:	24ff      	movs	r4, #255	; 0xff
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2e0>
 8000aa2:	e6ad      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4660      	mov	r0, ip
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4210      	tst	r0, r2
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000aae:	4640      	mov	r0, r8
 8000ab0:	4210      	tst	r0, r2
 8000ab2:	d101      	bne.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	464b      	mov	r3, r9
 8000abc:	24ff      	movs	r4, #255	; 0xff
 8000abe:	401a      	ands	r2, r3
 8000ac0:	e69e      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000ac2:	002b      	movs	r3, r5
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e69d      	b.n	8000808 <__aeabi_fadd+0x44>
 8000acc:	1c7a      	adds	r2, r7, #1
 8000ace:	d0c6      	beq.n	8000a5e <__aeabi_fadd+0x29a>
 8000ad0:	43ff      	mvns	r7, r7
 8000ad2:	28ff      	cmp	r0, #255	; 0xff
 8000ad4:	d1b9      	bne.n	8000a4a <__aeabi_fadd+0x286>
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	e71d      	b.n	8000916 <__aeabi_fadd+0x152>
 8000ada:	2501      	movs	r5, #1
 8000adc:	e73f      	b.n	800095e <__aeabi_fadd+0x19a>
 8000ade:	1e15      	subs	r5, r2, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fadd+0x320>
 8000ae2:	e744      	b.n	800096e <__aeabi_fadd+0x1aa>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e691      	b.n	800080e <__aeabi_fadd+0x4a>
 8000aea:	2501      	movs	r5, #1
 8000aec:	e7b7      	b.n	8000a5e <__aeabi_fadd+0x29a>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4657      	mov	r7, sl
 8000afc:	464e      	mov	r6, r9
 8000afe:	4645      	mov	r5, r8
 8000b00:	46de      	mov	lr, fp
 8000b02:	0244      	lsls	r4, r0, #9
 8000b04:	b5e0      	push	{r5, r6, r7, lr}
 8000b06:	0046      	lsls	r6, r0, #1
 8000b08:	4688      	mov	r8, r1
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	0e36      	lsrs	r6, r6, #24
 8000b0e:	0fc7      	lsrs	r7, r0, #31
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d063      	beq.n	8000bdc <__aeabi_fdiv+0xe4>
 8000b14:	2eff      	cmp	r6, #255	; 0xff
 8000b16:	d024      	beq.n	8000b62 <__aeabi_fdiv+0x6a>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	00e4      	lsls	r4, r4, #3
 8000b1c:	04db      	lsls	r3, r3, #19
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	469b      	mov	fp, r3
 8000b26:	3e7f      	subs	r6, #127	; 0x7f
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	025d      	lsls	r5, r3, #9
 8000b2e:	0fd2      	lsrs	r2, r2, #31
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	0a6d      	lsrs	r5, r5, #9
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	4690      	mov	r8, r2
 8000b38:	4692      	mov	sl, r2
 8000b3a:	d065      	beq.n	8000c08 <__aeabi_fdiv+0x110>
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d055      	beq.n	8000bec <__aeabi_fdiv+0xf4>
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	2100      	movs	r1, #0
 8000b44:	00ed      	lsls	r5, r5, #3
 8000b46:	04d2      	lsls	r2, r2, #19
 8000b48:	3b7f      	subs	r3, #127	; 0x7f
 8000b4a:	4315      	orrs	r5, r2
 8000b4c:	1af6      	subs	r6, r6, r3
 8000b4e:	4643      	mov	r3, r8
 8000b50:	464a      	mov	r2, r9
 8000b52:	407b      	eors	r3, r7
 8000b54:	2a0f      	cmp	r2, #15
 8000b56:	d900      	bls.n	8000b5a <__aeabi_fdiv+0x62>
 8000b58:	e08d      	b.n	8000c76 <__aeabi_fdiv+0x17e>
 8000b5a:	486d      	ldr	r0, [pc, #436]	; (8000d10 <__aeabi_fdiv+0x218>)
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	5882      	ldr	r2, [r0, r2]
 8000b60:	4697      	mov	pc, r2
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d154      	bne.n	8000c10 <__aeabi_fdiv+0x118>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	26ff      	movs	r6, #255	; 0xff
 8000b6e:	469b      	mov	fp, r3
 8000b70:	e7da      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000b72:	2500      	movs	r5, #0
 8000b74:	4653      	mov	r3, sl
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d01b      	beq.n	8000bb2 <__aeabi_fdiv+0xba>
 8000b7a:	2903      	cmp	r1, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e0bf      	b.n	8000d00 <__aeabi_fdiv+0x208>
 8000b80:	2901      	cmp	r1, #1
 8000b82:	d028      	beq.n	8000bd6 <__aeabi_fdiv+0xde>
 8000b84:	0030      	movs	r0, r6
 8000b86:	307f      	adds	r0, #127	; 0x7f
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd20      	ble.n	8000bce <__aeabi_fdiv+0xd6>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <__aeabi_fdiv+0x21c>)
 8000ba2:	3080      	adds	r0, #128	; 0x80
 8000ba4:	4015      	ands	r5, r2
 8000ba6:	28fe      	cmp	r0, #254	; 0xfe
 8000ba8:	dc03      	bgt.n	8000bb2 <__aeabi_fdiv+0xba>
 8000baa:	01ac      	lsls	r4, r5, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	b2c2      	uxtb	r2, r0
 8000bb0:	e001      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	05d2      	lsls	r2, r2, #23
 8000bba:	0a60      	lsrs	r0, r4, #9
 8000bbc:	07db      	lsls	r3, r3, #31
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	4318      	orrs	r0, r3
 8000bc2:	bc3c      	pop	{r2, r3, r4, r5}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	46ab      	mov	fp, r5
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bce:	2201      	movs	r2, #1
 8000bd0:	1a10      	subs	r0, r2, r0
 8000bd2:	281b      	cmp	r0, #27
 8000bd4:	dd7c      	ble.n	8000cd0 <__aeabi_fdiv+0x1d8>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7ec      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11d      	bne.n	8000c1c <__aeabi_fdiv+0x124>
 8000be0:	2304      	movs	r3, #4
 8000be2:	4699      	mov	r9, r3
 8000be4:	3b03      	subs	r3, #3
 8000be6:	2600      	movs	r6, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	e79d      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000bec:	3eff      	subs	r6, #255	; 0xff
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d120      	bne.n	8000c34 <__aeabi_fdiv+0x13c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	2a0f      	cmp	r2, #15
 8000bfe:	d8d8      	bhi.n	8000bb2 <__aeabi_fdiv+0xba>
 8000c00:	4845      	ldr	r0, [pc, #276]	; (8000d18 <__aeabi_fdiv+0x220>)
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	5882      	ldr	r2, [r0, r2]
 8000c06:	4697      	mov	pc, r2
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d119      	bne.n	8000c40 <__aeabi_fdiv+0x148>
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	e7f1      	b.n	8000bf4 <__aeabi_fdiv+0xfc>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	26ff      	movs	r6, #255	; 0xff
 8000c18:	469b      	mov	fp, r3
 8000c1a:	e785      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f002 fb57 	bl	80032d0 <__clzsi2>
 8000c22:	2676      	movs	r6, #118	; 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4276      	negs	r6, r6
 8000c2c:	1a36      	subs	r6, r6, r0
 8000c2e:	4699      	mov	r9, r3
 8000c30:	469b      	mov	fp, r3
 8000c32:	e779      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c34:	464a      	mov	r2, r9
 8000c36:	2303      	movs	r3, #3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	e786      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f002 fb45 	bl	80032d0 <__clzsi2>
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	1836      	adds	r6, r6, r0
 8000c4a:	409d      	lsls	r5, r3
 8000c4c:	3676      	adds	r6, #118	; 0x76
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	2480      	movs	r4, #128	; 0x80
 8000c54:	2300      	movs	r3, #0
 8000c56:	03e4      	lsls	r4, r4, #15
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	e7ac      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	03db      	lsls	r3, r3, #15
 8000c62:	421c      	tst	r4, r3
 8000c64:	d028      	beq.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c66:	421d      	tst	r5, r3
 8000c68:	d126      	bne.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c6a:	432b      	orrs	r3, r5
 8000c6c:	025c      	lsls	r4, r3, #9
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	4643      	mov	r3, r8
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	e79f      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c76:	0162      	lsls	r2, r4, #5
 8000c78:	016c      	lsls	r4, r5, #5
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d224      	bcs.n	8000cc8 <__aeabi_fdiv+0x1d0>
 8000c7e:	211b      	movs	r1, #27
 8000c80:	2500      	movs	r5, #0
 8000c82:	3e01      	subs	r6, #1
 8000c84:	2701      	movs	r7, #1
 8000c86:	0010      	movs	r0, r2
 8000c88:	006d      	lsls	r5, r5, #1
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	db01      	blt.n	8000c94 <__aeabi_fdiv+0x19c>
 8000c90:	4294      	cmp	r4, r2
 8000c92:	d801      	bhi.n	8000c98 <__aeabi_fdiv+0x1a0>
 8000c94:	1b12      	subs	r2, r2, r4
 8000c96:	433d      	orrs	r5, r7
 8000c98:	3901      	subs	r1, #1
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d1f3      	bne.n	8000c86 <__aeabi_fdiv+0x18e>
 8000c9e:	0014      	movs	r4, r2
 8000ca0:	1e62      	subs	r2, r4, #1
 8000ca2:	4194      	sbcs	r4, r2
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	e76d      	b.n	8000b84 <__aeabi_fdiv+0x8c>
 8000ca8:	46ba      	mov	sl, r7
 8000caa:	4659      	mov	r1, fp
 8000cac:	0025      	movs	r5, r4
 8000cae:	4653      	mov	r3, sl
 8000cb0:	2902      	cmp	r1, #2
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fdiv+0x1be>
 8000cb4:	e761      	b.n	8000b7a <__aeabi_fdiv+0x82>
 8000cb6:	e77c      	b.n	8000bb2 <__aeabi_fdiv+0xba>
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	e776      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cc8:	1b12      	subs	r2, r2, r4
 8000cca:	211a      	movs	r1, #26
 8000ccc:	2501      	movs	r5, #1
 8000cce:	e7d9      	b.n	8000c84 <__aeabi_fdiv+0x18c>
 8000cd0:	369e      	adds	r6, #158	; 0x9e
 8000cd2:	002a      	movs	r2, r5
 8000cd4:	40b5      	lsls	r5, r6
 8000cd6:	002c      	movs	r4, r5
 8000cd8:	40c2      	lsrs	r2, r0
 8000cda:	1e65      	subs	r5, r4, #1
 8000cdc:	41ac      	sbcs	r4, r5
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	4022      	ands	r2, r4
 8000ce8:	2a04      	cmp	r2, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0162      	lsls	r2, r4, #5
 8000cf0:	d403      	bmi.n	8000cfa <__aeabi_fdiv+0x202>
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	e75d      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	e75a      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	03e4      	lsls	r4, r4, #15
 8000d04:	432c      	orrs	r4, r5
 8000d06:	0264      	lsls	r4, r4, #9
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	e753      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	08018834 	.word	0x08018834
 8000d14:	f7ffffff 	.word	0xf7ffffff
 8000d18:	08018874 	.word	0x08018874

08000d1c <__eqsf2>:
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0042      	lsls	r2, r0, #1
 8000d20:	024e      	lsls	r6, r1, #9
 8000d22:	004c      	lsls	r4, r1, #1
 8000d24:	0245      	lsls	r5, r0, #9
 8000d26:	0a6d      	lsrs	r5, r5, #9
 8000d28:	0e12      	lsrs	r2, r2, #24
 8000d2a:	0fc3      	lsrs	r3, r0, #31
 8000d2c:	0a76      	lsrs	r6, r6, #9
 8000d2e:	0e24      	lsrs	r4, r4, #24
 8000d30:	0fc9      	lsrs	r1, r1, #31
 8000d32:	2aff      	cmp	r2, #255	; 0xff
 8000d34:	d00f      	beq.n	8000d56 <__eqsf2+0x3a>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d011      	beq.n	8000d5e <__eqsf2+0x42>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	d000      	beq.n	8000d42 <__eqsf2+0x26>
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	42b5      	cmp	r5, r6
 8000d44:	d1fc      	bne.n	8000d40 <__eqsf2+0x24>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d00d      	beq.n	8000d66 <__eqsf2+0x4a>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d1f8      	bne.n	8000d40 <__eqsf2+0x24>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	1e45      	subs	r5, r0, #1
 8000d52:	41a8      	sbcs	r0, r5
 8000d54:	e7f4      	b.n	8000d40 <__eqsf2+0x24>
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d1f1      	bne.n	8000d40 <__eqsf2+0x24>
 8000d5c:	e7eb      	b.n	8000d36 <__eqsf2+0x1a>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d1ed      	bne.n	8000d40 <__eqsf2+0x24>
 8000d64:	e7e9      	b.n	8000d3a <__eqsf2+0x1e>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ea      	b.n	8000d40 <__eqsf2+0x24>
 8000d6a:	46c0      	nop			; (mov r8, r8)

08000d6c <__gesf2>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	004a      	lsls	r2, r1, #1
 8000d70:	024e      	lsls	r6, r1, #9
 8000d72:	0245      	lsls	r5, r0, #9
 8000d74:	0044      	lsls	r4, r0, #1
 8000d76:	0a6d      	lsrs	r5, r5, #9
 8000d78:	0e24      	lsrs	r4, r4, #24
 8000d7a:	0fc3      	lsrs	r3, r0, #31
 8000d7c:	0a76      	lsrs	r6, r6, #9
 8000d7e:	0e12      	lsrs	r2, r2, #24
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d015      	beq.n	8000db2 <__gesf2+0x46>
 8000d86:	2aff      	cmp	r2, #255	; 0xff
 8000d88:	d00e      	beq.n	8000da8 <__gesf2+0x3c>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d115      	bne.n	8000dba <__gesf2+0x4e>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d101      	bne.n	8000d96 <__gesf2+0x2a>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d01c      	beq.n	8000dd0 <__gesf2+0x64>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d014      	beq.n	8000dc4 <__gesf2+0x58>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d027      	beq.n	8000dee <__gesf2+0x82>
 8000d9e:	2002      	movs	r0, #2
 8000da0:	3b01      	subs	r3, #1
 8000da2:	4018      	ands	r0, r3
 8000da4:	3801      	subs	r0, #1
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d0ee      	beq.n	8000d8a <__gesf2+0x1e>
 8000dac:	2002      	movs	r0, #2
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7f9      	b.n	8000da6 <__gesf2+0x3a>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d1fa      	bne.n	8000dac <__gesf2+0x40>
 8000db6:	2aff      	cmp	r2, #255	; 0xff
 8000db8:	d00e      	beq.n	8000dd8 <__gesf2+0x6c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d10e      	bne.n	8000ddc <__gesf2+0x70>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0ed      	beq.n	8000d9e <__gesf2+0x32>
 8000dc2:	e00b      	b.n	8000ddc <__gesf2+0x70>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	3901      	subs	r1, #1
 8000dc8:	4399      	bics	r1, r3
 8000dca:	0008      	movs	r0, r1
 8000dcc:	3001      	adds	r0, #1
 8000dce:	e7ea      	b.n	8000da6 <__gesf2+0x3a>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0e7      	beq.n	8000da6 <__gesf2+0x3a>
 8000dd6:	e7e2      	b.n	8000d9e <__gesf2+0x32>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d1e7      	bne.n	8000dac <__gesf2+0x40>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d1de      	bne.n	8000d9e <__gesf2+0x32>
 8000de0:	4294      	cmp	r4, r2
 8000de2:	dd05      	ble.n	8000df0 <__gesf2+0x84>
 8000de4:	2102      	movs	r1, #2
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	4008      	ands	r0, r1
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7db      	b.n	8000da6 <__gesf2+0x3a>
 8000dee:	2400      	movs	r4, #0
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc04      	bgt.n	8000dfe <__gesf2+0x92>
 8000df4:	42b5      	cmp	r5, r6
 8000df6:	d8d2      	bhi.n	8000d9e <__gesf2+0x32>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d2d3      	bcs.n	8000da6 <__gesf2+0x3a>
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	2301      	movs	r3, #1
 8000e02:	4398      	bics	r0, r3
 8000e04:	3001      	adds	r0, #1
 8000e06:	e7ce      	b.n	8000da6 <__gesf2+0x3a>

08000e08 <__lesf2>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0244      	lsls	r4, r0, #9
 8000e0e:	024d      	lsls	r5, r1, #9
 8000e10:	0fc3      	lsrs	r3, r0, #31
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	0e12      	lsrs	r2, r2, #24
 8000e18:	0a6d      	lsrs	r5, r5, #9
 8000e1a:	0e00      	lsrs	r0, r0, #24
 8000e1c:	0fc9      	lsrs	r1, r1, #31
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d012      	beq.n	8000e48 <__lesf2+0x40>
 8000e22:	28ff      	cmp	r0, #255	; 0xff
 8000e24:	d00c      	beq.n	8000e40 <__lesf2+0x38>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d112      	bne.n	8000e50 <__lesf2+0x48>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d119      	bne.n	8000e62 <__lesf2+0x5a>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d117      	bne.n	8000e62 <__lesf2+0x5a>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d02b      	beq.n	8000e8e <__lesf2+0x86>
 8000e36:	2002      	movs	r0, #2
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4018      	ands	r0, r3
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e026      	b.n	8000e8e <__lesf2+0x86>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d0f0      	beq.n	8000e26 <__lesf2+0x1e>
 8000e44:	2002      	movs	r0, #2
 8000e46:	e022      	b.n	8000e8e <__lesf2+0x86>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d1fb      	bne.n	8000e44 <__lesf2+0x3c>
 8000e4c:	28ff      	cmp	r0, #255	; 0xff
 8000e4e:	d01f      	beq.n	8000e90 <__lesf2+0x88>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d11f      	bne.n	8000e94 <__lesf2+0x8c>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d11d      	bne.n	8000e94 <__lesf2+0x8c>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4018      	ands	r0, r3
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e015      	b.n	8000e8e <__lesf2+0x86>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d00e      	beq.n	8000e84 <__lesf2+0x7c>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d1e5      	bne.n	8000e36 <__lesf2+0x2e>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	dc04      	bgt.n	8000e7a <__lesf2+0x72>
 8000e70:	42ac      	cmp	r4, r5
 8000e72:	d8e0      	bhi.n	8000e36 <__lesf2+0x2e>
 8000e74:	2000      	movs	r0, #0
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	d209      	bcs.n	8000e8e <__lesf2+0x86>
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4398      	bics	r0, r3
 8000e80:	3001      	adds	r0, #1
 8000e82:	e004      	b.n	8000e8e <__lesf2+0x86>
 8000e84:	2301      	movs	r3, #1
 8000e86:	3901      	subs	r1, #1
 8000e88:	4399      	bics	r1, r3
 8000e8a:	0008      	movs	r0, r1
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d1d7      	bne.n	8000e44 <__lesf2+0x3c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ce      	bne.n	8000e36 <__lesf2+0x2e>
 8000e98:	4282      	cmp	r2, r0
 8000e9a:	dde7      	ble.n	8000e6c <__lesf2+0x64>
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	4008      	ands	r0, r1
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7f3      	b.n	8000e8e <__lesf2+0x86>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fmul>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4657      	mov	r7, sl
 8000eae:	4645      	mov	r5, r8
 8000eb0:	46de      	mov	lr, fp
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	0243      	lsls	r3, r0, #9
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	0045      	lsls	r5, r0, #1
 8000eba:	b083      	sub	sp, #12
 8000ebc:	1c0f      	adds	r7, r1, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	0e2d      	lsrs	r5, r5, #24
 8000ec2:	0fc6      	lsrs	r6, r0, #31
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d057      	beq.n	8000f78 <__aeabi_fmul+0xd0>
 8000ec8:	2dff      	cmp	r5, #255	; 0xff
 8000eca:	d024      	beq.n	8000f16 <__aeabi_fmul+0x6e>
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	04c0      	lsls	r0, r0, #19
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4681      	mov	r9, r0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	469b      	mov	fp, r3
 8000edc:	3d7f      	subs	r5, #127	; 0x7f
 8000ede:	027c      	lsls	r4, r7, #9
 8000ee0:	007a      	lsls	r2, r7, #1
 8000ee2:	0ffb      	lsrs	r3, r7, #31
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	4698      	mov	r8, r3
 8000eea:	d023      	beq.n	8000f34 <__aeabi_fmul+0x8c>
 8000eec:	2aff      	cmp	r2, #255	; 0xff
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fmul+0xe0>
 8000ef0:	00e3      	lsls	r3, r4, #3
 8000ef2:	2480      	movs	r4, #128	; 0x80
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	04e4      	lsls	r4, r4, #19
 8000ef8:	3a7f      	subs	r2, #127	; 0x7f
 8000efa:	431c      	orrs	r4, r3
 8000efc:	18ad      	adds	r5, r5, r2
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	4647      	mov	r7, r8
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4653      	mov	r3, sl
 8000f06:	4077      	eors	r7, r6
 8000f08:	003a      	movs	r2, r7
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d848      	bhi.n	8000fa0 <__aeabi_fmul+0xf8>
 8000f0e:	497d      	ldr	r1, [pc, #500]	; (8001104 <__aeabi_fmul+0x25c>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	58cb      	ldr	r3, [r1, r3]
 8000f14:	469f      	mov	pc, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x74>
 8000f1a:	e085      	b.n	8001028 <__aeabi_fmul+0x180>
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	469a      	mov	sl, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	469b      	mov	fp, r3
 8000f24:	027c      	lsls	r4, r7, #9
 8000f26:	007a      	lsls	r2, r7, #1
 8000f28:	0ffb      	lsrs	r3, r7, #31
 8000f2a:	25ff      	movs	r5, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	4698      	mov	r8, r3
 8000f32:	d1db      	bne.n	8000eec <__aeabi_fmul+0x44>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fmul+0x92>
 8000f38:	e090      	b.n	800105c <__aeabi_fmul+0x1b4>
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4692      	mov	sl, r2
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7db      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f46:	464c      	mov	r4, r9
 8000f48:	4658      	mov	r0, fp
 8000f4a:	0017      	movs	r7, r2
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d024      	beq.n	8000f9a <__aeabi_fmul+0xf2>
 8000f50:	2803      	cmp	r0, #3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fmul+0xae>
 8000f54:	e0cf      	b.n	80010f6 <__aeabi_fmul+0x24e>
 8000f56:	2200      	movs	r2, #0
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d14d      	bne.n	8000ffa <__aeabi_fmul+0x152>
 8000f5e:	0258      	lsls	r0, r3, #9
 8000f60:	05d2      	lsls	r2, r2, #23
 8000f62:	0a40      	lsrs	r0, r0, #9
 8000f64:	07ff      	lsls	r7, r7, #31
 8000f66:	4310      	orrs	r0, r2
 8000f68:	4338      	orrs	r0, r7
 8000f6a:	b003      	add	sp, #12
 8000f6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	46a2      	mov	sl, r4
 8000f74:	46ab      	mov	fp, r5
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d15b      	bne.n	8001034 <__aeabi_fmul+0x18c>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3b03      	subs	r3, #3
 8000f82:	2500      	movs	r5, #0
 8000f84:	469b      	mov	fp, r3
 8000f86:	e7aa      	b.n	8000ede <__aeabi_fmul+0x36>
 8000f88:	35ff      	adds	r5, #255	; 0xff
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d160      	bne.n	8001050 <__aeabi_fmul+0x1a8>
 8000f8e:	4652      	mov	r2, sl
 8000f90:	2302      	movs	r3, #2
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4692      	mov	sl, r2
 8000f96:	2002      	movs	r0, #2
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e7de      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	0c1b      	lsrs	r3, r3, #16
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	0426      	lsls	r6, r4, #16
 8000faa:	0c36      	lsrs	r6, r6, #16
 8000fac:	0418      	lsls	r0, r3, #16
 8000fae:	4661      	mov	r1, ip
 8000fb0:	0033      	movs	r3, r6
 8000fb2:	0c22      	lsrs	r2, r4, #16
 8000fb4:	4664      	mov	r4, ip
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	4343      	muls	r3, r0
 8000fba:	434e      	muls	r6, r1
 8000fbc:	4350      	muls	r0, r2
 8000fbe:	4354      	muls	r4, r2
 8000fc0:	1980      	adds	r0, r0, r6
 8000fc2:	0c1a      	lsrs	r2, r3, #16
 8000fc4:	1812      	adds	r2, r2, r0
 8000fc6:	4296      	cmp	r6, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_fmul+0x12a>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4464      	add	r4, ip
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	0410      	lsls	r0, r2, #16
 8000fd8:	18c0      	adds	r0, r0, r3
 8000fda:	0183      	lsls	r3, r0, #6
 8000fdc:	1e5e      	subs	r6, r3, #1
 8000fde:	41b3      	sbcs	r3, r6
 8000fe0:	0e80      	lsrs	r0, r0, #26
 8000fe2:	4318      	orrs	r0, r3
 8000fe4:	0c13      	lsrs	r3, r2, #16
 8000fe6:	191b      	adds	r3, r3, r4
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	001c      	movs	r4, r3
 8000fee:	0123      	lsls	r3, r4, #4
 8000ff0:	d579      	bpl.n	80010e6 <__aeabi_fmul+0x23e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	0862      	lsrs	r2, r4, #1
 8000ff6:	401c      	ands	r4, r3
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	dd4d      	ble.n	800109e <__aeabi_fmul+0x1f6>
 8001002:	0763      	lsls	r3, r4, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x168>
 8001006:	230f      	movs	r3, #15
 8001008:	4023      	ands	r3, r4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x168>
 800100e:	3404      	adds	r4, #4
 8001010:	0123      	lsls	r3, r4, #4
 8001012:	d503      	bpl.n	800101c <__aeabi_fmul+0x174>
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <__aeabi_fmul+0x260>)
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	401c      	ands	r4, r3
 800101a:	3280      	adds	r2, #128	; 0x80
 800101c:	2afe      	cmp	r2, #254	; 0xfe
 800101e:	dcbc      	bgt.n	8000f9a <__aeabi_fmul+0xf2>
 8001020:	01a3      	lsls	r3, r4, #6
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	e79a      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001028:	230c      	movs	r3, #12
 800102a:	469a      	mov	sl, r3
 800102c:	3b09      	subs	r3, #9
 800102e:	25ff      	movs	r5, #255	; 0xff
 8001030:	469b      	mov	fp, r3
 8001032:	e754      	b.n	8000ede <__aeabi_fmul+0x36>
 8001034:	0018      	movs	r0, r3
 8001036:	f002 f94b 	bl	80032d0 <__clzsi2>
 800103a:	464a      	mov	r2, r9
 800103c:	1f43      	subs	r3, r0, #5
 800103e:	2576      	movs	r5, #118	; 0x76
 8001040:	409a      	lsls	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	426d      	negs	r5, r5
 8001046:	4691      	mov	r9, r2
 8001048:	1a2d      	subs	r5, r5, r0
 800104a:	469a      	mov	sl, r3
 800104c:	469b      	mov	fp, r3
 800104e:	e746      	b.n	8000ede <__aeabi_fmul+0x36>
 8001050:	4652      	mov	r2, sl
 8001052:	2303      	movs	r3, #3
 8001054:	431a      	orrs	r2, r3
 8001056:	4692      	mov	sl, r2
 8001058:	2003      	movs	r0, #3
 800105a:	e750      	b.n	8000efe <__aeabi_fmul+0x56>
 800105c:	0020      	movs	r0, r4
 800105e:	f002 f937 	bl	80032d0 <__clzsi2>
 8001062:	1f43      	subs	r3, r0, #5
 8001064:	1a2d      	subs	r5, r5, r0
 8001066:	409c      	lsls	r4, r3
 8001068:	3d76      	subs	r5, #118	; 0x76
 800106a:	2000      	movs	r0, #0
 800106c:	e747      	b.n	8000efe <__aeabi_fmul+0x56>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	2700      	movs	r7, #0
 8001072:	03db      	lsls	r3, r3, #15
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001078:	4642      	mov	r2, r8
 800107a:	e766      	b.n	8000f4a <__aeabi_fmul+0xa2>
 800107c:	464c      	mov	r4, r9
 800107e:	0032      	movs	r2, r6
 8001080:	4658      	mov	r0, fp
 8001082:	e762      	b.n	8000f4a <__aeabi_fmul+0xa2>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	464a      	mov	r2, r9
 8001088:	03db      	lsls	r3, r3, #15
 800108a:	421a      	tst	r2, r3
 800108c:	d022      	beq.n	80010d4 <__aeabi_fmul+0x22c>
 800108e:	421c      	tst	r4, r3
 8001090:	d120      	bne.n	80010d4 <__aeabi_fmul+0x22c>
 8001092:	4323      	orrs	r3, r4
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5b      	lsrs	r3, r3, #9
 8001098:	4647      	mov	r7, r8
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	e75f      	b.n	8000f5e <__aeabi_fmul+0xb6>
 800109e:	2301      	movs	r3, #1
 80010a0:	1a9a      	subs	r2, r3, r2
 80010a2:	2a1b      	cmp	r2, #27
 80010a4:	dc21      	bgt.n	80010ea <__aeabi_fmul+0x242>
 80010a6:	0023      	movs	r3, r4
 80010a8:	9901      	ldr	r1, [sp, #4]
 80010aa:	40d3      	lsrs	r3, r2
 80010ac:	319e      	adds	r1, #158	; 0x9e
 80010ae:	408c      	lsls	r4, r1
 80010b0:	001a      	movs	r2, r3
 80010b2:	0023      	movs	r3, r4
 80010b4:	1e5c      	subs	r4, r3, #1
 80010b6:	41a3      	sbcs	r3, r4
 80010b8:	4313      	orrs	r3, r2
 80010ba:	075a      	lsls	r2, r3, #29
 80010bc:	d004      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010be:	220f      	movs	r2, #15
 80010c0:	401a      	ands	r2, r3
 80010c2:	2a04      	cmp	r2, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010c6:	3304      	adds	r3, #4
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	d411      	bmi.n	80010f0 <__aeabi_fmul+0x248>
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	2200      	movs	r2, #0
 80010d2:	e744      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	464a      	mov	r2, r9
 80010d8:	03db      	lsls	r3, r3, #15
 80010da:	4313      	orrs	r3, r2
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	0037      	movs	r7, r6
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	e73b      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010e6:	9501      	str	r5, [sp, #4]
 80010e8:	e787      	b.n	8000ffa <__aeabi_fmul+0x152>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2300      	movs	r3, #0
 80010ee:	e736      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2300      	movs	r3, #0
 80010f4:	e733      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	4323      	orrs	r3, r4
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0a5b      	lsrs	r3, r3, #9
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	e72c      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001104:	080188b4 	.word	0x080188b4
 8001108:	f7ffffff 	.word	0xf7ffffff

0800110c <__aeabi_fsub>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	4647      	mov	r7, r8
 8001110:	46ce      	mov	lr, r9
 8001112:	0044      	lsls	r4, r0, #1
 8001114:	0fc2      	lsrs	r2, r0, #31
 8001116:	b580      	push	{r7, lr}
 8001118:	0247      	lsls	r7, r0, #9
 800111a:	0248      	lsls	r0, r1, #9
 800111c:	0a40      	lsrs	r0, r0, #9
 800111e:	4684      	mov	ip, r0
 8001120:	4666      	mov	r6, ip
 8001122:	0048      	lsls	r0, r1, #1
 8001124:	0a7f      	lsrs	r7, r7, #9
 8001126:	0e24      	lsrs	r4, r4, #24
 8001128:	00f6      	lsls	r6, r6, #3
 800112a:	0025      	movs	r5, r4
 800112c:	4690      	mov	r8, r2
 800112e:	00fb      	lsls	r3, r7, #3
 8001130:	0e00      	lsrs	r0, r0, #24
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	46b1      	mov	r9, r6
 8001136:	28ff      	cmp	r0, #255	; 0xff
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x30>
 800113a:	e085      	b.n	8001248 <__aeabi_fsub+0x13c>
 800113c:	2601      	movs	r6, #1
 800113e:	4071      	eors	r1, r6
 8001140:	1a26      	subs	r6, r4, r0
 8001142:	4291      	cmp	r1, r2
 8001144:	d057      	beq.n	80011f6 <__aeabi_fsub+0xea>
 8001146:	2e00      	cmp	r6, #0
 8001148:	dd43      	ble.n	80011d2 <__aeabi_fsub+0xc6>
 800114a:	2800      	cmp	r0, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x44>
 800114e:	e07f      	b.n	8001250 <__aeabi_fsub+0x144>
 8001150:	4649      	mov	r1, r9
 8001152:	2900      	cmp	r1, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x4c>
 8001156:	e0aa      	b.n	80012ae <__aeabi_fsub+0x1a2>
 8001158:	3e01      	subs	r6, #1
 800115a:	2e00      	cmp	r6, #0
 800115c:	d000      	beq.n	8001160 <__aeabi_fsub+0x54>
 800115e:	e0f7      	b.n	8001350 <__aeabi_fsub+0x244>
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	d400      	bmi.n	8001168 <__aeabi_fsub+0x5c>
 8001166:	e08b      	b.n	8001280 <__aeabi_fsub+0x174>
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	099c      	lsrs	r4, r3, #6
 800116c:	0020      	movs	r0, r4
 800116e:	f002 f8af 	bl	80032d0 <__clzsi2>
 8001172:	3805      	subs	r0, #5
 8001174:	4084      	lsls	r4, r0
 8001176:	4285      	cmp	r5, r0
 8001178:	dd00      	ble.n	800117c <__aeabi_fsub+0x70>
 800117a:	e0d3      	b.n	8001324 <__aeabi_fsub+0x218>
 800117c:	1b45      	subs	r5, r0, r5
 800117e:	0023      	movs	r3, r4
 8001180:	2020      	movs	r0, #32
 8001182:	3501      	adds	r5, #1
 8001184:	40eb      	lsrs	r3, r5
 8001186:	1b45      	subs	r5, r0, r5
 8001188:	40ac      	lsls	r4, r5
 800118a:	1e62      	subs	r2, r4, #1
 800118c:	4194      	sbcs	r4, r2
 800118e:	4323      	orrs	r3, r4
 8001190:	2407      	movs	r4, #7
 8001192:	2500      	movs	r5, #0
 8001194:	401c      	ands	r4, r3
 8001196:	2201      	movs	r2, #1
 8001198:	4641      	mov	r1, r8
 800119a:	400a      	ands	r2, r1
 800119c:	2c00      	cmp	r4, #0
 800119e:	d004      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a0:	210f      	movs	r1, #15
 80011a2:	4019      	ands	r1, r3
 80011a4:	2904      	cmp	r1, #4
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a8:	3304      	adds	r3, #4
 80011aa:	0159      	lsls	r1, r3, #5
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_fsub+0xa4>
 80011ae:	e080      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 80011b0:	3501      	adds	r5, #1
 80011b2:	b2ec      	uxtb	r4, r5
 80011b4:	2dff      	cmp	r5, #255	; 0xff
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0xae>
 80011b8:	e0a3      	b.n	8001302 <__aeabi_fsub+0x1f6>
 80011ba:	24ff      	movs	r4, #255	; 0xff
 80011bc:	2300      	movs	r3, #0
 80011be:	025b      	lsls	r3, r3, #9
 80011c0:	05e4      	lsls	r4, r4, #23
 80011c2:	0a58      	lsrs	r0, r3, #9
 80011c4:	07d2      	lsls	r2, r2, #31
 80011c6:	4320      	orrs	r0, r4
 80011c8:	4310      	orrs	r0, r2
 80011ca:	bc0c      	pop	{r2, r3}
 80011cc:	4690      	mov	r8, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d174      	bne.n	80012c0 <__aeabi_fsub+0x1b4>
 80011d6:	1c60      	adds	r0, r4, #1
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	2801      	cmp	r0, #1
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_fsub+0xd4>
 80011de:	e0a7      	b.n	8001330 <__aeabi_fsub+0x224>
 80011e0:	464a      	mov	r2, r9
 80011e2:	1a9c      	subs	r4, r3, r2
 80011e4:	0162      	lsls	r2, r4, #5
 80011e6:	d500      	bpl.n	80011ea <__aeabi_fsub+0xde>
 80011e8:	e0b6      	b.n	8001358 <__aeabi_fsub+0x24c>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d1be      	bne.n	800116c <__aeabi_fsub+0x60>
 80011ee:	2200      	movs	r2, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e7e3      	b.n	80011be <__aeabi_fsub+0xb2>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_fsub+0xf0>
 80011fa:	e085      	b.n	8001308 <__aeabi_fsub+0x1fc>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d046      	beq.n	800128e <__aeabi_fsub+0x182>
 8001200:	2cff      	cmp	r4, #255	; 0xff
 8001202:	d049      	beq.n	8001298 <__aeabi_fsub+0x18c>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	4648      	mov	r0, r9
 8001208:	04d2      	lsls	r2, r2, #19
 800120a:	4310      	orrs	r0, r2
 800120c:	4681      	mov	r9, r0
 800120e:	2201      	movs	r2, #1
 8001210:	2e1b      	cmp	r6, #27
 8001212:	dc09      	bgt.n	8001228 <__aeabi_fsub+0x11c>
 8001214:	2020      	movs	r0, #32
 8001216:	464c      	mov	r4, r9
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	4084      	lsls	r4, r0
 800121c:	464a      	mov	r2, r9
 800121e:	0020      	movs	r0, r4
 8001220:	40f2      	lsrs	r2, r6
 8001222:	1e44      	subs	r4, r0, #1
 8001224:	41a0      	sbcs	r0, r4
 8001226:	4302      	orrs	r2, r0
 8001228:	189b      	adds	r3, r3, r2
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	d528      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800122e:	3501      	adds	r5, #1
 8001230:	2dff      	cmp	r5, #255	; 0xff
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x12a>
 8001234:	e0a8      	b.n	8001388 <__aeabi_fsub+0x27c>
 8001236:	2201      	movs	r2, #1
 8001238:	2407      	movs	r4, #7
 800123a:	4994      	ldr	r1, [pc, #592]	; (800148c <__aeabi_fsub+0x380>)
 800123c:	401a      	ands	r2, r3
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	400b      	ands	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	401c      	ands	r4, r3
 8001246:	e7a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_fsub+0x142>
 800124c:	e778      	b.n	8001140 <__aeabi_fsub+0x34>
 800124e:	e775      	b.n	800113c <__aeabi_fsub+0x30>
 8001250:	2cff      	cmp	r4, #255	; 0xff
 8001252:	d054      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	4649      	mov	r1, r9
 8001258:	04d2      	lsls	r2, r2, #19
 800125a:	4311      	orrs	r1, r2
 800125c:	4689      	mov	r9, r1
 800125e:	2201      	movs	r2, #1
 8001260:	2e1b      	cmp	r6, #27
 8001262:	dc09      	bgt.n	8001278 <__aeabi_fsub+0x16c>
 8001264:	2120      	movs	r1, #32
 8001266:	4648      	mov	r0, r9
 8001268:	1b89      	subs	r1, r1, r6
 800126a:	4088      	lsls	r0, r1
 800126c:	464a      	mov	r2, r9
 800126e:	0001      	movs	r1, r0
 8001270:	40f2      	lsrs	r2, r6
 8001272:	1e48      	subs	r0, r1, #1
 8001274:	4181      	sbcs	r1, r0
 8001276:	430a      	orrs	r2, r1
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	d500      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800127e:	e773      	b.n	8001168 <__aeabi_fsub+0x5c>
 8001280:	2201      	movs	r2, #1
 8001282:	4641      	mov	r1, r8
 8001284:	400a      	ands	r2, r1
 8001286:	0759      	lsls	r1, r3, #29
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x180>
 800128a:	e789      	b.n	80011a0 <__aeabi_fsub+0x94>
 800128c:	e011      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800128e:	4648      	mov	r0, r9
 8001290:	2800      	cmp	r0, #0
 8001292:	d158      	bne.n	8001346 <__aeabi_fsub+0x23a>
 8001294:	2cff      	cmp	r4, #255	; 0xff
 8001296:	d10c      	bne.n	80012b2 <__aeabi_fsub+0x1a6>
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x194>
 800129e:	e78c      	b.n	80011ba <__aeabi_fsub+0xae>
 80012a0:	2080      	movs	r0, #128	; 0x80
 80012a2:	03c0      	lsls	r0, r0, #15
 80012a4:	4303      	orrs	r3, r0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	0a5b      	lsrs	r3, r3, #9
 80012aa:	24ff      	movs	r4, #255	; 0xff
 80012ac:	e787      	b.n	80011be <__aeabi_fsub+0xb2>
 80012ae:	2cff      	cmp	r4, #255	; 0xff
 80012b0:	d025      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2dff      	cmp	r5, #255	; 0xff
 80012b6:	d0f0      	beq.n	800129a <__aeabi_fsub+0x18e>
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	b2ec      	uxtb	r4, r5
 80012be:	e77e      	b.n	80011be <__aeabi_fsub+0xb2>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d04d      	beq.n	8001360 <__aeabi_fsub+0x254>
 80012c4:	28ff      	cmp	r0, #255	; 0xff
 80012c6:	d018      	beq.n	80012fa <__aeabi_fsub+0x1ee>
 80012c8:	2480      	movs	r4, #128	; 0x80
 80012ca:	04e4      	lsls	r4, r4, #19
 80012cc:	4272      	negs	r2, r6
 80012ce:	4323      	orrs	r3, r4
 80012d0:	2a1b      	cmp	r2, #27
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_fsub+0x1ca>
 80012d4:	e0c4      	b.n	8001460 <__aeabi_fsub+0x354>
 80012d6:	001c      	movs	r4, r3
 80012d8:	2520      	movs	r5, #32
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	1aaa      	subs	r2, r5, r2
 80012de:	4093      	lsls	r3, r2
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	4193      	sbcs	r3, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	464a      	mov	r2, r9
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4688      	mov	r8, r1
 80012ee:	e738      	b.n	8001162 <__aeabi_fsub+0x56>
 80012f0:	1c72      	adds	r2, r6, #1
 80012f2:	d0f8      	beq.n	80012e6 <__aeabi_fsub+0x1da>
 80012f4:	43f2      	mvns	r2, r6
 80012f6:	28ff      	cmp	r0, #255	; 0xff
 80012f8:	d1ea      	bne.n	80012d0 <__aeabi_fsub+0x1c4>
 80012fa:	000a      	movs	r2, r1
 80012fc:	464b      	mov	r3, r9
 80012fe:	25ff      	movs	r5, #255	; 0xff
 8001300:	e7d7      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	0a5b      	lsrs	r3, r3, #9
 8001306:	e75a      	b.n	80011be <__aeabi_fsub+0xb2>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d141      	bne.n	8001390 <__aeabi_fsub+0x284>
 800130c:	1c65      	adds	r5, r4, #1
 800130e:	b2e9      	uxtb	r1, r5
 8001310:	2901      	cmp	r1, #1
 8001312:	dd45      	ble.n	80013a0 <__aeabi_fsub+0x294>
 8001314:	2dff      	cmp	r5, #255	; 0xff
 8001316:	d100      	bne.n	800131a <__aeabi_fsub+0x20e>
 8001318:	e74f      	b.n	80011ba <__aeabi_fsub+0xae>
 800131a:	2407      	movs	r4, #7
 800131c:	444b      	add	r3, r9
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	401c      	ands	r4, r3
 8001322:	e738      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001324:	2207      	movs	r2, #7
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <__aeabi_fsub+0x384>)
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	4023      	ands	r3, r4
 800132c:	4014      	ands	r4, r2
 800132e:	e732      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d11d      	bne.n	8001370 <__aeabi_fsub+0x264>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d17a      	bne.n	800142e <__aeabi_fsub+0x322>
 8001338:	464b      	mov	r3, r9
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x234>
 800133e:	e091      	b.n	8001464 <__aeabi_fsub+0x358>
 8001340:	000a      	movs	r2, r1
 8001342:	2500      	movs	r5, #0
 8001344:	e7b5      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001346:	3e01      	subs	r6, #1
 8001348:	2e00      	cmp	r6, #0
 800134a:	d119      	bne.n	8001380 <__aeabi_fsub+0x274>
 800134c:	444b      	add	r3, r9
 800134e:	e76c      	b.n	800122a <__aeabi_fsub+0x11e>
 8001350:	2cff      	cmp	r4, #255	; 0xff
 8001352:	d184      	bne.n	800125e <__aeabi_fsub+0x152>
 8001354:	25ff      	movs	r5, #255	; 0xff
 8001356:	e7ac      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001358:	464a      	mov	r2, r9
 800135a:	4688      	mov	r8, r1
 800135c:	1ad4      	subs	r4, r2, r3
 800135e:	e705      	b.n	800116c <__aeabi_fsub+0x60>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1c5      	bne.n	80012f0 <__aeabi_fsub+0x1e4>
 8001364:	000a      	movs	r2, r1
 8001366:	28ff      	cmp	r0, #255	; 0xff
 8001368:	d0c8      	beq.n	80012fc <__aeabi_fsub+0x1f0>
 800136a:	0005      	movs	r5, r0
 800136c:	464b      	mov	r3, r9
 800136e:	e7a0      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d149      	bne.n	8001408 <__aeabi_fsub+0x2fc>
 8001374:	464b      	mov	r3, r9
 8001376:	2b00      	cmp	r3, #0
 8001378:	d077      	beq.n	800146a <__aeabi_fsub+0x35e>
 800137a:	000a      	movs	r2, r1
 800137c:	25ff      	movs	r5, #255	; 0xff
 800137e:	e798      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001380:	2cff      	cmp	r4, #255	; 0xff
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x27a>
 8001384:	e743      	b.n	800120e <__aeabi_fsub+0x102>
 8001386:	e787      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001388:	000a      	movs	r2, r1
 800138a:	24ff      	movs	r4, #255	; 0xff
 800138c:	2300      	movs	r3, #0
 800138e:	e716      	b.n	80011be <__aeabi_fsub+0xb2>
 8001390:	2c00      	cmp	r4, #0
 8001392:	d115      	bne.n	80013c0 <__aeabi_fsub+0x2b4>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <__aeabi_fsub+0x33c>
 8001398:	28ff      	cmp	r0, #255	; 0xff
 800139a:	d1e6      	bne.n	800136a <__aeabi_fsub+0x25e>
 800139c:	464b      	mov	r3, r9
 800139e:	e77b      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d120      	bne.n	80013e6 <__aeabi_fsub+0x2da>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d057      	beq.n	8001458 <__aeabi_fsub+0x34c>
 80013a8:	4649      	mov	r1, r9
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d053      	beq.n	8001456 <__aeabi_fsub+0x34a>
 80013ae:	444b      	add	r3, r9
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	d568      	bpl.n	8001486 <__aeabi_fsub+0x37a>
 80013b4:	2407      	movs	r4, #7
 80013b6:	4a36      	ldr	r2, [pc, #216]	; (8001490 <__aeabi_fsub+0x384>)
 80013b8:	401c      	ands	r4, r3
 80013ba:	2501      	movs	r5, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	e6ea      	b.n	8001196 <__aeabi_fsub+0x8a>
 80013c0:	28ff      	cmp	r0, #255	; 0xff
 80013c2:	d0eb      	beq.n	800139c <__aeabi_fsub+0x290>
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	04d2      	lsls	r2, r2, #19
 80013c8:	4276      	negs	r6, r6
 80013ca:	4313      	orrs	r3, r2
 80013cc:	2e1b      	cmp	r6, #27
 80013ce:	dc53      	bgt.n	8001478 <__aeabi_fsub+0x36c>
 80013d0:	2520      	movs	r5, #32
 80013d2:	1bad      	subs	r5, r5, r6
 80013d4:	001a      	movs	r2, r3
 80013d6:	40ab      	lsls	r3, r5
 80013d8:	40f2      	lsrs	r2, r6
 80013da:	1e5c      	subs	r4, r3, #1
 80013dc:	41a3      	sbcs	r3, r4
 80013de:	4313      	orrs	r3, r2
 80013e0:	444b      	add	r3, r9
 80013e2:	0005      	movs	r5, r0
 80013e4:	e721      	b.n	800122a <__aeabi_fsub+0x11e>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0d8      	beq.n	800139c <__aeabi_fsub+0x290>
 80013ea:	4649      	mov	r1, r9
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x2e6>
 80013f0:	e752      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	03c9      	lsls	r1, r1, #15
 80013f6:	420f      	tst	r7, r1
 80013f8:	d100      	bne.n	80013fc <__aeabi_fsub+0x2f0>
 80013fa:	e74d      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013fc:	4660      	mov	r0, ip
 80013fe:	4208      	tst	r0, r1
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x2f8>
 8001402:	e749      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001404:	464b      	mov	r3, r9
 8001406:	e747      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001408:	4648      	mov	r0, r9
 800140a:	25ff      	movs	r5, #255	; 0xff
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x306>
 8001410:	e74f      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	03d2      	lsls	r2, r2, #15
 8001416:	4217      	tst	r7, r2
 8001418:	d004      	beq.n	8001424 <__aeabi_fsub+0x318>
 800141a:	4660      	mov	r0, ip
 800141c:	4210      	tst	r0, r2
 800141e:	d101      	bne.n	8001424 <__aeabi_fsub+0x318>
 8001420:	464b      	mov	r3, r9
 8001422:	4688      	mov	r8, r1
 8001424:	2201      	movs	r2, #1
 8001426:	4641      	mov	r1, r8
 8001428:	25ff      	movs	r5, #255	; 0xff
 800142a:	400a      	ands	r2, r1
 800142c:	e741      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800142e:	4648      	mov	r0, r9
 8001430:	2800      	cmp	r0, #0
 8001432:	d01f      	beq.n	8001474 <__aeabi_fsub+0x368>
 8001434:	1a1a      	subs	r2, r3, r0
 8001436:	0150      	lsls	r0, r2, #5
 8001438:	d520      	bpl.n	800147c <__aeabi_fsub+0x370>
 800143a:	464a      	mov	r2, r9
 800143c:	2407      	movs	r4, #7
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	401c      	ands	r4, r3
 8001442:	4688      	mov	r8, r1
 8001444:	2500      	movs	r5, #0
 8001446:	e6a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001448:	1c74      	adds	r4, r6, #1
 800144a:	d0c9      	beq.n	80013e0 <__aeabi_fsub+0x2d4>
 800144c:	43f6      	mvns	r6, r6
 800144e:	28ff      	cmp	r0, #255	; 0xff
 8001450:	d1bc      	bne.n	80013cc <__aeabi_fsub+0x2c0>
 8001452:	464b      	mov	r3, r9
 8001454:	e720      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001456:	4699      	mov	r9, r3
 8001458:	464b      	mov	r3, r9
 800145a:	2500      	movs	r5, #0
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	e72b      	b.n	80012b8 <__aeabi_fsub+0x1ac>
 8001460:	2301      	movs	r3, #1
 8001462:	e740      	b.n	80012e6 <__aeabi_fsub+0x1da>
 8001464:	2200      	movs	r2, #0
 8001466:	2300      	movs	r3, #0
 8001468:	e6a9      	b.n	80011be <__aeabi_fsub+0xb2>
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	2200      	movs	r2, #0
 800146e:	03db      	lsls	r3, r3, #15
 8001470:	24ff      	movs	r4, #255	; 0xff
 8001472:	e6a4      	b.n	80011be <__aeabi_fsub+0xb2>
 8001474:	2500      	movs	r5, #0
 8001476:	e71c      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001478:	2301      	movs	r3, #1
 800147a:	e7b1      	b.n	80013e0 <__aeabi_fsub+0x2d4>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d0f1      	beq.n	8001464 <__aeabi_fsub+0x358>
 8001480:	0013      	movs	r3, r2
 8001482:	2500      	movs	r5, #0
 8001484:	e6fc      	b.n	8001280 <__aeabi_fsub+0x174>
 8001486:	2500      	movs	r5, #0
 8001488:	e6fa      	b.n	8001280 <__aeabi_fsub+0x174>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	7dffffff 	.word	0x7dffffff
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_f2iz>:
 8001494:	0241      	lsls	r1, r0, #9
 8001496:	0042      	lsls	r2, r0, #1
 8001498:	0fc3      	lsrs	r3, r0, #31
 800149a:	0a49      	lsrs	r1, r1, #9
 800149c:	0e12      	lsrs	r2, r2, #24
 800149e:	2000      	movs	r0, #0
 80014a0:	2a7e      	cmp	r2, #126	; 0x7e
 80014a2:	d90d      	bls.n	80014c0 <__aeabi_f2iz+0x2c>
 80014a4:	2a9d      	cmp	r2, #157	; 0x9d
 80014a6:	d80c      	bhi.n	80014c2 <__aeabi_f2iz+0x2e>
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	0400      	lsls	r0, r0, #16
 80014ac:	4301      	orrs	r1, r0
 80014ae:	2a95      	cmp	r2, #149	; 0x95
 80014b0:	dc0a      	bgt.n	80014c8 <__aeabi_f2iz+0x34>
 80014b2:	2096      	movs	r0, #150	; 0x96
 80014b4:	1a82      	subs	r2, r0, r2
 80014b6:	40d1      	lsrs	r1, r2
 80014b8:	4248      	negs	r0, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_f2iz+0x2c>
 80014be:	0008      	movs	r0, r1
 80014c0:	4770      	bx	lr
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <__aeabi_f2iz+0x3c>)
 80014c4:	1898      	adds	r0, r3, r2
 80014c6:	e7fb      	b.n	80014c0 <__aeabi_f2iz+0x2c>
 80014c8:	3a96      	subs	r2, #150	; 0x96
 80014ca:	4091      	lsls	r1, r2
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_f2iz+0x24>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	7fffffff 	.word	0x7fffffff

080014d4 <__aeabi_i2f>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d03d      	beq.n	8001556 <__aeabi_i2f+0x82>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f001 fef4 	bl	80032d0 <__clzsi2>
 80014e8:	229e      	movs	r2, #158	; 0x9e
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	2a96      	cmp	r2, #150	; 0x96
 80014ee:	dc07      	bgt.n	8001500 <__aeabi_i2f+0x2c>
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2808      	cmp	r0, #8
 80014f4:	dd33      	ble.n	800155e <__aeabi_i2f+0x8a>
 80014f6:	3808      	subs	r0, #8
 80014f8:	4085      	lsls	r5, r0
 80014fa:	0268      	lsls	r0, r5, #9
 80014fc:	0a40      	lsrs	r0, r0, #9
 80014fe:	e023      	b.n	8001548 <__aeabi_i2f+0x74>
 8001500:	2a99      	cmp	r2, #153	; 0x99
 8001502:	dd0b      	ble.n	800151c <__aeabi_i2f+0x48>
 8001504:	2305      	movs	r3, #5
 8001506:	0029      	movs	r1, r5
 8001508:	1a1b      	subs	r3, r3, r0
 800150a:	40d9      	lsrs	r1, r3
 800150c:	0003      	movs	r3, r0
 800150e:	331b      	adds	r3, #27
 8001510:	409d      	lsls	r5, r3
 8001512:	002b      	movs	r3, r5
 8001514:	1e5d      	subs	r5, r3, #1
 8001516:	41ab      	sbcs	r3, r5
 8001518:	4319      	orrs	r1, r3
 800151a:	000d      	movs	r5, r1
 800151c:	2805      	cmp	r0, #5
 800151e:	dd01      	ble.n	8001524 <__aeabi_i2f+0x50>
 8001520:	1f43      	subs	r3, r0, #5
 8001522:	409d      	lsls	r5, r3
 8001524:	002b      	movs	r3, r5
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <__aeabi_i2f+0x90>)
 8001528:	400b      	ands	r3, r1
 800152a:	076e      	lsls	r6, r5, #29
 800152c:	d009      	beq.n	8001542 <__aeabi_i2f+0x6e>
 800152e:	260f      	movs	r6, #15
 8001530:	4035      	ands	r5, r6
 8001532:	2d04      	cmp	r5, #4
 8001534:	d005      	beq.n	8001542 <__aeabi_i2f+0x6e>
 8001536:	3304      	adds	r3, #4
 8001538:	015d      	lsls	r5, r3, #5
 800153a:	d502      	bpl.n	8001542 <__aeabi_i2f+0x6e>
 800153c:	229f      	movs	r2, #159	; 0x9f
 800153e:	400b      	ands	r3, r1
 8001540:	1a12      	subs	r2, r2, r0
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	0a58      	lsrs	r0, r3, #9
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	0240      	lsls	r0, r0, #9
 800154a:	05d2      	lsls	r2, r2, #23
 800154c:	0a40      	lsrs	r0, r0, #9
 800154e:	07e4      	lsls	r4, r4, #31
 8001550:	4310      	orrs	r0, r2
 8001552:	4320      	orrs	r0, r4
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2000      	movs	r0, #0
 800155c:	e7f4      	b.n	8001548 <__aeabi_i2f+0x74>
 800155e:	0268      	lsls	r0, r5, #9
 8001560:	0a40      	lsrs	r0, r0, #9
 8001562:	e7f1      	b.n	8001548 <__aeabi_i2f+0x74>
 8001564:	fbffffff 	.word	0xfbffffff

08001568 <__aeabi_ui2f>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	1e04      	subs	r4, r0, #0
 800156c:	d034      	beq.n	80015d8 <__aeabi_ui2f+0x70>
 800156e:	f001 feaf 	bl	80032d0 <__clzsi2>
 8001572:	229e      	movs	r2, #158	; 0x9e
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	2a96      	cmp	r2, #150	; 0x96
 8001578:	dc07      	bgt.n	800158a <__aeabi_ui2f+0x22>
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	2808      	cmp	r0, #8
 800157e:	dd2e      	ble.n	80015de <__aeabi_ui2f+0x76>
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	0260      	lsls	r0, r4, #9
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	e021      	b.n	80015ce <__aeabi_ui2f+0x66>
 800158a:	2a99      	cmp	r2, #153	; 0x99
 800158c:	dd09      	ble.n	80015a2 <__aeabi_ui2f+0x3a>
 800158e:	0003      	movs	r3, r0
 8001590:	0021      	movs	r1, r4
 8001592:	331b      	adds	r3, #27
 8001594:	4099      	lsls	r1, r3
 8001596:	1e4b      	subs	r3, r1, #1
 8001598:	4199      	sbcs	r1, r3
 800159a:	2305      	movs	r3, #5
 800159c:	1a1b      	subs	r3, r3, r0
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	430c      	orrs	r4, r1
 80015a2:	2805      	cmp	r0, #5
 80015a4:	dd01      	ble.n	80015aa <__aeabi_ui2f+0x42>
 80015a6:	1f43      	subs	r3, r0, #5
 80015a8:	409c      	lsls	r4, r3
 80015aa:	0023      	movs	r3, r4
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <__aeabi_ui2f+0x7c>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	0765      	lsls	r5, r4, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015b4:	250f      	movs	r5, #15
 80015b6:	402c      	ands	r4, r5
 80015b8:	2c04      	cmp	r4, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015bc:	3304      	adds	r3, #4
 80015be:	015c      	lsls	r4, r3, #5
 80015c0:	d502      	bpl.n	80015c8 <__aeabi_ui2f+0x60>
 80015c2:	229f      	movs	r2, #159	; 0x9f
 80015c4:	400b      	ands	r3, r1
 80015c6:	1a12      	subs	r2, r2, r0
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	0a58      	lsrs	r0, r3, #9
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	0240      	lsls	r0, r0, #9
 80015d0:	05d2      	lsls	r2, r2, #23
 80015d2:	0a40      	lsrs	r0, r0, #9
 80015d4:	4310      	orrs	r0, r2
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	2200      	movs	r2, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	e7f7      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015de:	0260      	lsls	r0, r4, #9
 80015e0:	0a40      	lsrs	r0, r0, #9
 80015e2:	e7f4      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	464f      	mov	r7, r9
 80015ec:	4646      	mov	r6, r8
 80015ee:	46d6      	mov	lr, sl
 80015f0:	000c      	movs	r4, r1
 80015f2:	0309      	lsls	r1, r1, #12
 80015f4:	b5c0      	push	{r6, r7, lr}
 80015f6:	0a49      	lsrs	r1, r1, #9
 80015f8:	0f47      	lsrs	r7, r0, #29
 80015fa:	005e      	lsls	r6, r3, #1
 80015fc:	4339      	orrs	r1, r7
 80015fe:	031f      	lsls	r7, r3, #12
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	469c      	mov	ip, r3
 8001604:	0065      	lsls	r5, r4, #1
 8001606:	0a7b      	lsrs	r3, r7, #9
 8001608:	0f57      	lsrs	r7, r2, #29
 800160a:	431f      	orrs	r7, r3
 800160c:	0d6d      	lsrs	r5, r5, #21
 800160e:	0fe4      	lsrs	r4, r4, #31
 8001610:	0d76      	lsrs	r6, r6, #21
 8001612:	46a1      	mov	r9, r4
 8001614:	00c0      	lsls	r0, r0, #3
 8001616:	46b8      	mov	r8, r7
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	1bab      	subs	r3, r5, r6
 800161c:	4564      	cmp	r4, ip
 800161e:	d07b      	beq.n	8001718 <__aeabi_dadd+0x130>
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd5f      	ble.n	80016e4 <__aeabi_dadd+0xfc>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x42>
 8001628:	e0a4      	b.n	8001774 <__aeabi_dadd+0x18c>
 800162a:	003e      	movs	r6, r7
 800162c:	4316      	orrs	r6, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x4a>
 8001630:	e112      	b.n	8001858 <__aeabi_dadd+0x270>
 8001632:	1e5e      	subs	r6, r3, #1
 8001634:	2e00      	cmp	r6, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x52>
 8001638:	e19e      	b.n	8001978 <__aeabi_dadd+0x390>
 800163a:	1a87      	subs	r7, r0, r2
 800163c:	4643      	mov	r3, r8
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	2501      	movs	r5, #1
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	4240      	negs	r0, r0
 8001648:	1a09      	subs	r1, r1, r0
 800164a:	020b      	lsls	r3, r1, #8
 800164c:	d400      	bmi.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e131      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001650:	0249      	lsls	r1, r1, #9
 8001652:	0a4e      	lsrs	r6, r1, #9
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x72>
 8001658:	e16e      	b.n	8001938 <__aeabi_dadd+0x350>
 800165a:	0030      	movs	r0, r6
 800165c:	f001 fe38 	bl	80032d0 <__clzsi2>
 8001660:	0003      	movs	r3, r0
 8001662:	3b08      	subs	r3, #8
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x82>
 8001668:	e161      	b.n	800192e <__aeabi_dadd+0x346>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	409e      	lsls	r6, r3
 8001672:	40d1      	lsrs	r1, r2
 8001674:	409f      	lsls	r7, r3
 8001676:	430e      	orrs	r6, r1
 8001678:	429d      	cmp	r5, r3
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x96>
 800167c:	e151      	b.n	8001922 <__aeabi_dadd+0x33a>
 800167e:	1b5d      	subs	r5, r3, r5
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	2b1f      	cmp	r3, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0xa0>
 8001686:	e17c      	b.n	8001982 <__aeabi_dadd+0x39a>
 8001688:	2120      	movs	r1, #32
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	003d      	movs	r5, r7
 800168e:	0030      	movs	r0, r6
 8001690:	408f      	lsls	r7, r1
 8001692:	4088      	lsls	r0, r1
 8001694:	40dd      	lsrs	r5, r3
 8001696:	1e79      	subs	r1, r7, #1
 8001698:	418f      	sbcs	r7, r1
 800169a:	0031      	movs	r1, r6
 800169c:	2207      	movs	r2, #7
 800169e:	4328      	orrs	r0, r5
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	2500      	movs	r5, #0
 80016a4:	4307      	orrs	r7, r0
 80016a6:	403a      	ands	r2, r7
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016ac:	230f      	movs	r3, #15
 80016ae:	403b      	ands	r3, r7
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	42bb      	cmp	r3, r7
 80016b8:	41bf      	sbcs	r7, r7
 80016ba:	427f      	negs	r7, r7
 80016bc:	19c9      	adds	r1, r1, r7
 80016be:	001f      	movs	r7, r3
 80016c0:	020b      	lsls	r3, r1, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0xde>
 80016c4:	e226      	b.n	8001b14 <__aeabi_dadd+0x52c>
 80016c6:	1c6a      	adds	r2, r5, #1
 80016c8:	4bc6      	ldr	r3, [pc, #792]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80016ca:	0555      	lsls	r5, r2, #21
 80016cc:	0d6d      	lsrs	r5, r5, #21
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0xec>
 80016d2:	e106      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 80016d4:	4ac4      	ldr	r2, [pc, #784]	; (80019e8 <__aeabi_dadd+0x400>)
 80016d6:	08ff      	lsrs	r7, r7, #3
 80016d8:	400a      	ands	r2, r1
 80016da:	0753      	lsls	r3, r2, #29
 80016dc:	0252      	lsls	r2, r2, #9
 80016de:	433b      	orrs	r3, r7
 80016e0:	0b12      	lsrs	r2, r2, #12
 80016e2:	e08e      	b.n	8001802 <__aeabi_dadd+0x21a>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x102>
 80016e8:	e0b8      	b.n	800185c <__aeabi_dadd+0x274>
 80016ea:	1c6b      	adds	r3, r5, #1
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	0d5b      	lsrs	r3, r3, #21
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	dc00      	bgt.n	80016f6 <__aeabi_dadd+0x10e>
 80016f4:	e130      	b.n	8001958 <__aeabi_dadd+0x370>
 80016f6:	1a87      	subs	r7, r0, r2
 80016f8:	4643      	mov	r3, r8
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	41b6      	sbcs	r6, r6
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	4276      	negs	r6, r6
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	0233      	lsls	r3, r6, #8
 8001706:	d500      	bpl.n	800170a <__aeabi_dadd+0x122>
 8001708:	e14c      	b.n	80019a4 <__aeabi_dadd+0x3bc>
 800170a:	003b      	movs	r3, r7
 800170c:	4333      	orrs	r3, r6
 800170e:	d1a1      	bne.n	8001654 <__aeabi_dadd+0x6c>
 8001710:	2200      	movs	r2, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	e070      	b.n	80017fa <__aeabi_dadd+0x212>
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc00      	bgt.n	800171e <__aeabi_dadd+0x136>
 800171c:	e0e5      	b.n	80018ea <__aeabi_dadd+0x302>
 800171e:	2e00      	cmp	r6, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x13c>
 8001722:	e083      	b.n	800182c <__aeabi_dadd+0x244>
 8001724:	4eaf      	ldr	r6, [pc, #700]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001726:	42b5      	cmp	r5, r6
 8001728:	d060      	beq.n	80017ec <__aeabi_dadd+0x204>
 800172a:	2680      	movs	r6, #128	; 0x80
 800172c:	0436      	lsls	r6, r6, #16
 800172e:	4337      	orrs	r7, r6
 8001730:	46b8      	mov	r8, r7
 8001732:	2b38      	cmp	r3, #56	; 0x38
 8001734:	dc00      	bgt.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e13e      	b.n	80019b6 <__aeabi_dadd+0x3ce>
 8001738:	4643      	mov	r3, r8
 800173a:	4313      	orrs	r3, r2
 800173c:	001f      	movs	r7, r3
 800173e:	1e7a      	subs	r2, r7, #1
 8001740:	4197      	sbcs	r7, r2
 8001742:	183f      	adds	r7, r7, r0
 8001744:	4287      	cmp	r7, r0
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	1809      	adds	r1, r1, r0
 800174c:	020b      	lsls	r3, r1, #8
 800174e:	d400      	bmi.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e0b0      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001752:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001754:	3501      	adds	r5, #1
 8001756:	429d      	cmp	r5, r3
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x174>
 800175a:	e0c3      	b.n	80018e4 <__aeabi_dadd+0x2fc>
 800175c:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <__aeabi_dadd+0x400>)
 800175e:	087b      	lsrs	r3, r7, #1
 8001760:	400a      	ands	r2, r1
 8001762:	2101      	movs	r1, #1
 8001764:	400f      	ands	r7, r1
 8001766:	431f      	orrs	r7, r3
 8001768:	0851      	lsrs	r1, r2, #1
 800176a:	07d3      	lsls	r3, r2, #31
 800176c:	2207      	movs	r2, #7
 800176e:	431f      	orrs	r7, r3
 8001770:	403a      	ands	r2, r7
 8001772:	e799      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001774:	4e9b      	ldr	r6, [pc, #620]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001776:	42b5      	cmp	r5, r6
 8001778:	d038      	beq.n	80017ec <__aeabi_dadd+0x204>
 800177a:	2680      	movs	r6, #128	; 0x80
 800177c:	0436      	lsls	r6, r6, #16
 800177e:	4337      	orrs	r7, r6
 8001780:	46b8      	mov	r8, r7
 8001782:	2b38      	cmp	r3, #56	; 0x38
 8001784:	dd00      	ble.n	8001788 <__aeabi_dadd+0x1a0>
 8001786:	e0dc      	b.n	8001942 <__aeabi_dadd+0x35a>
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dadd+0x1a6>
 800178c:	e130      	b.n	80019f0 <__aeabi_dadd+0x408>
 800178e:	001e      	movs	r6, r3
 8001790:	4647      	mov	r7, r8
 8001792:	3e20      	subs	r6, #32
 8001794:	40f7      	lsrs	r7, r6
 8001796:	46bc      	mov	ip, r7
 8001798:	2b20      	cmp	r3, #32
 800179a:	d004      	beq.n	80017a6 <__aeabi_dadd+0x1be>
 800179c:	2640      	movs	r6, #64	; 0x40
 800179e:	1af3      	subs	r3, r6, r3
 80017a0:	4646      	mov	r6, r8
 80017a2:	409e      	lsls	r6, r3
 80017a4:	4332      	orrs	r2, r6
 80017a6:	0017      	movs	r7, r2
 80017a8:	4663      	mov	r3, ip
 80017aa:	1e7a      	subs	r2, r7, #1
 80017ac:	4197      	sbcs	r7, r2
 80017ae:	431f      	orrs	r7, r3
 80017b0:	e0cc      	b.n	800194c <__aeabi_dadd+0x364>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x1d0>
 80017b6:	e204      	b.n	8001bc2 <__aeabi_dadd+0x5da>
 80017b8:	4643      	mov	r3, r8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dadd+0x1d8>
 80017be:	e159      	b.n	8001a74 <__aeabi_dadd+0x48c>
 80017c0:	074b      	lsls	r3, r1, #29
 80017c2:	08c0      	lsrs	r0, r0, #3
 80017c4:	4318      	orrs	r0, r3
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	4219      	tst	r1, r3
 80017ce:	d008      	beq.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d0:	4645      	mov	r5, r8
 80017d2:	08ed      	lsrs	r5, r5, #3
 80017d4:	421d      	tst	r5, r3
 80017d6:	d104      	bne.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d8:	4643      	mov	r3, r8
 80017da:	08d0      	lsrs	r0, r2, #3
 80017dc:	0759      	lsls	r1, r3, #29
 80017de:	4308      	orrs	r0, r1
 80017e0:	0029      	movs	r1, r5
 80017e2:	0f42      	lsrs	r2, r0, #29
 80017e4:	00c9      	lsls	r1, r1, #3
 80017e6:	4d7f      	ldr	r5, [pc, #508]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017e8:	4311      	orrs	r1, r2
 80017ea:	00c0      	lsls	r0, r0, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	08ca      	lsrs	r2, r1, #3
 80017f0:	497c      	ldr	r1, [pc, #496]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	4303      	orrs	r3, r0
 80017f6:	428d      	cmp	r5, r1
 80017f8:	d068      	beq.n	80018cc <__aeabi_dadd+0x2e4>
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	056d      	lsls	r5, r5, #21
 80017fe:	0b12      	lsrs	r2, r2, #12
 8001800:	0d6d      	lsrs	r5, r5, #21
 8001802:	2100      	movs	r1, #0
 8001804:	0312      	lsls	r2, r2, #12
 8001806:	0018      	movs	r0, r3
 8001808:	0b13      	lsrs	r3, r2, #12
 800180a:	0d0a      	lsrs	r2, r1, #20
 800180c:	0512      	lsls	r2, r2, #20
 800180e:	431a      	orrs	r2, r3
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <__aeabi_dadd+0x404>)
 8001812:	052d      	lsls	r5, r5, #20
 8001814:	4013      	ands	r3, r2
 8001816:	432b      	orrs	r3, r5
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	07e4      	lsls	r4, r4, #31
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	4323      	orrs	r3, r4
 8001820:	0019      	movs	r1, r3
 8001822:	bc1c      	pop	{r2, r3, r4}
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	46a2      	mov	sl, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	003e      	movs	r6, r7
 800182e:	4316      	orrs	r6, r2
 8001830:	d012      	beq.n	8001858 <__aeabi_dadd+0x270>
 8001832:	1e5e      	subs	r6, r3, #1
 8001834:	2e00      	cmp	r6, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dadd+0x252>
 8001838:	e100      	b.n	8001a3c <__aeabi_dadd+0x454>
 800183a:	1887      	adds	r7, r0, r2
 800183c:	4287      	cmp	r7, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	4441      	add	r1, r8
 8001842:	4240      	negs	r0, r0
 8001844:	1809      	adds	r1, r1, r0
 8001846:	2501      	movs	r5, #1
 8001848:	020b      	lsls	r3, r1, #8
 800184a:	d533      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 800184c:	2502      	movs	r5, #2
 800184e:	e785      	b.n	800175c <__aeabi_dadd+0x174>
 8001850:	4664      	mov	r4, ip
 8001852:	0033      	movs	r3, r6
 8001854:	4641      	mov	r1, r8
 8001856:	0010      	movs	r0, r2
 8001858:	001d      	movs	r5, r3
 800185a:	e7c7      	b.n	80017ec <__aeabi_dadd+0x204>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e0da      	b.n	8001a18 <__aeabi_dadd+0x430>
 8001862:	000c      	movs	r4, r1
 8001864:	4304      	orrs	r4, r0
 8001866:	d0f3      	beq.n	8001850 <__aeabi_dadd+0x268>
 8001868:	1c5c      	adds	r4, r3, #1
 800186a:	d100      	bne.n	800186e <__aeabi_dadd+0x286>
 800186c:	e19f      	b.n	8001bae <__aeabi_dadd+0x5c6>
 800186e:	4c5d      	ldr	r4, [pc, #372]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001870:	42a6      	cmp	r6, r4
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x28e>
 8001874:	e12f      	b.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001876:	43db      	mvns	r3, r3
 8001878:	2b38      	cmp	r3, #56	; 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_dadd+0x296>
 800187c:	e166      	b.n	8001b4c <__aeabi_dadd+0x564>
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dadd+0x29c>
 8001882:	e183      	b.n	8001b8c <__aeabi_dadd+0x5a4>
 8001884:	2420      	movs	r4, #32
 8001886:	0005      	movs	r5, r0
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	000f      	movs	r7, r1
 800188c:	40dd      	lsrs	r5, r3
 800188e:	40d9      	lsrs	r1, r3
 8001890:	40a0      	lsls	r0, r4
 8001892:	4643      	mov	r3, r8
 8001894:	40a7      	lsls	r7, r4
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	1e44      	subs	r4, r0, #1
 800189a:	41a0      	sbcs	r0, r4
 800189c:	4698      	mov	r8, r3
 800189e:	432f      	orrs	r7, r5
 80018a0:	4338      	orrs	r0, r7
 80018a2:	1a17      	subs	r7, r2, r0
 80018a4:	42ba      	cmp	r2, r7
 80018a6:	4192      	sbcs	r2, r2
 80018a8:	4643      	mov	r3, r8
 80018aa:	4252      	negs	r2, r2
 80018ac:	1a99      	subs	r1, r3, r2
 80018ae:	4664      	mov	r4, ip
 80018b0:	0035      	movs	r5, r6
 80018b2:	e6ca      	b.n	800164a <__aeabi_dadd+0x62>
 80018b4:	2207      	movs	r2, #7
 80018b6:	403a      	ands	r2, r7
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e6f6      	b.n	80016ac <__aeabi_dadd+0xc4>
 80018be:	074b      	lsls	r3, r1, #29
 80018c0:	08ca      	lsrs	r2, r1, #3
 80018c2:	4948      	ldr	r1, [pc, #288]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018c4:	08ff      	lsrs	r7, r7, #3
 80018c6:	433b      	orrs	r3, r7
 80018c8:	428d      	cmp	r5, r1
 80018ca:	d196      	bne.n	80017fa <__aeabi_dadd+0x212>
 80018cc:	0019      	movs	r1, r3
 80018ce:	4311      	orrs	r1, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x2ec>
 80018d2:	e19e      	b.n	8001c12 <__aeabi_dadd+0x62a>
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	430a      	orrs	r2, r1
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	4d41      	ldr	r5, [pc, #260]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018e0:	e78f      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018e2:	0015      	movs	r5, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	2300      	movs	r3, #0
 80018e8:	e78b      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dadd+0x308>
 80018ee:	e0c7      	b.n	8001a80 <__aeabi_dadd+0x498>
 80018f0:	1c6b      	adds	r3, r5, #1
 80018f2:	055f      	lsls	r7, r3, #21
 80018f4:	0d7f      	lsrs	r7, r7, #21
 80018f6:	2f01      	cmp	r7, #1
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dadd+0x314>
 80018fa:	e0f1      	b.n	8001ae0 <__aeabi_dadd+0x4f8>
 80018fc:	4d39      	ldr	r5, [pc, #228]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x31c>
 8001902:	e0b9      	b.n	8001a78 <__aeabi_dadd+0x490>
 8001904:	1885      	adds	r5, r0, r2
 8001906:	000a      	movs	r2, r1
 8001908:	4285      	cmp	r5, r0
 800190a:	4189      	sbcs	r1, r1
 800190c:	4442      	add	r2, r8
 800190e:	4249      	negs	r1, r1
 8001910:	1851      	adds	r1, r2, r1
 8001912:	2207      	movs	r2, #7
 8001914:	07cf      	lsls	r7, r1, #31
 8001916:	086d      	lsrs	r5, r5, #1
 8001918:	432f      	orrs	r7, r5
 800191a:	0849      	lsrs	r1, r1, #1
 800191c:	403a      	ands	r2, r7
 800191e:	001d      	movs	r5, r3
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	2207      	movs	r2, #7
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <__aeabi_dadd+0x400>)
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	4031      	ands	r1, r6
 800192a:	403a      	ands	r2, r7
 800192c:	e6bc      	b.n	80016a8 <__aeabi_dadd+0xc0>
 800192e:	003e      	movs	r6, r7
 8001930:	3828      	subs	r0, #40	; 0x28
 8001932:	4086      	lsls	r6, r0
 8001934:	2700      	movs	r7, #0
 8001936:	e69f      	b.n	8001678 <__aeabi_dadd+0x90>
 8001938:	0038      	movs	r0, r7
 800193a:	f001 fcc9 	bl	80032d0 <__clzsi2>
 800193e:	3020      	adds	r0, #32
 8001940:	e68e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001942:	4643      	mov	r3, r8
 8001944:	4313      	orrs	r3, r2
 8001946:	001f      	movs	r7, r3
 8001948:	1e7a      	subs	r2, r7, #1
 800194a:	4197      	sbcs	r7, r2
 800194c:	1bc7      	subs	r7, r0, r7
 800194e:	42b8      	cmp	r0, r7
 8001950:	4180      	sbcs	r0, r0
 8001952:	4240      	negs	r0, r0
 8001954:	1a09      	subs	r1, r1, r0
 8001956:	e678      	b.n	800164a <__aeabi_dadd+0x62>
 8001958:	000e      	movs	r6, r1
 800195a:	003b      	movs	r3, r7
 800195c:	4306      	orrs	r6, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	2d00      	cmp	r5, #0
 8001962:	d161      	bne.n	8001a28 <__aeabi_dadd+0x440>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d000      	beq.n	800196a <__aeabi_dadd+0x382>
 8001968:	e0f4      	b.n	8001b54 <__aeabi_dadd+0x56c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <__aeabi_dadd+0x388>
 800196e:	e11b      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001970:	4664      	mov	r4, ip
 8001972:	0039      	movs	r1, r7
 8001974:	0010      	movs	r0, r2
 8001976:	e739      	b.n	80017ec <__aeabi_dadd+0x204>
 8001978:	4f1a      	ldr	r7, [pc, #104]	; (80019e4 <__aeabi_dadd+0x3fc>)
 800197a:	42bb      	cmp	r3, r7
 800197c:	d07a      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 800197e:	0033      	movs	r3, r6
 8001980:	e6ff      	b.n	8001782 <__aeabi_dadd+0x19a>
 8001982:	0030      	movs	r0, r6
 8001984:	3d1f      	subs	r5, #31
 8001986:	40e8      	lsrs	r0, r5
 8001988:	2b20      	cmp	r3, #32
 800198a:	d003      	beq.n	8001994 <__aeabi_dadd+0x3ac>
 800198c:	2140      	movs	r1, #64	; 0x40
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	409e      	lsls	r6, r3
 8001992:	4337      	orrs	r7, r6
 8001994:	1e7b      	subs	r3, r7, #1
 8001996:	419f      	sbcs	r7, r3
 8001998:	2207      	movs	r2, #7
 800199a:	4307      	orrs	r7, r0
 800199c:	403a      	ands	r2, r7
 800199e:	2100      	movs	r1, #0
 80019a0:	2500      	movs	r5, #0
 80019a2:	e789      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 80019a4:	1a17      	subs	r7, r2, r0
 80019a6:	4643      	mov	r3, r8
 80019a8:	42ba      	cmp	r2, r7
 80019aa:	41b6      	sbcs	r6, r6
 80019ac:	1a59      	subs	r1, r3, r1
 80019ae:	4276      	negs	r6, r6
 80019b0:	1b8e      	subs	r6, r1, r6
 80019b2:	4664      	mov	r4, ip
 80019b4:	e64e      	b.n	8001654 <__aeabi_dadd+0x6c>
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dadd+0x3d4>
 80019ba:	e0ad      	b.n	8001b18 <__aeabi_dadd+0x530>
 80019bc:	2620      	movs	r6, #32
 80019be:	4647      	mov	r7, r8
 80019c0:	1af6      	subs	r6, r6, r3
 80019c2:	40b7      	lsls	r7, r6
 80019c4:	46b9      	mov	r9, r7
 80019c6:	0017      	movs	r7, r2
 80019c8:	46b2      	mov	sl, r6
 80019ca:	40df      	lsrs	r7, r3
 80019cc:	464e      	mov	r6, r9
 80019ce:	433e      	orrs	r6, r7
 80019d0:	0037      	movs	r7, r6
 80019d2:	4656      	mov	r6, sl
 80019d4:	40b2      	lsls	r2, r6
 80019d6:	1e56      	subs	r6, r2, #1
 80019d8:	41b2      	sbcs	r2, r6
 80019da:	4317      	orrs	r7, r2
 80019dc:	4642      	mov	r2, r8
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1889      	adds	r1, r1, r2
 80019e2:	e6ae      	b.n	8001742 <__aeabi_dadd+0x15a>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	ff7fffff 	.word	0xff7fffff
 80019ec:	800fffff 	.word	0x800fffff
 80019f0:	2620      	movs	r6, #32
 80019f2:	4647      	mov	r7, r8
 80019f4:	1af6      	subs	r6, r6, r3
 80019f6:	40b7      	lsls	r7, r6
 80019f8:	46b9      	mov	r9, r7
 80019fa:	0017      	movs	r7, r2
 80019fc:	46b2      	mov	sl, r6
 80019fe:	40df      	lsrs	r7, r3
 8001a00:	464e      	mov	r6, r9
 8001a02:	433e      	orrs	r6, r7
 8001a04:	0037      	movs	r7, r6
 8001a06:	4656      	mov	r6, sl
 8001a08:	40b2      	lsls	r2, r6
 8001a0a:	1e56      	subs	r6, r2, #1
 8001a0c:	41b2      	sbcs	r2, r6
 8001a0e:	4317      	orrs	r7, r2
 8001a10:	4642      	mov	r2, r8
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	1a89      	subs	r1, r1, r2
 8001a16:	e799      	b.n	800194c <__aeabi_dadd+0x364>
 8001a18:	4c7f      	ldr	r4, [pc, #508]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d05b      	beq.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001a1e:	2480      	movs	r4, #128	; 0x80
 8001a20:	0424      	lsls	r4, r4, #16
 8001a22:	425b      	negs	r3, r3
 8001a24:	4321      	orrs	r1, r4
 8001a26:	e727      	b.n	8001878 <__aeabi_dadd+0x290>
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	d10c      	bne.n	8001a46 <__aeabi_dadd+0x45e>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dadd+0x44a>
 8001a30:	e0cb      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001a32:	4664      	mov	r4, ip
 8001a34:	0039      	movs	r1, r7
 8001a36:	0010      	movs	r0, r2
 8001a38:	4d77      	ldr	r5, [pc, #476]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3a:	e6d7      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a3c:	4f76      	ldr	r7, [pc, #472]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3e:	42bb      	cmp	r3, r7
 8001a40:	d018      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a42:	0033      	movs	r3, r6
 8001a44:	e675      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d014      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a4a:	074b      	lsls	r3, r1, #29
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	08c9      	lsrs	r1, r1, #3
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d007      	beq.n	8001a6a <__aeabi_dadd+0x482>
 8001a5a:	08fc      	lsrs	r4, r7, #3
 8001a5c:	421c      	tst	r4, r3
 8001a5e:	d104      	bne.n	8001a6a <__aeabi_dadd+0x482>
 8001a60:	0779      	lsls	r1, r7, #29
 8001a62:	08d0      	lsrs	r0, r2, #3
 8001a64:	4308      	orrs	r0, r1
 8001a66:	46e1      	mov	r9, ip
 8001a68:	0021      	movs	r1, r4
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	0f42      	lsrs	r2, r0, #29
 8001a6e:	00c9      	lsls	r1, r1, #3
 8001a70:	4311      	orrs	r1, r2
 8001a72:	00c0      	lsls	r0, r0, #3
 8001a74:	4d68      	ldr	r5, [pc, #416]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a76:	e6b9      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a78:	001d      	movs	r5, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e6c0      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d15b      	bne.n	8001b3c <__aeabi_dadd+0x554>
 8001a84:	000d      	movs	r5, r1
 8001a86:	4305      	orrs	r5, r0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dadd+0x4a4>
 8001a8a:	e6e2      	b.n	8001852 <__aeabi_dadd+0x26a>
 8001a8c:	1c5d      	adds	r5, r3, #1
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x4aa>
 8001a90:	e0b0      	b.n	8001bf4 <__aeabi_dadd+0x60c>
 8001a92:	4d61      	ldr	r5, [pc, #388]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a94:	42ae      	cmp	r6, r5
 8001a96:	d01f      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	2b38      	cmp	r3, #56	; 0x38
 8001a9c:	dc71      	bgt.n	8001b82 <__aeabi_dadd+0x59a>
 8001a9e:	2b1f      	cmp	r3, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dadd+0x4bc>
 8001aa2:	e096      	b.n	8001bd2 <__aeabi_dadd+0x5ea>
 8001aa4:	2520      	movs	r5, #32
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	1aed      	subs	r5, r5, r3
 8001aaa:	40af      	lsls	r7, r5
 8001aac:	46b9      	mov	r9, r7
 8001aae:	0007      	movs	r7, r0
 8001ab0:	46aa      	mov	sl, r5
 8001ab2:	40df      	lsrs	r7, r3
 8001ab4:	464d      	mov	r5, r9
 8001ab6:	433d      	orrs	r5, r7
 8001ab8:	002f      	movs	r7, r5
 8001aba:	4655      	mov	r5, sl
 8001abc:	40a8      	lsls	r0, r5
 8001abe:	40d9      	lsrs	r1, r3
 8001ac0:	1e45      	subs	r5, r0, #1
 8001ac2:	41a8      	sbcs	r0, r5
 8001ac4:	4488      	add	r8, r1
 8001ac6:	4307      	orrs	r7, r0
 8001ac8:	18bf      	adds	r7, r7, r2
 8001aca:	4297      	cmp	r7, r2
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4251      	negs	r1, r2
 8001ad0:	4441      	add	r1, r8
 8001ad2:	0035      	movs	r5, r6
 8001ad4:	e63a      	b.n	800174c <__aeabi_dadd+0x164>
 8001ad6:	4664      	mov	r4, ip
 8001ad8:	0035      	movs	r5, r6
 8001ada:	4641      	mov	r1, r8
 8001adc:	0010      	movs	r0, r2
 8001ade:	e685      	b.n	80017ec <__aeabi_dadd+0x204>
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dadd+0x502>
 8001ae8:	e663      	b.n	80017b2 <__aeabi_dadd+0x1ca>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f5      	beq.n	8001ada <__aeabi_dadd+0x4f2>
 8001aee:	4643      	mov	r3, r8
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dadd+0x50e>
 8001af4:	e67a      	b.n	80017ec <__aeabi_dadd+0x204>
 8001af6:	1887      	adds	r7, r0, r2
 8001af8:	4287      	cmp	r7, r0
 8001afa:	4180      	sbcs	r0, r0
 8001afc:	2207      	movs	r2, #7
 8001afe:	4441      	add	r1, r8
 8001b00:	4240      	negs	r0, r0
 8001b02:	1809      	adds	r1, r1, r0
 8001b04:	403a      	ands	r2, r7
 8001b06:	020b      	lsls	r3, r1, #8
 8001b08:	d400      	bmi.n	8001b0c <__aeabi_dadd+0x524>
 8001b0a:	e6d5      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <__aeabi_dadd+0x634>)
 8001b0e:	3501      	adds	r5, #1
 8001b10:	4019      	ands	r1, r3
 8001b12:	e5c9      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b14:	0038      	movs	r0, r7
 8001b16:	e669      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b18:	001e      	movs	r6, r3
 8001b1a:	4647      	mov	r7, r8
 8001b1c:	3e20      	subs	r6, #32
 8001b1e:	40f7      	lsrs	r7, r6
 8001b20:	46bc      	mov	ip, r7
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x548>
 8001b26:	2640      	movs	r6, #64	; 0x40
 8001b28:	1af3      	subs	r3, r6, r3
 8001b2a:	4646      	mov	r6, r8
 8001b2c:	409e      	lsls	r6, r3
 8001b2e:	4332      	orrs	r2, r6
 8001b30:	0017      	movs	r7, r2
 8001b32:	4663      	mov	r3, ip
 8001b34:	1e7a      	subs	r2, r7, #1
 8001b36:	4197      	sbcs	r7, r2
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	e602      	b.n	8001742 <__aeabi_dadd+0x15a>
 8001b3c:	4d36      	ldr	r5, [pc, #216]	; (8001c18 <__aeabi_dadd+0x630>)
 8001b3e:	42ae      	cmp	r6, r5
 8001b40:	d0ca      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001b42:	2580      	movs	r5, #128	; 0x80
 8001b44:	042d      	lsls	r5, r5, #16
 8001b46:	425b      	negs	r3, r3
 8001b48:	4329      	orrs	r1, r5
 8001b4a:	e7a6      	b.n	8001a9a <__aeabi_dadd+0x4b2>
 8001b4c:	4308      	orrs	r0, r1
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	e6a6      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x572>
 8001b58:	e648      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b5a:	1a87      	subs	r7, r0, r2
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	42b8      	cmp	r0, r7
 8001b60:	41b6      	sbcs	r6, r6
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4276      	negs	r6, r6
 8001b66:	1b9e      	subs	r6, r3, r6
 8001b68:	0233      	lsls	r3, r6, #8
 8001b6a:	d54b      	bpl.n	8001c04 <__aeabi_dadd+0x61c>
 8001b6c:	1a17      	subs	r7, r2, r0
 8001b6e:	4643      	mov	r3, r8
 8001b70:	42ba      	cmp	r2, r7
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	1a59      	subs	r1, r3, r1
 8001b76:	4252      	negs	r2, r2
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4664      	mov	r4, ip
 8001b7e:	403a      	ands	r2, r7
 8001b80:	e592      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b82:	4301      	orrs	r1, r0
 8001b84:	000f      	movs	r7, r1
 8001b86:	1e79      	subs	r1, r7, #1
 8001b88:	418f      	sbcs	r7, r1
 8001b8a:	e79d      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001b8c:	001c      	movs	r4, r3
 8001b8e:	000f      	movs	r7, r1
 8001b90:	3c20      	subs	r4, #32
 8001b92:	40e7      	lsrs	r7, r4
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_dadd+0x5b8>
 8001b98:	2440      	movs	r4, #64	; 0x40
 8001b9a:	1ae3      	subs	r3, r4, r3
 8001b9c:	4099      	lsls	r1, r3
 8001b9e:	4308      	orrs	r0, r1
 8001ba0:	1e41      	subs	r1, r0, #1
 8001ba2:	4188      	sbcs	r0, r1
 8001ba4:	4338      	orrs	r0, r7
 8001ba6:	e67c      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2400      	movs	r4, #0
 8001bac:	e625      	b.n	80017fa <__aeabi_dadd+0x212>
 8001bae:	1a17      	subs	r7, r2, r0
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	42ba      	cmp	r2, r7
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	1a59      	subs	r1, r3, r1
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1a89      	subs	r1, r1, r2
 8001bbc:	4664      	mov	r4, ip
 8001bbe:	0035      	movs	r5, r6
 8001bc0:	e543      	b.n	800164a <__aeabi_dadd+0x62>
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4d14      	ldr	r5, [pc, #80]	; (8001c18 <__aeabi_dadd+0x630>)
 8001bc8:	e610      	b.n	80017ec <__aeabi_dadd+0x204>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	2400      	movs	r4, #0
 8001bce:	0312      	lsls	r2, r2, #12
 8001bd0:	e680      	b.n	80018d4 <__aeabi_dadd+0x2ec>
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	000f      	movs	r7, r1
 8001bd6:	3d20      	subs	r5, #32
 8001bd8:	40ef      	lsrs	r7, r5
 8001bda:	46bc      	mov	ip, r7
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x600>
 8001be0:	2540      	movs	r5, #64	; 0x40
 8001be2:	1aeb      	subs	r3, r5, r3
 8001be4:	4099      	lsls	r1, r3
 8001be6:	4308      	orrs	r0, r1
 8001be8:	0007      	movs	r7, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	1e78      	subs	r0, r7, #1
 8001bee:	4187      	sbcs	r7, r0
 8001bf0:	431f      	orrs	r7, r3
 8001bf2:	e769      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001bf4:	1887      	adds	r7, r0, r2
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	419b      	sbcs	r3, r3
 8001bfa:	4441      	add	r1, r8
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	18c9      	adds	r1, r1, r3
 8001c00:	0035      	movs	r5, r6
 8001c02:	e5a3      	b.n	800174c <__aeabi_dadd+0x164>
 8001c04:	003b      	movs	r3, r7
 8001c06:	4333      	orrs	r3, r6
 8001c08:	d0ce      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	0031      	movs	r1, r6
 8001c0e:	403a      	ands	r2, r7
 8001c10:	e652      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	001a      	movs	r2, r3
 8001c16:	e5f4      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff

08001c20 <__aeabi_ddiv>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4657      	mov	r7, sl
 8001c24:	46de      	mov	lr, fp
 8001c26:	464e      	mov	r6, r9
 8001c28:	4645      	mov	r5, r8
 8001c2a:	b5e0      	push	{r5, r6, r7, lr}
 8001c2c:	4683      	mov	fp, r0
 8001c2e:	0007      	movs	r7, r0
 8001c30:	030e      	lsls	r6, r1, #12
 8001c32:	0048      	lsls	r0, r1, #1
 8001c34:	b085      	sub	sp, #20
 8001c36:	4692      	mov	sl, r2
 8001c38:	001c      	movs	r4, r3
 8001c3a:	0b36      	lsrs	r6, r6, #12
 8001c3c:	0d40      	lsrs	r0, r0, #21
 8001c3e:	0fcd      	lsrs	r5, r1, #31
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0x26>
 8001c44:	e09d      	b.n	8001d82 <__aeabi_ddiv+0x162>
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c48:	4298      	cmp	r0, r3
 8001c4a:	d039      	beq.n	8001cc0 <__aeabi_ddiv+0xa0>
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00f6      	lsls	r6, r6, #3
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431e      	orrs	r6, r3
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c56:	0f7b      	lsrs	r3, r7, #29
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	4694      	mov	ip, r2
 8001c5e:	0003      	movs	r3, r0
 8001c60:	4463      	add	r3, ip
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2600      	movs	r6, #0
 8001c68:	00ff      	lsls	r7, r7, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	0323      	lsls	r3, r4, #12
 8001c6e:	0b1b      	lsrs	r3, r3, #12
 8001c70:	4698      	mov	r8, r3
 8001c72:	0063      	lsls	r3, r4, #1
 8001c74:	0fe4      	lsrs	r4, r4, #31
 8001c76:	4652      	mov	r2, sl
 8001c78:	0d5b      	lsrs	r3, r3, #21
 8001c7a:	9401      	str	r4, [sp, #4]
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x60>
 8001c7e:	e0b3      	b.n	8001de8 <__aeabi_ddiv+0x1c8>
 8001c80:	4986      	ldr	r1, [pc, #536]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c82:	428b      	cmp	r3, r1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x68>
 8001c86:	e09e      	b.n	8001dc6 <__aeabi_ddiv+0x1a6>
 8001c88:	4642      	mov	r2, r8
 8001c8a:	00d1      	lsls	r1, r2, #3
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4651      	mov	r1, sl
 8001c94:	0f49      	lsrs	r1, r1, #29
 8001c96:	4311      	orrs	r1, r2
 8001c98:	468b      	mov	fp, r1
 8001c9a:	4981      	ldr	r1, [pc, #516]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4463      	add	r3, ip
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	002b      	movs	r3, r5
 8001cae:	4063      	eors	r3, r4
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	2e0f      	cmp	r6, #15
 8001cb4:	d900      	bls.n	8001cb8 <__aeabi_ddiv+0x98>
 8001cb6:	e105      	b.n	8001ec4 <__aeabi_ddiv+0x2a4>
 8001cb8:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <__aeabi_ddiv+0x284>)
 8001cba:	00b6      	lsls	r6, r6, #2
 8001cbc:	599b      	ldr	r3, [r3, r6]
 8001cbe:	469f      	mov	pc, r3
 8001cc0:	465b      	mov	r3, fp
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	d000      	beq.n	8001cca <__aeabi_ddiv+0xaa>
 8001cc8:	e0b8      	b.n	8001e3c <__aeabi_ddiv+0x21c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	2608      	movs	r6, #8
 8001cce:	2700      	movs	r7, #0
 8001cd0:	9000      	str	r0, [sp, #0]
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	e7ca      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001cd6:	46cb      	mov	fp, r9
 8001cd8:	003a      	movs	r2, r7
 8001cda:	9902      	ldr	r1, [sp, #8]
 8001cdc:	9501      	str	r5, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	2902      	cmp	r1, #2
 8001ce4:	d027      	beq.n	8001d36 <__aeabi_ddiv+0x116>
 8001ce6:	2903      	cmp	r1, #3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_ddiv+0xcc>
 8001cea:	e280      	b.n	80021ee <__aeabi_ddiv+0x5ce>
 8001cec:	2901      	cmp	r1, #1
 8001cee:	d044      	beq.n	8001d7a <__aeabi_ddiv+0x15a>
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <__aeabi_ddiv+0x288>)
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	468c      	mov	ip, r1
 8001cf6:	4463      	add	r3, ip
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	dd38      	ble.n	8001d70 <__aeabi_ddiv+0x150>
 8001cfe:	0753      	lsls	r3, r2, #29
 8001d00:	d000      	beq.n	8001d04 <__aeabi_ddiv+0xe4>
 8001d02:	e213      	b.n	800212c <__aeabi_ddiv+0x50c>
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	465b      	mov	r3, fp
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	d509      	bpl.n	8001d20 <__aeabi_ddiv+0x100>
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <__aeabi_ddiv+0x28c>)
 8001d10:	4019      	ands	r1, r3
 8001d12:	468b      	mov	fp, r1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	468c      	mov	ip, r1
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	4463      	add	r3, ip
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <__aeabi_ddiv+0x290>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	dc07      	bgt.n	8001d36 <__aeabi_ddiv+0x116>
 8001d26:	465b      	mov	r3, fp
 8001d28:	0564      	lsls	r4, r4, #21
 8001d2a:	075f      	lsls	r7, r3, #29
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4317      	orrs	r7, r2
 8001d30:	0b1b      	lsrs	r3, r3, #12
 8001d32:	0d62      	lsrs	r2, r4, #21
 8001d34:	e002      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2700      	movs	r7, #0
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	0b1c      	lsrs	r4, r3, #12
 8001d42:	0d0b      	lsrs	r3, r1, #20
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	4323      	orrs	r3, r4
 8001d48:	0514      	lsls	r4, r2, #20
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <__aeabi_ddiv+0x294>)
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	431c      	orrs	r4, r3
 8001d52:	4653      	mov	r3, sl
 8001d54:	0064      	lsls	r4, r4, #1
 8001d56:	07db      	lsls	r3, r3, #31
 8001d58:	0864      	lsrs	r4, r4, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	b005      	add	sp, #20
 8001d60:	bc3c      	pop	{r2, r3, r4, r5}
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	46a2      	mov	sl, r4
 8001d68:	46ab      	mov	fp, r5
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	2301      	movs	r3, #1
 8001d72:	1b1b      	subs	r3, r3, r4
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x15a>
 8001d78:	e1ad      	b.n	80020d6 <__aeabi_ddiv+0x4b6>
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2700      	movs	r7, #0
 8001d80:	e7dc      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d82:	465b      	mov	r3, fp
 8001d84:	4333      	orrs	r3, r6
 8001d86:	4699      	mov	r9, r3
 8001d88:	d05e      	beq.n	8001e48 <__aeabi_ddiv+0x228>
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x170>
 8001d8e:	e18a      	b.n	80020a6 <__aeabi_ddiv+0x486>
 8001d90:	0030      	movs	r0, r6
 8001d92:	f001 fa9d 	bl	80032d0 <__clzsi2>
 8001d96:	0003      	movs	r3, r0
 8001d98:	3b0b      	subs	r3, #11
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_ddiv+0x180>
 8001d9e:	e17b      	b.n	8002098 <__aeabi_ddiv+0x478>
 8001da0:	221d      	movs	r2, #29
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	465a      	mov	r2, fp
 8001da6:	0001      	movs	r1, r0
 8001da8:	40da      	lsrs	r2, r3
 8001daa:	3908      	subs	r1, #8
 8001dac:	408e      	lsls	r6, r1
 8001dae:	0013      	movs	r3, r2
 8001db0:	465f      	mov	r7, fp
 8001db2:	4333      	orrs	r3, r6
 8001db4:	4699      	mov	r9, r3
 8001db6:	408f      	lsls	r7, r1
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <__aeabi_ddiv+0x298>)
 8001dba:	2600      	movs	r6, #0
 8001dbc:	1a1b      	subs	r3, r3, r0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	e752      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	4653      	mov	r3, sl
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	493b      	ldr	r1, [pc, #236]	; (8001ebc <__aeabi_ddiv+0x29c>)
 8001dce:	469b      	mov	fp, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	4463      	add	r3, ip
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	465b      	mov	r3, fp
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13b      	bne.n	8001e56 <__aeabi_ddiv+0x236>
 8001dde:	2302      	movs	r3, #2
 8001de0:	2200      	movs	r2, #0
 8001de2:	431e      	orrs	r6, r3
 8001de4:	2102      	movs	r1, #2
 8001de6:	e761      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001de8:	4643      	mov	r3, r8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	469b      	mov	fp, r3
 8001dee:	d037      	beq.n	8001e60 <__aeabi_ddiv+0x240>
 8001df0:	4643      	mov	r3, r8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_ddiv+0x1d8>
 8001df6:	e162      	b.n	80020be <__aeabi_ddiv+0x49e>
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f001 fa69 	bl	80032d0 <__clzsi2>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3b0b      	subs	r3, #11
 8001e02:	2b1c      	cmp	r3, #28
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_ddiv+0x1e8>
 8001e06:	e153      	b.n	80020b0 <__aeabi_ddiv+0x490>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	3a08      	subs	r2, #8
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	4688      	mov	r8, r1
 8001e12:	211d      	movs	r1, #29
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	4651      	mov	r1, sl
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	469b      	mov	fp, r3
 8001e22:	4653      	mov	r3, sl
 8001e24:	4093      	lsls	r3, r2
 8001e26:	001a      	movs	r2, r3
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <__aeabi_ddiv+0x2a0>)
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	4460      	add	r0, ip
 8001e30:	0003      	movs	r3, r0
 8001e32:	468c      	mov	ip, r1
 8001e34:	4463      	add	r3, ip
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	e737      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	46b1      	mov	r9, r6
 8001e40:	9000      	str	r0, [sp, #0]
 8001e42:	260c      	movs	r6, #12
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	e711      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2700      	movs	r7, #0
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	e70a      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e56:	2303      	movs	r3, #3
 8001e58:	46c3      	mov	fp, r8
 8001e5a:	431e      	orrs	r6, r3
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	e725      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	431e      	orrs	r6, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	2101      	movs	r1, #1
 8001e68:	e720      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	2700      	movs	r7, #0
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e76:	e761      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	4219      	tst	r1, r3
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x264>
 8001e82:	e0e2      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e84:	4659      	mov	r1, fp
 8001e86:	4219      	tst	r1, r3
 8001e88:	d000      	beq.n	8001e8c <__aeabi_ddiv+0x26c>
 8001e8a:	e0de      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	0017      	movs	r7, r2
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	46a2      	mov	sl, r4
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e98:	e750      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	fffffc01 	.word	0xfffffc01
 8001ea4:	080188f4 	.word	0x080188f4
 8001ea8:	000003ff 	.word	0x000003ff
 8001eac:	feffffff 	.word	0xfeffffff
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	800fffff 	.word	0x800fffff
 8001eb8:	fffffc0d 	.word	0xfffffc0d
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	45d9      	cmp	r9, fp
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x2aa>
 8001ec8:	e0cb      	b.n	8002062 <__aeabi_ddiv+0x442>
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x2ae>
 8001ecc:	e0c6      	b.n	800205c <__aeabi_ddiv+0x43c>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4648      	mov	r0, r9
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	465b      	mov	r3, fp
 8001edc:	0e16      	lsrs	r6, r2, #24
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	431e      	orrs	r6, r3
 8001ee2:	0213      	lsls	r3, r2, #8
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	0433      	lsls	r3, r6, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4699      	mov	r9, r3
 8001eec:	0c31      	lsrs	r1, r6, #16
 8001eee:	9101      	str	r1, [sp, #4]
 8001ef0:	f7fe f9b4 	bl	800025c <__aeabi_uidivmod>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	4342      	muls	r2, r0
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	0c21      	lsrs	r1, r4, #16
 8001efc:	0005      	movs	r5, r0
 8001efe:	4319      	orrs	r1, r3
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d907      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	3d01      	subs	r5, #1
 8001f08:	428e      	cmp	r6, r1
 8001f0a:	d803      	bhi.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d901      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f10:	1e85      	subs	r5, r0, #2
 8001f12:	1989      	adds	r1, r1, r6
 8001f14:	1a88      	subs	r0, r1, r2
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	f7fe f9a0 	bl	800025c <__aeabi_uidivmod>
 8001f1c:	0409      	lsls	r1, r1, #16
 8001f1e:	468c      	mov	ip, r1
 8001f20:	464a      	mov	r2, r9
 8001f22:	0421      	lsls	r1, r4, #16
 8001f24:	4664      	mov	r4, ip
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c09      	lsrs	r1, r1, #16
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	4321      	orrs	r1, r4
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d904      	bls.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f32:	1989      	adds	r1, r1, r6
 8001f34:	3b01      	subs	r3, #1
 8001f36:	428e      	cmp	r6, r1
 8001f38:	d800      	bhi.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f3a:	e0f1      	b.n	8002120 <__aeabi_ddiv+0x500>
 8001f3c:	042d      	lsls	r5, r5, #16
 8001f3e:	431d      	orrs	r5, r3
 8001f40:	46ab      	mov	fp, r5
 8001f42:	4643      	mov	r3, r8
 8001f44:	1a89      	subs	r1, r1, r2
 8001f46:	4642      	mov	r2, r8
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	0412      	lsls	r2, r2, #16
 8001f4c:	0c1d      	lsrs	r5, r3, #16
 8001f4e:	465b      	mov	r3, fp
 8001f50:	0c14      	lsrs	r4, r2, #16
 8001f52:	0022      	movs	r2, r4
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	435a      	muls	r2, r3
 8001f5a:	9403      	str	r4, [sp, #12]
 8001f5c:	436b      	muls	r3, r5
 8001f5e:	4344      	muls	r4, r0
 8001f60:	9502      	str	r5, [sp, #8]
 8001f62:	4368      	muls	r0, r5
 8001f64:	191b      	adds	r3, r3, r4
 8001f66:	0c15      	lsrs	r5, r2, #16
 8001f68:	18eb      	adds	r3, r5, r3
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d903      	bls.n	8001f76 <__aeabi_ddiv+0x356>
 8001f6e:	2480      	movs	r4, #128	; 0x80
 8001f70:	0264      	lsls	r4, r4, #9
 8001f72:	46a4      	mov	ip, r4
 8001f74:	4460      	add	r0, ip
 8001f76:	0c1c      	lsrs	r4, r3, #16
 8001f78:	0415      	lsls	r5, r2, #16
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	0c2d      	lsrs	r5, r5, #16
 8001f7e:	1820      	adds	r0, r4, r0
 8001f80:	195d      	adds	r5, r3, r5
 8001f82:	4281      	cmp	r1, r0
 8001f84:	d377      	bcc.n	8002076 <__aeabi_ddiv+0x456>
 8001f86:	d073      	beq.n	8002070 <__aeabi_ddiv+0x450>
 8001f88:	1a0c      	subs	r4, r1, r0
 8001f8a:	4aa2      	ldr	r2, [pc, #648]	; (8002214 <__aeabi_ddiv+0x5f4>)
 8001f8c:	1b7d      	subs	r5, r7, r5
 8001f8e:	42af      	cmp	r7, r5
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	4694      	mov	ip, r2
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	427f      	negs	r7, r7
 8001f98:	4463      	add	r3, ip
 8001f9a:	1be0      	subs	r0, r4, r7
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4286      	cmp	r6, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_ddiv+0x384>
 8001fa2:	e0db      	b.n	800215c <__aeabi_ddiv+0x53c>
 8001fa4:	9901      	ldr	r1, [sp, #4]
 8001fa6:	f7fe f959 	bl	800025c <__aeabi_uidivmod>
 8001faa:	464a      	mov	r2, r9
 8001fac:	4342      	muls	r2, r0
 8001fae:	040b      	lsls	r3, r1, #16
 8001fb0:	0c29      	lsrs	r1, r5, #16
 8001fb2:	0007      	movs	r7, r0
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d907      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fba:	1989      	adds	r1, r1, r6
 8001fbc:	3f01      	subs	r7, #1
 8001fbe:	428e      	cmp	r6, r1
 8001fc0:	d803      	bhi.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d901      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc6:	1e87      	subs	r7, r0, #2
 8001fc8:	1989      	adds	r1, r1, r6
 8001fca:	1a88      	subs	r0, r1, r2
 8001fcc:	9901      	ldr	r1, [sp, #4]
 8001fce:	f7fe f945 	bl	800025c <__aeabi_uidivmod>
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	4689      	mov	r9, r1
 8001fd8:	0429      	lsls	r1, r5, #16
 8001fda:	464d      	mov	r5, r9
 8001fdc:	4342      	muls	r2, r0
 8001fde:	0c09      	lsrs	r1, r1, #16
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	4329      	orrs	r1, r5
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	d907      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001fe8:	1989      	adds	r1, r1, r6
 8001fea:	3b01      	subs	r3, #1
 8001fec:	428e      	cmp	r6, r1
 8001fee:	d803      	bhi.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d901      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff4:	1e83      	subs	r3, r0, #2
 8001ff6:	1989      	adds	r1, r1, r6
 8001ff8:	043f      	lsls	r7, r7, #16
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	9f03      	ldr	r7, [sp, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	0038      	movs	r0, r7
 8002004:	0413      	lsls	r3, r2, #16
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	4358      	muls	r0, r3
 800200a:	4681      	mov	r9, r0
 800200c:	9802      	ldr	r0, [sp, #8]
 800200e:	0c15      	lsrs	r5, r2, #16
 8002010:	436f      	muls	r7, r5
 8002012:	4343      	muls	r3, r0
 8002014:	4345      	muls	r5, r0
 8002016:	4648      	mov	r0, r9
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	4684      	mov	ip, r0
 800201c:	19db      	adds	r3, r3, r7
 800201e:	4463      	add	r3, ip
 8002020:	429f      	cmp	r7, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x40c>
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	0240      	lsls	r0, r0, #9
 8002028:	4684      	mov	ip, r0
 800202a:	4465      	add	r5, ip
 800202c:	4648      	mov	r0, r9
 800202e:	0c1f      	lsrs	r7, r3, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	0c00      	lsrs	r0, r0, #16
 8002036:	197d      	adds	r5, r7, r5
 8002038:	1818      	adds	r0, r3, r0
 800203a:	42a9      	cmp	r1, r5
 800203c:	d200      	bcs.n	8002040 <__aeabi_ddiv+0x420>
 800203e:	e084      	b.n	800214a <__aeabi_ddiv+0x52a>
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x424>
 8002042:	e07f      	b.n	8002144 <__aeabi_ddiv+0x524>
 8002044:	2301      	movs	r3, #1
 8002046:	431a      	orrs	r2, r3
 8002048:	e657      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	464a      	mov	r2, r9
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4313      	orrs	r3, r2
 8002052:	031b      	lsls	r3, r3, #12
 8002054:	0b1b      	lsrs	r3, r3, #12
 8002056:	46aa      	mov	sl, r5
 8002058:	4a6f      	ldr	r2, [pc, #444]	; (8002218 <__aeabi_ddiv+0x5f8>)
 800205a:	e66f      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 800205c:	42ba      	cmp	r2, r7
 800205e:	d900      	bls.n	8002062 <__aeabi_ddiv+0x442>
 8002060:	e735      	b.n	8001ece <__aeabi_ddiv+0x2ae>
 8002062:	464b      	mov	r3, r9
 8002064:	07dc      	lsls	r4, r3, #31
 8002066:	0858      	lsrs	r0, r3, #1
 8002068:	087b      	lsrs	r3, r7, #1
 800206a:	431c      	orrs	r4, r3
 800206c:	07ff      	lsls	r7, r7, #31
 800206e:	e734      	b.n	8001eda <__aeabi_ddiv+0x2ba>
 8002070:	2400      	movs	r4, #0
 8002072:	42af      	cmp	r7, r5
 8002074:	d289      	bcs.n	8001f8a <__aeabi_ddiv+0x36a>
 8002076:	4447      	add	r7, r8
 8002078:	4547      	cmp	r7, r8
 800207a:	41a4      	sbcs	r4, r4
 800207c:	465b      	mov	r3, fp
 800207e:	4264      	negs	r4, r4
 8002080:	19a4      	adds	r4, r4, r6
 8002082:	1864      	adds	r4, r4, r1
 8002084:	3b01      	subs	r3, #1
 8002086:	42a6      	cmp	r6, r4
 8002088:	d21e      	bcs.n	80020c8 <__aeabi_ddiv+0x4a8>
 800208a:	42a0      	cmp	r0, r4
 800208c:	d86d      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x472>
 8002090:	e0b6      	b.n	8002200 <__aeabi_ddiv+0x5e0>
 8002092:	1a24      	subs	r4, r4, r0
 8002094:	469b      	mov	fp, r3
 8002096:	e778      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002098:	0003      	movs	r3, r0
 800209a:	465a      	mov	r2, fp
 800209c:	3b28      	subs	r3, #40	; 0x28
 800209e:	409a      	lsls	r2, r3
 80020a0:	2700      	movs	r7, #0
 80020a2:	4691      	mov	r9, r2
 80020a4:	e688      	b.n	8001db8 <__aeabi_ddiv+0x198>
 80020a6:	4658      	mov	r0, fp
 80020a8:	f001 f912 	bl	80032d0 <__clzsi2>
 80020ac:	3020      	adds	r0, #32
 80020ae:	e672      	b.n	8001d96 <__aeabi_ddiv+0x176>
 80020b0:	0003      	movs	r3, r0
 80020b2:	4652      	mov	r2, sl
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	4693      	mov	fp, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	e6b4      	b.n	8001e28 <__aeabi_ddiv+0x208>
 80020be:	4650      	mov	r0, sl
 80020c0:	f001 f906 	bl	80032d0 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e69a      	b.n	8001dfe <__aeabi_ddiv+0x1de>
 80020c8:	42a6      	cmp	r6, r4
 80020ca:	d1e2      	bne.n	8002092 <__aeabi_ddiv+0x472>
 80020cc:	45b8      	cmp	r8, r7
 80020ce:	d9dc      	bls.n	800208a <__aeabi_ddiv+0x46a>
 80020d0:	1a34      	subs	r4, r6, r0
 80020d2:	469b      	mov	fp, r3
 80020d4:	e759      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	dc65      	bgt.n	80021a6 <__aeabi_ddiv+0x586>
 80020da:	4c50      	ldr	r4, [pc, #320]	; (800221c <__aeabi_ddiv+0x5fc>)
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	46a4      	mov	ip, r4
 80020e0:	465c      	mov	r4, fp
 80020e2:	4461      	add	r1, ip
 80020e4:	0008      	movs	r0, r1
 80020e6:	408c      	lsls	r4, r1
 80020e8:	0011      	movs	r1, r2
 80020ea:	4082      	lsls	r2, r0
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	1e50      	subs	r0, r2, #1
 80020f0:	4182      	sbcs	r2, r0
 80020f2:	430c      	orrs	r4, r1
 80020f4:	4314      	orrs	r4, r2
 80020f6:	465a      	mov	r2, fp
 80020f8:	40da      	lsrs	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	d009      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002100:	220f      	movs	r2, #15
 8002102:	4022      	ands	r2, r4
 8002104:	2a04      	cmp	r2, #4
 8002106:	d005      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002108:	0022      	movs	r2, r4
 800210a:	1d14      	adds	r4, r2, #4
 800210c:	4294      	cmp	r4, r2
 800210e:	4189      	sbcs	r1, r1
 8002110:	4249      	negs	r1, r1
 8002112:	185b      	adds	r3, r3, r1
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	d562      	bpl.n	80021de <__aeabi_ddiv+0x5be>
 8002118:	2201      	movs	r2, #1
 800211a:	2300      	movs	r3, #0
 800211c:	2700      	movs	r7, #0
 800211e:	e60d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002120:	428a      	cmp	r2, r1
 8002122:	d800      	bhi.n	8002126 <__aeabi_ddiv+0x506>
 8002124:	e70a      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 8002126:	1e83      	subs	r3, r0, #2
 8002128:	1989      	adds	r1, r1, r6
 800212a:	e707      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 800212c:	230f      	movs	r3, #15
 800212e:	4013      	ands	r3, r2
 8002130:	2b04      	cmp	r3, #4
 8002132:	d100      	bne.n	8002136 <__aeabi_ddiv+0x516>
 8002134:	e5e6      	b.n	8001d04 <__aeabi_ddiv+0xe4>
 8002136:	1d17      	adds	r7, r2, #4
 8002138:	4297      	cmp	r7, r2
 800213a:	4192      	sbcs	r2, r2
 800213c:	4253      	negs	r3, r2
 800213e:	449b      	add	fp, r3
 8002140:	08fa      	lsrs	r2, r7, #3
 8002142:	e5e0      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_ddiv+0x52a>
 8002148:	e5d7      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800214a:	1871      	adds	r1, r6, r1
 800214c:	1e53      	subs	r3, r2, #1
 800214e:	42b1      	cmp	r1, r6
 8002150:	d327      	bcc.n	80021a2 <__aeabi_ddiv+0x582>
 8002152:	42a9      	cmp	r1, r5
 8002154:	d315      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 8002156:	d058      	beq.n	800220a <__aeabi_ddiv+0x5ea>
 8002158:	001a      	movs	r2, r3
 800215a:	e773      	b.n	8002044 <__aeabi_ddiv+0x424>
 800215c:	2b00      	cmp	r3, #0
 800215e:	dc00      	bgt.n	8002162 <__aeabi_ddiv+0x542>
 8002160:	e604      	b.n	8001d6c <__aeabi_ddiv+0x14c>
 8002162:	2301      	movs	r3, #1
 8002164:	2200      	movs	r2, #0
 8002166:	449b      	add	fp, r3
 8002168:	e5cd      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 800216a:	2302      	movs	r3, #2
 800216c:	4447      	add	r7, r8
 800216e:	4547      	cmp	r7, r8
 8002170:	4189      	sbcs	r1, r1
 8002172:	425b      	negs	r3, r3
 8002174:	469c      	mov	ip, r3
 8002176:	4249      	negs	r1, r1
 8002178:	1989      	adds	r1, r1, r6
 800217a:	190c      	adds	r4, r1, r4
 800217c:	44e3      	add	fp, ip
 800217e:	1a24      	subs	r4, r4, r0
 8002180:	e703      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002182:	4643      	mov	r3, r8
 8002184:	005f      	lsls	r7, r3, #1
 8002186:	4547      	cmp	r7, r8
 8002188:	419b      	sbcs	r3, r3
 800218a:	46b8      	mov	r8, r7
 800218c:	425b      	negs	r3, r3
 800218e:	199e      	adds	r6, r3, r6
 8002190:	3a02      	subs	r2, #2
 8002192:	1989      	adds	r1, r1, r6
 8002194:	42a9      	cmp	r1, r5
 8002196:	d000      	beq.n	800219a <__aeabi_ddiv+0x57a>
 8002198:	e754      	b.n	8002044 <__aeabi_ddiv+0x424>
 800219a:	4540      	cmp	r0, r8
 800219c:	d000      	beq.n	80021a0 <__aeabi_ddiv+0x580>
 800219e:	e751      	b.n	8002044 <__aeabi_ddiv+0x424>
 80021a0:	e5ab      	b.n	8001cfa <__aeabi_ddiv+0xda>
 80021a2:	001a      	movs	r2, r3
 80021a4:	e7f6      	b.n	8002194 <__aeabi_ddiv+0x574>
 80021a6:	211f      	movs	r1, #31
 80021a8:	465f      	mov	r7, fp
 80021aa:	4249      	negs	r1, r1
 80021ac:	1b0c      	subs	r4, r1, r4
 80021ae:	40e7      	lsrs	r7, r4
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d007      	beq.n	80021c4 <__aeabi_ddiv+0x5a4>
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <__aeabi_ddiv+0x600>)
 80021b6:	9b00      	ldr	r3, [sp, #0]
 80021b8:	468c      	mov	ip, r1
 80021ba:	4463      	add	r3, ip
 80021bc:	0018      	movs	r0, r3
 80021be:	465b      	mov	r3, fp
 80021c0:	4083      	lsls	r3, r0
 80021c2:	431a      	orrs	r2, r3
 80021c4:	1e50      	subs	r0, r2, #1
 80021c6:	4182      	sbcs	r2, r0
 80021c8:	433a      	orrs	r2, r7
 80021ca:	2707      	movs	r7, #7
 80021cc:	2300      	movs	r3, #0
 80021ce:	4017      	ands	r7, r2
 80021d0:	d009      	beq.n	80021e6 <__aeabi_ddiv+0x5c6>
 80021d2:	210f      	movs	r1, #15
 80021d4:	2300      	movs	r3, #0
 80021d6:	4011      	ands	r1, r2
 80021d8:	0014      	movs	r4, r2
 80021da:	2904      	cmp	r1, #4
 80021dc:	d195      	bne.n	800210a <__aeabi_ddiv+0x4ea>
 80021de:	0022      	movs	r2, r4
 80021e0:	075f      	lsls	r7, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	0b1b      	lsrs	r3, r3, #12
 80021e6:	08d2      	lsrs	r2, r2, #3
 80021e8:	4317      	orrs	r7, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	e5a6      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	4659      	mov	r1, fp
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	430b      	orrs	r3, r1
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	0017      	movs	r7, r2
 80021fa:	0b1b      	lsrs	r3, r3, #12
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <__aeabi_ddiv+0x5f8>)
 80021fe:	e59d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002200:	42bd      	cmp	r5, r7
 8002202:	d8b2      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 8002204:	469b      	mov	fp, r3
 8002206:	2400      	movs	r4, #0
 8002208:	e6bf      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 800220a:	4580      	cmp	r8, r0
 800220c:	d3b9      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 800220e:	001a      	movs	r2, r3
 8002210:	e7c3      	b.n	800219a <__aeabi_ddiv+0x57a>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000003ff 	.word	0x000003ff
 8002218:	000007ff 	.word	0x000007ff
 800221c:	0000041e 	.word	0x0000041e
 8002220:	0000043e 	.word	0x0000043e

08002224 <__eqdf2>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	464f      	mov	r7, r9
 8002228:	4646      	mov	r6, r8
 800222a:	46d6      	mov	lr, sl
 800222c:	4684      	mov	ip, r0
 800222e:	b5c0      	push	{r6, r7, lr}
 8002230:	4680      	mov	r8, r0
 8002232:	4e19      	ldr	r6, [pc, #100]	; (8002298 <__eqdf2+0x74>)
 8002234:	0318      	lsls	r0, r3, #12
 8002236:	030f      	lsls	r7, r1, #12
 8002238:	004d      	lsls	r5, r1, #1
 800223a:	0b00      	lsrs	r0, r0, #12
 800223c:	005c      	lsls	r4, r3, #1
 800223e:	4682      	mov	sl, r0
 8002240:	0b3f      	lsrs	r7, r7, #12
 8002242:	0d6d      	lsrs	r5, r5, #21
 8002244:	0fc9      	lsrs	r1, r1, #31
 8002246:	4691      	mov	r9, r2
 8002248:	0d64      	lsrs	r4, r4, #21
 800224a:	0fdb      	lsrs	r3, r3, #31
 800224c:	2001      	movs	r0, #1
 800224e:	42b5      	cmp	r5, r6
 8002250:	d00a      	beq.n	8002268 <__eqdf2+0x44>
 8002252:	42b4      	cmp	r4, r6
 8002254:	d003      	beq.n	800225e <__eqdf2+0x3a>
 8002256:	42a5      	cmp	r5, r4
 8002258:	d101      	bne.n	800225e <__eqdf2+0x3a>
 800225a:	4557      	cmp	r7, sl
 800225c:	d00c      	beq.n	8002278 <__eqdf2+0x54>
 800225e:	bc1c      	pop	{r2, r3, r4}
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	46a2      	mov	sl, r4
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	4666      	mov	r6, ip
 800226a:	433e      	orrs	r6, r7
 800226c:	d1f7      	bne.n	800225e <__eqdf2+0x3a>
 800226e:	42ac      	cmp	r4, r5
 8002270:	d1f5      	bne.n	800225e <__eqdf2+0x3a>
 8002272:	4654      	mov	r4, sl
 8002274:	4314      	orrs	r4, r2
 8002276:	d1f2      	bne.n	800225e <__eqdf2+0x3a>
 8002278:	2001      	movs	r0, #1
 800227a:	45c8      	cmp	r8, r9
 800227c:	d1ef      	bne.n	800225e <__eqdf2+0x3a>
 800227e:	4299      	cmp	r1, r3
 8002280:	d007      	beq.n	8002292 <__eqdf2+0x6e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1eb      	bne.n	800225e <__eqdf2+0x3a>
 8002286:	4663      	mov	r3, ip
 8002288:	431f      	orrs	r7, r3
 800228a:	0038      	movs	r0, r7
 800228c:	1e47      	subs	r7, r0, #1
 800228e:	41b8      	sbcs	r0, r7
 8002290:	e7e5      	b.n	800225e <__eqdf2+0x3a>
 8002292:	2000      	movs	r0, #0
 8002294:	e7e3      	b.n	800225e <__eqdf2+0x3a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff

0800229c <__gedf2>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	464f      	mov	r7, r9
 80022a0:	4646      	mov	r6, r8
 80022a2:	46d6      	mov	lr, sl
 80022a4:	004d      	lsls	r5, r1, #1
 80022a6:	b5c0      	push	{r6, r7, lr}
 80022a8:	030e      	lsls	r6, r1, #12
 80022aa:	0fc9      	lsrs	r1, r1, #31
 80022ac:	468a      	mov	sl, r1
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <__gedf2+0xc4>)
 80022b0:	031f      	lsls	r7, r3, #12
 80022b2:	005c      	lsls	r4, r3, #1
 80022b4:	4680      	mov	r8, r0
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d6d      	lsrs	r5, r5, #21
 80022ba:	4691      	mov	r9, r2
 80022bc:	0b3f      	lsrs	r7, r7, #12
 80022be:	0d64      	lsrs	r4, r4, #21
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	428d      	cmp	r5, r1
 80022c4:	d01e      	beq.n	8002304 <__gedf2+0x68>
 80022c6:	428c      	cmp	r4, r1
 80022c8:	d016      	beq.n	80022f8 <__gedf2+0x5c>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d11e      	bne.n	800230c <__gedf2+0x70>
 80022ce:	4330      	orrs	r0, r6
 80022d0:	4684      	mov	ip, r0
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d101      	bne.n	80022da <__gedf2+0x3e>
 80022d6:	433a      	orrs	r2, r7
 80022d8:	d023      	beq.n	8002322 <__gedf2+0x86>
 80022da:	4662      	mov	r2, ip
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d01a      	beq.n	8002316 <__gedf2+0x7a>
 80022e0:	459a      	cmp	sl, r3
 80022e2:	d029      	beq.n	8002338 <__gedf2+0x9c>
 80022e4:	4651      	mov	r1, sl
 80022e6:	2002      	movs	r0, #2
 80022e8:	3901      	subs	r1, #1
 80022ea:	4008      	ands	r0, r1
 80022ec:	3801      	subs	r0, #1
 80022ee:	bc1c      	pop	{r2, r3, r4}
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
 80022f4:	46a2      	mov	sl, r4
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	0039      	movs	r1, r7
 80022fa:	4311      	orrs	r1, r2
 80022fc:	d0e5      	beq.n	80022ca <__gedf2+0x2e>
 80022fe:	2002      	movs	r0, #2
 8002300:	4240      	negs	r0, r0
 8002302:	e7f4      	b.n	80022ee <__gedf2+0x52>
 8002304:	4330      	orrs	r0, r6
 8002306:	d1fa      	bne.n	80022fe <__gedf2+0x62>
 8002308:	42ac      	cmp	r4, r5
 800230a:	d00f      	beq.n	800232c <__gedf2+0x90>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d10f      	bne.n	8002330 <__gedf2+0x94>
 8002310:	433a      	orrs	r2, r7
 8002312:	d0e7      	beq.n	80022e4 <__gedf2+0x48>
 8002314:	e00c      	b.n	8002330 <__gedf2+0x94>
 8002316:	2201      	movs	r2, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	4393      	bics	r3, r2
 800231c:	0018      	movs	r0, r3
 800231e:	3001      	adds	r0, #1
 8002320:	e7e5      	b.n	80022ee <__gedf2+0x52>
 8002322:	4663      	mov	r3, ip
 8002324:	2000      	movs	r0, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0e1      	beq.n	80022ee <__gedf2+0x52>
 800232a:	e7db      	b.n	80022e4 <__gedf2+0x48>
 800232c:	433a      	orrs	r2, r7
 800232e:	d1e6      	bne.n	80022fe <__gedf2+0x62>
 8002330:	459a      	cmp	sl, r3
 8002332:	d1d7      	bne.n	80022e4 <__gedf2+0x48>
 8002334:	42a5      	cmp	r5, r4
 8002336:	dcd5      	bgt.n	80022e4 <__gedf2+0x48>
 8002338:	42a5      	cmp	r5, r4
 800233a:	db05      	blt.n	8002348 <__gedf2+0xac>
 800233c:	42be      	cmp	r6, r7
 800233e:	d8d1      	bhi.n	80022e4 <__gedf2+0x48>
 8002340:	d008      	beq.n	8002354 <__gedf2+0xb8>
 8002342:	2000      	movs	r0, #0
 8002344:	42be      	cmp	r6, r7
 8002346:	d2d2      	bcs.n	80022ee <__gedf2+0x52>
 8002348:	4650      	mov	r0, sl
 800234a:	2301      	movs	r3, #1
 800234c:	3801      	subs	r0, #1
 800234e:	4398      	bics	r0, r3
 8002350:	3001      	adds	r0, #1
 8002352:	e7cc      	b.n	80022ee <__gedf2+0x52>
 8002354:	45c8      	cmp	r8, r9
 8002356:	d8c5      	bhi.n	80022e4 <__gedf2+0x48>
 8002358:	2000      	movs	r0, #0
 800235a:	45c8      	cmp	r8, r9
 800235c:	d3f4      	bcc.n	8002348 <__gedf2+0xac>
 800235e:	e7c6      	b.n	80022ee <__gedf2+0x52>
 8002360:	000007ff 	.word	0x000007ff

08002364 <__ledf2>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	464f      	mov	r7, r9
 8002368:	4646      	mov	r6, r8
 800236a:	46d6      	mov	lr, sl
 800236c:	004d      	lsls	r5, r1, #1
 800236e:	b5c0      	push	{r6, r7, lr}
 8002370:	030e      	lsls	r6, r1, #12
 8002372:	0fc9      	lsrs	r1, r1, #31
 8002374:	468a      	mov	sl, r1
 8002376:	492e      	ldr	r1, [pc, #184]	; (8002430 <__ledf2+0xcc>)
 8002378:	031f      	lsls	r7, r3, #12
 800237a:	005c      	lsls	r4, r3, #1
 800237c:	4680      	mov	r8, r0
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d6d      	lsrs	r5, r5, #21
 8002382:	4691      	mov	r9, r2
 8002384:	0b3f      	lsrs	r7, r7, #12
 8002386:	0d64      	lsrs	r4, r4, #21
 8002388:	0fdb      	lsrs	r3, r3, #31
 800238a:	428d      	cmp	r5, r1
 800238c:	d018      	beq.n	80023c0 <__ledf2+0x5c>
 800238e:	428c      	cmp	r4, r1
 8002390:	d011      	beq.n	80023b6 <__ledf2+0x52>
 8002392:	2d00      	cmp	r5, #0
 8002394:	d118      	bne.n	80023c8 <__ledf2+0x64>
 8002396:	4330      	orrs	r0, r6
 8002398:	4684      	mov	ip, r0
 800239a:	2c00      	cmp	r4, #0
 800239c:	d11e      	bne.n	80023dc <__ledf2+0x78>
 800239e:	433a      	orrs	r2, r7
 80023a0:	d11c      	bne.n	80023dc <__ledf2+0x78>
 80023a2:	4663      	mov	r3, ip
 80023a4:	2000      	movs	r0, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <__ledf2+0xa8>
 80023aa:	4651      	mov	r1, sl
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e02a      	b.n	800240c <__ledf2+0xa8>
 80023b6:	0039      	movs	r1, r7
 80023b8:	4311      	orrs	r1, r2
 80023ba:	d0ea      	beq.n	8002392 <__ledf2+0x2e>
 80023bc:	2002      	movs	r0, #2
 80023be:	e025      	b.n	800240c <__ledf2+0xa8>
 80023c0:	4330      	orrs	r0, r6
 80023c2:	d1fb      	bne.n	80023bc <__ledf2+0x58>
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d026      	beq.n	8002416 <__ledf2+0xb2>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d126      	bne.n	800241a <__ledf2+0xb6>
 80023cc:	433a      	orrs	r2, r7
 80023ce:	d124      	bne.n	800241a <__ledf2+0xb6>
 80023d0:	4651      	mov	r1, sl
 80023d2:	2002      	movs	r0, #2
 80023d4:	3901      	subs	r1, #1
 80023d6:	4008      	ands	r0, r1
 80023d8:	3801      	subs	r0, #1
 80023da:	e017      	b.n	800240c <__ledf2+0xa8>
 80023dc:	4662      	mov	r2, ip
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d00f      	beq.n	8002402 <__ledf2+0x9e>
 80023e2:	459a      	cmp	sl, r3
 80023e4:	d1e1      	bne.n	80023aa <__ledf2+0x46>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	db05      	blt.n	80023f6 <__ledf2+0x92>
 80023ea:	42be      	cmp	r6, r7
 80023ec:	d8dd      	bhi.n	80023aa <__ledf2+0x46>
 80023ee:	d019      	beq.n	8002424 <__ledf2+0xc0>
 80023f0:	2000      	movs	r0, #0
 80023f2:	42be      	cmp	r6, r7
 80023f4:	d20a      	bcs.n	800240c <__ledf2+0xa8>
 80023f6:	4650      	mov	r0, sl
 80023f8:	2301      	movs	r3, #1
 80023fa:	3801      	subs	r0, #1
 80023fc:	4398      	bics	r0, r3
 80023fe:	3001      	adds	r0, #1
 8002400:	e004      	b.n	800240c <__ledf2+0xa8>
 8002402:	2201      	movs	r2, #1
 8002404:	3b01      	subs	r3, #1
 8002406:	4393      	bics	r3, r2
 8002408:	0018      	movs	r0, r3
 800240a:	3001      	adds	r0, #1
 800240c:	bc1c      	pop	{r2, r3, r4}
 800240e:	4690      	mov	r8, r2
 8002410:	4699      	mov	r9, r3
 8002412:	46a2      	mov	sl, r4
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	433a      	orrs	r2, r7
 8002418:	d1d0      	bne.n	80023bc <__ledf2+0x58>
 800241a:	459a      	cmp	sl, r3
 800241c:	d1c5      	bne.n	80023aa <__ledf2+0x46>
 800241e:	42a5      	cmp	r5, r4
 8002420:	dcc3      	bgt.n	80023aa <__ledf2+0x46>
 8002422:	e7e0      	b.n	80023e6 <__ledf2+0x82>
 8002424:	45c8      	cmp	r8, r9
 8002426:	d8c0      	bhi.n	80023aa <__ledf2+0x46>
 8002428:	2000      	movs	r0, #0
 800242a:	45c8      	cmp	r8, r9
 800242c:	d3e3      	bcc.n	80023f6 <__ledf2+0x92>
 800242e:	e7ed      	b.n	800240c <__ledf2+0xa8>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__aeabi_dmul>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	46de      	mov	lr, fp
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	4683      	mov	fp, r0
 8002442:	0006      	movs	r6, r0
 8002444:	030f      	lsls	r7, r1, #12
 8002446:	0048      	lsls	r0, r1, #1
 8002448:	b087      	sub	sp, #28
 800244a:	4692      	mov	sl, r2
 800244c:	001d      	movs	r5, r3
 800244e:	0b3f      	lsrs	r7, r7, #12
 8002450:	0d40      	lsrs	r0, r0, #21
 8002452:	0fcc      	lsrs	r4, r1, #31
 8002454:	2800      	cmp	r0, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dmul+0x26>
 8002458:	e06f      	b.n	800253a <__aeabi_dmul+0x106>
 800245a:	4bde      	ldr	r3, [pc, #888]	; (80027d4 <__aeabi_dmul+0x3a0>)
 800245c:	4298      	cmp	r0, r3
 800245e:	d038      	beq.n	80024d2 <__aeabi_dmul+0x9e>
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00ff      	lsls	r7, r7, #3
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431f      	orrs	r7, r3
 8002468:	0f73      	lsrs	r3, r6, #29
 800246a:	433b      	orrs	r3, r7
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	4bda      	ldr	r3, [pc, #872]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002470:	2700      	movs	r7, #0
 8002472:	4699      	mov	r9, r3
 8002474:	2300      	movs	r3, #0
 8002476:	469b      	mov	fp, r3
 8002478:	00f6      	lsls	r6, r6, #3
 800247a:	4481      	add	r9, r0
 800247c:	032b      	lsls	r3, r5, #12
 800247e:	0069      	lsls	r1, r5, #1
 8002480:	0b1b      	lsrs	r3, r3, #12
 8002482:	4652      	mov	r2, sl
 8002484:	4698      	mov	r8, r3
 8002486:	0d49      	lsrs	r1, r1, #21
 8002488:	0fed      	lsrs	r5, r5, #31
 800248a:	2900      	cmp	r1, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x5c>
 800248e:	e085      	b.n	800259c <__aeabi_dmul+0x168>
 8002490:	4bd0      	ldr	r3, [pc, #832]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002492:	4299      	cmp	r1, r3
 8002494:	d100      	bne.n	8002498 <__aeabi_dmul+0x64>
 8002496:	e073      	b.n	8002580 <__aeabi_dmul+0x14c>
 8002498:	4643      	mov	r3, r8
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4652      	mov	r2, sl
 80024a4:	48cc      	ldr	r0, [pc, #816]	; (80027d8 <__aeabi_dmul+0x3a4>)
 80024a6:	0f52      	lsrs	r2, r2, #29
 80024a8:	4684      	mov	ip, r0
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4652      	mov	r2, sl
 80024ae:	2000      	movs	r0, #0
 80024b0:	4461      	add	r1, ip
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	4489      	add	r9, r1
 80024b6:	0021      	movs	r1, r4
 80024b8:	4069      	eors	r1, r5
 80024ba:	9100      	str	r1, [sp, #0]
 80024bc:	468c      	mov	ip, r1
 80024be:	2101      	movs	r1, #1
 80024c0:	4449      	add	r1, r9
 80024c2:	468a      	mov	sl, r1
 80024c4:	2f0f      	cmp	r7, #15
 80024c6:	d900      	bls.n	80024ca <__aeabi_dmul+0x96>
 80024c8:	e090      	b.n	80025ec <__aeabi_dmul+0x1b8>
 80024ca:	49c4      	ldr	r1, [pc, #784]	; (80027dc <__aeabi_dmul+0x3a8>)
 80024cc:	00bf      	lsls	r7, r7, #2
 80024ce:	59cf      	ldr	r7, [r1, r7]
 80024d0:	46bf      	mov	pc, r7
 80024d2:	465b      	mov	r3, fp
 80024d4:	433b      	orrs	r3, r7
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0xa8>
 80024da:	e16a      	b.n	80027b2 <__aeabi_dmul+0x37e>
 80024dc:	2302      	movs	r3, #2
 80024de:	2708      	movs	r7, #8
 80024e0:	2600      	movs	r6, #0
 80024e2:	4681      	mov	r9, r0
 80024e4:	469b      	mov	fp, r3
 80024e6:	e7c9      	b.n	800247c <__aeabi_dmul+0x48>
 80024e8:	0032      	movs	r2, r6
 80024ea:	4658      	mov	r0, fp
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	4661      	mov	r1, ip
 80024f0:	9100      	str	r1, [sp, #0]
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0xc4>
 80024f6:	e075      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d100      	bne.n	80024fe <__aeabi_dmul+0xca>
 80024fc:	e1fe      	b.n	80028fc <__aeabi_dmul+0x4c8>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d000      	beq.n	8002504 <__aeabi_dmul+0xd0>
 8002502:	e12c      	b.n	800275e <__aeabi_dmul+0x32a>
 8002504:	2300      	movs	r3, #0
 8002506:	2700      	movs	r7, #0
 8002508:	2600      	movs	r6, #0
 800250a:	2500      	movs	r5, #0
 800250c:	033f      	lsls	r7, r7, #12
 800250e:	0d2a      	lsrs	r2, r5, #20
 8002510:	0b3f      	lsrs	r7, r7, #12
 8002512:	48b3      	ldr	r0, [pc, #716]	; (80027e0 <__aeabi_dmul+0x3ac>)
 8002514:	0512      	lsls	r2, r2, #20
 8002516:	433a      	orrs	r2, r7
 8002518:	4002      	ands	r2, r0
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	4313      	orrs	r3, r2
 800251e:	9a00      	ldr	r2, [sp, #0]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	07d1      	lsls	r1, r2, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	430b      	orrs	r3, r1
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	b007      	add	sp, #28
 800252e:	bc3c      	pop	{r2, r3, r4, r5}
 8002530:	4690      	mov	r8, r2
 8002532:	4699      	mov	r9, r3
 8002534:	46a2      	mov	sl, r4
 8002536:	46ab      	mov	fp, r5
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	465b      	mov	r3, fp
 800253c:	433b      	orrs	r3, r7
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	d100      	bne.n	8002544 <__aeabi_dmul+0x110>
 8002542:	e12f      	b.n	80027a4 <__aeabi_dmul+0x370>
 8002544:	2f00      	cmp	r7, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dmul+0x116>
 8002548:	e1a5      	b.n	8002896 <__aeabi_dmul+0x462>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 fec0 	bl	80032d0 <__clzsi2>
 8002550:	0003      	movs	r3, r0
 8002552:	3b0b      	subs	r3, #11
 8002554:	2b1c      	cmp	r3, #28
 8002556:	dd00      	ble.n	800255a <__aeabi_dmul+0x126>
 8002558:	e196      	b.n	8002888 <__aeabi_dmul+0x454>
 800255a:	221d      	movs	r2, #29
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	465a      	mov	r2, fp
 8002560:	0001      	movs	r1, r0
 8002562:	40da      	lsrs	r2, r3
 8002564:	465e      	mov	r6, fp
 8002566:	3908      	subs	r1, #8
 8002568:	408f      	lsls	r7, r1
 800256a:	0013      	movs	r3, r2
 800256c:	408e      	lsls	r6, r1
 800256e:	433b      	orrs	r3, r7
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <__aeabi_dmul+0x3b0>)
 8002574:	2700      	movs	r7, #0
 8002576:	1a1b      	subs	r3, r3, r0
 8002578:	4699      	mov	r9, r3
 800257a:	2300      	movs	r3, #0
 800257c:	469b      	mov	fp, r3
 800257e:	e77d      	b.n	800247c <__aeabi_dmul+0x48>
 8002580:	4641      	mov	r1, r8
 8002582:	4653      	mov	r3, sl
 8002584:	430b      	orrs	r3, r1
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002588:	468c      	mov	ip, r1
 800258a:	44e1      	add	r9, ip
 800258c:	2b00      	cmp	r3, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dmul+0x15e>
 8002590:	e11a      	b.n	80027c8 <__aeabi_dmul+0x394>
 8002592:	2202      	movs	r2, #2
 8002594:	2002      	movs	r0, #2
 8002596:	4317      	orrs	r7, r2
 8002598:	2200      	movs	r2, #0
 800259a:	e78c      	b.n	80024b6 <__aeabi_dmul+0x82>
 800259c:	4313      	orrs	r3, r2
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x16e>
 80025a0:	e10d      	b.n	80027be <__aeabi_dmul+0x38a>
 80025a2:	4643      	mov	r3, r8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x176>
 80025a8:	e181      	b.n	80028ae <__aeabi_dmul+0x47a>
 80025aa:	4640      	mov	r0, r8
 80025ac:	f000 fe90 	bl	80032d0 <__clzsi2>
 80025b0:	0002      	movs	r2, r0
 80025b2:	3a0b      	subs	r2, #11
 80025b4:	2a1c      	cmp	r2, #28
 80025b6:	dd00      	ble.n	80025ba <__aeabi_dmul+0x186>
 80025b8:	e172      	b.n	80028a0 <__aeabi_dmul+0x46c>
 80025ba:	0001      	movs	r1, r0
 80025bc:	4643      	mov	r3, r8
 80025be:	3908      	subs	r1, #8
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4698      	mov	r8, r3
 80025c4:	231d      	movs	r3, #29
 80025c6:	1a9a      	subs	r2, r3, r2
 80025c8:	4653      	mov	r3, sl
 80025ca:	40d3      	lsrs	r3, r2
 80025cc:	001a      	movs	r2, r3
 80025ce:	4643      	mov	r3, r8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	4652      	mov	r2, sl
 80025d4:	408a      	lsls	r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	1a08      	subs	r0, r1, r0
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <__aeabi_dmul+0x3b0>)
 80025dc:	4689      	mov	r9, r1
 80025de:	4481      	add	r9, r0
 80025e0:	2000      	movs	r0, #0
 80025e2:	e768      	b.n	80024b6 <__aeabi_dmul+0x82>
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <__aeabi_dmul+0x3a0>)
 80025e6:	2700      	movs	r7, #0
 80025e8:	2600      	movs	r6, #0
 80025ea:	e78e      	b.n	800250a <__aeabi_dmul+0xd6>
 80025ec:	0c14      	lsrs	r4, r2, #16
 80025ee:	0412      	lsls	r2, r2, #16
 80025f0:	0c12      	lsrs	r2, r2, #16
 80025f2:	0011      	movs	r1, r2
 80025f4:	0c37      	lsrs	r7, r6, #16
 80025f6:	0436      	lsls	r6, r6, #16
 80025f8:	0c35      	lsrs	r5, r6, #16
 80025fa:	4379      	muls	r1, r7
 80025fc:	0028      	movs	r0, r5
 80025fe:	468c      	mov	ip, r1
 8002600:	002e      	movs	r6, r5
 8002602:	4360      	muls	r0, r4
 8002604:	4460      	add	r0, ip
 8002606:	4683      	mov	fp, r0
 8002608:	4356      	muls	r6, r2
 800260a:	0021      	movs	r1, r4
 800260c:	0c30      	lsrs	r0, r6, #16
 800260e:	4680      	mov	r8, r0
 8002610:	4658      	mov	r0, fp
 8002612:	4379      	muls	r1, r7
 8002614:	4440      	add	r0, r8
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	4584      	cmp	ip, r0
 800261a:	d906      	bls.n	800262a <__aeabi_dmul+0x1f6>
 800261c:	4688      	mov	r8, r1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0249      	lsls	r1, r1, #9
 8002622:	468c      	mov	ip, r1
 8002624:	44e0      	add	r8, ip
 8002626:	4641      	mov	r1, r8
 8002628:	9102      	str	r1, [sp, #8]
 800262a:	0436      	lsls	r6, r6, #16
 800262c:	0c01      	lsrs	r1, r0, #16
 800262e:	0c36      	lsrs	r6, r6, #16
 8002630:	0400      	lsls	r0, r0, #16
 8002632:	468b      	mov	fp, r1
 8002634:	1981      	adds	r1, r0, r6
 8002636:	0c1e      	lsrs	r6, r3, #16
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	9103      	str	r1, [sp, #12]
 800263e:	0019      	movs	r1, r3
 8002640:	4379      	muls	r1, r7
 8002642:	468c      	mov	ip, r1
 8002644:	0028      	movs	r0, r5
 8002646:	4375      	muls	r5, r6
 8002648:	4465      	add	r5, ip
 800264a:	46a8      	mov	r8, r5
 800264c:	4358      	muls	r0, r3
 800264e:	0c05      	lsrs	r5, r0, #16
 8002650:	4445      	add	r5, r8
 8002652:	4377      	muls	r7, r6
 8002654:	42a9      	cmp	r1, r5
 8002656:	d903      	bls.n	8002660 <__aeabi_dmul+0x22c>
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0249      	lsls	r1, r1, #9
 800265c:	468c      	mov	ip, r1
 800265e:	4467      	add	r7, ip
 8002660:	0c29      	lsrs	r1, r5, #16
 8002662:	468c      	mov	ip, r1
 8002664:	0039      	movs	r1, r7
 8002666:	0400      	lsls	r0, r0, #16
 8002668:	0c00      	lsrs	r0, r0, #16
 800266a:	042d      	lsls	r5, r5, #16
 800266c:	182d      	adds	r5, r5, r0
 800266e:	4461      	add	r1, ip
 8002670:	44ab      	add	fp, r5
 8002672:	9105      	str	r1, [sp, #20]
 8002674:	4659      	mov	r1, fp
 8002676:	9104      	str	r1, [sp, #16]
 8002678:	9901      	ldr	r1, [sp, #4]
 800267a:	040f      	lsls	r7, r1, #16
 800267c:	0c3f      	lsrs	r7, r7, #16
 800267e:	0c08      	lsrs	r0, r1, #16
 8002680:	0039      	movs	r1, r7
 8002682:	4351      	muls	r1, r2
 8002684:	4342      	muls	r2, r0
 8002686:	4690      	mov	r8, r2
 8002688:	0002      	movs	r2, r0
 800268a:	468c      	mov	ip, r1
 800268c:	0c09      	lsrs	r1, r1, #16
 800268e:	468b      	mov	fp, r1
 8002690:	4362      	muls	r2, r4
 8002692:	437c      	muls	r4, r7
 8002694:	4444      	add	r4, r8
 8002696:	445c      	add	r4, fp
 8002698:	45a0      	cmp	r8, r4
 800269a:	d903      	bls.n	80026a4 <__aeabi_dmul+0x270>
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	4688      	mov	r8, r1
 80026a2:	4442      	add	r2, r8
 80026a4:	0c21      	lsrs	r1, r4, #16
 80026a6:	4688      	mov	r8, r1
 80026a8:	4661      	mov	r1, ip
 80026aa:	0409      	lsls	r1, r1, #16
 80026ac:	0c09      	lsrs	r1, r1, #16
 80026ae:	468c      	mov	ip, r1
 80026b0:	0039      	movs	r1, r7
 80026b2:	4359      	muls	r1, r3
 80026b4:	4343      	muls	r3, r0
 80026b6:	4370      	muls	r0, r6
 80026b8:	437e      	muls	r6, r7
 80026ba:	0c0f      	lsrs	r7, r1, #16
 80026bc:	18f6      	adds	r6, r6, r3
 80026be:	0424      	lsls	r4, r4, #16
 80026c0:	19be      	adds	r6, r7, r6
 80026c2:	4464      	add	r4, ip
 80026c4:	4442      	add	r2, r8
 80026c6:	468c      	mov	ip, r1
 80026c8:	42b3      	cmp	r3, r6
 80026ca:	d903      	bls.n	80026d4 <__aeabi_dmul+0x2a0>
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	4698      	mov	r8, r3
 80026d2:	4440      	add	r0, r8
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4661      	mov	r1, ip
 80026d8:	4698      	mov	r8, r3
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	0437      	lsls	r7, r6, #16
 80026de:	4443      	add	r3, r8
 80026e0:	469b      	mov	fp, r3
 80026e2:	45ab      	cmp	fp, r5
 80026e4:	41ad      	sbcs	r5, r5
 80026e6:	426b      	negs	r3, r5
 80026e8:	040d      	lsls	r5, r1, #16
 80026ea:	9905      	ldr	r1, [sp, #20]
 80026ec:	0c2d      	lsrs	r5, r5, #16
 80026ee:	468c      	mov	ip, r1
 80026f0:	197f      	adds	r7, r7, r5
 80026f2:	4467      	add	r7, ip
 80026f4:	18fd      	adds	r5, r7, r3
 80026f6:	46a8      	mov	r8, r5
 80026f8:	465d      	mov	r5, fp
 80026fa:	192d      	adds	r5, r5, r4
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	41a4      	sbcs	r4, r4
 8002700:	4693      	mov	fp, r2
 8002702:	4264      	negs	r4, r4
 8002704:	46a4      	mov	ip, r4
 8002706:	44c3      	add	fp, r8
 8002708:	44dc      	add	ip, fp
 800270a:	428f      	cmp	r7, r1
 800270c:	41bf      	sbcs	r7, r7
 800270e:	4598      	cmp	r8, r3
 8002710:	419b      	sbcs	r3, r3
 8002712:	4593      	cmp	fp, r2
 8002714:	4192      	sbcs	r2, r2
 8002716:	45a4      	cmp	ip, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	425b      	negs	r3, r3
 800271c:	427f      	negs	r7, r7
 800271e:	431f      	orrs	r7, r3
 8002720:	0c36      	lsrs	r6, r6, #16
 8002722:	4252      	negs	r2, r2
 8002724:	4264      	negs	r4, r4
 8002726:	19bf      	adds	r7, r7, r6
 8002728:	4322      	orrs	r2, r4
 800272a:	18bf      	adds	r7, r7, r2
 800272c:	4662      	mov	r2, ip
 800272e:	1838      	adds	r0, r7, r0
 8002730:	0243      	lsls	r3, r0, #9
 8002732:	0dd2      	lsrs	r2, r2, #23
 8002734:	9903      	ldr	r1, [sp, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	026a      	lsls	r2, r5, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	1e50      	subs	r0, r2, #1
 800273e:	4182      	sbcs	r2, r0
 8002740:	4661      	mov	r1, ip
 8002742:	0ded      	lsrs	r5, r5, #23
 8002744:	432a      	orrs	r2, r5
 8002746:	024e      	lsls	r6, r1, #9
 8002748:	4332      	orrs	r2, r6
 800274a:	01d9      	lsls	r1, r3, #7
 800274c:	d400      	bmi.n	8002750 <__aeabi_dmul+0x31c>
 800274e:	e0b3      	b.n	80028b8 <__aeabi_dmul+0x484>
 8002750:	2601      	movs	r6, #1
 8002752:	0850      	lsrs	r0, r2, #1
 8002754:	4032      	ands	r2, r6
 8002756:	4302      	orrs	r2, r0
 8002758:	07de      	lsls	r6, r3, #31
 800275a:	4332      	orrs	r2, r6
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	4c22      	ldr	r4, [pc, #136]	; (80027e8 <__aeabi_dmul+0x3b4>)
 8002760:	4454      	add	r4, sl
 8002762:	2c00      	cmp	r4, #0
 8002764:	dd62      	ble.n	800282c <__aeabi_dmul+0x3f8>
 8002766:	0751      	lsls	r1, r2, #29
 8002768:	d009      	beq.n	800277e <__aeabi_dmul+0x34a>
 800276a:	200f      	movs	r0, #15
 800276c:	4010      	ands	r0, r2
 800276e:	2804      	cmp	r0, #4
 8002770:	d005      	beq.n	800277e <__aeabi_dmul+0x34a>
 8002772:	1d10      	adds	r0, r2, #4
 8002774:	4290      	cmp	r0, r2
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	0002      	movs	r2, r0
 800277e:	01d9      	lsls	r1, r3, #7
 8002780:	d504      	bpl.n	800278c <__aeabi_dmul+0x358>
 8002782:	2480      	movs	r4, #128	; 0x80
 8002784:	4819      	ldr	r0, [pc, #100]	; (80027ec <__aeabi_dmul+0x3b8>)
 8002786:	00e4      	lsls	r4, r4, #3
 8002788:	4003      	ands	r3, r0
 800278a:	4454      	add	r4, sl
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <__aeabi_dmul+0x3bc>)
 800278e:	4284      	cmp	r4, r0
 8002790:	dd00      	ble.n	8002794 <__aeabi_dmul+0x360>
 8002792:	e727      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 8002794:	075e      	lsls	r6, r3, #29
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	0b1f      	lsrs	r7, r3, #12
 800279c:	0563      	lsls	r3, r4, #21
 800279e:	4316      	orrs	r6, r2
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	e6b2      	b.n	800250a <__aeabi_dmul+0xd6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	4699      	mov	r9, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	2704      	movs	r7, #4
 80027ac:	2600      	movs	r6, #0
 80027ae:	469b      	mov	fp, r3
 80027b0:	e664      	b.n	800247c <__aeabi_dmul+0x48>
 80027b2:	2303      	movs	r3, #3
 80027b4:	9701      	str	r7, [sp, #4]
 80027b6:	4681      	mov	r9, r0
 80027b8:	270c      	movs	r7, #12
 80027ba:	469b      	mov	fp, r3
 80027bc:	e65e      	b.n	800247c <__aeabi_dmul+0x48>
 80027be:	2201      	movs	r2, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	4317      	orrs	r7, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	e676      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027c8:	2303      	movs	r3, #3
 80027ca:	2003      	movs	r0, #3
 80027cc:	431f      	orrs	r7, r3
 80027ce:	4643      	mov	r3, r8
 80027d0:	e671      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	000007ff 	.word	0x000007ff
 80027d8:	fffffc01 	.word	0xfffffc01
 80027dc:	08018934 	.word	0x08018934
 80027e0:	800fffff 	.word	0x800fffff
 80027e4:	fffffc0d 	.word	0xfffffc0d
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2300      	movs	r3, #0
 80027f6:	2780      	movs	r7, #128	; 0x80
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	033f      	lsls	r7, r7, #12
 80027fc:	2600      	movs	r6, #0
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <__aeabi_dmul+0x4d8>)
 8002800:	e683      	b.n	800250a <__aeabi_dmul+0xd6>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0032      	movs	r2, r6
 8002806:	46a4      	mov	ip, r4
 8002808:	4658      	mov	r0, fp
 800280a:	e670      	b.n	80024ee <__aeabi_dmul+0xba>
 800280c:	46ac      	mov	ip, r5
 800280e:	e66e      	b.n	80024ee <__aeabi_dmul+0xba>
 8002810:	2780      	movs	r7, #128	; 0x80
 8002812:	9901      	ldr	r1, [sp, #4]
 8002814:	033f      	lsls	r7, r7, #12
 8002816:	4239      	tst	r1, r7
 8002818:	d02d      	beq.n	8002876 <__aeabi_dmul+0x442>
 800281a:	423b      	tst	r3, r7
 800281c:	d12b      	bne.n	8002876 <__aeabi_dmul+0x442>
 800281e:	431f      	orrs	r7, r3
 8002820:	033f      	lsls	r7, r7, #12
 8002822:	0b3f      	lsrs	r7, r7, #12
 8002824:	9500      	str	r5, [sp, #0]
 8002826:	0016      	movs	r6, r2
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <__aeabi_dmul+0x4d8>)
 800282a:	e66e      	b.n	800250a <__aeabi_dmul+0xd6>
 800282c:	2501      	movs	r5, #1
 800282e:	1b2d      	subs	r5, r5, r4
 8002830:	2d38      	cmp	r5, #56	; 0x38
 8002832:	dd00      	ble.n	8002836 <__aeabi_dmul+0x402>
 8002834:	e666      	b.n	8002504 <__aeabi_dmul+0xd0>
 8002836:	2d1f      	cmp	r5, #31
 8002838:	dc40      	bgt.n	80028bc <__aeabi_dmul+0x488>
 800283a:	4835      	ldr	r0, [pc, #212]	; (8002910 <__aeabi_dmul+0x4dc>)
 800283c:	001c      	movs	r4, r3
 800283e:	4450      	add	r0, sl
 8002840:	0016      	movs	r6, r2
 8002842:	4082      	lsls	r2, r0
 8002844:	4084      	lsls	r4, r0
 8002846:	40ee      	lsrs	r6, r5
 8002848:	1e50      	subs	r0, r2, #1
 800284a:	4182      	sbcs	r2, r0
 800284c:	4334      	orrs	r4, r6
 800284e:	4314      	orrs	r4, r2
 8002850:	40eb      	lsrs	r3, r5
 8002852:	0762      	lsls	r2, r4, #29
 8002854:	d009      	beq.n	800286a <__aeabi_dmul+0x436>
 8002856:	220f      	movs	r2, #15
 8002858:	4022      	ands	r2, r4
 800285a:	2a04      	cmp	r2, #4
 800285c:	d005      	beq.n	800286a <__aeabi_dmul+0x436>
 800285e:	0022      	movs	r2, r4
 8002860:	1d14      	adds	r4, r2, #4
 8002862:	4294      	cmp	r4, r2
 8002864:	4180      	sbcs	r0, r0
 8002866:	4240      	negs	r0, r0
 8002868:	181b      	adds	r3, r3, r0
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	d53e      	bpl.n	80028ec <__aeabi_dmul+0x4b8>
 800286e:	2301      	movs	r3, #1
 8002870:	2700      	movs	r7, #0
 8002872:	2600      	movs	r6, #0
 8002874:	e649      	b.n	800250a <__aeabi_dmul+0xd6>
 8002876:	2780      	movs	r7, #128	; 0x80
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	033f      	lsls	r7, r7, #12
 800287c:	431f      	orrs	r7, r3
 800287e:	033f      	lsls	r7, r7, #12
 8002880:	0b3f      	lsrs	r7, r7, #12
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <__aeabi_dmul+0x4d8>)
 8002886:	e640      	b.n	800250a <__aeabi_dmul+0xd6>
 8002888:	0003      	movs	r3, r0
 800288a:	465a      	mov	r2, fp
 800288c:	3b28      	subs	r3, #40	; 0x28
 800288e:	409a      	lsls	r2, r3
 8002890:	2600      	movs	r6, #0
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	e66d      	b.n	8002572 <__aeabi_dmul+0x13e>
 8002896:	4658      	mov	r0, fp
 8002898:	f000 fd1a 	bl	80032d0 <__clzsi2>
 800289c:	3020      	adds	r0, #32
 800289e:	e657      	b.n	8002550 <__aeabi_dmul+0x11c>
 80028a0:	0003      	movs	r3, r0
 80028a2:	4652      	mov	r2, sl
 80028a4:	3b28      	subs	r3, #40	; 0x28
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	e693      	b.n	80025d6 <__aeabi_dmul+0x1a2>
 80028ae:	4650      	mov	r0, sl
 80028b0:	f000 fd0e 	bl	80032d0 <__clzsi2>
 80028b4:	3020      	adds	r0, #32
 80028b6:	e67b      	b.n	80025b0 <__aeabi_dmul+0x17c>
 80028b8:	46ca      	mov	sl, r9
 80028ba:	e750      	b.n	800275e <__aeabi_dmul+0x32a>
 80028bc:	201f      	movs	r0, #31
 80028be:	001e      	movs	r6, r3
 80028c0:	4240      	negs	r0, r0
 80028c2:	1b04      	subs	r4, r0, r4
 80028c4:	40e6      	lsrs	r6, r4
 80028c6:	2d20      	cmp	r5, #32
 80028c8:	d003      	beq.n	80028d2 <__aeabi_dmul+0x49e>
 80028ca:	4c12      	ldr	r4, [pc, #72]	; (8002914 <__aeabi_dmul+0x4e0>)
 80028cc:	4454      	add	r4, sl
 80028ce:	40a3      	lsls	r3, r4
 80028d0:	431a      	orrs	r2, r3
 80028d2:	1e50      	subs	r0, r2, #1
 80028d4:	4182      	sbcs	r2, r0
 80028d6:	4332      	orrs	r2, r6
 80028d8:	2607      	movs	r6, #7
 80028da:	2700      	movs	r7, #0
 80028dc:	4016      	ands	r6, r2
 80028de:	d009      	beq.n	80028f4 <__aeabi_dmul+0x4c0>
 80028e0:	200f      	movs	r0, #15
 80028e2:	2300      	movs	r3, #0
 80028e4:	4010      	ands	r0, r2
 80028e6:	0014      	movs	r4, r2
 80028e8:	2804      	cmp	r0, #4
 80028ea:	d1b9      	bne.n	8002860 <__aeabi_dmul+0x42c>
 80028ec:	0022      	movs	r2, r4
 80028ee:	075e      	lsls	r6, r3, #29
 80028f0:	025b      	lsls	r3, r3, #9
 80028f2:	0b1f      	lsrs	r7, r3, #12
 80028f4:	08d2      	lsrs	r2, r2, #3
 80028f6:	4316      	orrs	r6, r2
 80028f8:	2300      	movs	r3, #0
 80028fa:	e606      	b.n	800250a <__aeabi_dmul+0xd6>
 80028fc:	2780      	movs	r7, #128	; 0x80
 80028fe:	033f      	lsls	r7, r7, #12
 8002900:	431f      	orrs	r7, r3
 8002902:	033f      	lsls	r7, r7, #12
 8002904:	0b3f      	lsrs	r7, r7, #12
 8002906:	0016      	movs	r6, r2
 8002908:	4b00      	ldr	r3, [pc, #0]	; (800290c <__aeabi_dmul+0x4d8>)
 800290a:	e5fe      	b.n	800250a <__aeabi_dmul+0xd6>
 800290c:	000007ff 	.word	0x000007ff
 8002910:	0000041e 	.word	0x0000041e
 8002914:	0000043e 	.word	0x0000043e

08002918 <__aeabi_dsub>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	4645      	mov	r5, r8
 8002920:	46de      	mov	lr, fp
 8002922:	000c      	movs	r4, r1
 8002924:	0309      	lsls	r1, r1, #12
 8002926:	b5e0      	push	{r5, r6, r7, lr}
 8002928:	0a49      	lsrs	r1, r1, #9
 800292a:	0f46      	lsrs	r6, r0, #29
 800292c:	005f      	lsls	r7, r3, #1
 800292e:	4331      	orrs	r1, r6
 8002930:	031e      	lsls	r6, r3, #12
 8002932:	0fdb      	lsrs	r3, r3, #31
 8002934:	0a76      	lsrs	r6, r6, #9
 8002936:	469b      	mov	fp, r3
 8002938:	0f53      	lsrs	r3, r2, #29
 800293a:	4333      	orrs	r3, r6
 800293c:	4ec8      	ldr	r6, [pc, #800]	; (8002c60 <__aeabi_dsub+0x348>)
 800293e:	0065      	lsls	r5, r4, #1
 8002940:	00c0      	lsls	r0, r0, #3
 8002942:	0fe4      	lsrs	r4, r4, #31
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	0d6d      	lsrs	r5, r5, #21
 8002948:	46a2      	mov	sl, r4
 800294a:	4681      	mov	r9, r0
 800294c:	0d7f      	lsrs	r7, r7, #21
 800294e:	469c      	mov	ip, r3
 8002950:	4690      	mov	r8, r2
 8002952:	42b7      	cmp	r7, r6
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x40>
 8002956:	e0b9      	b.n	8002acc <__aeabi_dsub+0x1b4>
 8002958:	465b      	mov	r3, fp
 800295a:	2601      	movs	r6, #1
 800295c:	4073      	eors	r3, r6
 800295e:	469b      	mov	fp, r3
 8002960:	1bee      	subs	r6, r5, r7
 8002962:	45a3      	cmp	fp, r4
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x50>
 8002966:	e083      	b.n	8002a70 <__aeabi_dsub+0x158>
 8002968:	2e00      	cmp	r6, #0
 800296a:	dd63      	ble.n	8002a34 <__aeabi_dsub+0x11c>
 800296c:	2f00      	cmp	r7, #0
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x5a>
 8002970:	e0b1      	b.n	8002ad6 <__aeabi_dsub+0x1be>
 8002972:	4663      	mov	r3, ip
 8002974:	4313      	orrs	r3, r2
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0x62>
 8002978:	e123      	b.n	8002bc2 <__aeabi_dsub+0x2aa>
 800297a:	1e73      	subs	r3, r6, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x6a>
 8002980:	e1ba      	b.n	8002cf8 <__aeabi_dsub+0x3e0>
 8002982:	1a86      	subs	r6, r0, r2
 8002984:	4663      	mov	r3, ip
 8002986:	42b0      	cmp	r0, r6
 8002988:	4180      	sbcs	r0, r0
 800298a:	2501      	movs	r5, #1
 800298c:	1ac9      	subs	r1, r1, r3
 800298e:	4240      	negs	r0, r0
 8002990:	1a09      	subs	r1, r1, r0
 8002992:	020b      	lsls	r3, r1, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x80>
 8002996:	e147      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	0a4b      	lsrs	r3, r1, #9
 800299c:	4698      	mov	r8, r3
 800299e:	4643      	mov	r3, r8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x8e>
 80029a4:	e189      	b.n	8002cba <__aeabi_dsub+0x3a2>
 80029a6:	4640      	mov	r0, r8
 80029a8:	f000 fc92 	bl	80032d0 <__clzsi2>
 80029ac:	0003      	movs	r3, r0
 80029ae:	3b08      	subs	r3, #8
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x9e>
 80029b4:	e17c      	b.n	8002cb0 <__aeabi_dsub+0x398>
 80029b6:	2220      	movs	r2, #32
 80029b8:	0030      	movs	r0, r6
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4641      	mov	r1, r8
 80029be:	40d0      	lsrs	r0, r2
 80029c0:	4099      	lsls	r1, r3
 80029c2:	0002      	movs	r2, r0
 80029c4:	409e      	lsls	r6, r3
 80029c6:	430a      	orrs	r2, r1
 80029c8:	429d      	cmp	r5, r3
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dsub+0xb6>
 80029cc:	e16a      	b.n	8002ca4 <__aeabi_dsub+0x38c>
 80029ce:	1b5d      	subs	r5, r3, r5
 80029d0:	1c6b      	adds	r3, r5, #1
 80029d2:	2b1f      	cmp	r3, #31
 80029d4:	dd00      	ble.n	80029d8 <__aeabi_dsub+0xc0>
 80029d6:	e194      	b.n	8002d02 <__aeabi_dsub+0x3ea>
 80029d8:	2120      	movs	r1, #32
 80029da:	0010      	movs	r0, r2
 80029dc:	0035      	movs	r5, r6
 80029de:	1ac9      	subs	r1, r1, r3
 80029e0:	408e      	lsls	r6, r1
 80029e2:	40da      	lsrs	r2, r3
 80029e4:	4088      	lsls	r0, r1
 80029e6:	40dd      	lsrs	r5, r3
 80029e8:	1e71      	subs	r1, r6, #1
 80029ea:	418e      	sbcs	r6, r1
 80029ec:	0011      	movs	r1, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	4328      	orrs	r0, r5
 80029f2:	2500      	movs	r5, #0
 80029f4:	4306      	orrs	r6, r0
 80029f6:	4032      	ands	r2, r6
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d009      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 80029fc:	230f      	movs	r3, #15
 80029fe:	4033      	ands	r3, r6
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 8002a04:	1d33      	adds	r3, r6, #4
 8002a06:	42b3      	cmp	r3, r6
 8002a08:	41b6      	sbcs	r6, r6
 8002a0a:	4276      	negs	r6, r6
 8002a0c:	1989      	adds	r1, r1, r6
 8002a0e:	001e      	movs	r6, r3
 8002a10:	020b      	lsls	r3, r1, #8
 8002a12:	d400      	bmi.n	8002a16 <__aeabi_dsub+0xfe>
 8002a14:	e23d      	b.n	8002e92 <__aeabi_dsub+0x57a>
 8002a16:	1c6a      	adds	r2, r5, #1
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a1a:	0555      	lsls	r5, r2, #21
 8002a1c:	0d6d      	lsrs	r5, r5, #21
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x10c>
 8002a22:	e119      	b.n	8002c58 <__aeabi_dsub+0x340>
 8002a24:	4a8f      	ldr	r2, [pc, #572]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002a26:	08f6      	lsrs	r6, r6, #3
 8002a28:	400a      	ands	r2, r1
 8002a2a:	0757      	lsls	r7, r2, #29
 8002a2c:	0252      	lsls	r2, r2, #9
 8002a2e:	4337      	orrs	r7, r6
 8002a30:	0b12      	lsrs	r2, r2, #12
 8002a32:	e09b      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d000      	beq.n	8002a3a <__aeabi_dsub+0x122>
 8002a38:	e0c5      	b.n	8002bc6 <__aeabi_dsub+0x2ae>
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	0576      	lsls	r6, r6, #21
 8002a3e:	0d76      	lsrs	r6, r6, #21
 8002a40:	2e01      	cmp	r6, #1
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dsub+0x12e>
 8002a44:	e148      	b.n	8002cd8 <__aeabi_dsub+0x3c0>
 8002a46:	4667      	mov	r7, ip
 8002a48:	1a86      	subs	r6, r0, r2
 8002a4a:	1bcb      	subs	r3, r1, r7
 8002a4c:	42b0      	cmp	r0, r6
 8002a4e:	41bf      	sbcs	r7, r7
 8002a50:	427f      	negs	r7, r7
 8002a52:	46b8      	mov	r8, r7
 8002a54:	001f      	movs	r7, r3
 8002a56:	4643      	mov	r3, r8
 8002a58:	1aff      	subs	r7, r7, r3
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	46b8      	mov	r8, r7
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	d500      	bpl.n	8002a64 <__aeabi_dsub+0x14c>
 8002a62:	e15f      	b.n	8002d24 <__aeabi_dsub+0x40c>
 8002a64:	4337      	orrs	r7, r6
 8002a66:	d19a      	bne.n	800299e <__aeabi_dsub+0x86>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	e079      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	dc00      	bgt.n	8002a76 <__aeabi_dsub+0x15e>
 8002a74:	e0fa      	b.n	8002c6c <__aeabi_dsub+0x354>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x164>
 8002a7a:	e08d      	b.n	8002b98 <__aeabi_dsub+0x280>
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	d067      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	4667      	mov	r7, ip
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431f      	orrs	r7, r3
 8002a8a:	46bc      	mov	ip, r7
 8002a8c:	2e38      	cmp	r6, #56	; 0x38
 8002a8e:	dc00      	bgt.n	8002a92 <__aeabi_dsub+0x17a>
 8002a90:	e152      	b.n	8002d38 <__aeabi_dsub+0x420>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	181e      	adds	r6, r3, r0
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4240      	negs	r0, r0
 8002aa2:	1809      	adds	r1, r1, r0
 8002aa4:	020b      	lsls	r3, r1, #8
 8002aa6:	d400      	bmi.n	8002aaa <__aeabi_dsub+0x192>
 8002aa8:	e0be      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <__aeabi_dsub+0x348>)
 8002aac:	3501      	adds	r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x19c>
 8002ab2:	e0d2      	b.n	8002c5a <__aeabi_dsub+0x342>
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002ab6:	0873      	lsrs	r3, r6, #1
 8002ab8:	400a      	ands	r2, r1
 8002aba:	2101      	movs	r1, #1
 8002abc:	400e      	ands	r6, r1
 8002abe:	431e      	orrs	r6, r3
 8002ac0:	0851      	lsrs	r1, r2, #1
 8002ac2:	07d3      	lsls	r3, r2, #31
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	4032      	ands	r2, r6
 8002aca:	e795      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002acc:	001e      	movs	r6, r3
 8002ace:	4316      	orrs	r6, r2
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x1bc>
 8002ad2:	e745      	b.n	8002960 <__aeabi_dsub+0x48>
 8002ad4:	e740      	b.n	8002958 <__aeabi_dsub+0x40>
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <__aeabi_dsub+0x348>)
 8002ad8:	429d      	cmp	r5, r3
 8002ada:	d03a      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	4667      	mov	r7, ip
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431f      	orrs	r7, r3
 8002ae4:	46bc      	mov	ip, r7
 8002ae6:	2e38      	cmp	r6, #56	; 0x38
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x1d4>
 8002aea:	e0eb      	b.n	8002cc4 <__aeabi_dsub+0x3ac>
 8002aec:	2e1f      	cmp	r6, #31
 8002aee:	dc00      	bgt.n	8002af2 <__aeabi_dsub+0x1da>
 8002af0:	e13a      	b.n	8002d68 <__aeabi_dsub+0x450>
 8002af2:	0033      	movs	r3, r6
 8002af4:	4667      	mov	r7, ip
 8002af6:	3b20      	subs	r3, #32
 8002af8:	40df      	lsrs	r7, r3
 8002afa:	003b      	movs	r3, r7
 8002afc:	2e20      	cmp	r6, #32
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dsub+0x1f4>
 8002b00:	2740      	movs	r7, #64	; 0x40
 8002b02:	1bbf      	subs	r7, r7, r6
 8002b04:	4666      	mov	r6, ip
 8002b06:	40be      	lsls	r6, r7
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4646      	mov	r6, r8
 8002b0e:	1e72      	subs	r2, r6, #1
 8002b10:	4196      	sbcs	r6, r2
 8002b12:	4333      	orrs	r3, r6
 8002b14:	e0da      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x204>
 8002b1a:	e214      	b.n	8002f46 <__aeabi_dsub+0x62e>
 8002b1c:	4663      	mov	r3, ip
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x20c>
 8002b22:	e168      	b.n	8002df6 <__aeabi_dsub+0x4de>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	074e      	lsls	r6, r1, #29
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	08c9      	lsrs	r1, r1, #3
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	4219      	tst	r1, r3
 8002b32:	d008      	beq.n	8002b46 <__aeabi_dsub+0x22e>
 8002b34:	4660      	mov	r0, ip
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	4218      	tst	r0, r3
 8002b3a:	d104      	bne.n	8002b46 <__aeabi_dsub+0x22e>
 8002b3c:	4663      	mov	r3, ip
 8002b3e:	0001      	movs	r1, r0
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	075e      	lsls	r6, r3, #29
 8002b44:	4316      	orrs	r6, r2
 8002b46:	00f3      	lsls	r3, r6, #3
 8002b48:	4699      	mov	r9, r3
 8002b4a:	00c9      	lsls	r1, r1, #3
 8002b4c:	0f72      	lsrs	r2, r6, #29
 8002b4e:	4d44      	ldr	r5, [pc, #272]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b50:	4311      	orrs	r1, r2
 8002b52:	464b      	mov	r3, r9
 8002b54:	08de      	lsrs	r6, r3, #3
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b58:	074f      	lsls	r7, r1, #29
 8002b5a:	4337      	orrs	r7, r6
 8002b5c:	08ca      	lsrs	r2, r1, #3
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x24c>
 8002b62:	e06e      	b.n	8002c42 <__aeabi_dsub+0x32a>
 8002b64:	0312      	lsls	r2, r2, #12
 8002b66:	056d      	lsls	r5, r5, #21
 8002b68:	0b12      	lsrs	r2, r2, #12
 8002b6a:	0d6d      	lsrs	r5, r5, #21
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0312      	lsls	r2, r2, #12
 8002b70:	0b13      	lsrs	r3, r2, #12
 8002b72:	0d0a      	lsrs	r2, r1, #20
 8002b74:	0512      	lsls	r2, r2, #20
 8002b76:	431a      	orrs	r2, r3
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <__aeabi_dsub+0x350>)
 8002b7a:	052d      	lsls	r5, r5, #20
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	432b      	orrs	r3, r5
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	07e4      	lsls	r4, r4, #31
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4323      	orrs	r3, r4
 8002b88:	0038      	movs	r0, r7
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bc3c      	pop	{r2, r3, r4, r5}
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	46ab      	mov	fp, r5
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b98:	4663      	mov	r3, ip
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d011      	beq.n	8002bc2 <__aeabi_dsub+0x2aa>
 8002b9e:	1e73      	subs	r3, r6, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x28e>
 8002ba4:	e107      	b.n	8002db6 <__aeabi_dsub+0x49e>
 8002ba6:	1886      	adds	r6, r0, r2
 8002ba8:	4286      	cmp	r6, r0
 8002baa:	4180      	sbcs	r0, r0
 8002bac:	4461      	add	r1, ip
 8002bae:	4240      	negs	r0, r0
 8002bb0:	1809      	adds	r1, r1, r0
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	020b      	lsls	r3, r1, #8
 8002bb6:	d537      	bpl.n	8002c28 <__aeabi_dsub+0x310>
 8002bb8:	2502      	movs	r5, #2
 8002bba:	e77b      	b.n	8002ab4 <__aeabi_dsub+0x19c>
 8002bbc:	003e      	movs	r6, r7
 8002bbe:	4661      	mov	r1, ip
 8002bc0:	4691      	mov	r9, r2
 8002bc2:	0035      	movs	r5, r6
 8002bc4:	e7c5      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002bc6:	465c      	mov	r4, fp
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d000      	beq.n	8002bce <__aeabi_dsub+0x2b6>
 8002bcc:	e0e1      	b.n	8002d92 <__aeabi_dsub+0x47a>
 8002bce:	000b      	movs	r3, r1
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	d0f3      	beq.n	8002bbc <__aeabi_dsub+0x2a4>
 8002bd4:	1c73      	adds	r3, r6, #1
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x2c2>
 8002bd8:	e1ac      	b.n	8002f34 <__aeabi_dsub+0x61c>
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <__aeabi_dsub+0x348>)
 8002bdc:	429f      	cmp	r7, r3
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x2ca>
 8002be0:	e13a      	b.n	8002e58 <__aeabi_dsub+0x540>
 8002be2:	43f3      	mvns	r3, r6
 8002be4:	2b38      	cmp	r3, #56	; 0x38
 8002be6:	dd00      	ble.n	8002bea <__aeabi_dsub+0x2d2>
 8002be8:	e16f      	b.n	8002eca <__aeabi_dsub+0x5b2>
 8002bea:	2b1f      	cmp	r3, #31
 8002bec:	dd00      	ble.n	8002bf0 <__aeabi_dsub+0x2d8>
 8002bee:	e18c      	b.n	8002f0a <__aeabi_dsub+0x5f2>
 8002bf0:	2520      	movs	r5, #32
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1aed      	subs	r5, r5, r3
 8002bf6:	40ae      	lsls	r6, r5
 8002bf8:	46b0      	mov	r8, r6
 8002bfa:	0006      	movs	r6, r0
 8002bfc:	46aa      	mov	sl, r5
 8002bfe:	40de      	lsrs	r6, r3
 8002c00:	4645      	mov	r5, r8
 8002c02:	4335      	orrs	r5, r6
 8002c04:	002e      	movs	r6, r5
 8002c06:	4655      	mov	r5, sl
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	40a8      	lsls	r0, r5
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	1e45      	subs	r5, r0, #1
 8002c10:	41a8      	sbcs	r0, r5
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	469c      	mov	ip, r3
 8002c16:	4330      	orrs	r0, r6
 8002c18:	1a16      	subs	r6, r2, r0
 8002c1a:	42b2      	cmp	r2, r6
 8002c1c:	4192      	sbcs	r2, r2
 8002c1e:	4663      	mov	r3, ip
 8002c20:	4252      	negs	r2, r2
 8002c22:	1a99      	subs	r1, r3, r2
 8002c24:	003d      	movs	r5, r7
 8002c26:	e6b4      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4032      	ands	r2, r6
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d000      	beq.n	8002c32 <__aeabi_dsub+0x31a>
 8002c30:	e6e4      	b.n	80029fc <__aeabi_dsub+0xe4>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c34:	08f6      	lsrs	r6, r6, #3
 8002c36:	074f      	lsls	r7, r1, #29
 8002c38:	4337      	orrs	r7, r6
 8002c3a:	08ca      	lsrs	r2, r1, #3
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x32a>
 8002c40:	e790      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002c42:	003b      	movs	r3, r7
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x332>
 8002c48:	e1a6      	b.n	8002f98 <__aeabi_dsub+0x680>
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	0312      	lsls	r2, r2, #12
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	4d02      	ldr	r5, [pc, #8]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c56:	e789      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c58:	0015      	movs	r5, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	e785      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c60:	000007ff 	.word	0x000007ff
 8002c64:	ff7fffff 	.word	0xff7fffff
 8002c68:	800fffff 	.word	0x800fffff
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d000      	beq.n	8002c72 <__aeabi_dsub+0x35a>
 8002c70:	e0c7      	b.n	8002e02 <__aeabi_dsub+0x4ea>
 8002c72:	1c6b      	adds	r3, r5, #1
 8002c74:	055e      	lsls	r6, r3, #21
 8002c76:	0d76      	lsrs	r6, r6, #21
 8002c78:	2e01      	cmp	r6, #1
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x366>
 8002c7c:	e0f0      	b.n	8002e60 <__aeabi_dsub+0x548>
 8002c7e:	4dc8      	ldr	r5, [pc, #800]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x36e>
 8002c84:	e0b9      	b.n	8002dfa <__aeabi_dsub+0x4e2>
 8002c86:	1885      	adds	r5, r0, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	4285      	cmp	r5, r0
 8002c8c:	4189      	sbcs	r1, r1
 8002c8e:	4462      	add	r2, ip
 8002c90:	4249      	negs	r1, r1
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	2207      	movs	r2, #7
 8002c96:	07ce      	lsls	r6, r1, #31
 8002c98:	086d      	lsrs	r5, r5, #1
 8002c9a:	432e      	orrs	r6, r5
 8002c9c:	0849      	lsrs	r1, r1, #1
 8002c9e:	4032      	ands	r2, r6
 8002ca0:	001d      	movs	r5, r3
 8002ca2:	e6a9      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002ca4:	49bf      	ldr	r1, [pc, #764]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002ca6:	1aed      	subs	r5, r5, r3
 8002ca8:	4011      	ands	r1, r2
 8002caa:	2207      	movs	r2, #7
 8002cac:	4032      	ands	r2, r6
 8002cae:	e6a3      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002cb0:	0032      	movs	r2, r6
 8002cb2:	3828      	subs	r0, #40	; 0x28
 8002cb4:	4082      	lsls	r2, r0
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	e686      	b.n	80029c8 <__aeabi_dsub+0xb0>
 8002cba:	0030      	movs	r0, r6
 8002cbc:	f000 fb08 	bl	80032d0 <__clzsi2>
 8002cc0:	3020      	adds	r0, #32
 8002cc2:	e673      	b.n	80029ac <__aeabi_dsub+0x94>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	4193      	sbcs	r3, r2
 8002ccc:	1ac6      	subs	r6, r0, r3
 8002cce:	42b0      	cmp	r0, r6
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	1a09      	subs	r1, r1, r0
 8002cd6:	e65c      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002cd8:	000e      	movs	r6, r1
 8002cda:	4667      	mov	r7, ip
 8002cdc:	4306      	orrs	r6, r0
 8002cde:	4317      	orrs	r7, r2
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d15e      	bne.n	8002da2 <__aeabi_dsub+0x48a>
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d000      	beq.n	8002cea <__aeabi_dsub+0x3d2>
 8002ce8:	e0f3      	b.n	8002ed2 <__aeabi_dsub+0x5ba>
 8002cea:	2f00      	cmp	r7, #0
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x3d8>
 8002cee:	e11e      	b.n	8002f2e <__aeabi_dsub+0x616>
 8002cf0:	465c      	mov	r4, fp
 8002cf2:	4661      	mov	r1, ip
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	e72c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002cf8:	4fa9      	ldr	r7, [pc, #676]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002cfa:	42be      	cmp	r6, r7
 8002cfc:	d07b      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002cfe:	001e      	movs	r6, r3
 8002d00:	e6f1      	b.n	8002ae6 <__aeabi_dsub+0x1ce>
 8002d02:	0010      	movs	r0, r2
 8002d04:	3d1f      	subs	r5, #31
 8002d06:	40e8      	lsrs	r0, r5
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <__aeabi_dsub+0x3fc>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	409a      	lsls	r2, r3
 8002d12:	4316      	orrs	r6, r2
 8002d14:	1e73      	subs	r3, r6, #1
 8002d16:	419e      	sbcs	r6, r3
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4306      	orrs	r6, r0
 8002d1c:	4032      	ands	r2, r6
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2500      	movs	r5, #0
 8002d22:	e783      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002d24:	1a16      	subs	r6, r2, r0
 8002d26:	4663      	mov	r3, ip
 8002d28:	42b2      	cmp	r2, r6
 8002d2a:	4180      	sbcs	r0, r0
 8002d2c:	1a59      	subs	r1, r3, r1
 8002d2e:	4240      	negs	r0, r0
 8002d30:	1a0b      	subs	r3, r1, r0
 8002d32:	4698      	mov	r8, r3
 8002d34:	465c      	mov	r4, fp
 8002d36:	e632      	b.n	800299e <__aeabi_dsub+0x86>
 8002d38:	2e1f      	cmp	r6, #31
 8002d3a:	dd00      	ble.n	8002d3e <__aeabi_dsub+0x426>
 8002d3c:	e0ab      	b.n	8002e96 <__aeabi_dsub+0x57e>
 8002d3e:	2720      	movs	r7, #32
 8002d40:	1bbb      	subs	r3, r7, r6
 8002d42:	469a      	mov	sl, r3
 8002d44:	4663      	mov	r3, ip
 8002d46:	4657      	mov	r7, sl
 8002d48:	40bb      	lsls	r3, r7
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	464f      	mov	r7, r9
 8002d50:	40f3      	lsrs	r3, r6
 8002d52:	431f      	orrs	r7, r3
 8002d54:	003b      	movs	r3, r7
 8002d56:	4657      	mov	r7, sl
 8002d58:	40ba      	lsls	r2, r7
 8002d5a:	1e57      	subs	r7, r2, #1
 8002d5c:	41ba      	sbcs	r2, r7
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4662      	mov	r2, ip
 8002d62:	40f2      	lsrs	r2, r6
 8002d64:	1889      	adds	r1, r1, r2
 8002d66:	e698      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002d68:	2720      	movs	r7, #32
 8002d6a:	1bbb      	subs	r3, r7, r6
 8002d6c:	469a      	mov	sl, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	4657      	mov	r7, sl
 8002d72:	40bb      	lsls	r3, r7
 8002d74:	4699      	mov	r9, r3
 8002d76:	0013      	movs	r3, r2
 8002d78:	464f      	mov	r7, r9
 8002d7a:	40f3      	lsrs	r3, r6
 8002d7c:	431f      	orrs	r7, r3
 8002d7e:	003b      	movs	r3, r7
 8002d80:	4657      	mov	r7, sl
 8002d82:	40ba      	lsls	r2, r7
 8002d84:	1e57      	subs	r7, r2, #1
 8002d86:	41ba      	sbcs	r2, r7
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40f2      	lsrs	r2, r6
 8002d8e:	1a89      	subs	r1, r1, r2
 8002d90:	e79c      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d05f      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002d98:	2580      	movs	r5, #128	; 0x80
 8002d9a:	042d      	lsls	r5, r5, #16
 8002d9c:	4273      	negs	r3, r6
 8002d9e:	4329      	orrs	r1, r5
 8002da0:	e720      	b.n	8002be4 <__aeabi_dsub+0x2cc>
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d10c      	bne.n	8002dc0 <__aeabi_dsub+0x4a8>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x494>
 8002daa:	e0d0      	b.n	8002f4e <__aeabi_dsub+0x636>
 8002dac:	465c      	mov	r4, fp
 8002dae:	4661      	mov	r1, ip
 8002db0:	4691      	mov	r9, r2
 8002db2:	4d7b      	ldr	r5, [pc, #492]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db4:	e6cd      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002db6:	4f7a      	ldr	r7, [pc, #488]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db8:	42be      	cmp	r6, r7
 8002dba:	d01c      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dbc:	001e      	movs	r6, r3
 8002dbe:	e665      	b.n	8002a8c <__aeabi_dsub+0x174>
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	d018      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dc4:	08c0      	lsrs	r0, r0, #3
 8002dc6:	074e      	lsls	r6, r1, #29
 8002dc8:	4306      	orrs	r6, r0
 8002dca:	2080      	movs	r0, #128	; 0x80
 8002dcc:	08c9      	lsrs	r1, r1, #3
 8002dce:	0300      	lsls	r0, r0, #12
 8002dd0:	4201      	tst	r1, r0
 8002dd2:	d008      	beq.n	8002de6 <__aeabi_dsub+0x4ce>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	08dc      	lsrs	r4, r3, #3
 8002dd8:	4204      	tst	r4, r0
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x4ce>
 8002ddc:	0021      	movs	r1, r4
 8002dde:	46da      	mov	sl, fp
 8002de0:	08d2      	lsrs	r2, r2, #3
 8002de2:	075e      	lsls	r6, r3, #29
 8002de4:	4316      	orrs	r6, r2
 8002de6:	00f3      	lsls	r3, r6, #3
 8002de8:	4699      	mov	r9, r3
 8002dea:	2401      	movs	r4, #1
 8002dec:	4653      	mov	r3, sl
 8002dee:	00c9      	lsls	r1, r1, #3
 8002df0:	0f72      	lsrs	r2, r6, #29
 8002df2:	4311      	orrs	r1, r2
 8002df4:	401c      	ands	r4, r3
 8002df6:	4d6a      	ldr	r5, [pc, #424]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002df8:	e6ab      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002dfa:	001d      	movs	r5, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e6b4      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	d159      	bne.n	8002eba <__aeabi_dsub+0x5a2>
 8002e06:	000b      	movs	r3, r1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x4f6>
 8002e0c:	e6d6      	b.n	8002bbc <__aeabi_dsub+0x2a4>
 8002e0e:	1c73      	adds	r3, r6, #1
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x4fc>
 8002e12:	e0b2      	b.n	8002f7a <__aeabi_dsub+0x662>
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002e16:	429f      	cmp	r7, r3
 8002e18:	d01e      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002e1a:	43f3      	mvns	r3, r6
 8002e1c:	2b38      	cmp	r3, #56	; 0x38
 8002e1e:	dc6f      	bgt.n	8002f00 <__aeabi_dsub+0x5e8>
 8002e20:	2b1f      	cmp	r3, #31
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x50e>
 8002e24:	e097      	b.n	8002f56 <__aeabi_dsub+0x63e>
 8002e26:	2520      	movs	r5, #32
 8002e28:	000e      	movs	r6, r1
 8002e2a:	1aed      	subs	r5, r5, r3
 8002e2c:	40ae      	lsls	r6, r5
 8002e2e:	46b0      	mov	r8, r6
 8002e30:	0006      	movs	r6, r0
 8002e32:	46aa      	mov	sl, r5
 8002e34:	40de      	lsrs	r6, r3
 8002e36:	4645      	mov	r5, r8
 8002e38:	4335      	orrs	r5, r6
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	4655      	mov	r5, sl
 8002e3e:	40a8      	lsls	r0, r5
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	1e45      	subs	r5, r0, #1
 8002e44:	41a8      	sbcs	r0, r5
 8002e46:	448c      	add	ip, r1
 8002e48:	4306      	orrs	r6, r0
 8002e4a:	18b6      	adds	r6, r6, r2
 8002e4c:	4296      	cmp	r6, r2
 8002e4e:	4192      	sbcs	r2, r2
 8002e50:	4251      	negs	r1, r2
 8002e52:	4461      	add	r1, ip
 8002e54:	003d      	movs	r5, r7
 8002e56:	e625      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002e58:	003d      	movs	r5, r7
 8002e5a:	4661      	mov	r1, ip
 8002e5c:	4691      	mov	r9, r2
 8002e5e:	e678      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e60:	000b      	movs	r3, r1
 8002e62:	4303      	orrs	r3, r0
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x552>
 8002e68:	e655      	b.n	8002b16 <__aeabi_dsub+0x1fe>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f5      	beq.n	8002e5a <__aeabi_dsub+0x542>
 8002e6e:	4663      	mov	r3, ip
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x55e>
 8002e74:	e66d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e76:	1886      	adds	r6, r0, r2
 8002e78:	4286      	cmp	r6, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	4461      	add	r1, ip
 8002e7e:	4240      	negs	r0, r0
 8002e80:	1809      	adds	r1, r1, r0
 8002e82:	2200      	movs	r2, #0
 8002e84:	020b      	lsls	r3, r1, #8
 8002e86:	d400      	bmi.n	8002e8a <__aeabi_dsub+0x572>
 8002e88:	e6d0      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	4019      	ands	r1, r3
 8002e90:	e5b2      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002e92:	46b1      	mov	r9, r6
 8002e94:	e65d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e96:	0033      	movs	r3, r6
 8002e98:	4667      	mov	r7, ip
 8002e9a:	3b20      	subs	r3, #32
 8002e9c:	40df      	lsrs	r7, r3
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2e20      	cmp	r6, #32
 8002ea2:	d005      	beq.n	8002eb0 <__aeabi_dsub+0x598>
 8002ea4:	2740      	movs	r7, #64	; 0x40
 8002ea6:	1bbf      	subs	r7, r7, r6
 8002ea8:	4666      	mov	r6, ip
 8002eaa:	40be      	lsls	r6, r7
 8002eac:	4332      	orrs	r2, r6
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4646      	mov	r6, r8
 8002eb2:	1e72      	subs	r2, r6, #1
 8002eb4:	4196      	sbcs	r6, r2
 8002eb6:	4333      	orrs	r3, r6
 8002eb8:	e5ef      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002ebc:	429f      	cmp	r7, r3
 8002ebe:	d0cb      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002ec0:	2580      	movs	r5, #128	; 0x80
 8002ec2:	042d      	lsls	r5, r5, #16
 8002ec4:	4273      	negs	r3, r6
 8002ec6:	4329      	orrs	r1, r5
 8002ec8:	e7a8      	b.n	8002e1c <__aeabi_dsub+0x504>
 8002eca:	4308      	orrs	r0, r1
 8002ecc:	1e41      	subs	r1, r0, #1
 8002ece:	4188      	sbcs	r0, r1
 8002ed0:	e6a2      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x5c0>
 8002ed6:	e63c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a86      	subs	r6, r0, r2
 8002edc:	1acf      	subs	r7, r1, r3
 8002ede:	42b0      	cmp	r0, r6
 8002ee0:	419b      	sbcs	r3, r3
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	1afb      	subs	r3, r7, r3
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	d54e      	bpl.n	8002f8a <__aeabi_dsub+0x672>
 8002eec:	1a16      	subs	r6, r2, r0
 8002eee:	4663      	mov	r3, ip
 8002ef0:	42b2      	cmp	r2, r6
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	1a59      	subs	r1, r3, r1
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	1a89      	subs	r1, r1, r2
 8002efa:	465c      	mov	r4, fp
 8002efc:	2200      	movs	r2, #0
 8002efe:	e57b      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002f00:	4301      	orrs	r1, r0
 8002f02:	000e      	movs	r6, r1
 8002f04:	1e71      	subs	r1, r6, #1
 8002f06:	418e      	sbcs	r6, r1
 8002f08:	e79f      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f0a:	001d      	movs	r5, r3
 8002f0c:	000e      	movs	r6, r1
 8002f0e:	3d20      	subs	r5, #32
 8002f10:	40ee      	lsrs	r6, r5
 8002f12:	46b0      	mov	r8, r6
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d004      	beq.n	8002f22 <__aeabi_dsub+0x60a>
 8002f18:	2540      	movs	r5, #64	; 0x40
 8002f1a:	1aeb      	subs	r3, r5, r3
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	4308      	orrs	r0, r1
 8002f20:	4681      	mov	r9, r0
 8002f22:	4648      	mov	r0, r9
 8002f24:	4643      	mov	r3, r8
 8002f26:	1e41      	subs	r1, r0, #1
 8002f28:	4188      	sbcs	r0, r1
 8002f2a:	4318      	orrs	r0, r3
 8002f2c:	e674      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2400      	movs	r4, #0
 8002f32:	e617      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002f34:	1a16      	subs	r6, r2, r0
 8002f36:	4663      	mov	r3, ip
 8002f38:	42b2      	cmp	r2, r6
 8002f3a:	4192      	sbcs	r2, r2
 8002f3c:	1a59      	subs	r1, r3, r1
 8002f3e:	4252      	negs	r2, r2
 8002f40:	1a89      	subs	r1, r1, r2
 8002f42:	003d      	movs	r5, r7
 8002f44:	e525      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002f46:	4661      	mov	r1, ip
 8002f48:	4691      	mov	r9, r2
 8002f4a:	4d15      	ldr	r5, [pc, #84]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002f4c:	e601      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	2400      	movs	r4, #0
 8002f52:	0312      	lsls	r2, r2, #12
 8002f54:	e679      	b.n	8002c4a <__aeabi_dsub+0x332>
 8002f56:	001d      	movs	r5, r3
 8002f58:	000e      	movs	r6, r1
 8002f5a:	3d20      	subs	r5, #32
 8002f5c:	40ee      	lsrs	r6, r5
 8002f5e:	46b0      	mov	r8, r6
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x656>
 8002f64:	2540      	movs	r5, #64	; 0x40
 8002f66:	1aeb      	subs	r3, r5, r3
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	4308      	orrs	r0, r1
 8002f6c:	4681      	mov	r9, r0
 8002f6e:	464e      	mov	r6, r9
 8002f70:	4643      	mov	r3, r8
 8002f72:	1e71      	subs	r1, r6, #1
 8002f74:	418e      	sbcs	r6, r1
 8002f76:	431e      	orrs	r6, r3
 8002f78:	e767      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f7a:	1886      	adds	r6, r0, r2
 8002f7c:	4296      	cmp	r6, r2
 8002f7e:	419b      	sbcs	r3, r3
 8002f80:	4461      	add	r1, ip
 8002f82:	425b      	negs	r3, r3
 8002f84:	18c9      	adds	r1, r1, r3
 8002f86:	003d      	movs	r5, r7
 8002f88:	e58c      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002f8a:	4647      	mov	r7, r8
 8002f8c:	4337      	orrs	r7, r6
 8002f8e:	d0ce      	beq.n	8002f2e <__aeabi_dsub+0x616>
 8002f90:	2207      	movs	r2, #7
 8002f92:	4641      	mov	r1, r8
 8002f94:	4032      	ands	r2, r6
 8002f96:	e649      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002f98:	2700      	movs	r7, #0
 8002f9a:	003a      	movs	r2, r7
 8002f9c:	e5e6      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff
 8002fa4:	ff7fffff 	.word	0xff7fffff

08002fa8 <__aeabi_dcmpun>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0c      	ldr	r6, [pc, #48]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fac:	030d      	lsls	r5, r1, #12
 8002fae:	031c      	lsls	r4, r3, #12
 8002fb0:	0049      	lsls	r1, r1, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	0b2d      	lsrs	r5, r5, #12
 8002fb6:	0d49      	lsrs	r1, r1, #21
 8002fb8:	0b24      	lsrs	r4, r4, #12
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	42b1      	cmp	r1, r6
 8002fbe:	d008      	beq.n	8002fd2 <__aeabi_dcmpun+0x2a>
 8002fc0:	4906      	ldr	r1, [pc, #24]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d103      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fc8:	4314      	orrs	r4, r2
 8002fca:	0020      	movs	r0, r4
 8002fcc:	1e44      	subs	r4, r0, #1
 8002fce:	41a0      	sbcs	r0, r4
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d1fa      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fda:	e7f1      	b.n	8002fc0 <__aeabi_dcmpun+0x18>
 8002fdc:	000007ff 	.word	0x000007ff

08002fe0 <__aeabi_d2iz>:
 8002fe0:	b530      	push	{r4, r5, lr}
 8002fe2:	4d14      	ldr	r5, [pc, #80]	; (8003034 <__aeabi_d2iz+0x54>)
 8002fe4:	030a      	lsls	r2, r1, #12
 8002fe6:	004b      	lsls	r3, r1, #1
 8002fe8:	0b12      	lsrs	r2, r2, #12
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	0fc9      	lsrs	r1, r1, #31
 8002fee:	2400      	movs	r4, #0
 8002ff0:	42ab      	cmp	r3, r5
 8002ff2:	dd11      	ble.n	8003018 <__aeabi_d2iz+0x38>
 8002ff4:	4c10      	ldr	r4, [pc, #64]	; (8003038 <__aeabi_d2iz+0x58>)
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	dc10      	bgt.n	800301c <__aeabi_d2iz+0x3c>
 8002ffa:	2480      	movs	r4, #128	; 0x80
 8002ffc:	0364      	lsls	r4, r4, #13
 8002ffe:	4322      	orrs	r2, r4
 8003000:	4c0e      	ldr	r4, [pc, #56]	; (800303c <__aeabi_d2iz+0x5c>)
 8003002:	1ae4      	subs	r4, r4, r3
 8003004:	2c1f      	cmp	r4, #31
 8003006:	dd0c      	ble.n	8003022 <__aeabi_d2iz+0x42>
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <__aeabi_d2iz+0x60>)
 800300a:	1ac3      	subs	r3, r0, r3
 800300c:	40da      	lsrs	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	425c      	negs	r4, r3
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_d2iz+0x38>
 8003016:	001c      	movs	r4, r3
 8003018:	0020      	movs	r0, r4
 800301a:	bd30      	pop	{r4, r5, pc}
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <__aeabi_d2iz+0x64>)
 800301e:	18cc      	adds	r4, r1, r3
 8003020:	e7fa      	b.n	8003018 <__aeabi_d2iz+0x38>
 8003022:	4d09      	ldr	r5, [pc, #36]	; (8003048 <__aeabi_d2iz+0x68>)
 8003024:	40e0      	lsrs	r0, r4
 8003026:	46ac      	mov	ip, r5
 8003028:	4463      	add	r3, ip
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	4303      	orrs	r3, r0
 8003030:	e7ee      	b.n	8003010 <__aeabi_d2iz+0x30>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	000003fe 	.word	0x000003fe
 8003038:	0000041d 	.word	0x0000041d
 800303c:	00000433 	.word	0x00000433
 8003040:	00000413 	.word	0x00000413
 8003044:	7fffffff 	.word	0x7fffffff
 8003048:	fffffbed 	.word	0xfffffbed

0800304c <__aeabi_i2d>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2800      	cmp	r0, #0
 8003050:	d02d      	beq.n	80030ae <__aeabi_i2d+0x62>
 8003052:	17c3      	asrs	r3, r0, #31
 8003054:	18c5      	adds	r5, r0, r3
 8003056:	405d      	eors	r5, r3
 8003058:	0fc4      	lsrs	r4, r0, #31
 800305a:	0028      	movs	r0, r5
 800305c:	f000 f938 	bl	80032d0 <__clzsi2>
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <__aeabi_i2d+0x6c>)
 8003062:	1a1b      	subs	r3, r3, r0
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	280a      	cmp	r0, #10
 800306a:	dd15      	ble.n	8003098 <__aeabi_i2d+0x4c>
 800306c:	380b      	subs	r0, #11
 800306e:	4085      	lsls	r5, r0
 8003070:	2200      	movs	r2, #0
 8003072:	032d      	lsls	r5, r5, #12
 8003074:	0b2d      	lsrs	r5, r5, #12
 8003076:	2100      	movs	r1, #0
 8003078:	0010      	movs	r0, r2
 800307a:	032d      	lsls	r5, r5, #12
 800307c:	0d0a      	lsrs	r2, r1, #20
 800307e:	0b2d      	lsrs	r5, r5, #12
 8003080:	0512      	lsls	r2, r2, #20
 8003082:	432a      	orrs	r2, r5
 8003084:	4d0d      	ldr	r5, [pc, #52]	; (80030bc <__aeabi_i2d+0x70>)
 8003086:	051b      	lsls	r3, r3, #20
 8003088:	402a      	ands	r2, r5
 800308a:	4313      	orrs	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	07e4      	lsls	r4, r4, #31
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	4323      	orrs	r3, r4
 8003094:	0019      	movs	r1, r3
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0002      	movs	r2, r0
 800309a:	0029      	movs	r1, r5
 800309c:	3215      	adds	r2, #21
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	210b      	movs	r1, #11
 80030a4:	1a08      	subs	r0, r1, r0
 80030a6:	40c5      	lsrs	r5, r0
 80030a8:	032d      	lsls	r5, r5, #12
 80030aa:	0b2d      	lsrs	r5, r5, #12
 80030ac:	e7e3      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030ae:	2400      	movs	r4, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	2500      	movs	r5, #0
 80030b4:	2200      	movs	r2, #0
 80030b6:	e7de      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030b8:	0000041e 	.word	0x0000041e
 80030bc:	800fffff 	.word	0x800fffff

080030c0 <__aeabi_ui2d>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	1e04      	subs	r4, r0, #0
 80030c4:	d025      	beq.n	8003112 <__aeabi_ui2d+0x52>
 80030c6:	f000 f903 	bl	80032d0 <__clzsi2>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <__aeabi_ui2d+0x5c>)
 80030cc:	1a1b      	subs	r3, r3, r0
 80030ce:	055b      	lsls	r3, r3, #21
 80030d0:	0d5b      	lsrs	r3, r3, #21
 80030d2:	280a      	cmp	r0, #10
 80030d4:	dd12      	ble.n	80030fc <__aeabi_ui2d+0x3c>
 80030d6:	380b      	subs	r0, #11
 80030d8:	4084      	lsls	r4, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	0324      	lsls	r4, r4, #12
 80030de:	0b24      	lsrs	r4, r4, #12
 80030e0:	2100      	movs	r1, #0
 80030e2:	0010      	movs	r0, r2
 80030e4:	0324      	lsls	r4, r4, #12
 80030e6:	0d0a      	lsrs	r2, r1, #20
 80030e8:	0b24      	lsrs	r4, r4, #12
 80030ea:	0512      	lsls	r2, r2, #20
 80030ec:	4322      	orrs	r2, r4
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__aeabi_ui2d+0x60>)
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	4022      	ands	r2, r4
 80030f4:	4313      	orrs	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	0859      	lsrs	r1, r3, #1
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	0002      	movs	r2, r0
 80030fe:	0021      	movs	r1, r4
 8003100:	3215      	adds	r2, #21
 8003102:	4091      	lsls	r1, r2
 8003104:	000a      	movs	r2, r1
 8003106:	210b      	movs	r1, #11
 8003108:	1a08      	subs	r0, r1, r0
 800310a:	40c4      	lsrs	r4, r0
 800310c:	0324      	lsls	r4, r4, #12
 800310e:	0b24      	lsrs	r4, r4, #12
 8003110:	e7e6      	b.n	80030e0 <__aeabi_ui2d+0x20>
 8003112:	2300      	movs	r3, #0
 8003114:	2400      	movs	r4, #0
 8003116:	2200      	movs	r2, #0
 8003118:	e7e2      	b.n	80030e0 <__aeabi_ui2d+0x20>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	0000041e 	.word	0x0000041e
 8003120:	800fffff 	.word	0x800fffff

08003124 <__aeabi_f2d>:
 8003124:	0041      	lsls	r1, r0, #1
 8003126:	0e09      	lsrs	r1, r1, #24
 8003128:	1c4b      	adds	r3, r1, #1
 800312a:	b570      	push	{r4, r5, r6, lr}
 800312c:	b2db      	uxtb	r3, r3
 800312e:	0246      	lsls	r6, r0, #9
 8003130:	0a75      	lsrs	r5, r6, #9
 8003132:	0fc4      	lsrs	r4, r0, #31
 8003134:	2b01      	cmp	r3, #1
 8003136:	dd14      	ble.n	8003162 <__aeabi_f2d+0x3e>
 8003138:	23e0      	movs	r3, #224	; 0xe0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	076d      	lsls	r5, r5, #29
 800313e:	0b36      	lsrs	r6, r6, #12
 8003140:	18cb      	adds	r3, r1, r3
 8003142:	2100      	movs	r1, #0
 8003144:	0d0a      	lsrs	r2, r1, #20
 8003146:	0028      	movs	r0, r5
 8003148:	0512      	lsls	r2, r2, #20
 800314a:	4d1c      	ldr	r5, [pc, #112]	; (80031bc <__aeabi_f2d+0x98>)
 800314c:	4332      	orrs	r2, r6
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	402a      	ands	r2, r5
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	4313      	orrs	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	07e4      	lsls	r4, r4, #31
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	4323      	orrs	r3, r4
 800315e:	0019      	movs	r1, r3
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	2900      	cmp	r1, #0
 8003164:	d114      	bne.n	8003190 <__aeabi_f2d+0x6c>
 8003166:	2d00      	cmp	r5, #0
 8003168:	d01e      	beq.n	80031a8 <__aeabi_f2d+0x84>
 800316a:	0028      	movs	r0, r5
 800316c:	f000 f8b0 	bl	80032d0 <__clzsi2>
 8003170:	280a      	cmp	r0, #10
 8003172:	dc1c      	bgt.n	80031ae <__aeabi_f2d+0x8a>
 8003174:	230b      	movs	r3, #11
 8003176:	002a      	movs	r2, r5
 8003178:	1a1b      	subs	r3, r3, r0
 800317a:	40da      	lsrs	r2, r3
 800317c:	0003      	movs	r3, r0
 800317e:	3315      	adds	r3, #21
 8003180:	409d      	lsls	r5, r3
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <__aeabi_f2d+0x9c>)
 8003184:	0312      	lsls	r2, r2, #12
 8003186:	1a1b      	subs	r3, r3, r0
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	0b16      	lsrs	r6, r2, #12
 800318c:	0d5b      	lsrs	r3, r3, #21
 800318e:	e7d8      	b.n	8003142 <__aeabi_f2d+0x1e>
 8003190:	2d00      	cmp	r5, #0
 8003192:	d006      	beq.n	80031a2 <__aeabi_f2d+0x7e>
 8003194:	0b32      	lsrs	r2, r6, #12
 8003196:	2680      	movs	r6, #128	; 0x80
 8003198:	0336      	lsls	r6, r6, #12
 800319a:	076d      	lsls	r5, r5, #29
 800319c:	4316      	orrs	r6, r2
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a0:	e7cf      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a4:	2600      	movs	r6, #0
 80031a6:	e7cc      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2600      	movs	r6, #0
 80031ac:	e7c9      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031ae:	0003      	movs	r3, r0
 80031b0:	002a      	movs	r2, r5
 80031b2:	3b0b      	subs	r3, #11
 80031b4:	409a      	lsls	r2, r3
 80031b6:	2500      	movs	r5, #0
 80031b8:	e7e3      	b.n	8003182 <__aeabi_f2d+0x5e>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	800fffff 	.word	0x800fffff
 80031c0:	00000389 	.word	0x00000389
 80031c4:	000007ff 	.word	0x000007ff

080031c8 <__aeabi_d2f>:
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	004c      	lsls	r4, r1, #1
 80031cc:	0d64      	lsrs	r4, r4, #21
 80031ce:	030b      	lsls	r3, r1, #12
 80031d0:	1c62      	adds	r2, r4, #1
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	0f46      	lsrs	r6, r0, #29
 80031d6:	0552      	lsls	r2, r2, #21
 80031d8:	0fc9      	lsrs	r1, r1, #31
 80031da:	431e      	orrs	r6, r3
 80031dc:	00c5      	lsls	r5, r0, #3
 80031de:	0d52      	lsrs	r2, r2, #21
 80031e0:	2a01      	cmp	r2, #1
 80031e2:	dd29      	ble.n	8003238 <__aeabi_d2f+0x70>
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <__aeabi_d2f+0xfc>)
 80031e6:	18e7      	adds	r7, r4, r3
 80031e8:	2ffe      	cmp	r7, #254	; 0xfe
 80031ea:	dc1c      	bgt.n	8003226 <__aeabi_d2f+0x5e>
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	dd3b      	ble.n	8003268 <__aeabi_d2f+0xa0>
 80031f0:	0180      	lsls	r0, r0, #6
 80031f2:	1e43      	subs	r3, r0, #1
 80031f4:	4198      	sbcs	r0, r3
 80031f6:	2207      	movs	r2, #7
 80031f8:	00f3      	lsls	r3, r6, #3
 80031fa:	0f6d      	lsrs	r5, r5, #29
 80031fc:	4303      	orrs	r3, r0
 80031fe:	432b      	orrs	r3, r5
 8003200:	401a      	ands	r2, r3
 8003202:	2a00      	cmp	r2, #0
 8003204:	d004      	beq.n	8003210 <__aeabi_d2f+0x48>
 8003206:	220f      	movs	r2, #15
 8003208:	401a      	ands	r2, r3
 800320a:	2a04      	cmp	r2, #4
 800320c:	d000      	beq.n	8003210 <__aeabi_d2f+0x48>
 800320e:	3304      	adds	r3, #4
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	04d2      	lsls	r2, r2, #19
 8003214:	401a      	ands	r2, r3
 8003216:	d024      	beq.n	8003262 <__aeabi_d2f+0x9a>
 8003218:	3701      	adds	r7, #1
 800321a:	b2fa      	uxtb	r2, r7
 800321c:	2fff      	cmp	r7, #255	; 0xff
 800321e:	d002      	beq.n	8003226 <__aeabi_d2f+0x5e>
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	0a58      	lsrs	r0, r3, #9
 8003224:	e001      	b.n	800322a <__aeabi_d2f+0x62>
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	2000      	movs	r0, #0
 800322a:	0240      	lsls	r0, r0, #9
 800322c:	05d2      	lsls	r2, r2, #23
 800322e:	0a40      	lsrs	r0, r0, #9
 8003230:	07c9      	lsls	r1, r1, #31
 8003232:	4310      	orrs	r0, r2
 8003234:	4308      	orrs	r0, r1
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003238:	4335      	orrs	r5, r6
 800323a:	2c00      	cmp	r4, #0
 800323c:	d104      	bne.n	8003248 <__aeabi_d2f+0x80>
 800323e:	2d00      	cmp	r5, #0
 8003240:	d10a      	bne.n	8003258 <__aeabi_d2f+0x90>
 8003242:	2200      	movs	r2, #0
 8003244:	2000      	movs	r0, #0
 8003246:	e7f0      	b.n	800322a <__aeabi_d2f+0x62>
 8003248:	2d00      	cmp	r5, #0
 800324a:	d0ec      	beq.n	8003226 <__aeabi_d2f+0x5e>
 800324c:	2080      	movs	r0, #128	; 0x80
 800324e:	03c0      	lsls	r0, r0, #15
 8003250:	4330      	orrs	r0, r6
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	e7e9      	b.n	800322a <__aeabi_d2f+0x62>
 8003256:	2400      	movs	r4, #0
 8003258:	2300      	movs	r3, #0
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	0a58      	lsrs	r0, r3, #9
 800325e:	b2e2      	uxtb	r2, r4
 8003260:	e7e3      	b.n	800322a <__aeabi_d2f+0x62>
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	003c      	movs	r4, r7
 8003266:	e7f8      	b.n	800325a <__aeabi_d2f+0x92>
 8003268:	003b      	movs	r3, r7
 800326a:	3317      	adds	r3, #23
 800326c:	dbf3      	blt.n	8003256 <__aeabi_d2f+0x8e>
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4333      	orrs	r3, r6
 8003274:	261e      	movs	r6, #30
 8003276:	1bf6      	subs	r6, r6, r7
 8003278:	2e1f      	cmp	r6, #31
 800327a:	dd14      	ble.n	80032a6 <__aeabi_d2f+0xde>
 800327c:	2202      	movs	r2, #2
 800327e:	4252      	negs	r2, r2
 8003280:	1bd7      	subs	r7, r2, r7
 8003282:	001a      	movs	r2, r3
 8003284:	40fa      	lsrs	r2, r7
 8003286:	0017      	movs	r7, r2
 8003288:	2e20      	cmp	r6, #32
 800328a:	d004      	beq.n	8003296 <__aeabi_d2f+0xce>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <__aeabi_d2f+0x100>)
 800328e:	4694      	mov	ip, r2
 8003290:	4464      	add	r4, ip
 8003292:	40a3      	lsls	r3, r4
 8003294:	431d      	orrs	r5, r3
 8003296:	002b      	movs	r3, r5
 8003298:	1e5d      	subs	r5, r3, #1
 800329a:	41ab      	sbcs	r3, r5
 800329c:	2207      	movs	r2, #7
 800329e:	433b      	orrs	r3, r7
 80032a0:	401a      	ands	r2, r3
 80032a2:	2700      	movs	r7, #0
 80032a4:	e7ad      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <__aeabi_d2f+0x104>)
 80032a8:	0028      	movs	r0, r5
 80032aa:	18a2      	adds	r2, r4, r2
 80032ac:	4095      	lsls	r5, r2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	1e6c      	subs	r4, r5, #1
 80032b2:	41a5      	sbcs	r5, r4
 80032b4:	40f0      	lsrs	r0, r6
 80032b6:	2207      	movs	r2, #7
 80032b8:	432b      	orrs	r3, r5
 80032ba:	4303      	orrs	r3, r0
 80032bc:	401a      	ands	r2, r3
 80032be:	2700      	movs	r7, #0
 80032c0:	e79f      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	fffffc80 	.word	0xfffffc80
 80032c8:	fffffca2 	.word	0xfffffca2
 80032cc:	fffffc82 	.word	0xfffffc82

080032d0 <__clzsi2>:
 80032d0:	211c      	movs	r1, #28
 80032d2:	2301      	movs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d301      	bcc.n	80032de <__clzsi2+0xe>
 80032da:	0c00      	lsrs	r0, r0, #16
 80032dc:	3910      	subs	r1, #16
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d301      	bcc.n	80032e8 <__clzsi2+0x18>
 80032e4:	0a00      	lsrs	r0, r0, #8
 80032e6:	3908      	subs	r1, #8
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d301      	bcc.n	80032f2 <__clzsi2+0x22>
 80032ee:	0900      	lsrs	r0, r0, #4
 80032f0:	3904      	subs	r1, #4
 80032f2:	a202      	add	r2, pc, #8	; (adr r2, 80032fc <__clzsi2+0x2c>)
 80032f4:	5c10      	ldrb	r0, [r2, r0]
 80032f6:	1840      	adds	r0, r0, r1
 80032f8:	4770      	bx	lr
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	02020304 	.word	0x02020304
 8003300:	01010101 	.word	0x01010101
	...

0800330c <__clzdi2>:
 800330c:	b510      	push	{r4, lr}
 800330e:	2900      	cmp	r1, #0
 8003310:	d103      	bne.n	800331a <__clzdi2+0xe>
 8003312:	f7ff ffdd 	bl	80032d0 <__clzsi2>
 8003316:	3020      	adds	r0, #32
 8003318:	e002      	b.n	8003320 <__clzdi2+0x14>
 800331a:	1c08      	adds	r0, r1, #0
 800331c:	f7ff ffd8 	bl	80032d0 <__clzsi2>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)

08003324 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8003324:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8003326:	780b      	ldrb	r3, [r1, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <minArr+0x10>
		smallest = arr[0];
 800332c:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
		if ((arr[i] < smallest) && !Q[i]) {
			smallest = arr[i];
 800332e:	2300      	movs	r3, #0
 8003330:	2600      	movs	r6, #0
 8003332:	e002      	b.n	800333a <minArr+0x16>
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8003334:	24ff      	movs	r4, #255	; 0xff
 8003336:	e7fa      	b.n	800332e <minArr+0xa>
	for (int i=0 ; i<N ; i++) {
 8003338:	3301      	adds	r3, #1
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <minArr+0x34>)
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	dd08      	ble.n	8003354 <minArr+0x30>
		if ((arr[i] < smallest) && !Q[i]) {
 8003342:	5cc2      	ldrb	r2, [r0, r3]
 8003344:	42a2      	cmp	r2, r4
 8003346:	d2f7      	bcs.n	8003338 <minArr+0x14>
 8003348:	5ccd      	ldrb	r5, [r1, r3]
 800334a:	2d00      	cmp	r5, #0
 800334c:	d1f4      	bne.n	8003338 <minArr+0x14>
			index = i;
 800334e:	b2de      	uxtb	r6, r3
			smallest = arr[i];
 8003350:	0014      	movs	r4, r2
 8003352:	e7f1      	b.n	8003338 <minArr+0x14>
		}
	}
	
	return index;
}
 8003354:	0030      	movs	r0, r6
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	2000001c 	.word	0x2000001c

0800335c <QnotEmpty>:
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 800335c:	2300      	movs	r3, #0
	char temp = 1;
 800335e:	2201      	movs	r2, #1
	for (int i=0 ; i<N ; i++) {
 8003360:	e002      	b.n	8003368 <QnotEmpty+0xc>
		temp &= Q[i];
 8003362:	5cc1      	ldrb	r1, [r0, r3]
 8003364:	400a      	ands	r2, r1
	for (int i=0 ; i<N ; i++) {
 8003366:	3301      	adds	r3, #1
 8003368:	4902      	ldr	r1, [pc, #8]	; (8003374 <QnotEmpty+0x18>)
 800336a:	7809      	ldrb	r1, [r1, #0]
 800336c:	4299      	cmp	r1, r3
 800336e:	dcf8      	bgt.n	8003362 <QnotEmpty+0x6>
	}	
	
	return temp;
}
 8003370:	0010      	movs	r0, r2
 8003372:	4770      	bx	lr
 8003374:	2000001c 	.word	0x2000001c

08003378 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8003378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337a:	46d6      	mov	lr, sl
 800337c:	464f      	mov	r7, r9
 800337e:	b580      	push	{r7, lr}
 8003380:	b083      	sub	sp, #12
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8003382:	2032      	movs	r0, #50	; 0x32
 8003384:	f010 fbec 	bl	8013b60 <malloc>
 8003388:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 800338a:	d065      	beq.n	8003458 <LoadROsnippets+0xe0>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <LoadROsnippets+0xf0>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d163      	bne.n	800345c <LoadROsnippets+0xe4>
	
	/* Load Snippets */
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8003394:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 8003396:	4c34      	ldr	r4, [pc, #208]	; (8003468 <LoadROsnippets+0xf0>)
 8003398:	e04b      	b.n	8003432 <LoadROsnippets+0xba>
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 800339a:	7822      	ldrb	r2, [r4, #0]
 800339c:	54fa      	strb	r2, [r7, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 800339e:	3301      	adds	r3, #1
 80033a0:	b2db      	uxtb	r3, r3
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80033a2:	3401      	adds	r4, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80033a4:	2b13      	cmp	r3, #19
 80033a6:	d9f8      	bls.n	800339a <LoadROsnippets+0x22>
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80033a8:	46b2      	mov	sl, r6
 80033aa:	00b3      	lsls	r3, r6, #2
 80033ac:	199b      	adds	r3, r3, r6
 80033ae:	009a      	lsls	r2, r3, #2
 80033b0:	4b2e      	ldr	r3, [pc, #184]	; (800346c <LoadROsnippets+0xf4>)
 80033b2:	4691      	mov	r9, r2
 80033b4:	4499      	add	r9, r3
 80033b6:	1c79      	adds	r1, r7, #1
 80033b8:	2214      	movs	r2, #20
 80033ba:	4648      	mov	r0, r9
 80033bc:	f010 fe1d 	bl	8013ffa <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80033c0:	2214      	movs	r2, #20
 80033c2:	2100      	movs	r1, #0
 80033c4:	0038      	movs	r0, r7
 80033c6:	f010 fe21 	bl	801400c <memset>
 80033ca:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80033cc:	e003      	b.n	80033d6 <LoadROsnippets+0x5e>
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
 80033ce:	557a      	strb	r2, [r7, r5]
			++currentAdd; ++i;
 80033d0:	3401      	adds	r4, #1
 80033d2:	3501      	adds	r5, #1
 80033d4:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80033d6:	9401      	str	r4, [sp, #4]
 80033d8:	7822      	ldrb	r2, [r4, #0]
 80033da:	1c93      	adds	r3, r2, #2
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d901      	bls.n	80033e6 <LoadROsnippets+0x6e>
 80033e2:	2d31      	cmp	r5, #49	; 0x31
 80033e4:	d9f3      	bls.n	80033ce <LoadROsnippets+0x56>
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 80033e6:	197b      	adds	r3, r7, r5
 80033e8:	3b01      	subs	r3, #1
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <LoadROsnippets+0x7c>
 80033f0:	3501      	adds	r5, #1
 80033f2:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 80033f4:	0028      	movs	r0, r5
 80033f6:	f010 fbb3 	bl	8013b60 <malloc>
 80033fa:	4653      	mov	r3, sl
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4453      	add	r3, sl
 8003400:	009a      	lsls	r2, r3, #2
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <LoadROsnippets+0xf4>)
 8003404:	189b      	adds	r3, r3, r2
 8003406:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003408:	2800      	cmp	r0, #0
 800340a:	d016      	beq.n	800343a <LoadROsnippets+0xc2>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 800340c:	002a      	movs	r2, r5
 800340e:	0039      	movs	r1, r7
 8003410:	f010 fdf3 	bl	8013ffa <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <LoadROsnippets+0xf8>)
 8003416:	7813      	ldrb	r3, [r2, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 800341c:	002a      	movs	r2, r5
 800341e:	2100      	movs	r1, #0
 8003420:	0038      	movs	r0, r7
 8003422:	f010 fdf3 	bl	801400c <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003426:	9b01      	ldr	r3, [sp, #4]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2bfe      	cmp	r3, #254	; 0xfe
 800342c:	d10f      	bne.n	800344e <LoadROsnippets+0xd6>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 800342e:	3601      	adds	r6, #1
 8003430:	b2f6      	uxtb	r6, r6
 8003432:	2e04      	cmp	r6, #4
 8003434:	d80b      	bhi.n	800344e <LoadROsnippets+0xd6>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	e7b4      	b.n	80033a4 <LoadROsnippets+0x2c>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 800343a:	2214      	movs	r2, #20
 800343c:	2100      	movs	r1, #0
 800343e:	4648      	mov	r0, r9
 8003440:	f010 fde4 	bl	801400c <memset>
			free(snipBuffer);			
 8003444:	0038      	movs	r0, r7
 8003446:	f010 fb95 	bl	8013b74 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800344a:	200e      	movs	r0, #14
 800344c:	e007      	b.n	800345e <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 800344e:	0038      	movs	r0, r7
 8003450:	f010 fb90 	bl	8013b74 <free>
	return BOS_OK;
 8003454:	2000      	movs	r0, #0
 8003456:	e002      	b.n	800345e <LoadROsnippets+0xe6>
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003458:	20fb      	movs	r0, #251	; 0xfb
 800345a:	e000      	b.n	800345e <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800345c:	20ff      	movs	r0, #255	; 0xff
}
 800345e:	b003      	add	sp, #12
 8003460:	bc0c      	pop	{r2, r3}
 8003462:	4691      	mov	r9, r2
 8003464:	469a      	mov	sl, r3
 8003466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003468:	0801dc00 	.word	0x0801dc00
 800346c:	200069f0 	.word	0x200069f0
 8003470:	20000ea7 	.word	0x20000ea7

08003474 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8003474:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003476:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003478:	2600      	movs	r6, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800347a:	e005      	b.n	8003488 <SaveEEportsDir+0x14>
	{
		if (arrayPortsDir[i-1])
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 800347c:	1c60      	adds	r0, r4, #1
 800347e:	f004 faed 	bl	8007a5c <EE_WriteVariable>
 8003482:	e00c      	b.n	800349e <SaveEEportsDir+0x2a>
	for(uint8_t i=1 ; i<=N ; i++)
 8003484:	3401      	adds	r4, #1
 8003486:	b2e4      	uxtb	r4, r4
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <SaveEEportsDir+0x38>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	42a3      	cmp	r3, r4
 800348e:	d30b      	bcc.n	80034a8 <SaveEEportsDir+0x34>
		if (arrayPortsDir[i-1])
 8003490:	0025      	movs	r5, r4
 8003492:	1e63      	subs	r3, r4, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <SaveEEportsDir+0x3c>)
 8003498:	5a99      	ldrh	r1, [r3, r2]
 800349a:	2900      	cmp	r1, #0
 800349c:	d1ee      	bne.n	800347c <SaveEEportsDir+0x8>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800349e:	3502      	adds	r5, #2
 80034a0:	2d1b      	cmp	r5, #27
 80034a2:	ddef      	ble.n	8003484 <SaveEEportsDir+0x10>
			result = BOS_ERR_EEPROM;
 80034a4:	260a      	movs	r6, #10
 80034a6:	e7ed      	b.n	8003484 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 80034a8:	0030      	movs	r0, r6
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	2000001c 	.word	0x2000001c
 80034b0:	20006e08 	.word	0x20006e08

080034b4 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 80034b4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 80034b6:	2204      	movs	r2, #4
 80034b8:	2100      	movs	r1, #0
 80034ba:	480f      	ldr	r0, [pc, #60]	; (80034f8 <ClearEEportsDir+0x44>)
 80034bc:	f010 fda6 	bl	801400c <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 80034c0:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80034c2:	2600      	movs	r6, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80034c4:	e005      	b.n	80034d2 <ClearEEportsDir+0x1e>
	{
		if (arrayPortsDir[i-1])
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80034c6:	1c60      	adds	r0, r4, #1
 80034c8:	f004 fac8 	bl	8007a5c <EE_WriteVariable>
 80034cc:	e00c      	b.n	80034e8 <ClearEEportsDir+0x34>
	for(uint8_t i=1 ; i<=N ; i++)
 80034ce:	3401      	adds	r4, #1
 80034d0:	b2e4      	uxtb	r4, r4
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <ClearEEportsDir+0x48>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	d30b      	bcc.n	80034f2 <ClearEEportsDir+0x3e>
		if (arrayPortsDir[i-1])
 80034da:	0025      	movs	r5, r4
 80034dc:	1e63      	subs	r3, r4, #1
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <ClearEEportsDir+0x44>)
 80034e2:	5a99      	ldrh	r1, [r3, r2]
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d1ee      	bne.n	80034c6 <ClearEEportsDir+0x12>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80034e8:	3502      	adds	r5, #2
 80034ea:	2d1b      	cmp	r5, #27
 80034ec:	ddef      	ble.n	80034ce <ClearEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 80034ee:	260a      	movs	r6, #10
 80034f0:	e7ed      	b.n	80034ce <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 80034f2:	0030      	movs	r0, r6
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20006e08 	.word	0x20006e08
 80034fc:	2000001c 	.word	0x2000001c

08003500 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8003500:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003502:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003504:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8003506:	e001      	b.n	800350c <LoadEEportsDir+0xc>
 8003508:	3401      	adds	r4, #1
 800350a:	b2e4      	uxtb	r4, r4
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <LoadEEportsDir+0x30>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	42a3      	cmp	r3, r4
 8003512:	d30b      	bcc.n	800352c <LoadEEportsDir+0x2c>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003514:	1e61      	subs	r1, r4, #1
 8003516:	0049      	lsls	r1, r1, #1
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <LoadEEportsDir+0x34>)
 800351a:	18c9      	adds	r1, r1, r3
 800351c:	1c60      	adds	r0, r4, #1
 800351e:	f004 f9eb 	bl	80078f8 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003522:	1ca3      	adds	r3, r4, #2
 8003524:	2b1b      	cmp	r3, #27
 8003526:	ddef      	ble.n	8003508 <LoadEEportsDir+0x8>
			result = BOS_ERR_EEPROM;
 8003528:	250a      	movs	r5, #10
 800352a:	e7ed      	b.n	8003508 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 800352c:	0028      	movs	r0, r5
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	2000001c 	.word	0x2000001c
 8003534:	20006e08 	.word	0x20006e08

08003538 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800353a:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 800353c:	2500      	movs	r5, #0
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800353e:	e017      	b.n	8003570 <SaveEEalias+0x38>
	{
		if (moduleAlias[i][0]) 				
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003540:	1e60      	subs	r0, r4, #1
 8003542:	00ba      	lsls	r2, r7, #2
 8003544:	19d2      	adds	r2, r2, r7
 8003546:	0051      	lsls	r1, r2, #1
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <SaveEEalias+0x58>)
 800354a:	185b      	adds	r3, r3, r1
 800354c:	5c19      	ldrb	r1, [r3, r0]
 800354e:	0209      	lsls	r1, r1, #8
 8003550:	5d1b      	ldrb	r3, [r3, r4]
 8003552:	18c9      	adds	r1, r1, r3
 8003554:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8003556:	0028      	movs	r0, r5
 8003558:	301c      	adds	r0, #28
 800355a:	b280      	uxth	r0, r0
 800355c:	f004 fa7e 	bl	8007a5c <EE_WriteVariable>
				add++;			
 8003560:	3501      	adds	r5, #1
 8003562:	b2ad      	uxth	r5, r5
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003564:	3402      	adds	r4, #2
 8003566:	b2e4      	uxtb	r4, r4
 8003568:	2c09      	cmp	r4, #9
 800356a:	d9e9      	bls.n	8003540 <SaveEEalias+0x8>
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800356c:	3601      	adds	r6, #1
 800356e:	b2f6      	uxtb	r6, r6
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <SaveEEalias+0x5c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	42b3      	cmp	r3, r6
 8003576:	d309      	bcc.n	800358c <SaveEEalias+0x54>
		if (moduleAlias[i][0]) 				
 8003578:	0037      	movs	r7, r6
 800357a:	00b3      	lsls	r3, r6, #2
 800357c:	199b      	adds	r3, r3, r6
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <SaveEEalias+0x58>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f1      	beq.n	800356c <SaveEEalias+0x34>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003588:	2401      	movs	r4, #1
 800358a:	e7ed      	b.n	8003568 <SaveEEalias+0x30>
			}
		}			
	}
	
	return result;
}
 800358c:	2000      	movs	r0, #0
 800358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003590:	20000d2c 	.word	0x20000d2c
 8003594:	2000001c 	.word	0x2000001c

08003598 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 800359c:	466b      	mov	r3, sp
 800359e:	2200      	movs	r2, #0
 80035a0:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80035a2:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 80035a4:	2500      	movs	r5, #0
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80035a6:	e023      	b.n	80035f0 <LoadEEalias+0x58>
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80035a8:	466b      	mov	r3, sp
 80035aa:	1d9f      	adds	r7, r3, #6
 80035ac:	0028      	movs	r0, r5
 80035ae:	301c      	adds	r0, #28
 80035b0:	b280      	uxth	r0, r0
 80035b2:	0039      	movs	r1, r7
 80035b4:	f004 f9a0 	bl	80078f8 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 80035b8:	8839      	ldrh	r1, [r7, #0]
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <LoadEEalias+0x6c>)
 80035bc:	00b3      	lsls	r3, r6, #2
 80035be:	199f      	adds	r7, r3, r6
 80035c0:	0078      	lsls	r0, r7, #1
 80035c2:	1810      	adds	r0, r2, r0
 80035c4:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 80035c6:	1e67      	subs	r7, r4, #1
 80035c8:	0a09      	lsrs	r1, r1, #8
 80035ca:	199b      	adds	r3, r3, r6
 80035cc:	0058      	lsls	r0, r3, #1
 80035ce:	1812      	adds	r2, r2, r0
 80035d0:	55d1      	strb	r1, [r2, r7]
			add++;			
 80035d2:	3501      	adds	r5, #1
 80035d4:	b2ad      	uxth	r5, r5
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80035d6:	3402      	adds	r4, #2
 80035d8:	b2e4      	uxtb	r4, r4
 80035da:	2c09      	cmp	r4, #9
 80035dc:	d9e4      	bls.n	80035a8 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 80035de:	00b3      	lsls	r3, r6, #2
 80035e0:	199b      	adds	r3, r3, r6
 80035e2:	005a      	lsls	r2, r3, #1
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <LoadEEalias+0x6c>)
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	2200      	movs	r2, #0
 80035ea:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80035ec:	3601      	adds	r6, #1
 80035ee:	b2f6      	uxtb	r6, r6
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <LoadEEalias+0x70>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	42b3      	cmp	r3, r6
 80035f6:	d301      	bcc.n	80035fc <LoadEEalias+0x64>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80035f8:	2401      	movs	r4, #1
 80035fa:	e7ee      	b.n	80035da <LoadEEalias+0x42>
	}
	
	return result;
}
 80035fc:	2000      	movs	r0, #0
 80035fe:	b003      	add	sp, #12
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	20000d2c 	.word	0x20000d2c
 8003608:	2000001c 	.word	0x2000001c

0800360c <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003610:	466b      	mov	r3, sp
 8003612:	2200      	movs	r2, #0
 8003614:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 8003616:	2400      	movs	r4, #0
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003618:	2500      	movs	r5, #0
	for(i=0 ; i<N ; i++)			// N modules
 800361a:	e00b      	b.n	8003634 <LoadEEgroup+0x28>
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 800361c:	0063      	lsls	r3, r4, #1
 800361e:	491e      	ldr	r1, [pc, #120]	; (8003698 <LoadEEgroup+0x8c>)
 8003620:	18c9      	adds	r1, r1, r3
 8003622:	0028      	movs	r0, r5
 8003624:	30cb      	adds	r0, #203	; 0xcb
 8003626:	b280      	uxth	r0, r0
 8003628:	f004 f966 	bl	80078f8 <EE_ReadVariable>
		add++;
 800362c:	3501      	adds	r5, #1
 800362e:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 8003630:	3401      	adds	r4, #1
 8003632:	b2e4      	uxtb	r4, r4
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <LoadEEgroup+0x90>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	42a3      	cmp	r3, r4
 800363a:	d8ef      	bhi.n	800361c <LoadEEgroup+0x10>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 800363c:	2600      	movs	r6, #0
 800363e:	e023      	b.n	8003688 <LoadEEgroup+0x7c>
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003640:	466b      	mov	r3, sp
 8003642:	1d9f      	adds	r7, r3, #6
 8003644:	0028      	movs	r0, r5
 8003646:	3099      	adds	r0, #153	; 0x99
 8003648:	b280      	uxth	r0, r0
 800364a:	0039      	movs	r1, r7
 800364c:	f004 f954 	bl	80078f8 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003650:	8839      	ldrh	r1, [r7, #0]
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <LoadEEgroup+0x94>)
 8003654:	00b3      	lsls	r3, r6, #2
 8003656:	199f      	adds	r7, r3, r6
 8003658:	0078      	lsls	r0, r7, #1
 800365a:	1810      	adds	r0, r2, r0
 800365c:	5501      	strb	r1, [r0, r4]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 800365e:	1e67      	subs	r7, r4, #1
 8003660:	0a09      	lsrs	r1, r1, #8
 8003662:	199b      	adds	r3, r3, r6
 8003664:	0058      	lsls	r0, r3, #1
 8003666:	1812      	adds	r2, r2, r0
 8003668:	55d1      	strb	r1, [r2, r7]
			add++;			
 800366a:	3501      	adds	r5, #1
 800366c:	b2ad      	uxth	r5, r5
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800366e:	3402      	adds	r4, #2
 8003670:	b2e4      	uxtb	r4, r4
 8003672:	2c09      	cmp	r4, #9
 8003674:	d9e4      	bls.n	8003640 <LoadEEgroup+0x34>
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003676:	00b3      	lsls	r3, r6, #2
 8003678:	199b      	adds	r3, r3, r6
 800367a:	005a      	lsls	r2, r3, #1
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <LoadEEgroup+0x94>)
 800367e:	189b      	adds	r3, r3, r2
 8003680:	2200      	movs	r2, #0
 8003682:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003684:	3601      	adds	r6, #1
 8003686:	b2f6      	uxtb	r6, r6
 8003688:	2e09      	cmp	r6, #9
 800368a:	d801      	bhi.n	8003690 <LoadEEgroup+0x84>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800368c:	2401      	movs	r4, #1
 800368e:	e7f0      	b.n	8003672 <LoadEEgroup+0x66>
	}
	
	return result;
}
 8003690:	2000      	movs	r0, #0
 8003692:	b003      	add	sp, #12
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20000cb4 	.word	0x20000cb4
 800369c:	2000001c 	.word	0x2000001c
 80036a0:	20000c50 	.word	0x20000c50

080036a4 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 80036a8:	210e      	movs	r1, #14
 80036aa:	4469      	add	r1, sp
 80036ac:	2300      	movs	r3, #0
 80036ae:	800b      	strh	r3, [r1, #0]
 80036b0:	aa03      	add	r2, sp, #12
 80036b2:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 80036b4:	20e4      	movs	r0, #228	; 0xe4
 80036b6:	f004 f91f 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d000      	beq.n	80036c0 <LoadEEstreams+0x1c>
 80036be:	e075      	b.n	80037ac <LoadEEstreams+0x108>
		direction = (uint8_t) temp1;
 80036c0:	230e      	movs	r3, #14
 80036c2:	446b      	add	r3, sp
 80036c4:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 80036c6:	210e      	movs	r1, #14
 80036c8:	4469      	add	r1, sp
 80036ca:	20e5      	movs	r0, #229	; 0xe5
 80036cc:	f004 f914 	bl	80078f8 <EE_ReadVariable>
 80036d0:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 80036d2:	a903      	add	r1, sp, #12
 80036d4:	20e6      	movs	r0, #230	; 0xe6
 80036d6:	f004 f90f 	bl	80078f8 <EE_ReadVariable>
	if (!status1 && !status2) {
 80036da:	4304      	orrs	r4, r0
 80036dc:	b2a4      	uxth	r4, r4
 80036de:	2c00      	cmp	r4, #0
 80036e0:	d000      	beq.n	80036e4 <LoadEEstreams+0x40>
 80036e2:	e065      	b.n	80037b0 <LoadEEstreams+0x10c>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 80036e4:	230e      	movs	r3, #14
 80036e6:	446b      	add	r3, sp
 80036e8:	881d      	ldrh	r5, [r3, #0]
 80036ea:	042d      	lsls	r5, r5, #16
 80036ec:	ab03      	add	r3, sp, #12
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 80036f2:	210e      	movs	r1, #14
 80036f4:	4469      	add	r1, sp
 80036f6:	20e7      	movs	r0, #231	; 0xe7
 80036f8:	f004 f8fe 	bl	80078f8 <EE_ReadVariable>
 80036fc:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 80036fe:	a903      	add	r1, sp, #12
 8003700:	20e8      	movs	r0, #232	; 0xe8
 8003702:	f004 f8f9 	bl	80078f8 <EE_ReadVariable>
	if (!status1 && !status2) {
 8003706:	4304      	orrs	r4, r0
 8003708:	b2a4      	uxth	r4, r4
 800370a:	2c00      	cmp	r4, #0
 800370c:	d152      	bne.n	80037b4 <LoadEEstreams+0x110>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 800370e:	230e      	movs	r3, #14
 8003710:	446b      	add	r3, sp
 8003712:	881c      	ldrh	r4, [r3, #0]
 8003714:	0424      	lsls	r4, r4, #16
 8003716:	ab03      	add	r3, sp, #12
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 800371c:	210e      	movs	r1, #14
 800371e:	4469      	add	r1, sp
 8003720:	20e9      	movs	r0, #233	; 0xe9
 8003722:	f004 f8e9 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 8003726:	2800      	cmp	r0, #0
 8003728:	d107      	bne.n	800373a <LoadEEstreams+0x96>
		src1 = (uint8_t) (temp1 >> 8);
 800372a:	230e      	movs	r3, #14
 800372c:	446b      	add	r3, sp
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	0a19      	lsrs	r1, r3, #8
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <LoadEEstreams+0x140>)
 8003734:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <LoadEEstreams+0x144>)
 8003738:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 800373a:	210e      	movs	r1, #14
 800373c:	4469      	add	r1, sp
 800373e:	20ea      	movs	r0, #234	; 0xea
 8003740:	f004 f8da 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 8003744:	2800      	cmp	r0, #0
 8003746:	d107      	bne.n	8003758 <LoadEEstreams+0xb4>
		src2 = (uint8_t) (temp1 >> 8);
 8003748:	230e      	movs	r3, #14
 800374a:	446b      	add	r3, sp
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	0a19      	lsrs	r1, r3, #8
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <LoadEEstreams+0x148>)
 8003752:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <LoadEEstreams+0x14c>)
 8003756:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8003758:	210e      	movs	r1, #14
 800375a:	4469      	add	r1, sp
 800375c:	20eb      	movs	r0, #235	; 0xeb
 800375e:	f004 f8cb 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 8003762:	2800      	cmp	r0, #0
 8003764:	d107      	bne.n	8003776 <LoadEEstreams+0xd2>
		src3 = (uint8_t) (temp1 >> 8);
 8003766:	230e      	movs	r3, #14
 8003768:	446b      	add	r3, sp
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	0a19      	lsrs	r1, r3, #8
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <LoadEEstreams+0x150>)
 8003770:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <LoadEEstreams+0x154>)
 8003774:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <LoadEEstreams+0x140>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <LoadEEstreams+0xe2>
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <LoadEEstreams+0x144>)
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	2a00      	cmp	r2, #0
 8003784:	d118      	bne.n	80037b8 <LoadEEstreams+0x114>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <LoadEEstreams+0x148>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <LoadEEstreams+0xf2>
 800378e:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <LoadEEstreams+0x14c>)
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	2a00      	cmp	r2, #0
 8003794:	d117      	bne.n	80037c6 <LoadEEstreams+0x122>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <LoadEEstreams+0x150>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <LoadEEstreams+0x102>
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <LoadEEstreams+0x154>)
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d116      	bne.n	80037d4 <LoadEEstreams+0x130>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 80037a6:	2000      	movs	r0, #0
 80037a8:	b004      	add	sp, #16
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80037ac:	2600      	movs	r6, #0
 80037ae:	e78a      	b.n	80036c6 <LoadEEstreams+0x22>
 80037b0:	2500      	movs	r5, #0
 80037b2:	e79e      	b.n	80036f2 <LoadEEstreams+0x4e>
 80037b4:	2400      	movs	r4, #0
 80037b6:	e7b1      	b.n	800371c <LoadEEstreams+0x78>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 80037b8:	9200      	str	r2, [sp, #0]
 80037ba:	0022      	movs	r2, r4
 80037bc:	0029      	movs	r1, r5
 80037be:	0030      	movs	r0, r6
 80037c0:	f005 fa5a 	bl	8008c78 <SetupDMAStreams>
 80037c4:	e7df      	b.n	8003786 <LoadEEstreams+0xe2>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 80037c6:	9200      	str	r2, [sp, #0]
 80037c8:	0022      	movs	r2, r4
 80037ca:	0029      	movs	r1, r5
 80037cc:	0030      	movs	r0, r6
 80037ce:	f005 fa53 	bl	8008c78 <SetupDMAStreams>
 80037d2:	e7e0      	b.n	8003796 <LoadEEstreams+0xf2>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 80037d4:	9200      	str	r2, [sp, #0]
 80037d6:	0022      	movs	r2, r4
 80037d8:	0029      	movs	r1, r5
 80037da:	0030      	movs	r0, r6
 80037dc:	f005 fa4c 	bl	8008c78 <SetupDMAStreams>
 80037e0:	e7e1      	b.n	80037a6 <LoadEEstreams+0x102>
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000dd2 	.word	0x20000dd2
 80037e8:	20000c4d 	.word	0x20000c4d
 80037ec:	20000dd3 	.word	0x20000dd3
 80037f0:	20000c4e 	.word	0x20000c4e
 80037f4:	20000dd4 	.word	0x20000dd4
 80037f8:	20000c4f 	.word	0x20000c4f

080037fc <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	46de      	mov	lr, fp
 8003800:	4657      	mov	r7, sl
 8003802:	464e      	mov	r6, r9
 8003804:	4645      	mov	r5, r8
 8003806:	b5e0      	push	{r5, r6, r7, lr}
 8003808:	000f      	movs	r7, r1
 800380a:	0016      	movs	r6, r2
 800380c:	4699      	mov	r9, r3
 800380e:	ab0a      	add	r3, sp, #40	; 0x28
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	469b      	mov	fp, r3
 8003814:	ab0b      	add	r3, sp, #44	; 0x2c
 8003816:	781d      	ldrb	r5, [r3, #0]
 8003818:	ab0c      	add	r3, sp, #48	; 0x30
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	469a      	mov	sl, r3
 800381e:	ab0d      	add	r3, sp, #52	; 0x34
 8003820:	781c      	ldrb	r4, [r3, #0]
 8003822:	ab0e      	add	r3, sp, #56	; 0x38
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003828:	b281      	uxth	r1, r0
 800382a:	20e4      	movs	r0, #228	; 0xe4
 800382c:	f004 f916 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8003830:	0a39      	lsrs	r1, r7, #8
 8003832:	b289      	uxth	r1, r1
 8003834:	20e5      	movs	r0, #229	; 0xe5
 8003836:	f004 f911 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 800383a:	b2b9      	uxth	r1, r7
 800383c:	20e6      	movs	r0, #230	; 0xe6
 800383e:	f004 f90d 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8003842:	0a31      	lsrs	r1, r6, #8
 8003844:	b289      	uxth	r1, r1
 8003846:	20e7      	movs	r0, #231	; 0xe7
 8003848:	f004 f908 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 800384c:	b2b1      	uxth	r1, r6
 800384e:	20e8      	movs	r0, #232	; 0xe8
 8003850:	f004 f904 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8003854:	464b      	mov	r3, r9
 8003856:	0219      	lsls	r1, r3, #8
 8003858:	4459      	add	r1, fp
 800385a:	b289      	uxth	r1, r1
 800385c:	20e9      	movs	r0, #233	; 0xe9
 800385e:	f004 f8fd 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8003862:	022d      	lsls	r5, r5, #8
 8003864:	4455      	add	r5, sl
 8003866:	b2a9      	uxth	r1, r5
 8003868:	20ea      	movs	r0, #234	; 0xea
 800386a:	f004 f8f7 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 800386e:	0224      	lsls	r4, r4, #8
 8003870:	4444      	add	r4, r8
 8003872:	b2a1      	uxth	r1, r4
 8003874:	20eb      	movs	r0, #235	; 0xeb
 8003876:	f004 f8f1 	bl	8007a5c <EE_WriteVariable>
	
	return result;
}
 800387a:	2000      	movs	r0, #0
 800387c:	bc3c      	pop	{r2, r3, r4, r5}
 800387e:	4690      	mov	r8, r2
 8003880:	4699      	mov	r9, r3
 8003882:	46a2      	mov	sl, r4
 8003884:	46ab      	mov	fp, r5
 8003886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003888 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003888:	b510      	push	{r4, lr}
 800388a:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 800388c:	208a      	movs	r0, #138	; 0x8a
 800388e:	466b      	mov	r3, sp
 8003890:	1d99      	adds	r1, r3, #6
 8003892:	0040      	lsls	r0, r0, #1
 8003894:	f004 f830 	bl	80078f8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003898:	2800      	cmp	r0, #0
 800389a:	d000      	beq.n	800389e <LoadEEparams+0x16>
 800389c:	e064      	b.n	8003968 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 800389e:	466b      	mov	r3, sp
 80038a0:	3306      	adds	r3, #6
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4a49      	ldr	r2, [pc, #292]	; (80039cc <LoadEEparams+0x144>)
 80038a6:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 80038ac:	2016      	movs	r0, #22
 80038ae:	466b      	mov	r3, sp
 80038b0:	1d99      	adds	r1, r3, #6
 80038b2:	30ff      	adds	r0, #255	; 0xff
 80038b4:	f004 f820 	bl	80078f8 <EE_ReadVariable>
	if (!status1) 
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d15c      	bne.n	8003976 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 80038bc:	466b      	mov	r3, sp
 80038be:	88da      	ldrh	r2, [r3, #6]
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <LoadEEparams+0x144>)
 80038c2:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 80038c4:	208b      	movs	r0, #139	; 0x8b
 80038c6:	466b      	mov	r3, sp
 80038c8:	1d99      	adds	r1, r3, #6
 80038ca:	0040      	lsls	r0, r0, #1
 80038cc:	f004 f814 	bl	80078f8 <EE_ReadVariable>
	if (!status1) 
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d155      	bne.n	8003980 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 80038d4:	466b      	mov	r3, sp
 80038d6:	88da      	ldrh	r2, [r3, #6]
 80038d8:	4b3c      	ldr	r3, [pc, #240]	; (80039cc <LoadEEparams+0x144>)
 80038da:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 80038dc:	2018      	movs	r0, #24
 80038de:	466b      	mov	r3, sp
 80038e0:	1d99      	adds	r1, r3, #6
 80038e2:	30ff      	adds	r0, #255	; 0xff
 80038e4:	f004 f808 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d14e      	bne.n	800398a <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 80038ec:	466b      	mov	r3, sp
 80038ee:	3306      	adds	r3, #6
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	4a36      	ldr	r2, [pc, #216]	; (80039cc <LoadEEparams+0x144>)
 80038f4:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 80038fa:	208c      	movs	r0, #140	; 0x8c
 80038fc:	466b      	mov	r3, sp
 80038fe:	1d99      	adds	r1, r3, #6
 8003900:	0040      	lsls	r0, r0, #1
 8003902:	f003 fff9 	bl	80078f8 <EE_ReadVariable>
 8003906:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003908:	201a      	movs	r0, #26
 800390a:	a901      	add	r1, sp, #4
 800390c:	30ff      	adds	r0, #255	; 0xff
 800390e:	f003 fff3 	bl	80078f8 <EE_ReadVariable>
	if (!status1 && !status2) 
 8003912:	4304      	orrs	r4, r0
 8003914:	b2a4      	uxth	r4, r4
 8003916:	2c00      	cmp	r4, #0
 8003918:	d13e      	bne.n	8003998 <LoadEEparams+0x110>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 800391a:	466b      	mov	r3, sp
 800391c:	3306      	adds	r3, #6
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	aa01      	add	r2, sp, #4
 8003922:	8812      	ldrh	r2, [r2, #0]
 8003924:	0412      	lsls	r2, r2, #16
 8003926:	4313      	orrs	r3, r2
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <LoadEEparams+0x144>)
 800392a:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 800392c:	208d      	movs	r0, #141	; 0x8d
 800392e:	466b      	mov	r3, sp
 8003930:	1d99      	adds	r1, r3, #6
 8003932:	0040      	lsls	r0, r0, #1
 8003934:	f003 ffe0 	bl	80078f8 <EE_ReadVariable>
	if (!status1) {
 8003938:	2800      	cmp	r0, #0
 800393a:	d13b      	bne.n	80039b4 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 800393c:	466b      	mov	r3, sp
 800393e:	3306      	adds	r3, #6
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	4a22      	ldr	r2, [pc, #136]	; (80039cc <LoadEEparams+0x144>)
 8003944:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 800394a:	201c      	movs	r0, #28
 800394c:	466b      	mov	r3, sp
 800394e:	1d99      	adds	r1, r3, #6
 8003950:	30ff      	adds	r0, #255	; 0xff
 8003952:	f003 ffd1 	bl	80078f8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003956:	2800      	cmp	r0, #0
 8003958:	d032      	beq.n	80039c0 <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t)temp1;
	/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <LoadEEparams+0x148>)
 800395c:	7eda      	ldrb	r2, [r3, #27]
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <LoadEEparams+0x144>)
 8003960:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003962:	2000      	movs	r0, #0
 8003964:	b002      	add	sp, #8
 8003966:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <LoadEEparams+0x148>)
 800396a:	7991      	ldrb	r1, [r2, #6]
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <LoadEEparams+0x144>)
 800396e:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8003970:	79d2      	ldrb	r2, [r2, #7]
 8003972:	71da      	strb	r2, [r3, #7]
 8003974:	e79a      	b.n	80038ac <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <LoadEEparams+0x148>)
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <LoadEEparams+0x144>)
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	e7a1      	b.n	80038c4 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <LoadEEparams+0x148>)
 8003982:	885a      	ldrh	r2, [r3, #2]
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <LoadEEparams+0x144>)
 8003986:	805a      	strh	r2, [r3, #2]
 8003988:	e7a8      	b.n	80038dc <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <LoadEEparams+0x148>)
 800398c:	7911      	ldrb	r1, [r2, #4]
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <LoadEEparams+0x144>)
 8003990:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003992:	7952      	ldrb	r2, [r2, #5]
 8003994:	715a      	strb	r2, [r3, #5]
 8003996:	e7b0      	b.n	80038fa <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <LoadEEparams+0x14c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <LoadEEparams+0x144>)
 80039a2:	22e1      	movs	r2, #225	; 0xe1
 80039a4:	0252      	lsls	r2, r2, #9
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	e7c0      	b.n	800392c <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <LoadEEparams+0x148>)
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <LoadEEparams+0x144>)
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	e7bb      	b.n	800392c <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <LoadEEparams+0x144>)
 80039b6:	2218      	movs	r2, #24
 80039b8:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 80039ba:	2200      	movs	r2, #0
 80039bc:	731a      	strb	r2, [r3, #12]
 80039be:	e7c4      	b.n	800394a <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 80039c0:	466b      	mov	r3, sp
 80039c2:	799a      	ldrb	r2, [r3, #6]
 80039c4:	4b01      	ldr	r3, [pc, #4]	; (80039cc <LoadEEparams+0x144>)
 80039c6:	76da      	strb	r2, [r3, #27]
 80039c8:	e7cb      	b.n	8003962 <LoadEEparams+0xda>
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	200069d4 	.word	0x200069d4
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000af6 	.word	0x20000af6

080039d8 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 80039d8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 80039da:	4c1a      	ldr	r4, [pc, #104]	; (8003a44 <SaveEEparams+0x6c>)
 80039dc:	79e3      	ldrb	r3, [r4, #7]
 80039de:	015b      	lsls	r3, r3, #5
 80039e0:	79a1      	ldrb	r1, [r4, #6]
 80039e2:	4319      	orrs	r1, r3
 80039e4:	208a      	movs	r0, #138	; 0x8a
 80039e6:	0040      	lsls	r0, r0, #1
 80039e8:	f004 f838 	bl	8007a5c <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80039ec:	8821      	ldrh	r1, [r4, #0]
 80039ee:	2016      	movs	r0, #22
 80039f0:	30ff      	adds	r0, #255	; 0xff
 80039f2:	f004 f833 	bl	8007a5c <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 80039f6:	8861      	ldrh	r1, [r4, #2]
 80039f8:	208b      	movs	r0, #139	; 0x8b
 80039fa:	0040      	lsls	r0, r0, #1
 80039fc:	f004 f82e 	bl	8007a5c <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8003a00:	7963      	ldrb	r3, [r4, #5]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	7b21      	ldrb	r1, [r4, #12]
 8003a06:	4319      	orrs	r1, r3
 8003a08:	2018      	movs	r0, #24
 8003a0a:	30ff      	adds	r0, #255	; 0xff
 8003a0c:	f004 f826 	bl	8007a5c <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8003a10:	8921      	ldrh	r1, [r4, #8]
 8003a12:	208c      	movs	r0, #140	; 0x8c
 8003a14:	0040      	lsls	r0, r0, #1
 8003a16:	f004 f821 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8003a1a:	8961      	ldrh	r1, [r4, #10]
 8003a1c:	201a      	movs	r0, #26
 8003a1e:	30ff      	adds	r0, #255	; 0xff
 8003a20:	f004 f81c 	bl	8007a5c <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8003a24:	7b63      	ldrb	r3, [r4, #13]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	7921      	ldrb	r1, [r4, #4]
 8003a2a:	4319      	orrs	r1, r3
 8003a2c:	208d      	movs	r0, #141	; 0x8d
 8003a2e:	0040      	lsls	r0, r0, #1
 8003a30:	f004 f814 	bl	8007a5c <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8003a34:	7ee1      	ldrb	r1, [r4, #27]
 8003a36:	201c      	movs	r0, #28
 8003a38:	30ff      	adds	r0, #255	; 0xff
 8003a3a:	f004 f80f 	bl	8007a5c <EE_WriteVariable>
	
	return result;
}
 8003a3e:	2000      	movs	r0, #0
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	200069d4 	.word	0x200069d4

08003a48 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003a4c:	231e      	movs	r3, #30
 8003a4e:	446b      	add	r3, sp
 8003a50:	2200      	movs	r2, #0
 8003a52:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003a54:	2400      	movs	r4, #0
 8003a56:	e001      	b.n	8003a5c <LoadEEbuttons+0x14>
 8003a58:	3401      	adds	r4, #1
 8003a5a:	b2e4      	uxtb	r4, r4
 8003a5c:	2c05      	cmp	r4, #5
 8003a5e:	d854      	bhi.n	8003b0a <LoadEEbuttons+0xc2>
	{
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003a60:	0025      	movs	r5, r4
 8003a62:	353b      	adds	r5, #59	; 0x3b
 8003a64:	00ad      	lsls	r5, r5, #2
 8003a66:	b2ad      	uxth	r5, r5
 8003a68:	211e      	movs	r1, #30
 8003a6a:	4469      	add	r1, sp
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	f003 ff43 	bl	80078f8 <EE_ReadVariable>
		
		if(!status1)																												// This variable exists
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d1f0      	bne.n	8003a58 <LoadEEbuttons+0x10>
		{
			temp8 = (uint8_t)(temp16 >> 8);
 8003a76:	231e      	movs	r3, #30
 8003a78:	446b      	add	r3, sp
 8003a7a:	8819      	ldrh	r1, [r3, #0]
 8003a7c:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003a7e:	0918      	lsrs	r0, r3, #4
 8003a80:	1c62      	adds	r2, r4, #1
 8003a82:	4290      	cmp	r0, r2
 8003a84:	d1e8      	bne.n	8003a58 <LoadEEbuttons+0x10>
 8003a86:	200f      	movs	r0, #15
 8003a88:	4003      	ands	r3, r0
 8003a8a:	d0e5      	beq.n	8003a58 <LoadEEbuttons+0x10>
			{
				button[i+1].type = temp8 & 0x0F;
 8003a8c:	00d7      	lsls	r7, r2, #3
 8003a8e:	18ba      	adds	r2, r7, r2
 8003a90:	4f1f      	ldr	r7, [pc, #124]	; (8003b10 <LoadEEbuttons+0xc8>)
 8003a92:	18bf      	adds	r7, r7, r2
 8003a94:	707b      	strb	r3, [r7, #1]
				button[i+1].events = (uint8_t)temp16;
 8003a96:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003a98:	261e      	movs	r6, #30
 8003a9a:	446e      	add	r6, sp
 8003a9c:	1c68      	adds	r0, r5, #1
 8003a9e:	b280      	uxth	r0, r0
 8003aa0:	0031      	movs	r1, r6
 8003aa2:	f003 ff29 	bl	80078f8 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8003aa6:	8833      	ldrh	r3, [r6, #0]
 8003aa8:	0a1a      	lsrs	r2, r3, #8
 8003aaa:	70ba      	strb	r2, [r7, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8003aac:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8003aae:	1ca8      	adds	r0, r5, #2
 8003ab0:	b280      	uxth	r0, r0
 8003ab2:	0031      	movs	r1, r6
 8003ab4:	f003 ff20 	bl	80078f8 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8003ab8:	8833      	ldrh	r3, [r6, #0]
 8003aba:	0a1a      	lsrs	r2, r3, #8
 8003abc:	70fa      	strb	r2, [r7, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8003abe:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8003ac0:	3503      	adds	r5, #3
 8003ac2:	b2a8      	uxth	r0, r5
 8003ac4:	0031      	movs	r1, r6
 8003ac6:	f003 ff17 	bl	80078f8 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8003aca:	8833      	ldrh	r3, [r6, #0]
 8003acc:	0a1a      	lsrs	r2, r3, #8
 8003ace:	713a      	strb	r2, [r7, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8003ad0:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
 8003ad2:	1c65      	adds	r5, r4, #1
 8003ad4:	b2ed      	uxtb	r5, r5
 8003ad6:	7878      	ldrb	r0, [r7, #1]
 8003ad8:	0029      	movs	r1, r5
 8003ada:	f004 fe25 	bl	8008728 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003ade:	7a39      	ldrb	r1, [r7, #8]
 8003ae0:	084a      	lsrs	r2, r1, #1
 8003ae2:	78bb      	ldrb	r3, [r7, #2]
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	4002      	ands	r2, r0
 8003ae8:	4001      	ands	r1, r0
 8003aea:	2000      	movs	r0, #0
 8003aec:	9005      	str	r0, [sp, #20]
 8003aee:	79f8      	ldrb	r0, [r7, #7]
 8003af0:	9004      	str	r0, [sp, #16]
 8003af2:	79b8      	ldrb	r0, [r7, #6]
 8003af4:	9003      	str	r0, [sp, #12]
 8003af6:	7978      	ldrb	r0, [r7, #5]
 8003af8:	9002      	str	r0, [sp, #8]
 8003afa:	7938      	ldrb	r0, [r7, #4]
 8003afc:	9001      	str	r0, [sp, #4]
 8003afe:	78f8      	ldrb	r0, [r7, #3]
 8003b00:	9000      	str	r0, [sp, #0]
 8003b02:	0028      	movs	r0, r5
 8003b04:	f004 ff28 	bl	8008958 <SetButtonEvents>
 8003b08:	e7a6      	b.n	8003a58 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	b009      	add	sp, #36	; 0x24
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b10:	20001140 	.word	0x20001140

08003b14 <LoadEEvars>:
{
 8003b14:	b510      	push	{r4, lr}
	LoadEEportsDir();
 8003b16:	f7ff fcf3 	bl	8003500 <LoadEEportsDir>
	LoadEEalias();
 8003b1a:	f7ff fd3d 	bl	8003598 <LoadEEalias>
	LoadEEgroup();
 8003b1e:	f7ff fd75 	bl	800360c <LoadEEgroup>
	LoadEEstreams();
 8003b22:	f7ff fdbf 	bl	80036a4 <LoadEEstreams>
	LoadEEparams();	
 8003b26:	f7ff feaf 	bl	8003888 <LoadEEparams>
	LoadEEbuttons();	
 8003b2a:	f7ff ff8d 	bl	8003a48 <LoadEEbuttons>
	LoadROsnippets();
 8003b2e:	f7ff fc23 	bl	8003378 <LoadROsnippets>
}
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003b38:	2512      	movs	r5, #18
 8003b3a:	446d      	add	r5, sp
 8003b3c:	ab04      	add	r3, sp, #16
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	ab07      	add	r3, sp, #28
 8003b42:	002a      	movs	r2, r5
 8003b44:	a908      	add	r1, sp, #32
 8003b46:	2001      	movs	r0, #1
 8003b48:	f00a fb3e 	bl	800e1c8 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003b4c:	ac03      	add	r4, sp, #12
 8003b4e:	9400      	str	r4, [sp, #0]
 8003b50:	ab05      	add	r3, sp, #20
 8003b52:	220e      	movs	r2, #14
 8003b54:	446a      	add	r2, sp
 8003b56:	a906      	add	r1, sp, #24
 8003b58:	2002      	movs	r0, #2
 8003b5a:	f00a fb35 	bl	800e1c8 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2600      	movs	r6, #0
 8003b64:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003b66:	882b      	ldrh	r3, [r5, #0]
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003b6a:	a909      	add	r1, sp, #36	; 0x24
 8003b6c:	9808      	ldr	r0, [sp, #32]
 8003b6e:	f00e f9bb 	bl	8011ee8 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b72:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003b74:	2302      	movs	r3, #2
 8003b76:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003b78:	8823      	ldrh	r3, [r4, #0]
 8003b7a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003b7c:	a909      	add	r1, sp, #36	; 0x24
 8003b7e:	9805      	ldr	r0, [sp, #20]
 8003b80:	f00e f9b2 	bl	8011ee8 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003b84:	8829      	ldrh	r1, [r5, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	9808      	ldr	r0, [sp, #32]
 8003b8a:	f00e fa7c 	bl	8012086 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003b8e:	2005      	movs	r0, #5
 8003b90:	f00a feb4 	bl	800e8fc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003b94:	8821      	ldrh	r1, [r4, #0]
 8003b96:	9805      	ldr	r0, [sp, #20]
 8003b98:	f00e fa6e 	bl	8012078 <HAL_GPIO_ReadPin>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d002      	beq.n	8003ba6 <IsLowerCLIbaud+0x72>
		{
			return 1;
		}
	}

	return 0;
 8003ba0:	2000      	movs	r0, #0
}
 8003ba2:	b00e      	add	sp, #56	; 0x38
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003ba6:	2312      	movs	r3, #18
 8003ba8:	446b      	add	r3, sp
 8003baa:	8819      	ldrh	r1, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	9808      	ldr	r0, [sp, #32]
 8003bb0:	f00e fa69 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003bb4:	2005      	movs	r0, #5
 8003bb6:	f00a fea1 	bl	800e8fc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003bba:	ab03      	add	r3, sp, #12
 8003bbc:	8819      	ldrh	r1, [r3, #0]
 8003bbe:	9805      	ldr	r0, [sp, #20]
 8003bc0:	f00e fa5a 	bl	8012078 <HAL_GPIO_ReadPin>
 8003bc4:	2801      	cmp	r0, #1
 8003bc6:	d0ec      	beq.n	8003ba2 <IsLowerCLIbaud+0x6e>
	return 0;
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e7ea      	b.n	8003ba2 <IsLowerCLIbaud+0x6e>

08003bcc <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003bcc:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <EE_FormatForFactoryReset+0x1c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <EE_FormatForFactoryReset+0x20>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d006      	beq.n	8003be6 <EE_FormatForFactoryReset+0x1a>
	{
		// Do nothing
	}
	else
	{
		if (EE_Format() == HAL_OK) 
 8003bd8:	f003 ff56 	bl	8007a88 <EE_Format>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d102      	bne.n	8003be6 <EE_FormatForFactoryReset+0x1a>
		{
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003be0:	4b01      	ldr	r3, [pc, #4]	; (8003be8 <EE_FormatForFactoryReset+0x1c>)
 8003be2:	4a02      	ldr	r2, [pc, #8]	; (8003bec <EE_FormatForFactoryReset+0x20>)
 8003be4:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003be6:	bd10      	pop	{r4, pc}
 8003be8:	20007ff0 	.word	0x20007ff0
 8003bec:	beefdead 	.word	0xbeefdead

08003bf0 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003bf0:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003bf2:	f00b f817 	bl	800ec24 <GetUart>
 8003bf6:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003bf8:	23e1      	movs	r3, #225	; 0xe1
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003c0a:	f00f fdfd 	bl	8013808 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	2120      	movs	r1, #32
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bd10      	pop	{r4, pc}
	...

08003c1c <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003c20:	2400      	movs	r4, #0
 8003c22:	2c02      	cmp	r4, #2
 8003c24:	d810      	bhi.n	8003c48 <IsModuleParameter+0x2c>
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003c26:	0063      	lsls	r3, r4, #1
 8003c28:	191b      	adds	r3, r3, r4
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <IsModuleParameter+0x30>)
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	0028      	movs	r0, r5
 8003c34:	f7fc fa66 	bl	8000104 <strcmp>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d002      	beq.n	8003c42 <IsModuleParameter+0x26>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003c3c:	3401      	adds	r4, #1
 8003c3e:	b2e4      	uxtb	r4, r4
 8003c40:	e7ef      	b.n	8003c22 <IsModuleParameter+0x6>
			return i+1;
 8003c42:	3401      	adds	r4, #1
 8003c44:	b2e0      	uxtb	r0, r4
 8003c46:	e000      	b.n	8003c4a <IsModuleParameter+0x2e>
  }
	return 0;
 8003c48:	2000      	movs	r0, #0
}
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	200000e8 	.word	0x200000e8

08003c50 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	0004      	movs	r4, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003c54:	2500      	movs	r5, #0
 8003c56:	e001      	b.n	8003c5c <IsMathOperator+0xc>
 8003c58:	3501      	adds	r5, #1
 8003c5a:	b2ed      	uxtb	r5, r5
 8003c5c:	2d05      	cmp	r5, #5
 8003c5e:	d825      	bhi.n	8003cac <IsMathOperator+0x5c>
  {
		if (!strcmp(string, "="))
 8003c60:	4918      	ldr	r1, [pc, #96]	; (8003cc4 <IsMathOperator+0x74>)
 8003c62:	0020      	movs	r0, r4
 8003c64:	f7fc fa4e 	bl	8000104 <strcmp>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d021      	beq.n	8003cb0 <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <IsMathOperator+0x78>)
 8003c6e:	0020      	movs	r0, r4
 8003c70:	f7fc fa48 	bl	8000104 <strcmp>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d01d      	beq.n	8003cb4 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003c78:	4914      	ldr	r1, [pc, #80]	; (8003ccc <IsMathOperator+0x7c>)
 8003c7a:	0020      	movs	r0, r4
 8003c7c:	f7fc fa42 	bl	8000104 <strcmp>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d019      	beq.n	8003cb8 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <IsMathOperator+0x80>)
 8003c86:	0020      	movs	r0, r4
 8003c88:	f7fc fa3c 	bl	8000104 <strcmp>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d015      	beq.n	8003cbc <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003c90:	4910      	ldr	r1, [pc, #64]	; (8003cd4 <IsMathOperator+0x84>)
 8003c92:	0020      	movs	r0, r4
 8003c94:	f7fc fa36 	bl	8000104 <strcmp>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d011      	beq.n	8003cc0 <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003c9c:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <IsMathOperator+0x88>)
 8003c9e:	0020      	movs	r0, r4
 8003ca0:	f7fc fa30 	bl	8000104 <strcmp>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d1d7      	bne.n	8003c58 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8003ca8:	2006      	movs	r0, #6
 8003caa:	e000      	b.n	8003cae <IsMathOperator+0x5e>
  }
	return 0;
 8003cac:	2000      	movs	r0, #0
}
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	e7fc      	b.n	8003cae <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003cb4:	2002      	movs	r0, #2
 8003cb6:	e7fa      	b.n	8003cae <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8003cb8:	2003      	movs	r0, #3
 8003cba:	e7f8      	b.n	8003cae <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 8003cbc:	2004      	movs	r0, #4
 8003cbe:	e7f6      	b.n	8003cae <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 8003cc0:	2005      	movs	r0, #5
 8003cc2:	e7f4      	b.n	8003cae <IsMathOperator+0x5e>
 8003cc4:	08018be0 	.word	0x08018be0
 8003cc8:	08018be4 	.word	0x08018be4
 8003ccc:	08018be8 	.word	0x08018be8
 8003cd0:	08018bec 	.word	0x08018bec
 8003cd4:	08018bf0 	.word	0x08018bf0
 8003cd8:	08018bf4 	.word	0x08018bf4

08003cdc <BOS_Init>:
*/

/* --- BitzOS initialization. 
*/
void BOS_Init(void)
{
 8003cdc:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 8003cde:	f00a fcc5 	bl	800e66c <RTC_Init>
	GetTimeDate();
 8003ce2:	f00a fd63 	bl	800e7ac <GetTimeDate>

	/* EEPROM Init */
	EE_Init();
 8003ce6:	f003 ff33 	bl	8007b50 <EE_Init>
	
  /* Initialize all configured peripherals */
  GPIO_Init();
 8003cea:	f00a fa1b 	bl	800e124 <GPIO_Init>
	DMA_Init();
 8003cee:	f008 ffa5 	bl	800cc3c <DMA_Init>
	TIM_USEC_Init();
 8003cf2:	f00a fd8f 	bl	800e814 <TIM_USEC_Init>
	CRC_Init();
 8003cf6:	f00a f9c3 	bl	800e080 <CRC_Init>
	TIM_MSEC_Init();
 8003cfa:	f00a fdbd 	bl	800e878 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if (IsFactoryReset())
 8003cfe:	f00a fac5 	bl	800e28c <IsFactoryReset>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d111      	bne.n	8003d2a <BOS_Init+0x4e>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if (IsLowerCLIbaud())
 8003d06:	f7ff ff15 	bl	8003b34 <IsLowerCLIbaud>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d061      	beq.n	8003dd2 <BOS_Init+0xf6>
	{
		CLI_LOW_Baudrate_Flag = 1;
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <BOS_Init+0x128>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003d14:	2032      	movs	r0, #50	; 0x32
 8003d16:	f00a fdf1 	bl	800e8fc <StartMilliDelay>
		Module_Init();	
 8003d1a:	f007 f9ff 	bl	800b11c <Module_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <BOS_Init+0x12c>)
 8003d20:	22e1      	movs	r2, #225	; 0xe1
 8003d22:	0252      	lsls	r2, r2, #9
 8003d24:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003d26:	2401      	movs	r4, #1
 8003d28:	e011      	b.n	8003d4e <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8003d2a:	f7ff ff4f 	bl	8003bcc <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d2e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <BOS_Init+0x130>)
 8003d34:	4a36      	ldr	r2, [pc, #216]	; (8003e10 <BOS_Init+0x134>)
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <BOS_Init+0x60>
		{	
			UpdateBaudrate(port, BOS.clibaudrate);
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <BOS_Init+0x12c>)
 8003d42:	6899      	ldr	r1, [r3, #8]
 8003d44:	0020      	movs	r0, r4
 8003d46:	f00a fffb 	bl	800ed40 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003d4a:	3401      	adds	r4, #1
 8003d4c:	b2e4      	uxtb	r4, r4
 8003d4e:	2c05      	cmp	r4, #5
 8003d50:	d9f6      	bls.n	8003d40 <BOS_Init+0x64>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
		Module_Init();				
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003d52:	f7ff fedf 	bl	8003b14 <LoadEEvars>
#ifndef __N
	UpdateMyPortsDir();
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003d56:	f009 fcd7 	bl	800d708 <SetupMessagingRxDMAs>

	/* Startup indicator sequence */
	if (myID == 0)		/* Native module */
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <BOS_Init+0x138>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d03d      	beq.n	8003dde <BOS_Init+0x102>
	{
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
	}
	else							/* Non-native module */
	{
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003d62:	2580      	movs	r5, #128	; 0x80
 8003d64:	012d      	lsls	r5, r5, #4
 8003d66:	2490      	movs	r4, #144	; 0x90
 8003d68:	05e4      	lsls	r4, r4, #23
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f00e f989 	bl	8012086 <HAL_GPIO_WritePin>
 8003d74:	20fa      	movs	r0, #250	; 0xfa
 8003d76:	0040      	lsls	r0, r0, #1
 8003d78:	f00a fdc0 	bl	800e8fc <StartMilliDelay>
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	0029      	movs	r1, r5
 8003d80:	0020      	movs	r0, r4
 8003d82:	f00e f980 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003d86:	2064      	movs	r0, #100	; 0x64
 8003d88:	f00a fdb8 	bl	800e8fc <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	0029      	movs	r1, r5
 8003d90:	0020      	movs	r0, r4
 8003d92:	f00e f978 	bl	8012086 <HAL_GPIO_WritePin>
 8003d96:	2064      	movs	r0, #100	; 0x64
 8003d98:	f00a fdb0 	bl	800e8fc <StartMilliDelay>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	0029      	movs	r1, r5
 8003da0:	0020      	movs	r0, r4
 8003da2:	f00e f970 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003da6:	2064      	movs	r0, #100	; 0x64
 8003da8:	f00a fda8 	bl	800e8fc <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003dac:	2201      	movs	r2, #1
 8003dae:	0029      	movs	r1, r5
 8003db0:	0020      	movs	r0, r4
 8003db2:	f00e f968 	bl	8012086 <HAL_GPIO_WritePin>
 8003db6:	2064      	movs	r0, #100	; 0x64
 8003db8:	f00a fda0 	bl	800e8fc <StartMilliDelay>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	0029      	movs	r1, r5
 8003dc0:	0020      	movs	r0, r4
 8003dc2:	f00e f960 	bl	8012086 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003dc6:	f003 fcf7 	bl	80077b8 <ResetUartORE>

	BOS_initialized = 1;
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <BOS_Init+0x13c>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
}
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003dd2:	2032      	movs	r0, #50	; 0x32
 8003dd4:	f00a fd92 	bl	800e8fc <StartMilliDelay>
		Module_Init();				
 8003dd8:	f007 f9a0 	bl	800b11c <Module_Init>
 8003ddc:	e7b9      	b.n	8003d52 <BOS_Init+0x76>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003dde:	2580      	movs	r5, #128	; 0x80
 8003de0:	012d      	lsls	r5, r5, #4
 8003de2:	2490      	movs	r4, #144	; 0x90
 8003de4:	05e4      	lsls	r4, r4, #23
 8003de6:	2201      	movs	r2, #1
 8003de8:	0029      	movs	r1, r5
 8003dea:	0020      	movs	r0, r4
 8003dec:	f00e f94b 	bl	8012086 <HAL_GPIO_WritePin>
 8003df0:	20fa      	movs	r0, #250	; 0xfa
 8003df2:	0040      	lsls	r0, r0, #1
 8003df4:	f00a fd82 	bl	800e8fc <StartMilliDelay>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	0029      	movs	r1, r5
 8003dfc:	0020      	movs	r0, r4
 8003dfe:	f00e f942 	bl	8012086 <HAL_GPIO_WritePin>
 8003e02:	e7e0      	b.n	8003dc6 <BOS_Init+0xea>
 8003e04:	20000af6 	.word	0x20000af6
 8003e08:	200069d4 	.word	0x200069d4
 8003e0c:	e000ed00 	.word	0xe000ed00
 8003e10:	05fa0004 	.word	0x05fa0004
 8003e14:	20000070 	.word	0x20000070
 8003e18:	20000af5 	.word	0x20000af5

08003e1c <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	46de      	mov	lr, fp
 8003e20:	4657      	mov	r7, sl
 8003e22:	464e      	mov	r6, r9
 8003e24:	4645      	mov	r5, r8
 8003e26:	b5e0      	push	{r5, r6, r7, lr}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <FindBroadcastRoutes+0x11c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3307      	adds	r3, #7
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	466a      	mov	r2, sp
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	469d      	mov	sp, r3
 8003e3c:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e006      	b.n	8003e50 <FindBroadcastRoutes+0x34>
	{	
		modules[m] = 0;
 8003e42:	2200      	movs	r2, #0
 8003e44:	54e2      	strb	r2, [r4, r3]
		bcastRoutes[m] = 0;
 8003e46:	005d      	lsls	r5, r3, #1
 8003e48:	493c      	ldr	r1, [pc, #240]	; (8003f3c <FindBroadcastRoutes+0x120>)
 8003e4a:	526a      	strh	r2, [r5, r1]
	for(m=0 ; m<N ; m++)
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <FindBroadcastRoutes+0x11c>)
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d3f4      	bcc.n	8003e42 <FindBroadcastRoutes+0x26>
	}
	modules[src-1] = ++level;					// Tag the source
 8003e58:	3801      	subs	r0, #1
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	e001      	b.n	8003e66 <FindBroadcastRoutes+0x4a>
 8003e62:	3201      	adds	r2, #1
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	2a05      	cmp	r2, #5
 8003e68:	d817      	bhi.n	8003e9a <FindBroadcastRoutes+0x7e>
	{
		if (array[src-1][p]) 
 8003e6a:	00c3      	lsls	r3, r0, #3
 8003e6c:	1a1b      	subs	r3, r3, r0
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4933      	ldr	r1, [pc, #204]	; (8003f40 <FindBroadcastRoutes+0x124>)
 8003e74:	5a5b      	ldrh	r3, [r3, r1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f3      	beq.n	8003e62 <FindBroadcastRoutes+0x46>
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003e7a:	1e55      	subs	r5, r2, #1
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	40a9      	lsls	r1, r5
 8003e80:	000d      	movs	r5, r1
 8003e82:	4e2e      	ldr	r6, [pc, #184]	; (8003f3c <FindBroadcastRoutes+0x120>)
 8003e84:	0041      	lsls	r1, r0, #1
 8003e86:	468c      	mov	ip, r1
 8003e88:	5b89      	ldrh	r1, [r1, r6]
 8003e8a:	4329      	orrs	r1, r5
 8003e8c:	4665      	mov	r5, ip
 8003e8e:	53a9      	strh	r1, [r5, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	2102      	movs	r1, #2
 8003e96:	54e1      	strb	r1, [r4, r3]
 8003e98:	e7e3      	b.n	8003e62 <FindBroadcastRoutes+0x46>
	++level;													// Move one level
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	469b      	mov	fp, r3
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */
	
	do
	{	
		untaged = 0;																			// Reset the untaged counter
		++level;																					// Move one level
 8003e9e:	465e      	mov	r6, fp
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	b2f3      	uxtb	r3, r6
 8003ea4:	469b      	mov	fp, r3
		untaged = 0;																			// Reset the untaged counter
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	469c      	mov	ip, r3
		
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003eaa:	2100      	movs	r1, #0
 8003eac:	e02c      	b.n	8003f08 <FindBroadcastRoutes+0xec>
		{
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003eae:	3201      	adds	r2, #1
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	2a05      	cmp	r2, #5
 8003eb4:	d826      	bhi.n	8003f04 <FindBroadcastRoutes+0xe8>
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003eb6:	00eb      	lsls	r3, r5, #3
 8003eb8:	1b5b      	subs	r3, r3, r5
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4820      	ldr	r0, [pc, #128]	; (8003f40 <FindBroadcastRoutes+0x124>)
 8003ec0:	5a1b      	ldrh	r3, [r3, r0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f3      	beq.n	8003eae <FindBroadcastRoutes+0x92>
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	5ce0      	ldrb	r0, [r4, r3]
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d1ed      	bne.n	8003eae <FindBroadcastRoutes+0x92>
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003ed2:	0010      	movs	r0, r2
 8003ed4:	3801      	subs	r0, #1
 8003ed6:	2601      	movs	r6, #1
 8003ed8:	4086      	lsls	r6, r0
 8003eda:	46b0      	mov	r8, r6
 8003edc:	4817      	ldr	r0, [pc, #92]	; (8003f3c <FindBroadcastRoutes+0x120>)
 8003ede:	4681      	mov	r9, r0
 8003ee0:	0068      	lsls	r0, r5, #1
 8003ee2:	4682      	mov	sl, r0
 8003ee4:	4648      	mov	r0, r9
 8003ee6:	4656      	mov	r6, sl
 8003ee8:	5a30      	ldrh	r0, [r6, r0]
 8003eea:	4646      	mov	r6, r8
 8003eec:	4330      	orrs	r0, r6
 8003eee:	464e      	mov	r6, r9
 8003ef0:	4653      	mov	r3, sl
 8003ef2:	5398      	strh	r0, [r3, r6]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4658      	mov	r0, fp
 8003ef8:	54e0      	strb	r0, [r4, r3]
						++untaged;
 8003efa:	4663      	mov	r3, ip
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	469c      	mov	ip, r3
 8003f02:	e7d4      	b.n	8003eae <FindBroadcastRoutes+0x92>
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003f04:	3101      	adds	r1, #1
 8003f06:	b2c9      	uxtb	r1, r1
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <FindBroadcastRoutes+0x11c>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	d207      	bcs.n	8003f20 <FindBroadcastRoutes+0x104>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003f10:	000d      	movs	r5, r1
 8003f12:	5c62      	ldrb	r2, [r4, r1]
 8003f14:	465b      	mov	r3, fp
 8003f16:	3b01      	subs	r3, #1
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1f3      	bne.n	8003f04 <FindBroadcastRoutes+0xe8>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	e7c8      	b.n	8003eb2 <FindBroadcastRoutes+0x96>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003f20:	4663      	mov	r3, ip
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1bb      	bne.n	8003e9e <FindBroadcastRoutes+0x82>

	
	return result;
}
 8003f26:	2000      	movs	r0, #0
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b003      	add	sp, #12
 8003f2c:	bc3c      	pop	{r2, r3, r4, r5}
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	46a2      	mov	sl, r4
 8003f34:	46ab      	mov	fp, r5
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f38:	2000001c 	.word	0x2000001c
 8003f3c:	20000afc 	.word	0x20000afc
 8003f40:	20000020 	.word	0x20000020

08003f44 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	b08f      	sub	sp, #60	; 0x3c
 8003f48:	0005      	movs	r5, r0
 8003f4a:	000e      	movs	r6, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003f4c:	2232      	movs	r2, #50	; 0x32
 8003f4e:	2100      	movs	r1, #0
 8003f50:	a801      	add	r0, sp, #4
 8003f52:	f010 f85b 	bl	801400c <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003f56:	2202      	movs	r2, #2
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4845      	ldr	r0, [pc, #276]	; (8004070 <FindRoute+0x12c>)
 8003f5c:	f010 f856 	bl	801400c <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003f60:	0029      	movs	r1, r5
 8003f62:	3d01      	subs	r5, #1
 8003f64:	2300      	movs	r3, #0
 8003f66:	4a43      	ldr	r2, [pc, #268]	; (8004074 <FindRoute+0x130>)
 8003f68:	5553      	strb	r3, [r2, r5]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003f6a:	4a43      	ldr	r2, [pc, #268]	; (8004078 <FindRoute+0x134>)
 8003f6c:	5553      	strb	r3, [r2, r5]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003f6e:	2001      	movs	r0, #1
 8003f70:	e000      	b.n	8003f74 <FindRoute+0x30>
 8003f72:	3001      	adds	r0, #1
 8003f74:	2806      	cmp	r0, #6
 8003f76:	dc14      	bgt.n	8003fa2 <FindRoute+0x5e>
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	1b5b      	subs	r3, r3, r5
 8003f7c:	181b      	adds	r3, r3, r0
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4a3e      	ldr	r2, [pc, #248]	; (800407c <FindRoute+0x138>)
 8003f82:	5a9b      	ldrh	r3, [r3, r2]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f4      	beq.n	8003f72 <FindRoute+0x2e>
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	b2b2      	uxth	r2, r6
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d1f0      	bne.n	8003f72 <FindRoute+0x2e>
			routeDist[desID-1] = 1;
 8003f90:	1e73      	subs	r3, r6, #1
 8003f92:	4a38      	ldr	r2, [pc, #224]	; (8004074 <FindRoute+0x130>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	54d1      	strb	r1, [r2, r3]
			route[0] = desID;
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <FindRoute+0x12c>)
 8003f9a:	701e      	strb	r6, [r3, #0]
			return col;	
 8003f9c:	b2c0      	uxtb	r0, r0
			return col;	
		}
	}	

	return 0;			
}
 8003f9e:	b00f      	add	sp, #60	; 0x3c
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i=1 ; i<=N ; i++)   					
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <FindRoute+0x64>
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	4a35      	ldr	r2, [pc, #212]	; (8004080 <FindRoute+0x13c>)
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	db09      	blt.n	8003fc4 <FindRoute+0x80>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	d0f8      	beq.n	8003fa6 <FindRoute+0x62>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	482f      	ldr	r0, [pc, #188]	; (8004074 <FindRoute+0x130>)
 8003fb8:	24ff      	movs	r4, #255	; 0xff
 8003fba:	5484      	strb	r4, [r0, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003fbc:	482e      	ldr	r0, [pc, #184]	; (8004078 <FindRoute+0x134>)
 8003fbe:	2400      	movs	r4, #0
 8003fc0:	5484      	strb	r4, [r0, r2]
 8003fc2:	e7f0      	b.n	8003fa6 <FindRoute+0x62>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003fc4:	2400      	movs	r4, #0
	while (!QnotEmpty(Q))
 8003fc6:	a801      	add	r0, sp, #4
 8003fc8:	f7ff f9c8 	bl	800335c <QnotEmpty>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d10c      	bne.n	8003fea <FindRoute+0xa6>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003fd0:	a901      	add	r1, sp, #4
 8003fd2:	4828      	ldr	r0, [pc, #160]	; (8004074 <FindRoute+0x130>)
 8003fd4:	f7ff f9a6 	bl	8003324 <minArr>
 8003fd8:	3001      	adds	r0, #1
 8003fda:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003fdc:	42b4      	cmp	r4, r6
 8003fde:	d004      	beq.n	8003fea <FindRoute+0xa6>
			Q[u-1] = 1;													// Remove u from Q 
 8003fe0:	1e61      	subs	r1, r4, #1
 8003fe2:	ab01      	add	r3, sp, #4
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	545a      	strb	r2, [r3, r1]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003fe8:	e003      	b.n	8003ff2 <FindRoute+0xae>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003fea:	2200      	movs	r2, #0
 8003fec:	e023      	b.n	8004036 <FindRoute+0xf2>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003fee:	3201      	adds	r2, #1
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	2a06      	cmp	r2, #6
 8003ff4:	d8e7      	bhi.n	8003fc6 <FindRoute+0x82>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	1a5b      	subs	r3, r3, r1
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	481f      	ldr	r0, [pc, #124]	; (800407c <FindRoute+0x138>)
 8004000:	5a1b      	ldrh	r3, [r3, r0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f3      	beq.n	8003fee <FindRoute+0xaa>
				v = (array[u-1][n]>>3);
 8004006:	08db      	lsrs	r3, r3, #3
 8004008:	b2db      	uxtb	r3, r3
				if (!Q[v-1])												// v is still in Q
 800400a:	3b01      	subs	r3, #1
 800400c:	a801      	add	r0, sp, #4
 800400e:	5cc0      	ldrb	r0, [r0, r3]
 8004010:	2800      	cmp	r0, #0
 8004012:	d1ec      	bne.n	8003fee <FindRoute+0xaa>
					alt = routeDist[u-1] + 1;					// Add one hop
 8004014:	4f17      	ldr	r7, [pc, #92]	; (8004074 <FindRoute+0x130>)
 8004016:	5c78      	ldrb	r0, [r7, r1]
 8004018:	3001      	adds	r0, #1
 800401a:	b2c0      	uxtb	r0, r0
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 800401c:	5cff      	ldrb	r7, [r7, r3]
 800401e:	4287      	cmp	r7, r0
 8004020:	d9e5      	bls.n	8003fee <FindRoute+0xaa>
						routeDist[v-1] = alt; 
 8004022:	4f14      	ldr	r7, [pc, #80]	; (8004074 <FindRoute+0x130>)
 8004024:	54f8      	strb	r0, [r7, r3]
						routePrev[v-1] = u; 
 8004026:	4814      	ldr	r0, [pc, #80]	; (8004078 <FindRoute+0x134>)
 8004028:	54c4      	strb	r4, [r0, r3]
 800402a:	e7e0      	b.n	8003fee <FindRoute+0xaa>
		route[j++] = u;          				// Push the vertex onto the stack
 800402c:	1c53      	adds	r3, r2, #1
 800402e:	4910      	ldr	r1, [pc, #64]	; (8004070 <FindRoute+0x12c>)
 8004030:	548c      	strb	r4, [r1, r2]
 8004032:	b2da      	uxtb	r2, r3
		u = routePrev[u-1];           	// Traverse from target to source
 8004034:	0004      	movs	r4, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8004036:	1e63      	subs	r3, r4, #1
 8004038:	490f      	ldr	r1, [pc, #60]	; (8004078 <FindRoute+0x134>)
 800403a:	5cc8      	ldrb	r0, [r1, r3]
 800403c:	2800      	cmp	r0, #0
 800403e:	d1f5      	bne.n	800402c <FindRoute+0xe8>
	for(int col=1 ; col<=6 ; col++)	
 8004040:	2201      	movs	r2, #1
 8004042:	e000      	b.n	8004046 <FindRoute+0x102>
 8004044:	3201      	adds	r2, #1
 8004046:	2a06      	cmp	r2, #6
 8004048:	dca9      	bgt.n	8003f9e <FindRoute+0x5a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 800404a:	00eb      	lsls	r3, r5, #3
 800404c:	1b5b      	subs	r3, r3, r5
 800404e:	189b      	adds	r3, r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <FindRoute+0x138>)
 8004054:	5a5b      	ldrh	r3, [r3, r1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f4      	beq.n	8004044 <FindRoute+0x100>
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	1e71      	subs	r1, r6, #1
 800405e:	4c05      	ldr	r4, [pc, #20]	; (8004074 <FindRoute+0x130>)
 8004060:	5c61      	ldrb	r1, [r4, r1]
 8004062:	3901      	subs	r1, #1
 8004064:	4c02      	ldr	r4, [pc, #8]	; (8004070 <FindRoute+0x12c>)
 8004066:	5c61      	ldrb	r1, [r4, r1]
 8004068:	428b      	cmp	r3, r1
 800406a:	d1eb      	bne.n	8004044 <FindRoute+0x100>
			return col;	
 800406c:	b2d0      	uxtb	r0, r2
 800406e:	e796      	b.n	8003f9e <FindRoute+0x5a>
 8004070:	20006a8c 	.word	0x20006a8c
 8004074:	20000dcc 	.word	0x20000dcc
 8004078:	20000dd0 	.word	0x20000dd0
 800407c:	20000020 	.word	0x20000020
 8004080:	2000001c 	.word	0x2000001c

08004084 <remoteBootloaderUpdate>:
{
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b087      	sub	sp, #28
 8004088:	0007      	movs	r7, r0
 800408a:	000e      	movs	r6, r1
 800408c:	9205      	str	r2, [sp, #20]
 800408e:	001c      	movs	r4, r3
	myOutport = FindRoute(myID, dst);
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 8004092:	7818      	ldrb	r0, [r3, #0]
 8004094:	f7ff ff56 	bl	8003f44 <FindRoute>
 8004098:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 800409a:	2c00      	cmp	r4, #0
 800409c:	d003      	beq.n	80040a6 <remoteBootloaderUpdate+0x22>
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 80040a0:	781d      	ldrb	r5, [r3, #0]
 80040a2:	42b5      	cmp	r5, r6
 80040a4:	d00d      	beq.n	80040c2 <remoteBootloaderUpdate+0x3e>
	} else if (outport == 0) {													/* This is a remote update */		
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d10d      	bne.n	80040c6 <remoteBootloaderUpdate+0x42>
		if (NumberOfHops(dst) == 1)
 80040aa:	1e73      	subs	r3, r6, #1
 80040ac:	4a2b      	ldr	r2, [pc, #172]	; (800415c <remoteBootloaderUpdate+0xd8>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d003      	beq.n	80040bc <remoteBootloaderUpdate+0x38>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 80040b4:	3b01      	subs	r3, #1
 80040b6:	4a2a      	ldr	r2, [pc, #168]	; (8004160 <remoteBootloaderUpdate+0xdc>)
 80040b8:	5cd5      	ldrb	r5, [r2, r3]
 80040ba:	e005      	b.n	80040c8 <remoteBootloaderUpdate+0x44>
			lastModule = myID;
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 80040be:	781d      	ldrb	r5, [r3, #0]
 80040c0:	e002      	b.n	80040c8 <remoteBootloaderUpdate+0x44>
		myOutport = outport;
 80040c2:	9404      	str	r4, [sp, #16]
 80040c4:	e000      	b.n	80040c8 <remoteBootloaderUpdate+0x44>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 80040c6:	2500      	movs	r5, #0
	if (src == myID)
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	42bb      	cmp	r3, r7
 80040ce:	d019      	beq.n	8004104 <remoteBootloaderUpdate+0x80>
	SetupPortForRemoteBootloaderUpdate(inport);
 80040d0:	9805      	ldr	r0, [sp, #20]
 80040d2:	f7ff fd8d 	bl	8003bf0 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 80040d6:	9804      	ldr	r0, [sp, #16]
 80040d8:	f7ff fd8a 	bl	8003bf0 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 80040dc:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	42ab      	cmp	r3, r5
 80040e2:	d032      	beq.n	800414a <remoteBootloaderUpdate+0xc6>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <remoteBootloaderUpdate+0xd4>)
 80040e6:	7819      	ldrb	r1, [r3, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	9303      	str	r3, [sp, #12]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	3303      	adds	r3, #3
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	000b      	movs	r3, r1
 80040f8:	9a04      	ldr	r2, [sp, #16]
 80040fa:	9805      	ldr	r0, [sp, #20]
 80040fc:	f005 f906 	bl	800930c <StartScastDMAStream>
}
 8004100:	b007      	add	sp, #28
 8004102:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004104:	f00b f802 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 8004108:	0007      	movs	r7, r0
		if (outport == 0)		// This is a remote module update
 800410a:	2c00      	cmp	r4, #0
 800410c:	d116      	bne.n	800413c <remoteBootloaderUpdate+0xb8>
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <remoteBootloaderUpdate+0xe0>)
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	0032      	movs	r2, r6
 8004114:	f010 f974 	bl	8014400 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <remoteBootloaderUpdate+0xe4>)
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	0038      	movs	r0, r7
 800411e:	f010 f98f 	bl	8014440 <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8004122:	0038      	movs	r0, r7
 8004124:	f7fb fff8 	bl	8000118 <strlen>
 8004128:	b282      	uxth	r2, r0
 800412a:	2332      	movs	r3, #50	; 0x32
 800412c:	0039      	movs	r1, r7
 800412e:	9805      	ldr	r0, [sp, #20]
 8004130:	f00a fdc4 	bl	800ecbc <writePxITMutex>
		Delay_ms(100);
 8004134:	2064      	movs	r0, #100	; 0x64
 8004136:	f00c ff43 	bl	8010fc0 <HAL_Delay>
 800413a:	e7c9      	b.n	80040d0 <remoteBootloaderUpdate+0x4c>
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <remoteBootloaderUpdate+0xe8>)
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	0023      	movs	r3, r4
 8004142:	0032      	movs	r2, r6
 8004144:	f010 f95c 	bl	8014400 <sprintf>
 8004148:	e7e6      	b.n	8004118 <remoteBootloaderUpdate+0x94>
		SwapUartPins(GetUart(myOutport), REVERSED);
 800414a:	9804      	ldr	r0, [sp, #16]
 800414c:	f00a fd6a 	bl	800ec24 <GetUart>
 8004150:	2101      	movs	r1, #1
 8004152:	f00a fdff 	bl	800ed54 <SwapUartPins>
 8004156:	e7c5      	b.n	80040e4 <remoteBootloaderUpdate+0x60>
 8004158:	20000070 	.word	0x20000070
 800415c:	20000dcc 	.word	0x20000dcc
 8004160:	20006a8c 	.word	0x20006a8c
 8004164:	20000098 	.word	0x20000098
 8004168:	200000a0 	.word	0x200000a0
 800416c:	2000009c 	.word	0x2000009c

08004170 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b085      	sub	sp, #20
 8004174:	0004      	movs	r4, r0
 8004176:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8004178:	4d54      	ldr	r5, [pc, #336]	; (80042cc <DisplayTopology+0x15c>)
 800417a:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <DisplayTopology+0x160>)
 800417c:	002a      	movs	r2, r5
 800417e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004180:	c243      	stmia	r2!, {r0, r1, r6}
 8004182:	0019      	movs	r1, r3
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	888b      	ldrh	r3, [r1, #4]
 800418a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800418c:	0028      	movs	r0, r5
 800418e:	f7fb ffc3 	bl	8000118 <strlen>
 8004192:	b282      	uxth	r2, r0
 8004194:	2301      	movs	r3, #1
 8004196:	425b      	negs	r3, r3
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	3333      	adds	r3, #51	; 0x33
 800419c:	0029      	movs	r1, r5
 800419e:	0020      	movs	r0, r4
 80041a0:	f00a fd5e 	bl	800ec60 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 80041a4:	2501      	movs	r5, #1
 80041a6:	e013      	b.n	80041d0 <DisplayTopology+0x60>
	{
		sprintf(pcUserMessage, "P%d\t", i);
 80041a8:	4e48      	ldr	r6, [pc, #288]	; (80042cc <DisplayTopology+0x15c>)
 80041aa:	002a      	movs	r2, r5
 80041ac:	4949      	ldr	r1, [pc, #292]	; (80042d4 <DisplayTopology+0x164>)
 80041ae:	0030      	movs	r0, r6
 80041b0:	f010 f926 	bl	8014400 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80041b4:	0030      	movs	r0, r6
 80041b6:	f7fb ffaf 	bl	8000118 <strlen>
 80041ba:	b282      	uxth	r2, r0
 80041bc:	2301      	movs	r3, #1
 80041be:	425b      	negs	r3, r3
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	3333      	adds	r3, #51	; 0x33
 80041c4:	0031      	movs	r1, r6
 80041c6:	9803      	ldr	r0, [sp, #12]
 80041c8:	f00a fd4a 	bl	800ec60 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 80041cc:	3501      	adds	r5, #1
 80041ce:	b2ed      	uxtb	r5, r5
 80041d0:	2d05      	cmp	r5, #5
 80041d2:	d9e9      	bls.n	80041a8 <DisplayTopology+0x38>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 80041d4:	2301      	movs	r3, #1
 80041d6:	425b      	negs	r3, r3
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	3333      	adds	r3, #51	; 0x33
 80041dc:	2203      	movs	r2, #3
 80041de:	493e      	ldr	r1, [pc, #248]	; (80042d8 <DisplayTopology+0x168>)
 80041e0:	9803      	ldr	r0, [sp, #12]
 80041e2:	f00a fd3d 	bl	800ec60 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 80041e6:	2400      	movs	r4, #0
 80041e8:	e02f      	b.n	800424a <DisplayTopology+0xda>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 80041ea:	2307      	movs	r3, #7
 80041ec:	4013      	ands	r3, r2
 80041ee:	08d2      	lsrs	r2, r2, #3
 80041f0:	493a      	ldr	r1, [pc, #232]	; (80042dc <DisplayTopology+0x16c>)
 80041f2:	4836      	ldr	r0, [pc, #216]	; (80042cc <DisplayTopology+0x15c>)
 80041f4:	f010 f904 	bl	8014400 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 80041f8:	4e34      	ldr	r6, [pc, #208]	; (80042cc <DisplayTopology+0x15c>)
 80041fa:	0030      	movs	r0, r6
 80041fc:	f7fb ff8c 	bl	8000118 <strlen>
 8004200:	b282      	uxth	r2, r0
 8004202:	2301      	movs	r3, #1
 8004204:	425b      	negs	r3, r3
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	3333      	adds	r3, #51	; 0x33
 800420a:	0031      	movs	r1, r6
 800420c:	9803      	ldr	r0, [sp, #12]
 800420e:	f00a fd27 	bl	800ec60 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8004212:	3501      	adds	r5, #1
 8004214:	b2ed      	uxtb	r5, r5
 8004216:	2d05      	cmp	r5, #5
 8004218:	d80c      	bhi.n	8004234 <DisplayTopology+0xc4>
			if (!array[row][col])
 800421a:	00fb      	lsls	r3, r7, #3
 800421c:	1bdb      	subs	r3, r3, r7
 800421e:	195b      	adds	r3, r3, r5
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <DisplayTopology+0x170>)
 8004224:	5a9a      	ldrh	r2, [r3, r2]
 8004226:	2a00      	cmp	r2, #0
 8004228:	d1df      	bne.n	80041ea <DisplayTopology+0x7a>
				sprintf(pcUserMessage, "%d\t",0);
 800422a:	492e      	ldr	r1, [pc, #184]	; (80042e4 <DisplayTopology+0x174>)
 800422c:	4827      	ldr	r0, [pc, #156]	; (80042cc <DisplayTopology+0x15c>)
 800422e:	f010 f8e7 	bl	8014400 <sprintf>
 8004232:	e7e1      	b.n	80041f8 <DisplayTopology+0x88>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8004234:	2301      	movs	r3, #1
 8004236:	425b      	negs	r3, r3
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	3333      	adds	r3, #51	; 0x33
 800423c:	2202      	movs	r2, #2
 800423e:	492a      	ldr	r1, [pc, #168]	; (80042e8 <DisplayTopology+0x178>)
 8004240:	9803      	ldr	r0, [sp, #12]
 8004242:	f00a fd0d 	bl	800ec60 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8004246:	3401      	adds	r4, #1
 8004248:	b2e4      	uxtb	r4, r4
 800424a:	4b28      	ldr	r3, [pc, #160]	; (80042ec <DisplayTopology+0x17c>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	42a3      	cmp	r3, r4
 8004250:	d931      	bls.n	80042b6 <DisplayTopology+0x146>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8004252:	0027      	movs	r7, r4
 8004254:	1c62      	adds	r2, r4, #1
 8004256:	4d1d      	ldr	r5, [pc, #116]	; (80042cc <DisplayTopology+0x15c>)
 8004258:	4925      	ldr	r1, [pc, #148]	; (80042f0 <DisplayTopology+0x180>)
 800425a:	0028      	movs	r0, r5
 800425c:	f010 f8d0 	bl	8014400 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004260:	0028      	movs	r0, r5
 8004262:	f7fb ff59 	bl	8000118 <strlen>
 8004266:	b282      	uxth	r2, r0
 8004268:	2601      	movs	r6, #1
 800426a:	4276      	negs	r6, r6
 800426c:	9600      	str	r6, [sp, #0]
 800426e:	2332      	movs	r3, #50	; 0x32
 8004270:	0029      	movs	r1, r5
 8004272:	9803      	ldr	r0, [sp, #12]
 8004274:	f00a fcf4 	bl	800ec60 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8004278:	00e3      	lsls	r3, r4, #3
 800427a:	1b1b      	subs	r3, r3, r4
 800427c:	005a      	lsls	r2, r3, #1
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <DisplayTopology+0x170>)
 8004280:	5ad2      	ldrh	r2, [r2, r3]
 8004282:	0053      	lsls	r3, r2, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	0059      	lsls	r1, r3, #1
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <DisplayTopology+0x184>)
 800428a:	18c9      	adds	r1, r1, r3
 800428c:	2205      	movs	r2, #5
 800428e:	0028      	movs	r0, r5
 8004290:	f010 f90b 	bl	80144aa <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8004294:	9600      	str	r6, [sp, #0]
 8004296:	2332      	movs	r3, #50	; 0x32
 8004298:	2205      	movs	r2, #5
 800429a:	0029      	movs	r1, r5
 800429c:	9d03      	ldr	r5, [sp, #12]
 800429e:	0028      	movs	r0, r5
 80042a0:	f00a fcde 	bl	800ec60 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 80042a4:	9600      	str	r6, [sp, #0]
 80042a6:	2332      	movs	r3, #50	; 0x32
 80042a8:	2201      	movs	r2, #1
 80042aa:	4913      	ldr	r1, [pc, #76]	; (80042f8 <DisplayTopology+0x188>)
 80042ac:	0028      	movs	r0, r5
 80042ae:	f00a fcd7 	bl	800ec60 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80042b2:	2501      	movs	r5, #1
 80042b4:	e7af      	b.n	8004216 <DisplayTopology+0xa6>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 80042b6:	2301      	movs	r3, #1
 80042b8:	425b      	negs	r3, r3
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	3333      	adds	r3, #51	; 0x33
 80042be:	2201      	movs	r2, #1
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <DisplayTopology+0x18c>)
 80042c2:	9803      	ldr	r0, [sp, #12]
 80042c4:	f00a fccc 	bl	800ec60 <writePxMutex>
}
 80042c8:	b005      	add	sp, #20
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042cc:	20000d60 	.word	0x20000d60
 80042d0:	08018ba4 	.word	0x08018ba4
 80042d4:	08018bb8 	.word	0x08018bb8
 80042d8:	080193b0 	.word	0x080193b0
 80042dc:	08018bd0 	.word	0x08018bd0
 80042e0:	20000020 	.word	0x20000020
 80042e4:	08018bcc 	.word	0x08018bcc
 80042e8:	08018a4c 	.word	0x08018a4c
 80042ec:	2000001c 	.word	0x2000001c
 80042f0:	08018bc0 	.word	0x08018bc0
 80042f4:	08018c0c 	.word	0x08018c0c
 80042f8:	08018bb4 	.word	0x08018bb4
 80042fc:	0801a77c 	.word	0x0801a77c

08004300 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b083      	sub	sp, #12
 8004304:	0005      	movs	r5, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8004306:	4c2d      	ldr	r4, [pc, #180]	; (80043bc <DisplayPortsDir+0xbc>)
 8004308:	492d      	ldr	r1, [pc, #180]	; (80043c0 <DisplayPortsDir+0xc0>)
 800430a:	0023      	movs	r3, r4
 800430c:	000a      	movs	r2, r1
 800430e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004310:	c343      	stmia	r3!, {r0, r1, r6}
 8004312:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004314:	c343      	stmia	r3!, {r0, r1, r6}
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	601a      	str	r2, [r3, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800431a:	0020      	movs	r0, r4
 800431c:	f7fb fefc 	bl	8000118 <strlen>
 8004320:	b282      	uxth	r2, r0
 8004322:	2301      	movs	r3, #1
 8004324:	425b      	negs	r3, r3
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	3333      	adds	r3, #51	; 0x33
 800432a:	0021      	movs	r1, r4
 800432c:	0028      	movs	r0, r5
 800432e:	f00a fc97 	bl	800ec60 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 8004332:	2601      	movs	r6, #1
 8004334:	e023      	b.n	800437e <DisplayPortsDir+0x7e>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8004336:	3401      	adds	r4, #1
 8004338:	b2e4      	uxtb	r4, r4
 800433a:	2c0a      	cmp	r4, #10
 800433c:	d81d      	bhi.n	800437a <DisplayPortsDir+0x7a>
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800433e:	1e73      	subs	r3, r6, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <DisplayPortsDir+0xc4>)
 8004344:	5a9a      	ldrh	r2, [r3, r2]
 8004346:	1e61      	subs	r1, r4, #1
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	410b      	asrs	r3, r1
 800434e:	4213      	tst	r3, r2
 8004350:	d0f1      	beq.n	8004336 <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8004352:	4f1a      	ldr	r7, [pc, #104]	; (80043bc <DisplayPortsDir+0xbc>)
 8004354:	0023      	movs	r3, r4
 8004356:	0032      	movs	r2, r6
 8004358:	491b      	ldr	r1, [pc, #108]	; (80043c8 <DisplayPortsDir+0xc8>)
 800435a:	0038      	movs	r0, r7
 800435c:	f010 f850 	bl	8014400 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004360:	0038      	movs	r0, r7
 8004362:	f7fb fed9 	bl	8000118 <strlen>
 8004366:	b282      	uxth	r2, r0
 8004368:	2301      	movs	r3, #1
 800436a:	425b      	negs	r3, r3
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	3333      	adds	r3, #51	; 0x33
 8004370:	0039      	movs	r1, r7
 8004372:	0028      	movs	r0, r5
 8004374:	f00a fc74 	bl	800ec60 <writePxMutex>
 8004378:	e7dd      	b.n	8004336 <DisplayPortsDir+0x36>
	for (uint8_t i=1 ; i<=N ; i++) 
 800437a:	3601      	adds	r6, #1
 800437c:	b2f6      	uxtb	r6, r6
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <DisplayPortsDir+0xcc>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	42b3      	cmp	r3, r6
 8004384:	d301      	bcc.n	800438a <DisplayPortsDir+0x8a>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8004386:	2401      	movs	r4, #1
 8004388:	e7d7      	b.n	800433a <DisplayPortsDir+0x3a>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 800438a:	4c0c      	ldr	r4, [pc, #48]	; (80043bc <DisplayPortsDir+0xbc>)
 800438c:	4910      	ldr	r1, [pc, #64]	; (80043d0 <DisplayPortsDir+0xd0>)
 800438e:	0023      	movs	r3, r4
 8004390:	000a      	movs	r2, r1
 8004392:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004394:	c343      	stmia	r3!, {r0, r1, r6}
 8004396:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004398:	c343      	stmia	r3!, {r0, r1, r6}
 800439a:	ca03      	ldmia	r2!, {r0, r1}
 800439c:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800439e:	0020      	movs	r0, r4
 80043a0:	f7fb feba 	bl	8000118 <strlen>
 80043a4:	b282      	uxth	r2, r0
 80043a6:	2301      	movs	r3, #1
 80043a8:	425b      	negs	r3, r3
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	3333      	adds	r3, #51	; 0x33
 80043ae:	0021      	movs	r1, r4
 80043b0:	0028      	movs	r0, r5
 80043b2:	f00a fc55 	bl	800ec60 <writePxMutex>
}
 80043b6:	b003      	add	sp, #12
 80043b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000d60 	.word	0x20000d60
 80043c0:	08018b54 	.word	0x08018b54
 80043c4:	20006e08 	.word	0x20006e08
 80043c8:	08018b70 	.word	0x08018b70
 80043cc:	2000001c 	.word	0x2000001c
 80043d0:	08018b84 	.word	0x08018b84

080043d4 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	46c6      	mov	lr, r8
 80043d8:	b500      	push	{lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80043de:	f00a fe95 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 80043e2:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 80043e4:	2300      	movs	r3, #0
 80043e6:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 80043e8:	4b93      	ldr	r3, [pc, #588]	; (8004638 <DisplayModuleStatus+0x264>)
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4d93      	ldr	r5, [pc, #588]	; (800463c <DisplayModuleStatus+0x268>)
 80043ee:	4994      	ldr	r1, [pc, #592]	; (8004640 <DisplayModuleStatus+0x26c>)
 80043f0:	0028      	movs	r0, r5
 80043f2:	f010 f805 	bl	8014400 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80043f6:	0029      	movs	r1, r5
 80043f8:	0020      	movs	r0, r4
 80043fa:	f010 f821 	bl	8014440 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80043fe:	4b91      	ldr	r3, [pc, #580]	; (8004644 <DisplayModuleStatus+0x270>)
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	4991      	ldr	r1, [pc, #580]	; (8004648 <DisplayModuleStatus+0x274>)
 8004404:	0028      	movs	r0, r5
 8004406:	f00f fffb 	bl	8014400 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800440a:	0029      	movs	r1, r5
 800440c:	0020      	movs	r0, r4
 800440e:	f010 f817 	bl	8014440 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 8004412:	2304      	movs	r3, #4
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	3b02      	subs	r3, #2
 8004418:	2200      	movs	r2, #0
 800441a:	498c      	ldr	r1, [pc, #560]	; (800464c <DisplayModuleStatus+0x278>)
 800441c:	0028      	movs	r0, r5
 800441e:	f00f ffef 	bl	8014400 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004422:	0029      	movs	r1, r5
 8004424:	0020      	movs	r0, r4
 8004426:	f010 f80b 	bl	8014440 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 800442a:	4a89      	ldr	r2, [pc, #548]	; (8004650 <DisplayModuleStatus+0x27c>)
 800442c:	4989      	ldr	r1, [pc, #548]	; (8004654 <DisplayModuleStatus+0x280>)
 800442e:	0028      	movs	r0, r5
 8004430:	f00f ffe6 	bl	8014400 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004434:	0029      	movs	r1, r5
 8004436:	0020      	movs	r0, r4
 8004438:	f010 f802 	bl	8014440 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 800443c:	4a86      	ldr	r2, [pc, #536]	; (8004658 <DisplayModuleStatus+0x284>)
 800443e:	4987      	ldr	r1, [pc, #540]	; (800465c <DisplayModuleStatus+0x288>)
 8004440:	0028      	movs	r0, r5
 8004442:	f00f ffdd 	bl	8014400 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004446:	0029      	movs	r1, r5
 8004448:	0020      	movs	r0, r4
 800444a:	f00f fff9 	bl	8014440 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 800444e:	4b84      	ldr	r3, [pc, #528]	; (8004660 <DisplayModuleStatus+0x28c>)
 8004450:	002a      	movs	r2, r5
 8004452:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004454:	c243      	stmia	r2!, {r0, r1, r6}
 8004456:	0019      	movs	r1, r3
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	888b      	ldrh	r3, [r1, #4]
 800445e:	8093      	strh	r3, [r2, #4]
 8004460:	798b      	ldrb	r3, [r1, #6]
 8004462:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8004464:	0029      	movs	r1, r5
 8004466:	0020      	movs	r0, r4
 8004468:	f00f ffea 	bl	8014440 <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800446c:	2501      	movs	r5, #1
 800446e:	e00d      	b.n	800448c <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage, "P%d: ", i);
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8004470:	4b72      	ldr	r3, [pc, #456]	; (800463c <DisplayModuleStatus+0x268>)
 8004472:	4a7c      	ldr	r2, [pc, #496]	; (8004664 <DisplayModuleStatus+0x290>)
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	6019      	str	r1, [r3, #0]
 8004478:	8891      	ldrh	r1, [r2, #4]
 800447a:	8099      	strh	r1, [r3, #4]
 800447c:	7992      	ldrb	r2, [r2, #6]
 800447e:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8004480:	496e      	ldr	r1, [pc, #440]	; (800463c <DisplayModuleStatus+0x268>)
 8004482:	0020      	movs	r0, r4
 8004484:	f00f ffdc 	bl	8014440 <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8004488:	3501      	adds	r5, #1
 800448a:	b2ed      	uxtb	r5, r5
 800448c:	2d05      	cmp	r5, #5
 800448e:	d83b      	bhi.n	8004508 <DisplayModuleStatus+0x134>
		sprintf(pcUserMessage, "P%d: ", i);
 8004490:	4e6a      	ldr	r6, [pc, #424]	; (800463c <DisplayModuleStatus+0x268>)
 8004492:	002a      	movs	r2, r5
 8004494:	4974      	ldr	r1, [pc, #464]	; (8004668 <DisplayModuleStatus+0x294>)
 8004496:	0030      	movs	r0, r6
 8004498:	f00f ffb2 	bl	8014400 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 800449c:	0031      	movs	r1, r6
 800449e:	0020      	movs	r0, r4
 80044a0:	f00f ffce 	bl	8014440 <strcat>
		switch (portStatus[i])
 80044a4:	4b71      	ldr	r3, [pc, #452]	; (800466c <DisplayModuleStatus+0x298>)
 80044a6:	5d5b      	ldrb	r3, [r3, r5]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d8e9      	bhi.n	8004480 <DisplayModuleStatus+0xac>
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4a70      	ldr	r2, [pc, #448]	; (8004670 <DisplayModuleStatus+0x29c>)
 80044b0:	58d3      	ldr	r3, [r2, r3]
 80044b2:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 80044b4:	4961      	ldr	r1, [pc, #388]	; (800463c <DisplayModuleStatus+0x268>)
 80044b6:	486f      	ldr	r0, [pc, #444]	; (8004674 <DisplayModuleStatus+0x2a0>)
 80044b8:	000b      	movs	r3, r1
 80044ba:	0002      	movs	r2, r0
 80044bc:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044be:	c343      	stmia	r3!, {r0, r1, r6}
 80044c0:	ca03      	ldmia	r2!, {r0, r1}
 80044c2:	c303      	stmia	r3!, {r0, r1}
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e7da      	b.n	8004480 <DisplayModuleStatus+0xac>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 80044ca:	4a5c      	ldr	r2, [pc, #368]	; (800463c <DisplayModuleStatus+0x268>)
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <DisplayModuleStatus+0x2a4>)
 80044ce:	cb43      	ldmia	r3!, {r0, r1, r6}
 80044d0:	c243      	stmia	r2!, {r0, r1, r6}
 80044d2:	e7d5      	b.n	8004480 <DisplayModuleStatus+0xac>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 80044d4:	4959      	ldr	r1, [pc, #356]	; (800463c <DisplayModuleStatus+0x268>)
 80044d6:	4869      	ldr	r0, [pc, #420]	; (800467c <DisplayModuleStatus+0x2a8>)
 80044d8:	000b      	movs	r3, r1
 80044da:	0002      	movs	r2, r0
 80044dc:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044de:	c343      	stmia	r3!, {r0, r1, r6}
 80044e0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044e2:	c343      	stmia	r3!, {r0, r1, r6}
 80044e4:	8812      	ldrh	r2, [r2, #0]
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	e7ca      	b.n	8004480 <DisplayModuleStatus+0xac>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 80044ea:	4954      	ldr	r1, [pc, #336]	; (800463c <DisplayModuleStatus+0x268>)
 80044ec:	4864      	ldr	r0, [pc, #400]	; (8004680 <DisplayModuleStatus+0x2ac>)
 80044ee:	000b      	movs	r3, r1
 80044f0:	0002      	movs	r2, r0
 80044f2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044f4:	c343      	stmia	r3!, {r0, r1, r6}
 80044f6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044f8:	c343      	stmia	r3!, {r0, r1, r6}
 80044fa:	6811      	ldr	r1, [r2, #0]
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	8891      	ldrh	r1, [r2, #4]
 8004500:	8099      	strh	r1, [r3, #4]
 8004502:	7992      	ldrb	r2, [r2, #6]
 8004504:	719a      	strb	r2, [r3, #6]
 8004506:	e7bb      	b.n	8004480 <DisplayModuleStatus+0xac>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8004508:	494c      	ldr	r1, [pc, #304]	; (800463c <DisplayModuleStatus+0x268>)
 800450a:	485e      	ldr	r0, [pc, #376]	; (8004684 <DisplayModuleStatus+0x2b0>)
 800450c:	000b      	movs	r3, r1
 800450e:	0002      	movs	r2, r0
 8004510:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004512:	c361      	stmia	r3!, {r0, r5, r6}
 8004514:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004516:	c361      	stmia	r3!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004518:	0020      	movs	r0, r4
 800451a:	f00f ff91 	bl	8014440 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 800451e:	2601      	movs	r6, #1
 8004520:	e00b      	b.n	800453a <DisplayModuleStatus+0x166>
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8004522:	4d46      	ldr	r5, [pc, #280]	; (800463c <DisplayModuleStatus+0x268>)
 8004524:	0032      	movs	r2, r6
 8004526:	4958      	ldr	r1, [pc, #352]	; (8004688 <DisplayModuleStatus+0x2b4>)
 8004528:	0028      	movs	r0, r5
 800452a:	f00f ff69 	bl	8014400 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 800452e:	0029      	movs	r1, r5
 8004530:	0020      	movs	r0, r4
 8004532:	f00f ff85 	bl	8014440 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8004536:	3601      	adds	r6, #1
 8004538:	b2f6      	uxtb	r6, r6
 800453a:	2e06      	cmp	r6, #6
 800453c:	d822      	bhi.n	8004584 <DisplayModuleStatus+0x1b0>
		if (streamDMA[i-1].Instance == 0) {
 800453e:	1e75      	subs	r5, r6, #1
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	1b5b      	subs	r3, r3, r5
 8004544:	00da      	lsls	r2, r3, #3
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <DisplayModuleStatus+0x2b8>)
 8004548:	58d3      	ldr	r3, [r2, r3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0e9      	beq.n	8004522 <DisplayModuleStatus+0x14e>
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 800454e:	00eb      	lsls	r3, r5, #3
 8004550:	1b5b      	subs	r3, r3, r5
 8004552:	00da      	lsls	r2, r3, #3
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <DisplayModuleStatus+0x2b8>)
 8004556:	189b      	adds	r3, r3, r2
 8004558:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800455a:	f006 ff81 	bl	800b460 <GetPort>
 800455e:	9003      	str	r0, [sp, #12]
 8004560:	00ad      	lsls	r5, r5, #2
 8004562:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <DisplayModuleStatus+0x2bc>)
 8004564:	58e8      	ldr	r0, [r5, r3]
 8004566:	f006 ff7b 	bl	800b460 <GetPort>
 800456a:	4d34      	ldr	r5, [pc, #208]	; (800463c <DisplayModuleStatus+0x268>)
 800456c:	9000      	str	r0, [sp, #0]
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	0032      	movs	r2, r6
 8004572:	4948      	ldr	r1, [pc, #288]	; (8004694 <DisplayModuleStatus+0x2c0>)
 8004574:	0028      	movs	r0, r5
 8004576:	f00f ff43 	bl	8014400 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 800457a:	0029      	movs	r1, r5
 800457c:	0020      	movs	r0, r4
 800457e:	f00f ff5f 	bl	8014440 <strcat>
 8004582:	e7d8      	b.n	8004536 <DisplayModuleStatus+0x162>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 8004584:	0020      	movs	r0, r4
 8004586:	f7fb fdc7 	bl	8000118 <strlen>
 800458a:	1820      	adds	r0, r4, r0
 800458c:	2203      	movs	r2, #3
 800458e:	4942      	ldr	r1, [pc, #264]	; (8004698 <DisplayModuleStatus+0x2c4>)
 8004590:	f00f fd33 	bl	8013ffa <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8004594:	0020      	movs	r0, r4
 8004596:	f7fb fdbf 	bl	8000118 <strlen>
 800459a:	1820      	adds	r0, r4, r0
 800459c:	221d      	movs	r2, #29
 800459e:	493f      	ldr	r1, [pc, #252]	; (800469c <DisplayModuleStatus+0x2c8>)
 80045a0:	f00f fd2b 	bl	8013ffa <memcpy>
	temp = strlen( (char *) pcOutputString);
 80045a4:	0020      	movs	r0, r4
 80045a6:	f7fb fdb7 	bl	8000118 <strlen>
 80045aa:	4680      	mov	r8, r0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80045ac:	2501      	movs	r5, #1
 80045ae:	e001      	b.n	80045b4 <DisplayModuleStatus+0x1e0>
 80045b0:	3501      	adds	r5, #1
 80045b2:	b2ed      	uxtb	r5, r5
 80045b4:	2d05      	cmp	r5, #5
 80045b6:	d816      	bhi.n	80045e6 <DisplayModuleStatus+0x212>
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <DisplayModuleStatus+0x264>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4a37      	ldr	r2, [pc, #220]	; (80046a0 <DisplayModuleStatus+0x2cc>)
 80045c2:	5a9a      	ldrh	r2, [r3, r2]
 80045c4:	1e69      	subs	r1, r5, #1
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	410b      	asrs	r3, r1
 80045cc:	4213      	tst	r3, r2
 80045ce:	d0ef      	beq.n	80045b0 <DisplayModuleStatus+0x1dc>
		{
			sprintf(pcUserMessage, "P%d ", p);
 80045d0:	4e1a      	ldr	r6, [pc, #104]	; (800463c <DisplayModuleStatus+0x268>)
 80045d2:	002a      	movs	r2, r5
 80045d4:	4933      	ldr	r1, [pc, #204]	; (80046a4 <DisplayModuleStatus+0x2d0>)
 80045d6:	0030      	movs	r0, r6
 80045d8:	f00f ff12 	bl	8014400 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 80045dc:	0031      	movs	r1, r6
 80045de:	0020      	movs	r0, r4
 80045e0:	f00f ff2e 	bl	8014440 <strcat>
 80045e4:	e7e4      	b.n	80045b0 <DisplayModuleStatus+0x1dc>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 80045e6:	0020      	movs	r0, r4
 80045e8:	f7fb fd96 	bl	8000118 <strlen>
 80045ec:	4643      	mov	r3, r8
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	4298      	cmp	r0, r3
 80045f4:	d00d      	beq.n	8004612 <DisplayModuleStatus+0x23e>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 80045f6:	0020      	movs	r0, r4
 80045f8:	f7fb fd8e 	bl	8000118 <strlen>
 80045fc:	1820      	adds	r0, r4, r0
 80045fe:	2203      	movs	r2, #3
 8004600:	4925      	ldr	r1, [pc, #148]	; (8004698 <DisplayModuleStatus+0x2c4>)
 8004602:	f00f fcfa 	bl	8013ffa <memcpy>
	
	/* Display output */
	if (port)
 8004606:	2f00      	cmp	r7, #0
 8004608:	d109      	bne.n	800461e <DisplayModuleStatus+0x24a>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 800460a:	b004      	add	sp, #16
 800460c:	bc04      	pop	{r2}
 800460e:	4690      	mov	r8, r2
 8004610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8004612:	1820      	adds	r0, r4, r0
 8004614:	2205      	movs	r2, #5
 8004616:	4924      	ldr	r1, [pc, #144]	; (80046a8 <DisplayModuleStatus+0x2d4>)
 8004618:	f00f fcef 	bl	8013ffa <memcpy>
 800461c:	e7eb      	b.n	80045f6 <DisplayModuleStatus+0x222>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 800461e:	0020      	movs	r0, r4
 8004620:	f7fb fd7a 	bl	8000118 <strlen>
 8004624:	b282      	uxth	r2, r0
 8004626:	2301      	movs	r3, #1
 8004628:	425b      	negs	r3, r3
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	3333      	adds	r3, #51	; 0x33
 800462e:	0021      	movs	r1, r4
 8004630:	0038      	movs	r0, r7
 8004632:	f00a fb15 	bl	800ec60 <writePxMutex>
}
 8004636:	e7e8      	b.n	800460a <DisplayModuleStatus+0x236>
 8004638:	20000070 	.word	0x20000070
 800463c:	20000d60 	.word	0x20000d60
 8004640:	08018998 	.word	0x08018998
 8004644:	20000af7 	.word	0x20000af7
 8004648:	080189b4 	.word	0x080189b4
 800464c:	080189d0 	.word	0x080189d0
 8004650:	080189f0 	.word	0x080189f0
 8004654:	080189fc 	.word	0x080189fc
 8004658:	08018a14 	.word	0x08018a14
 800465c:	08018a20 	.word	0x08018a20
 8004660:	08018a3c 	.word	0x08018a3c
 8004664:	08018a58 	.word	0x08018a58
 8004668:	08018a50 	.word	0x08018a50
 800466c:	20000db0 	.word	0x20000db0
 8004670:	08018974 	.word	0x08018974
 8004674:	08018a60 	.word	0x08018a60
 8004678:	08018a78 	.word	0x08018a78
 800467c:	08018a84 	.word	0x08018a84
 8004680:	08018aa0 	.word	0x08018aa0
 8004684:	08018ac0 	.word	0x08018ac0
 8004688:	08018ad8 	.word	0x08018ad8
 800468c:	200019a4 	.word	0x200019a4
 8004690:	200010ec 	.word	0x200010ec
 8004694:	08018af4 	.word	0x08018af4
 8004698:	08018a4c 	.word	0x08018a4c
 800469c:	08018b24 	.word	0x08018b24
 80046a0:	20006e08 	.word	0x20006e08
 80046a4:	08018b44 	.word	0x08018b44
 80046a8:	08018b4c 	.word	0x08018b4c

080046ac <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 80046b0:	4929      	ldr	r1, [pc, #164]	; (8004758 <GetID+0xac>)
 80046b2:	f7fb fd27 	bl	8000104 <strcmp>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d00a      	beq.n	80046d0 <GetID+0x24>
		return myID;
	else if(!strcmp(string, "all"))							
 80046ba:	4928      	ldr	r1, [pc, #160]	; (800475c <GetID+0xb0>)
 80046bc:	0028      	movs	r0, r5
 80046be:	f7fb fd21 	bl	8000104 <strcmp>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d044      	beq.n	8004750 <GetID+0xa4>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 80046c6:	782e      	ldrb	r6, [r5, #0]
 80046c8:	2e23      	cmp	r6, #35	; 0x23
 80046ca:	d004      	beq.n	80046d6 <GetID+0x2a>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 80046cc:	2400      	movs	r4, #0
 80046ce:	e016      	b.n	80046fe <GetID+0x52>
		return myID;
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <GetID+0xb4>)
 80046d2:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
		id = atol(string+1);
 80046d6:	1c68      	adds	r0, r5, #1
 80046d8:	f00f fa05 	bl	8013ae6 <atol>
 80046dc:	b2c0      	uxtb	r0, r0
		if (id > 0 && id <= N)
 80046de:	2800      	cmp	r0, #0
 80046e0:	d003      	beq.n	80046ea <GetID+0x3e>
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <GetID+0xb8>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4283      	cmp	r3, r0
 80046e8:	d205      	bcs.n	80046f6 <GetID+0x4a>
		else if (id == myID)
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <GetID+0xb4>)
 80046ec:	781c      	ldrb	r4, [r3, #0]
 80046ee:	4284      	cmp	r4, r0
 80046f0:	d130      	bne.n	8004754 <GetID+0xa8>
			return myID;
 80046f2:	b220      	sxth	r0, r4
 80046f4:	e7ee      	b.n	80046d4 <GetID+0x28>
			return id;
 80046f6:	b200      	sxth	r0, r0
 80046f8:	e7ec      	b.n	80046d4 <GetID+0x28>
		for (i=0 ; i<N ; i++) {
 80046fa:	3401      	adds	r4, #1
 80046fc:	b2e4      	uxtb	r4, r4
 80046fe:	4b19      	ldr	r3, [pc, #100]	; (8004764 <GetID+0xb8>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	42a3      	cmp	r3, r4
 8004704:	d90d      	bls.n	8004722 <GetID+0x76>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 8004706:	00a3      	lsls	r3, r4, #2
 8004708:	191b      	adds	r3, r3, r4
 800470a:	005a      	lsls	r2, r3, #1
 800470c:	4916      	ldr	r1, [pc, #88]	; (8004768 <GetID+0xbc>)
 800470e:	1889      	adds	r1, r1, r2
 8004710:	0028      	movs	r0, r5
 8004712:	f7fb fcf7 	bl	8000104 <strcmp>
 8004716:	2800      	cmp	r0, #0
 8004718:	d1ef      	bne.n	80046fa <GetID+0x4e>
 800471a:	2e00      	cmp	r6, #0
 800471c:	d0ed      	beq.n	80046fa <GetID+0x4e>
 800471e:	b220      	sxth	r0, r4
 8004720:	e7d8      	b.n	80046d4 <GetID+0x28>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8004722:	2600      	movs	r6, #0
 8004724:	2e09      	cmp	r6, #9
 8004726:	d811      	bhi.n	800474c <GetID+0xa0>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004728:	00b3      	lsls	r3, r6, #2
 800472a:	199b      	adds	r3, r3, r6
 800472c:	005a      	lsls	r2, r3, #1
 800472e:	490f      	ldr	r1, [pc, #60]	; (800476c <GetID+0xc0>)
 8004730:	1889      	adds	r1, r1, r2
 8004732:	0028      	movs	r0, r5
 8004734:	f7fb fce6 	bl	8000104 <strcmp>
 8004738:	2800      	cmp	r0, #0
 800473a:	d002      	beq.n	8004742 <GetID+0x96>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 800473c:	3601      	adds	r6, #1
 800473e:	b2f6      	uxtb	r6, r6
 8004740:	e7f0      	b.n	8004724 <GetID+0x78>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004742:	0234      	lsls	r4, r6, #8
 8004744:	20fe      	movs	r0, #254	; 0xfe
 8004746:	4320      	orrs	r0, r4
 8004748:	b200      	sxth	r0, r0
 800474a:	e7c3      	b.n	80046d4 <GetID+0x28>
		return BOS_ERR_WrongName;			
 800474c:	2064      	movs	r0, #100	; 0x64
 800474e:	e7c1      	b.n	80046d4 <GetID+0x28>
		return BOS_BROADCAST;				
 8004750:	20ff      	movs	r0, #255	; 0xff
 8004752:	e7bf      	b.n	80046d4 <GetID+0x28>
			return BOS_ERR_WrongID;				
 8004754:	2066      	movs	r0, #102	; 0x66
 8004756:	e7bd      	b.n	80046d4 <GetID+0x28>
 8004758:	08018bd8 	.word	0x08018bd8
 800475c:	08018bdc 	.word	0x08018bdc
 8004760:	20000070 	.word	0x20000070
 8004764:	2000001c 	.word	0x2000001c
 8004768:	20000d2c 	.word	0x20000d2c
 800476c:	20000c50 	.word	0x20000c50

08004770 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	0006      	movs	r6, r0
 8004774:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 8004776:	2400      	movs	r4, #0
 8004778:	2c03      	cmp	r4, #3
 800477a:	dc09      	bgt.n	8004790 <NameModule+0x20>
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 800477c:	00a3      	lsls	r3, r4, #2
 800477e:	4929      	ldr	r1, [pc, #164]	; (8004824 <NameModule+0xb4>)
 8004780:	18c9      	adds	r1, r1, r3
 8004782:	0028      	movs	r0, r5
 8004784:	f7fb fcbe 	bl	8000104 <strcmp>
 8004788:	2800      	cmp	r0, #0
 800478a:	d043      	beq.n	8004814 <NameModule+0xa4>
	for(i=0 ; i<NumOfKeywords ; i++)
 800478c:	3401      	adds	r4, #1
 800478e:	e7f3      	b.n	8004778 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8004790:	2401      	movs	r4, #1
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <NameModule+0xb8>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	42a3      	cmp	r3, r4
 8004798:	dd0b      	ble.n	80047b2 <NameModule+0x42>
	{
		if (!strcmp(alias, moduleAlias[i]))	
 800479a:	00a3      	lsls	r3, r4, #2
 800479c:	191b      	adds	r3, r3, r4
 800479e:	005a      	lsls	r2, r3, #1
 80047a0:	4922      	ldr	r1, [pc, #136]	; (800482c <NameModule+0xbc>)
 80047a2:	1889      	adds	r1, r1, r2
 80047a4:	0028      	movs	r0, r5
 80047a6:	f7fb fcad 	bl	8000104 <strcmp>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d034      	beq.n	8004818 <NameModule+0xa8>
	for(i=1 ; i<N ; i++)
 80047ae:	3401      	adds	r4, #1
 80047b0:	e7ef      	b.n	8004792 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80047b2:	2400      	movs	r4, #0
 80047b4:	2c09      	cmp	r4, #9
 80047b6:	dc0b      	bgt.n	80047d0 <NameModule+0x60>
	{
		if (!strcmp(alias, groupAlias[i]))	
 80047b8:	00a3      	lsls	r3, r4, #2
 80047ba:	191b      	adds	r3, r3, r4
 80047bc:	005a      	lsls	r2, r3, #1
 80047be:	491c      	ldr	r1, [pc, #112]	; (8004830 <NameModule+0xc0>)
 80047c0:	1889      	adds	r1, r1, r2
 80047c2:	0028      	movs	r0, r5
 80047c4:	f7fb fc9e 	bl	8000104 <strcmp>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d027      	beq.n	800481c <NameModule+0xac>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80047cc:	3401      	adds	r4, #1
 80047ce:	e7f1      	b.n	80047b4 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <NameModule+0xc4>)
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <NameModule+0xc8>)
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <NameModule+0xc4>)
 80047d8:	681c      	ldr	r4, [r3, #0]
 80047da:	2c00      	cmp	r4, #0
 80047dc:	d00f      	beq.n	80047fe <NameModule+0x8e>
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80047e2:	0038      	movs	r0, r7
 80047e4:	f7fb fc98 	bl	8000118 <strlen>
 80047e8:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80047ea:	0039      	movs	r1, r7
 80047ec:	0028      	movs	r0, r5
 80047ee:	f00f fe4b 	bl	8014488 <strncmp>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d014      	beq.n	8004820 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80047f6:	6862      	ldr	r2, [r4, #4]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <NameModule+0xc4>)
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e7eb      	b.n	80047d6 <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 80047fe:	00b3      	lsls	r3, r6, #2
 8004800:	199e      	adds	r6, r3, r6
 8004802:	0073      	lsls	r3, r6, #1
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <NameModule+0xbc>)
 8004806:	18c0      	adds	r0, r0, r3
 8004808:	0029      	movs	r1, r5
 800480a:	f00f fe35 	bl	8014478 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 800480e:	f7fe fe93 	bl	8003538 <SaveEEalias>
	
	return result;
 8004812:	e002      	b.n	800481a <NameModule+0xaa>
			return BOS_ERR_Keyword;
 8004814:	2006      	movs	r0, #6
 8004816:	e000      	b.n	800481a <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 8004818:	2007      	movs	r0, #7
}
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800481c:	2007      	movs	r0, #7
 800481e:	e7fc      	b.n	800481a <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 8004820:	2008      	movs	r0, #8
 8004822:	e7fa      	b.n	800481a <NameModule+0xaa>
 8004824:	08018988 	.word	0x08018988
 8004828:	2000001c 	.word	0x2000001c
 800482c:	20000d2c 	.word	0x20000d2c
 8004830:	20000c50 	.word	0x20000c50
 8004834:	20000db8 	.word	0x20000db8
 8004838:	20000118 	.word	0x20000118

0800483c <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	0006      	movs	r6, r0
 8004840:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004842:	2400      	movs	r4, #0
 8004844:	2c09      	cmp	r4, #9
 8004846:	dc14      	bgt.n	8004872 <AddModuleToGroup+0x36>
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8004848:	00a3      	lsls	r3, r4, #2
 800484a:	191b      	adds	r3, r3, r4
 800484c:	005a      	lsls	r2, r3, #1
 800484e:	4933      	ldr	r1, [pc, #204]	; (800491c <AddModuleToGroup+0xe0>)
 8004850:	1889      	adds	r1, r1, r2
 8004852:	0028      	movs	r0, r5
 8004854:	f7fb fc56 	bl	8000104 <strcmp>
 8004858:	2800      	cmp	r0, #0
 800485a:	d001      	beq.n	8004860 <AddModuleToGroup+0x24>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800485c:	3401      	adds	r4, #1
 800485e:	e7f1      	b.n	8004844 <AddModuleToGroup+0x8>
		{
			/* 1. Add this module to the group */
			groupModules[module-1] |= (0x0001<<i);	
 8004860:	3e01      	subs	r6, #1
 8004862:	2201      	movs	r2, #1
 8004864:	40a2      	lsls	r2, r4
 8004866:	492e      	ldr	r1, [pc, #184]	; (8004920 <AddModuleToGroup+0xe4>)
 8004868:	0076      	lsls	r6, r6, #1
 800486a:	5a73      	ldrh	r3, [r6, r1]
 800486c:	4313      	orrs	r3, r2
 800486e:	5273      	strh	r3, [r6, r1]

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
}
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j=0 ; j<NumOfKeywords ; j++)
 8004872:	2400      	movs	r4, #0
 8004874:	2c03      	cmp	r4, #3
 8004876:	dc09      	bgt.n	800488c <AddModuleToGroup+0x50>
		if (!strcmp(group, BOSkeywords[j]))	
 8004878:	00a3      	lsls	r3, r4, #2
 800487a:	492a      	ldr	r1, [pc, #168]	; (8004924 <AddModuleToGroup+0xe8>)
 800487c:	18c9      	adds	r1, r1, r3
 800487e:	0028      	movs	r0, r5
 8004880:	f7fb fc40 	bl	8000104 <strcmp>
 8004884:	2800      	cmp	r0, #0
 8004886:	d045      	beq.n	8004914 <AddModuleToGroup+0xd8>
	for(j=0 ; j<NumOfKeywords ; j++)
 8004888:	3401      	adds	r4, #1
 800488a:	e7f3      	b.n	8004874 <AddModuleToGroup+0x38>
	for(j=1 ; j<N ; j++)
 800488c:	2401      	movs	r4, #1
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <AddModuleToGroup+0xec>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	42a3      	cmp	r3, r4
 8004894:	dd0b      	ble.n	80048ae <AddModuleToGroup+0x72>
		if (!strcmp(group, moduleAlias[j]))	
 8004896:	00a3      	lsls	r3, r4, #2
 8004898:	191b      	adds	r3, r3, r4
 800489a:	005a      	lsls	r2, r3, #1
 800489c:	4923      	ldr	r1, [pc, #140]	; (800492c <AddModuleToGroup+0xf0>)
 800489e:	1889      	adds	r1, r1, r2
 80048a0:	0028      	movs	r0, r5
 80048a2:	f7fb fc2f 	bl	8000104 <strcmp>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d036      	beq.n	8004918 <AddModuleToGroup+0xdc>
	for(j=1 ; j<N ; j++)
 80048aa:	3401      	adds	r4, #1
 80048ac:	e7ef      	b.n	800488e <AddModuleToGroup+0x52>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <AddModuleToGroup+0xf4>)
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <AddModuleToGroup+0xf8>)
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e002      	b.n	80048bc <AddModuleToGroup+0x80>
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <AddModuleToGroup+0xf4>)
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <AddModuleToGroup+0xf4>)
 80048be:	681c      	ldr	r4, [r3, #0]
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d01c      	beq.n	80048fe <AddModuleToGroup+0xc2>
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80048c8:	0038      	movs	r0, r7
 80048ca:	f7fb fc25 	bl	8000118 <strlen>
 80048ce:	0002      	movs	r2, r0
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80048d0:	0039      	movs	r1, r7
 80048d2:	0028      	movs	r0, r5
 80048d4:	f00f fdd8 	bl	8014488 <strncmp>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1ec      	bne.n	80048b6 <AddModuleToGroup+0x7a>
			return BOS_ERR_ExistingCmd;
 80048dc:	2008      	movs	r0, #8
 80048de:	e7c7      	b.n	8004870 <AddModuleToGroup+0x34>
			strcpy(groupAlias[i], group);	
 80048e0:	480e      	ldr	r0, [pc, #56]	; (800491c <AddModuleToGroup+0xe0>)
 80048e2:	1880      	adds	r0, r0, r2
 80048e4:	0029      	movs	r1, r5
 80048e6:	f00f fdc7 	bl	8014478 <strcpy>
	groupModules[module-1] |= (0x0001<<i);
 80048ea:	3e01      	subs	r6, #1
 80048ec:	2201      	movs	r2, #1
 80048ee:	40a2      	lsls	r2, r4
 80048f0:	490b      	ldr	r1, [pc, #44]	; (8004920 <AddModuleToGroup+0xe4>)
 80048f2:	0076      	lsls	r6, r6, #1
 80048f4:	5a73      	ldrh	r3, [r6, r1]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	5273      	strh	r3, [r6, r1]
	return result;
 80048fa:	2000      	movs	r0, #0
 80048fc:	e7b8      	b.n	8004870 <AddModuleToGroup+0x34>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80048fe:	2c09      	cmp	r4, #9
 8004900:	dcf3      	bgt.n	80048ea <AddModuleToGroup+0xae>
		if (!groupAlias[i][0]) {	
 8004902:	00a3      	lsls	r3, r4, #2
 8004904:	191b      	adds	r3, r3, r4
 8004906:	005a      	lsls	r2, r3, #1
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <AddModuleToGroup+0xe0>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0e7      	beq.n	80048e0 <AddModuleToGroup+0xa4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004910:	3401      	adds	r4, #1
 8004912:	e7f4      	b.n	80048fe <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 8004914:	2006      	movs	r0, #6
 8004916:	e7ab      	b.n	8004870 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 8004918:	2007      	movs	r0, #7
 800491a:	e7a9      	b.n	8004870 <AddModuleToGroup+0x34>
 800491c:	20000c50 	.word	0x20000c50
 8004920:	20000cb4 	.word	0x20000cb4
 8004924:	08018988 	.word	0x08018988
 8004928:	2000001c 	.word	0x2000001c
 800492c:	20000d2c 	.word	0x20000d2c
 8004930:	20000dbc 	.word	0x20000dbc
 8004934:	20000118 	.word	0x20000118

08004938 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8004938:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 800493a:	2601      	movs	r6, #1
	BOS_Status result = BOS_OK; 
 800493c:	2500      	movs	r5, #0
	for (uint8_t i=1 ; i<=N ; i++) 
 800493e:	e01d      	b.n	800497c <ReadPortsDir+0x44>
			if (responseStatus != BOS_OK)	{
				result = BOS_ERR_NoResponse;
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8004940:	3401      	adds	r4, #1
 8004942:	b2e4      	uxtb	r4, r4
 8004944:	2c05      	cmp	r4, #5
 8004946:	d817      	bhi.n	8004978 <ReadPortsDir+0x40>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004948:	0020      	movs	r0, r4
 800494a:	f00a f96b 	bl	800ec24 <GetUart>
 800494e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	429a      	cmp	r2, r3
 8004956:	d1f3      	bne.n	8004940 <ReadPortsDir+0x8>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <ReadPortsDir+0x74>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	1e61      	subs	r1, r4, #1
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0212      	lsls	r2, r2, #8
 8004964:	410a      	asrs	r2, r1
 8004966:	0011      	movs	r1, r2
 8004968:	4811      	ldr	r0, [pc, #68]	; (80049b0 <ReadPortsDir+0x78>)
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	5a1a      	ldrh	r2, [r3, r0]
 800496e:	430a      	orrs	r2, r1
 8004970:	521a      	strh	r2, [r3, r0]
 8004972:	e7e5      	b.n	8004940 <ReadPortsDir+0x8>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8004974:	2401      	movs	r4, #1
 8004976:	e7e5      	b.n	8004944 <ReadPortsDir+0xc>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004978:	3601      	adds	r6, #1
 800497a:	b2f6      	uxtb	r6, r6
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <ReadPortsDir+0x7c>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	42b3      	cmp	r3, r6
 8004982:	d311      	bcc.n	80049a8 <ReadPortsDir+0x70>
		if (i != myID) {
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <ReadPortsDir+0x74>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	42b3      	cmp	r3, r6
 800498a:	d0f3      	beq.n	8004974 <ReadPortsDir+0x3c>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800498c:	2200      	movs	r2, #0
 800498e:	2113      	movs	r1, #19
 8004990:	0030      	movs	r0, r6
 8004992:	f004 fc95 	bl	80092c0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004996:	2032      	movs	r0, #50	; 0x32
 8004998:	f009 ffb0 	bl	800e8fc <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <ReadPortsDir+0x80>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0e9      	beq.n	8004978 <ReadPortsDir+0x40>
				result = BOS_ERR_NoResponse;
 80049a4:	2502      	movs	r5, #2
 80049a6:	e7e7      	b.n	8004978 <ReadPortsDir+0x40>
			}
		}
	}
	
	return result;
}
 80049a8:	0028      	movs	r0, r5
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	20000070 	.word	0x20000070
 80049b0:	20006e08 	.word	0x20006e08
 80049b4:	2000001c 	.word	0x2000001c
 80049b8:	20000dc8 	.word	0x20000dc8

080049bc <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 80049bc:	b530      	push	{r4, r5, lr}
 80049be:	b083      	sub	sp, #12
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 80049c0:	201e      	movs	r0, #30
 80049c2:	f00f f8cd 	bl	8013b60 <malloc>
 80049c6:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 80049c8:	221e      	movs	r2, #30
 80049ca:	2100      	movs	r1, #0
 80049cc:	f00f fb1e 	bl	801400c <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 80049d0:	4908      	ldr	r1, [pc, #32]	; (80049f4 <GetDateString+0x38>)
 80049d2:	7d0a      	ldrb	r2, [r1, #20]
 80049d4:	3a01      	subs	r2, #1
 80049d6:	7d8b      	ldrb	r3, [r1, #22]
 80049d8:	7d48      	ldrb	r0, [r1, #21]
 80049da:	8b09      	ldrh	r1, [r1, #24]
 80049dc:	0092      	lsls	r2, r2, #2
 80049de:	4d06      	ldr	r5, [pc, #24]	; (80049f8 <GetDateString+0x3c>)
 80049e0:	5952      	ldr	r2, [r2, r5]
 80049e2:	9101      	str	r1, [sp, #4]
 80049e4:	9000      	str	r0, [sp, #0]
 80049e6:	4905      	ldr	r1, [pc, #20]	; (80049fc <GetDateString+0x40>)
 80049e8:	0020      	movs	r0, r4
 80049ea:	f00f fd09 	bl	8014400 <sprintf>
  return buffer;
}
 80049ee:	0020      	movs	r0, r4
 80049f0:	b003      	add	sp, #12
 80049f2:	bd30      	pop	{r4, r5, pc}
 80049f4:	200069d4 	.word	0x200069d4
 80049f8:	08018ec0 	.word	0x08018ec0
 80049fc:	08018bf8 	.word	0x08018bf8

08004a00 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004a00:	b500      	push	{lr}
 8004a02:	b085      	sub	sp, #20
 8004a04:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <Bridge+0x24>)
 8004a08:	7819      	ldrb	r1, [r3, #0]
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	9303      	str	r3, [sp, #12]
 8004a0e:	3b02      	subs	r3, #2
 8004a10:	9302      	str	r3, [sp, #8]
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	3303      	adds	r3, #3
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	000b      	movs	r3, r1
 8004a1a:	f004 fc77 	bl	800930c <StartScastDMAStream>
}
 8004a1e:	b005      	add	sp, #20
 8004a20:	bd00      	pop	{pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	20000070 	.word	0x20000070

08004a28 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004a28:	b530      	push	{r4, r5, lr}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	0004      	movs	r4, r0
 8004a2e:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004a30:	2300      	movs	r3, #0
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7fe fedb 	bl	80037fc <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004a46:	1e62      	subs	r2, r4, #1
 8004a48:	00d3      	lsls	r3, r2, #3
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	00da      	lsls	r2, r3, #3
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <Unbridge+0x7c>)
 8004a50:	58d2      	ldr	r2, [r2, r3]
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d007      	beq.n	8004a66 <Unbridge+0x3e>
 8004a56:	1e69      	subs	r1, r5, #1
 8004a58:	00cb      	lsls	r3, r1, #3
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	00d9      	lsls	r1, r3, #3
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <Unbridge+0x7c>)
 8004a60:	58cb      	ldr	r3, [r1, r3]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <Unbridge+0x5c>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d115      	bne.n	8004a96 <Unbridge+0x6e>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
	else if (streamDMA[port2-1].Instance != 0)
 8004a6a:	1e6a      	subs	r2, r5, #1
 8004a6c:	00d3      	lsls	r3, r2, #3
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	00da      	lsls	r2, r3, #3
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <Unbridge+0x7c>)
 8004a74:	58d3      	ldr	r3, [r2, r3]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <Unbridge+0x78>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004a7a:	0028      	movs	r0, r5
 8004a7c:	f002 fe0c 	bl	8007698 <SwitchStreamDMAToMsg>
 8004a80:	2000      	movs	r0, #0
 8004a82:	e006      	b.n	8004a92 <Unbridge+0x6a>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004a84:	0020      	movs	r0, r4
 8004a86:	f002 fe07 	bl	8007698 <SwitchStreamDMAToMsg>
 8004a8a:	0028      	movs	r0, r5
 8004a8c:	f002 fe04 	bl	8007698 <SwitchStreamDMAToMsg>
 8004a90:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8004a92:	b007      	add	sp, #28
 8004a94:	bd30      	pop	{r4, r5, pc}
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004a96:	0020      	movs	r0, r4
 8004a98:	f002 fdfe 	bl	8007698 <SwitchStreamDMAToMsg>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e7f8      	b.n	8004a92 <Unbridge+0x6a>
	else {return BOS_ERR_WrongValue;}
 8004aa0:	2068      	movs	r0, #104	; 0x68
 8004aa2:	e7f6      	b.n	8004a92 <Unbridge+0x6a>
 8004aa4:	200019a4 	.word	0x200019a4

08004aa8 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	0007      	movs	r7, r0
	for(int i = 0; string[i]; i++){
 8004aac:	2500      	movs	r5, #0
 8004aae:	e001      	b.n	8004ab4 <StringToLowerCase+0xc>
		string[i] = tolower(string[i]);
 8004ab0:	7034      	strb	r4, [r6, #0]
	for(int i = 0; string[i]; i++){
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	197e      	adds	r6, r7, r5
 8004ab6:	7834      	ldrb	r4, [r6, #0]
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d009      	beq.n	8004ad0 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004abc:	f00f f842 	bl	8013b44 <__locale_ctype_ptr>
 8004ac0:	1900      	adds	r0, r0, r4
 8004ac2:	7842      	ldrb	r2, [r0, #1]
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d1f1      	bne.n	8004ab0 <StringToLowerCase+0x8>
 8004acc:	3420      	adds	r4, #32
 8004ace:	e7ef      	b.n	8004ab0 <StringToLowerCase+0x8>
	}
}
 8004ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ad4 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	46c6      	mov	lr, r8
 8004ad8:	b500      	push	{lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004ade:	4bd7      	ldr	r3, [pc, #860]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004ae0:	781c      	ldrb	r4, [r3, #0]
 8004ae2:	2c05      	cmp	r4, #5
 8004ae4:	d100      	bne.n	8004ae8 <ParseSnippetCondition+0x14>
 8004ae6:	e20d      	b.n	8004f04 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004ae8:	48d5      	ldr	r0, [pc, #852]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004aea:	00a3      	lsls	r3, r4, #2
 8004aec:	191a      	adds	r2, r3, r4
 8004aee:	0091      	lsls	r1, r2, #2
 8004af0:	2200      	movs	r2, #0
 8004af2:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004af4:	1840      	adds	r0, r0, r1
 8004af6:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004af8:	3002      	adds	r0, #2
 8004afa:	3204      	adds	r2, #4
 8004afc:	2100      	movs	r1, #0
 8004afe:	f00f fa85 	bl	801400c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004b02:	782b      	ldrb	r3, [r5, #0]
 8004b04:	2b62      	cmp	r3, #98	; 0x62
 8004b06:	d102      	bne.n	8004b0e <ParseSnippetCondition+0x3a>
 8004b08:	78ab      	ldrb	r3, [r5, #2]
 8004b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0c:	d04f      	beq.n	8004bae <ParseSnippetCondition+0xda>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004b0e:	4ecd      	ldr	r6, [pc, #820]	; (8004e44 <ParseSnippetCondition+0x370>)
 8004b10:	0029      	movs	r1, r5
 8004b12:	0030      	movs	r0, r6
 8004b14:	f00f fcb0 	bl	8014478 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004b18:	4ccb      	ldr	r4, [pc, #812]	; (8004e48 <ParseSnippetCondition+0x374>)
 8004b1a:	0021      	movs	r1, r4
 8004b1c:	0030      	movs	r0, r6
 8004b1e:	f010 fb2b 	bl	8015178 <strtok>
 8004b22:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8004b24:	0021      	movs	r1, r4
 8004b26:	2000      	movs	r0, #0
 8004b28:	f010 fb26 	bl	8015178 <strtok>
 8004b2c:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004b2e:	0021      	movs	r1, r4
 8004b30:	2000      	movs	r0, #0
 8004b32:	f010 fb21 	bl	8015178 <strtok>
 8004b36:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004b38:	2d00      	cmp	r5, #0
 8004b3a:	d100      	bne.n	8004b3e <ParseSnippetCondition+0x6a>
 8004b3c:	e1e9      	b.n	8004f12 <ParseSnippetCondition+0x43e>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004b3e:	0028      	movs	r0, r5
 8004b40:	f7ff f86c 	bl	8003c1c <IsModuleParameter>
 8004b44:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004b46:	d002      	beq.n	8004b4e <ParseSnippetCondition+0x7a>
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d100      	bne.n	8004b4e <ParseSnippetCondition+0x7a>
 8004b4c:	e1ac      	b.n	8004ea8 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			} 
			else if (secondPart != NULL && thirdPart != NULL) 
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d100      	bne.n	8004b54 <ParseSnippetCondition+0x80>
 8004b52:	e1e0      	b.n	8004f16 <ParseSnippetCondition+0x442>
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	d100      	bne.n	8004b5a <ParseSnippetCondition+0x86>
 8004b58:	e1df      	b.n	8004f1a <ParseSnippetCondition+0x446>
			{
				modPar2 = IsModuleParameter(thirdPart);
 8004b5a:	0020      	movs	r0, r4
 8004b5c:	f7ff f85e 	bl	8003c1c <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d100      	bne.n	8004b66 <ParseSnippetCondition+0x92>
 8004b64:	e1b1      	b.n	8004eca <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b66:	4bb5      	ldr	r3, [pc, #724]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004b68:	7819      	ldrb	r1, [r3, #0]
 8004b6a:	4ab5      	ldr	r2, [pc, #724]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	185f      	adds	r7, r3, r1
 8004b70:	00bc      	lsls	r4, r7, #2
 8004b72:	2704      	movs	r7, #4
 8004b74:	54a7      	strb	r7, [r4, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004b76:	1914      	adds	r4, r2, r4
 8004b78:	70e5      	strb	r5, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004b7a:	71e0      	strb	r0, [r4, #7]
					// Extract the constant
					float constant = atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}				
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004b7c:	4daf      	ldr	r5, [pc, #700]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004b7e:	782c      	ldrb	r4, [r5, #0]
 8004b80:	0030      	movs	r0, r6
 8004b82:	f7ff f865 	bl	8003c50 <IsMathOperator>
 8004b86:	4aae      	ldr	r2, [pc, #696]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004b88:	00a1      	lsls	r1, r4, #2
 8004b8a:	1909      	adds	r1, r1, r4
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	18d3      	adds	r3, r2, r3
 8004b90:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b92:	782b      	ldrb	r3, [r5, #0]
 8004b94:	0099      	lsls	r1, r3, #2
 8004b96:	18c9      	adds	r1, r1, r3
 8004b98:	0088      	lsls	r0, r1, #2
 8004b9a:	1812      	adds	r2, r2, r0
 8004b9c:	7852      	ldrb	r2, [r2, #1]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d100      	bne.n	8004ba4 <ParseSnippetCondition+0xd0>
 8004ba2:	e1bc      	b.n	8004f1e <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4aa5      	ldr	r2, [pc, #660]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004ba8:	7013      	strb	r3, [r2, #0]
				return BOS_OK;				
 8004baa:	2000      	movs	r0, #0
 8004bac:	e1ab      	b.n	8004f06 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004bae:	786e      	ldrb	r6, [r5, #1]
 8004bb0:	3e30      	subs	r6, #48	; 0x30
 8004bb2:	b2f6      	uxtb	r6, r6
 8004bb4:	2e05      	cmp	r6, #5
 8004bb6:	d900      	bls.n	8004bba <ParseSnippetCondition+0xe6>
 8004bb8:	e1a9      	b.n	8004f0e <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bba:	4ba1      	ldr	r3, [pc, #644]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004bbc:	00a2      	lsls	r2, r4, #2
 8004bbe:	1910      	adds	r0, r2, r4
 8004bc0:	0081      	lsls	r1, r0, #2
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004bc6:	185b      	adds	r3, r3, r1
 8004bc8:	2200      	movs	r2, #0
 8004bca:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004bcc:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004bce:	1cef      	adds	r7, r5, #3
 8004bd0:	3207      	adds	r2, #7
 8004bd2:	499e      	ldr	r1, [pc, #632]	; (8004e4c <ParseSnippetCondition+0x378>)
 8004bd4:	0038      	movs	r0, r7
 8004bd6:	f00f fc57 	bl	8014488 <strncmp>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d122      	bne.n	8004c24 <ParseSnippetCondition+0x150>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004bde:	00a3      	lsls	r3, r4, #2
 8004be0:	191c      	adds	r4, r3, r4
 8004be2:	00a2      	lsls	r2, r4, #2
 8004be4:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	2205      	movs	r2, #5
 8004bea:	70da      	strb	r2, [r3, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004bec:	00f2      	lsls	r2, r6, #3
 8004bee:	1992      	adds	r2, r2, r6
 8004bf0:	4b97      	ldr	r3, [pc, #604]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	7a1b      	ldrb	r3, [r3, #8]
 8004bf6:	07db      	lsls	r3, r3, #31
 8004bf8:	d505      	bpl.n	8004c06 <ParseSnippetCondition+0x132>
				status = BOS_OK;
 8004bfa:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004bfc:	4a8f      	ldr	r2, [pc, #572]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004bfe:	7813      	ldrb	r3, [r2, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	7013      	strb	r3, [r2, #0]
 8004c04:	e17f      	b.n	8004f06 <ParseSnippetCondition+0x432>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c06:	2301      	movs	r3, #1
 8004c08:	9305      	str	r3, [sp, #20]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	9303      	str	r3, [sp, #12]
 8004c10:	9302      	str	r3, [sp, #8]
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2101      	movs	r1, #1
 8004c1a:	0030      	movs	r0, r6
 8004c1c:	f003 fe9c 	bl	8008958 <SetButtonEvents>
				status = BOS_OK;
 8004c20:	2000      	movs	r0, #0
 8004c22:	e7eb      	b.n	8004bfc <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004c24:	220e      	movs	r2, #14
 8004c26:	498b      	ldr	r1, [pc, #556]	; (8004e54 <ParseSnippetCondition+0x380>)
 8004c28:	0038      	movs	r0, r7
 8004c2a:	f00f fc2d 	bl	8014488 <strncmp>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d11e      	bne.n	8004c70 <ParseSnippetCondition+0x19c>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004c32:	00a3      	lsls	r3, r4, #2
 8004c34:	191c      	adds	r4, r3, r4
 8004c36:	00a2      	lsls	r2, r4, #2
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	70da      	strb	r2, [r3, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c40:	00f2      	lsls	r2, r6, #3
 8004c42:	1992      	adds	r2, r2, r6
 8004c44:	4b82      	ldr	r3, [pc, #520]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	7a1b      	ldrb	r3, [r3, #8]
 8004c4a:	079b      	lsls	r3, r3, #30
 8004c4c:	d501      	bpl.n	8004c52 <ParseSnippetCondition+0x17e>
				status = BOS_OK;					
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7d4      	b.n	8004bfc <ParseSnippetCondition+0x128>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c52:	2301      	movs	r3, #1
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2201      	movs	r2, #1
 8004c64:	2100      	movs	r1, #0
 8004c66:	0030      	movs	r0, r6
 8004c68:	f003 fe76 	bl	8008958 <SetButtonEvents>
				status = BOS_OK;					
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e7c5      	b.n	8004bfc <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004c70:	220c      	movs	r2, #12
 8004c72:	4979      	ldr	r1, [pc, #484]	; (8004e58 <ParseSnippetCondition+0x384>)
 8004c74:	0038      	movs	r0, r7
 8004c76:	f00f fc07 	bl	8014488 <strncmp>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d17b      	bne.n	8004d76 <ParseSnippetCondition+0x2a2>
				if (!button[port].pressedX1Sec) {	
 8004c7e:	00f2      	lsls	r2, r6, #3
 8004c80:	1992      	adds	r2, r2, r6
 8004c82:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	789b      	ldrb	r3, [r3, #2]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00f      	beq.n	8004cac <ParseSnippetCondition+0x1d8>
				} else if (!button[port].pressedX2Sec) {	
 8004c8c:	00f2      	lsls	r2, r6, #3
 8004c8e:	1992      	adds	r2, r2, r6
 8004c90:	4b6f      	ldr	r3, [pc, #444]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d029      	beq.n	8004cee <ParseSnippetCondition+0x21a>
				} else if (!button[port].pressedX3Sec) {	
 8004c9a:	00f2      	lsls	r2, r6, #3
 8004c9c:	1992      	adds	r2, r2, r6
 8004c9e:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	791b      	ldrb	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d044      	beq.n	8004d32 <ParseSnippetCondition+0x25e>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ca8:	200c      	movs	r0, #12
 8004caa:	e7a7      	b.n	8004bfc <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004cac:	4f64      	ldr	r7, [pc, #400]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004cae:	00a3      	lsls	r3, r4, #2
 8004cb0:	191c      	adds	r4, r3, r4
 8004cb2:	00a3      	lsls	r3, r4, #2
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2209      	movs	r2, #9
 8004cb8:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004cba:	0028      	movs	r0, r5
 8004cbc:	300f      	adds	r0, #15
 8004cbe:	f00e ff0c 	bl	8013ada <atoi>
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004cc4:	7819      	ldrb	r1, [r3, #0]
 8004cc6:	b2c3      	uxtb	r3, r0
 8004cc8:	008a      	lsls	r2, r1, #2
 8004cca:	1852      	adds	r2, r2, r1
 8004ccc:	0091      	lsls	r1, r2, #2
 8004cce:	187f      	adds	r7, r7, r1
 8004cd0:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	9205      	str	r2, [sp, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	9204      	str	r2, [sp, #16]
 8004cda:	9203      	str	r2, [sp, #12]
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9201      	str	r2, [sp, #4]
 8004ce0:	9200      	str	r2, [sp, #0]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	0030      	movs	r0, r6
 8004ce6:	f003 fe37 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;
 8004cea:	2000      	movs	r0, #0
 8004cec:	e786      	b.n	8004bfc <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004cee:	4f54      	ldr	r7, [pc, #336]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004cf0:	00a3      	lsls	r3, r4, #2
 8004cf2:	191c      	adds	r4, r3, r4
 8004cf4:	00a3      	lsls	r3, r4, #2
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004cfc:	0028      	movs	r0, r5
 8004cfe:	300f      	adds	r0, #15
 8004d00:	f00e feeb 	bl	8013ada <atoi>
 8004d04:	4b4d      	ldr	r3, [pc, #308]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	b2c0      	uxtb	r0, r0
 8004d0a:	0093      	lsls	r3, r2, #2
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	009a      	lsls	r2, r3, #2
 8004d10:	18bf      	adds	r7, r7, r2
 8004d12:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d14:	2301      	movs	r3, #1
 8004d16:	9305      	str	r3, [sp, #20]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	9000      	str	r0, [sp, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	0030      	movs	r0, r6
 8004d2a:	f003 fe15 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;		
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e764      	b.n	8004bfc <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004d32:	4f43      	ldr	r7, [pc, #268]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004d34:	00a3      	lsls	r3, r4, #2
 8004d36:	191c      	adds	r4, r3, r4
 8004d38:	00a3      	lsls	r3, r4, #2
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	220b      	movs	r2, #11
 8004d3e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d40:	0028      	movs	r0, r5
 8004d42:	300f      	adds	r0, #15
 8004d44:	f00e fec9 	bl	8013ada <atoi>
 8004d48:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	b2c0      	uxtb	r0, r0
 8004d4e:	0093      	lsls	r3, r2, #2
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	18bf      	adds	r7, r7, r2
 8004d56:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d58:	2301      	movs	r3, #1
 8004d5a:	9305      	str	r3, [sp, #20]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	9302      	str	r3, [sp, #8]
 8004d64:	9001      	str	r0, [sp, #4]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0030      	movs	r0, r6
 8004d6e:	f003 fdf3 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;	
 8004d72:	2000      	movs	r0, #0
 8004d74:	e742      	b.n	8004bfc <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004d76:	220d      	movs	r2, #13
 8004d78:	4938      	ldr	r1, [pc, #224]	; (8004e5c <ParseSnippetCondition+0x388>)
 8004d7a:	0038      	movs	r0, r7
 8004d7c:	f00f fb84 	bl	8014488 <strncmp>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d000      	beq.n	8004d86 <ParseSnippetCondition+0x2b2>
 8004d84:	e08e      	b.n	8004ea4 <ParseSnippetCondition+0x3d0>
				if (!button[port].releasedY1Sec) {	
 8004d86:	00f2      	lsls	r2, r6, #3
 8004d88:	1992      	adds	r2, r2, r6
 8004d8a:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	795b      	ldrb	r3, [r3, #5]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00f      	beq.n	8004db4 <ParseSnippetCondition+0x2e0>
				} else if (!button[port].releasedY2Sec) {	
 8004d94:	00f2      	lsls	r2, r6, #3
 8004d96:	1992      	adds	r2, r2, r6
 8004d98:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	799b      	ldrb	r3, [r3, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02a      	beq.n	8004df8 <ParseSnippetCondition+0x324>
				} else if (!button[port].releasedY3Sec) {	
 8004da2:	00f2      	lsls	r2, r6, #3
 8004da4:	1992      	adds	r2, r2, r6
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <ParseSnippetCondition+0x37c>)
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	79db      	ldrb	r3, [r3, #7]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d057      	beq.n	8004e60 <ParseSnippetCondition+0x38c>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004db0:	200d      	movs	r0, #13
 8004db2:	e723      	b.n	8004bfc <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004db4:	4f22      	ldr	r7, [pc, #136]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004db6:	00a3      	lsls	r3, r4, #2
 8004db8:	191c      	adds	r4, r3, r4
 8004dba:	00a3      	lsls	r3, r4, #2
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	220c      	movs	r2, #12
 8004dc0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004dc2:	0028      	movs	r0, r5
 8004dc4:	3010      	adds	r0, #16
 8004dc6:	f00e fe88 	bl	8013ada <atoi>
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	b2c0      	uxtb	r0, r0
 8004dd0:	0093      	lsls	r3, r2, #2
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	009a      	lsls	r2, r3, #2
 8004dd6:	18bf      	adds	r7, r7, r2
 8004dd8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004dda:	2301      	movs	r3, #1
 8004ddc:	9305      	str	r3, [sp, #20]
 8004dde:	2300      	movs	r3, #0
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	9002      	str	r0, [sp, #8]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2100      	movs	r1, #0
 8004dee:	0030      	movs	r0, r6
 8004df0:	f003 fdb2 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;
 8004df4:	2000      	movs	r0, #0
 8004df6:	e701      	b.n	8004bfc <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004df8:	4f11      	ldr	r7, [pc, #68]	; (8004e40 <ParseSnippetCondition+0x36c>)
 8004dfa:	00a3      	lsls	r3, r4, #2
 8004dfc:	191c      	adds	r4, r3, r4
 8004dfe:	00a3      	lsls	r3, r4, #2
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	220d      	movs	r2, #13
 8004e04:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e06:	0028      	movs	r0, r5
 8004e08:	3010      	adds	r0, #16
 8004e0a:	f00e fe66 	bl	8013ada <atoi>
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <ParseSnippetCondition+0x368>)
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	b2c0      	uxtb	r0, r0
 8004e14:	0093      	lsls	r3, r2, #2
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	009a      	lsls	r2, r3, #2
 8004e1a:	18bf      	adds	r7, r7, r2
 8004e1c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004e1e:	2301      	movs	r3, #1
 8004e20:	9305      	str	r3, [sp, #20]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	9003      	str	r0, [sp, #12]
 8004e28:	9302      	str	r3, [sp, #8]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	0030      	movs	r0, r6
 8004e34:	f003 fd90 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;		
 8004e38:	2000      	movs	r0, #0
 8004e3a:	e6df      	b.n	8004bfc <ParseSnippetCondition+0x128>
 8004e3c:	20000ea7 	.word	0x20000ea7
 8004e40:	200069f0 	.word	0x200069f0
 8004e44:	20000e0c 	.word	0x20000e0c
 8004e48:	08018a54 	.word	0x08018a54
 8004e4c:	08019f44 	.word	0x08019f44
 8004e50:	20001140 	.word	0x20001140
 8004e54:	080190c4 	.word	0x080190c4
 8004e58:	080190d4 	.word	0x080190d4
 8004e5c:	080190e4 	.word	0x080190e4
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004e60:	4f30      	ldr	r7, [pc, #192]	; (8004f24 <ParseSnippetCondition+0x450>)
 8004e62:	3314      	adds	r3, #20
 8004e64:	4698      	mov	r8, r3
 8004e66:	435c      	muls	r4, r3
 8004e68:	193c      	adds	r4, r7, r4
 8004e6a:	3b06      	subs	r3, #6
 8004e6c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e6e:	0028      	movs	r0, r5
 8004e70:	3010      	adds	r0, #16
 8004e72:	f00e fe32 	bl	8013ada <atoi>
 8004e76:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <ParseSnippetCondition+0x454>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2c0      	uxtb	r0, r0
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	4353      	muls	r3, r2
 8004e80:	18ff      	adds	r7, r7, r3
 8004e82:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004e84:	2301      	movs	r3, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	9004      	str	r0, [sp, #16]
 8004e8a:	2400      	movs	r4, #0
 8004e8c:	9403      	str	r4, [sp, #12]
 8004e8e:	9402      	str	r4, [sp, #8]
 8004e90:	9401      	str	r4, [sp, #4]
 8004e92:	9400      	str	r4, [sp, #0]
 8004e94:	0023      	movs	r3, r4
 8004e96:	0022      	movs	r2, r4
 8004e98:	0021      	movs	r1, r4
 8004e9a:	0030      	movs	r0, r6
 8004e9c:	f003 fd5c 	bl	8008958 <SetButtonEvents>
					status = BOS_OK;	
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	e6ab      	b.n	8004bfc <ParseSnippetCondition+0x128>
	BOS_Status status = BOS_OK;
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e6a9      	b.n	8004bfc <ParseSnippetCondition+0x128>
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004ea8:	2c00      	cmp	r4, #0
 8004eaa:	d000      	beq.n	8004eae <ParseSnippetCondition+0x3da>
 8004eac:	e64f      	b.n	8004b4e <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004eae:	481e      	ldr	r0, [pc, #120]	; (8004f28 <ParseSnippetCondition+0x454>)
 8004eb0:	7803      	ldrb	r3, [r0, #0]
 8004eb2:	491c      	ldr	r1, [pc, #112]	; (8004f24 <ParseSnippetCondition+0x450>)
 8004eb4:	009a      	lsls	r2, r3, #2
 8004eb6:	18d6      	adds	r6, r2, r3
 8004eb8:	00b4      	lsls	r4, r6, #2
 8004eba:	2602      	movs	r6, #2
 8004ebc:	5466      	strb	r6, [r4, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004ebe:	1909      	adds	r1, r1, r4
 8004ec0:	70cd      	strb	r5, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e01d      	b.n	8004f06 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <ParseSnippetCondition+0x454>)
 8004ecc:	4698      	mov	r8, r3
 8004ece:	781a      	ldrb	r2, [r3, #0]
 8004ed0:	4f14      	ldr	r7, [pc, #80]	; (8004f24 <ParseSnippetCondition+0x450>)
 8004ed2:	0093      	lsls	r3, r2, #2
 8004ed4:	1898      	adds	r0, r3, r2
 8004ed6:	0081      	lsls	r1, r0, #2
 8004ed8:	2003      	movs	r0, #3
 8004eda:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004edc:	187a      	adds	r2, r7, r1
 8004ede:	70d5      	strb	r5, [r2, #3]
					float constant = atof(thirdPart);
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	f00e fdf5 	bl	8013ad0 <atof>
 8004ee6:	f7fe f96f 	bl	80031c8 <__aeabi_d2f>
 8004eea:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004eec:	4643      	mov	r3, r8
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	0093      	lsls	r3, r2, #2
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	0098      	lsls	r0, r3, #2
 8004ef6:	19c0      	adds	r0, r0, r7
 8004ef8:	3006      	adds	r0, #6
 8004efa:	2204      	movs	r2, #4
 8004efc:	a907      	add	r1, sp, #28
 8004efe:	f00f f87c 	bl	8013ffa <memcpy>
 8004f02:	e63b      	b.n	8004b7c <ParseSnippetCondition+0xa8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004f04:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004f06:	b008      	add	sp, #32
 8004f08:	bc04      	pop	{r2}
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status = BOS_OK;
 8004f0e:	2000      	movs	r0, #0
 8004f10:	e7f9      	b.n	8004f06 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 8004f12:	2067      	movs	r0, #103	; 0x67
 8004f14:	e7f7      	b.n	8004f06 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 8004f16:	2067      	movs	r0, #103	; 0x67
 8004f18:	e7f5      	b.n	8004f06 <ParseSnippetCondition+0x432>
 8004f1a:	2067      	movs	r0, #103	; 0x67
 8004f1c:	e7f3      	b.n	8004f06 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 8004f1e:	2067      	movs	r0, #103	; 0x67
 8004f20:	e7f1      	b.n	8004f06 <ParseSnippetCondition+0x432>
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	200069f0 	.word	0x200069f0
 8004f28:	20000ea7 	.word	0x20000ea7

08004f2c <AddSnippet>:
{
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	000c      	movs	r4, r1
	switch (code)
 8004f30:	2802      	cmp	r0, #2
 8004f32:	d017      	beq.n	8004f64 <AddSnippet+0x38>
 8004f34:	2803      	cmp	r0, #3
 8004f36:	d003      	beq.n	8004f40 <AddSnippet+0x14>
 8004f38:	2801      	cmp	r0, #1
 8004f3a:	d00f      	beq.n	8004f5c <AddSnippet+0x30>
	return BOS_OK;
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e00c      	b.n	8004f5a <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8004f40:	4b34      	ldr	r3, [pc, #208]	; (8005014 <AddSnippet+0xe8>)
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0093      	lsls	r3, r2, #2
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	4b32      	ldr	r3, [pc, #200]	; (8005018 <AddSnippet+0xec>)
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	2201      	movs	r2, #1
 8004f52:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004f54:	f006 f95e 	bl	800b214 <SaveToRO>
	return BOS_OK;
 8004f58:	2000      	movs	r0, #0
}
 8004f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004f5c:	0008      	movs	r0, r1
 8004f5e:	f7ff fdb9 	bl	8004ad4 <ParseSnippetCondition>
 8004f62:	e7fa      	b.n	8004f5a <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <AddSnippet+0xe8>)
 8004f66:	781d      	ldrb	r5, [r3, #0]
 8004f68:	3d01      	subs	r5, #1
 8004f6a:	00ab      	lsls	r3, r5, #2
 8004f6c:	195b      	adds	r3, r3, r5
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	4b29      	ldr	r3, [pc, #164]	; (8005018 <AddSnippet+0xec>)
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	68de      	ldr	r6, [r3, #12]
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d034      	beq.n	8004fe4 <AddSnippet+0xb8>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004f7a:	0030      	movs	r0, r6
 8004f7c:	f7fb f8cc 	bl	8000118 <strlen>
 8004f80:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004f82:	0020      	movs	r0, r4
 8004f84:	f7fb f8c8 	bl	8000118 <strlen>
 8004f88:	1839      	adds	r1, r7, r0
 8004f8a:	3102      	adds	r1, #2
 8004f8c:	0030      	movs	r0, r6
 8004f8e:	f00f f86f 	bl	8014070 <realloc>
 8004f92:	4e21      	ldr	r6, [pc, #132]	; (8005018 <AddSnippet+0xec>)
 8004f94:	00ab      	lsls	r3, r5, #2
 8004f96:	195d      	adds	r5, r3, r5
 8004f98:	00ab      	lsls	r3, r5, #2
 8004f9a:	18f3      	adds	r3, r6, r3
 8004f9c:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004f9e:	4d1d      	ldr	r5, [pc, #116]	; (8005014 <AddSnippet+0xe8>)
 8004fa0:	782b      	ldrb	r3, [r5, #0]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	009a      	lsls	r2, r3, #2
 8004fa6:	18d2      	adds	r2, r2, r3
 8004fa8:	0093      	lsls	r3, r2, #2
 8004faa:	18f3      	adds	r3, r6, r3
 8004fac:	68d8      	ldr	r0, [r3, #12]
 8004fae:	1c7b      	adds	r3, r7, #1
 8004fb0:	18c0      	adds	r0, r0, r3
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	f00f fa60 	bl	8014478 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004fb8:	782a      	ldrb	r2, [r5, #0]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	0093      	lsls	r3, r2, #2
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	009a      	lsls	r2, r3, #2
 8004fc2:	18b6      	adds	r6, r6, r2
 8004fc4:	68f3      	ldr	r3, [r6, #12]
 8004fc6:	2213      	movs	r2, #19
 8004fc8:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <AddSnippet+0xe8>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	009a      	lsls	r2, r3, #2
 8004fd2:	18d2      	adds	r2, r2, r3
 8004fd4:	0091      	lsls	r1, r2, #2
 8004fd6:	4a10      	ldr	r2, [pc, #64]	; (8005018 <AddSnippet+0xec>)
 8004fd8:	1852      	adds	r2, r2, r1
 8004fda:	68d2      	ldr	r2, [r2, #12]
 8004fdc:	2a00      	cmp	r2, #0
 8004fde:	d011      	beq.n	8005004 <AddSnippet+0xd8>
	return BOS_OK;
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e7ba      	b.n	8004f5a <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004fe4:	0008      	movs	r0, r1
 8004fe6:	f7fb f897 	bl	8000118 <strlen>
 8004fea:	3001      	adds	r0, #1
 8004fec:	f00e fdb8 	bl	8013b60 <malloc>
 8004ff0:	00ab      	lsls	r3, r5, #2
 8004ff2:	195d      	adds	r5, r3, r5
 8004ff4:	00aa      	lsls	r2, r5, #2
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <AddSnippet+0xec>)
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004ffc:	0021      	movs	r1, r4
 8004ffe:	f00f fa3b 	bl	8014478 <strcpy>
 8005002:	e7e2      	b.n	8004fca <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <AddSnippet+0xec>)
 8005006:	18c8      	adds	r0, r1, r3
 8005008:	2214      	movs	r2, #20
 800500a:	2100      	movs	r1, #0
 800500c:	f00e fffe 	bl	801400c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8005010:	200e      	movs	r0, #14
 8005012:	e7a2      	b.n	8004f5a <AddSnippet+0x2e>
 8005014:	20000ea7 	.word	0x20000ea7
 8005018:	200069f0 	.word	0x200069f0

0800501c <CLI_CommandParser>:
{
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501e:	46de      	mov	lr, fp
 8005020:	4657      	mov	r7, sl
 8005022:	464e      	mov	r6, r9
 8005024:	4645      	mov	r5, r8
 8005026:	b5e0      	push	{r5, r6, r7, lr}
 8005028:	b08b      	sub	sp, #44	; 0x2c
 800502a:	9004      	str	r0, [sp, #16]
 800502c:	9103      	str	r1, [sp, #12]
 800502e:	0015      	movs	r5, r2
 8005030:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8005032:	2209      	movs	r2, #9
 8005034:	2100      	movs	r1, #0
 8005036:	a807      	add	r0, sp, #28
 8005038:	f00e ffe8 	bl	801400c <memset>
 800503c:	e160      	b.n	8005300 <CLI_CommandParser+0x2e4>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 800503e:	1ce9      	adds	r1, r5, #3
 8005040:	3001      	adds	r0, #1
 8005042:	f7ff ff73 	bl	8004f2c <AddSnippet>
 8005046:	2800      	cmp	r0, #0
 8005048:	d106      	bne.n	8005058 <CLI_CommandParser+0x3c>
				recordSnippet = SNIPPET_COMMANDS;
 800504a:	4bcf      	ldr	r3, [pc, #828]	; (8005388 <CLI_CommandParser+0x36c>)
 800504c:	2202      	movs	r2, #2
 800504e:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8005050:	230d      	movs	r3, #13
 8005052:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8005054:	2700      	movs	r7, #0
 8005056:	e184      	b.n	8005362 <CLI_CommandParser+0x346>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005058:	2252      	movs	r2, #82	; 0x52
 800505a:	49cc      	ldr	r1, [pc, #816]	; (800538c <CLI_CommandParser+0x370>)
 800505c:	0020      	movs	r0, r4
 800505e:	f00e ffcc 	bl	8013ffa <memcpy>
				recordSnippet = 0;
 8005062:	4bc9      	ldr	r3, [pc, #804]	; (8005388 <CLI_CommandParser+0x36c>)
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 8005068:	2700      	movs	r7, #0
 800506a:	e17a      	b.n	8005362 <CLI_CommandParser+0x346>
			recordSnippet = 0;
 800506c:	4bc6      	ldr	r3, [pc, #792]	; (8005388 <CLI_CommandParser+0x36c>)
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8005072:	49c7      	ldr	r1, [pc, #796]	; (8005390 <CLI_CommandParser+0x374>)
 8005074:	3003      	adds	r0, #3
 8005076:	f7ff ff59 	bl	8004f2c <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 800507a:	2241      	movs	r2, #65	; 0x41
 800507c:	49c5      	ldr	r1, [pc, #788]	; (8005394 <CLI_CommandParser+0x378>)
 800507e:	0020      	movs	r0, r4
 8005080:	f00e ffbb 	bl	8013ffa <memcpy>
			xReturned = pdFALSE;
 8005084:	2700      	movs	r7, #0
 8005086:	e16c      	b.n	8005362 <CLI_CommandParser+0x346>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8005088:	0029      	movs	r1, r5
 800508a:	2002      	movs	r0, #2
 800508c:	f7ff ff4e 	bl	8004f2c <AddSnippet>
 8005090:	2800      	cmp	r0, #0
 8005092:	d103      	bne.n	800509c <CLI_CommandParser+0x80>
				pcOutputString[0] = '\r';
 8005094:	230d      	movs	r3, #13
 8005096:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8005098:	2700      	movs	r7, #0
 800509a:	e162      	b.n	8005362 <CLI_CommandParser+0x346>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800509c:	2252      	movs	r2, #82	; 0x52
 800509e:	49bb      	ldr	r1, [pc, #748]	; (800538c <CLI_CommandParser+0x370>)
 80050a0:	0020      	movs	r0, r4
 80050a2:	f00e ffaa 	bl	8013ffa <memcpy>
			xReturned = pdFALSE;
 80050a6:	2700      	movs	r7, #0
 80050a8:	e15b      	b.n	8005362 <CLI_CommandParser+0x346>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80050aa:	f00e fd4b 	bl	8013b44 <__locale_ctype_ptr>
 80050ae:	7873      	ldrb	r3, [r6, #1]
 80050b0:	18c0      	adds	r0, r0, r3
 80050b2:	7843      	ldrb	r3, [r0, #1]
 80050b4:	075b      	lsls	r3, r3, #29
 80050b6:	d500      	bpl.n	80050ba <CLI_CommandParser+0x9e>
 80050b8:	e14c      	b.n	8005354 <CLI_CommandParser+0x338>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80050ba:	1b72      	subs	r2, r6, r5
 80050bc:	0029      	movs	r1, r5
 80050be:	a807      	add	r0, sp, #28
 80050c0:	f00f f9f3 	bl	80144aa <strncpy>
				id = GetID(idString);
 80050c4:	a807      	add	r0, sp, #28
 80050c6:	f7ff faf1 	bl	80046ac <GetID>
 80050ca:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 80050cc:	4ab2      	ldr	r2, [pc, #712]	; (8005398 <CLI_CommandParser+0x37c>)
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	4691      	mov	r9, r2
 80050d2:	4290      	cmp	r0, r2
 80050d4:	d02c      	beq.n	8005130 <CLI_CommandParser+0x114>
				}	else if (id == BOS_ERR_WrongName) {		
 80050d6:	2864      	cmp	r0, #100	; 0x64
 80050d8:	d032      	beq.n	8005140 <CLI_CommandParser+0x124>
				}	else if (id == BOS_ERR_WrongID) {
 80050da:	2866      	cmp	r0, #102	; 0x66
 80050dc:	d037      	beq.n	800514e <CLI_CommandParser+0x132>
				}	else if (id == BOS_BROADCAST) {
 80050de:	28ff      	cmp	r0, #255	; 0xff
 80050e0:	d03c      	beq.n	800515c <CLI_CommandParser+0x140>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 80050e2:	466b      	mov	r3, sp
 80050e4:	7d1b      	ldrb	r3, [r3, #20]
 80050e6:	469a      	mov	sl, r3
 80050e8:	2bfe      	cmp	r3, #254	; 0xfe
 80050ea:	d068      	beq.n	80051be <CLI_CommandParser+0x1a2>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 80050ec:	3601      	adds	r6, #1
 80050ee:	2206      	movs	r2, #6
 80050f0:	49aa      	ldr	r1, [pc, #680]	; (800539c <CLI_CommandParser+0x380>)
 80050f2:	0030      	movs	r0, r6
 80050f4:	f00f f9c8 	bl	8014488 <strncmp>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d000      	beq.n	80050fe <CLI_CommandParser+0xe2>
 80050fc:	e0a3      	b.n	8005246 <CLI_CommandParser+0x22a>
						BOS.response = BOS_RESPONSE_NONE;				
 80050fe:	4ba8      	ldr	r3, [pc, #672]	; (80053a0 <CLI_CommandParser+0x384>)
 8005100:	2200      	movs	r2, #0
 8005102:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8005104:	2119      	movs	r1, #25
 8005106:	4650      	mov	r0, sl
 8005108:	f004 f8da 	bl	80092c0 <SendMessageToModule>
						osDelay(100);
 800510c:	2064      	movs	r0, #100	; 0x64
 800510e:	f009 fedb 	bl	800eec8 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8005112:	4ba4      	ldr	r3, [pc, #656]	; (80053a4 <CLI_CommandParser+0x388>)
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	4ba0      	ldr	r3, [pc, #640]	; (8005398 <CLI_CommandParser+0x37c>)
 8005118:	7818      	ldrb	r0, [r3, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	4651      	mov	r1, sl
 800511e:	f7fe ffb1 	bl	8004084 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8005122:	4b9f      	ldr	r3, [pc, #636]	; (80053a0 <CLI_CommandParser+0x384>)
 8005124:	799b      	ldrb	r3, [r3, #6]
 8005126:	2b60      	cmp	r3, #96	; 0x60
 8005128:	d100      	bne.n	800512c <CLI_CommandParser+0x110>
 800512a:	e0c8      	b.n	80052be <CLI_CommandParser+0x2a2>
					xReturned = pdFALSE;
 800512c:	2700      	movs	r7, #0
 800512e:	e118      	b.n	8005362 <CLI_CommandParser+0x346>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005130:	1c70      	adds	r0, r6, #1
 8005132:	2299      	movs	r2, #153	; 0x99
 8005134:	0092      	lsls	r2, r2, #2
 8005136:	0021      	movs	r1, r4
 8005138:	f009 ff82 	bl	800f040 <FreeRTOS_CLIProcessCommand>
 800513c:	0007      	movs	r7, r0
 800513e:	e110      	b.n	8005362 <CLI_CommandParser+0x346>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8005140:	2227      	movs	r2, #39	; 0x27
 8005142:	4999      	ldr	r1, [pc, #612]	; (80053a8 <CLI_CommandParser+0x38c>)
 8005144:	0020      	movs	r0, r4
 8005146:	f00e ff58 	bl	8013ffa <memcpy>
					xReturned = pdFALSE;
 800514a:	2700      	movs	r7, #0
 800514c:	e109      	b.n	8005362 <CLI_CommandParser+0x346>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800514e:	2225      	movs	r2, #37	; 0x25
 8005150:	4996      	ldr	r1, [pc, #600]	; (80053ac <CLI_CommandParser+0x390>)
 8005152:	0020      	movs	r0, r4
 8005154:	f00e ff51 	bl	8013ffa <memcpy>
					xReturned = pdFALSE;						
 8005158:	2700      	movs	r7, #0
 800515a:	e102      	b.n	8005362 <CLI_CommandParser+0x346>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800515c:	2202      	movs	r2, #2
 800515e:	2100      	movs	r1, #0
 8005160:	4893      	ldr	r0, [pc, #588]	; (80053b0 <CLI_CommandParser+0x394>)
 8005162:	f00e ff53 	bl	801400c <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005166:	3601      	adds	r6, #1
 8005168:	0028      	movs	r0, r5
 800516a:	f7fa ffd5 	bl	8000118 <strlen>
 800516e:	0007      	movs	r7, r0
 8005170:	a807      	add	r0, sp, #28
 8005172:	f7fa ffd1 	bl	8000118 <strlen>
 8005176:	1a3a      	subs	r2, r7, r0
 8005178:	3a01      	subs	r2, #1
 800517a:	0031      	movs	r1, r6
 800517c:	488d      	ldr	r0, [pc, #564]	; (80053b4 <CLI_CommandParser+0x398>)
 800517e:	f00f f994 	bl	80144aa <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8005182:	0028      	movs	r0, r5
 8005184:	f7fa ffc8 	bl	8000118 <strlen>
 8005188:	0007      	movs	r7, r0
 800518a:	a807      	add	r0, sp, #28
 800518c:	f7fa ffc4 	bl	8000118 <strlen>
 8005190:	1a3b      	subs	r3, r7, r0
 8005192:	b29b      	uxth	r3, r3
 8005194:	2217      	movs	r2, #23
 8005196:	21ff      	movs	r1, #255	; 0xff
 8005198:	4648      	mov	r0, r9
 800519a:	f004 f869 	bl	8009270 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800519e:	2299      	movs	r2, #153	; 0x99
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	0021      	movs	r1, r4
 80051a4:	0030      	movs	r0, r6
 80051a6:	f009 ff4b 	bl	800f040 <FreeRTOS_CLIProcessCommand>
 80051aa:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 80051ac:	0020      	movs	r0, r4
 80051ae:	f7fa ffb3 	bl	8000118 <strlen>
 80051b2:	1820      	adds	r0, r4, r0
 80051b4:	221d      	movs	r2, #29
 80051b6:	4980      	ldr	r1, [pc, #512]	; (80053b8 <CLI_CommandParser+0x39c>)
 80051b8:	f00e ff1f 	bl	8013ffa <memcpy>
 80051bc:	e0d1      	b.n	8005362 <CLI_CommandParser+0x346>
					group = id >> 8;
 80051be:	9b05      	ldr	r3, [sp, #20]
 80051c0:	121b      	asrs	r3, r3, #8
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	469a      	mov	sl, r3
 80051c6:	4b7d      	ldr	r3, [pc, #500]	; (80053bc <CLI_CommandParser+0x3a0>)
 80051c8:	469b      	mov	fp, r3
 80051ca:	4652      	mov	r2, sl
 80051cc:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80051ce:	2202      	movs	r2, #2
 80051d0:	2100      	movs	r1, #0
 80051d2:	4877      	ldr	r0, [pc, #476]	; (80053b0 <CLI_CommandParser+0x394>)
 80051d4:	f00e ff1a 	bl	801400c <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80051d8:	1c73      	adds	r3, r6, #1
 80051da:	4698      	mov	r8, r3
 80051dc:	0028      	movs	r0, r5
 80051de:	f7fa ff9b 	bl	8000118 <strlen>
 80051e2:	0006      	movs	r6, r0
 80051e4:	a807      	add	r0, sp, #28
 80051e6:	f7fa ff97 	bl	8000118 <strlen>
 80051ea:	1a32      	subs	r2, r6, r0
 80051ec:	3a01      	subs	r2, #1
 80051ee:	4641      	mov	r1, r8
 80051f0:	4870      	ldr	r0, [pc, #448]	; (80053b4 <CLI_CommandParser+0x398>)
 80051f2:	f00f f95a 	bl	80144aa <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80051f6:	0028      	movs	r0, r5
 80051f8:	f7fa ff8e 	bl	8000118 <strlen>
 80051fc:	0006      	movs	r6, r0
 80051fe:	a807      	add	r0, sp, #28
 8005200:	f7fa ff8a 	bl	8000118 <strlen>
 8005204:	1a33      	subs	r3, r6, r0
 8005206:	b29b      	uxth	r3, r3
 8005208:	2217      	movs	r2, #23
 800520a:	4651      	mov	r1, sl
 800520c:	4648      	mov	r0, r9
 800520e:	f004 f82f 	bl	8009270 <BroadcastMessage>
					if (InGroup(myID, group))
 8005212:	4b61      	ldr	r3, [pc, #388]	; (8005398 <CLI_CommandParser+0x37c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4a69      	ldr	r2, [pc, #420]	; (80053c0 <CLI_CommandParser+0x3a4>)
 800521c:	5a9b      	ldrh	r3, [r3, r2]
 800521e:	465a      	mov	r2, fp
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	4113      	asrs	r3, r2
 8005224:	07db      	lsls	r3, r3, #31
 8005226:	d406      	bmi.n	8005236 <CLI_CommandParser+0x21a>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8005228:	ab07      	add	r3, sp, #28
 800522a:	0022      	movs	r2, r4
 800522c:	4965      	ldr	r1, [pc, #404]	; (80053c4 <CLI_CommandParser+0x3a8>)
 800522e:	0020      	movs	r0, r4
 8005230:	f00f f8e6 	bl	8014400 <sprintf>
 8005234:	e095      	b.n	8005362 <CLI_CommandParser+0x346>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8005236:	2299      	movs	r2, #153	; 0x99
 8005238:	0092      	lsls	r2, r2, #2
 800523a:	0021      	movs	r1, r4
 800523c:	4640      	mov	r0, r8
 800523e:	f009 feff 	bl	800f040 <FreeRTOS_CLIProcessCommand>
 8005242:	0007      	movs	r7, r0
 8005244:	e7f0      	b.n	8005228 <CLI_CommandParser+0x20c>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8005246:	0028      	movs	r0, r5
 8005248:	f7fa ff66 	bl	8000118 <strlen>
 800524c:	0007      	movs	r7, r0
 800524e:	a807      	add	r0, sp, #28
 8005250:	f7fa ff62 	bl	8000118 <strlen>
 8005254:	1a3a      	subs	r2, r7, r0
 8005256:	3a01      	subs	r2, #1
 8005258:	0031      	movs	r1, r6
 800525a:	4856      	ldr	r0, [pc, #344]	; (80053b4 <CLI_CommandParser+0x398>)
 800525c:	f00f f925 	bl	80144aa <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8005260:	0028      	movs	r0, r5
 8005262:	f7fa ff59 	bl	8000118 <strlen>
 8005266:	0006      	movs	r6, r0
 8005268:	a807      	add	r0, sp, #28
 800526a:	f7fa ff55 	bl	8000118 <strlen>
 800526e:	1a32      	subs	r2, r6, r0
 8005270:	b292      	uxth	r2, r2
 8005272:	3a01      	subs	r2, #1
 8005274:	b292      	uxth	r2, r2
 8005276:	2117      	movs	r1, #23
 8005278:	4650      	mov	r0, sl
 800527a:	f004 f821 	bl	80092c0 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 800527e:	9a05      	ldr	r2, [sp, #20]
 8005280:	4951      	ldr	r1, [pc, #324]	; (80053c8 <CLI_CommandParser+0x3ac>)
 8005282:	0020      	movs	r0, r4
 8005284:	f00f f8bc 	bl	8014400 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8005288:	7823      	ldrb	r3, [r4, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <CLI_CommandParser+0x278>
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d108      	bne.n	80052a6 <CLI_CommandParser+0x28a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005294:	0020      	movs	r0, r4
 8005296:	f7fa ff3f 	bl	8000118 <strlen>
 800529a:	0002      	movs	r2, r0
 800529c:	2100      	movs	r1, #0
 800529e:	0020      	movs	r0, r4
 80052a0:	f00e feb4 	bl	801400c <memset>
 80052a4:	e73d      	b.n	8005122 <CLI_CommandParser+0x106>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 80052a6:	0020      	movs	r0, r4
 80052a8:	f7fa ff36 	bl	8000118 <strlen>
 80052ac:	b282      	uxth	r2, r0
 80052ae:	2301      	movs	r3, #1
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	3331      	adds	r3, #49	; 0x31
 80052b4:	0021      	movs	r1, r4
 80052b6:	9804      	ldr	r0, [sp, #16]
 80052b8:	f009 fcd2 	bl	800ec60 <writePxMutex>
 80052bc:	e7ea      	b.n	8005294 <CLI_CommandParser+0x278>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 80052be:	21fa      	movs	r1, #250	; 0xfa
 80052c0:	0089      	lsls	r1, r1, #2
 80052c2:	2001      	movs	r0, #1
 80052c4:	f00b f9f6 	bl	80106b4 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <CLI_CommandParser+0x3b0>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <CLI_CommandParser+0x2cc>
									++timedoutMsg;
 80052d0:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <CLI_CommandParser+0x3b4>)
 80052d2:	8813      	ldrh	r3, [r2, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 80052d8:	9b05      	ldr	r3, [sp, #20]
 80052da:	0022      	movs	r2, r4
 80052dc:	493d      	ldr	r1, [pc, #244]	; (80053d4 <CLI_CommandParser+0x3b8>)
 80052de:	0020      	movs	r0, r4
 80052e0:	f00f f88e 	bl	8014400 <sprintf>
					xReturned = pdFALSE;
 80052e4:	2700      	movs	r7, #0
 80052e6:	e03c      	b.n	8005362 <CLI_CommandParser+0x346>
 80052e8:	2700      	movs	r7, #0
 80052ea:	e03a      	b.n	8005362 <CLI_CommandParser+0x346>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80052ec:	0020      	movs	r0, r4
 80052ee:	f7fa ff13 	bl	8000118 <strlen>
 80052f2:	0002      	movs	r2, r0
 80052f4:	2100      	movs	r1, #0
 80052f6:	0020      	movs	r0, r4
 80052f8:	f00e fe88 	bl	801400c <memset>
	} while( xReturned != pdFALSE );
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	d071      	beq.n	80053e4 <CLI_CommandParser+0x3c8>
		StringToLowerCase(( char * )cInputString);
 8005300:	0028      	movs	r0, r5
 8005302:	f7ff fbd1 	bl	8004aa8 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <CLI_CommandParser+0x36c>)
 8005308:	781e      	ldrb	r6, [r3, #0]
 800530a:	2e00      	cmp	r6, #0
 800530c:	d107      	bne.n	800531e <CLI_CommandParser+0x302>
 800530e:	2203      	movs	r2, #3
 8005310:	4931      	ldr	r1, [pc, #196]	; (80053d8 <CLI_CommandParser+0x3bc>)
 8005312:	0028      	movs	r0, r5
 8005314:	f00f f8b8 	bl	8014488 <strncmp>
 8005318:	2800      	cmp	r0, #0
 800531a:	d100      	bne.n	800531e <CLI_CommandParser+0x302>
 800531c:	e68f      	b.n	800503e <CLI_CommandParser+0x22>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 800531e:	2e00      	cmp	r6, #0
 8005320:	d007      	beq.n	8005332 <CLI_CommandParser+0x316>
 8005322:	2206      	movs	r2, #6
 8005324:	492d      	ldr	r1, [pc, #180]	; (80053dc <CLI_CommandParser+0x3c0>)
 8005326:	0028      	movs	r0, r5
 8005328:	f00f f8ae 	bl	8014488 <strncmp>
 800532c:	2800      	cmp	r0, #0
 800532e:	d100      	bne.n	8005332 <CLI_CommandParser+0x316>
 8005330:	e69c      	b.n	800506c <CLI_CommandParser+0x50>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8005332:	2e02      	cmp	r6, #2
 8005334:	d100      	bne.n	8005338 <CLI_CommandParser+0x31c>
 8005336:	e6a7      	b.n	8005088 <CLI_CommandParser+0x6c>
			loc = strchr( ( char * ) cInputString, '.');
 8005338:	212e      	movs	r1, #46	; 0x2e
 800533a:	0028      	movs	r0, r5
 800533c:	f00f f88e 	bl	801445c <strchr>
 8005340:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8005342:	d007      	beq.n	8005354 <CLI_CommandParser+0x338>
 8005344:	3803      	subs	r0, #3
 8005346:	2203      	movs	r2, #3
 8005348:	4925      	ldr	r1, [pc, #148]	; (80053e0 <CLI_CommandParser+0x3c4>)
 800534a:	f00f f89d 	bl	8014488 <strncmp>
 800534e:	2800      	cmp	r0, #0
 8005350:	d000      	beq.n	8005354 <CLI_CommandParser+0x338>
 8005352:	e6aa      	b.n	80050aa <CLI_CommandParser+0x8e>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005354:	2299      	movs	r2, #153	; 0x99
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	0021      	movs	r1, r4
 800535a:	0028      	movs	r0, r5
 800535c:	f009 fe70 	bl	800f040 <FreeRTOS_CLIProcessCommand>
 8005360:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005362:	7823      	ldrb	r3, [r4, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0c1      	beq.n	80052ec <CLI_CommandParser+0x2d0>
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0be      	beq.n	80052ec <CLI_CommandParser+0x2d0>
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800536e:	0020      	movs	r0, r4
 8005370:	f7fa fed2 	bl	8000118 <strlen>
 8005374:	b282      	uxth	r2, r0
 8005376:	2301      	movs	r3, #1
 8005378:	425b      	negs	r3, r3
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	3333      	adds	r3, #51	; 0x33
 800537e:	0021      	movs	r1, r4
 8005380:	9804      	ldr	r0, [sp, #16]
 8005382:	f009 fc6d 	bl	800ec60 <writePxMutex>
 8005386:	e7b1      	b.n	80052ec <CLI_CommandParser+0x2d0>
 8005388:	20000ed4 	.word	0x20000ed4
 800538c:	08018efc 	.word	0x08018efc
 8005390:	08018bbc 	.word	0x08018bbc
 8005394:	08018f58 	.word	0x08018f58
 8005398:	20000070 	.word	0x20000070
 800539c:	0801903c 	.word	0x0801903c
 80053a0:	200069d4 	.word	0x200069d4
 80053a4:	20000af7 	.word	0x20000af7
 80053a8:	08018fa0 	.word	0x08018fa0
 80053ac:	08018fc8 	.word	0x08018fc8
 80053b0:	20000b30 	.word	0x20000b30
 80053b4:	20000cfc 	.word	0x20000cfc
 80053b8:	08018ff0 	.word	0x08018ff0
 80053bc:	20000ea6 	.word	0x20000ea6
 80053c0:	20000cb4 	.word	0x20000cb4
 80053c4:	08019010 	.word	0x08019010
 80053c8:	08019044 	.word	0x08019044
 80053cc:	20000dc8 	.word	0x20000dc8
 80053d0:	20001352 	.word	0x20001352
 80053d4:	08019068 	.word	0x08019068
 80053d8:	08018ef8 	.word	0x08018ef8
 80053dc:	08018f50 	.word	0x08018f50
 80053e0:	08018f9c 	.word	0x08018f9c
	memset( idString, 0x00, MaxLengthOfAlias );
 80053e4:	2209      	movs	r2, #9
 80053e6:	2100      	movs	r1, #0
 80053e8:	a807      	add	r0, sp, #28
 80053ea:	f00e fe0f 	bl	801400c <memset>
	if(!recordSnippet && enableOutput)
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <CLI_CommandParser+0x404>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <CLI_CommandParser+0x3e0>
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <CLI_CommandParser+0x3ee>
}
 80053fc:	b00b      	add	sp, #44	; 0x2c
 80053fe:	bc3c      	pop	{r2, r3, r4, r5}
 8005400:	4690      	mov	r8, r2
 8005402:	4699      	mov	r9, r3
 8005404:	46a2      	mov	sl, r4
 8005406:	46ab      	mov	fp, r5
 8005408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800540a:	2301      	movs	r3, #1
 800540c:	425b      	negs	r3, r3
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	3333      	adds	r3, #51	; 0x33
 8005412:	2238      	movs	r2, #56	; 0x38
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <CLI_CommandParser+0x408>)
 8005416:	9804      	ldr	r0, [sp, #16]
 8005418:	f009 fc22 	bl	800ec60 <writePxMutex>
}
 800541c:	e7ee      	b.n	80053fc <CLI_CommandParser+0x3e0>
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20000ed4 	.word	0x20000ed4
 8005424:	08019088 	.word	0x08019088

08005428 <prvCLITask>:
{
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800542c:	2101      	movs	r1, #1
 800542e:	4249      	negs	r1, r1
 8005430:	2001      	movs	r0, #1
 8005432:	f00b f93f 	bl	80106b4 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005436:	230f      	movs	r3, #15
 8005438:	446b      	add	r3, sp
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800543e:	f009 fe65 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 8005442:	0005      	movs	r5, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005444:	4b51      	ldr	r3, [pc, #324]	; (800558c <prvCLITask+0x164>)
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	23e1      	movs	r3, #225	; 0xe1
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	429a      	cmp	r2, r3
 800544e:	d121      	bne.n	8005494 <prvCLITask+0x6c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8005450:	4b4f      	ldr	r3, [pc, #316]	; (8005590 <prvCLITask+0x168>)
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	005a      	lsls	r2, r3, #1
 8005456:	18d2      	adds	r2, r2, r3
 8005458:	0053      	lsls	r3, r2, #1
 800545a:	4a4e      	ldr	r2, [pc, #312]	; (8005594 <prvCLITask+0x16c>)
 800545c:	189b      	adds	r3, r3, r2
 800545e:	4a4e      	ldr	r2, [pc, #312]	; (8005598 <prvCLITask+0x170>)
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	4c4e      	ldr	r4, [pc, #312]	; (800559c <prvCLITask+0x174>)
 8005464:	4e4e      	ldr	r6, [pc, #312]	; (80055a0 <prvCLITask+0x178>)
 8005466:	7831      	ldrb	r1, [r6, #0]
 8005468:	9100      	str	r1, [sp, #0]
 800546a:	494e      	ldr	r1, [pc, #312]	; (80055a4 <prvCLITask+0x17c>)
 800546c:	0020      	movs	r0, r4
 800546e:	f00e ffc7 	bl	8014400 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8005472:	7830      	ldrb	r0, [r6, #0]
 8005474:	230a      	movs	r3, #10
 8005476:	4a4c      	ldr	r2, [pc, #304]	; (80055a8 <prvCLITask+0x180>)
 8005478:	494c      	ldr	r1, [pc, #304]	; (80055ac <prvCLITask+0x184>)
 800547a:	f009 fc1f 	bl	800ecbc <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800547e:	0020      	movs	r0, r4
 8005480:	f7fa fe4a 	bl	8000118 <strlen>
 8005484:	b282      	uxth	r2, r0
 8005486:	7830      	ldrb	r0, [r6, #0]
 8005488:	230a      	movs	r3, #10
 800548a:	0021      	movs	r1, r4
 800548c:	f009 fc16 	bl	800ecbc <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8005490:	2600      	movs	r6, #0
 8005492:	e067      	b.n	8005564 <prvCLITask+0x13c>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005494:	2401      	movs	r4, #1
 8005496:	2c05      	cmp	r4, #5
 8005498:	d8da      	bhi.n	8005450 <prvCLITask+0x28>
			if (port != PcPort)
 800549a:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <prvCLITask+0x178>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	42a3      	cmp	r3, r4
 80054a0:	d004      	beq.n	80054ac <prvCLITask+0x84>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 80054a2:	21e1      	movs	r1, #225	; 0xe1
 80054a4:	0309      	lsls	r1, r1, #12
 80054a6:	0020      	movs	r0, r4
 80054a8:	f009 fc4a 	bl	800ed40 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80054ac:	3401      	adds	r4, #1
 80054ae:	b2e4      	uxtb	r4, r4
 80054b0:	e7f1      	b.n	8005496 <prvCLITask+0x6e>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 80054b2:	200f      	movs	r0, #15
 80054b4:	4468      	add	r0, sp
 80054b6:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 80054b8:	0198      	lsls	r0, r3, #6
 80054ba:	4a3d      	ldr	r2, [pc, #244]	; (80055b0 <prvCLITask+0x188>)
 80054bc:	1812      	adds	r2, r2, r0
 80054be:	2000      	movs	r0, #0
 80054c0:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 80054c2:	4a3c      	ldr	r2, [pc, #240]	; (80055b4 <prvCLITask+0x18c>)
 80054c4:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 80054c6:	240f      	movs	r4, #15
 80054c8:	446c      	add	r4, sp
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <prvCLITask+0x178>)
 80054cc:	7818      	ldrb	r0, [r3, #0]
 80054ce:	230a      	movs	r3, #10
 80054d0:	2201      	movs	r2, #1
 80054d2:	0021      	movs	r1, r4
 80054d4:	f009 fbf2 	bl	800ecbc <writePxITMutex>
		if( cRxedChar == '\r' )
 80054d8:	7823      	ldrb	r3, [r4, #0]
 80054da:	2b0d      	cmp	r3, #13
 80054dc:	d025      	beq.n	800552a <prvCLITask+0x102>
			if( cRxedChar == '\n' )
 80054de:	2b0a      	cmp	r3, #10
 80054e0:	d03e      	beq.n	8005560 <prvCLITask+0x138>
			else if( cRxedChar == '\b' )
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d049      	beq.n	800557a <prvCLITask+0x152>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80054e6:	001a      	movs	r2, r3
 80054e8:	3a20      	subs	r2, #32
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	2a5e      	cmp	r2, #94	; 0x5e
 80054ee:	d837      	bhi.n	8005560 <prvCLITask+0x138>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 80054f0:	2e31      	cmp	r6, #49	; 0x31
 80054f2:	dc35      	bgt.n	8005560 <prvCLITask+0x138>
						cInputString[ cInputIndex ] = cRxedChar;
 80054f4:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <prvCLITask+0x190>)
 80054f6:	5593      	strb	r3, [r2, r6]
						cInputIndex++;
 80054f8:	3601      	adds	r6, #1
 80054fa:	b276      	sxtb	r6, r6
 80054fc:	e030      	b.n	8005560 <prvCLITask+0x138>
			taskYIELD();
 80054fe:	f00b fbcd 	bl	8010c9c <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005502:	3401      	adds	r4, #1
 8005504:	b2a4      	uxth	r4, r4
 8005506:	2c3f      	cmp	r4, #63	; 0x3f
 8005508:	d8dd      	bhi.n	80054c6 <prvCLITask+0x9e>
			if (UARTRxBuf[PcPort-1][chr]) {
 800550a:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <prvCLITask+0x178>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	0198      	lsls	r0, r3, #6
 8005512:	4a27      	ldr	r2, [pc, #156]	; (80055b0 <prvCLITask+0x188>)
 8005514:	1812      	adds	r2, r2, r0
 8005516:	5d12      	ldrb	r2, [r2, r4]
 8005518:	2a00      	cmp	r2, #0
 800551a:	d1ca      	bne.n	80054b2 <prvCLITask+0x8a>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 800551c:	2c3f      	cmp	r4, #63	; 0x3f
 800551e:	d1ee      	bne.n	80054fe <prvCLITask+0xd6>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8005520:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <prvCLITask+0x18c>)
 8005522:	2100      	movs	r1, #0
 8005524:	54d1      	strb	r1, [r2, r3]
 8005526:	2400      	movs	r4, #0
 8005528:	e7e9      	b.n	80054fe <prvCLITask+0xd6>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <prvCLITask+0x178>)
 800552c:	7818      	ldrb	r0, [r3, #0]
 800552e:	230a      	movs	r3, #10
 8005530:	2202      	movs	r2, #2
 8005532:	4922      	ldr	r1, [pc, #136]	; (80055bc <prvCLITask+0x194>)
 8005534:	f009 fbc2 	bl	800ecbc <writePxITMutex>
			if( cInputIndex == 0 )
 8005538:	2e00      	cmp	r6, #0
 800553a:	d019      	beq.n	8005570 <prvCLITask+0x148>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800553c:	4c1e      	ldr	r4, [pc, #120]	; (80055b8 <prvCLITask+0x190>)
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <prvCLITask+0x178>)
 8005540:	7818      	ldrb	r0, [r3, #0]
 8005542:	002b      	movs	r3, r5
 8005544:	0022      	movs	r2, r4
 8005546:	2101      	movs	r1, #1
 8005548:	f7ff fd68 	bl	800501c <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800554c:	0021      	movs	r1, r4
 800554e:	481c      	ldr	r0, [pc, #112]	; (80055c0 <prvCLITask+0x198>)
 8005550:	f00e ff92 	bl	8014478 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005554:	2232      	movs	r2, #50	; 0x32
 8005556:	2100      	movs	r1, #0
 8005558:	0020      	movs	r0, r4
 800555a:	f00e fd57 	bl	801400c <memset>
			cInputIndex = 0;
 800555e:	2600      	movs	r6, #0
		taskYIELD();
 8005560:	f00b fb9c 	bl	8010c9c <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <prvCLITask+0x178>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <prvCLITask+0x18c>)
 800556c:	5cd4      	ldrb	r4, [r2, r3]
 800556e:	e7ca      	b.n	8005506 <prvCLITask+0xde>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8005570:	4913      	ldr	r1, [pc, #76]	; (80055c0 <prvCLITask+0x198>)
 8005572:	4811      	ldr	r0, [pc, #68]	; (80055b8 <prvCLITask+0x190>)
 8005574:	f00e ff80 	bl	8014478 <strcpy>
 8005578:	e7e0      	b.n	800553c <prvCLITask+0x114>
				if( cInputIndex > 0 )
 800557a:	2e00      	cmp	r6, #0
 800557c:	ddf0      	ble.n	8005560 <prvCLITask+0x138>
					cInputIndex--;
 800557e:	3e01      	subs	r6, #1
 8005580:	b276      	sxtb	r6, r6
					cInputString[ cInputIndex ] = '\0';
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <prvCLITask+0x190>)
 8005584:	2200      	movs	r2, #0
 8005586:	559a      	strb	r2, [r3, r6]
 8005588:	e7ea      	b.n	8005560 <prvCLITask+0x138>
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	200069d4 	.word	0x200069d4
 8005590:	20000072 	.word	0x20000072
 8005594:	08018c0c 	.word	0x08018c0c
 8005598:	20000070 	.word	0x20000070
 800559c:	20000ea8 	.word	0x20000ea8
 80055a0:	20000af7 	.word	0x20000af7
 80055a4:	080190f4 	.word	0x080190f4
 80055a8:	00000293 	.word	0x00000293
 80055ac:	08019120 	.word	0x08019120
 80055b0:	20000f58 	.word	0x20000f58
 80055b4:	20001098 	.word	0x20001098
 80055b8:	20000dd8 	.word	0x20000dd8
 80055bc:	0801a4f0 	.word	0x0801a4f0
 80055c0:	20000e74 	.word	0x20000e74

080055c4 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80055c8:	4b1c      	ldr	r3, [pc, #112]	; (800563c <ParseSnippetCommand+0x78>)
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0093      	lsls	r3, r2, #2
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	009a      	lsls	r2, r3, #2
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <ParseSnippetCommand+0x7c>)
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d02c      	beq.n	8005638 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80055de:	4b19      	ldr	r3, [pc, #100]	; (8005644 <ParseSnippetCommand+0x80>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <ParseSnippetCommand+0x80>)
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	782b      	ldrb	r3, [r5, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d012      	beq.n	8005616 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 80055f0:	2113      	movs	r1, #19
 80055f2:	0028      	movs	r0, r5
 80055f4:	f00e ff32 	bl	801445c <strchr>
 80055f8:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 80055fa:	d011      	beq.n	8005620 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 80055fc:	1b42      	subs	r2, r0, r5
 80055fe:	0029      	movs	r1, r5
 8005600:	0020      	movs	r0, r4
 8005602:	f00e ff52 	bl	80144aa <strncpy>
		ptrStart = ptrEnd+1;
 8005606:	3601      	adds	r6, #1
 8005608:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <ParseSnippetCommand+0x80>)
 800560a:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 800560c:	2001      	movs	r0, #1
 800560e:	e006      	b.n	800561e <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <ParseSnippetCommand+0x80>)
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	e7e7      	b.n	80055e6 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <ParseSnippetCommand+0x80>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
		return false;
 800561c:	2000      	movs	r0, #0
}
 800561e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 8005620:	0029      	movs	r1, r5
 8005622:	0020      	movs	r0, r4
 8005624:	f00e ff28 	bl	8014478 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005628:	0020      	movs	r0, r4
 800562a:	f7fa fd75 	bl	8000118 <strlen>
 800562e:	182d      	adds	r5, r5, r0
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <ParseSnippetCommand+0x80>)
 8005632:	601d      	str	r5, [r3, #0]
	return true;
 8005634:	2001      	movs	r0, #1
 8005636:	e7f2      	b.n	800561e <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005638:	2000      	movs	r0, #0
 800563a:	e7f0      	b.n	800561e <ParseSnippetCommand+0x5a>
 800563c:	20000ea7 	.word	0x20000ea7
 8005640:	200069f0 	.word	0x200069f0
 8005644:	20000ed0 	.word	0x20000ed0

08005648 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564a:	b083      	sub	sp, #12
 800564c:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800564e:	0083      	lsls	r3, r0, #2
 8005650:	181b      	adds	r3, r3, r0
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	4b46      	ldr	r3, [pc, #280]	; (8005770 <CheckSnippetCondition+0x128>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d004      	beq.n	8005666 <CheckSnippetCondition+0x1e>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d015      	beq.n	800568c <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 8005660:	2000      	movs	r0, #0
}
 8005662:	b003      	add	sp, #12
 8005664:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8005666:	4a42      	ldr	r2, [pc, #264]	; (8005770 <CheckSnippetCondition+0x128>)
 8005668:	0083      	lsls	r3, r0, #2
 800566a:	1818      	adds	r0, r3, r0
 800566c:	0081      	lsls	r1, r0, #2
 800566e:	0008      	movs	r0, r1
 8005670:	1851      	adds	r1, r2, r1
 8005672:	7889      	ldrb	r1, [r1, #2]
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8005674:	1812      	adds	r2, r2, r0
 8005676:	78d2      	ldrb	r2, [r2, #3]
 8005678:	00cb      	lsls	r3, r1, #3
 800567a:	185b      	adds	r3, r3, r1
 800567c:	493d      	ldr	r1, [pc, #244]	; (8005774 <CheckSnippetCondition+0x12c>)
 800567e:	5c5b      	ldrb	r3, [r3, r1]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <CheckSnippetCondition+0x40>
				return false;			
 8005684:	2000      	movs	r0, #0
 8005686:	e7ec      	b.n	8005662 <CheckSnippetCondition+0x1a>
				return true;
 8005688:	2001      	movs	r0, #1
 800568a:	e7ea      	b.n	8005662 <CheckSnippetCondition+0x1a>
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 800568c:	4e38      	ldr	r6, [pc, #224]	; (8005770 <CheckSnippetCondition+0x128>)
 800568e:	0085      	lsls	r5, r0, #2
 8005690:	182b      	adds	r3, r5, r0
 8005692:	0099      	lsls	r1, r3, #2
 8005694:	1871      	adds	r1, r6, r1
 8005696:	78ca      	ldrb	r2, [r1, #3]
 8005698:	3a01      	subs	r2, #1
 800569a:	0053      	lsls	r3, r2, #1
 800569c:	189b      	adds	r3, r3, r2
 800569e:	009a      	lsls	r2, r3, #2
 80056a0:	4b35      	ldr	r3, [pc, #212]	; (8005778 <CheckSnippetCondition+0x130>)
 80056a2:	58d3      	ldr	r3, [r2, r3]
 80056a4:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80056a6:	3106      	adds	r1, #6
 80056a8:	2204      	movs	r2, #4
 80056aa:	a801      	add	r0, sp, #4
 80056ac:	f00e fca5 	bl	8013ffa <memcpy>
			switch (snippets[index].cond.mathOperator)
 80056b0:	192c      	adds	r4, r5, r4
 80056b2:	00a3      	lsls	r3, r4, #2
 80056b4:	18f6      	adds	r6, r6, r3
 80056b6:	7873      	ldrb	r3, [r6, #1]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d847      	bhi.n	800574c <CheckSnippetCondition+0x104>
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <CheckSnippetCondition+0x134>)
 80056c0:	58d3      	ldr	r3, [r2, r3]
 80056c2:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 80056c4:	1c39      	adds	r1, r7, #0
 80056c6:	9801      	ldr	r0, [sp, #4]
 80056c8:	f7fa ff02 	bl	80004d0 <__aeabi_fcmpeq>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d03f      	beq.n	8005750 <CheckSnippetCondition+0x108>
 80056d0:	2001      	movs	r0, #1
 80056d2:	e7c6      	b.n	8005662 <CheckSnippetCondition+0x1a>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80056d4:	1c39      	adds	r1, r7, #0
 80056d6:	9801      	ldr	r0, [sp, #4]
 80056d8:	f7fa ff00 	bl	80004dc <__aeabi_fcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d101      	bne.n	80056e4 <CheckSnippetCondition+0x9c>
	return false;
 80056e0:	2000      	movs	r0, #0
 80056e2:	e7be      	b.n	8005662 <CheckSnippetCondition+0x1a>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80056e4:	2001      	movs	r0, #1
 80056e6:	e7bc      	b.n	8005662 <CheckSnippetCondition+0x1a>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 80056e8:	1c39      	adds	r1, r7, #0
 80056ea:	9801      	ldr	r0, [sp, #4]
 80056ec:	f7fa ff0a 	bl	8000504 <__aeabi_fcmpgt>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d02f      	beq.n	8005754 <CheckSnippetCondition+0x10c>
 80056f4:	2100      	movs	r1, #0
 80056f6:	1c38      	adds	r0, r7, #0
 80056f8:	f7fa feea 	bl	80004d0 <__aeabi_fcmpeq>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d12b      	bne.n	8005758 <CheckSnippetCondition+0x110>
 8005700:	3001      	adds	r0, #1
 8005702:	e7ae      	b.n	8005662 <CheckSnippetCondition+0x1a>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8005704:	1c39      	adds	r1, r7, #0
 8005706:	9801      	ldr	r0, [sp, #4]
 8005708:	f7fa fef2 	bl	80004f0 <__aeabi_fcmple>
 800570c:	2800      	cmp	r0, #0
 800570e:	d025      	beq.n	800575c <CheckSnippetCondition+0x114>
 8005710:	2001      	movs	r0, #1
 8005712:	e7a6      	b.n	8005662 <CheckSnippetCondition+0x1a>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8005714:	1c39      	adds	r1, r7, #0
 8005716:	9801      	ldr	r0, [sp, #4]
 8005718:	f7fa fefe 	bl	8000518 <__aeabi_fcmpge>
 800571c:	2800      	cmp	r0, #0
 800571e:	d01f      	beq.n	8005760 <CheckSnippetCondition+0x118>
 8005720:	2100      	movs	r1, #0
 8005722:	1c38      	adds	r0, r7, #0
 8005724:	f7fa fed4 	bl	80004d0 <__aeabi_fcmpeq>
 8005728:	2800      	cmp	r0, #0
 800572a:	d11b      	bne.n	8005764 <CheckSnippetCondition+0x11c>
 800572c:	3001      	adds	r0, #1
 800572e:	e798      	b.n	8005662 <CheckSnippetCondition+0x1a>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005730:	1c39      	adds	r1, r7, #0
 8005732:	9801      	ldr	r0, [sp, #4]
 8005734:	f7fa fecc 	bl	80004d0 <__aeabi_fcmpeq>
 8005738:	2800      	cmp	r0, #0
 800573a:	d115      	bne.n	8005768 <CheckSnippetCondition+0x120>
 800573c:	2100      	movs	r1, #0
 800573e:	1c38      	adds	r0, r7, #0
 8005740:	f7fa fec6 	bl	80004d0 <__aeabi_fcmpeq>
 8005744:	2800      	cmp	r0, #0
 8005746:	d111      	bne.n	800576c <CheckSnippetCondition+0x124>
 8005748:	3001      	adds	r0, #1
 800574a:	e78a      	b.n	8005662 <CheckSnippetCondition+0x1a>
	return false;
 800574c:	2000      	movs	r0, #0
 800574e:	e788      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005750:	2000      	movs	r0, #0
 8005752:	e786      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005754:	2000      	movs	r0, #0
 8005756:	e784      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005758:	2000      	movs	r0, #0
 800575a:	e782      	b.n	8005662 <CheckSnippetCondition+0x1a>
 800575c:	2000      	movs	r0, #0
 800575e:	e780      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005760:	2000      	movs	r0, #0
 8005762:	e77e      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005764:	2000      	movs	r0, #0
 8005766:	e77c      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005768:	2000      	movs	r0, #0
 800576a:	e77a      	b.n	8005662 <CheckSnippetCondition+0x1a>
 800576c:	2000      	movs	r0, #0
 800576e:	e778      	b.n	8005662 <CheckSnippetCondition+0x1a>
 8005770:	200069f0 	.word	0x200069f0
 8005774:	20001140 	.word	0x20001140
 8005778:	200000e8 	.word	0x200000e8
 800577c:	08018edc 	.word	0x08018edc

08005780 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8005780:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8005782:	f009 fcc3 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 8005786:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005788:	2400      	movs	r4, #0
 800578a:	e01b      	b.n	80057c4 <ExecuteSnippet+0x44>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <ExecuteSnippet+0x74>)
 800578e:	7818      	ldrb	r0, [r3, #0]
 8005790:	002b      	movs	r3, r5
 8005792:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <ExecuteSnippet+0x78>)
 8005794:	2100      	movs	r1, #0
 8005796:	f7ff fc41 	bl	800501c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 800579a:	0028      	movs	r0, r5
 800579c:	f7fa fcbc 	bl	8000118 <strlen>
 80057a0:	0002      	movs	r2, r0
 80057a2:	2100      	movs	r1, #0
 80057a4:	0028      	movs	r0, r5
 80057a6:	f00e fc31 	bl	801400c <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80057aa:	00b3      	lsls	r3, r6, #2
 80057ac:	199b      	adds	r3, r3, r6
 80057ae:	009a      	lsls	r2, r3, #2
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <ExecuteSnippet+0x7c>)
 80057b2:	189b      	adds	r3, r3, r2
 80057b4:	68d8      	ldr	r0, [r3, #12]
 80057b6:	4910      	ldr	r1, [pc, #64]	; (80057f8 <ExecuteSnippet+0x78>)
 80057b8:	f7ff ff04 	bl	80055c4 <ParseSnippetCommand>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d1e5      	bne.n	800578c <ExecuteSnippet+0xc>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80057c0:	3401      	adds	r4, #1
 80057c2:	b2a4      	uxth	r4, r4
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <ExecuteSnippet+0x80>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d911      	bls.n	80057f0 <ExecuteSnippet+0x70>
		if (snippets[s].state)								// Check for activated Snippets
 80057cc:	0026      	movs	r6, r4
 80057ce:	00a3      	lsls	r3, r4, #2
 80057d0:	191b      	adds	r3, r3, r4
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <ExecuteSnippet+0x7c>)
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	7c1b      	ldrb	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 80057de:	b2e0      	uxtb	r0, r4
 80057e0:	f7ff ff32 	bl	8005648 <CheckSnippetCondition>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d0eb      	beq.n	80057c0 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <ExecuteSnippet+0x84>)
 80057ea:	2220      	movs	r2, #32
 80057ec:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80057ee:	e7dc      	b.n	80057aa <ExecuteSnippet+0x2a>
			}
		}
  }
	
	return result;
}
 80057f0:	2000      	movs	r0, #0
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	20000af7 	.word	0x20000af7
 80057f8:	20000e40 	.word	0x20000e40
 80057fc:	200069f0 	.word	0x200069f0
 8005800:	20000ea7 	.word	0x20000ea7
 8005804:	200069d4 	.word	0x200069d4

08005808 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580a:	b083      	sub	sp, #12
 800580c:	0005      	movs	r5, r0
 800580e:	0016      	movs	r6, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005814:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005816:	2800      	cmp	r0, #0
 8005818:	d101      	bne.n	800581e <setBaudrateCommand+0x16>
 800581a:	b672      	cpsid	i
 800581c:	e7fe      	b.n	800581c <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800581e:	aa01      	add	r2, sp, #4
 8005820:	2101      	movs	r1, #1
 8005822:	0030      	movs	r0, r6
 8005824:	f009 fc76 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005828:	2300      	movs	r3, #0
 800582a:	56c3      	ldrsb	r3, [r0, r3]
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d017      	beq.n	8005860 <setBaudrateCommand+0x58>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
	}
	else
	{
		result = BOS_ERR_WrongValue;
 8005830:	2768      	movs	r7, #104	; 0x68
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005832:	466a      	mov	r2, sp
 8005834:	2102      	movs	r1, #2
 8005836:	0030      	movs	r0, r6
 8005838:	f009 fc6c 	bl	800f114 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800583c:	f00e f953 	bl	8013ae6 <atol>
 8005840:	0006      	movs	r6, r0

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
 8005842:	2f68      	cmp	r7, #104	; 0x68
 8005844:	d012      	beq.n	800586c <setBaudrateCommand+0x64>
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
	}
  else
  {
		UpdateBaudrate(port, baudrate);
 8005846:	0001      	movs	r1, r0
 8005848:	0020      	movs	r0, r4
 800584a:	f009 fa79 	bl	800ed40 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 800584e:	0023      	movs	r3, r4
 8005850:	0032      	movs	r2, r6
 8005852:	4909      	ldr	r1, [pc, #36]	; (8005878 <setBaudrateCommand+0x70>)
 8005854:	0028      	movs	r0, r5
 8005856:	f00e fdd3 	bl	8014400 <sprintf>
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800585a:	2000      	movs	r0, #0
 800585c:	b003      	add	sp, #12
 800585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005860:	3001      	adds	r0, #1
 8005862:	f00e f940 	bl	8013ae6 <atol>
 8005866:	b2c4      	uxtb	r4, r0
	BOS_Status result = BOS_OK;
 8005868:	2700      	movs	r7, #0
 800586a:	e7e2      	b.n	8005832 <setBaudrateCommand+0x2a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800586c:	2213      	movs	r2, #19
 800586e:	4903      	ldr	r1, [pc, #12]	; (800587c <setBaudrateCommand+0x74>)
 8005870:	0028      	movs	r0, r5
 8005872:	f00e fbc2 	bl	8013ffa <memcpy>
 8005876:	e7f0      	b.n	800585a <setBaudrateCommand+0x52>
 8005878:	08019cac 	.word	0x08019cac
 800587c:	08019c98 	.word	0x08019c98

08005880 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005880:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005882:	2800      	cmp	r0, #0
 8005884:	d101      	bne.n	800588a <flashsizeCommand+0xa>
 8005886:	b672      	cpsid	i
 8005888:	e7fe      	b.n	8005888 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <flashsizeCommand+0x1c>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	0412      	lsls	r2, r2, #16
 8005890:	0c12      	lsrs	r2, r2, #16
 8005892:	4903      	ldr	r1, [pc, #12]	; (80058a0 <flashsizeCommand+0x20>)
 8005894:	f00e fdb4 	bl	8014400 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005898:	2000      	movs	r0, #0
 800589a:	bd10      	pop	{r4, pc}
 800589c:	1ffff7cc 	.word	0x1ffff7cc
 80058a0:	08019670 	.word	0x08019670

080058a4 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	b085      	sub	sp, #20
 80058a8:	0004      	movs	r4, r0
 80058aa:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 80058b0:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <testportCommand+0x18c>)
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	ab02      	add	r3, sp, #8
 80058b6:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	d101      	bne.n	80058c0 <testportCommand+0x1c>
 80058bc:	b672      	cpsid	i
 80058be:	e7fe      	b.n	80058be <testportCommand+0x1a>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80058c0:	aa03      	add	r2, sp, #12
 80058c2:	2101      	movs	r1, #1
 80058c4:	f009 fc26 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80058c8:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 80058ca:	495a      	ldr	r1, [pc, #360]	; (8005a34 <testportCommand+0x190>)
 80058cc:	f7fa fc1a 	bl	8000104 <strcmp>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d000      	beq.n	80058d6 <testportCommand+0x32>
 80058d4:	e06a      	b.n	80059ac <testportCommand+0x108>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 80058d6:	4b58      	ldr	r3, [pc, #352]	; (8005a38 <testportCommand+0x194>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a57      	ldr	r2, [pc, #348]	; (8005a3c <testportCommand+0x198>)
 80058de:	5cd6      	ldrb	r6, [r2, r3]
    for (ports=1;ports<=NumOfPorts;ports++)
 80058e0:	2501      	movs	r5, #1
 80058e2:	e005      	b.n	80058f0 <testportCommand+0x4c>
    {
      if(PcPort!=ports)
 80058e4:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <testportCommand+0x194>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	42ab      	cmp	r3, r5
 80058ea:	d106      	bne.n	80058fa <testportCommand+0x56>
    for (ports=1;ports<=NumOfPorts;ports++)
 80058ec:	3501      	adds	r5, #1
 80058ee:	b2ed      	uxtb	r5, r5
 80058f0:	2d05      	cmp	r5, #5
 80058f2:	d9f7      	bls.n	80058e4 <testportCommand+0x40>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80058f4:	2000      	movs	r0, #0
 80058f6:	b005      	add	sp, #20
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WriteVaule[0]=rand();
 80058fa:	f00e fb9f 	bl	801403c <rand>
 80058fe:	af02      	add	r7, sp, #8
 8005900:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005902:	2364      	movs	r3, #100	; 0x64
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	3b5a      	subs	r3, #90	; 0x5a
 8005908:	2201      	movs	r2, #1
 800590a:	0039      	movs	r1, r7
 800590c:	0028      	movs	r0, r5
 800590e:	f009 f9a7 	bl	800ec60 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005912:	0028      	movs	r0, r5
 8005914:	f009 f986 	bl	800ec24 <GetUart>
 8005918:	6803      	ldr	r3, [r0, #0]
 800591a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800591c:	b2db      	uxtb	r3, r3
      if(WriteVaule[0]==ReadValue[0])
 800591e:	783a      	ldrb	r2, [r7, #0]
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <testportCommand+0xc6>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005924:	002a      	movs	r2, r5
 8005926:	4946      	ldr	r1, [pc, #280]	; (8005a40 <testportCommand+0x19c>)
 8005928:	0020      	movs	r0, r4
 800592a:	f00e fd69 	bl	8014400 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 800592e:	0020      	movs	r0, r4
 8005930:	f7fa fbf2 	bl	8000118 <strlen>
 8005934:	b282      	uxth	r2, r0
 8005936:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <testportCommand+0x194>)
 8005938:	7818      	ldrb	r0, [r3, #0]
 800593a:	2364      	movs	r3, #100	; 0x64
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	3b5a      	subs	r3, #90	; 0x5a
 8005940:	0021      	movs	r1, r4
 8005942:	f009 f98d 	bl	800ec60 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8005946:	2254      	movs	r2, #84	; 0x54
 8005948:	493e      	ldr	r1, [pc, #248]	; (8005a44 <testportCommand+0x1a0>)
 800594a:	0020      	movs	r0, r4
 800594c:	f00e fb55 	bl	8013ffa <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8005950:	0020      	movs	r0, r4
 8005952:	f7fa fbe1 	bl	8000118 <strlen>
 8005956:	b282      	uxth	r2, r0
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <testportCommand+0x194>)
 800595a:	7818      	ldrb	r0, [r3, #0]
 800595c:	2364      	movs	r3, #100	; 0x64
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	3b5a      	subs	r3, #90	; 0x5a
 8005962:	0021      	movs	r1, r4
 8005964:	f009 f97c 	bl	800ec60 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005968:	e014      	b.n	8005994 <testportCommand+0xf0>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 800596a:	002a      	movs	r2, r5
 800596c:	4936      	ldr	r1, [pc, #216]	; (8005a48 <testportCommand+0x1a4>)
 800596e:	0020      	movs	r0, r4
 8005970:	f00e fd46 	bl	8014400 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005974:	0020      	movs	r0, r4
 8005976:	f7fa fbcf 	bl	8000118 <strlen>
 800597a:	b282      	uxth	r2, r0
 800597c:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <testportCommand+0x194>)
 800597e:	7818      	ldrb	r0, [r3, #0]
 8005980:	2364      	movs	r3, #100	; 0x64
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	3b5a      	subs	r3, #90	; 0x5a
 8005986:	0021      	movs	r1, r4
 8005988:	f009 f96a 	bl	800ec60 <writePxMutex>
 800598c:	e7db      	b.n	8005946 <testportCommand+0xa2>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 800598e:	2001      	movs	r0, #1
 8005990:	f00b fb16 	bl	8010fc0 <HAL_Delay>
 8005994:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <testportCommand+0x194>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	3b01      	subs	r3, #1
 800599a:	1c71      	adds	r1, r6, #1
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <testportCommand+0x1a8>)
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	5c5b      	ldrb	r3, [r3, r1]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f2      	beq.n	800598e <testportCommand+0xea>
       LastEnter++;
 80059a8:	000e      	movs	r6, r1
 80059aa:	e79f      	b.n	80058ec <testportCommand+0x48>
	else if (pcParameterString1[0] == 'p') {
 80059ac:	2300      	movs	r3, #0
 80059ae:	56eb      	ldrsb	r3, [r5, r3]
 80059b0:	2b70      	cmp	r3, #112	; 0x70
 80059b2:	d005      	beq.n	80059c0 <testportCommand+0x11c>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 80059b4:	220f      	movs	r2, #15
 80059b6:	4926      	ldr	r1, [pc, #152]	; (8005a50 <testportCommand+0x1ac>)
 80059b8:	0020      	movs	r0, r4
 80059ba:	f00e fb1e 	bl	8013ffa <memcpy>
 80059be:	e799      	b.n	80058f4 <testportCommand+0x50>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 80059c0:	1c68      	adds	r0, r5, #1
 80059c2:	f00e f890 	bl	8013ae6 <atol>
 80059c6:	0005      	movs	r5, r0
 80059c8:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 80059ca:	1e7b      	subs	r3, r7, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d81a      	bhi.n	8005a08 <testportCommand+0x164>
        WriteVaule[0]=rand();
 80059d2:	f00e fb33 	bl	801403c <rand>
 80059d6:	ae02      	add	r6, sp, #8
 80059d8:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 80059da:	2364      	movs	r3, #100	; 0x64
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	3b32      	subs	r3, #50	; 0x32
 80059e0:	2201      	movs	r2, #1
 80059e2:	0031      	movs	r1, r6
 80059e4:	0038      	movs	r0, r7
 80059e6:	f009 f93b 	bl	800ec60 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 80059ea:	0038      	movs	r0, r7
 80059ec:	f009 f91a 	bl	800ec24 <GetUart>
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059f4:	b2db      	uxtb	r3, r3
  if(WriteVaule[0]==ReadValue[0])
 80059f6:	7832      	ldrb	r2, [r6, #0]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10e      	bne.n	8005a1a <testportCommand+0x176>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 80059fc:	b2ea      	uxtb	r2, r5
 80059fe:	4912      	ldr	r1, [pc, #72]	; (8005a48 <testportCommand+0x1a4>)
 8005a00:	0020      	movs	r0, r4
 8005a02:	f00e fcfd 	bl	8014400 <sprintf>
 8005a06:	e775      	b.n	80058f4 <testportCommand+0x50>
   result= BOS_ERR_WrongID;
 8005a08:	2366      	movs	r3, #102	; 0x66
  else if (result == BOS_ERR_WrongID) 
 8005a0a:	2b66      	cmp	r3, #102	; 0x66
 8005a0c:	d107      	bne.n	8005a1e <testportCommand+0x17a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005a0e:	221b      	movs	r2, #27
 8005a10:	4910      	ldr	r1, [pc, #64]	; (8005a54 <testportCommand+0x1b0>)
 8005a12:	0020      	movs	r0, r4
 8005a14:	f00e faf1 	bl	8013ffa <memcpy>
 8005a18:	e76c      	b.n	80058f4 <testportCommand+0x50>
      result = BOS_ERR_Keyword;
 8005a1a:	2306      	movs	r3, #6
 8005a1c:	e7f5      	b.n	8005a0a <testportCommand+0x166>
	else if (result == BOS_ERR_Keyword)  
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d000      	beq.n	8005a24 <testportCommand+0x180>
 8005a22:	e767      	b.n	80058f4 <testportCommand+0x50>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005a24:	b2ea      	uxtb	r2, r5
 8005a26:	4906      	ldr	r1, [pc, #24]	; (8005a40 <testportCommand+0x19c>)
 8005a28:	0020      	movs	r0, r4
 8005a2a:	f00e fce9 	bl	8014400 <sprintf>
 8005a2e:	e761      	b.n	80058f4 <testportCommand+0x50>
 8005a30:	08018800 	.word	0x08018800
 8005a34:	08018bdc 	.word	0x08018bdc
 8005a38:	20000af7 	.word	0x20000af7
 8005a3c:	20001098 	.word	0x20001098
 8005a40:	0801adac 	.word	0x0801adac
 8005a44:	0801adc0 	.word	0x0801adc0
 8005a48:	0801ad90 	.word	0x0801ad90
 8005a4c:	20000f58 	.word	0x20000f58
 8005a50:	0801ae30 	.word	0x0801ae30
 8005a54:	0801ae14 	.word	0x0801ae14

08005a58 <unbridgeCommand>:
{	
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	0004      	movs	r4, r0
 8005a5e:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	9303      	str	r3, [sp, #12]
 8005a64:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d101      	bne.n	8005a6e <unbridgeCommand+0x16>
 8005a6a:	b672      	cpsid	i
 8005a6c:	e7fe      	b.n	8005a6c <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005a6e:	aa03      	add	r2, sp, #12
 8005a70:	2101      	movs	r1, #1
 8005a72:	9801      	ldr	r0, [sp, #4]
 8005a74:	f009 fb4e 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005a78:	2300      	movs	r3, #0
 8005a7a:	56c3      	ldrsb	r3, [r0, r3]
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d016      	beq.n	8005aae <unbridgeCommand+0x56>
		result = BOS_ERR_WrongParam;
 8005a80:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005a82:	aa02      	add	r2, sp, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	9801      	ldr	r0, [sp, #4]
 8005a88:	f009 fb44 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	56c3      	ldrsb	r3, [r0, r3]
 8005a90:	2b70      	cmp	r3, #112	; 0x70
 8005a92:	d012      	beq.n	8005aba <unbridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8005a94:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d01a      	beq.n	8005ad0 <unbridgeCommand+0x78>
	else if (result == BOS_ERR_WrongParam) 
 8005a9a:	2867      	cmp	r0, #103	; 0x67
 8005a9c:	d021      	beq.n	8005ae2 <unbridgeCommand+0x8a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005a9e:	2219      	movs	r2, #25
 8005aa0:	4913      	ldr	r1, [pc, #76]	; (8005af0 <unbridgeCommand+0x98>)
 8005aa2:	0020      	movs	r0, r4
 8005aa4:	f00e faa9 	bl	8013ffa <memcpy>
}
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	b005      	add	sp, #20
 8005aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f00e f819 	bl	8013ae6 <atol>
 8005ab4:	b2c5      	uxtb	r5, r0
	BOS_Status result = BOS_OK;
 8005ab6:	2700      	movs	r7, #0
 8005ab8:	e7e3      	b.n	8005a82 <unbridgeCommand+0x2a>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005aba:	3001      	adds	r0, #1
 8005abc:	f00e f813 	bl	8013ae6 <atol>
 8005ac0:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	d10b      	bne.n	8005ade <unbridgeCommand+0x86>
		result = Unbridge(port1, port2);
 8005ac6:	0031      	movs	r1, r6
 8005ac8:	0028      	movs	r0, r5
 8005aca:	f7fe ffad 	bl	8004a28 <Unbridge>
 8005ace:	e7e2      	b.n	8005a96 <unbridgeCommand+0x3e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005ad0:	0033      	movs	r3, r6
 8005ad2:	002a      	movs	r2, r5
 8005ad4:	4907      	ldr	r1, [pc, #28]	; (8005af4 <unbridgeCommand+0x9c>)
 8005ad6:	0020      	movs	r0, r4
 8005ad8:	f00e fc92 	bl	8014400 <sprintf>
 8005adc:	e7e4      	b.n	8005aa8 <unbridgeCommand+0x50>
		result = BOS_ERR_WrongParam;
 8005ade:	2067      	movs	r0, #103	; 0x67
 8005ae0:	e7db      	b.n	8005a9a <unbridgeCommand+0x42>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005ae2:	220f      	movs	r2, #15
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <unbridgeCommand+0xa0>)
 8005ae6:	0020      	movs	r0, r4
 8005ae8:	f00e fa87 	bl	8013ffa <memcpy>
 8005aec:	e7dc      	b.n	8005aa8 <unbridgeCommand+0x50>
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	0801aedc 	.word	0x0801aedc
 8005af4:	0801aebc 	.word	0x0801aebc
 8005af8:	0801ae30 	.word	0x0801ae30

08005afc <bridgeCommand>:
{	
 8005afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afe:	b085      	sub	sp, #20
 8005b00:	0004      	movs	r4, r0
 8005b02:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d101      	bne.n	8005b12 <bridgeCommand+0x16>
 8005b0e:	b672      	cpsid	i
 8005b10:	e7fe      	b.n	8005b10 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005b12:	aa03      	add	r2, sp, #12
 8005b14:	2101      	movs	r1, #1
 8005b16:	9801      	ldr	r0, [sp, #4]
 8005b18:	f009 fafc 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	56c3      	ldrsb	r3, [r0, r3]
 8005b20:	2b70      	cmp	r3, #112	; 0x70
 8005b22:	d016      	beq.n	8005b52 <bridgeCommand+0x56>
		result = BOS_ERR_WrongParam;
 8005b24:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005b26:	aa02      	add	r2, sp, #8
 8005b28:	2102      	movs	r1, #2
 8005b2a:	9801      	ldr	r0, [sp, #4]
 8005b2c:	f009 faf2 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005b30:	2300      	movs	r3, #0
 8005b32:	56c3      	ldrsb	r3, [r0, r3]
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d012      	beq.n	8005b5e <bridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8005b38:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d01a      	beq.n	8005b74 <bridgeCommand+0x78>
	else if (result == BOS_ERR_WrongParam) 
 8005b3e:	2867      	cmp	r0, #103	; 0x67
 8005b40:	d021      	beq.n	8005b86 <bridgeCommand+0x8a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005b42:	2217      	movs	r2, #23
 8005b44:	4913      	ldr	r1, [pc, #76]	; (8005b94 <bridgeCommand+0x98>)
 8005b46:	0020      	movs	r0, r4
 8005b48:	f00e fa57 	bl	8013ffa <memcpy>
}
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	b005      	add	sp, #20
 8005b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005b52:	3001      	adds	r0, #1
 8005b54:	f00d ffc7 	bl	8013ae6 <atol>
 8005b58:	b2c5      	uxtb	r5, r0
	BOS_Status result = BOS_OK;
 8005b5a:	2700      	movs	r7, #0
 8005b5c:	e7e3      	b.n	8005b26 <bridgeCommand+0x2a>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f00d ffc1 	bl	8013ae6 <atol>
 8005b64:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	d10b      	bne.n	8005b82 <bridgeCommand+0x86>
		result = Bridge(port1, port2);
 8005b6a:	0031      	movs	r1, r6
 8005b6c:	0028      	movs	r0, r5
 8005b6e:	f7fe ff47 	bl	8004a00 <Bridge>
 8005b72:	e7e2      	b.n	8005b3a <bridgeCommand+0x3e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005b74:	0033      	movs	r3, r6
 8005b76:	002a      	movs	r2, r5
 8005b78:	4907      	ldr	r1, [pc, #28]	; (8005b98 <bridgeCommand+0x9c>)
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	f00e fc40 	bl	8014400 <sprintf>
 8005b80:	e7e4      	b.n	8005b4c <bridgeCommand+0x50>
		result = BOS_ERR_WrongParam;
 8005b82:	2067      	movs	r0, #103	; 0x67
 8005b84:	e7db      	b.n	8005b3e <bridgeCommand+0x42>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005b86:	220f      	movs	r2, #15
 8005b88:	4904      	ldr	r1, [pc, #16]	; (8005b9c <bridgeCommand+0xa0>)
 8005b8a:	0020      	movs	r0, r4
 8005b8c:	f00e fa35 	bl	8013ffa <memcpy>
 8005b90:	e7dc      	b.n	8005b4c <bridgeCommand+0x50>
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	0801951c 	.word	0x0801951c
 8005b98:	080194f8 	.word	0x080194f8
 8005b9c:	0801ae30 	.word	0x0801ae30

08005ba0 <delSnipCommand>:
{	
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	0006      	movs	r6, r0
 8005ba6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005bac:	2e00      	cmp	r6, #0
 8005bae:	d101      	bne.n	8005bb4 <delSnipCommand+0x14>
 8005bb0:	b672      	cpsid	i
 8005bb2:	e7fe      	b.n	8005bb2 <delSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005bb4:	aa01      	add	r2, sp, #4
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	f009 faac 	bl	800f114 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005bbc:	f00d ff8d 	bl	8013ada <atoi>
 8005bc0:	b2c4      	uxtb	r4, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005bc2:	2c00      	cmp	r4, #0
 8005bc4:	d03f      	beq.n	8005c46 <delSnipCommand+0xa6>
 8005bc6:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <delSnipCommand+0xc8>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d201      	bcs.n	8005bd2 <delSnipCommand+0x32>
 8005bce:	23ff      	movs	r3, #255	; 0xff
 8005bd0:	e03a      	b.n	8005c48 <delSnipCommand+0xa8>
		snippets[index-1].cond.conditionType = 0;
 8005bd2:	b2c0      	uxtb	r0, r0
 8005bd4:	3801      	subs	r0, #1
 8005bd6:	4d25      	ldr	r5, [pc, #148]	; (8005c6c <delSnipCommand+0xcc>)
 8005bd8:	2314      	movs	r3, #20
 8005bda:	4358      	muls	r0, r3
 8005bdc:	2700      	movs	r7, #0
 8005bde:	5547      	strb	r7, [r0, r5]
		snippets[index-1].cond.mathOperator = 0;
 8005be0:	182d      	adds	r5, r5, r0
 8005be2:	706f      	strb	r7, [r5, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005be4:	1ca8      	adds	r0, r5, #2
 8005be6:	2204      	movs	r2, #4
 8005be8:	0039      	movs	r1, r7
 8005bea:	f00e fa0f 	bl	801400c <memset>
		snippets[index-1].state = false;
 8005bee:	742f      	strb	r7, [r5, #16]
		free(snippets[index-1].cmd);
 8005bf0:	68e8      	ldr	r0, [r5, #12]
 8005bf2:	f00d ffbf 	bl	8013b74 <free>
		snippets[index-1].cmd = NULL;
 8005bf6:	60ef      	str	r7, [r5, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005bf8:	e008      	b.n	8005c0c <delSnipCommand+0x6c>
			if (snippets[s].cond.conditionType) {
 8005bfa:	00a3      	lsls	r3, r4, #2
 8005bfc:	191b      	adds	r3, r3, r4
 8005bfe:	009a      	lsls	r2, r3, #2
 8005c00:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <delSnipCommand+0xcc>)
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <delSnipCommand+0x82>
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005c08:	3401      	adds	r4, #1
 8005c0a:	b2e4      	uxtb	r4, r4
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <delSnipCommand+0xc8>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d8f2      	bhi.n	8005bfa <delSnipCommand+0x5a>
		--numOfRecordedSnippets;
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <delSnipCommand+0xc8>)
 8005c18:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005c1a:	f005 fafb 	bl	800b214 <SaveToRO>
	BOS_Status result = BOS_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e012      	b.n	8005c48 <delSnipCommand+0xa8>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005c22:	1e60      	subs	r0, r4, #1
 8005c24:	2714      	movs	r7, #20
 8005c26:	4378      	muls	r0, r7
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <delSnipCommand+0xcc>)
 8005c2a:	18c0      	adds	r0, r0, r3
 8005c2c:	003d      	movs	r5, r7
 8005c2e:	4365      	muls	r5, r4
 8005c30:	18ed      	adds	r5, r5, r3
 8005c32:	003a      	movs	r2, r7
 8005c34:	0029      	movs	r1, r5
 8005c36:	f00e f9e0 	bl	8013ffa <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005c3a:	003a      	movs	r2, r7
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	0028      	movs	r0, r5
 8005c40:	f00e f9e4 	bl	801400c <memset>
 8005c44:	e7e0      	b.n	8005c08 <delSnipCommand+0x68>
 8005c46:	23ff      	movs	r3, #255	; 0xff
	if (result == BOS_OK)
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <delSnipCommand+0xb8>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005c4c:	2223      	movs	r2, #35	; 0x23
 8005c4e:	4908      	ldr	r1, [pc, #32]	; (8005c70 <delSnipCommand+0xd0>)
 8005c50:	0030      	movs	r0, r6
 8005c52:	f00e f9d2 	bl	8013ffa <memcpy>
 8005c56:	e004      	b.n	8005c62 <delSnipCommand+0xc2>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005c58:	2236      	movs	r2, #54	; 0x36
 8005c5a:	4906      	ldr	r1, [pc, #24]	; (8005c74 <delSnipCommand+0xd4>)
 8005c5c:	0030      	movs	r0, r6
 8005c5e:	f00e f9cc 	bl	8013ffa <memcpy>
}
 8005c62:	2000      	movs	r0, #0
 8005c64:	b003      	add	sp, #12
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c68:	20000ea7 	.word	0x20000ea7
 8005c6c:	200069f0 	.word	0x200069f0
 8005c70:	0801963c 	.word	0x0801963c
 8005c74:	08019604 	.word	0x08019604

08005c78 <pauseSnipCommand>:
{	
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	0004      	movs	r4, r0
 8005c7e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d101      	bne.n	8005c8c <pauseSnipCommand+0x14>
 8005c88:	b672      	cpsid	i
 8005c8a:	e7fe      	b.n	8005c8a <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c8c:	aa01      	add	r2, sp, #4
 8005c8e:	2101      	movs	r1, #1
 8005c90:	f009 fa40 	bl	800f114 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005c94:	f00d ff21 	bl	8013ada <atoi>
 8005c98:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <pauseSnipCommand+0x2e>
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <pauseSnipCommand+0x60>)
 8005ca0:	7812      	ldrb	r2, [r2, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d207      	bcs.n	8005cb6 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005ca6:	2223      	movs	r2, #35	; 0x23
 8005ca8:	490c      	ldr	r1, [pc, #48]	; (8005cdc <pauseSnipCommand+0x64>)
 8005caa:	0020      	movs	r0, r4
 8005cac:	f00e f9a5 	bl	8013ffa <memcpy>
}
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	b002      	add	sp, #8
 8005cb4:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8005cb6:	b2c0      	uxtb	r0, r0
 8005cb8:	3801      	subs	r0, #1
 8005cba:	2314      	movs	r3, #20
 8005cbc:	4343      	muls	r3, r0
 8005cbe:	4808      	ldr	r0, [pc, #32]	; (8005ce0 <pauseSnipCommand+0x68>)
 8005cc0:	18c0      	adds	r0, r0, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005cc6:	f005 faa5 	bl	800b214 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005cca:	2235      	movs	r2, #53	; 0x35
 8005ccc:	4905      	ldr	r1, [pc, #20]	; (8005ce4 <pauseSnipCommand+0x6c>)
 8005cce:	0020      	movs	r0, r4
 8005cd0:	f00e f993 	bl	8013ffa <memcpy>
 8005cd4:	e7ec      	b.n	8005cb0 <pauseSnipCommand+0x38>
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	20000ea7 	.word	0x20000ea7
 8005cdc:	0801963c 	.word	0x0801963c
 8005ce0:	200069f0 	.word	0x200069f0
 8005ce4:	08019a3c 	.word	0x08019a3c

08005ce8 <actSnipCommand>:
{	
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	0004      	movs	r4, r0
 8005cee:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005cf4:	2c00      	cmp	r4, #0
 8005cf6:	d101      	bne.n	8005cfc <actSnipCommand+0x14>
 8005cf8:	b672      	cpsid	i
 8005cfa:	e7fe      	b.n	8005cfa <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005cfc:	aa01      	add	r2, sp, #4
 8005cfe:	2101      	movs	r1, #1
 8005d00:	f009 fa08 	bl	800f114 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005d04:	f00d fee9 	bl	8013ada <atoi>
 8005d08:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <actSnipCommand+0x2e>
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <actSnipCommand+0x60>)
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d207      	bcs.n	8005d26 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005d16:	2223      	movs	r2, #35	; 0x23
 8005d18:	490c      	ldr	r1, [pc, #48]	; (8005d4c <actSnipCommand+0x64>)
 8005d1a:	0020      	movs	r0, r4
 8005d1c:	f00e f96d 	bl	8013ffa <memcpy>
}
 8005d20:	2000      	movs	r0, #0
 8005d22:	b002      	add	sp, #8
 8005d24:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8005d26:	b2c0      	uxtb	r0, r0
 8005d28:	3801      	subs	r0, #1
 8005d2a:	2314      	movs	r3, #20
 8005d2c:	4343      	muls	r3, r0
 8005d2e:	4808      	ldr	r0, [pc, #32]	; (8005d50 <actSnipCommand+0x68>)
 8005d30:	18c0      	adds	r0, r0, r3
 8005d32:	2301      	movs	r3, #1
 8005d34:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005d36:	f005 fa6d 	bl	800b214 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005d3a:	2238      	movs	r2, #56	; 0x38
 8005d3c:	4905      	ldr	r1, [pc, #20]	; (8005d54 <actSnipCommand+0x6c>)
 8005d3e:	0020      	movs	r0, r4
 8005d40:	f00e f95b 	bl	8013ffa <memcpy>
 8005d44:	e7ec      	b.n	8005d20 <actSnipCommand+0x38>
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	20000ea7 	.word	0x20000ea7
 8005d4c:	0801963c 	.word	0x0801963c
 8005d50:	200069f0 	.word	0x200069f0
 8005d54:	08019400 	.word	0x08019400

08005d58 <snipCommand>:
{	
 8005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5a:	46ce      	mov	lr, r9
 8005d5c:	4647      	mov	r7, r8
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b08b      	sub	sp, #44	; 0x2c
 8005d62:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005d64:	aa06      	add	r2, sp, #24
 8005d66:	4b74      	ldr	r3, [pc, #464]	; (8005f38 <snipCommand+0x1e0>)
 8005d68:	3304      	adds	r3, #4
 8005d6a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005d6c:	c223      	stmia	r2!, {r0, r1, r5}
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005d72:	2c00      	cmp	r4, #0
 8005d74:	d101      	bne.n	8005d7a <snipCommand+0x22>
 8005d76:	b672      	cpsid	i
 8005d78:	e7fe      	b.n	8005d78 <snipCommand+0x20>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005d7a:	4b70      	ldr	r3, [pc, #448]	; (8005f3c <snipCommand+0x1e4>)
 8005d7c:	7818      	ldrb	r0, [r3, #0]
 8005d7e:	2301      	movs	r3, #1
 8005d80:	425b      	negs	r3, r3
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	3333      	adds	r3, #51	; 0x33
 8005d86:	2237      	movs	r2, #55	; 0x37
 8005d88:	496d      	ldr	r1, [pc, #436]	; (8005f40 <snipCommand+0x1e8>)
 8005d8a:	f008 ff69 	bl	800ec60 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005d8e:	2700      	movs	r7, #0
	uint8_t count = 1;
 8005d90:	2301      	movs	r3, #1
 8005d92:	4698      	mov	r8, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005d94:	e088      	b.n	8005ea8 <snipCommand+0x150>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005d96:	4b6b      	ldr	r3, [pc, #428]	; (8005f44 <snipCommand+0x1ec>)
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	7c1a      	ldrb	r2, [r3, #16]
 8005d9c:	00d3      	lsls	r3, r2, #3
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	aa06      	add	r2, sp, #24
 8005da2:	4694      	mov	ip, r2
 8005da4:	4463      	add	r3, ip
 8005da6:	4642      	mov	r2, r8
 8005da8:	4967      	ldr	r1, [pc, #412]	; (8005f48 <snipCommand+0x1f0>)
 8005daa:	0020      	movs	r0, r4
 8005dac:	f00e fb28 	bl	8014400 <sprintf>
 8005db0:	e087      	b.n	8005ec2 <snipCommand+0x16a>
				switch (snippets[s].cond.buffer1[1])
 8005db2:	00ab      	lsls	r3, r5, #2
 8005db4:	195b      	adds	r3, r3, r5
 8005db6:	009a      	lsls	r2, r3, #2
 8005db8:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <snipCommand+0x1ec>)
 8005dba:	189b      	adds	r3, r3, r2
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	3b05      	subs	r3, #5
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	2a09      	cmp	r2, #9
 8005dc4:	d84a      	bhi.n	8005e5c <snipCommand+0x104>
 8005dc6:	0093      	lsls	r3, r2, #2
 8005dc8:	4a60      	ldr	r2, [pc, #384]	; (8005f4c <snipCommand+0x1f4>)
 8005dca:	58d3      	ldr	r3, [r2, r3]
 8005dcc:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005dce:	2314      	movs	r3, #20
 8005dd0:	436b      	muls	r3, r5
 8005dd2:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <snipCommand+0x1ec>)
 8005dd4:	18d2      	adds	r2, r2, r3
 8005dd6:	7893      	ldrb	r3, [r2, #2]
 8005dd8:	68d2      	ldr	r2, [r2, #12]
 8005dda:	9200      	str	r2, [sp, #0]
 8005ddc:	0022      	movs	r2, r4
 8005dde:	495c      	ldr	r1, [pc, #368]	; (8005f50 <snipCommand+0x1f8>)
 8005de0:	0020      	movs	r0, r4
 8005de2:	f00e fb0d 	bl	8014400 <sprintf>
        		break;
 8005de6:	e039      	b.n	8005e5c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005de8:	2314      	movs	r3, #20
 8005dea:	436b      	muls	r3, r5
 8005dec:	4a55      	ldr	r2, [pc, #340]	; (8005f44 <snipCommand+0x1ec>)
 8005dee:	18d2      	adds	r2, r2, r3
 8005df0:	7893      	ldrb	r3, [r2, #2]
 8005df2:	68d2      	ldr	r2, [r2, #12]
 8005df4:	9200      	str	r2, [sp, #0]
 8005df6:	0022      	movs	r2, r4
 8005df8:	4956      	ldr	r1, [pc, #344]	; (8005f54 <snipCommand+0x1fc>)
 8005dfa:	0020      	movs	r0, r4
 8005dfc:	f00e fb00 	bl	8014400 <sprintf>
        		break;
 8005e00:	e02c      	b.n	8005e5c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005e02:	2314      	movs	r3, #20
 8005e04:	436b      	muls	r3, r5
 8005e06:	4a4f      	ldr	r2, [pc, #316]	; (8005f44 <snipCommand+0x1ec>)
 8005e08:	18d2      	adds	r2, r2, r3
 8005e0a:	7893      	ldrb	r3, [r2, #2]
 8005e0c:	7911      	ldrb	r1, [r2, #4]
 8005e0e:	68d2      	ldr	r2, [r2, #12]
 8005e10:	9201      	str	r2, [sp, #4]
 8005e12:	9100      	str	r1, [sp, #0]
 8005e14:	0022      	movs	r2, r4
 8005e16:	4950      	ldr	r1, [pc, #320]	; (8005f58 <snipCommand+0x200>)
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f00e faf1 	bl	8014400 <sprintf>
        		break;
 8005e1e:	e01d      	b.n	8005e5c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005e20:	2314      	movs	r3, #20
 8005e22:	436b      	muls	r3, r5
 8005e24:	4a47      	ldr	r2, [pc, #284]	; (8005f44 <snipCommand+0x1ec>)
 8005e26:	18d2      	adds	r2, r2, r3
 8005e28:	7893      	ldrb	r3, [r2, #2]
 8005e2a:	7911      	ldrb	r1, [r2, #4]
 8005e2c:	68d2      	ldr	r2, [r2, #12]
 8005e2e:	9201      	str	r2, [sp, #4]
 8005e30:	9100      	str	r1, [sp, #0]
 8005e32:	0022      	movs	r2, r4
 8005e34:	4949      	ldr	r1, [pc, #292]	; (8005f5c <snipCommand+0x204>)
 8005e36:	0020      	movs	r0, r4
 8005e38:	f00e fae2 	bl	8014400 <sprintf>
        		break;						
 8005e3c:	e00e      	b.n	8005e5c <snipCommand+0x104>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005e3e:	4e48      	ldr	r6, [pc, #288]	; (8005f60 <snipCommand+0x208>)
 8005e40:	0033      	movs	r3, r6
 8005e42:	0022      	movs	r2, r4
 8005e44:	4947      	ldr	r1, [pc, #284]	; (8005f64 <snipCommand+0x20c>)
 8005e46:	0020      	movs	r0, r4
 8005e48:	f00e fada 	bl	8014400 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8005e4c:	0030      	movs	r0, r6
 8005e4e:	f7fa f963 	bl	8000118 <strlen>
 8005e52:	0002      	movs	r2, r0
 8005e54:	2100      	movs	r1, #0
 8005e56:	0030      	movs	r0, r6
 8005e58:	f00e f8d8 	bl	801400c <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005e5c:	00ab      	lsls	r3, r5, #2
 8005e5e:	195b      	adds	r3, r3, r5
 8005e60:	009a      	lsls	r2, r3, #2
 8005e62:	4b38      	ldr	r3, [pc, #224]	; (8005f44 <snipCommand+0x1ec>)
 8005e64:	189b      	adds	r3, r3, r2
 8005e66:	68d8      	ldr	r0, [r3, #12]
 8005e68:	493d      	ldr	r1, [pc, #244]	; (8005f60 <snipCommand+0x208>)
 8005e6a:	f7ff fbab 	bl	80055c4 <ParseSnippetCommand>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d1e5      	bne.n	8005e3e <snipCommand+0xe6>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8005e72:	0020      	movs	r0, r4
 8005e74:	f7fa f950 	bl	8000118 <strlen>
 8005e78:	1820      	adds	r0, r4, r0
 8005e7a:	220c      	movs	r2, #12
 8005e7c:	493a      	ldr	r1, [pc, #232]	; (8005f68 <snipCommand+0x210>)
 8005e7e:	f00e f8bc 	bl	8013ffa <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005e82:	0020      	movs	r0, r4
 8005e84:	f7fa f948 	bl	8000118 <strlen>
 8005e88:	b282      	uxth	r2, r0
 8005e8a:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <snipCommand+0x1e4>)
 8005e8c:	7818      	ldrb	r0, [r3, #0]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	425b      	negs	r3, r3
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	3333      	adds	r3, #51	; 0x33
 8005e96:	0021      	movs	r1, r4
 8005e98:	f008 fee2 	bl	800ec60 <writePxMutex>
		++count;
 8005e9c:	4643      	mov	r3, r8
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	4698      	mov	r8, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005ea4:	3701      	adds	r7, #1
 8005ea6:	b2ff      	uxtb	r7, r7
 8005ea8:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <snipCommand+0x214>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	42bb      	cmp	r3, r7
 8005eae:	d938      	bls.n	8005f22 <snipCommand+0x1ca>
		if (snippets[s].cond.conditionType)
 8005eb0:	003d      	movs	r5, r7
 8005eb2:	00bb      	lsls	r3, r7, #2
 8005eb4:	19db      	adds	r3, r3, r7
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <snipCommand+0x1ec>)
 8005eba:	5cd3      	ldrb	r3, [r2, r3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d000      	beq.n	8005ec2 <snipCommand+0x16a>
 8005ec0:	e769      	b.n	8005d96 <snipCommand+0x3e>
		switch (snippets[s].cond.conditionType)
 8005ec2:	00ab      	lsls	r3, r5, #2
 8005ec4:	195b      	adds	r3, r3, r5
 8005ec6:	009a      	lsls	r2, r3, #2
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <snipCommand+0x1ec>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d100      	bne.n	8005ed2 <snipCommand+0x17a>
 8005ed0:	e76f      	b.n	8005db2 <snipCommand+0x5a>
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d1c2      	bne.n	8005e5c <snipCommand+0x104>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005ed6:	00ab      	lsls	r3, r5, #2
 8005ed8:	195b      	adds	r3, r3, r5
 8005eda:	009e      	lsls	r6, r3, #2
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <snipCommand+0x1ec>)
 8005ede:	18f6      	adds	r6, r6, r3
 8005ee0:	1db1      	adds	r1, r6, #6
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	a805      	add	r0, sp, #20
 8005ee6:	f00e f888 	bl	8013ffa <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005eea:	78f2      	ldrb	r2, [r6, #3]
 8005eec:	3a01      	subs	r2, #1
 8005eee:	7873      	ldrb	r3, [r6, #1]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	005e      	lsls	r6, r3, #1
 8005ef4:	18f3      	adds	r3, r6, r3
 8005ef6:	4e1e      	ldr	r6, [pc, #120]	; (8005f70 <snipCommand+0x218>)
 8005ef8:	18f6      	adds	r6, r6, r3
 8005efa:	0053      	lsls	r3, r2, #1
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	009a      	lsls	r2, r3, #2
 8005f00:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <snipCommand+0x21c>)
 8005f02:	189b      	adds	r3, r3, r2
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4699      	mov	r9, r3
 8005f08:	9805      	ldr	r0, [sp, #20]
 8005f0a:	f7fd f90b 	bl	8003124 <__aeabi_f2d>
 8005f0e:	9002      	str	r0, [sp, #8]
 8005f10:	9103      	str	r1, [sp, #12]
 8005f12:	9600      	str	r6, [sp, #0]
 8005f14:	464b      	mov	r3, r9
 8005f16:	0022      	movs	r2, r4
 8005f18:	4917      	ldr	r1, [pc, #92]	; (8005f78 <snipCommand+0x220>)
 8005f1a:	0020      	movs	r0, r4
 8005f1c:	f00e fa70 	bl	8014400 <sprintf>
				break;
 8005f20:	e79c      	b.n	8005e5c <snipCommand+0x104>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8005f22:	22a7      	movs	r2, #167	; 0xa7
 8005f24:	4915      	ldr	r1, [pc, #84]	; (8005f7c <snipCommand+0x224>)
 8005f26:	0020      	movs	r0, r4
 8005f28:	f00e f867 	bl	8013ffa <memcpy>
}
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	b00b      	add	sp, #44	; 0x2c
 8005f30:	bc0c      	pop	{r2, r3}
 8005f32:	4690      	mov	r8, r2
 8005f34:	4699      	mov	r9, r3
 8005f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f38:	08018800 	.word	0x08018800
 8005f3c:	20000af7 	.word	0x20000af7
 8005f40:	08019edc 	.word	0x08019edc
 8005f44:	200069f0 	.word	0x200069f0
 8005f48:	08019f14 	.word	0x08019f14
 8005f4c:	080193b4 	.word	0x080193b4
 8005f50:	08019f20 	.word	0x08019f20
 8005f54:	08019f34 	.word	0x08019f34
 8005f58:	08019f4c 	.word	0x08019f4c
 8005f5c:	08019f64 	.word	0x08019f64
 8005f60:	20000ed8 	.word	0x20000ed8
 8005f64:	08019f90 	.word	0x08019f90
 8005f68:	08019f98 	.word	0x08019f98
 8005f6c:	20000ea7 	.word	0x20000ea7
 8005f70:	08019a00 	.word	0x08019a00
 8005f74:	200000e8 	.word	0x200000e8
 8005f78:	08019f80 	.word	0x08019f80
 8005f7c:	08019fa4 	.word	0x08019fa4

08005f80 <idcodeCommand>:
{	
 8005f80:	b510      	push	{r4, lr}
 8005f82:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005f84:	d101      	bne.n	8005f8a <idcodeCommand+0xa>
 8005f86:	b672      	cpsid	i
 8005f88:	e7fe      	b.n	8005f88 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 8005f8a:	f00b f82d 	bl	8010fe8 <HAL_GetDEVID>
	switch (dev)
 8005f8e:	0403      	lsls	r3, r0, #16
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <idcodeCommand+0x80>)
 8005f94:	4694      	mov	ip, r2
 8005f96:	4463      	add	r3, ip
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d82a      	bhi.n	8005ff2 <idcodeCommand+0x72>
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a19      	ldr	r2, [pc, #100]	; (8006004 <idcodeCommand+0x84>)
 8005fa0:	58d3      	ldr	r3, [r2, r3]
 8005fa2:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8005fa4:	4a18      	ldr	r2, [pc, #96]	; (8006008 <idcodeCommand+0x88>)
 8005fa6:	4919      	ldr	r1, [pc, #100]	; (800600c <idcodeCommand+0x8c>)
 8005fa8:	0020      	movs	r0, r4
 8005faa:	f00e fa29 	bl	8014400 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8005fae:	f00b f815 	bl	8010fdc <HAL_GetREVID>
 8005fb2:	0b03      	lsrs	r3, r0, #12
 8005fb4:	0022      	movs	r2, r4
 8005fb6:	4916      	ldr	r1, [pc, #88]	; (8006010 <idcodeCommand+0x90>)
 8005fb8:	0020      	movs	r0, r4
 8005fba:	f00e fa21 	bl	8014400 <sprintf>
}
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 8005fc2:	4a14      	ldr	r2, [pc, #80]	; (8006014 <idcodeCommand+0x94>)
 8005fc4:	4911      	ldr	r1, [pc, #68]	; (800600c <idcodeCommand+0x8c>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00e fa1a 	bl	8014400 <sprintf>
  		break;
 8005fcc:	e7ef      	b.n	8005fae <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <idcodeCommand+0x98>)
 8005fd0:	490e      	ldr	r1, [pc, #56]	; (800600c <idcodeCommand+0x8c>)
 8005fd2:	0020      	movs	r0, r4
 8005fd4:	f00e fa14 	bl	8014400 <sprintf>
  		break;
 8005fd8:	e7e9      	b.n	8005fae <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8005fda:	4a10      	ldr	r2, [pc, #64]	; (800601c <idcodeCommand+0x9c>)
 8005fdc:	490b      	ldr	r1, [pc, #44]	; (800600c <idcodeCommand+0x8c>)
 8005fde:	0020      	movs	r0, r4
 8005fe0:	f00e fa0e 	bl	8014400 <sprintf>
  		break;
 8005fe4:	e7e3      	b.n	8005fae <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8005fe6:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <idcodeCommand+0xa0>)
 8005fe8:	4908      	ldr	r1, [pc, #32]	; (800600c <idcodeCommand+0x8c>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00e fa08 	bl	8014400 <sprintf>
  		break;
 8005ff0:	e7dd      	b.n	8005fae <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	; (8006024 <idcodeCommand+0xa4>)
 8005ff4:	4905      	ldr	r1, [pc, #20]	; (800600c <idcodeCommand+0x8c>)
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	f00e fa02 	bl	8014400 <sprintf>
  		break;
 8005ffc:	e7d7      	b.n	8005fae <idcodeCommand+0x2e>
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	fffffbc0 	.word	0xfffffbc0
 8006004:	080193dc 	.word	0x080193dc
 8006008:	080198fc 	.word	0x080198fc
 800600c:	08019908 	.word	0x08019908
 8006010:	08019954 	.word	0x08019954
 8006014:	0801991c 	.word	0x0801991c
 8006018:	08019928 	.word	0x08019928
 800601c:	08019934 	.word	0x08019934
 8006020:	08019940 	.word	0x08019940
 8006024:	0801994c 	.word	0x0801994c

08006028 <uuidCommand>:
{
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800602c:	d101      	bne.n	8006032 <uuidCommand+0xa>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8006032:	220e      	movs	r2, #14
 8006034:	490d      	ldr	r1, [pc, #52]	; (800606c <uuidCommand+0x44>)
 8006036:	f00d ffe0 	bl	8013ffa <memcpy>
	for(uint8_t i=0 ; i<3 ; i++)
 800603a:	2500      	movs	r5, #0
 800603c:	2d02      	cmp	r5, #2
 800603e:	d80b      	bhi.n	8006058 <uuidCommand+0x30>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <uuidCommand+0x48>)
 8006042:	18eb      	adds	r3, r5, r3
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0022      	movs	r2, r4
 800604a:	490a      	ldr	r1, [pc, #40]	; (8006074 <uuidCommand+0x4c>)
 800604c:	0020      	movs	r0, r4
 800604e:	f00e f9d7 	bl	8014400 <sprintf>
	for(uint8_t i=0 ; i<3 ; i++)
 8006052:	3501      	adds	r5, #1
 8006054:	b2ed      	uxtb	r5, r5
 8006056:	e7f1      	b.n	800603c <uuidCommand+0x14>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8006058:	0020      	movs	r0, r4
 800605a:	f7fa f85d 	bl	8000118 <strlen>
 800605e:	1820      	adds	r0, r4, r0
 8006060:	2203      	movs	r2, #3
 8006062:	4905      	ldr	r1, [pc, #20]	; (8006078 <uuidCommand+0x50>)
 8006064:	f00d ffc9 	bl	8013ffa <memcpy>
}
 8006068:	2000      	movs	r0, #0
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	0801af08 	.word	0x0801af08
 8006070:	07fffdeb 	.word	0x07fffdeb
 8006074:	0801af18 	.word	0x0801af18
 8006078:	0801a4f0 	.word	0x0801a4f0

0800607c <timeCommand>:
{
 800607c:	b530      	push	{r4, r5, lr}
 800607e:	b085      	sub	sp, #20
 8006080:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006082:	d101      	bne.n	8006088 <timeCommand+0xc>
 8006084:	b672      	cpsid	i
 8006086:	e7fe      	b.n	8006086 <timeCommand+0xa>
	GetTimeDate();
 8006088:	f008 fb90 	bl	800e7ac <GetTimeDate>
	if (BOS.hourformat == 24)
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <timeCommand+0x80>)
 800608e:	7b5b      	ldrb	r3, [r3, #13]
 8006090:	2b18      	cmp	r3, #24
 8006092:	d004      	beq.n	800609e <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d00e      	beq.n	80060b6 <timeCommand+0x3a>
}
 8006098:	2000      	movs	r0, #0
 800609a:	b005      	add	sp, #20
 800609c:	bd30      	pop	{r4, r5, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 800609e:	4917      	ldr	r1, [pc, #92]	; (80060fc <timeCommand+0x80>)
 80060a0:	7c8a      	ldrb	r2, [r1, #18]
 80060a2:	7c4b      	ldrb	r3, [r1, #17]
 80060a4:	7c08      	ldrb	r0, [r1, #16]
 80060a6:	89c9      	ldrh	r1, [r1, #14]
 80060a8:	9101      	str	r1, [sp, #4]
 80060aa:	9000      	str	r0, [sp, #0]
 80060ac:	4914      	ldr	r1, [pc, #80]	; (8006100 <timeCommand+0x84>)
 80060ae:	0020      	movs	r0, r4
 80060b0:	f00e f9a6 	bl	8014400 <sprintf>
 80060b4:	e7f0      	b.n	8006098 <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 80060b6:	4b11      	ldr	r3, [pc, #68]	; (80060fc <timeCommand+0x80>)
 80060b8:	7cdb      	ldrb	r3, [r3, #19]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10d      	bne.n	80060da <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 80060be:	490f      	ldr	r1, [pc, #60]	; (80060fc <timeCommand+0x80>)
 80060c0:	7c8a      	ldrb	r2, [r1, #18]
 80060c2:	7c4b      	ldrb	r3, [r1, #17]
 80060c4:	7c08      	ldrb	r0, [r1, #16]
 80060c6:	89c9      	ldrh	r1, [r1, #14]
 80060c8:	4d0e      	ldr	r5, [pc, #56]	; (8006104 <timeCommand+0x88>)
 80060ca:	9502      	str	r5, [sp, #8]
 80060cc:	9101      	str	r1, [sp, #4]
 80060ce:	9000      	str	r0, [sp, #0]
 80060d0:	490d      	ldr	r1, [pc, #52]	; (8006108 <timeCommand+0x8c>)
 80060d2:	0020      	movs	r0, r4
 80060d4:	f00e f994 	bl	8014400 <sprintf>
 80060d8:	e7de      	b.n	8006098 <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d1dc      	bne.n	8006098 <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80060de:	4907      	ldr	r1, [pc, #28]	; (80060fc <timeCommand+0x80>)
 80060e0:	7c8a      	ldrb	r2, [r1, #18]
 80060e2:	7c4b      	ldrb	r3, [r1, #17]
 80060e4:	7c08      	ldrb	r0, [r1, #16]
 80060e6:	89c9      	ldrh	r1, [r1, #14]
 80060e8:	4d08      	ldr	r5, [pc, #32]	; (800610c <timeCommand+0x90>)
 80060ea:	9502      	str	r5, [sp, #8]
 80060ec:	9101      	str	r1, [sp, #4]
 80060ee:	9000      	str	r0, [sp, #0]
 80060f0:	4905      	ldr	r1, [pc, #20]	; (8006108 <timeCommand+0x8c>)
 80060f2:	0020      	movs	r0, r4
 80060f4:	f00e f984 	bl	8014400 <sprintf>
 80060f8:	e7ce      	b.n	8006098 <timeCommand+0x1c>
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	200069d4 	.word	0x200069d4
 8006100:	0801ae50 	.word	0x0801ae50
 8006104:	0801aea4 	.word	0x0801aea4
 8006108:	0801ae78 	.word	0x0801ae78
 800610c:	0801aea8 	.word	0x0801aea8

08006110 <dateCommand>:
{
 8006110:	b510      	push	{r4, lr}
 8006112:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006114:	d101      	bne.n	800611a <dateCommand+0xa>
 8006116:	b672      	cpsid	i
 8006118:	e7fe      	b.n	8006118 <dateCommand+0x8>
	GetTimeDate();
 800611a:	f008 fb47 	bl	800e7ac <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 800611e:	f7fe fc4d 	bl	80049bc <GetDateString>
 8006122:	0002      	movs	r2, r0
 8006124:	4902      	ldr	r1, [pc, #8]	; (8006130 <dateCommand+0x20>)
 8006126:	0020      	movs	r0, r4
 8006128:	f00e f96a 	bl	8014400 <sprintf>
}
 800612c:	2000      	movs	r0, #0
 800612e:	bd10      	pop	{r4, pc}
 8006130:	08019544 	.word	0x08019544

08006134 <getCommand>:
{
 8006134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006136:	b083      	sub	sp, #12
 8006138:	0004      	movs	r4, r0
 800613a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8006142:	2800      	cmp	r0, #0
 8006144:	d101      	bne.n	800614a <getCommand+0x16>
 8006146:	b672      	cpsid	i
 8006148:	e7fe      	b.n	8006148 <getCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800614a:	aa01      	add	r2, sp, #4
 800614c:	2101      	movs	r1, #1
 800614e:	0030      	movs	r0, r6
 8006150:	f008 ffe0 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006154:	0005      	movs	r5, r0
 8006156:	4b7d      	ldr	r3, [pc, #500]	; (800634c <getCommand+0x218>)
 8006158:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800615a:	2204      	movs	r2, #4
 800615c:	497c      	ldr	r1, [pc, #496]	; (8006350 <getCommand+0x21c>)
 800615e:	f00e f993 	bl	8014488 <strncmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	d000      	beq.n	8006168 <getCommand+0x34>
 8006166:	e09c      	b.n	80062a2 <getCommand+0x16e>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8006168:	3504      	adds	r5, #4
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	1f1e      	subs	r6, r3, #4
 800616e:	0032      	movs	r2, r6
 8006170:	4978      	ldr	r1, [pc, #480]	; (8006354 <getCommand+0x220>)
 8006172:	0028      	movs	r0, r5
 8006174:	f00e f988 	bl	8014488 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d122      	bne.n	80061c2 <getCommand+0x8e>
			if (BOS.response == BOS_RESPONSE_ALL)
 800617c:	4b76      	ldr	r3, [pc, #472]	; (8006358 <getCommand+0x224>)
 800617e:	799b      	ldrb	r3, [r3, #6]
 8006180:	2b60      	cmp	r3, #96	; 0x60
 8006182:	d10b      	bne.n	800619c <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8006184:	4a75      	ldr	r2, [pc, #468]	; (800635c <getCommand+0x228>)
 8006186:	4976      	ldr	r1, [pc, #472]	; (8006360 <getCommand+0x22c>)
 8006188:	0020      	movs	r0, r4
 800618a:	f00e f939 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 800618e:	2300      	movs	r3, #0
	else if (result == BOS_ERR_WrongValue)
 8006190:	2b68      	cmp	r3, #104	; 0x68
 8006192:	d100      	bne.n	8006196 <getCommand+0x62>
 8006194:	e0d3      	b.n	800633e <getCommand+0x20a>
}
 8006196:	2000      	movs	r0, #0
 8006198:	b003      	add	sp, #12
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 800619c:	2b20      	cmp	r3, #32
 800619e:	d106      	bne.n	80061ae <getCommand+0x7a>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80061a0:	4a70      	ldr	r2, [pc, #448]	; (8006364 <getCommand+0x230>)
 80061a2:	496f      	ldr	r1, [pc, #444]	; (8006360 <getCommand+0x22c>)
 80061a4:	0020      	movs	r0, r4
 80061a6:	f00e f92b 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 80061aa:	2300      	movs	r3, #0
 80061ac:	e7f0      	b.n	8006190 <getCommand+0x5c>
			else if (BOS.response == BOS_RESPONSE_NONE)
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d000      	beq.n	80061b4 <getCommand+0x80>
 80061b2:	e0c0      	b.n	8006336 <getCommand+0x202>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80061b4:	4a6c      	ldr	r2, [pc, #432]	; (8006368 <getCommand+0x234>)
 80061b6:	496a      	ldr	r1, [pc, #424]	; (8006360 <getCommand+0x22c>)
 80061b8:	0020      	movs	r0, r4
 80061ba:	f00e f921 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 80061be:	2300      	movs	r3, #0
 80061c0:	e7e6      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80061c2:	0032      	movs	r2, r6
 80061c4:	4969      	ldr	r1, [pc, #420]	; (800636c <getCommand+0x238>)
 80061c6:	0028      	movs	r0, r5
 80061c8:	f00e f95e 	bl	8014488 <strncmp>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d11d      	bne.n	800620c <getCommand+0xd8>
			if (BOS.trace == TRACE_BOTH)
 80061d0:	4b61      	ldr	r3, [pc, #388]	; (8006358 <getCommand+0x224>)
 80061d2:	79db      	ldrb	r3, [r3, #7]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d106      	bne.n	80061e6 <getCommand+0xb2>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80061d8:	4a60      	ldr	r2, [pc, #384]	; (800635c <getCommand+0x228>)
 80061da:	4961      	ldr	r1, [pc, #388]	; (8006360 <getCommand+0x22c>)
 80061dc:	0020      	movs	r0, r4
 80061de:	f00e f90f 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 80061e2:	2300      	movs	r3, #0
 80061e4:	e7d4      	b.n	8006190 <getCommand+0x5c>
			else if (BOS.trace == TRACE_MESSAGE)
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d106      	bne.n	80061f8 <getCommand+0xc4>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80061ea:	4a5e      	ldr	r2, [pc, #376]	; (8006364 <getCommand+0x230>)
 80061ec:	495c      	ldr	r1, [pc, #368]	; (8006360 <getCommand+0x22c>)
 80061ee:	0020      	movs	r0, r4
 80061f0:	f00e f906 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 80061f4:	2300      	movs	r3, #0
 80061f6:	e7cb      	b.n	8006190 <getCommand+0x5c>
			else if (BOS.trace == TRACE_NONE)
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d000      	beq.n	80061fe <getCommand+0xca>
 80061fc:	e09d      	b.n	800633a <getCommand+0x206>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80061fe:	4a5a      	ldr	r2, [pc, #360]	; (8006368 <getCommand+0x234>)
 8006200:	4957      	ldr	r1, [pc, #348]	; (8006360 <getCommand+0x22c>)
 8006202:	0020      	movs	r0, r4
 8006204:	f00e f8fc 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 8006208:	2300      	movs	r3, #0
 800620a:	e7c1      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800620c:	0032      	movs	r2, r6
 800620e:	4958      	ldr	r1, [pc, #352]	; (8006370 <getCommand+0x23c>)
 8006210:	0028      	movs	r0, r5
 8006212:	f00e f939 	bl	8014488 <strncmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	d107      	bne.n	800622a <getCommand+0xf6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 800621a:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <getCommand+0x224>)
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	4955      	ldr	r1, [pc, #340]	; (8006374 <getCommand+0x240>)
 8006220:	0020      	movs	r0, r4
 8006222:	f00e f8ed 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 8006226:	2300      	movs	r3, #0
 8006228:	e7b2      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800622a:	0032      	movs	r2, r6
 800622c:	4952      	ldr	r1, [pc, #328]	; (8006378 <getCommand+0x244>)
 800622e:	0028      	movs	r0, r5
 8006230:	f00e f92a 	bl	8014488 <strncmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	d107      	bne.n	8006248 <getCommand+0x114>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006238:	4b47      	ldr	r3, [pc, #284]	; (8006358 <getCommand+0x224>)
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	494d      	ldr	r1, [pc, #308]	; (8006374 <getCommand+0x240>)
 800623e:	0020      	movs	r0, r4
 8006240:	f00e f8de 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 8006244:	2300      	movs	r3, #0
 8006246:	e7a3      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006248:	0032      	movs	r2, r6
 800624a:	494c      	ldr	r1, [pc, #304]	; (800637c <getCommand+0x248>)
 800624c:	0028      	movs	r0, r5
 800624e:	f00e f91b 	bl	8014488 <strncmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	d107      	bne.n	8006266 <getCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8006256:	4b40      	ldr	r3, [pc, #256]	; (8006358 <getCommand+0x224>)
 8006258:	885a      	ldrh	r2, [r3, #2]
 800625a:	4946      	ldr	r1, [pc, #280]	; (8006374 <getCommand+0x240>)
 800625c:	0020      	movs	r0, r4
 800625e:	f00e f8cf 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 8006262:	2300      	movs	r3, #0
 8006264:	e794      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006266:	0032      	movs	r2, r6
 8006268:	4945      	ldr	r1, [pc, #276]	; (8006380 <getCommand+0x24c>)
 800626a:	0028      	movs	r0, r5
 800626c:	f00e f90c 	bl	8014488 <strncmp>
 8006270:	2800      	cmp	r0, #0
 8006272:	d107      	bne.n	8006284 <getCommand+0x150>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8006274:	4b38      	ldr	r3, [pc, #224]	; (8006358 <getCommand+0x224>)
 8006276:	791a      	ldrb	r2, [r3, #4]
 8006278:	493e      	ldr	r1, [pc, #248]	; (8006374 <getCommand+0x240>)
 800627a:	0020      	movs	r0, r4
 800627c:	f00e f8c0 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 8006280:	2300      	movs	r3, #0
 8006282:	e785      	b.n	8006190 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006284:	0032      	movs	r2, r6
 8006286:	493f      	ldr	r1, [pc, #252]	; (8006384 <getCommand+0x250>)
 8006288:	0028      	movs	r0, r5
 800628a:	f00e f8fd 	bl	8014488 <strncmp>
 800628e:	2800      	cmp	r0, #0
 8006290:	d10e      	bne.n	80062b0 <getCommand+0x17c>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8006292:	4b31      	ldr	r3, [pc, #196]	; (8006358 <getCommand+0x224>)
 8006294:	795a      	ldrb	r2, [r3, #5]
 8006296:	4937      	ldr	r1, [pc, #220]	; (8006374 <getCommand+0x240>)
 8006298:	0020      	movs	r0, r4
 800629a:	f00e f8b1 	bl	8014400 <sprintf>
	BOS_Status result = BOS_OK; 
 800629e:	2300      	movs	r3, #0
 80062a0:	e776      	b.n	8006190 <getCommand+0x5c>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 80062a2:	2205      	movs	r2, #5
 80062a4:	4938      	ldr	r1, [pc, #224]	; (8006388 <getCommand+0x254>)
 80062a6:	0028      	movs	r0, r5
 80062a8:	f00e f8ee 	bl	8014488 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d005      	beq.n	80062bc <getCommand+0x188>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80062b0:	2213      	movs	r2, #19
 80062b2:	4936      	ldr	r1, [pc, #216]	; (800638c <getCommand+0x258>)
 80062b4:	0020      	movs	r0, r4
 80062b6:	f00d fea0 	bl	8013ffa <memcpy>
 80062ba:	e76c      	b.n	8006196 <getCommand+0x62>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80062bc:	466a      	mov	r2, sp
 80062be:	2102      	movs	r1, #2
 80062c0:	0030      	movs	r0, r6
 80062c2:	f008 ff27 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80062c6:	0007      	movs	r7, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80062c8:	2600      	movs	r6, #0
 80062ca:	e00b      	b.n	80062e4 <getCommand+0x1b0>
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80062cc:	00b3      	lsls	r3, r6, #2
 80062ce:	199b      	adds	r3, r3, r6
 80062d0:	0059      	lsls	r1, r3, #1
 80062d2:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <getCommand+0x25c>)
 80062d4:	18c9      	adds	r1, r1, r3
 80062d6:	0038      	movs	r0, r7
 80062d8:	f7f9 ff14 	bl	8000104 <strcmp>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d00c      	beq.n	80062fa <getCommand+0x1c6>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80062e0:	3601      	adds	r6, #1
 80062e2:	b2f6      	uxtb	r6, r6
 80062e4:	2e09      	cmp	r6, #9
 80062e6:	d9f1      	bls.n	80062cc <getCommand+0x198>
		temp8 = 0;
 80062e8:	2500      	movs	r5, #0
		if (!temp8)
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	d107      	bne.n	80062fe <getCommand+0x1ca>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80062ee:	003a      	movs	r2, r7
 80062f0:	4928      	ldr	r1, [pc, #160]	; (8006394 <getCommand+0x260>)
 80062f2:	0020      	movs	r0, r4
 80062f4:	f00e f884 	bl	8014400 <sprintf>
			return pdFALSE;
 80062f8:	e74d      	b.n	8006196 <getCommand+0x62>
				temp8 = 1; break;
 80062fa:	2501      	movs	r5, #1
 80062fc:	e7f5      	b.n	80062ea <getCommand+0x1b6>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 80062fe:	003a      	movs	r2, r7
 8006300:	4925      	ldr	r1, [pc, #148]	; (8006398 <getCommand+0x264>)
 8006302:	0020      	movs	r0, r4
 8006304:	f00e f87c 	bl	8014400 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8006308:	e008      	b.n	800631c <getCommand+0x1e8>
				if (InGroup(j, i))
 800630a:	1e6b      	subs	r3, r5, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4a23      	ldr	r2, [pc, #140]	; (800639c <getCommand+0x268>)
 8006310:	5a9b      	ldrh	r3, [r3, r2]
 8006312:	4133      	asrs	r3, r6
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d407      	bmi.n	8006328 <getCommand+0x1f4>
			for(j=1 ; j<=N ; j++)						// N modules
 8006318:	3501      	adds	r5, #1
 800631a:	b2ed      	uxtb	r5, r5
 800631c:	4b20      	ldr	r3, [pc, #128]	; (80063a0 <getCommand+0x26c>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	42ab      	cmp	r3, r5
 8006322:	d2f2      	bcs.n	800630a <getCommand+0x1d6>
	BOS_Status result = BOS_OK; 
 8006324:	2300      	movs	r3, #0
 8006326:	e733      	b.n	8006190 <getCommand+0x5c>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8006328:	002b      	movs	r3, r5
 800632a:	0022      	movs	r2, r4
 800632c:	491d      	ldr	r1, [pc, #116]	; (80063a4 <getCommand+0x270>)
 800632e:	0020      	movs	r0, r4
 8006330:	f00e f866 	bl	8014400 <sprintf>
 8006334:	e7f0      	b.n	8006318 <getCommand+0x1e4>
				result = BOS_ERR_WrongValue;
 8006336:	2368      	movs	r3, #104	; 0x68
 8006338:	e72a      	b.n	8006190 <getCommand+0x5c>
				result = BOS_ERR_WrongValue;
 800633a:	2368      	movs	r3, #104	; 0x68
 800633c:	e728      	b.n	8006190 <getCommand+0x5c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 800633e:	4b03      	ldr	r3, [pc, #12]	; (800634c <getCommand+0x218>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4919      	ldr	r1, [pc, #100]	; (80063a8 <getCommand+0x274>)
 8006344:	0020      	movs	r0, r4
 8006346:	f00e f85b 	bl	8014400 <sprintf>
 800634a:	e724      	b.n	8006196 <getCommand+0x62>
 800634c:	20000f1c 	.word	0x20000f1c
 8006350:	080196a0 	.word	0x080196a0
 8006354:	080196a8 	.word	0x080196a8
 8006358:	200069d4 	.word	0x200069d4
 800635c:	08018bdc 	.word	0x08018bdc
 8006360:	08018a34 	.word	0x08018a34
 8006364:	080196b4 	.word	0x080196b4
 8006368:	080196b8 	.word	0x080196b8
 800636c:	080196c0 	.word	0x080196c0
 8006370:	080196c8 	.word	0x080196c8
 8006374:	08019060 	.word	0x08019060
 8006378:	080196d4 	.word	0x080196d4
 800637c:	080196e0 	.word	0x080196e0
 8006380:	080196f0 	.word	0x080196f0
 8006384:	08019704 	.word	0x08019704
 8006388:	08019718 	.word	0x08019718
 800638c:	08019758 	.word	0x08019758
 8006390:	20000c50 	.word	0x20000c50
 8006394:	08019720 	.word	0x08019720
 8006398:	0801973c 	.word	0x0801973c
 800639c:	20000cb4 	.word	0x20000cb4
 80063a0:	2000001c 	.word	0x2000001c
 80063a4:	08019750 	.word	0x08019750
 80063a8:	0801976c 	.word	0x0801976c

080063ac <defaultCommand>:
{
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	0004      	movs	r4, r0
 80063b2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d101      	bne.n	80063c0 <defaultCommand+0x14>
 80063bc:	b672      	cpsid	i
 80063be:	e7fe      	b.n	80063be <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80063c0:	aa01      	add	r2, sp, #4
 80063c2:	2101      	movs	r1, #1
 80063c4:	f008 fea6 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80063c8:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 80063ca:	9e01      	ldr	r6, [sp, #4]
 80063cc:	0032      	movs	r2, r6
 80063ce:	491e      	ldr	r1, [pc, #120]	; (8006448 <defaultCommand+0x9c>)
 80063d0:	f00e f85a 	bl	8014488 <strncmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d01c      	beq.n	8006412 <defaultCommand+0x66>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 80063d8:	0032      	movs	r2, r6
 80063da:	491c      	ldr	r1, [pc, #112]	; (800644c <defaultCommand+0xa0>)
 80063dc:	0028      	movs	r0, r5
 80063de:	f00e f853 	bl	8014488 <strncmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d129      	bne.n	800643a <defaultCommand+0x8e>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 80063e6:	2200      	movs	r2, #0
 80063e8:	2116      	movs	r1, #22
 80063ea:	20ff      	movs	r0, #255	; 0xff
 80063ec:	f002 ff68 	bl	80092c0 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <defaultCommand+0xa4>)
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	2064      	movs	r0, #100	; 0x64
 80063f8:	f008 fd66 	bl	800eec8 <osDelay>
		ClearEEportsDir();
 80063fc:	f7fd f85a 	bl	80034b4 <ClearEEportsDir>
		osDelay(100);
 8006400:	2064      	movs	r0, #100	; 0x64
 8006402:	f008 fd61 	bl	800eec8 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8006406:	2240      	movs	r2, #64	; 0x40
 8006408:	4912      	ldr	r1, [pc, #72]	; (8006454 <defaultCommand+0xa8>)
 800640a:	0020      	movs	r0, r4
 800640c:	f00d fdf5 	bl	8013ffa <memcpy>
 8006410:	e010      	b.n	8006434 <defaultCommand+0x88>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8006412:	4911      	ldr	r1, [pc, #68]	; (8006458 <defaultCommand+0xac>)
 8006414:	4811      	ldr	r0, [pc, #68]	; (800645c <defaultCommand+0xb0>)
 8006416:	000b      	movs	r3, r1
 8006418:	0002      	movs	r2, r0
 800641a:	ca23      	ldmia	r2!, {r0, r1, r5}
 800641c:	c323      	stmia	r3!, {r0, r1, r5}
 800641e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006420:	c323      	stmia	r3!, {r0, r1, r5}
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 8006426:	f7fd fad7 	bl	80039d8 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 800642a:	2227      	movs	r2, #39	; 0x27
 800642c:	490c      	ldr	r1, [pc, #48]	; (8006460 <defaultCommand+0xb4>)
 800642e:	0020      	movs	r0, r4
 8006430:	f00d fde3 	bl	8013ffa <memcpy>
}
 8006434:	2000      	movs	r0, #0
 8006436:	b002      	add	sp, #8
 8006438:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 800643a:	220f      	movs	r2, #15
 800643c:	4909      	ldr	r1, [pc, #36]	; (8006464 <defaultCommand+0xb8>)
 800643e:	0020      	movs	r0, r4
 8006440:	f00d fddb 	bl	8013ffa <memcpy>
 8006444:	e7f6      	b.n	8006434 <defaultCommand+0x88>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	0801956c 	.word	0x0801956c
 800644c:	0801959c 	.word	0x0801959c
 8006450:	20000cb8 	.word	0x20000cb8
 8006454:	080195b4 	.word	0x080195b4
 8006458:	200069d4 	.word	0x200069d4
 800645c:	20000000 	.word	0x20000000
 8006460:	08019574 	.word	0x08019574
 8006464:	080195a4 	.word	0x080195a4

08006468 <setCommand>:
{
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	46ce      	mov	lr, r9
 800646c:	4647      	mov	r7, r8
 800646e:	b580      	push	{r7, lr}
 8006470:	b08f      	sub	sp, #60	; 0x3c
 8006472:	9007      	str	r0, [sp, #28]
 8006474:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	930d      	str	r3, [sp, #52]	; 0x34
 800647a:	930c      	str	r3, [sp, #48]	; 0x30
 800647c:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 800647e:	930a      	str	r3, [sp, #40]	; 0x28
 8006480:	9309      	str	r3, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 8006482:	2800      	cmp	r0, #0
 8006484:	d101      	bne.n	800648a <setCommand+0x22>
 8006486:	b672      	cpsid	i
 8006488:	e7fe      	b.n	8006488 <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800648a:	aa0d      	add	r2, sp, #52	; 0x34
 800648c:	2101      	movs	r1, #1
 800648e:	0020      	movs	r0, r4
 8006490:	f008 fe40 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006494:	0005      	movs	r5, r0
 8006496:	4bba      	ldr	r3, [pc, #744]	; (8006780 <setCommand+0x318>)
 8006498:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800649a:	2204      	movs	r2, #4
 800649c:	49b9      	ldr	r1, [pc, #740]	; (8006784 <setCommand+0x31c>)
 800649e:	f00d fff3 	bl	8014488 <strncmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d01c      	beq.n	80064e0 <setCommand+0x78>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80064a6:	2204      	movs	r2, #4
 80064a8:	49b7      	ldr	r1, [pc, #732]	; (8006788 <setCommand+0x320>)
 80064aa:	0028      	movs	r0, r5
 80064ac:	f00d ffec 	bl	8014488 <strncmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d100      	bne.n	80064b6 <setCommand+0x4e>
 80064b4:	e18c      	b.n	80067d0 <setCommand+0x368>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 80064b6:	2204      	movs	r2, #4
 80064b8:	49b4      	ldr	r1, [pc, #720]	; (800678c <setCommand+0x324>)
 80064ba:	0028      	movs	r0, r5
 80064bc:	f00d ffe4 	bl	8014488 <strncmp>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d100      	bne.n	80064c6 <setCommand+0x5e>
 80064c4:	e1e2      	b.n	800688c <setCommand+0x424>
		result = BOS_ERR_WrongParam;
 80064c6:	2467      	movs	r4, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 80064c8:	2c67      	cmp	r4, #103	; 0x67
 80064ca:	d100      	bne.n	80064ce <setCommand+0x66>
 80064cc:	e3da      	b.n	8006c84 <setCommand+0x81c>
	else if (result == BOS_ERR_WrongValue)
 80064ce:	2c68      	cmp	r4, #104	; 0x68
 80064d0:	d100      	bne.n	80064d4 <setCommand+0x6c>
 80064d2:	e3dd      	b.n	8006c90 <setCommand+0x828>
}
 80064d4:	2000      	movs	r0, #0
 80064d6:	b00f      	add	sp, #60	; 0x3c
 80064d8:	bc0c      	pop	{r2, r3}
 80064da:	4690      	mov	r8, r2
 80064dc:	4699      	mov	r9, r3
 80064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80064e0:	aa0c      	add	r2, sp, #48	; 0x30
 80064e2:	2102      	movs	r1, #2
 80064e4:	0020      	movs	r0, r4
 80064e6:	f008 fe15 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80064ea:	0004      	movs	r4, r0
 80064ec:	4ba8      	ldr	r3, [pc, #672]	; (8006790 <setCommand+0x328>)
 80064ee:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80064f0:	4ba3      	ldr	r3, [pc, #652]	; (8006780 <setCommand+0x318>)
 80064f2:	681d      	ldr	r5, [r3, #0]
 80064f4:	3504      	adds	r5, #4
 80064f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f8:	1f1f      	subs	r7, r3, #4
 80064fa:	003a      	movs	r2, r7
 80064fc:	49a5      	ldr	r1, [pc, #660]	; (8006794 <setCommand+0x32c>)
 80064fe:	0028      	movs	r0, r5
 8006500:	f00d ffc2 	bl	8014488 <strncmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	d162      	bne.n	80065ce <setCommand+0x166>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006508:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800650a:	002a      	movs	r2, r5
 800650c:	49a2      	ldr	r1, [pc, #648]	; (8006798 <setCommand+0x330>)
 800650e:	0020      	movs	r0, r4
 8006510:	f00d ffba 	bl	8014488 <strncmp>
 8006514:	2800      	cmp	r0, #0
 8006516:	d122      	bne.n	800655e <setCommand+0xf6>
				BOS.response = BOS_RESPONSE_ALL;
 8006518:	4ba0      	ldr	r3, [pc, #640]	; (800679c <setCommand+0x334>)
 800651a:	2160      	movs	r1, #96	; 0x60
 800651c:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800651e:	79db      	ldrb	r3, [r3, #7]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	4319      	orrs	r1, r3
 8006524:	308a      	adds	r0, #138	; 0x8a
 8006526:	0040      	lsls	r0, r0, #1
 8006528:	f001 fa98 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 800652c:	2400      	movs	r4, #0
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800652e:	4b94      	ldr	r3, [pc, #592]	; (8006780 <setCommand+0x318>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	2100      	movs	r1, #0
 8006538:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800653a:	4b95      	ldr	r3, [pc, #596]	; (8006790 <setCommand+0x328>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4998      	ldr	r1, [pc, #608]	; (80067a0 <setCommand+0x338>)
 8006540:	9807      	ldr	r0, [sp, #28]
 8006542:	f00d ff5d 	bl	8014400 <sprintf>
		if (extraMessage == 1) {
 8006546:	2c01      	cmp	r4, #1
 8006548:	d1c4      	bne.n	80064d4 <setCommand+0x6c>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 800654a:	4996      	ldr	r1, [pc, #600]	; (80067a4 <setCommand+0x33c>)
 800654c:	9c07      	ldr	r4, [sp, #28]
 800654e:	0020      	movs	r0, r4
 8006550:	f00d ff76 	bl	8014440 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8006554:	4994      	ldr	r1, [pc, #592]	; (80067a8 <setCommand+0x340>)
 8006556:	0020      	movs	r0, r4
 8006558:	f00d ff72 	bl	8014440 <strcat>
 800655c:	e7ba      	b.n	80064d4 <setCommand+0x6c>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800655e:	002a      	movs	r2, r5
 8006560:	4992      	ldr	r1, [pc, #584]	; (80067ac <setCommand+0x344>)
 8006562:	0020      	movs	r0, r4
 8006564:	f00d ff90 	bl	8014488 <strncmp>
 8006568:	2800      	cmp	r0, #0
 800656a:	d10b      	bne.n	8006584 <setCommand+0x11c>
				BOS.response = BOS_RESPONSE_MSG;
 800656c:	4b8b      	ldr	r3, [pc, #556]	; (800679c <setCommand+0x334>)
 800656e:	2120      	movs	r1, #32
 8006570:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006572:	79db      	ldrb	r3, [r3, #7]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	4319      	orrs	r1, r3
 8006578:	308a      	adds	r0, #138	; 0x8a
 800657a:	0040      	lsls	r0, r0, #1
 800657c:	f001 fa6e 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8006580:	2400      	movs	r4, #0
 8006582:	e7d4      	b.n	800652e <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8006584:	002a      	movs	r2, r5
 8006586:	498a      	ldr	r1, [pc, #552]	; (80067b0 <setCommand+0x348>)
 8006588:	0020      	movs	r0, r4
 800658a:	f00d ff7d 	bl	8014488 <strncmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	d10b      	bne.n	80065aa <setCommand+0x142>
				BOS.response = BOS_RESPONSE_CLI;
 8006592:	4b82      	ldr	r3, [pc, #520]	; (800679c <setCommand+0x334>)
 8006594:	2140      	movs	r1, #64	; 0x40
 8006596:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006598:	79db      	ldrb	r3, [r3, #7]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	4319      	orrs	r1, r3
 800659e:	308a      	adds	r0, #138	; 0x8a
 80065a0:	0040      	lsls	r0, r0, #1
 80065a2:	f001 fa5b 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 80065a6:	2400      	movs	r4, #0
 80065a8:	e7c1      	b.n	800652e <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80065aa:	002a      	movs	r2, r5
 80065ac:	4981      	ldr	r1, [pc, #516]	; (80067b4 <setCommand+0x34c>)
 80065ae:	0020      	movs	r0, r4
 80065b0:	f00d ff6a 	bl	8014488 <strncmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d000      	beq.n	80065ba <setCommand+0x152>
 80065b8:	e348      	b.n	8006c4c <setCommand+0x7e4>
				BOS.response = BOS_RESPONSE_NONE;
 80065ba:	4b78      	ldr	r3, [pc, #480]	; (800679c <setCommand+0x334>)
 80065bc:	2400      	movs	r4, #0
 80065be:	719c      	strb	r4, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80065c0:	79d9      	ldrb	r1, [r3, #7]
 80065c2:	0209      	lsls	r1, r1, #8
 80065c4:	308a      	adds	r0, #138	; 0x8a
 80065c6:	0040      	lsls	r0, r0, #1
 80065c8:	f001 fa48 	bl	8007a5c <EE_WriteVariable>
 80065cc:	e7af      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80065ce:	003a      	movs	r2, r7
 80065d0:	4979      	ldr	r1, [pc, #484]	; (80067b8 <setCommand+0x350>)
 80065d2:	0028      	movs	r0, r5
 80065d4:	f00d ff58 	bl	8014488 <strncmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d14d      	bne.n	8006678 <setCommand+0x210>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80065dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065de:	002a      	movs	r2, r5
 80065e0:	496d      	ldr	r1, [pc, #436]	; (8006798 <setCommand+0x330>)
 80065e2:	0020      	movs	r0, r4
 80065e4:	f00d ff50 	bl	8014488 <strncmp>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d10c      	bne.n	8006606 <setCommand+0x19e>
				BOS.trace = TRACE_BOTH;
 80065ec:	4b6b      	ldr	r3, [pc, #428]	; (800679c <setCommand+0x334>)
 80065ee:	2203      	movs	r2, #3
 80065f0:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80065f2:	799b      	ldrb	r3, [r3, #6]
 80065f4:	21c0      	movs	r1, #192	; 0xc0
 80065f6:	0089      	lsls	r1, r1, #2
 80065f8:	4319      	orrs	r1, r3
 80065fa:	308a      	adds	r0, #138	; 0x8a
 80065fc:	0040      	lsls	r0, r0, #1
 80065fe:	f001 fa2d 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8006602:	2400      	movs	r4, #0
 8006604:	e793      	b.n	800652e <setCommand+0xc6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8006606:	002a      	movs	r2, r5
 8006608:	4968      	ldr	r1, [pc, #416]	; (80067ac <setCommand+0x344>)
 800660a:	0020      	movs	r0, r4
 800660c:	f00d ff3c 	bl	8014488 <strncmp>
 8006610:	2800      	cmp	r0, #0
 8006612:	d10c      	bne.n	800662e <setCommand+0x1c6>
				BOS.trace = TRACE_MESSAGE;
 8006614:	4b61      	ldr	r3, [pc, #388]	; (800679c <setCommand+0x334>)
 8006616:	2201      	movs	r2, #1
 8006618:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800661a:	799b      	ldrb	r3, [r3, #6]
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	0049      	lsls	r1, r1, #1
 8006620:	4319      	orrs	r1, r3
 8006622:	308a      	adds	r0, #138	; 0x8a
 8006624:	4090      	lsls	r0, r2
 8006626:	f001 fa19 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 800662a:	2400      	movs	r4, #0
 800662c:	e77f      	b.n	800652e <setCommand+0xc6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 800662e:	002a      	movs	r2, r5
 8006630:	4958      	ldr	r1, [pc, #352]	; (8006794 <setCommand+0x32c>)
 8006632:	0020      	movs	r0, r4
 8006634:	f00d ff28 	bl	8014488 <strncmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	d10c      	bne.n	8006656 <setCommand+0x1ee>
				BOS.trace = TRACE_RESPONSE;
 800663c:	4b57      	ldr	r3, [pc, #348]	; (800679c <setCommand+0x334>)
 800663e:	2202      	movs	r2, #2
 8006640:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006642:	799b      	ldrb	r3, [r3, #6]
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	0089      	lsls	r1, r1, #2
 8006648:	4319      	orrs	r1, r3
 800664a:	308a      	adds	r0, #138	; 0x8a
 800664c:	0040      	lsls	r0, r0, #1
 800664e:	f001 fa05 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8006652:	2400      	movs	r4, #0
 8006654:	e76b      	b.n	800652e <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006656:	002a      	movs	r2, r5
 8006658:	4956      	ldr	r1, [pc, #344]	; (80067b4 <setCommand+0x34c>)
 800665a:	0020      	movs	r0, r4
 800665c:	f00d ff14 	bl	8014488 <strncmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	d000      	beq.n	8006666 <setCommand+0x1fe>
 8006664:	e2f4      	b.n	8006c50 <setCommand+0x7e8>
				BOS.trace = TRACE_NONE;
 8006666:	4b4d      	ldr	r3, [pc, #308]	; (800679c <setCommand+0x334>)
 8006668:	2400      	movs	r4, #0
 800666a:	71dc      	strb	r4, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800666c:	7999      	ldrb	r1, [r3, #6]
 800666e:	308a      	adds	r0, #138	; 0x8a
 8006670:	0040      	lsls	r0, r0, #1
 8006672:	f001 f9f3 	bl	8007a5c <EE_WriteVariable>
 8006676:	e75a      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8006678:	003a      	movs	r2, r7
 800667a:	4950      	ldr	r1, [pc, #320]	; (80067bc <setCommand+0x354>)
 800667c:	0028      	movs	r0, r5
 800667e:	f00d ff03 	bl	8014488 <strncmp>
 8006682:	2800      	cmp	r0, #0
 8006684:	d116      	bne.n	80066b4 <setCommand+0x24c>
			temp2 = atoi((const char *)pcParameterString2);
 8006686:	0020      	movs	r0, r4
 8006688:	f00d fa27 	bl	8013ada <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 800668c:	23e1      	movs	r3, #225	; 0xe1
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	4298      	cmp	r0, r3
 8006692:	d900      	bls.n	8006696 <setCommand+0x22e>
 8006694:	e2de      	b.n	8006c54 <setCommand+0x7ec>
				BOS.clibaudrate = temp2;
 8006696:	4c41      	ldr	r4, [pc, #260]	; (800679c <setCommand+0x334>)
 8006698:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 800669a:	b281      	uxth	r1, r0
 800669c:	208c      	movs	r0, #140	; 0x8c
 800669e:	0040      	lsls	r0, r0, #1
 80066a0:	f001 f9dc 	bl	8007a5c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80066a4:	68a1      	ldr	r1, [r4, #8]
 80066a6:	0c09      	lsrs	r1, r1, #16
 80066a8:	201a      	movs	r0, #26
 80066aa:	30ff      	adds	r0, #255	; 0xff
 80066ac:	f001 f9d6 	bl	8007a5c <EE_WriteVariable>
				extraMessage = 1;
 80066b0:	2401      	movs	r4, #1
 80066b2:	e73c      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80066b4:	003a      	movs	r2, r7
 80066b6:	4942      	ldr	r1, [pc, #264]	; (80067c0 <setCommand+0x358>)
 80066b8:	0028      	movs	r0, r5
 80066ba:	f00d fee5 	bl	8014488 <strncmp>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d10e      	bne.n	80066e0 <setCommand+0x278>
			temp16 = atoi((const char *)pcParameterString2);
 80066c2:	0020      	movs	r0, r4
 80066c4:	f00d fa09 	bl	8013ada <atoi>
 80066c8:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80066ca:	2900      	cmp	r1, #0
 80066cc:	d100      	bne.n	80066d0 <setCommand+0x268>
 80066ce:	e2c3      	b.n	8006c58 <setCommand+0x7f0>
				BOS.buttons.debounce = temp16;
 80066d0:	4b32      	ldr	r3, [pc, #200]	; (800679c <setCommand+0x334>)
 80066d2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 80066d4:	2016      	movs	r0, #22
 80066d6:	30ff      	adds	r0, #255	; 0xff
 80066d8:	f001 f9c0 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 80066dc:	2400      	movs	r4, #0
 80066de:	e726      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 80066e0:	003a      	movs	r2, r7
 80066e2:	4938      	ldr	r1, [pc, #224]	; (80067c4 <setCommand+0x35c>)
 80066e4:	0028      	movs	r0, r5
 80066e6:	f00d fecf 	bl	8014488 <strncmp>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d10e      	bne.n	800670c <setCommand+0x2a4>
			temp16 = atoi((const char *)pcParameterString2);
 80066ee:	0020      	movs	r0, r4
 80066f0:	f00d f9f3 	bl	8013ada <atoi>
 80066f4:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d100      	bne.n	80066fc <setCommand+0x294>
 80066fa:	e2af      	b.n	8006c5c <setCommand+0x7f4>
				BOS.buttons.singleClickTime = temp16;
 80066fc:	4b27      	ldr	r3, [pc, #156]	; (800679c <setCommand+0x334>)
 80066fe:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8006700:	208b      	movs	r0, #139	; 0x8b
 8006702:	0040      	lsls	r0, r0, #1
 8006704:	f001 f9aa 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8006708:	2400      	movs	r4, #0
 800670a:	e710      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 800670c:	003a      	movs	r2, r7
 800670e:	492e      	ldr	r1, [pc, #184]	; (80067c8 <setCommand+0x360>)
 8006710:	0028      	movs	r0, r5
 8006712:	f00d feb9 	bl	8014488 <strncmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	d114      	bne.n	8006744 <setCommand+0x2dc>
			temp16 = atoi((const char *)pcParameterString2);
 800671a:	0020      	movs	r0, r4
 800671c:	f00d f9dd 	bl	8013ada <atoi>
 8006720:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	2bfe      	cmp	r3, #254	; 0xfe
 8006728:	d900      	bls.n	800672c <setCommand+0x2c4>
 800672a:	e299      	b.n	8006c60 <setCommand+0x7f8>
				BOS.buttons.minInterClickTime = temp16;
 800672c:	b2c0      	uxtb	r0, r0
 800672e:	4b1b      	ldr	r3, [pc, #108]	; (800679c <setCommand+0x334>)
 8006730:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006732:	7959      	ldrb	r1, [r3, #5]
 8006734:	0209      	lsls	r1, r1, #8
 8006736:	4301      	orrs	r1, r0
 8006738:	2018      	movs	r0, #24
 800673a:	30ff      	adds	r0, #255	; 0xff
 800673c:	f001 f98e 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8006740:	2400      	movs	r4, #0
 8006742:	e6f4      	b.n	800652e <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006744:	003a      	movs	r2, r7
 8006746:	4921      	ldr	r1, [pc, #132]	; (80067cc <setCommand+0x364>)
 8006748:	0028      	movs	r0, r5
 800674a:	f00d fe9d 	bl	8014488 <strncmp>
 800674e:	2800      	cmp	r0, #0
 8006750:	d000      	beq.n	8006754 <setCommand+0x2ec>
 8006752:	e287      	b.n	8006c64 <setCommand+0x7fc>
			temp16 = atoi((const char *)pcParameterString2);
 8006754:	0020      	movs	r0, r4
 8006756:	f00d f9c0 	bl	8013ada <atoi>
 800675a:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800675c:	3b01      	subs	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	2bfe      	cmp	r3, #254	; 0xfe
 8006762:	d900      	bls.n	8006766 <setCommand+0x2fe>
 8006764:	e280      	b.n	8006c68 <setCommand+0x800>
				BOS.buttons.maxInterClickTime = temp16;
 8006766:	b2c0      	uxtb	r0, r0
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <setCommand+0x334>)
 800676a:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800676c:	0200      	lsls	r0, r0, #8
 800676e:	7919      	ldrb	r1, [r3, #4]
 8006770:	4301      	orrs	r1, r0
 8006772:	2018      	movs	r0, #24
 8006774:	30ff      	adds	r0, #255	; 0xff
 8006776:	f001 f971 	bl	8007a5c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 800677a:	2400      	movs	r4, #0
 800677c:	e6d7      	b.n	800652e <setCommand+0xc6>
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20000f18 	.word	0x20000f18
 8006784:	080196a0 	.word	0x080196a0
 8006788:	08019cf0 	.word	0x08019cf0
 800678c:	08019cfc 	.word	0x08019cfc
 8006790:	20000f24 	.word	0x20000f24
 8006794:	080196a8 	.word	0x080196a8
 8006798:	08018bdc 	.word	0x08018bdc
 800679c:	200069d4 	.word	0x200069d4
 80067a0:	08019de4 	.word	0x08019de4
 80067a4:	08019df8 	.word	0x08019df8
 80067a8:	08019e28 	.word	0x08019e28
 80067ac:	08019ce4 	.word	0x08019ce4
 80067b0:	08019cec 	.word	0x08019cec
 80067b4:	080196b8 	.word	0x080196b8
 80067b8:	080196c0 	.word	0x080196c0
 80067bc:	080196c8 	.word	0x080196c8
 80067c0:	080196d4 	.word	0x080196d4
 80067c4:	080196e0 	.word	0x080196e0
 80067c8:	080196f0 	.word	0x080196f0
 80067cc:	08019704 	.word	0x08019704
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80067d0:	aa0c      	add	r2, sp, #48	; 0x30
 80067d2:	2102      	movs	r1, #2
 80067d4:	0020      	movs	r0, r4
 80067d6:	f008 fc9d 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80067da:	4edf      	ldr	r6, [pc, #892]	; (8006b58 <setCommand+0x6f0>)
 80067dc:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80067de:	aa0b      	add	r2, sp, #44	; 0x2c
 80067e0:	2103      	movs	r1, #3
 80067e2:	0020      	movs	r0, r4
 80067e4:	f008 fc96 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80067e8:	4fdc      	ldr	r7, [pc, #880]	; (8006b5c <setCommand+0x6f4>)
 80067ea:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80067ec:	aa0a      	add	r2, sp, #40	; 0x28
 80067ee:	2104      	movs	r1, #4
 80067f0:	0020      	movs	r0, r4
 80067f2:	f008 fc8f 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80067f6:	4dda      	ldr	r5, [pc, #872]	; (8006b60 <setCommand+0x6f8>)
 80067f8:	6028      	str	r0, [r5, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80067fa:	aa09      	add	r2, sp, #36	; 0x24
 80067fc:	2105      	movs	r1, #5
 80067fe:	0020      	movs	r0, r4
 8006800:	f008 fc88 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006804:	4cd7      	ldr	r4, [pc, #860]	; (8006b64 <setCommand+0x6fc>)
 8006806:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006808:	6830      	ldr	r0, [r6, #0]
 800680a:	f00d f966 	bl	8013ada <atoi>
 800680e:	b2c6      	uxtb	r6, r0
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f00d f962 	bl	8013ada <atoi>
 8006816:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006818:	6828      	ldr	r0, [r5, #0]
 800681a:	f00d f95e 	bl	8013ada <atoi>
 800681e:	b2c5      	uxtb	r5, r0
		if (pcParameterString5 != NULL) {
 8006820:	6824      	ldr	r4, [r4, #0]
 8006822:	2c00      	cmp	r4, #0
 8006824:	d010      	beq.n	8006848 <setCommand+0x3e0>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006826:	2202      	movs	r2, #2
 8006828:	49cf      	ldr	r1, [pc, #828]	; (8006b68 <setCommand+0x700>)
 800682a:	0020      	movs	r0, r4
 800682c:	f00d fe2c 	bl	8014488 <strncmp>
 8006830:	2800      	cmp	r0, #0
 8006832:	d028      	beq.n	8006886 <setCommand+0x41e>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006834:	2202      	movs	r2, #2
 8006836:	49cd      	ldr	r1, [pc, #820]	; (8006b6c <setCommand+0x704>)
 8006838:	0020      	movs	r0, r4
 800683a:	f00d fe25 	bl	8014488 <strncmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	d000      	beq.n	8006844 <setCommand+0x3dc>
 8006842:	e1ff      	b.n	8006c44 <setCommand+0x7dc>
				temp84 = RTC_PM;
 8006844:	2302      	movs	r3, #2
 8006846:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006848:	2e17      	cmp	r6, #23
 800684a:	d900      	bls.n	800684e <setCommand+0x3e6>
 800684c:	e20e      	b.n	8006c6c <setCommand+0x804>
 800684e:	2f3b      	cmp	r7, #59	; 0x3b
 8006850:	d900      	bls.n	8006854 <setCommand+0x3ec>
 8006852:	e20d      	b.n	8006c70 <setCommand+0x808>
 8006854:	2d3b      	cmp	r5, #59	; 0x3b
 8006856:	d900      	bls.n	800685a <setCommand+0x3f2>
 8006858:	e20c      	b.n	8006c74 <setCommand+0x80c>
				GetTimeDate();				
 800685a:	f007 ffa7 	bl	800e7ac <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 800685e:	4cc4      	ldr	r4, [pc, #784]	; (8006b70 <setCommand+0x708>)
 8006860:	7da0      	ldrb	r0, [r4, #22]
 8006862:	7d61      	ldrb	r1, [r4, #21]
 8006864:	8b22      	ldrh	r2, [r4, #24]
 8006866:	7d23      	ldrb	r3, [r4, #20]
 8006868:	7b24      	ldrb	r4, [r4, #12]
 800686a:	b264      	sxtb	r4, r4
 800686c:	9404      	str	r4, [sp, #16]
 800686e:	4644      	mov	r4, r8
 8006870:	9403      	str	r4, [sp, #12]
 8006872:	9602      	str	r6, [sp, #8]
 8006874:	9701      	str	r7, [sp, #4]
 8006876:	9500      	str	r5, [sp, #0]
 8006878:	f007 ff3e 	bl	800e6f8 <BOS_CalendarConfig>
 800687c:	0004      	movs	r4, r0
	if (result == BOS_OK) 
 800687e:	2c00      	cmp	r4, #0
 8006880:	d000      	beq.n	8006884 <setCommand+0x41c>
 8006882:	e621      	b.n	80064c8 <setCommand+0x60>
 8006884:	e653      	b.n	800652e <setCommand+0xc6>
				temp84 = RTC_AM;
 8006886:	2301      	movs	r3, #1
 8006888:	4698      	mov	r8, r3
 800688a:	e7dd      	b.n	8006848 <setCommand+0x3e0>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800688c:	aa0c      	add	r2, sp, #48	; 0x30
 800688e:	2102      	movs	r1, #2
 8006890:	0020      	movs	r0, r4
 8006892:	f008 fc3f 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006896:	4db0      	ldr	r5, [pc, #704]	; (8006b58 <setCommand+0x6f0>)
 8006898:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800689a:	aa0b      	add	r2, sp, #44	; 0x2c
 800689c:	2103      	movs	r1, #3
 800689e:	0020      	movs	r0, r4
 80068a0:	f008 fc38 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80068a4:	4bad      	ldr	r3, [pc, #692]	; (8006b5c <setCommand+0x6f4>)
 80068a6:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80068a8:	aa0a      	add	r2, sp, #40	; 0x28
 80068aa:	2104      	movs	r1, #4
 80068ac:	0020      	movs	r0, r4
 80068ae:	f008 fc31 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80068b2:	4eab      	ldr	r6, [pc, #684]	; (8006b60 <setCommand+0x6f8>)
 80068b4:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80068b6:	aa09      	add	r2, sp, #36	; 0x24
 80068b8:	2105      	movs	r1, #5
 80068ba:	0020      	movs	r0, r4
 80068bc:	f008 fc2a 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80068c0:	4ca8      	ldr	r4, [pc, #672]	; (8006b64 <setCommand+0x6fc>)
 80068c2:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 80068c4:	6830      	ldr	r0, [r6, #0]
 80068c6:	f00d f908 	bl	8013ada <atoi>
 80068ca:	b2c3      	uxtb	r3, r0
 80068cc:	4699      	mov	r9, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	f00d f903 	bl	8013ada <atoi>
 80068d4:	b286      	uxth	r6, r0
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 80068d6:	682c      	ldr	r4, [r5, #0]
 80068d8:	2206      	movs	r2, #6
 80068da:	49a6      	ldr	r1, [pc, #664]	; (8006b74 <setCommand+0x70c>)
 80068dc:	0020      	movs	r0, r4
 80068de:	f00d fdd3 	bl	8014488 <strncmp>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d100      	bne.n	80068e8 <setCommand+0x480>
 80068e6:	e11b      	b.n	8006b20 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 80068e8:	2207      	movs	r2, #7
 80068ea:	49a3      	ldr	r1, [pc, #652]	; (8006b78 <setCommand+0x710>)
 80068ec:	0020      	movs	r0, r4
 80068ee:	f00d fdcb 	bl	8014488 <strncmp>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d100      	bne.n	80068f8 <setCommand+0x490>
 80068f6:	e116      	b.n	8006b26 <setCommand+0x6be>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 80068f8:	2209      	movs	r2, #9
 80068fa:	49a0      	ldr	r1, [pc, #640]	; (8006b7c <setCommand+0x714>)
 80068fc:	0020      	movs	r0, r4
 80068fe:	f00d fdc3 	bl	8014488 <strncmp>
 8006902:	2800      	cmp	r0, #0
 8006904:	d100      	bne.n	8006908 <setCommand+0x4a0>
 8006906:	e111      	b.n	8006b2c <setCommand+0x6c4>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006908:	2208      	movs	r2, #8
 800690a:	499d      	ldr	r1, [pc, #628]	; (8006b80 <setCommand+0x718>)
 800690c:	0020      	movs	r0, r4
 800690e:	f00d fdbb 	bl	8014488 <strncmp>
 8006912:	2800      	cmp	r0, #0
 8006914:	d100      	bne.n	8006918 <setCommand+0x4b0>
 8006916:	e10c      	b.n	8006b32 <setCommand+0x6ca>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006918:	2206      	movs	r2, #6
 800691a:	499a      	ldr	r1, [pc, #616]	; (8006b84 <setCommand+0x71c>)
 800691c:	0020      	movs	r0, r4
 800691e:	f00d fdb3 	bl	8014488 <strncmp>
 8006922:	2800      	cmp	r0, #0
 8006924:	d100      	bne.n	8006928 <setCommand+0x4c0>
 8006926:	e107      	b.n	8006b38 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8006928:	2208      	movs	r2, #8
 800692a:	4997      	ldr	r1, [pc, #604]	; (8006b88 <setCommand+0x720>)
 800692c:	0020      	movs	r0, r4
 800692e:	f00d fdab 	bl	8014488 <strncmp>
 8006932:	2800      	cmp	r0, #0
 8006934:	d100      	bne.n	8006938 <setCommand+0x4d0>
 8006936:	e102      	b.n	8006b3e <setCommand+0x6d6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8006938:	2206      	movs	r2, #6
 800693a:	4994      	ldr	r1, [pc, #592]	; (8006b8c <setCommand+0x724>)
 800693c:	0020      	movs	r0, r4
 800693e:	f00d fda3 	bl	8014488 <strncmp>
 8006942:	2800      	cmp	r0, #0
 8006944:	d000      	beq.n	8006948 <setCommand+0x4e0>
 8006946:	e0fd      	b.n	8006b44 <setCommand+0x6dc>
			temp81 = SUNDAY;
 8006948:	2707      	movs	r7, #7
	BOS_Status result = BOS_OK; 
 800694a:	2400      	movs	r4, #0
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800694c:	4b83      	ldr	r3, [pc, #524]	; (8006b5c <setCommand+0x6f4>)
 800694e:	681d      	ldr	r5, [r3, #0]
 8006950:	2207      	movs	r2, #7
 8006952:	498f      	ldr	r1, [pc, #572]	; (8006b90 <setCommand+0x728>)
 8006954:	0028      	movs	r0, r5
 8006956:	f00d fd97 	bl	8014488 <strncmp>
 800695a:	2800      	cmp	r0, #0
 800695c:	d100      	bne.n	8006960 <setCommand+0x4f8>
 800695e:	e0f3      	b.n	8006b48 <setCommand+0x6e0>
 8006960:	2202      	movs	r2, #2
 8006962:	498c      	ldr	r1, [pc, #560]	; (8006b94 <setCommand+0x72c>)
 8006964:	0028      	movs	r0, r5
 8006966:	f00d fd8f 	bl	8014488 <strncmp>
 800696a:	2800      	cmp	r0, #0
 800696c:	d100      	bne.n	8006970 <setCommand+0x508>
 800696e:	e0ed      	b.n	8006b4c <setCommand+0x6e4>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006970:	2208      	movs	r2, #8
 8006972:	4989      	ldr	r1, [pc, #548]	; (8006b98 <setCommand+0x730>)
 8006974:	0028      	movs	r0, r5
 8006976:	f00d fd87 	bl	8014488 <strncmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	d100      	bne.n	8006980 <setCommand+0x518>
 800697e:	e0e7      	b.n	8006b50 <setCommand+0x6e8>
 8006980:	2202      	movs	r2, #2
 8006982:	4986      	ldr	r1, [pc, #536]	; (8006b9c <setCommand+0x734>)
 8006984:	0028      	movs	r0, r5
 8006986:	f00d fd7f 	bl	8014488 <strncmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	d100      	bne.n	8006990 <setCommand+0x528>
 800698e:	e0e1      	b.n	8006b54 <setCommand+0x6ec>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006990:	2205      	movs	r2, #5
 8006992:	4983      	ldr	r1, [pc, #524]	; (8006ba0 <setCommand+0x738>)
 8006994:	0028      	movs	r0, r5
 8006996:	f00d fd77 	bl	8014488 <strncmp>
 800699a:	2800      	cmp	r0, #0
 800699c:	d100      	bne.n	80069a0 <setCommand+0x538>
 800699e:	e12b      	b.n	8006bf8 <setCommand+0x790>
 80069a0:	2202      	movs	r2, #2
 80069a2:	4980      	ldr	r1, [pc, #512]	; (8006ba4 <setCommand+0x73c>)
 80069a4:	0028      	movs	r0, r5
 80069a6:	f00d fd6f 	bl	8014488 <strncmp>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d100      	bne.n	80069b0 <setCommand+0x548>
 80069ae:	e125      	b.n	8006bfc <setCommand+0x794>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 80069b0:	2205      	movs	r2, #5
 80069b2:	497d      	ldr	r1, [pc, #500]	; (8006ba8 <setCommand+0x740>)
 80069b4:	0028      	movs	r0, r5
 80069b6:	f00d fd67 	bl	8014488 <strncmp>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d100      	bne.n	80069c0 <setCommand+0x558>
 80069be:	e11f      	b.n	8006c00 <setCommand+0x798>
 80069c0:	2202      	movs	r2, #2
 80069c2:	497a      	ldr	r1, [pc, #488]	; (8006bac <setCommand+0x744>)
 80069c4:	0028      	movs	r0, r5
 80069c6:	f00d fd5f 	bl	8014488 <strncmp>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d100      	bne.n	80069d0 <setCommand+0x568>
 80069ce:	e119      	b.n	8006c04 <setCommand+0x79c>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 80069d0:	2203      	movs	r2, #3
 80069d2:	4977      	ldr	r1, [pc, #476]	; (8006bb0 <setCommand+0x748>)
 80069d4:	0028      	movs	r0, r5
 80069d6:	f00d fd57 	bl	8014488 <strncmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d100      	bne.n	80069e0 <setCommand+0x578>
 80069de:	e113      	b.n	8006c08 <setCommand+0x7a0>
 80069e0:	2202      	movs	r2, #2
 80069e2:	4974      	ldr	r1, [pc, #464]	; (8006bb4 <setCommand+0x74c>)
 80069e4:	0028      	movs	r0, r5
 80069e6:	f00d fd4f 	bl	8014488 <strncmp>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d100      	bne.n	80069f0 <setCommand+0x588>
 80069ee:	e10d      	b.n	8006c0c <setCommand+0x7a4>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 80069f0:	2204      	movs	r2, #4
 80069f2:	4971      	ldr	r1, [pc, #452]	; (8006bb8 <setCommand+0x750>)
 80069f4:	0028      	movs	r0, r5
 80069f6:	f00d fd47 	bl	8014488 <strncmp>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d100      	bne.n	8006a00 <setCommand+0x598>
 80069fe:	e107      	b.n	8006c10 <setCommand+0x7a8>
 8006a00:	2202      	movs	r2, #2
 8006a02:	496e      	ldr	r1, [pc, #440]	; (8006bbc <setCommand+0x754>)
 8006a04:	0028      	movs	r0, r5
 8006a06:	f00d fd3f 	bl	8014488 <strncmp>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d100      	bne.n	8006a10 <setCommand+0x5a8>
 8006a0e:	e101      	b.n	8006c14 <setCommand+0x7ac>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006a10:	2204      	movs	r2, #4
 8006a12:	496b      	ldr	r1, [pc, #428]	; (8006bc0 <setCommand+0x758>)
 8006a14:	0028      	movs	r0, r5
 8006a16:	f00d fd37 	bl	8014488 <strncmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d100      	bne.n	8006a20 <setCommand+0x5b8>
 8006a1e:	e0fb      	b.n	8006c18 <setCommand+0x7b0>
 8006a20:	2202      	movs	r2, #2
 8006a22:	4968      	ldr	r1, [pc, #416]	; (8006bc4 <setCommand+0x75c>)
 8006a24:	0028      	movs	r0, r5
 8006a26:	f00d fd2f 	bl	8014488 <strncmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d100      	bne.n	8006a30 <setCommand+0x5c8>
 8006a2e:	e0f5      	b.n	8006c1c <setCommand+0x7b4>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006a30:	2205      	movs	r2, #5
 8006a32:	4965      	ldr	r1, [pc, #404]	; (8006bc8 <setCommand+0x760>)
 8006a34:	0028      	movs	r0, r5
 8006a36:	f00d fd27 	bl	8014488 <strncmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d100      	bne.n	8006a40 <setCommand+0x5d8>
 8006a3e:	e0ef      	b.n	8006c20 <setCommand+0x7b8>
 8006a40:	2202      	movs	r2, #2
 8006a42:	4962      	ldr	r1, [pc, #392]	; (8006bcc <setCommand+0x764>)
 8006a44:	0028      	movs	r0, r5
 8006a46:	f00d fd1f 	bl	8014488 <strncmp>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d100      	bne.n	8006a50 <setCommand+0x5e8>
 8006a4e:	e0e9      	b.n	8006c24 <setCommand+0x7bc>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006a50:	2209      	movs	r2, #9
 8006a52:	495f      	ldr	r1, [pc, #380]	; (8006bd0 <setCommand+0x768>)
 8006a54:	0028      	movs	r0, r5
 8006a56:	f00d fd17 	bl	8014488 <strncmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d100      	bne.n	8006a60 <setCommand+0x5f8>
 8006a5e:	e0e3      	b.n	8006c28 <setCommand+0x7c0>
 8006a60:	2202      	movs	r2, #2
 8006a62:	495c      	ldr	r1, [pc, #368]	; (8006bd4 <setCommand+0x76c>)
 8006a64:	0028      	movs	r0, r5
 8006a66:	f00d fd0f 	bl	8014488 <strncmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d100      	bne.n	8006a70 <setCommand+0x608>
 8006a6e:	e0dd      	b.n	8006c2c <setCommand+0x7c4>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006a70:	2207      	movs	r2, #7
 8006a72:	4959      	ldr	r1, [pc, #356]	; (8006bd8 <setCommand+0x770>)
 8006a74:	0028      	movs	r0, r5
 8006a76:	f00d fd07 	bl	8014488 <strncmp>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d100      	bne.n	8006a80 <setCommand+0x618>
 8006a7e:	e0d7      	b.n	8006c30 <setCommand+0x7c8>
 8006a80:	2202      	movs	r2, #2
 8006a82:	4956      	ldr	r1, [pc, #344]	; (8006bdc <setCommand+0x774>)
 8006a84:	0028      	movs	r0, r5
 8006a86:	f00d fcff 	bl	8014488 <strncmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d100      	bne.n	8006a90 <setCommand+0x628>
 8006a8e:	e0d1      	b.n	8006c34 <setCommand+0x7cc>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006a90:	2208      	movs	r2, #8
 8006a92:	4953      	ldr	r1, [pc, #332]	; (8006be0 <setCommand+0x778>)
 8006a94:	0028      	movs	r0, r5
 8006a96:	f00d fcf7 	bl	8014488 <strncmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d100      	bne.n	8006aa0 <setCommand+0x638>
 8006a9e:	e0cb      	b.n	8006c38 <setCommand+0x7d0>
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	4950      	ldr	r1, [pc, #320]	; (8006be4 <setCommand+0x77c>)
 8006aa4:	0028      	movs	r0, r5
 8006aa6:	f00d fcef 	bl	8014488 <strncmp>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d100      	bne.n	8006ab0 <setCommand+0x648>
 8006aae:	e0c5      	b.n	8006c3c <setCommand+0x7d4>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	494d      	ldr	r1, [pc, #308]	; (8006be8 <setCommand+0x780>)
 8006ab4:	0028      	movs	r0, r5
 8006ab6:	f00d fce7 	bl	8014488 <strncmp>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d100      	bne.n	8006ac0 <setCommand+0x658>
 8006abe:	e0bf      	b.n	8006c40 <setCommand+0x7d8>
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	494a      	ldr	r1, [pc, #296]	; (8006bec <setCommand+0x784>)
 8006ac4:	0028      	movs	r0, r5
 8006ac6:	f00d fcdf 	bl	8014488 <strncmp>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d000      	beq.n	8006ad0 <setCommand+0x668>
 8006ace:	e0bb      	b.n	8006c48 <setCommand+0x7e0>
			temp82 = DECEMBER;
 8006ad0:	250c      	movs	r5, #12
		if (result == BOS_OK) 
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	d000      	beq.n	8006ad8 <setCommand+0x670>
 8006ad6:	e6d2      	b.n	800687e <setCommand+0x416>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006ad8:	464b      	mov	r3, r9
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b1e      	cmp	r3, #30
 8006ae0:	d900      	bls.n	8006ae4 <setCommand+0x67c>
 8006ae2:	e0c9      	b.n	8006c78 <setCommand+0x810>
 8006ae4:	4b42      	ldr	r3, [pc, #264]	; (8006bf0 <setCommand+0x788>)
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	d800      	bhi.n	8006aec <setCommand+0x684>
 8006aea:	e0c7      	b.n	8006c7c <setCommand+0x814>
 8006aec:	4b41      	ldr	r3, [pc, #260]	; (8006bf4 <setCommand+0x78c>)
 8006aee:	429e      	cmp	r6, r3
 8006af0:	d900      	bls.n	8006af4 <setCommand+0x68c>
 8006af2:	e0c5      	b.n	8006c80 <setCommand+0x818>
				GetTimeDate();
 8006af4:	f007 fe5a 	bl	800e7ac <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <setCommand+0x708>)
 8006afa:	7c1a      	ldrb	r2, [r3, #16]
 8006afc:	7c59      	ldrb	r1, [r3, #17]
 8006afe:	7c98      	ldrb	r0, [r3, #18]
 8006b00:	7cdc      	ldrb	r4, [r3, #19]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	9403      	str	r4, [sp, #12]
 8006b0a:	9002      	str	r0, [sp, #8]
 8006b0c:	9101      	str	r1, [sp, #4]
 8006b0e:	9200      	str	r2, [sp, #0]
 8006b10:	003b      	movs	r3, r7
 8006b12:	0032      	movs	r2, r6
 8006b14:	4649      	mov	r1, r9
 8006b16:	0028      	movs	r0, r5
 8006b18:	f007 fdee 	bl	800e6f8 <BOS_CalendarConfig>
 8006b1c:	0004      	movs	r4, r0
 8006b1e:	e6ae      	b.n	800687e <setCommand+0x416>
			temp81 = MONDAY;
 8006b20:	2701      	movs	r7, #1
	BOS_Status result = BOS_OK; 
 8006b22:	2400      	movs	r4, #0
 8006b24:	e712      	b.n	800694c <setCommand+0x4e4>
			temp81 = TUESDAY;
 8006b26:	2702      	movs	r7, #2
	BOS_Status result = BOS_OK; 
 8006b28:	2400      	movs	r4, #0
 8006b2a:	e70f      	b.n	800694c <setCommand+0x4e4>
			temp81 = WEDNESDAY;
 8006b2c:	2703      	movs	r7, #3
	BOS_Status result = BOS_OK; 
 8006b2e:	2400      	movs	r4, #0
 8006b30:	e70c      	b.n	800694c <setCommand+0x4e4>
			temp81 = THURSDAY;
 8006b32:	2704      	movs	r7, #4
	BOS_Status result = BOS_OK; 
 8006b34:	2400      	movs	r4, #0
 8006b36:	e709      	b.n	800694c <setCommand+0x4e4>
			temp81 = FRIDAY;
 8006b38:	2705      	movs	r7, #5
	BOS_Status result = BOS_OK; 
 8006b3a:	2400      	movs	r4, #0
 8006b3c:	e706      	b.n	800694c <setCommand+0x4e4>
			temp81 = SATURDAY;
 8006b3e:	2706      	movs	r7, #6
	BOS_Status result = BOS_OK; 
 8006b40:	2400      	movs	r4, #0
 8006b42:	e703      	b.n	800694c <setCommand+0x4e4>
			result = BOS_ERR_WrongValue;		
 8006b44:	2468      	movs	r4, #104	; 0x68
 8006b46:	e701      	b.n	800694c <setCommand+0x4e4>
			temp82 = JANUARY;
 8006b48:	2501      	movs	r5, #1
 8006b4a:	e7c2      	b.n	8006ad2 <setCommand+0x66a>
 8006b4c:	2501      	movs	r5, #1
 8006b4e:	e7c0      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = FEBRUARY;
 8006b50:	2502      	movs	r5, #2
 8006b52:	e7be      	b.n	8006ad2 <setCommand+0x66a>
 8006b54:	2502      	movs	r5, #2
 8006b56:	e7bc      	b.n	8006ad2 <setCommand+0x66a>
 8006b58:	20000f24 	.word	0x20000f24
 8006b5c:	20000f2c 	.word	0x20000f2c
 8006b60:	20000f30 	.word	0x20000f30
 8006b64:	20000f34 	.word	0x20000f34
 8006b68:	0801b67c 	.word	0x0801b67c
 8006b6c:	08019cf8 	.word	0x08019cf8
 8006b70:	200069d4 	.word	0x200069d4
 8006b74:	08019d04 	.word	0x08019d04
 8006b78:	08019d0c 	.word	0x08019d0c
 8006b7c:	08019d14 	.word	0x08019d14
 8006b80:	08019d20 	.word	0x08019d20
 8006b84:	08019d2c 	.word	0x08019d2c
 8006b88:	08019d34 	.word	0x08019d34
 8006b8c:	08019d40 	.word	0x08019d40
 8006b90:	08019d48 	.word	0x08019d48
 8006b94:	08019d50 	.word	0x08019d50
 8006b98:	08019d54 	.word	0x08019d54
 8006b9c:	08019d60 	.word	0x08019d60
 8006ba0:	08019d64 	.word	0x08019d64
 8006ba4:	08019d6c 	.word	0x08019d6c
 8006ba8:	08019d70 	.word	0x08019d70
 8006bac:	08019d78 	.word	0x08019d78
 8006bb0:	08019d7c 	.word	0x08019d7c
 8006bb4:	08019d80 	.word	0x08019d80
 8006bb8:	08019d84 	.word	0x08019d84
 8006bbc:	08019d8c 	.word	0x08019d8c
 8006bc0:	08019d90 	.word	0x08019d90
 8006bc4:	08019d98 	.word	0x08019d98
 8006bc8:	08019d9c 	.word	0x08019d9c
 8006bcc:	08019da4 	.word	0x08019da4
 8006bd0:	08019da8 	.word	0x08019da8
 8006bd4:	08019db4 	.word	0x08019db4
 8006bd8:	08019db8 	.word	0x08019db8
 8006bdc:	08019dc0 	.word	0x08019dc0
 8006be0:	08019dc4 	.word	0x08019dc4
 8006be4:	08019dd0 	.word	0x08019dd0
 8006be8:	08019dd4 	.word	0x08019dd4
 8006bec:	08019de0 	.word	0x08019de0
 8006bf0:	000007cf 	.word	0x000007cf
 8006bf4:	00000834 	.word	0x00000834
			temp82 = MARCH;
 8006bf8:	2503      	movs	r5, #3
 8006bfa:	e76a      	b.n	8006ad2 <setCommand+0x66a>
 8006bfc:	2503      	movs	r5, #3
 8006bfe:	e768      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = APRIL;
 8006c00:	2504      	movs	r5, #4
 8006c02:	e766      	b.n	8006ad2 <setCommand+0x66a>
 8006c04:	2504      	movs	r5, #4
 8006c06:	e764      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = MAY;
 8006c08:	2505      	movs	r5, #5
 8006c0a:	e762      	b.n	8006ad2 <setCommand+0x66a>
 8006c0c:	2505      	movs	r5, #5
 8006c0e:	e760      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = JUNE;
 8006c10:	2506      	movs	r5, #6
 8006c12:	e75e      	b.n	8006ad2 <setCommand+0x66a>
 8006c14:	2506      	movs	r5, #6
 8006c16:	e75c      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = JULY;
 8006c18:	2507      	movs	r5, #7
 8006c1a:	e75a      	b.n	8006ad2 <setCommand+0x66a>
 8006c1c:	2507      	movs	r5, #7
 8006c1e:	e758      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = AUGUST;
 8006c20:	2508      	movs	r5, #8
 8006c22:	e756      	b.n	8006ad2 <setCommand+0x66a>
 8006c24:	2508      	movs	r5, #8
 8006c26:	e754      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = SEPTEMBER;
 8006c28:	2509      	movs	r5, #9
 8006c2a:	e752      	b.n	8006ad2 <setCommand+0x66a>
 8006c2c:	2509      	movs	r5, #9
 8006c2e:	e750      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = OCTOBER;
 8006c30:	250a      	movs	r5, #10
 8006c32:	e74e      	b.n	8006ad2 <setCommand+0x66a>
 8006c34:	250a      	movs	r5, #10
 8006c36:	e74c      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = NOVEMBER;
 8006c38:	250b      	movs	r5, #11
 8006c3a:	e74a      	b.n	8006ad2 <setCommand+0x66a>
 8006c3c:	250b      	movs	r5, #11
 8006c3e:	e748      	b.n	8006ad2 <setCommand+0x66a>
			temp82 = DECEMBER;
 8006c40:	250c      	movs	r5, #12
 8006c42:	e746      	b.n	8006ad2 <setCommand+0x66a>
				result = BOS_ERR_WrongValue;
 8006c44:	2468      	movs	r4, #104	; 0x68
 8006c46:	e61a      	b.n	800687e <setCommand+0x416>
			result = BOS_ERR_WrongValue;	
 8006c48:	2468      	movs	r4, #104	; 0x68
 8006c4a:	e618      	b.n	800687e <setCommand+0x416>
				result = BOS_ERR_WrongValue;
 8006c4c:	2468      	movs	r4, #104	; 0x68
 8006c4e:	e43b      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8006c50:	2468      	movs	r4, #104	; 0x68
 8006c52:	e439      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8006c54:	2468      	movs	r4, #104	; 0x68
 8006c56:	e437      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8006c58:	2468      	movs	r4, #104	; 0x68
 8006c5a:	e435      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8006c5c:	2468      	movs	r4, #104	; 0x68
 8006c5e:	e433      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8006c60:	2468      	movs	r4, #104	; 0x68
 8006c62:	e431      	b.n	80064c8 <setCommand+0x60>
			result = BOS_ERR_WrongParam;
 8006c64:	2467      	movs	r4, #103	; 0x67
 8006c66:	e42f      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;					
 8006c68:	2468      	movs	r4, #104	; 0x68
 8006c6a:	e42d      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8006c6c:	2468      	movs	r4, #104	; 0x68
 8006c6e:	e42b      	b.n	80064c8 <setCommand+0x60>
 8006c70:	2468      	movs	r4, #104	; 0x68
 8006c72:	e429      	b.n	80064c8 <setCommand+0x60>
 8006c74:	2468      	movs	r4, #104	; 0x68
 8006c76:	e427      	b.n	80064c8 <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8006c78:	2468      	movs	r4, #104	; 0x68
 8006c7a:	e425      	b.n	80064c8 <setCommand+0x60>
 8006c7c:	2468      	movs	r4, #104	; 0x68
 8006c7e:	e423      	b.n	80064c8 <setCommand+0x60>
 8006c80:	2468      	movs	r4, #104	; 0x68
 8006c82:	e421      	b.n	80064c8 <setCommand+0x60>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006c84:	2213      	movs	r2, #19
 8006c86:	4905      	ldr	r1, [pc, #20]	; (8006c9c <setCommand+0x834>)
 8006c88:	9807      	ldr	r0, [sp, #28]
 8006c8a:	f00d f9b6 	bl	8013ffa <memcpy>
 8006c8e:	e421      	b.n	80064d4 <setCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006c90:	220f      	movs	r2, #15
 8006c92:	4903      	ldr	r1, [pc, #12]	; (8006ca0 <setCommand+0x838>)
 8006c94:	9807      	ldr	r0, [sp, #28]
 8006c96:	f00d f9b0 	bl	8013ffa <memcpy>
 8006c9a:	e41b      	b.n	80064d4 <setCommand+0x6c>
 8006c9c:	08019758 	.word	0x08019758
 8006ca0:	080195a4 	.word	0x080195a4

08006ca4 <removebuttonCommand>:
{
 8006ca4:	b530      	push	{r4, r5, lr}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	0005      	movs	r5, r0
 8006caa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006cac:	2300      	movs	r3, #0
 8006cae:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	d101      	bne.n	8006cb8 <removebuttonCommand+0x14>
 8006cb4:	b672      	cpsid	i
 8006cb6:	e7fe      	b.n	8006cb6 <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006cb8:	aa01      	add	r2, sp, #4
 8006cba:	2101      	movs	r1, #1
 8006cbc:	f008 fa2a 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	56c3      	ldrsb	r3, [r0, r3]
 8006cc4:	2b70      	cmp	r3, #112	; 0x70
 8006cc6:	d008      	beq.n	8006cda <removebuttonCommand+0x36>
	uint8_t port = 0;
 8006cc8:	2400      	movs	r4, #0
	result = RemovePortButton(port);
 8006cca:	0020      	movs	r0, r4
 8006ccc:	f001 fdbe 	bl	800884c <RemovePortButton>
	if (result == BOS_OK) 
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d007      	beq.n	8006ce4 <removebuttonCommand+0x40>
}
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	b003      	add	sp, #12
 8006cd8:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f00c ff03 	bl	8013ae6 <atol>
 8006ce0:	b2c4      	uxtb	r4, r0
 8006ce2:	e7f2      	b.n	8006cca <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006ce4:	0023      	movs	r3, r4
 8006ce6:	0022      	movs	r2, r4
 8006ce8:	4902      	ldr	r1, [pc, #8]	; (8006cf4 <removebuttonCommand+0x50>)
 8006cea:	0028      	movs	r0, r5
 8006cec:	f00d fb88 	bl	8014400 <sprintf>
 8006cf0:	e7f0      	b.n	8006cd4 <removebuttonCommand+0x30>
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	08019b94 	.word	0x08019b94

08006cf8 <addbuttonCommand>:
{
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	0006      	movs	r6, r0
 8006cfe:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006d00:	2300      	movs	r3, #0
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d101      	bne.n	8006d0e <addbuttonCommand+0x16>
 8006d0a:	b672      	cpsid	i
 8006d0c:	e7fe      	b.n	8006d0c <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006d0e:	aa03      	add	r2, sp, #12
 8006d10:	2101      	movs	r1, #1
 8006d12:	0038      	movs	r0, r7
 8006d14:	f008 f9fe 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006d18:	0004      	movs	r4, r0
 8006d1a:	4b26      	ldr	r3, [pc, #152]	; (8006db4 <addbuttonCommand+0xbc>)
 8006d1c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006d1e:	9d03      	ldr	r5, [sp, #12]
 8006d20:	002a      	movs	r2, r5
 8006d22:	4925      	ldr	r1, [pc, #148]	; (8006db8 <addbuttonCommand+0xc0>)
 8006d24:	f00d fbb0 	bl	8014488 <strncmp>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d016      	beq.n	8006d5a <addbuttonCommand+0x62>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006d2c:	002a      	movs	r2, r5
 8006d2e:	4923      	ldr	r1, [pc, #140]	; (8006dbc <addbuttonCommand+0xc4>)
 8006d30:	0020      	movs	r0, r4
 8006d32:	f00d fba9 	bl	8014488 <strncmp>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d023      	beq.n	8006d82 <addbuttonCommand+0x8a>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006d3a:	002a      	movs	r2, r5
 8006d3c:	4920      	ldr	r1, [pc, #128]	; (8006dc0 <addbuttonCommand+0xc8>)
 8006d3e:	0020      	movs	r0, r4
 8006d40:	f00d fba2 	bl	8014488 <strncmp>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d01e      	beq.n	8006d86 <addbuttonCommand+0x8e>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006d48:	002a      	movs	r2, r5
 8006d4a:	491e      	ldr	r1, [pc, #120]	; (8006dc4 <addbuttonCommand+0xcc>)
 8006d4c:	0020      	movs	r0, r4
 8006d4e:	f00d fb9b 	bl	8014488 <strncmp>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d019      	beq.n	8006d8a <addbuttonCommand+0x92>
	uint8_t port = 0, type = 0;
 8006d56:	2500      	movs	r5, #0
 8006d58:	e000      	b.n	8006d5c <addbuttonCommand+0x64>
		type = MOMENTARY_NO;
 8006d5a:	2501      	movs	r5, #1
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006d5c:	aa02      	add	r2, sp, #8
 8006d5e:	2102      	movs	r1, #2
 8006d60:	0038      	movs	r0, r7
 8006d62:	f008 f9d7 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006d66:	2300      	movs	r3, #0
 8006d68:	56c3      	ldrsb	r3, [r0, r3]
 8006d6a:	2b70      	cmp	r3, #112	; 0x70
 8006d6c:	d00f      	beq.n	8006d8e <addbuttonCommand+0x96>
	uint8_t port = 0, type = 0;
 8006d6e:	2400      	movs	r4, #0
	result = AddPortButton(type, port);
 8006d70:	0021      	movs	r1, r4
 8006d72:	0028      	movs	r0, r5
 8006d74:	f001 fcd8 	bl	8008728 <AddPortButton>
	if (result == BOS_OK) 
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d00d      	beq.n	8006d98 <addbuttonCommand+0xa0>
}
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	b005      	add	sp, #20
 8006d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type = MOMENTARY_NC;
 8006d82:	2502      	movs	r5, #2
 8006d84:	e7ea      	b.n	8006d5c <addbuttonCommand+0x64>
		type = ONOFF_NO;
 8006d86:	2503      	movs	r5, #3
 8006d88:	e7e8      	b.n	8006d5c <addbuttonCommand+0x64>
		type = ONOFF_NC;
 8006d8a:	2504      	movs	r5, #4
 8006d8c:	e7e6      	b.n	8006d5c <addbuttonCommand+0x64>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f00c fea9 	bl	8013ae6 <atol>
 8006d94:	b2c4      	uxtb	r4, r0
 8006d96:	e7eb      	b.n	8006d70 <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <addbuttonCommand+0xbc>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	18d3      	adds	r3, r2, r3
 8006da0:	2100      	movs	r1, #0
 8006da2:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006da4:	9400      	str	r4, [sp, #0]
 8006da6:	0023      	movs	r3, r4
 8006da8:	4907      	ldr	r1, [pc, #28]	; (8006dc8 <addbuttonCommand+0xd0>)
 8006daa:	0030      	movs	r0, r6
 8006dac:	f00d fb28 	bl	8014400 <sprintf>
 8006db0:	e7e4      	b.n	8006d7c <addbuttonCommand+0x84>
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	20000f14 	.word	0x20000f14
 8006db8:	08019448 	.word	0x08019448
 8006dbc:	08019458 	.word	0x08019458
 8006dc0:	08019468 	.word	0x08019468
 8006dc4:	08019474 	.word	0x08019474
 8006dc8:	08019480 	.word	0x08019480

08006dcc <scastCommand>:
{
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dce:	46de      	mov	lr, fp
 8006dd0:	4657      	mov	r7, sl
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b09b      	sub	sp, #108	; 0x6c
 8006dd6:	0005      	movs	r5, r0
 8006dd8:	9009      	str	r0, [sp, #36]	; 0x24
 8006dda:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9319      	str	r3, [sp, #100]	; 0x64
 8006de0:	9318      	str	r3, [sp, #96]	; 0x60
 8006de2:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006de4:	9316      	str	r3, [sp, #88]	; 0x58
 8006de6:	9315      	str	r3, [sp, #84]	; 0x54
 8006de8:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8006dea:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006dec:	220a      	movs	r2, #10
 8006dee:	2100      	movs	r1, #0
 8006df0:	a810      	add	r0, sp, #64	; 0x40
 8006df2:	f00d f90b 	bl	801400c <memset>
 8006df6:	220a      	movs	r2, #10
 8006df8:	2100      	movs	r1, #0
 8006dfa:	a80d      	add	r0, sp, #52	; 0x34
 8006dfc:	f00d f906 	bl	801400c <memset>
 8006e00:	220a      	movs	r2, #10
 8006e02:	2100      	movs	r1, #0
 8006e04:	a80a      	add	r0, sp, #40	; 0x28
 8006e06:	f00d f901 	bl	801400c <memset>
	configASSERT( pcWriteBuffer );
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	d101      	bne.n	8006e12 <scastCommand+0x46>
 8006e0e:	b672      	cpsid	i
 8006e10:	e7fe      	b.n	8006e10 <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006e12:	aa19      	add	r2, sp, #100	; 0x64
 8006e14:	2101      	movs	r1, #1
 8006e16:	0020      	movs	r0, r4
 8006e18:	f008 f97c 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	56c3      	ldrsb	r3, [r0, r3]
 8006e20:	2b50      	cmp	r3, #80	; 0x50
 8006e22:	d047      	beq.n	8006eb4 <scastCommand+0xe8>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	9307      	str	r3, [sp, #28]
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006e28:	aa18      	add	r2, sp, #96	; 0x60
 8006e2a:	2102      	movs	r1, #2
 8006e2c:	0020      	movs	r0, r4
 8006e2e:	f008 f971 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006e32:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006e34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e36:	a810      	add	r0, sp, #64	; 0x40
 8006e38:	f00d fb37 	bl	80144aa <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006e3c:	a810      	add	r0, sp, #64	; 0x40
 8006e3e:	f7fd fc35 	bl	80046ac <GetID>
 8006e42:	b2c3      	uxtb	r3, r0
 8006e44:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006e46:	aa17      	add	r2, sp, #92	; 0x5c
 8006e48:	2103      	movs	r1, #3
 8006e4a:	0020      	movs	r0, r4
 8006e4c:	f008 f962 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006e50:	2300      	movs	r3, #0
 8006e52:	56c3      	ldrsb	r3, [r0, r3]
 8006e54:	2b70      	cmp	r3, #112	; 0x70
 8006e56:	d033      	beq.n	8006ec0 <scastCommand+0xf4>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006e58:	2700      	movs	r7, #0
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006e5a:	aa16      	add	r2, sp, #88	; 0x58
 8006e5c:	2104      	movs	r1, #4
 8006e5e:	0020      	movs	r0, r4
 8006e60:	f008 f958 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006e64:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006e66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e68:	a80d      	add	r0, sp, #52	; 0x34
 8006e6a:	f00d fb1e 	bl	80144aa <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006e6e:	a80d      	add	r0, sp, #52	; 0x34
 8006e70:	f7fd fc1c 	bl	80046ac <GetID>
 8006e74:	b2c3      	uxtb	r3, r0
 8006e76:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006e78:	aa15      	add	r2, sp, #84	; 0x54
 8006e7a:	2105      	movs	r1, #5
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f008 f949 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8006e82:	0005      	movs	r5, r0
 8006e84:	9008      	str	r0, [sp, #32]
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006e86:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006e88:	0032      	movs	r2, r6
 8006e8a:	492d      	ldr	r1, [pc, #180]	; (8006f40 <scastCommand+0x174>)
 8006e8c:	f00d fafc 	bl	8014488 <strncmp>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d01a      	beq.n	8006eca <scastCommand+0xfe>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006e94:	0032      	movs	r2, r6
 8006e96:	492b      	ldr	r1, [pc, #172]	; (8006f44 <scastCommand+0x178>)
 8006e98:	0028      	movs	r0, r5
 8006e9a:	f00d faf5 	bl	8014488 <strncmp>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d03c      	beq.n	8006f1c <scastCommand+0x150>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006ea2:	0032      	movs	r2, r6
 8006ea4:	4928      	ldr	r1, [pc, #160]	; (8006f48 <scastCommand+0x17c>)
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	f00d faee 	bl	8014488 <strncmp>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d037      	beq.n	8006f20 <scastCommand+0x154>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	e00b      	b.n	8006ecc <scastCommand+0x100>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f00c fe16 	bl	8013ae6 <atol>
 8006eba:	b2c3      	uxtb	r3, r0
 8006ebc:	9307      	str	r3, [sp, #28]
 8006ebe:	e7b3      	b.n	8006e28 <scastCommand+0x5c>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f00c fe10 	bl	8013ae6 <atol>
 8006ec6:	b2c7      	uxtb	r7, r0
 8006ec8:	e7c7      	b.n	8006e5a <scastCommand+0x8e>
		direction = FORWARD;
 8006eca:	2500      	movs	r5, #0
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006ecc:	0032      	movs	r2, r6
 8006ece:	9908      	ldr	r1, [sp, #32]
 8006ed0:	a80a      	add	r0, sp, #40	; 0x28
 8006ed2:	f00d faea 	bl	80144aa <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8006ed6:	aa14      	add	r2, sp, #80	; 0x50
 8006ed8:	2106      	movs	r1, #6
 8006eda:	0020      	movs	r0, r4
 8006edc:	f008 f91a 	bl	800f114 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006ee0:	f00c fe01 	bl	8013ae6 <atol>
 8006ee4:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8006ee6:	aa13      	add	r2, sp, #76	; 0x4c
 8006ee8:	2107      	movs	r1, #7
 8006eea:	0020      	movs	r0, r4
 8006eec:	f008 f912 	bl	800f114 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006ef0:	f00c fdf9 	bl	8013ae6 <atol>
 8006ef4:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9303      	str	r3, [sp, #12]
 8006efa:	9002      	str	r0, [sp, #8]
 8006efc:	9601      	str	r6, [sp, #4]
 8006efe:	9500      	str	r5, [sp, #0]
 8006f00:	465b      	mov	r3, fp
 8006f02:	003a      	movs	r2, r7
 8006f04:	4651      	mov	r1, sl
 8006f06:	9807      	ldr	r0, [sp, #28]
 8006f08:	f002 fa00 	bl	800930c <StartScastDMAStream>
	if (result == BOS_OK) 
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d009      	beq.n	8006f24 <scastCommand+0x158>
}
 8006f10:	2000      	movs	r0, #0
 8006f12:	b01b      	add	sp, #108	; 0x6c
 8006f14:	bc0c      	pop	{r2, r3}
 8006f16:	4692      	mov	sl, r2
 8006f18:	469b      	mov	fp, r3
 8006f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction = BACKWARD;
 8006f1c:	2501      	movs	r5, #1
 8006f1e:	e7d5      	b.n	8006ecc <scastCommand+0x100>
		direction = BIDIRECTIONAL;
 8006f20:	2502      	movs	r5, #2
 8006f22:	e7d3      	b.n	8006ecc <scastCommand+0x100>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8006f24:	9404      	str	r4, [sp, #16]
 8006f26:	9603      	str	r6, [sp, #12]
 8006f28:	ab0d      	add	r3, sp, #52	; 0x34
 8006f2a:	9302      	str	r3, [sp, #8]
 8006f2c:	9701      	str	r7, [sp, #4]
 8006f2e:	ab10      	add	r3, sp, #64	; 0x40
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	aa0a      	add	r2, sp, #40	; 0x28
 8006f36:	4905      	ldr	r1, [pc, #20]	; (8006f4c <scastCommand+0x180>)
 8006f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f3a:	f00d fa61 	bl	8014400 <sprintf>
 8006f3e:	e7e7      	b.n	8006f10 <scastCommand+0x144>
 8006f40:	08019bdc 	.word	0x08019bdc
 8006f44:	08019be4 	.word	0x08019be4
 8006f48:	08019bf0 	.word	0x08019bf0
 8006f4c:	08019c00 	.word	0x08019c00

08006f50 <infoCommand>:
{
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b083      	sub	sp, #12
 8006f54:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006f56:	d038      	beq.n	8006fca <infoCommand+0x7a>
	if (N > 1)
 8006f58:	4b27      	ldr	r3, [pc, #156]	; (8006ff8 <infoCommand+0xa8>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d936      	bls.n	8006fce <infoCommand+0x7e>
		result = ReadPortsDir();
 8006f60:	f7fd fcea 	bl	8004938 <ReadPortsDir>
 8006f64:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006f66:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <infoCommand+0xa8>)
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	4924      	ldr	r1, [pc, #144]	; (8006ffc <infoCommand+0xac>)
 8006f6c:	0020      	movs	r0, r4
 8006f6e:	f00d fa47 	bl	8014400 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006f72:	0020      	movs	r0, r4
 8006f74:	f7f9 f8d0 	bl	8000118 <strlen>
 8006f78:	b282      	uxth	r2, r0
 8006f7a:	4e21      	ldr	r6, [pc, #132]	; (8007000 <infoCommand+0xb0>)
 8006f7c:	7830      	ldrb	r0, [r6, #0]
 8006f7e:	2701      	movs	r7, #1
 8006f80:	427f      	negs	r7, r7
 8006f82:	9700      	str	r7, [sp, #0]
 8006f84:	2332      	movs	r3, #50	; 0x32
 8006f86:	0021      	movs	r1, r4
 8006f88:	f007 fe6a 	bl	800ec60 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006f8c:	2213      	movs	r2, #19
 8006f8e:	491d      	ldr	r1, [pc, #116]	; (8007004 <infoCommand+0xb4>)
 8006f90:	0020      	movs	r0, r4
 8006f92:	f00d f832 	bl	8013ffa <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006f96:	0020      	movs	r0, r4
 8006f98:	f7f9 f8be 	bl	8000118 <strlen>
 8006f9c:	b282      	uxth	r2, r0
 8006f9e:	7830      	ldrb	r0, [r6, #0]
 8006fa0:	9700      	str	r7, [sp, #0]
 8006fa2:	2332      	movs	r3, #50	; 0x32
 8006fa4:	0021      	movs	r1, r4
 8006fa6:	f007 fe5b 	bl	800ec60 <writePxMutex>
	DisplayTopology(PcPort);
 8006faa:	7830      	ldrb	r0, [r6, #0]
 8006fac:	f7fd f8e0 	bl	8004170 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006fb0:	7830      	ldrb	r0, [r6, #0]
 8006fb2:	f7fd f9a5 	bl	8004300 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006fb6:	2d02      	cmp	r5, #2
 8006fb8:	d00b      	beq.n	8006fd2 <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4912      	ldr	r1, [pc, #72]	; (8007008 <infoCommand+0xb8>)
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	f00d f81b 	bl	8013ffa <memcpy>
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	b003      	add	sp, #12
 8006fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006fca:	b672      	cpsid	i
 8006fcc:	e7fe      	b.n	8006fcc <infoCommand+0x7c>
	BOS_Status result = BOS_OK; 
 8006fce:	2500      	movs	r5, #0
 8006fd0:	e7c9      	b.n	8006f66 <infoCommand+0x16>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006fd2:	2244      	movs	r2, #68	; 0x44
 8006fd4:	490d      	ldr	r1, [pc, #52]	; (800700c <infoCommand+0xbc>)
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f00d f80f 	bl	8013ffa <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006fdc:	0020      	movs	r0, r4
 8006fde:	f7f9 f89b 	bl	8000118 <strlen>
 8006fe2:	b282      	uxth	r2, r0
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <infoCommand+0xb0>)
 8006fe6:	7818      	ldrb	r0, [r3, #0]
 8006fe8:	003b      	movs	r3, r7
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	3333      	adds	r3, #51	; 0x33
 8006fee:	0021      	movs	r1, r4
 8006ff0:	f007 fe36 	bl	800ec60 <writePxMutex>
 8006ff4:	e7e1      	b.n	8006fba <infoCommand+0x6a>
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	2000001c 	.word	0x2000001c
 8006ffc:	0801997c 	.word	0x0801997c
 8007000:	20000af7 	.word	0x20000af7
 8007004:	08019998 	.word	0x08019998
 8007008:	08018a54 	.word	0x08018a54
 800700c:	080199ac 	.word	0x080199ac

08007010 <statusCommand>:
{
 8007010:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8007012:	2800      	cmp	r0, #0
 8007014:	d101      	bne.n	800701a <statusCommand+0xa>
 8007016:	b672      	cpsid	i
 8007018:	e7fe      	b.n	8007018 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800701a:	2000      	movs	r0, #0
 800701c:	f7fd f9da 	bl	80043d4 <DisplayModuleStatus>
}
 8007020:	2000      	movs	r0, #0
 8007022:	bd10      	pop	{r4, pc}

08007024 <groupCommand>:
{
 8007024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007026:	46ce      	mov	lr, r9
 8007028:	b500      	push	{lr}
 800702a:	b090      	sub	sp, #64	; 0x40
 800702c:	0004      	movs	r4, r0
 800702e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8007030:	2227      	movs	r2, #39	; 0x27
 8007032:	2100      	movs	r1, #0
 8007034:	a806      	add	r0, sp, #24
 8007036:	f00c ffe9 	bl	801400c <memset>
 800703a:	220a      	movs	r2, #10
 800703c:	2100      	movs	r1, #0
 800703e:	a803      	add	r0, sp, #12
 8007040:	f00c ffe4 	bl	801400c <memset>
	configASSERT( pcWriteBuffer );
 8007044:	2c00      	cmp	r4, #0
 8007046:	d101      	bne.n	800704c <groupCommand+0x28>
 8007048:	b672      	cpsid	i
 800704a:	e7fe      	b.n	800704a <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800704c:	4d59      	ldr	r5, [pc, #356]	; (80071b4 <groupCommand+0x190>)
 800704e:	002a      	movs	r2, r5
 8007050:	2101      	movs	r1, #1
 8007052:	9801      	ldr	r0, [sp, #4]
 8007054:	f008 f85e 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8007058:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800705a:	682a      	ldr	r2, [r5, #0]
 800705c:	a803      	add	r0, sp, #12
 800705e:	f00d fa24 	bl	80144aa <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007062:	2500      	movs	r5, #0
 8007064:	e00b      	b.n	800707e <groupCommand+0x5a>
		if (!strcmp(alias, groupAlias[i]))	
 8007066:	00ab      	lsls	r3, r5, #2
 8007068:	195b      	adds	r3, r3, r5
 800706a:	0059      	lsls	r1, r3, #1
 800706c:	4b52      	ldr	r3, [pc, #328]	; (80071b8 <groupCommand+0x194>)
 800706e:	18c9      	adds	r1, r1, r3
 8007070:	a803      	add	r0, sp, #12
 8007072:	f7f9 f847 	bl	8000104 <strcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	d017      	beq.n	80070aa <groupCommand+0x86>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 800707a:	3501      	adds	r5, #1
 800707c:	b2ed      	uxtb	r5, r5
 800707e:	2d09      	cmp	r5, #9
 8007080:	d9f1      	bls.n	8007066 <groupCommand+0x42>
	type = 1;
 8007082:	2601      	movs	r6, #1
	count = 2;
 8007084:	4b4d      	ldr	r3, [pc, #308]	; (80071bc <groupCommand+0x198>)
 8007086:	2202      	movs	r2, #2
 8007088:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 800708a:	3208      	adds	r2, #8
 800708c:	494c      	ldr	r1, [pc, #304]	; (80071c0 <groupCommand+0x19c>)
 800708e:	0020      	movs	r0, r4
 8007090:	f00c ffb3 	bl	8013ffa <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 8007094:	4a4b      	ldr	r2, [pc, #300]	; (80071c4 <groupCommand+0x1a0>)
 8007096:	2102      	movs	r1, #2
 8007098:	9801      	ldr	r0, [sp, #4]
 800709a:	f008 f83b 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800709e:	4b4a      	ldr	r3, [pc, #296]	; (80071c8 <groupCommand+0x1a4>)
 80070a0:	6018      	str	r0, [r3, #0]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80070a2:	2300      	movs	r3, #0
 80070a4:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK; 
 80070a6:	2500      	movs	r5, #0
	while (pcParameterString != NULL)
 80070a8:	e00f      	b.n	80070ca <groupCommand+0xa6>
			type = 0; break;
 80070aa:	2600      	movs	r6, #0
 80070ac:	e7ea      	b.n	8007084 <groupCommand+0x60>
		strcat( ( char * ) pcWriteBuffer, module);
 80070ae:	a906      	add	r1, sp, #24
 80070b0:	0020      	movs	r0, r4
 80070b2:	f00d f9c5 	bl	8014440 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 80070b6:	1c79      	adds	r1, r7, #1
 80070b8:	b249      	sxtb	r1, r1
 80070ba:	4b40      	ldr	r3, [pc, #256]	; (80071bc <groupCommand+0x198>)
 80070bc:	7019      	strb	r1, [r3, #0]
 80070be:	4a41      	ldr	r2, [pc, #260]	; (80071c4 <groupCommand+0x1a0>)
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	f008 f827 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80070c6:	4b40      	ldr	r3, [pc, #256]	; (80071c8 <groupCommand+0x1a4>)
 80070c8:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80070ca:	4b3f      	ldr	r3, [pc, #252]	; (80071c8 <groupCommand+0x1a4>)
 80070cc:	6819      	ldr	r1, [r3, #0]
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d024      	beq.n	800711c <groupCommand+0xf8>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80070d2:	4b3c      	ldr	r3, [pc, #240]	; (80071c4 <groupCommand+0x1a0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4699      	mov	r9, r3
 80070d8:	af06      	add	r7, sp, #24
 80070da:	001a      	movs	r2, r3
 80070dc:	0038      	movs	r0, r7
 80070de:	f00d f9e4 	bl	80144aa <strncpy>
 80070e2:	2300      	movs	r3, #0
 80070e4:	464a      	mov	r2, r9
 80070e6:	54bb      	strb	r3, [r7, r2]
		modID = GetID(module);
 80070e8:	0038      	movs	r0, r7
 80070ea:	f7fd fadf 	bl	80046ac <GetID>
 80070ee:	4681      	mov	r9, r0
		if (modID < 0)	break;
 80070f0:	2800      	cmp	r0, #0
 80070f2:	db13      	blt.n	800711c <groupCommand+0xf8>
		result = AddModuleToGroup(modID, alias);
 80070f4:	b2c0      	uxtb	r0, r0
 80070f6:	a903      	add	r1, sp, #12
 80070f8:	f7fd fba0 	bl	800483c <AddModuleToGroup>
 80070fc:	1e05      	subs	r5, r0, #0
		if (result != BOS_OK)	break;
 80070fe:	d10d      	bne.n	800711c <groupCommand+0xf8>
		if (count > 2)
 8007100:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <groupCommand+0x198>)
 8007102:	2700      	movs	r7, #0
 8007104:	57df      	ldrsb	r7, [r3, r7]
 8007106:	2f02      	cmp	r7, #2
 8007108:	ddd1      	ble.n	80070ae <groupCommand+0x8a>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 800710a:	0020      	movs	r0, r4
 800710c:	f7f9 f804 	bl	8000118 <strlen>
 8007110:	1820      	adds	r0, r4, r0
 8007112:	2203      	movs	r2, #3
 8007114:	492d      	ldr	r1, [pc, #180]	; (80071cc <groupCommand+0x1a8>)
 8007116:	f00c ff70 	bl	8013ffa <memcpy>
 800711a:	e7c8      	b.n	80070ae <groupCommand+0x8a>
	if (modID < 0) 
 800711c:	464b      	mov	r3, r9
 800711e:	2b00      	cmp	r3, #0
 8007120:	db12      	blt.n	8007148 <groupCommand+0x124>
	else if (count == 2)
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <groupCommand+0x198>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d017      	beq.n	800715c <groupCommand+0x138>
	else if (result == BOS_OK && type) {
 800712c:	2d00      	cmp	r5, #0
 800712e:	d11b      	bne.n	8007168 <groupCommand+0x144>
 8007130:	2e00      	cmp	r6, #0
 8007132:	d019      	beq.n	8007168 <groupCommand+0x144>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8007134:	aa03      	add	r2, sp, #12
 8007136:	4926      	ldr	r1, [pc, #152]	; (80071d0 <groupCommand+0x1ac>)
 8007138:	a806      	add	r0, sp, #24
 800713a:	f00d f961 	bl	8014400 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800713e:	a906      	add	r1, sp, #24
 8007140:	0020      	movs	r0, r4
 8007142:	f00d f97d 	bl	8014440 <strcat>
 8007146:	e004      	b.n	8007152 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8007148:	aa06      	add	r2, sp, #24
 800714a:	4922      	ldr	r1, [pc, #136]	; (80071d4 <groupCommand+0x1b0>)
 800714c:	0020      	movs	r0, r4
 800714e:	f00d f957 	bl	8014400 <sprintf>
}
 8007152:	2000      	movs	r0, #0
 8007154:	b010      	add	sp, #64	; 0x40
 8007156:	bc04      	pop	{r2}
 8007158:	4691      	mov	r9, r2
 800715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 800715c:	aa03      	add	r2, sp, #12
 800715e:	491e      	ldr	r1, [pc, #120]	; (80071d8 <groupCommand+0x1b4>)
 8007160:	0020      	movs	r0, r4
 8007162:	f00d f94d 	bl	8014400 <sprintf>
 8007166:	e7f4      	b.n	8007152 <groupCommand+0x12e>
	} else if (result == BOS_OK && !type) {
 8007168:	2d00      	cmp	r5, #0
 800716a:	d10b      	bne.n	8007184 <groupCommand+0x160>
 800716c:	2e00      	cmp	r6, #0
 800716e:	d109      	bne.n	8007184 <groupCommand+0x160>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8007170:	aa03      	add	r2, sp, #12
 8007172:	491a      	ldr	r1, [pc, #104]	; (80071dc <groupCommand+0x1b8>)
 8007174:	a806      	add	r0, sp, #24
 8007176:	f00d f943 	bl	8014400 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800717a:	a906      	add	r1, sp, #24
 800717c:	0020      	movs	r0, r4
 800717e:	f00d f95f 	bl	8014440 <strcat>
 8007182:	e7e6      	b.n	8007152 <groupCommand+0x12e>
	} else if (result == BOS_ERR_Keyword)
 8007184:	2d06      	cmp	r5, #6
 8007186:	d007      	beq.n	8007198 <groupCommand+0x174>
	else if (result == BOS_ERR_ExistingAlias)
 8007188:	2d07      	cmp	r5, #7
 800718a:	d10b      	bne.n	80071a4 <groupCommand+0x180>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 800718c:	aa03      	add	r2, sp, #12
 800718e:	4914      	ldr	r1, [pc, #80]	; (80071e0 <groupCommand+0x1bc>)
 8007190:	0020      	movs	r0, r4
 8007192:	f00d f935 	bl	8014400 <sprintf>
 8007196:	e7dc      	b.n	8007152 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8007198:	aa03      	add	r2, sp, #12
 800719a:	4912      	ldr	r1, [pc, #72]	; (80071e4 <groupCommand+0x1c0>)
 800719c:	0020      	movs	r0, r4
 800719e:	f00d f92f 	bl	8014400 <sprintf>
 80071a2:	e7d6      	b.n	8007152 <groupCommand+0x12e>
	else if (result == BOS_ERR_ExistingCmd)
 80071a4:	2d08      	cmp	r5, #8
 80071a6:	d1d4      	bne.n	8007152 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80071a8:	aa03      	add	r2, sp, #12
 80071aa:	490f      	ldr	r1, [pc, #60]	; (80071e8 <groupCommand+0x1c4>)
 80071ac:	0020      	movs	r0, r4
 80071ae:	f00d f927 	bl	8014400 <sprintf>
 80071b2:	e7ce      	b.n	8007152 <groupCommand+0x12e>
 80071b4:	20000f44 	.word	0x20000f44
 80071b8:	20000c50 	.word	0x20000c50
 80071bc:	20000f0a 	.word	0x20000f0a
 80071c0:	0801979c 	.word	0x0801979c
 80071c4:	20000f38 	.word	0x20000f38
 80071c8:	20000f0c 	.word	0x20000f0c
 80071cc:	080197a8 	.word	0x080197a8
 80071d0:	080197fc 	.word	0x080197fc
 80071d4:	080197ac 	.word	0x080197ac
 80071d8:	080197d0 	.word	0x080197d0
 80071dc:	08019818 	.word	0x08019818
 80071e0:	08019878 	.word	0x08019878
 80071e4:	08019838 	.word	0x08019838
 80071e8:	080198ac 	.word	0x080198ac

080071ec <nameCommand>:
{
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	0004      	movs	r4, r0
 80071f0:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80071f2:	2c00      	cmp	r4, #0
 80071f4:	d101      	bne.n	80071fa <nameCommand+0xe>
 80071f6:	b672      	cpsid	i
 80071f8:	e7fe      	b.n	80071f8 <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80071fa:	4d1c      	ldr	r5, [pc, #112]	; (800726c <nameCommand+0x80>)
 80071fc:	002a      	movs	r2, r5
 80071fe:	2101      	movs	r1, #1
 8007200:	f007 ff88 	bl	800f114 <FreeRTOS_CLIGetParameter>
 8007204:	0001      	movs	r1, r0
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <nameCommand+0x84>)
 8007208:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	2b09      	cmp	r3, #9
 800720e:	dd01      	ble.n	8007214 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8007210:	2300      	movs	r3, #0
 8007212:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8007214:	4b17      	ldr	r3, [pc, #92]	; (8007274 <nameCommand+0x88>)
 8007216:	7818      	ldrb	r0, [r3, #0]
 8007218:	f7fd faaa 	bl	8004770 <NameModule>
	if (result == BOS_OK)
 800721c:	2800      	cmp	r0, #0
 800721e:	d007      	beq.n	8007230 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8007220:	2806      	cmp	r0, #6
 8007222:	d00e      	beq.n	8007242 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8007224:	2807      	cmp	r0, #7
 8007226:	d013      	beq.n	8007250 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8007228:	2808      	cmp	r0, #8
 800722a:	d018      	beq.n	800725e <nameCommand+0x72>
}
 800722c:	2000      	movs	r0, #0
 800722e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8007230:	4b10      	ldr	r3, [pc, #64]	; (8007274 <nameCommand+0x88>)
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <nameCommand+0x84>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	490f      	ldr	r1, [pc, #60]	; (8007278 <nameCommand+0x8c>)
 800723a:	0020      	movs	r0, r4
 800723c:	f00d f8e0 	bl	8014400 <sprintf>
 8007240:	e7f4      	b.n	800722c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8007242:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <nameCommand+0x84>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	490d      	ldr	r1, [pc, #52]	; (800727c <nameCommand+0x90>)
 8007248:	0020      	movs	r0, r4
 800724a:	f00d f8d9 	bl	8014400 <sprintf>
 800724e:	e7ed      	b.n	800722c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <nameCommand+0x84>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	490a      	ldr	r1, [pc, #40]	; (8007280 <nameCommand+0x94>)
 8007256:	0020      	movs	r0, r4
 8007258:	f00d f8d2 	bl	8014400 <sprintf>
 800725c:	e7e6      	b.n	800722c <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <nameCommand+0x84>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4908      	ldr	r1, [pc, #32]	; (8007284 <nameCommand+0x98>)
 8007264:	0020      	movs	r0, r4
 8007266:	f00d f8cb 	bl	8014400 <sprintf>
 800726a:	e7df      	b.n	800722c <nameCommand+0x40>
 800726c:	20000f40 	.word	0x20000f40
 8007270:	20000f10 	.word	0x20000f10
 8007274:	20000070 	.word	0x20000070
 8007278:	08019a14 	.word	0x08019a14
 800727c:	08019838 	.word	0x08019838
 8007280:	08019878 	.word	0x08019878
 8007284:	080198ac 	.word	0x080198ac

08007288 <bootloaderUpdateCommand>:
{
 8007288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728a:	b085      	sub	sp, #20
 800728c:	1e04      	subs	r4, r0, #0
 800728e:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 8007290:	d101      	bne.n	8007296 <bootloaderUpdateCommand+0xe>
 8007292:	b672      	cpsid	i
 8007294:	e7fe      	b.n	8007294 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007296:	4a4b      	ldr	r2, [pc, #300]	; (80073c4 <bootloaderUpdateCommand+0x13c>)
 8007298:	2101      	movs	r1, #1
 800729a:	9803      	ldr	r0, [sp, #12]
 800729c:	f007 ff3a 	bl	800f114 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d040      	beq.n	8007326 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 80072a4:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <bootloaderUpdateCommand+0x13c>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4947      	ldr	r1, [pc, #284]	; (80073c8 <bootloaderUpdateCommand+0x140>)
 80072aa:	f00d f8ed 	bl	8014488 <strncmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d000      	beq.n	80072b4 <bootloaderUpdateCommand+0x2c>
 80072b2:	e080      	b.n	80073b6 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80072b4:	4a45      	ldr	r2, [pc, #276]	; (80073cc <bootloaderUpdateCommand+0x144>)
 80072b6:	2102      	movs	r1, #2
 80072b8:	9803      	ldr	r0, [sp, #12]
 80072ba:	f007 ff2b 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80072be:	4f44      	ldr	r7, [pc, #272]	; (80073d0 <bootloaderUpdateCommand+0x148>)
 80072c0:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80072c2:	4a44      	ldr	r2, [pc, #272]	; (80073d4 <bootloaderUpdateCommand+0x14c>)
 80072c4:	2103      	movs	r1, #3
 80072c6:	9803      	ldr	r0, [sp, #12]
 80072c8:	f007 ff24 	bl	800f114 <FreeRTOS_CLIGetParameter>
 80072cc:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <bootloaderUpdateCommand+0x150>)
 80072ce:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80072d0:	6838      	ldr	r0, [r7, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	56c3      	ldrsb	r3, [r0, r3]
 80072d6:	2b23      	cmp	r3, #35	; 0x23
 80072d8:	d04f      	beq.n	800737a <bootloaderUpdateCommand+0xf2>
				result = BOS_ERR_WrongValue;				
 80072da:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString3[0] == 'p') {
 80072dc:	4b3e      	ldr	r3, [pc, #248]	; (80073d8 <bootloaderUpdateCommand+0x150>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	2300      	movs	r3, #0
 80072e2:	56c3      	ldrsb	r3, [r0, r3]
 80072e4:	2b70      	cmp	r3, #112	; 0x70
 80072e6:	d04e      	beq.n	8007386 <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;		
 80072e8:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 80072ea:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <bootloaderUpdateCommand+0x154>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	42b3      	cmp	r3, r6
 80072f0:	d04e      	beq.n	8007390 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;							
 80072f2:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <bootloaderUpdateCommand+0x158>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80072f8:	4b3a      	ldr	r3, [pc, #232]	; (80073e4 <bootloaderUpdateCommand+0x15c>)
 80072fa:	701d      	strb	r5, [r3, #0]
 80072fc:	3201      	adds	r2, #1
 80072fe:	211a      	movs	r1, #26
 8007300:	0030      	movs	r0, r6
 8007302:	f001 ffdd 	bl	80092c0 <SendMessageToModule>
				osDelay(100);			
 8007306:	2064      	movs	r0, #100	; 0x64
 8007308:	f007 fdde 	bl	800eec8 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <bootloaderUpdateCommand+0x160>)
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	4b32      	ldr	r3, [pc, #200]	; (80073dc <bootloaderUpdateCommand+0x154>)
 8007312:	7818      	ldrb	r0, [r3, #0]
 8007314:	002b      	movs	r3, r5
 8007316:	0031      	movs	r1, r6
 8007318:	f7fc feb4 	bl	8004084 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 800731c:	2f68      	cmp	r7, #104	; 0x68
 800731e:	d04a      	beq.n	80073b6 <bootloaderUpdateCommand+0x12e>
}
 8007320:	2000      	movs	r0, #0
 8007322:	b005      	add	sp, #20
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8007326:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <bootloaderUpdateCommand+0x154>)
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	4930      	ldr	r1, [pc, #192]	; (80073ec <bootloaderUpdateCommand+0x164>)
 800732c:	0020      	movs	r0, r4
 800732e:	f00d f867 	bl	8014400 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8007332:	4b2f      	ldr	r3, [pc, #188]	; (80073f0 <bootloaderUpdateCommand+0x168>)
 8007334:	6819      	ldr	r1, [r3, #0]
 8007336:	0020      	movs	r0, r4
 8007338:	f00d f882 	bl	8014440 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800733c:	0020      	movs	r0, r4
 800733e:	f7f8 feeb 	bl	8000118 <strlen>
 8007342:	b282      	uxth	r2, r0
 8007344:	4b28      	ldr	r3, [pc, #160]	; (80073e8 <bootloaderUpdateCommand+0x160>)
 8007346:	7818      	ldrb	r0, [r3, #0]
 8007348:	2301      	movs	r3, #1
 800734a:	425b      	negs	r3, r3
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	3333      	adds	r3, #51	; 0x33
 8007350:	0021      	movs	r1, r4
 8007352:	f007 fc85 	bl	800ec60 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8007356:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <bootloaderUpdateCommand+0x16c>)
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <bootloaderUpdateCommand+0x170>)
 800735a:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 800735c:	4b27      	ldr	r3, [pc, #156]	; (80073fc <bootloaderUpdateCommand+0x174>)
 800735e:	2201      	movs	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007362:	200a      	movs	r0, #10
 8007364:	f007 fdb0 	bl	800eec8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	4b24      	ldr	r3, [pc, #144]	; (8007400 <bootloaderUpdateCommand+0x178>)
 800736e:	4a25      	ldr	r2, [pc, #148]	; (8007404 <bootloaderUpdateCommand+0x17c>)
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	e7fd      	b.n	8007376 <bootloaderUpdateCommand+0xee>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800737a:	3001      	adds	r0, #1
 800737c:	f00c fbb3 	bl	8013ae6 <atol>
 8007380:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8007382:	2700      	movs	r7, #0
 8007384:	e7aa      	b.n	80072dc <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8007386:	3001      	adds	r0, #1
 8007388:	f00c fbad 	bl	8013ae6 <atol>
 800738c:	b2c5      	uxtb	r5, r0
 800738e:	e7ac      	b.n	80072ea <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8007390:	2100      	movs	r1, #0
 8007392:	9100      	str	r1, [sp, #0]
 8007394:	2319      	movs	r3, #25
 8007396:	000a      	movs	r2, r1
 8007398:	0028      	movs	r0, r5
 800739a:	f001 fd81 	bl	8008ea0 <SendMessageFromPort>
				osDelay(100);
 800739e:	2064      	movs	r0, #100	; 0x64
 80073a0:	f007 fd92 	bl	800eec8 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <bootloaderUpdateCommand+0x154>)
 80073a6:	7818      	ldrb	r0, [r3, #0]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <bootloaderUpdateCommand+0x160>)
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	002b      	movs	r3, r5
 80073ae:	0001      	movs	r1, r0
 80073b0:	f7fc fe68 	bl	8004084 <remoteBootloaderUpdate>
 80073b4:	e7b2      	b.n	800731c <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 80073b6:	220f      	movs	r2, #15
 80073b8:	4913      	ldr	r1, [pc, #76]	; (8007408 <bootloaderUpdateCommand+0x180>)
 80073ba:	0020      	movs	r0, r4
 80073bc:	f00c fe1d 	bl	8013ffa <memcpy>
 80073c0:	e7ae      	b.n	8007320 <bootloaderUpdateCommand+0x98>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	20000f3c 	.word	0x20000f3c
 80073c8:	080194e4 	.word	0x080194e4
 80073cc:	20000f48 	.word	0x20000f48
 80073d0:	20000f20 	.word	0x20000f20
 80073d4:	20000f4c 	.word	0x20000f4c
 80073d8:	20000f28 	.word	0x20000f28
 80073dc:	20000070 	.word	0x20000070
 80073e0:	200069d4 	.word	0x200069d4
 80073e4:	20000cfc 	.word	0x20000cfc
 80073e8:	20000af7 	.word	0x20000af7
 80073ec:	080194c4 	.word	0x080194c4
 80073f0:	20000094 	.word	0x20000094
 80073f4:	20007ff0 	.word	0x20007ff0
 80073f8:	deadbeef 	.word	0xdeadbeef
 80073fc:	20000cb8 	.word	0x20000cb8
 8007400:	e000ed00 	.word	0xe000ed00
 8007404:	05fa0004 	.word	0x05fa0004
 8007408:	080195a4 	.word	0x080195a4

0800740c <pingCommand>:
{
 800740c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 800740e:	2800      	cmp	r0, #0
 8007410:	d01e      	beq.n	8007450 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <pingCommand+0x5c>)
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	0093      	lsls	r3, r2, #2
 8007418:	189b      	adds	r3, r3, r2
 800741a:	0059      	lsls	r1, r3, #1
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <pingCommand+0x60>)
 800741e:	5ccb      	ldrb	r3, [r1, r3]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d117      	bne.n	8007454 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8007424:	4912      	ldr	r1, [pc, #72]	; (8007470 <pingCommand+0x64>)
 8007426:	f00c ffeb 	bl	8014400 <sprintf>
	RTOS_IND_blink(200);	
 800742a:	2580      	movs	r5, #128	; 0x80
 800742c:	012d      	lsls	r5, r5, #4
 800742e:	2490      	movs	r4, #144	; 0x90
 8007430:	05e4      	lsls	r4, r4, #23
 8007432:	2201      	movs	r2, #1
 8007434:	0029      	movs	r1, r5
 8007436:	0020      	movs	r0, r4
 8007438:	f00a fe25 	bl	8012086 <HAL_GPIO_WritePin>
 800743c:	20c8      	movs	r0, #200	; 0xc8
 800743e:	f007 fd43 	bl	800eec8 <osDelay>
 8007442:	2200      	movs	r2, #0
 8007444:	0029      	movs	r1, r5
 8007446:	0020      	movs	r0, r4
 8007448:	f00a fe1d 	bl	8012086 <HAL_GPIO_WritePin>
}
 800744c:	2000      	movs	r0, #0
 800744e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8007450:	b672      	cpsid	i
 8007452:	e7fe      	b.n	8007452 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8007454:	0091      	lsls	r1, r2, #2
 8007456:	1889      	adds	r1, r1, r2
 8007458:	004b      	lsls	r3, r1, #1
 800745a:	4904      	ldr	r1, [pc, #16]	; (800746c <pingCommand+0x60>)
 800745c:	185b      	adds	r3, r3, r1
 800745e:	4905      	ldr	r1, [pc, #20]	; (8007474 <pingCommand+0x68>)
 8007460:	f00c ffce 	bl	8014400 <sprintf>
 8007464:	e7e1      	b.n	800742a <pingCommand+0x1e>
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	20000070 	.word	0x20000070
 800746c:	20000d2c 	.word	0x20000d2c
 8007470:	08019a84 	.word	0x08019a84
 8007474:	08019a98 	.word	0x08019a98

08007478 <prvRunTimeStatsCommand>:
{
 8007478:	b510      	push	{r4, lr}
 800747a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800747c:	d101      	bne.n	8007482 <prvRunTimeStatsCommand+0xa>
 800747e:	b672      	cpsid	i
 8007480:	e7fe      	b.n	8007480 <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8007482:	2251      	movs	r2, #81	; 0x51
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <prvRunTimeStatsCommand+0x20>)
 8007486:	f00c fdb8 	bl	8013ffa <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 800748a:	0020      	movs	r0, r4
 800748c:	3050      	adds	r0, #80	; 0x50
 800748e:	f009 f8ad 	bl	80105ec <vTaskGetRunTimeStats>
}
 8007492:	2000      	movs	r0, #0
 8007494:	bd10      	pop	{r4, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	08019ac4 	.word	0x08019ac4

0800749c <prvTaskStatsCommand>:
{
 800749c:	b510      	push	{r4, lr}
 800749e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80074a0:	d101      	bne.n	80074a6 <prvTaskStatsCommand+0xa>
 80074a2:	b672      	cpsid	i
 80074a4:	e7fe      	b.n	80074a4 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80074a6:	225b      	movs	r2, #91	; 0x5b
 80074a8:	4904      	ldr	r1, [pc, #16]	; (80074bc <prvTaskStatsCommand+0x20>)
 80074aa:	f00c fda6 	bl	8013ffa <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 80074ae:	0020      	movs	r0, r4
 80074b0:	305a      	adds	r0, #90	; 0x5a
 80074b2:	f009 f841 	bl	8010538 <vTaskList>
}
 80074b6:	2000      	movs	r0, #0
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	08019b28 	.word	0x08019b28

080074c0 <resetCommand>:
	configASSERT( pcWriteBuffer );
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d101      	bne.n	80074c8 <resetCommand+0x8>
 80074c4:	b672      	cpsid	i
 80074c6:	e7fe      	b.n	80074c6 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <resetCommand+0x1c>)
 80074ce:	4a04      	ldr	r2, [pc, #16]	; (80074e0 <resetCommand+0x20>)
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	e7fd      	b.n	80074d6 <resetCommand+0x16>
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	e000ed00 	.word	0xe000ed00
 80074e0:	05fa0004 	.word	0x05fa0004

080074e4 <RegisterUserCLICommands>:
}
 80074e4:	4770      	bx	lr
	...

080074e8 <vRegisterCLICommands>:
{
 80074e8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 80074ea:	482e      	ldr	r0, [pc, #184]	; (80075a4 <vRegisterCLICommands+0xbc>)
 80074ec:	f007 fd8c 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80074f0:	482d      	ldr	r0, [pc, #180]	; (80075a8 <vRegisterCLICommands+0xc0>)
 80074f2:	f007 fd89 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80074f6:	482d      	ldr	r0, [pc, #180]	; (80075ac <vRegisterCLICommands+0xc4>)
 80074f8:	f007 fd86 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80074fc:	482c      	ldr	r0, [pc, #176]	; (80075b0 <vRegisterCLICommands+0xc8>)
 80074fe:	f007 fd83 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8007502:	482c      	ldr	r0, [pc, #176]	; (80075b4 <vRegisterCLICommands+0xcc>)
 8007504:	f007 fd80 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8007508:	482b      	ldr	r0, [pc, #172]	; (80075b8 <vRegisterCLICommands+0xd0>)
 800750a:	f007 fd7d 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 800750e:	482b      	ldr	r0, [pc, #172]	; (80075bc <vRegisterCLICommands+0xd4>)
 8007510:	f007 fd7a 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8007514:	482a      	ldr	r0, [pc, #168]	; (80075c0 <vRegisterCLICommands+0xd8>)
 8007516:	f007 fd77 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 800751a:	482a      	ldr	r0, [pc, #168]	; (80075c4 <vRegisterCLICommands+0xdc>)
 800751c:	f007 fd74 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8007520:	4829      	ldr	r0, [pc, #164]	; (80075c8 <vRegisterCLICommands+0xe0>)
 8007522:	f007 fd71 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8007526:	4829      	ldr	r0, [pc, #164]	; (80075cc <vRegisterCLICommands+0xe4>)
 8007528:	f007 fd6e 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 800752c:	4828      	ldr	r0, [pc, #160]	; (80075d0 <vRegisterCLICommands+0xe8>)
 800752e:	f007 fd6b 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8007532:	4828      	ldr	r0, [pc, #160]	; (80075d4 <vRegisterCLICommands+0xec>)
 8007534:	f007 fd68 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8007538:	4827      	ldr	r0, [pc, #156]	; (80075d8 <vRegisterCLICommands+0xf0>)
 800753a:	f007 fd65 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 800753e:	4827      	ldr	r0, [pc, #156]	; (80075dc <vRegisterCLICommands+0xf4>)
 8007540:	f007 fd62 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8007544:	4826      	ldr	r0, [pc, #152]	; (80075e0 <vRegisterCLICommands+0xf8>)
 8007546:	f007 fd5f 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 800754a:	4826      	ldr	r0, [pc, #152]	; (80075e4 <vRegisterCLICommands+0xfc>)
 800754c:	f007 fd5c 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8007550:	4825      	ldr	r0, [pc, #148]	; (80075e8 <vRegisterCLICommands+0x100>)
 8007552:	f007 fd59 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8007556:	4825      	ldr	r0, [pc, #148]	; (80075ec <vRegisterCLICommands+0x104>)
 8007558:	f007 fd56 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 800755c:	4824      	ldr	r0, [pc, #144]	; (80075f0 <vRegisterCLICommands+0x108>)
 800755e:	f007 fd53 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8007562:	4824      	ldr	r0, [pc, #144]	; (80075f4 <vRegisterCLICommands+0x10c>)
 8007564:	f007 fd50 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8007568:	4823      	ldr	r0, [pc, #140]	; (80075f8 <vRegisterCLICommands+0x110>)
 800756a:	f007 fd4d 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 800756e:	4823      	ldr	r0, [pc, #140]	; (80075fc <vRegisterCLICommands+0x114>)
 8007570:	f007 fd4a 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8007574:	4822      	ldr	r0, [pc, #136]	; (8007600 <vRegisterCLICommands+0x118>)
 8007576:	f007 fd47 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 800757a:	4822      	ldr	r0, [pc, #136]	; (8007604 <vRegisterCLICommands+0x11c>)
 800757c:	f007 fd44 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8007580:	4821      	ldr	r0, [pc, #132]	; (8007608 <vRegisterCLICommands+0x120>)
 8007582:	f007 fd41 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8007586:	4821      	ldr	r0, [pc, #132]	; (800760c <vRegisterCLICommands+0x124>)
 8007588:	f007 fd3e 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 800758c:	4820      	ldr	r0, [pc, #128]	; (8007610 <vRegisterCLICommands+0x128>)
 800758e:	f007 fd3b 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 28;			// Add "help" command
 8007592:	4b20      	ldr	r3, [pc, #128]	; (8007614 <vRegisterCLICommands+0x12c>)
 8007594:	221c      	movs	r2, #28
 8007596:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007598:	f003 ff28 	bl	800b3ec <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800759c:	f7ff ffa2 	bl	80074e4 <RegisterUserCLICommands>
}
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	08019b84 	.word	0x08019b84
 80075a8:	08019b18 	.word	0x08019b18
 80075ac:	08019ab4 	.word	0x08019ab4
 80075b0:	080194e8 	.word	0x080194e8
 80075b4:	08019bcc 	.word	0x08019bcc
 80075b8:	08019a2c 	.word	0x08019a2c
 80075bc:	080198ec 	.word	0x080198ec
 80075c0:	0801a05c 	.word	0x0801a05c
 80075c4:	080199f0 	.word	0x080199f0
 80075c8:	08019c88 	.word	0x08019c88
 80075cc:	080194b4 	.word	0x080194b4
 80075d0:	08019bbc 	.word	0x08019bbc
 80075d4:	08019ecc 	.word	0x08019ecc
 80075d8:	0801978c 	.word	0x0801978c
 80075dc:	080195f4 	.word	0x080195f4
 80075e0:	0801aeac 	.word	0x0801aeac
 80075e4:	0801955c 	.word	0x0801955c
 80075e8:	08019cd4 	.word	0x08019cd4
 80075ec:	0801af20 	.word	0x0801af20
 80075f0:	0801996c 	.word	0x0801996c
 80075f4:	08019690 	.word	0x08019690
 80075f8:	0801a04c 	.word	0x0801a04c
 80075fc:	08019438 	.word	0x08019438
 8007600:	08019a74 	.word	0x08019a74
 8007604:	08019660 	.word	0x08019660
 8007608:	08019534 	.word	0x08019534
 800760c:	0801aef8 	.word	0x0801aef8
 8007610:	0801ae40 	.word	0x0801ae40
 8007614:	20006958 	.word	0x20006958

08007618 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8007618:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800761a:	1e45      	subs	r5, r0, #1
 800761c:	00ec      	lsls	r4, r5, #3
 800761e:	1b63      	subs	r3, r4, r5
 8007620:	00d8      	lsls	r0, r3, #3
 8007622:	4e05      	ldr	r6, [pc, #20]	; (8007638 <StopMsgDMA+0x20>)
 8007624:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007626:	f009 fed8 	bl	80113da <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800762a:	1b64      	subs	r4, r4, r5
 800762c:	00e3      	lsls	r3, r4, #3
 800762e:	599b      	ldr	r3, [r3, r6]
 8007630:	2200      	movs	r2, #0
 8007632:	605a      	str	r2, [r3, #4]
}
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	200017ac 	.word	0x200017ac

0800763c <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 800763c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800763e:	1e44      	subs	r4, r0, #1
 8007640:	00e5      	lsls	r5, r4, #3
 8007642:	1b2b      	subs	r3, r5, r4
 8007644:	00d8      	lsls	r0, r3, #3
 8007646:	4e07      	ldr	r6, [pc, #28]	; (8007664 <StopStreamDMA+0x28>)
 8007648:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800764a:	f009 fec6 	bl	80113da <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800764e:	1b2d      	subs	r5, r5, r4
 8007650:	00eb      	lsls	r3, r5, #3
 8007652:	599a      	ldr	r2, [r3, r6]
 8007654:	2300      	movs	r3, #0
 8007656:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8007658:	00a4      	lsls	r4, r4, #2
 800765a:	4a03      	ldr	r2, [pc, #12]	; (8007668 <StopStreamDMA+0x2c>)
 800765c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800765e:	4a03      	ldr	r2, [pc, #12]	; (800766c <StopStreamDMA+0x30>)
 8007660:	50a3      	str	r3, [r4, r2]

}
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	200019a4 	.word	0x200019a4
 8007668:	200010d8 	.word	0x200010d8
 800766c:	20001100 	.word	0x20001100

08007670 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007670:	b510      	push	{r4, lr}
 8007672:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007674:	f7ff ffd0 	bl	8007618 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8007678:	3c01      	subs	r4, #1
 800767a:	00e3      	lsls	r3, r4, #3
 800767c:	1b19      	subs	r1, r3, r4
 800767e:	00ca      	lsls	r2, r1, #3
 8007680:	4903      	ldr	r1, [pc, #12]	; (8007690 <SwitchMsgDMAToStream+0x20>)
 8007682:	5851      	ldr	r1, [r2, r1]
 8007684:	4b03      	ldr	r3, [pc, #12]	; (8007694 <SwitchMsgDMAToStream+0x24>)
 8007686:	18d0      	adds	r0, r2, r3
 8007688:	f005 fb2c 	bl	800cce4 <DMA_STREAM_CH_Init>
}
 800768c:	bd10      	pop	{r4, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	200017ac 	.word	0x200017ac
 8007694:	200019a4 	.word	0x200019a4

08007698 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8007698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769a:	b083      	sub	sp, #12
 800769c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800769e:	f7ff ffcd 	bl	800763c <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 80076a2:	9401      	str	r4, [sp, #4]
 80076a4:	3c01      	subs	r4, #1
 80076a6:	00e7      	lsls	r7, r4, #3
 80076a8:	1b3b      	subs	r3, r7, r4
 80076aa:	00dd      	lsls	r5, r3, #3
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <SwitchStreamDMAToMsg+0x54>)
 80076ae:	18ed      	adds	r5, r5, r3
 80076b0:	4e0f      	ldr	r6, [pc, #60]	; (80076f0 <SwitchStreamDMAToMsg+0x58>)
 80076b2:	1b3a      	subs	r2, r7, r4
 80076b4:	00d3      	lsls	r3, r2, #3
 80076b6:	5999      	ldr	r1, [r3, r6]
 80076b8:	0028      	movs	r0, r5
 80076ba:	f005 fa9d 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 80076be:	1b3a      	subs	r2, r7, r4
 80076c0:	00d3      	lsls	r3, r2, #3
 80076c2:	18f3      	adds	r3, r6, r3
 80076c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80076c6:	f003 fecb 	bl	800b460 <GetPort>
 80076ca:	2300      	movs	r3, #0
 80076cc:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <SwitchStreamDMAToMsg+0x5c>)
 80076ce:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 80076d0:	1b3f      	subs	r7, r7, r4
 80076d2:	00fa      	lsls	r2, r7, #3
 80076d4:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port-1] = 0;
 80076d6:	00a4      	lsls	r4, r4, #2
 80076d8:	4a07      	ldr	r2, [pc, #28]	; (80076f8 <SwitchStreamDMAToMsg+0x60>)
 80076da:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 80076dc:	9801      	ldr	r0, [sp, #4]
 80076de:	f007 faa1 	bl	800ec24 <GetUart>
 80076e2:	0029      	movs	r1, r5
 80076e4:	f005 fff8 	bl	800d6d8 <DMA_MSG_RX_Setup>
		
}
 80076e8:	b003      	add	sp, #12
 80076ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ec:	200017ac 	.word	0x200017ac
 80076f0:	200019a4 	.word	0x200019a4
 80076f4:	20000db0 	.word	0x20000db0
 80076f8:	200010ec 	.word	0x200010ec

080076fc <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	0005      	movs	r5, r0
 8007700:	000e      	movs	r6, r1
 8007702:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8007704:	f003 feac 	bl	800b460 <GetPort>
 8007708:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <StartDMAstream+0x48>)
 800770c:	5c1b      	ldrb	r3, [r3, r0]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d901      	bls.n	8007716 <StartDMAstream+0x1a>
 8007712:	2b03      	cmp	r3, #3
 8007714:	d113      	bne.n	800773e <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 8007716:	0020      	movs	r0, r4
 8007718:	f7ff ffaa 	bl	8007670 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 800771c:	1e63      	subs	r3, r4, #1
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4a09      	ldr	r2, [pc, #36]	; (8007748 <StartDMAstream+0x4c>)
 8007722:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8007724:	4a07      	ldr	r2, [pc, #28]	; (8007744 <StartDMAstream+0x48>)
 8007726:	2102      	movs	r1, #2
 8007728:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 800772a:	4a08      	ldr	r2, [pc, #32]	; (800774c <StartDMAstream+0x50>)
 800772c:	2100      	movs	r1, #0
 800772e:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007730:	003a      	movs	r2, r7
 8007732:	0031      	movs	r1, r6
 8007734:	0028      	movs	r0, r5
 8007736:	f006 f82d 	bl	800d794 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800773a:	2000      	movs	r0, #0
}
 800773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800773e:	2017      	movs	r0, #23
 8007740:	e7fc      	b.n	800773c <StartDMAstream+0x40>
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	20000db0 	.word	0x20000db0
 8007748:	200010ec 	.word	0x200010ec
 800774c:	200010d8 	.word	0x200010d8

08007750 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007754:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <DMA_IRQHandler+0x54>)
 8007756:	5c1b      	ldrb	r3, [r3, r0]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d008      	beq.n	800776e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800775c:	3c01      	subs	r4, #1
 800775e:	00e3      	lsls	r3, r4, #3
 8007760:	1b1c      	subs	r4, r3, r4
 8007762:	00e0      	lsls	r0, r4, #3
 8007764:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <DMA_IRQHandler+0x58>)
 8007766:	18c0      	adds	r0, r0, r3
 8007768:	f009 fe60 	bl	801142c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800776c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800776e:	1e45      	subs	r5, r0, #1
 8007770:	00eb      	lsls	r3, r5, #3
 8007772:	1b5b      	subs	r3, r3, r5
 8007774:	00d8      	lsls	r0, r3, #3
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <DMA_IRQHandler+0x5c>)
 8007778:	18c0      	adds	r0, r0, r3
 800777a:	f009 fe57 	bl	801142c <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800777e:	00aa      	lsls	r2, r5, #2
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <DMA_IRQHandler+0x60>)
 8007782:	58d3      	ldr	r3, [r2, r3]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <DMA_IRQHandler+0x42>
			++dmaStreamCount[port-1];
 8007788:	490a      	ldr	r1, [pc, #40]	; (80077b4 <DMA_IRQHandler+0x64>)
 800778a:	0010      	movs	r0, r2
 800778c:	5852      	ldr	r2, [r2, r1]
 800778e:	3201      	adds	r2, #1
 8007790:	5042      	str	r2, [r0, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8007792:	00ad      	lsls	r5, r5, #2
 8007794:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <DMA_IRQHandler+0x64>)
 8007796:	58aa      	ldr	r2, [r5, r2]
 8007798:	4293      	cmp	r3, r2
 800779a:	d8e7      	bhi.n	800776c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800779c:	0020      	movs	r0, r4
 800779e:	f7ff ff4d 	bl	800763c <StopStreamDMA>
}
 80077a2:	e7e3      	b.n	800776c <DMA_IRQHandler+0x1c>
 80077a4:	20000db0 	.word	0x20000db0
 80077a8:	200017ac 	.word	0x200017ac
 80077ac:	200019a4 	.word	0x200019a4
 80077b0:	20001100 	.word	0x20001100
 80077b4:	200010d8 	.word	0x200010d8

080077b8 <ResetUartORE>:
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80077b8:	4b08      	ldr	r3, [pc, #32]	; (80077dc <ResetUartORE+0x24>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	2308      	movs	r3, #8
 80077be:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <ResetUartORE+0x28>)
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80077c6:	4a07      	ldr	r2, [pc, #28]	; (80077e4 <ResetUartORE+0x2c>)
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <ResetUartORE+0x30>)
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80077d2:	4a06      	ldr	r2, [pc, #24]	; (80077ec <ResetUartORE+0x34>)
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	6213      	str	r3, [r2, #32]
#endif
}
 80077d8:	4770      	bx	lr
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	20006cd4 	.word	0x20006cd4
 80077e0:	20006a94 	.word	0x20006a94
 80077e4:	20006c60 	.word	0x20006c60
 80077e8:	20006b08 	.word	0x20006b08
 80077ec:	20006bf0 	.word	0x20006bf0

080077f0 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatusA = 6, PageStatusB = 6;

  /* Get PageA actual status */
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <EE_FindValidPage+0x50>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3

  /* Get PageB actual status */
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <EE_FindValidPage+0x54>)
 80077f8:	8812      	ldrh	r2, [r2, #0]
 80077fa:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d00f      	beq.n	8007820 <EE_FindValidPage+0x30>
 8007800:	2801      	cmp	r0, #1
 8007802:	d113      	bne.n	800782c <EE_FindValidPage+0x3c>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatusB == VALID_PAGE)
 8007804:	2a00      	cmp	r2, #0
 8007806:	d104      	bne.n	8007812 <EE_FindValidPage+0x22>
      {
        /* PageA receiving data */
        if (PageStatusA == RECEIVE_DATA)
 8007808:	490f      	ldr	r1, [pc, #60]	; (8007848 <EE_FindValidPage+0x58>)
 800780a:	428b      	cmp	r3, r1
 800780c:	d111      	bne.n	8007832 <EE_FindValidPage+0x42>
        {
          return PAGEA;         /* PageA valid */
 800780e:	0013      	movs	r3, r2
 8007810:	e00d      	b.n	800782e <EE_FindValidPage+0x3e>
        else
        {
          return PAGEB;         /* PageB valid */
        }
      }
      else if (PageStatusA == VALID_PAGE)
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <EE_FindValidPage+0x46>
      {
        /* PageB receiving data */
        if (PageStatusB == RECEIVE_DATA)
 8007816:	490c      	ldr	r1, [pc, #48]	; (8007848 <EE_FindValidPage+0x58>)
 8007818:	428a      	cmp	r2, r1
 800781a:	d108      	bne.n	800782e <EE_FindValidPage+0x3e>
        {
          return PAGEB;         /* PageB valid */
 800781c:	3302      	adds	r3, #2
 800781e:	e006      	b.n	800782e <EE_FindValidPage+0x3e>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatusA == VALID_PAGE)
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <EE_FindValidPage+0x3e>
      {
        return PAGEA;           /* PageA valid */
      }
      else if (PageStatusB == VALID_PAGE)
 8007824:	2a00      	cmp	r2, #0
 8007826:	d108      	bne.n	800783a <EE_FindValidPage+0x4a>
      {
        return PAGEB;           /* PageB valid */
 8007828:	2302      	movs	r3, #2
 800782a:	e000      	b.n	800782e <EE_FindValidPage+0x3e>
      {
        return NO_VALID_PAGE ;  /* No valid Page */
      }

    default:
      return PAGEA;             /* PageA valid */
 800782c:	2300      	movs	r3, #0
  }
}
 800782e:	0018      	movs	r0, r3
 8007830:	4770      	bx	lr
          return PAGEB;         /* PageB valid */
 8007832:	2302      	movs	r3, #2
 8007834:	e7fb      	b.n	800782e <EE_FindValidPage+0x3e>
        return NO_VALID_PAGE;   /* No valid Page */
 8007836:	23ab      	movs	r3, #171	; 0xab
 8007838:	e7f9      	b.n	800782e <EE_FindValidPage+0x3e>
        return NO_VALID_PAGE ;  /* No valid Page */
 800783a:	23ab      	movs	r3, #171	; 0xab
 800783c:	e7f7      	b.n	800782e <EE_FindValidPage+0x3e>
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	0801e000 	.word	0x0801e000
 8007844:	0801f000 	.word	0x0801f000
 8007848:	0000eeee 	.word	0x0000eeee

0800784c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	0005      	movs	r5, r0
 8007850:	000e      	movs	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007852:	f00a fa37 	bl	8011cc4 <HAL_FLASH_Unlock>

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8007856:	2001      	movs	r0, #1
 8007858:	f7ff ffca 	bl	80077f0 <EE_FindValidPage>
 800785c:	0003      	movs	r3, r0

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800785e:	28ab      	cmp	r0, #171	; 0xab
 8007860:	d03d      	beq.n	80078de <EE_VerifyPageFullWriteVariable+0x92>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <EE_VerifyPageFullWriteVariable+0x98>)
 8007864:	18c4      	adds	r4, r0, r3
 8007866:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007868:	3002      	adds	r0, #2
 800786a:	02c0      	lsls	r0, r0, #11
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <EE_VerifyPageFullWriteVariable+0x9c>)
 800786e:	469c      	mov	ip, r3
 8007870:	4460      	add	r0, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8007872:	4284      	cmp	r4, r0
 8007874:	d230      	bcs.n	80078d8 <EE_VerifyPageFullWriteVariable+0x8c>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	d001      	beq.n	8007880 <EE_VerifyPageFullWriteVariable+0x34>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800787c:	3404      	adds	r4, #4
 800787e:	e7f8      	b.n	8007872 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8007880:	0032      	movs	r2, r6
 8007882:	2300      	movs	r3, #0
 8007884:	0021      	movs	r1, r4
 8007886:	2001      	movs	r0, #1
 8007888:	f00a fa68 	bl	8011d5c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800788c:	4817      	ldr	r0, [pc, #92]	; (80078ec <EE_VerifyPageFullWriteVariable+0xa0>)
 800788e:	f00a fa37 	bl	8011d00 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007892:	2800      	cmp	r0, #0
 8007894:	d003      	beq.n	800789e <EE_VerifyPageFullWriteVariable+0x52>
        return pFlash.ErrorCode;
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	b29b      	uxth	r3, r3
 800789c:	e01f      	b.n	80078de <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800789e:	4a15      	ldr	r2, [pc, #84]	; (80078f4 <EE_VerifyPageFullWriteVariable+0xa8>)
 80078a0:	6913      	ldr	r3, [r2, #16]
 80078a2:	2101      	movs	r1, #1
 80078a4:	438b      	bics	r3, r1
 80078a6:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80078a8:	1ca1      	adds	r1, r4, #2
 80078aa:	002a      	movs	r2, r5
 80078ac:	2300      	movs	r3, #0
 80078ae:	2001      	movs	r0, #1
 80078b0:	f00a fa54 	bl	8011d5c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078b4:	480d      	ldr	r0, [pc, #52]	; (80078ec <EE_VerifyPageFullWriteVariable+0xa0>)
 80078b6:	f00a fa23 	bl	8011d00 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d003      	beq.n	80078c6 <EE_VerifyPageFullWriteVariable+0x7a>
        return pFlash.ErrorCode;
 80078be:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <EE_VerifyPageFullWriteVariable+0xa4>)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	e00b      	b.n	80078de <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80078c6:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <EE_VerifyPageFullWriteVariable+0xa8>)
 80078c8:	6913      	ldr	r3, [r2, #16]
 80078ca:	2101      	movs	r1, #1
 80078cc:	438b      	bics	r3, r1
 80078ce:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <EE_VerifyPageFullWriteVariable+0xa4>)
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	e002      	b.n	80078de <EE_VerifyPageFullWriteVariable+0x92>
    }
  }
	
	HAL_FLASH_Lock();
 80078d8:	f00a fa08 	bl	8011cec <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80078dc:	2380      	movs	r3, #128	; 0x80
}
 80078de:	0018      	movs	r0, r3
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	0001003c 	.word	0x0001003c
 80078e8:	0801dffe 	.word	0x0801dffe
 80078ec:	0000c350 	.word	0x0000c350
 80078f0:	20006e50 	.word	0x20006e50
 80078f4:	40022000 	.word	0x40022000

080078f8 <EE_ReadVariable>:
{
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	0005      	movs	r5, r0
 80078fc:	000c      	movs	r4, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80078fe:	2000      	movs	r0, #0
 8007900:	f7ff ff76 	bl	80077f0 <EE_FindValidPage>
 8007904:	0003      	movs	r3, r0
  if (ValidPage == NO_VALID_PAGE)
 8007906:	28ab      	cmp	r0, #171	; 0xab
 8007908:	d016      	beq.n	8007938 <EE_ReadVariable+0x40>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <EE_ReadVariable+0x44>)
 800790c:	18c2      	adds	r2, r0, r3
 800790e:	02d2      	lsls	r2, r2, #11
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007910:	3002      	adds	r0, #2
 8007912:	02c0      	lsls	r0, r0, #11
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <EE_ReadVariable+0x48>)
 8007916:	469c      	mov	ip, r3
 8007918:	4460      	add	r0, ip
  while (Address > (PageStartAddress + 2))
 800791a:	1c93      	adds	r3, r2, #2
 800791c:	4283      	cmp	r3, r0
 800791e:	d20a      	bcs.n	8007936 <EE_ReadVariable+0x3e>
    AddressValue = (*(__IO uint16_t*)Address);
 8007920:	8803      	ldrh	r3, [r0, #0]
 8007922:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 8007924:	42ab      	cmp	r3, r5
 8007926:	d001      	beq.n	800792c <EE_ReadVariable+0x34>
      Address = Address - 4;
 8007928:	3804      	subs	r0, #4
 800792a:	e7f6      	b.n	800791a <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800792c:	3802      	subs	r0, #2
 800792e:	8803      	ldrh	r3, [r0, #0]
 8007930:	8023      	strh	r3, [r4, #0]
      ReadStatus = 0;
 8007932:	2300      	movs	r3, #0
      break;
 8007934:	e000      	b.n	8007938 <EE_ReadVariable+0x40>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007936:	2301      	movs	r3, #1
}
 8007938:	0018      	movs	r0, r3
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	0001003c 	.word	0x0001003c
 8007940:	0801dffe 	.word	0x0801dffe

08007944 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	0006      	movs	r6, r0
 8007948:	000c      	movs	r4, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 800794a:	f00a f9bb 	bl	8011cc4 <HAL_FLASH_Unlock>

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800794e:	2000      	movs	r0, #0
 8007950:	f7ff ff4e 	bl	80077f0 <EE_FindValidPage>

  if (ValidPage == PAGEB)       /* PageB valid */
 8007954:	2802      	cmp	r0, #2
 8007956:	d013      	beq.n	8007980 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGEA1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEB1_BASE_ADDRESS;
  }
  else if (ValidPage == PAGEA)  /* PageA valid */
 8007958:	2800      	cmp	r0, #0
 800795a:	d000      	beq.n	800795e <EE_PageTransfer+0x1a>
 800795c:	e06d      	b.n	8007a3a <EE_PageTransfer+0xf6>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGEB1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 800795e:	4f38      	ldr	r7, [pc, #224]	; (8007a40 <EE_PageTransfer+0xfc>)
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007960:	4d38      	ldr	r5, [pc, #224]	; (8007a44 <EE_PageTransfer+0x100>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007962:	4a39      	ldr	r2, [pc, #228]	; (8007a48 <EE_PageTransfer+0x104>)
 8007964:	2300      	movs	r3, #0
 8007966:	0029      	movs	r1, r5
 8007968:	2001      	movs	r0, #1
 800796a:	f00a f9f7 	bl	8011d5c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800796e:	4837      	ldr	r0, [pc, #220]	; (8007a4c <EE_PageTransfer+0x108>)
 8007970:	f00a f9c6 	bl	8011d00 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007974:	2800      	cmp	r0, #0
 8007976:	d006      	beq.n	8007986 <EE_PageTransfer+0x42>
  {
    return pFlash.ErrorCode;
 8007978:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <EE_PageTransfer+0x10c>)
 800797a:	69d8      	ldr	r0, [r3, #28]
 800797c:	b280      	uxth	r0, r0
			
	HAL_FLASH_Lock();
	
  /* Return last operation flash status */
  return FlashStatus;
}
 800797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007980:	4f30      	ldr	r7, [pc, #192]	; (8007a44 <EE_PageTransfer+0x100>)
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007982:	4d2f      	ldr	r5, [pc, #188]	; (8007a40 <EE_PageTransfer+0xfc>)
 8007984:	e7ed      	b.n	8007962 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007986:	4a33      	ldr	r2, [pc, #204]	; (8007a54 <EE_PageTransfer+0x110>)
 8007988:	6913      	ldr	r3, [r2, #16]
 800798a:	2101      	movs	r1, #1
 800798c:	438b      	bics	r3, r1
 800798e:	6113      	str	r3, [r2, #16]
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007990:	0021      	movs	r1, r4
 8007992:	0030      	movs	r0, r6
 8007994:	f7ff ff5a 	bl	800784c <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 8007998:	2800      	cmp	r0, #0
 800799a:	d1f0      	bne.n	800797e <EE_PageTransfer+0x3a>
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800799c:	2401      	movs	r4, #1
 800799e:	e001      	b.n	80079a4 <EE_PageTransfer+0x60>
 80079a0:	3401      	adds	r4, #1
 80079a2:	b2a4      	uxth	r4, r4
 80079a4:	2380      	movs	r3, #128	; 0x80
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d80f      	bhi.n	80079cc <EE_PageTransfer+0x88>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 80079ac:	42b4      	cmp	r4, r6
 80079ae:	d0f7      	beq.n	80079a0 <EE_PageTransfer+0x5c>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80079b0:	4929      	ldr	r1, [pc, #164]	; (8007a58 <EE_PageTransfer+0x114>)
 80079b2:	0020      	movs	r0, r4
 80079b4:	f7ff ffa0 	bl	80078f8 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 80079b8:	2801      	cmp	r0, #1
 80079ba:	d0f1      	beq.n	80079a0 <EE_PageTransfer+0x5c>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <EE_PageTransfer+0x114>)
 80079be:	8819      	ldrh	r1, [r3, #0]
 80079c0:	0020      	movs	r0, r4
 80079c2:	f7ff ff43 	bl	800784c <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0ea      	beq.n	80079a0 <EE_PageTransfer+0x5c>
 80079ca:	e7d8      	b.n	800797e <EE_PageTransfer+0x3a>
  FLASH_PageErase(OldPageAddress);
 80079cc:	0038      	movs	r0, r7
 80079ce:	f00a fa27 	bl	8011e20 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079d2:	481e      	ldr	r0, [pc, #120]	; (8007a4c <EE_PageTransfer+0x108>)
 80079d4:	f00a f994 	bl	8011d00 <FLASH_WaitForLastOperation>
  if (FlashStatus != HAL_OK)
 80079d8:	2800      	cmp	r0, #0
 80079da:	d003      	beq.n	80079e4 <EE_PageTransfer+0xa0>
    return pFlash.ErrorCode;
 80079dc:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <EE_PageTransfer+0x10c>)
 80079de:	69d8      	ldr	r0, [r3, #28]
 80079e0:	b280      	uxth	r0, r0
 80079e2:	e7cc      	b.n	800797e <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	18f8      	adds	r0, r7, r3
 80079ea:	f00a fa19 	bl	8011e20 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079ee:	4817      	ldr	r0, [pc, #92]	; (8007a4c <EE_PageTransfer+0x108>)
 80079f0:	f00a f986 	bl	8011d00 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d003      	beq.n	8007a00 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <EE_PageTransfer+0x10c>)
 80079fa:	69d8      	ldr	r0, [r3, #28]
 80079fc:	b280      	uxth	r0, r0
 80079fe:	e7be      	b.n	800797e <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007a00:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <EE_PageTransfer+0x110>)
 8007a02:	6913      	ldr	r3, [r2, #16]
 8007a04:	2102      	movs	r1, #2
 8007a06:	438b      	bics	r3, r1
 8007a08:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	0029      	movs	r1, r5
 8007a10:	2001      	movs	r0, #1
 8007a12:	f00a f9a3 	bl	8011d5c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a16:	480d      	ldr	r0, [pc, #52]	; (8007a4c <EE_PageTransfer+0x108>)
 8007a18:	f00a f972 	bl	8011d00 <FLASH_WaitForLastOperation>
 8007a1c:	1e04      	subs	r4, r0, #0
  if (FlashStatus != HAL_OK)
 8007a1e:	d003      	beq.n	8007a28 <EE_PageTransfer+0xe4>
    return pFlash.ErrorCode;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <EE_PageTransfer+0x10c>)
 8007a22:	69d8      	ldr	r0, [r3, #28]
 8007a24:	b280      	uxth	r0, r0
 8007a26:	e7aa      	b.n	800797e <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a28:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <EE_PageTransfer+0x110>)
 8007a2a:	6913      	ldr	r3, [r2, #16]
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	438b      	bics	r3, r1
 8007a30:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007a32:	f00a f95b 	bl	8011cec <HAL_FLASH_Lock>
  return FlashStatus;
 8007a36:	b2a0      	uxth	r0, r4
 8007a38:	e7a1      	b.n	800797e <EE_PageTransfer+0x3a>
    return NO_VALID_PAGE;       /* No valid Page */
 8007a3a:	20ab      	movs	r0, #171	; 0xab
 8007a3c:	e79f      	b.n	800797e <EE_PageTransfer+0x3a>
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	0801e000 	.word	0x0801e000
 8007a44:	0801f000 	.word	0x0801f000
 8007a48:	0000eeee 	.word	0x0000eeee
 8007a4c:	0000c350 	.word	0x0000c350
 8007a50:	20006e50 	.word	0x20006e50
 8007a54:	40022000 	.word	0x40022000
 8007a58:	20001114 	.word	0x20001114

08007a5c <EE_WriteVariable>:
{
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	0005      	movs	r5, r0
 8007a60:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007a62:	f00a f92f 	bl	8011cc4 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007a66:	0031      	movs	r1, r6
 8007a68:	0028      	movs	r0, r5
 8007a6a:	f7ff feef 	bl	800784c <EE_VerifyPageFullWriteVariable>
 8007a6e:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007a70:	2880      	cmp	r0, #128	; 0x80
 8007a72:	d003      	beq.n	8007a7c <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8007a74:	f00a f93a 	bl	8011cec <HAL_FLASH_Lock>
}
 8007a78:	0020      	movs	r0, r4
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 8007a7c:	0031      	movs	r1, r6
 8007a7e:	0028      	movs	r0, r5
 8007a80:	f7ff ff60 	bl	8007944 <EE_PageTransfer>
 8007a84:	0004      	movs	r4, r0
 8007a86:	e7f5      	b.n	8007a74 <EE_WriteVariable+0x18>

08007a88 <EE_Format>:
{
 8007a88:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007a8a:	f00a f91b 	bl	8011cc4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8007a8e:	4829      	ldr	r0, [pc, #164]	; (8007b34 <EE_Format+0xac>)
 8007a90:	f00a f9c6 	bl	8011e20 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a94:	4828      	ldr	r0, [pc, #160]	; (8007b38 <EE_Format+0xb0>)
 8007a96:	f00a f933 	bl	8011d00 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d003      	beq.n	8007aa6 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007a9e:	4b27      	ldr	r3, [pc, #156]	; (8007b3c <EE_Format+0xb4>)
 8007aa0:	69d8      	ldr	r0, [r3, #28]
 8007aa2:	b280      	uxth	r0, r0
}
 8007aa4:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007aa6:	4826      	ldr	r0, [pc, #152]	; (8007b40 <EE_Format+0xb8>)
 8007aa8:	f00a f9ba 	bl	8011e20 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007aac:	4822      	ldr	r0, [pc, #136]	; (8007b38 <EE_Format+0xb0>)
 8007aae:	f00a f927 	bl	8011d00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d003      	beq.n	8007abe <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <EE_Format+0xb4>)
 8007ab8:	69d8      	ldr	r0, [r3, #28]
 8007aba:	b280      	uxth	r0, r0
 8007abc:	e7f2      	b.n	8007aa4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <EE_Format+0xbc>)
 8007ac0:	6913      	ldr	r3, [r2, #16]
 8007ac2:	2102      	movs	r1, #2
 8007ac4:	438b      	bics	r3, r1
 8007ac6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2300      	movs	r3, #0
 8007acc:	4919      	ldr	r1, [pc, #100]	; (8007b34 <EE_Format+0xac>)
 8007ace:	2001      	movs	r0, #1
 8007ad0:	f00a f944 	bl	8011d5c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ad4:	4818      	ldr	r0, [pc, #96]	; (8007b38 <EE_Format+0xb0>)
 8007ad6:	f00a f913 	bl	8011d00 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d003      	beq.n	8007ae6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007ade:	4b17      	ldr	r3, [pc, #92]	; (8007b3c <EE_Format+0xb4>)
 8007ae0:	69d8      	ldr	r0, [r3, #28]
 8007ae2:	b280      	uxth	r0, r0
 8007ae4:	e7de      	b.n	8007aa4 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007ae6:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <EE_Format+0xbc>)
 8007ae8:	6913      	ldr	r3, [r2, #16]
 8007aea:	2101      	movs	r1, #1
 8007aec:	438b      	bics	r3, r1
 8007aee:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007af0:	4815      	ldr	r0, [pc, #84]	; (8007b48 <EE_Format+0xc0>)
 8007af2:	f00a f995 	bl	8011e20 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007af6:	4810      	ldr	r0, [pc, #64]	; (8007b38 <EE_Format+0xb0>)
 8007af8:	f00a f902 	bl	8011d00 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d003      	beq.n	8007b08 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <EE_Format+0xb4>)
 8007b02:	69d8      	ldr	r0, [r3, #28]
 8007b04:	b280      	uxth	r0, r0
 8007b06:	e7cd      	b.n	8007aa4 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b08:	4810      	ldr	r0, [pc, #64]	; (8007b4c <EE_Format+0xc4>)
 8007b0a:	f00a f989 	bl	8011e20 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b0e:	480a      	ldr	r0, [pc, #40]	; (8007b38 <EE_Format+0xb0>)
 8007b10:	f00a f8f6 	bl	8011d00 <FLASH_WaitForLastOperation>
 8007b14:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK)
 8007b16:	d003      	beq.n	8007b20 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <EE_Format+0xb4>)
 8007b1a:	69d8      	ldr	r0, [r3, #28]
 8007b1c:	b280      	uxth	r0, r0
 8007b1e:	e7c1      	b.n	8007aa4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <EE_Format+0xbc>)
 8007b22:	6913      	ldr	r3, [r2, #16]
 8007b24:	2101      	movs	r1, #1
 8007b26:	438b      	bics	r3, r1
 8007b28:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007b2a:	f00a f8df 	bl	8011cec <HAL_FLASH_Lock>
  return FlashStatus;
 8007b2e:	b2a0      	uxth	r0, r4
 8007b30:	e7b8      	b.n	8007aa4 <EE_Format+0x1c>
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	0801e000 	.word	0x0801e000
 8007b38:	0000c350 	.word	0x0000c350
 8007b3c:	20006e50 	.word	0x20006e50
 8007b40:	0801e800 	.word	0x0801e800
 8007b44:	40022000 	.word	0x40022000
 8007b48:	0801f000 	.word	0x0801f000
 8007b4c:	0801f800 	.word	0x0801f800

08007b50 <EE_Init>:
{
 8007b50:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007b52:	f00a f8b7 	bl	8011cc4 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007b56:	4bbc      	ldr	r3, [pc, #752]	; (8007e48 <EE_Init+0x2f8>)
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007b5c:	4abb      	ldr	r2, [pc, #748]	; (8007e4c <EE_Init+0x2fc>)
 8007b5e:	8812      	ldrh	r2, [r2, #0]
 8007b60:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007b62:	49bb      	ldr	r1, [pc, #748]	; (8007e50 <EE_Init+0x300>)
 8007b64:	428b      	cmp	r3, r1
 8007b66:	d100      	bne.n	8007b6a <EE_Init+0x1a>
 8007b68:	e072      	b.n	8007c50 <EE_Init+0x100>
 8007b6a:	49ba      	ldr	r1, [pc, #744]	; (8007e54 <EE_Init+0x304>)
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	d00f      	beq.n	8007b90 <EE_Init+0x40>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d100      	bne.n	8007b76 <EE_Init+0x26>
 8007b74:	e106      	b.n	8007d84 <EE_Init+0x234>
      FlashStatus = EE_Format();
 8007b76:	f7ff ff87 	bl	8007a88 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b7a:	48b7      	ldr	r0, [pc, #732]	; (8007e58 <EE_Init+0x308>)
 8007b7c:	f00a f8c0 	bl	8011d00 <FLASH_WaitForLastOperation>
 8007b80:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	d102      	bne.n	8007b8c <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8007b86:	f00a f8b1 	bl	8011cec <HAL_FLASH_Lock>
  return HAL_OK;
 8007b8a:	2500      	movs	r5, #0
}
 8007b8c:	0028      	movs	r0, r5
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d00d      	beq.n	8007bb0 <EE_Init+0x60>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007b94:	4bae      	ldr	r3, [pc, #696]	; (8007e50 <EE_Init+0x300>)
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d028      	beq.n	8007bec <EE_Init+0x9c>
        FlashStatus = EE_Format();
 8007b9a:	f7ff ff75 	bl	8007a88 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b9e:	48ae      	ldr	r0, [pc, #696]	; (8007e58 <EE_Init+0x308>)
 8007ba0:	f00a f8ae 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d0ee      	beq.n	8007b86 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8007ba8:	4bac      	ldr	r3, [pc, #688]	; (8007e5c <EE_Init+0x30c>)
 8007baa:	69dd      	ldr	r5, [r3, #28]
 8007bac:	b2ad      	uxth	r5, r5
 8007bae:	e7ed      	b.n	8007b8c <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007bb0:	48a5      	ldr	r0, [pc, #660]	; (8007e48 <EE_Init+0x2f8>)
 8007bb2:	f00a f935 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bb6:	48a8      	ldr	r0, [pc, #672]	; (8007e58 <EE_Init+0x308>)
 8007bb8:	f00a f8a2 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d003      	beq.n	8007bc8 <EE_Init+0x78>
          return pFlash.ErrorCode;
 8007bc0:	4ba6      	ldr	r3, [pc, #664]	; (8007e5c <EE_Init+0x30c>)
 8007bc2:	69dd      	ldr	r5, [r3, #28]
 8007bc4:	b2ad      	uxth	r5, r5
 8007bc6:	e7e1      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007bc8:	48a5      	ldr	r0, [pc, #660]	; (8007e60 <EE_Init+0x310>)
 8007bca:	f00a f929 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bce:	48a2      	ldr	r0, [pc, #648]	; (8007e58 <EE_Init+0x308>)
 8007bd0:	f00a f896 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d105      	bne.n	8007be4 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007bd8:	4aa2      	ldr	r2, [pc, #648]	; (8007e64 <EE_Init+0x314>)
 8007bda:	6913      	ldr	r3, [r2, #16]
 8007bdc:	2102      	movs	r1, #2
 8007bde:	438b      	bics	r3, r1
 8007be0:	6113      	str	r3, [r2, #16]
 8007be2:	e7d0      	b.n	8007b86 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007be4:	4b9d      	ldr	r3, [pc, #628]	; (8007e5c <EE_Init+0x30c>)
 8007be6:	69dd      	ldr	r5, [r3, #28]
 8007be8:	b2ad      	uxth	r5, r5
 8007bea:	e7cf      	b.n	8007b8c <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007bec:	4896      	ldr	r0, [pc, #600]	; (8007e48 <EE_Init+0x2f8>)
 8007bee:	f00a f917 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bf2:	4899      	ldr	r0, [pc, #612]	; (8007e58 <EE_Init+0x308>)
 8007bf4:	f00a f884 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d003      	beq.n	8007c04 <EE_Init+0xb4>
          return pFlash.ErrorCode;
 8007bfc:	4b97      	ldr	r3, [pc, #604]	; (8007e5c <EE_Init+0x30c>)
 8007bfe:	69dd      	ldr	r5, [r3, #28]
 8007c00:	b2ad      	uxth	r5, r5
 8007c02:	e7c3      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c04:	4896      	ldr	r0, [pc, #600]	; (8007e60 <EE_Init+0x310>)
 8007c06:	f00a f90b 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c0a:	4893      	ldr	r0, [pc, #588]	; (8007e58 <EE_Init+0x308>)
 8007c0c:	f00a f878 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d003      	beq.n	8007c1c <EE_Init+0xcc>
						return pFlash.ErrorCode;
 8007c14:	4b91      	ldr	r3, [pc, #580]	; (8007e5c <EE_Init+0x30c>)
 8007c16:	69dd      	ldr	r5, [r3, #28]
 8007c18:	b2ad      	uxth	r5, r5
 8007c1a:	e7b7      	b.n	8007b8c <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c1c:	4a91      	ldr	r2, [pc, #580]	; (8007e64 <EE_Init+0x314>)
 8007c1e:	6913      	ldr	r3, [r2, #16]
 8007c20:	2102      	movs	r1, #2
 8007c22:	438b      	bics	r3, r1
 8007c24:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007c26:	2200      	movs	r2, #0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4988      	ldr	r1, [pc, #544]	; (8007e4c <EE_Init+0x2fc>)
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f00a f895 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c32:	4889      	ldr	r0, [pc, #548]	; (8007e58 <EE_Init+0x308>)
 8007c34:	f00a f864 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d105      	bne.n	8007c48 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c3c:	4a89      	ldr	r2, [pc, #548]	; (8007e64 <EE_Init+0x314>)
 8007c3e:	6913      	ldr	r3, [r2, #16]
 8007c40:	2101      	movs	r1, #1
 8007c42:	438b      	bics	r3, r1
 8007c44:	6113      	str	r3, [r2, #16]
 8007c46:	e79e      	b.n	8007b86 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8007c48:	4b84      	ldr	r3, [pc, #528]	; (8007e5c <EE_Init+0x30c>)
 8007c4a:	69dd      	ldr	r5, [r3, #28]
 8007c4c:	b2ad      	uxth	r5, r5
 8007c4e:	e79d      	b.n	8007b8c <EE_Init+0x3c>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	d02f      	beq.n	8007cb4 <EE_Init+0x164>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007c54:	4b7f      	ldr	r3, [pc, #508]	; (8007e54 <EE_Init+0x304>)
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d062      	beq.n	8007d20 <EE_Init+0x1d0>
        FlashStatus = EE_Format();
 8007c5a:	f7ff ff15 	bl	8007a88 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c5e:	487e      	ldr	r0, [pc, #504]	; (8007e58 <EE_Init+0x308>)
 8007c60:	f00a f84e 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d100      	bne.n	8007c6a <EE_Init+0x11a>
 8007c68:	e78d      	b.n	8007b86 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8007c6a:	4b7c      	ldr	r3, [pc, #496]	; (8007e5c <EE_Init+0x30c>)
 8007c6c:	69dd      	ldr	r5, [r3, #28]
 8007c6e:	b2ad      	uxth	r5, r5
 8007c70:	e78c      	b.n	8007b8c <EE_Init+0x3c>
            x = VarIdx;
 8007c72:	b226      	sxth	r6, r4
 8007c74:	e00a      	b.n	8007c8c <EE_Init+0x13c>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007c76:	3401      	adds	r4, #1
 8007c78:	b2a4      	uxth	r4, r4
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	429c      	cmp	r4, r3
 8007c80:	d81c      	bhi.n	8007cbc <EE_Init+0x16c>
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007c82:	4b79      	ldr	r3, [pc, #484]	; (8007e68 <EE_Init+0x318>)
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d0f2      	beq.n	8007c72 <EE_Init+0x122>
          if (VarIdx != x)
 8007c8c:	42b4      	cmp	r4, r6
 8007c8e:	d0f2      	beq.n	8007c76 <EE_Init+0x126>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007c90:	4976      	ldr	r1, [pc, #472]	; (8007e6c <EE_Init+0x31c>)
 8007c92:	0020      	movs	r0, r4
 8007c94:	f7ff fe30 	bl	80078f8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007c98:	2801      	cmp	r0, #1
 8007c9a:	d0ec      	beq.n	8007c76 <EE_Init+0x126>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007c9c:	4b73      	ldr	r3, [pc, #460]	; (8007e6c <EE_Init+0x31c>)
 8007c9e:	8819      	ldrh	r1, [r3, #0]
 8007ca0:	0020      	movs	r0, r4
 8007ca2:	f7ff fdd3 	bl	800784c <EE_VerifyPageFullWriteVariable>
 8007ca6:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ca8:	486b      	ldr	r0, [pc, #428]	; (8007e58 <EE_Init+0x308>)
 8007caa:	f00a f829 	bl	8011d00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d0e1      	beq.n	8007c76 <EE_Init+0x126>
 8007cb2:	e76b      	b.n	8007b8c <EE_Init+0x3c>
  int16_t x = -1;
 8007cb4:	2601      	movs	r6, #1
 8007cb6:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007cb8:	2401      	movs	r4, #1
 8007cba:	e7de      	b.n	8007c7a <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4961      	ldr	r1, [pc, #388]	; (8007e48 <EE_Init+0x2f8>)
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	f00a f84a 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cc8:	4863      	ldr	r0, [pc, #396]	; (8007e58 <EE_Init+0x308>)
 8007cca:	f00a f819 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d003      	beq.n	8007cda <EE_Init+0x18a>
          return pFlash.ErrorCode;
 8007cd2:	4b62      	ldr	r3, [pc, #392]	; (8007e5c <EE_Init+0x30c>)
 8007cd4:	69dd      	ldr	r5, [r3, #28]
 8007cd6:	b2ad      	uxth	r5, r5
 8007cd8:	e758      	b.n	8007b8c <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007cda:	4a62      	ldr	r2, [pc, #392]	; (8007e64 <EE_Init+0x314>)
 8007cdc:	6913      	ldr	r3, [r2, #16]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	438b      	bics	r3, r1
 8007ce2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007ce4:	4859      	ldr	r0, [pc, #356]	; (8007e4c <EE_Init+0x2fc>)
 8007ce6:	f00a f89b 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cea:	485b      	ldr	r0, [pc, #364]	; (8007e58 <EE_Init+0x308>)
 8007cec:	f00a f808 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d003      	beq.n	8007cfc <EE_Init+0x1ac>
          return pFlash.ErrorCode;
 8007cf4:	4b59      	ldr	r3, [pc, #356]	; (8007e5c <EE_Init+0x30c>)
 8007cf6:	69dd      	ldr	r5, [r3, #28]
 8007cf8:	b2ad      	uxth	r5, r5
 8007cfa:	e747      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cfc:	485c      	ldr	r0, [pc, #368]	; (8007e70 <EE_Init+0x320>)
 8007cfe:	f00a f88f 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d02:	4855      	ldr	r0, [pc, #340]	; (8007e58 <EE_Init+0x308>)
 8007d04:	f009 fffc 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d105      	bne.n	8007d18 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d0c:	4a55      	ldr	r2, [pc, #340]	; (8007e64 <EE_Init+0x314>)
 8007d0e:	6913      	ldr	r3, [r2, #16]
 8007d10:	2102      	movs	r1, #2
 8007d12:	438b      	bics	r3, r1
 8007d14:	6113      	str	r3, [r2, #16]
 8007d16:	e736      	b.n	8007b86 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007d18:	4b50      	ldr	r3, [pc, #320]	; (8007e5c <EE_Init+0x30c>)
 8007d1a:	69dd      	ldr	r5, [r3, #28]
 8007d1c:	b2ad      	uxth	r5, r5
 8007d1e:	e735      	b.n	8007b8c <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007d20:	484a      	ldr	r0, [pc, #296]	; (8007e4c <EE_Init+0x2fc>)
 8007d22:	f00a f87d 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d26:	484c      	ldr	r0, [pc, #304]	; (8007e58 <EE_Init+0x308>)
 8007d28:	f009 ffea 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d003      	beq.n	8007d38 <EE_Init+0x1e8>
          return pFlash.ErrorCode;
 8007d30:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <EE_Init+0x30c>)
 8007d32:	69dd      	ldr	r5, [r3, #28]
 8007d34:	b2ad      	uxth	r5, r5
 8007d36:	e729      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007d38:	484d      	ldr	r0, [pc, #308]	; (8007e70 <EE_Init+0x320>)
 8007d3a:	f00a f871 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d3e:	4846      	ldr	r0, [pc, #280]	; (8007e58 <EE_Init+0x308>)
 8007d40:	f009 ffde 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d003      	beq.n	8007d50 <EE_Init+0x200>
						return pFlash.ErrorCode;
 8007d48:	4b44      	ldr	r3, [pc, #272]	; (8007e5c <EE_Init+0x30c>)
 8007d4a:	69dd      	ldr	r5, [r3, #28]
 8007d4c:	b2ad      	uxth	r5, r5
 8007d4e:	e71d      	b.n	8007b8c <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d50:	4a44      	ldr	r2, [pc, #272]	; (8007e64 <EE_Init+0x314>)
 8007d52:	6913      	ldr	r3, [r2, #16]
 8007d54:	2102      	movs	r1, #2
 8007d56:	438b      	bics	r3, r1
 8007d58:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	493a      	ldr	r1, [pc, #232]	; (8007e48 <EE_Init+0x2f8>)
 8007d60:	2001      	movs	r0, #1
 8007d62:	f009 fffb 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d66:	483c      	ldr	r0, [pc, #240]	; (8007e58 <EE_Init+0x308>)
 8007d68:	f009 ffca 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d003      	beq.n	8007d78 <EE_Init+0x228>
          return pFlash.ErrorCode;
 8007d70:	4b3a      	ldr	r3, [pc, #232]	; (8007e5c <EE_Init+0x30c>)
 8007d72:	69dd      	ldr	r5, [r3, #28]
 8007d74:	b2ad      	uxth	r5, r5
 8007d76:	e709      	b.n	8007b8c <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d78:	4a3a      	ldr	r2, [pc, #232]	; (8007e64 <EE_Init+0x314>)
 8007d7a:	6913      	ldr	r3, [r2, #16]
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	438b      	bics	r3, r1
 8007d80:	6113      	str	r3, [r2, #16]
 8007d82:	e700      	b.n	8007b86 <EE_Init+0x36>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d006      	beq.n	8007d96 <EE_Init+0x246>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007d88:	4b32      	ldr	r3, [pc, #200]	; (8007e54 <EE_Init+0x304>)
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d00d      	beq.n	8007daa <EE_Init+0x25a>
  int16_t x = -1;
 8007d8e:	2601      	movs	r6, #1
 8007d90:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007d92:	2401      	movs	r4, #1
 8007d94:	e02b      	b.n	8007dee <EE_Init+0x29e>
        FlashStatus = EE_Format();
 8007d96:	f7ff fe77 	bl	8007a88 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d9a:	482f      	ldr	r0, [pc, #188]	; (8007e58 <EE_Init+0x308>)
 8007d9c:	f009 ffb0 	bl	8011d00 <FLASH_WaitForLastOperation>
 8007da0:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	d100      	bne.n	8007da8 <EE_Init+0x258>
 8007da6:	e6ee      	b.n	8007b86 <EE_Init+0x36>
 8007da8:	e6f0      	b.n	8007b8c <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007daa:	4828      	ldr	r0, [pc, #160]	; (8007e4c <EE_Init+0x2fc>)
 8007dac:	f00a f838 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007db0:	4829      	ldr	r0, [pc, #164]	; (8007e58 <EE_Init+0x308>)
 8007db2:	f009 ffa5 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d003      	beq.n	8007dc2 <EE_Init+0x272>
          return pFlash.ErrorCode;
 8007dba:	4b28      	ldr	r3, [pc, #160]	; (8007e5c <EE_Init+0x30c>)
 8007dbc:	69dd      	ldr	r5, [r3, #28]
 8007dbe:	b2ad      	uxth	r5, r5
 8007dc0:	e6e4      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007dc2:	482b      	ldr	r0, [pc, #172]	; (8007e70 <EE_Init+0x320>)
 8007dc4:	f00a f82c 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dc8:	4823      	ldr	r0, [pc, #140]	; (8007e58 <EE_Init+0x308>)
 8007dca:	f009 ff99 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d105      	bne.n	8007dde <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007dd2:	4a24      	ldr	r2, [pc, #144]	; (8007e64 <EE_Init+0x314>)
 8007dd4:	6913      	ldr	r3, [r2, #16]
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	438b      	bics	r3, r1
 8007dda:	6113      	str	r3, [r2, #16]
 8007ddc:	e6d3      	b.n	8007b86 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <EE_Init+0x30c>)
 8007de0:	69dd      	ldr	r5, [r3, #28]
 8007de2:	b2ad      	uxth	r5, r5
 8007de4:	e6d2      	b.n	8007b8c <EE_Init+0x3c>
            x = VarIdx;
 8007de6:	b226      	sxth	r6, r4
 8007de8:	e00a      	b.n	8007e00 <EE_Init+0x2b0>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007dea:	3401      	adds	r4, #1
 8007dec:	b2a4      	uxth	r4, r4
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d818      	bhi.n	8007e28 <EE_Init+0x2d8>
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007df6:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <EE_Init+0x324>)
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d0f2      	beq.n	8007de6 <EE_Init+0x296>
          if (VarIdx != x)
 8007e00:	42b4      	cmp	r4, r6
 8007e02:	d0f2      	beq.n	8007dea <EE_Init+0x29a>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007e04:	4919      	ldr	r1, [pc, #100]	; (8007e6c <EE_Init+0x31c>)
 8007e06:	0020      	movs	r0, r4
 8007e08:	f7ff fd76 	bl	80078f8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007e0c:	2801      	cmp	r0, #1
 8007e0e:	d0ec      	beq.n	8007dea <EE_Init+0x29a>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007e10:	4b16      	ldr	r3, [pc, #88]	; (8007e6c <EE_Init+0x31c>)
 8007e12:	8819      	ldrh	r1, [r3, #0]
 8007e14:	0020      	movs	r0, r4
 8007e16:	f7ff fd19 	bl	800784c <EE_VerifyPageFullWriteVariable>
 8007e1a:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e1c:	480e      	ldr	r0, [pc, #56]	; (8007e58 <EE_Init+0x308>)
 8007e1e:	f009 ff6f 	bl	8011d00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d0e1      	beq.n	8007dea <EE_Init+0x29a>
 8007e26:	e6b1      	b.n	8007b8c <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4907      	ldr	r1, [pc, #28]	; (8007e4c <EE_Init+0x2fc>)
 8007e2e:	2001      	movs	r0, #1
 8007e30:	f009 ff94 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e34:	4808      	ldr	r0, [pc, #32]	; (8007e58 <EE_Init+0x308>)
 8007e36:	f009 ff63 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d01c      	beq.n	8007e78 <EE_Init+0x328>
          return pFlash.ErrorCode;
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <EE_Init+0x30c>)
 8007e40:	69dd      	ldr	r5, [r3, #28]
 8007e42:	b2ad      	uxth	r5, r5
 8007e44:	e6a2      	b.n	8007b8c <EE_Init+0x3c>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	0801e000 	.word	0x0801e000
 8007e4c:	0801f000 	.word	0x0801f000
 8007e50:	0000eeee 	.word	0x0000eeee
 8007e54:	0000ffff 	.word	0x0000ffff
 8007e58:	0000c350 	.word	0x0000c350
 8007e5c:	20006e50 	.word	0x20006e50
 8007e60:	0801e800 	.word	0x0801e800
 8007e64:	40022000 	.word	0x40022000
 8007e68:	0801e006 	.word	0x0801e006
 8007e6c:	20001114 	.word	0x20001114
 8007e70:	0801f800 	.word	0x0801f800
 8007e74:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e78:	4a11      	ldr	r2, [pc, #68]	; (8007ec0 <EE_Init+0x370>)
 8007e7a:	6913      	ldr	r3, [r2, #16]
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	438b      	bics	r3, r1
 8007e80:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007e82:	4810      	ldr	r0, [pc, #64]	; (8007ec4 <EE_Init+0x374>)
 8007e84:	f009 ffcc 	bl	8011e20 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e88:	480f      	ldr	r0, [pc, #60]	; (8007ec8 <EE_Init+0x378>)
 8007e8a:	f009 ff39 	bl	8011d00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d003      	beq.n	8007e9a <EE_Init+0x34a>
          return pFlash.ErrorCode;
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <EE_Init+0x37c>)
 8007e94:	69dd      	ldr	r5, [r3, #28]
 8007e96:	b2ad      	uxth	r5, r5
 8007e98:	e678      	b.n	8007b8c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007e9a:	480d      	ldr	r0, [pc, #52]	; (8007ed0 <EE_Init+0x380>)
 8007e9c:	f009 ffc0 	bl	8011e20 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ea0:	4809      	ldr	r0, [pc, #36]	; (8007ec8 <EE_Init+0x378>)
 8007ea2:	f009 ff2d 	bl	8011d00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d105      	bne.n	8007eb6 <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007eaa:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <EE_Init+0x370>)
 8007eac:	6913      	ldr	r3, [r2, #16]
 8007eae:	2102      	movs	r1, #2
 8007eb0:	438b      	bics	r3, r1
 8007eb2:	6113      	str	r3, [r2, #16]
 8007eb4:	e667      	b.n	8007b86 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <EE_Init+0x37c>)
 8007eb8:	69dd      	ldr	r5, [r3, #28]
 8007eba:	b2ad      	uxth	r5, r5
 8007ebc:	e666      	b.n	8007b8c <EE_Init+0x3c>
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	40022000 	.word	0x40022000
 8007ec4:	0801e000 	.word	0x0801e000
 8007ec8:	0000c350 	.word	0x0000c350
 8007ecc:	20006e50 	.word	0x20006e50
 8007ed0:	0801e800 	.word	0x0801e800

08007ed4 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	e020      	b.n	8007f1a <StartDefaultTask+0x46>
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
		{
			case IND_PING :
				RTOS_IND_blink(200);
 8007ed8:	2580      	movs	r5, #128	; 0x80
 8007eda:	012d      	lsls	r5, r5, #4
 8007edc:	2490      	movs	r4, #144	; 0x90
 8007ede:	05e4      	lsls	r4, r4, #23
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	0029      	movs	r1, r5
 8007ee4:	0020      	movs	r0, r4
 8007ee6:	f00a f8ce 	bl	8012086 <HAL_GPIO_WritePin>
 8007eea:	20c8      	movs	r0, #200	; 0xc8
 8007eec:	f006 ffec 	bl	800eec8 <osDelay>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	0029      	movs	r1, r5
 8007ef4:	0020      	movs	r0, r4
 8007ef6:	f00a f8c6 	bl	8012086 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007efa:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <StartDefaultTask+0xac>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007f00:	f000 f9d2 	bl	80082a8 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007f04:	f7fd fc3c 	bl	8005780 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007f08:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <StartDefaultTask+0xb0>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <StartDefaultTask+0x42>
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <StartDefaultTask+0xb4>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007f16:	f008 fec1 	bl	8010c9c <vPortYield>
		switch (indMode)
 8007f1a:	4b19      	ldr	r3, [pc, #100]	; (8007f80 <StartDefaultTask+0xac>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d004      	beq.n	8007f2c <StartDefaultTask+0x58>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d017      	beq.n	8007f56 <StartDefaultTask+0x82>
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d1ea      	bne.n	8007f00 <StartDefaultTask+0x2c>
 8007f2a:	e7d5      	b.n	8007ed8 <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 8007f2c:	2580      	movs	r5, #128	; 0x80
 8007f2e:	012d      	lsls	r5, r5, #4
 8007f30:	2490      	movs	r4, #144	; 0x90
 8007f32:	05e4      	lsls	r4, r4, #23
 8007f34:	2201      	movs	r2, #1
 8007f36:	0029      	movs	r1, r5
 8007f38:	0020      	movs	r0, r4
 8007f3a:	f00a f8a4 	bl	8012086 <HAL_GPIO_WritePin>
 8007f3e:	2064      	movs	r0, #100	; 0x64
 8007f40:	f006 ffc2 	bl	800eec8 <osDelay>
 8007f44:	2200      	movs	r2, #0
 8007f46:	0029      	movs	r1, r5
 8007f48:	0020      	movs	r0, r4
 8007f4a:	f00a f89c 	bl	8012086 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <StartDefaultTask+0xac>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
				break;
 8007f54:	e7d4      	b.n	8007f00 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 8007f56:	2580      	movs	r5, #128	; 0x80
 8007f58:	012d      	lsls	r5, r5, #4
 8007f5a:	2490      	movs	r4, #144	; 0x90
 8007f5c:	05e4      	lsls	r4, r4, #23
 8007f5e:	2201      	movs	r2, #1
 8007f60:	0029      	movs	r1, r5
 8007f62:	0020      	movs	r0, r4
 8007f64:	f00a f88f 	bl	8012086 <HAL_GPIO_WritePin>
 8007f68:	201e      	movs	r0, #30
 8007f6a:	f006 ffad 	bl	800eec8 <osDelay>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	0029      	movs	r1, r5
 8007f72:	0020      	movs	r0, r4
 8007f74:	f00a f887 	bl	8012086 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007f78:	4b01      	ldr	r3, [pc, #4]	; (8007f80 <StartDefaultTask+0xac>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
				break;
 8007f7e:	e7bf      	b.n	8007f00 <StartDefaultTask+0x2c>
 8007f80:	20000cb8 	.word	0x20000cb8
 8007f84:	2000117f 	.word	0x2000117f
 8007f88:	2000117e 	.word	0x2000117e

08007f8c <MX_FREERTOS_Init>:
{
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 8007f90:	25a0      	movs	r5, #160	; 0xa0
 8007f92:	006d      	lsls	r5, r5, #1
 8007f94:	2400      	movs	r4, #0
 8007f96:	9403      	str	r4, [sp, #12]
 8007f98:	9402      	str	r4, [sp, #8]
 8007f9a:	4b53      	ldr	r3, [pc, #332]	; (80080e8 <MX_FREERTOS_Init+0x15c>)
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2603      	movs	r6, #3
 8007fa0:	9600      	str	r6, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	002a      	movs	r2, r5
 8007fa6:	4951      	ldr	r1, [pc, #324]	; (80080ec <MX_FREERTOS_Init+0x160>)
 8007fa8:	4851      	ldr	r0, [pc, #324]	; (80080f0 <MX_FREERTOS_Init+0x164>)
 8007faa:	f007 fe21 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 8007fae:	9403      	str	r4, [sp, #12]
 8007fb0:	9402      	str	r4, [sp, #8]
 8007fb2:	4b50      	ldr	r3, [pc, #320]	; (80080f4 <MX_FREERTOS_Init+0x168>)
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	9600      	str	r6, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	002a      	movs	r2, r5
 8007fbc:	494e      	ldr	r1, [pc, #312]	; (80080f8 <MX_FREERTOS_Init+0x16c>)
 8007fbe:	484f      	ldr	r0, [pc, #316]	; (80080fc <MX_FREERTOS_Init+0x170>)
 8007fc0:	f007 fe16 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007fc4:	9403      	str	r4, [sp, #12]
 8007fc6:	9402      	str	r4, [sp, #8]
 8007fc8:	4b4d      	ldr	r3, [pc, #308]	; (8008100 <MX_FREERTOS_Init+0x174>)
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	9600      	str	r6, [sp, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	002a      	movs	r2, r5
 8007fd2:	494c      	ldr	r1, [pc, #304]	; (8008104 <MX_FREERTOS_Init+0x178>)
 8007fd4:	484c      	ldr	r0, [pc, #304]	; (8008108 <MX_FREERTOS_Init+0x17c>)
 8007fd6:	f007 fe0b 	bl	800fbf0 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007fda:	f7ff fa85 	bl	80074e8 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 8007fde:	9403      	str	r4, [sp, #12]
 8007fe0:	9402      	str	r4, [sp, #8]
 8007fe2:	4b4a      	ldr	r3, [pc, #296]	; (800810c <MX_FREERTOS_Init+0x180>)
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	9600      	str	r6, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	002a      	movs	r2, r5
 8007fec:	4948      	ldr	r1, [pc, #288]	; (8008110 <MX_FREERTOS_Init+0x184>)
 8007fee:	4849      	ldr	r0, [pc, #292]	; (8008114 <MX_FREERTOS_Init+0x188>)
 8007ff0:	f007 fdfe 	bl	800fbf0 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007ff4:	4d48      	ldr	r5, [pc, #288]	; (8008118 <MX_FREERTOS_Init+0x18c>)
 8007ff6:	9403      	str	r4, [sp, #12]
 8007ff8:	9402      	str	r4, [sp, #8]
 8007ffa:	4b48      	ldr	r3, [pc, #288]	; (800811c <MX_FREERTOS_Init+0x190>)
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	3601      	adds	r6, #1
 8008000:	9600      	str	r6, [sp, #0]
 8008002:	2301      	movs	r3, #1
 8008004:	22a0      	movs	r2, #160	; 0xa0
 8008006:	4946      	ldr	r1, [pc, #280]	; (8008120 <MX_FREERTOS_Init+0x194>)
 8008008:	0028      	movs	r0, r5
 800800a:	f007 fdf1 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800800e:	9403      	str	r4, [sp, #12]
 8008010:	9402      	str	r4, [sp, #8]
 8008012:	4b44      	ldr	r3, [pc, #272]	; (8008124 <MX_FREERTOS_Init+0x198>)
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	9600      	str	r6, [sp, #0]
 8008018:	2302      	movs	r3, #2
 800801a:	22a0      	movs	r2, #160	; 0xa0
 800801c:	4942      	ldr	r1, [pc, #264]	; (8008128 <MX_FREERTOS_Init+0x19c>)
 800801e:	0028      	movs	r0, r5
 8008020:	f007 fde6 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8008024:	9403      	str	r4, [sp, #12]
 8008026:	9402      	str	r4, [sp, #8]
 8008028:	4b40      	ldr	r3, [pc, #256]	; (800812c <MX_FREERTOS_Init+0x1a0>)
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	9600      	str	r6, [sp, #0]
 800802e:	2303      	movs	r3, #3
 8008030:	22a0      	movs	r2, #160	; 0xa0
 8008032:	493f      	ldr	r1, [pc, #252]	; (8008130 <MX_FREERTOS_Init+0x1a4>)
 8008034:	0028      	movs	r0, r5
 8008036:	f007 fddb 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800803a:	9403      	str	r4, [sp, #12]
 800803c:	9402      	str	r4, [sp, #8]
 800803e:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <MX_FREERTOS_Init+0x1a8>)
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	9600      	str	r6, [sp, #0]
 8008044:	2304      	movs	r3, #4
 8008046:	22a0      	movs	r2, #160	; 0xa0
 8008048:	493b      	ldr	r1, [pc, #236]	; (8008138 <MX_FREERTOS_Init+0x1ac>)
 800804a:	0028      	movs	r0, r5
 800804c:	f007 fdd0 	bl	800fbf0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8008050:	9403      	str	r4, [sp, #12]
 8008052:	9402      	str	r4, [sp, #8]
 8008054:	4b39      	ldr	r3, [pc, #228]	; (800813c <MX_FREERTOS_Init+0x1b0>)
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	9600      	str	r6, [sp, #0]
 800805a:	2305      	movs	r3, #5
 800805c:	22a0      	movs	r2, #160	; 0xa0
 800805e:	4938      	ldr	r1, [pc, #224]	; (8008140 <MX_FREERTOS_Init+0x1b4>)
 8008060:	0028      	movs	r0, r5
 8008062:	f007 fdc5 	bl	800fbf0 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8008066:	940d      	str	r4, [sp, #52]	; 0x34
 8008068:	2101      	movs	r1, #1
 800806a:	a80d      	add	r0, sp, #52	; 0x34
 800806c:	f006 ff34 	bl	800eed8 <osSemaphoreCreate>
 8008070:	4e34      	ldr	r6, [pc, #208]	; (8008144 <MX_FREERTOS_Init+0x1b8>)
 8008072:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8008074:	940c      	str	r4, [sp, #48]	; 0x30
 8008076:	2101      	movs	r1, #1
 8008078:	a80c      	add	r0, sp, #48	; 0x30
 800807a:	f006 ff2d 	bl	800eed8 <osSemaphoreCreate>
 800807e:	4d32      	ldr	r5, [pc, #200]	; (8008148 <MX_FREERTOS_Init+0x1bc>)
 8008080:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8008082:	940b      	str	r4, [sp, #44]	; 0x2c
 8008084:	2101      	movs	r1, #1
 8008086:	a80b      	add	r0, sp, #44	; 0x2c
 8008088:	f006 ff26 	bl	800eed8 <osSemaphoreCreate>
 800808c:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800808e:	940a      	str	r4, [sp, #40]	; 0x28
 8008090:	2101      	movs	r1, #1
 8008092:	a80a      	add	r0, sp, #40	; 0x28
 8008094:	f006 ff20 	bl	800eed8 <osSemaphoreCreate>
 8008098:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800809a:	9409      	str	r4, [sp, #36]	; 0x24
 800809c:	2101      	movs	r1, #1
 800809e:	a809      	add	r0, sp, #36	; 0x24
 80080a0:	f006 ff1a 	bl	800eed8 <osSemaphoreCreate>
 80080a4:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 80080a6:	9408      	str	r4, [sp, #32]
 80080a8:	2101      	movs	r1, #1
 80080aa:	a808      	add	r0, sp, #32
 80080ac:	f006 ff14 	bl	800eed8 <osSemaphoreCreate>
 80080b0:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 80080b2:	9407      	str	r4, [sp, #28]
 80080b4:	2101      	movs	r1, #1
 80080b6:	a807      	add	r0, sp, #28
 80080b8:	f006 ff0e 	bl	800eed8 <osSemaphoreCreate>
 80080bc:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 80080be:	9406      	str	r4, [sp, #24]
 80080c0:	2101      	movs	r1, #1
 80080c2:	a806      	add	r0, sp, #24
 80080c4:	f006 ff08 	bl	800eed8 <osSemaphoreCreate>
 80080c8:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80080ca:	9405      	str	r4, [sp, #20]
 80080cc:	2101      	movs	r1, #1
 80080ce:	a805      	add	r0, sp, #20
 80080d0:	f006 ff02 	bl	800eed8 <osSemaphoreCreate>
 80080d4:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80080d6:	9404      	str	r4, [sp, #16]
 80080d8:	2101      	movs	r1, #1
 80080da:	a804      	add	r0, sp, #16
 80080dc:	f006 fefc 	bl	800eed8 <osSemaphoreCreate>
 80080e0:	6168      	str	r0, [r5, #20]
}
 80080e2:	b00e      	add	sp, #56	; 0x38
 80080e4:	bd70      	pop	{r4, r5, r6, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	20001134 	.word	0x20001134
 80080ec:	0801af30 	.word	0x0801af30
 80080f0:	08007ed5 	.word	0x08007ed5
 80080f4:	20001118 	.word	0x20001118
 80080f8:	0801af3c 	.word	0x0801af3c
 80080fc:	08009479 	.word	0x08009479
 8008100:	20001130 	.word	0x20001130
 8008104:	0801af48 	.word	0x0801af48
 8008108:	08013acf 	.word	0x08013acf
 800810c:	2000113c 	.word	0x2000113c
 8008110:	0801af54 	.word	0x0801af54
 8008114:	08005429 	.word	0x08005429
 8008118:	080097fd 	.word	0x080097fd
 800811c:	2000111c 	.word	0x2000111c
 8008120:	0801af5c 	.word	0x0801af5c
 8008124:	20001120 	.word	0x20001120
 8008128:	0801af68 	.word	0x0801af68
 800812c:	20001124 	.word	0x20001124
 8008130:	0801af74 	.word	0x0801af74
 8008134:	20001128 	.word	0x20001128
 8008138:	0801af80 	.word	0x0801af80
 800813c:	2000112c 	.word	0x2000112c
 8008140:	0801af8c 	.word	0x0801af8c
 8008144:	20006a70 	.word	0x20006a70
 8008148:	20006a54 	.word	0x20006a54

0800814c <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800814c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	4904      	ldr	r1, [pc, #16]	; (8008164 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008154:	f7f7 fffc 	bl	8000150 <__udivsi3>
 8008158:	4b03      	ldr	r3, [pc, #12]	; (8008168 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800815a:	6018      	str	r0, [r3, #0]
}
 800815c:	bd10      	pop	{r4, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	20000110 	.word	0x20000110
 8008164:	00002710 	.word	0x00002710
 8008168:	20001138 	.word	0x20001138

0800816c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800816c:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <ulMainGetRunTimeCounterValue+0x40>)
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	21fa      	movs	r1, #250	; 0xfa
 8008174:	0089      	lsls	r1, r1, #2
 8008176:	f7f7 ffeb 	bl	8000150 <__udivsi3>
 800817a:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <ulMainGetRunTimeCounterValue+0x44>)
 800817e:	681c      	ldr	r4, [r3, #0]
 8008180:	1b2c      	subs	r4, r5, r4

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8008182:	f007 fe5f 	bl	800fe44 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <ulMainGetRunTimeCounterValue+0x48>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	015b      	lsls	r3, r3, #5
 800818c:	d503      	bpl.n	8008196 <ulMainGetRunTimeCounterValue+0x2a>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800818e:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <ulMainGetRunTimeCounterValue+0x44>)
 8008192:	681c      	ldr	r4, [r3, #0]
 8008194:	1b2c      	subs	r4, r5, r4
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8008196:	0083      	lsls	r3, r0, #2
 8008198:	1818      	adds	r0, r3, r0
 800819a:	0045      	lsls	r5, r0, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <ulMainGetRunTimeCounterValue+0x4c>)
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	0020      	movs	r0, r4
 80081a2:	f7f7 ffd5 	bl	8000150 <__udivsi3>
 80081a6:	1940      	adds	r0, r0, r5

	return ulReturn;
}
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	20000110 	.word	0x20000110
 80081b0:	e000e018 	.word	0xe000e018
 80081b4:	e000ed04 	.word	0xe000ed04
 80081b8:	20001138 	.word	0x20001138

080081bc <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80081bc:	4770      	bx	lr

080081be <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80081be:	4770      	bx	lr

080081c0 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 80081c0:	4770      	bx	lr

080081c2 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 80081c2:	4770      	bx	lr

080081c4 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 80081c4:	4770      	bx	lr

080081c6 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 80081c6:	4770      	bx	lr

080081c8 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 80081c8:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80081ca:	00c2      	lsls	r2, r0, #3
 80081cc:	1812      	adds	r2, r2, r0
 80081ce:	4b18      	ldr	r3, [pc, #96]	; (8008230 <CheckForTimedButtonPress+0x68>)
 80081d0:	189b      	adds	r3, r3, r2
 80081d2:	789a      	ldrb	r2, [r3, #2]
 80081d4:	78de      	ldrb	r6, [r3, #3]
 80081d6:	791c      	ldrb	r4, [r3, #4]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	1a89      	subs	r1, r1, r2
 80081dc:	0089      	lsls	r1, r1, #2
 80081de:	1889      	adds	r1, r1, r2
 80081e0:	00cd      	lsls	r5, r1, #3
 80081e2:	0172      	lsls	r2, r6, #5
 80081e4:	1b92      	subs	r2, r2, r6
 80081e6:	0092      	lsls	r2, r2, #2
 80081e8:	1992      	adds	r2, r2, r6
 80081ea:	00d3      	lsls	r3, r2, #3
 80081ec:	001a      	movs	r2, r3
 80081ee:	0163      	lsls	r3, r4, #5
 80081f0:	1b1b      	subs	r3, r3, r4
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	191b      	adds	r3, r3, r4
 80081f6:	00d9      	lsls	r1, r3, #3
	
	if (pressCounter[port] == t1)	
 80081f8:	0084      	lsls	r4, r0, #2
 80081fa:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <CheckForTimedButtonPress+0x6c>)
 80081fc:	58e3      	ldr	r3, [r4, r3]
 80081fe:	42ab      	cmp	r3, r5
 8008200:	d009      	beq.n	8008216 <CheckForTimedButtonPress+0x4e>
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <CheckForTimedButtonPress+0x5c>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008206:	428b      	cmp	r3, r1
 8008208:	d10a      	bne.n	8008220 <CheckForTimedButtonPress+0x58>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 800820a:	00c3      	lsls	r3, r0, #3
 800820c:	1818      	adds	r0, r3, r0
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <CheckForTimedButtonPress+0x68>)
 8008210:	220a      	movs	r2, #10
 8008212:	54c2      	strb	r2, [r0, r3]
 8008214:	e004      	b.n	8008220 <CheckForTimedButtonPress+0x58>
		button[port].state = PRESSED_FOR_X1_SEC;
 8008216:	00c3      	lsls	r3, r0, #3
 8008218:	1818      	adds	r0, r3, r0
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <CheckForTimedButtonPress+0x68>)
 800821c:	2209      	movs	r2, #9
 800821e:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008220:	2000      	movs	r0, #0
 8008222:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008224:	00c3      	lsls	r3, r0, #3
 8008226:	1818      	adds	r0, r3, r0
 8008228:	4b01      	ldr	r3, [pc, #4]	; (8008230 <CheckForTimedButtonPress+0x68>)
 800822a:	220a      	movs	r2, #10
 800822c:	54c2      	strb	r2, [r0, r3]
 800822e:	e7f7      	b.n	8008220 <CheckForTimedButtonPress+0x58>
 8008230:	20001140 	.word	0x20001140
 8008234:	20001180 	.word	0x20001180

08008238 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8008238:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800823a:	00c2      	lsls	r2, r0, #3
 800823c:	1812      	adds	r2, r2, r0
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <CheckForTimedButtonRelease+0x68>)
 8008240:	189b      	adds	r3, r3, r2
 8008242:	795a      	ldrb	r2, [r3, #5]
 8008244:	799e      	ldrb	r6, [r3, #6]
 8008246:	79dc      	ldrb	r4, [r3, #7]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	1a89      	subs	r1, r1, r2
 800824c:	0089      	lsls	r1, r1, #2
 800824e:	1889      	adds	r1, r1, r2
 8008250:	00cd      	lsls	r5, r1, #3
 8008252:	0172      	lsls	r2, r6, #5
 8008254:	1b92      	subs	r2, r2, r6
 8008256:	0092      	lsls	r2, r2, #2
 8008258:	1992      	adds	r2, r2, r6
 800825a:	00d3      	lsls	r3, r2, #3
 800825c:	001a      	movs	r2, r3
 800825e:	0163      	lsls	r3, r4, #5
 8008260:	1b1b      	subs	r3, r3, r4
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	191b      	adds	r3, r3, r4
 8008266:	00d9      	lsls	r1, r3, #3
	
	if (releaseCounter[port] == t1)	
 8008268:	0084      	lsls	r4, r0, #2
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <CheckForTimedButtonRelease+0x6c>)
 800826c:	58e3      	ldr	r3, [r4, r3]
 800826e:	42ab      	cmp	r3, r5
 8008270:	d009      	beq.n	8008286 <CheckForTimedButtonRelease+0x4e>
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <CheckForTimedButtonRelease+0x5c>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 8008276:	428b      	cmp	r3, r1
 8008278:	d10a      	bne.n	8008290 <CheckForTimedButtonRelease+0x58>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 800827a:	00c3      	lsls	r3, r0, #3
 800827c:	1818      	adds	r0, r3, r0
 800827e:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <CheckForTimedButtonRelease+0x68>)
 8008280:	220d      	movs	r2, #13
 8008282:	54c2      	strb	r2, [r0, r3]
 8008284:	e004      	b.n	8008290 <CheckForTimedButtonRelease+0x58>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8008286:	00c3      	lsls	r3, r0, #3
 8008288:	1818      	adds	r0, r3, r0
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <CheckForTimedButtonRelease+0x68>)
 800828c:	220c      	movs	r2, #12
 800828e:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008290:	2000      	movs	r0, #0
 8008292:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008294:	00c3      	lsls	r3, r0, #3
 8008296:	1818      	adds	r0, r3, r0
 8008298:	4b01      	ldr	r3, [pc, #4]	; (80082a0 <CheckForTimedButtonRelease+0x68>)
 800829a:	220d      	movs	r2, #13
 800829c:	54c2      	strb	r2, [r0, r3]
 800829e:	e7f7      	b.n	8008290 <CheckForTimedButtonRelease+0x58>
 80082a0:	20001140 	.word	0x20001140
 80082a4:	20001198 	.word	0x20001198

080082a8 <CheckAttachedButtons>:
{
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	46ce      	mov	lr, r9
 80082ac:	4647      	mov	r7, r8
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b087      	sub	sp, #28
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80082b2:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80082b4:	2600      	movs	r6, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	4698      	mov	r8, r3
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80082ba:	e11e      	b.n	80084fa <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80082bc:	230e      	movs	r3, #14
 80082be:	446b      	add	r3, sp
 80082c0:	8819      	ldrh	r1, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	9805      	ldr	r0, [sp, #20]
 80082c6:	f009 fede 	bl	8012086 <HAL_GPIO_WritePin>
 80082ca:	200a      	movs	r0, #10
 80082cc:	f006 fb04 	bl	800e8d8 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80082d0:	ab03      	add	r3, sp, #12
 80082d2:	8819      	ldrh	r1, [r3, #0]
 80082d4:	9804      	ldr	r0, [sp, #16]
 80082d6:	f009 fecf 	bl	8012078 <HAL_GPIO_ReadPin>
 80082da:	4680      	mov	r8, r0
 80082dc:	e13b      	b.n	8008556 <CheckAttachedButtons+0x2ae>
			switch (button[i].type)
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d104      	bne.n	80082ec <CheckAttachedButtons+0x44>
					if (connected == GPIO_PIN_SET)	
 80082e2:	4643      	mov	r3, r8
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d043      	beq.n	8008370 <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03b      	beq.n	8008364 <CheckAttachedButtons+0xbc>
			if (state == CLOSED || state == ON)												
 80082ec:	2e04      	cmp	r6, #4
 80082ee:	d040      	beq.n	8008372 <CheckAttachedButtons+0xca>
 80082f0:	2e02      	cmp	r6, #2
 80082f2:	d03e      	beq.n	8008372 <CheckAttachedButtons+0xca>
			if (state == OPEN || state == OFF)												
 80082f4:	2e03      	cmp	r6, #3
 80082f6:	d04e      	beq.n	8008396 <CheckAttachedButtons+0xee>
 80082f8:	2e01      	cmp	r6, #1
 80082fa:	d04c      	beq.n	8008396 <CheckAttachedButtons+0xee>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 80082fc:	00ab      	lsls	r3, r5, #2
 80082fe:	4abc      	ldr	r2, [pc, #752]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008300:	589b      	ldr	r3, [r3, r2]
 8008302:	4abc      	ldr	r2, [pc, #752]	; (80085f4 <CheckAttachedButtons+0x34c>)
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	4293      	cmp	r3, r2
 8008308:	d200      	bcs.n	800830c <CheckAttachedButtons+0x64>
 800830a:	e099      	b.n	8008440 <CheckAttachedButtons+0x198>
				if (pressCounter[i] == BOS.buttons.debounce)
 800830c:	d06c      	beq.n	80083e8 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800830e:	00ab      	lsls	r3, r5, #2
 8008310:	49b9      	ldr	r1, [pc, #740]	; (80085f8 <CheckAttachedButtons+0x350>)
 8008312:	585b      	ldr	r3, [r3, r1]
 8008314:	429a      	cmp	r2, r3
 8008316:	d203      	bcs.n	8008320 <CheckAttachedButtons+0x78>
					releaseCounter[i] = 0;					
 8008318:	00ab      	lsls	r3, r5, #2
 800831a:	000a      	movs	r2, r1
 800831c:	2100      	movs	r1, #0
 800831e:	5099      	str	r1, [r3, r2]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8008320:	00ab      	lsls	r3, r5, #2
 8008322:	4ab3      	ldr	r2, [pc, #716]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008324:	589b      	ldr	r3, [r3, r2]
 8008326:	4ab3      	ldr	r2, [pc, #716]	; (80085f4 <CheckAttachedButtons+0x34c>)
 8008328:	8852      	ldrh	r2, [r2, #2]
 800832a:	4293      	cmp	r3, r2
 800832c:	d979      	bls.n	8008422 <CheckAttachedButtons+0x17a>
 800832e:	22f4      	movs	r2, #244	; 0xf4
 8008330:	32ff      	adds	r2, #255	; 0xff
 8008332:	4293      	cmp	r3, r2
 8008334:	d875      	bhi.n	8008422 <CheckAttachedButtons+0x17a>
					if (clicked == 0)
 8008336:	4bb1      	ldr	r3, [pc, #708]	; (80085fc <CheckAttachedButtons+0x354>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d15e      	bne.n	80083fc <CheckAttachedButtons+0x154>
						clicked = 1;																					// Record a possible single click 
 800833e:	4baf      	ldr	r3, [pc, #700]	; (80085fc <CheckAttachedButtons+0x354>)
 8008340:	3af3      	subs	r2, #243	; 0xf3
 8008342:	3aff      	subs	r2, #255	; 0xff
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e07b      	b.n	8008440 <CheckAttachedButtons+0x198>
					if (connected == GPIO_PIN_SET)	
 8008348:	4643      	mov	r3, r8
 800834a:	2b01      	cmp	r3, #1
 800834c:	d01c      	beq.n	8008388 <CheckAttachedButtons+0xe0>
					else if (connected == GPIO_PIN_RESET) 
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1cc      	bne.n	80082ec <CheckAttachedButtons+0x44>
						state = OPEN;	
 8008352:	2603      	movs	r6, #3
 8008354:	e7cc      	b.n	80082f0 <CheckAttachedButtons+0x48>
					if (connected == GPIO_PIN_SET)	
 8008356:	4643      	mov	r3, r8
 8008358:	2b01      	cmp	r3, #1
 800835a:	d005      	beq.n	8008368 <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET) 
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1c5      	bne.n	80082ec <CheckAttachedButtons+0x44>
						state = OFF;
 8008360:	2601      	movs	r6, #1
 8008362:	e7c5      	b.n	80082f0 <CheckAttachedButtons+0x48>
						state = OPEN;			
 8008364:	2603      	movs	r6, #3
 8008366:	e7c3      	b.n	80082f0 <CheckAttachedButtons+0x48>
						state = ON;
 8008368:	2602      	movs	r6, #2
 800836a:	e7c1      	b.n	80082f0 <CheckAttachedButtons+0x48>
						state = OFF;
 800836c:	4646      	mov	r6, r8
 800836e:	e7bf      	b.n	80082f0 <CheckAttachedButtons+0x48>
						state = CLOSED;
 8008370:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)	
 8008372:	00ab      	lsls	r3, r5, #2
 8008374:	4a9e      	ldr	r2, [pc, #632]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008376:	589b      	ldr	r3, [r3, r2]
 8008378:	4aa1      	ldr	r2, [pc, #644]	; (8008600 <CheckAttachedButtons+0x358>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d806      	bhi.n	800838c <CheckAttachedButtons+0xe4>
					++pressCounter[i];																			// Advance the debounce counter
 800837e:	00aa      	lsls	r2, r5, #2
 8008380:	3301      	adds	r3, #1
 8008382:	499b      	ldr	r1, [pc, #620]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008384:	5053      	str	r3, [r2, r1]
 8008386:	e7b5      	b.n	80082f4 <CheckAttachedButtons+0x4c>
						state = CLOSED;
 8008388:	2604      	movs	r6, #4
 800838a:	e7f2      	b.n	8008372 <CheckAttachedButtons+0xca>
					pressCounter[i] = 0;																		// Reset debounce counter					
 800838c:	00ab      	lsls	r3, r5, #2
 800838e:	4a98      	ldr	r2, [pc, #608]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008390:	2100      	movs	r1, #0
 8008392:	5099      	str	r1, [r3, r2]
 8008394:	e7ae      	b.n	80082f4 <CheckAttachedButtons+0x4c>
				if (releaseCounter[i] < 0xFFFF)
 8008396:	00ab      	lsls	r3, r5, #2
 8008398:	4a97      	ldr	r2, [pc, #604]	; (80085f8 <CheckAttachedButtons+0x350>)
 800839a:	589b      	ldr	r3, [r3, r2]
 800839c:	4a98      	ldr	r2, [pc, #608]	; (8008600 <CheckAttachedButtons+0x358>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d813      	bhi.n	80083ca <CheckAttachedButtons+0x122>
					++releaseCounter[i];																		// Advance the debounce counter
 80083a2:	00aa      	lsls	r2, r5, #2
 80083a4:	3301      	adds	r3, #1
 80083a6:	4994      	ldr	r1, [pc, #592]	; (80085f8 <CheckAttachedButtons+0x350>)
 80083a8:	5053      	str	r3, [r2, r1]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80083aa:	4b94      	ldr	r3, [pc, #592]	; (80085fc <CheckAttachedButtons+0x354>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d010      	beq.n	80083d4 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 80083b2:	4b94      	ldr	r3, [pc, #592]	; (8008604 <CheckAttachedButtons+0x35c>)
 80083b4:	5d5a      	ldrb	r2, [r3, r5]
 80083b6:	4b8f      	ldr	r3, [pc, #572]	; (80085f4 <CheckAttachedButtons+0x34c>)
 80083b8:	795b      	ldrb	r3, [r3, #5]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d99e      	bls.n	80082fc <CheckAttachedButtons+0x54>
					clicked = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	4a8e      	ldr	r2, [pc, #568]	; (80085fc <CheckAttachedButtons+0x354>)
 80083c2:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80083c4:	4a8f      	ldr	r2, [pc, #572]	; (8008604 <CheckAttachedButtons+0x35c>)
 80083c6:	5553      	strb	r3, [r2, r5]
 80083c8:	e798      	b.n	80082fc <CheckAttachedButtons+0x54>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 80083ca:	00ab      	lsls	r3, r5, #2
 80083cc:	4a8a      	ldr	r2, [pc, #552]	; (80085f8 <CheckAttachedButtons+0x350>)
 80083ce:	2100      	movs	r1, #0
 80083d0:	5099      	str	r1, [r3, r2]
 80083d2:	e7ea      	b.n	80083aa <CheckAttachedButtons+0x102>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80083d4:	4b8b      	ldr	r3, [pc, #556]	; (8008604 <CheckAttachedButtons+0x35c>)
 80083d6:	5d5b      	ldrb	r3, [r3, r5]
 80083d8:	4a86      	ldr	r2, [pc, #536]	; (80085f4 <CheckAttachedButtons+0x34c>)
 80083da:	7952      	ldrb	r2, [r2, #5]
 80083dc:	4293      	cmp	r3, r2
 80083de:	d8e8      	bhi.n	80083b2 <CheckAttachedButtons+0x10a>
					++dblCounter[i];			
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a88      	ldr	r2, [pc, #544]	; (8008604 <CheckAttachedButtons+0x35c>)
 80083e4:	5553      	strb	r3, [r2, r5]
 80083e6:	e789      	b.n	80082fc <CheckAttachedButtons+0x54>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80083e8:	00e9      	lsls	r1, r5, #3
 80083ea:	1949      	adds	r1, r1, r5
 80083ec:	4886      	ldr	r0, [pc, #536]	; (8008608 <CheckAttachedButtons+0x360>)
 80083ee:	2707      	movs	r7, #7
 80083f0:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 80083f2:	00a9      	lsls	r1, r5, #2
 80083f4:	3301      	adds	r3, #1
 80083f6:	487e      	ldr	r0, [pc, #504]	; (80085f0 <CheckAttachedButtons+0x348>)
 80083f8:	500b      	str	r3, [r1, r0]
 80083fa:	e788      	b.n	800830e <CheckAttachedButtons+0x66>
					else if (clicked == 2) {
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d11f      	bne.n	8008440 <CheckAttachedButtons+0x198>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8008400:	4b80      	ldr	r3, [pc, #512]	; (8008604 <CheckAttachedButtons+0x35c>)
 8008402:	5d5b      	ldrb	r3, [r3, r5]
 8008404:	4a7b      	ldr	r2, [pc, #492]	; (80085f4 <CheckAttachedButtons+0x34c>)
 8008406:	7912      	ldrb	r2, [r2, #4]
 8008408:	4293      	cmp	r3, r2
 800840a:	d919      	bls.n	8008440 <CheckAttachedButtons+0x198>
 800840c:	4a79      	ldr	r2, [pc, #484]	; (80085f4 <CheckAttachedButtons+0x34c>)
 800840e:	7952      	ldrb	r2, [r2, #5]
 8008410:	4293      	cmp	r3, r2
 8008412:	d215      	bcs.n	8008440 <CheckAttachedButtons+0x198>
							clicked = 3;																				// Record a possible double click 
 8008414:	4b79      	ldr	r3, [pc, #484]	; (80085fc <CheckAttachedButtons+0x354>)
 8008416:	2203      	movs	r2, #3
 8008418:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800841a:	4b7a      	ldr	r3, [pc, #488]	; (8008604 <CheckAttachedButtons+0x35c>)
 800841c:	2200      	movs	r2, #0
 800841e:	555a      	strb	r2, [r3, r5]
 8008420:	e00e      	b.n	8008440 <CheckAttachedButtons+0x198>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008422:	3bf5      	subs	r3, #245	; 0xf5
 8008424:	3bff      	subs	r3, #255	; 0xff
 8008426:	4a79      	ldr	r2, [pc, #484]	; (800860c <CheckAttachedButtons+0x364>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d809      	bhi.n	8008440 <CheckAttachedButtons+0x198>
					if (clicked)	clicked = 0;															// Cannot be a click
 800842c:	4b73      	ldr	r3, [pc, #460]	; (80085fc <CheckAttachedButtons+0x354>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <CheckAttachedButtons+0x192>
 8008434:	4b71      	ldr	r3, [pc, #452]	; (80085fc <CheckAttachedButtons+0x354>)
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800843a:	0020      	movs	r0, r4
 800843c:	f7ff fec4 	bl	80081c8 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008440:	00ab      	lsls	r3, r5, #2
 8008442:	4a6d      	ldr	r2, [pc, #436]	; (80085f8 <CheckAttachedButtons+0x350>)
 8008444:	589b      	ldr	r3, [r3, r2]
 8008446:	4a6b      	ldr	r2, [pc, #428]	; (80085f4 <CheckAttachedButtons+0x34c>)
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	4293      	cmp	r3, r2
 800844c:	d33b      	bcc.n	80084c6 <CheckAttachedButtons+0x21e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800844e:	d022      	beq.n	8008496 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008450:	00ab      	lsls	r3, r5, #2
 8008452:	4967      	ldr	r1, [pc, #412]	; (80085f0 <CheckAttachedButtons+0x348>)
 8008454:	585b      	ldr	r3, [r3, r1]
 8008456:	429a      	cmp	r2, r3
 8008458:	d203      	bcs.n	8008462 <CheckAttachedButtons+0x1ba>
					pressCounter[i] = 0;				
 800845a:	00ab      	lsls	r3, r5, #2
 800845c:	000a      	movs	r2, r1
 800845e:	2100      	movs	r1, #0
 8008460:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8008462:	00ab      	lsls	r3, r5, #2
 8008464:	4a64      	ldr	r2, [pc, #400]	; (80085f8 <CheckAttachedButtons+0x350>)
 8008466:	589b      	ldr	r3, [r3, r2]
 8008468:	4a62      	ldr	r2, [pc, #392]	; (80085f4 <CheckAttachedButtons+0x34c>)
 800846a:	8852      	ldrh	r2, [r2, #2]
 800846c:	4293      	cmp	r3, r2
 800846e:	d925      	bls.n	80084bc <CheckAttachedButtons+0x214>
 8008470:	22f4      	movs	r2, #244	; 0xf4
 8008472:	32ff      	adds	r2, #255	; 0xff
 8008474:	4293      	cmp	r3, r2
 8008476:	d821      	bhi.n	80084bc <CheckAttachedButtons+0x214>
					if (clicked == 1)
 8008478:	4b60      	ldr	r3, [pc, #384]	; (80085fc <CheckAttachedButtons+0x354>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d014      	beq.n	80084aa <CheckAttachedButtons+0x202>
					else if (clicked == 3)
 8008480:	2b03      	cmp	r3, #3
 8008482:	d120      	bne.n	80084c6 <CheckAttachedButtons+0x21e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8008484:	00eb      	lsls	r3, r5, #3
 8008486:	195b      	adds	r3, r3, r5
 8008488:	4a5f      	ldr	r2, [pc, #380]	; (8008608 <CheckAttachedButtons+0x360>)
 800848a:	2106      	movs	r1, #6
 800848c:	5499      	strb	r1, [r3, r2]
						clicked = 0;																					// Prepare for a single click					
 800848e:	4b5b      	ldr	r3, [pc, #364]	; (80085fc <CheckAttachedButtons+0x354>)
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e017      	b.n	80084c6 <CheckAttachedButtons+0x21e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8008496:	00e9      	lsls	r1, r5, #3
 8008498:	1949      	adds	r1, r1, r5
 800849a:	485b      	ldr	r0, [pc, #364]	; (8008608 <CheckAttachedButtons+0x360>)
 800849c:	2708      	movs	r7, #8
 800849e:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 80084a0:	00a9      	lsls	r1, r5, #2
 80084a2:	3301      	adds	r3, #1
 80084a4:	4854      	ldr	r0, [pc, #336]	; (80085f8 <CheckAttachedButtons+0x350>)
 80084a6:	500b      	str	r3, [r1, r0]
 80084a8:	e7d2      	b.n	8008450 <CheckAttachedButtons+0x1a8>
						button[i].state = CLICKED;														// Record a single button click event
 80084aa:	00eb      	lsls	r3, r5, #3
 80084ac:	195b      	adds	r3, r3, r5
 80084ae:	4a56      	ldr	r2, [pc, #344]	; (8008608 <CheckAttachedButtons+0x360>)
 80084b0:	2105      	movs	r1, #5
 80084b2:	5499      	strb	r1, [r3, r2]
						clicked = 2;																					// Prepare for a double click
 80084b4:	4b51      	ldr	r3, [pc, #324]	; (80085fc <CheckAttachedButtons+0x354>)
 80084b6:	2202      	movs	r2, #2
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	e004      	b.n	80084c6 <CheckAttachedButtons+0x21e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80084bc:	3bf5      	subs	r3, #245	; 0xf5
 80084be:	3bff      	subs	r3, #255	; 0xff
 80084c0:	4a52      	ldr	r2, [pc, #328]	; (800860c <CheckAttachedButtons+0x364>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d90b      	bls.n	80084de <CheckAttachedButtons+0x236>
			switch (button[i].state)
 80084c6:	00eb      	lsls	r3, r5, #3
 80084c8:	195b      	adds	r3, r3, r5
 80084ca:	4a4f      	ldr	r2, [pc, #316]	; (8008608 <CheckAttachedButtons+0x360>)
 80084cc:	5c9b      	ldrb	r3, [r3, r2]
 80084ce:	3b05      	subs	r3, #5
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	2a09      	cmp	r2, #9
 80084d4:	d80f      	bhi.n	80084f6 <CheckAttachedButtons+0x24e>
 80084d6:	0093      	lsls	r3, r2, #2
 80084d8:	4a4d      	ldr	r2, [pc, #308]	; (8008610 <CheckAttachedButtons+0x368>)
 80084da:	58d3      	ldr	r3, [r2, r3]
 80084dc:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80084de:	0020      	movs	r0, r4
 80084e0:	f7ff feaa 	bl	8008238 <CheckForTimedButtonRelease>
 80084e4:	e7ef      	b.n	80084c6 <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 80084e6:	0020      	movs	r0, r4
 80084e8:	f7ff fe68 	bl	80081bc <buttonPressedCallback>
					button[i].state = NONE;
 80084ec:	00eb      	lsls	r3, r5, #3
 80084ee:	195d      	adds	r5, r3, r5
 80084f0:	4b45      	ldr	r3, [pc, #276]	; (8008608 <CheckAttachedButtons+0x360>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80084f6:	3401      	adds	r4, #1
 80084f8:	b2e4      	uxtb	r4, r4
 80084fa:	2c05      	cmp	r4, #5
 80084fc:	d900      	bls.n	8008500 <CheckAttachedButtons+0x258>
 80084fe:	e10a      	b.n	8008716 <CheckAttachedButtons+0x46e>
		if (button[i].type)			// Only check defined butons
 8008500:	0025      	movs	r5, r4
 8008502:	00e2      	lsls	r2, r4, #3
 8008504:	1912      	adds	r2, r2, r4
 8008506:	4b40      	ldr	r3, [pc, #256]	; (8008608 <CheckAttachedButtons+0x360>)
 8008508:	189b      	adds	r3, r3, r2
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f2      	beq.n	80084f6 <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8008510:	4b40      	ldr	r3, [pc, #256]	; (8008614 <CheckAttachedButtons+0x36c>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <CheckAttachedButtons+0x278>
 8008518:	0013      	movs	r3, r2
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <CheckAttachedButtons+0x360>)
 800851c:	2100      	movs	r1, #0
 800851e:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008520:	230e      	movs	r3, #14
 8008522:	446b      	add	r3, sp
 8008524:	4699      	mov	r9, r3
 8008526:	af03      	add	r7, sp, #12
 8008528:	9700      	str	r7, [sp, #0]
 800852a:	ab04      	add	r3, sp, #16
 800852c:	464a      	mov	r2, r9
 800852e:	a905      	add	r1, sp, #20
 8008530:	0020      	movs	r0, r4
 8008532:	f005 fe49 	bl	800e1c8 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008536:	464b      	mov	r3, r9
 8008538:	8819      	ldrh	r1, [r3, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	9805      	ldr	r0, [sp, #20]
 800853e:	f009 fda2 	bl	8012086 <HAL_GPIO_WritePin>
 8008542:	200a      	movs	r0, #10
 8008544:	f006 f9c8 	bl	800e8d8 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008548:	8839      	ldrh	r1, [r7, #0]
 800854a:	9804      	ldr	r0, [sp, #16]
 800854c:	f009 fd94 	bl	8012078 <HAL_GPIO_ReadPin>
 8008550:	2800      	cmp	r0, #0
 8008552:	d100      	bne.n	8008556 <CheckAttachedButtons+0x2ae>
 8008554:	e6b2      	b.n	80082bc <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008556:	230e      	movs	r3, #14
 8008558:	446b      	add	r3, sp
 800855a:	8819      	ldrh	r1, [r3, #0]
 800855c:	2200      	movs	r2, #0
 800855e:	9805      	ldr	r0, [sp, #20]
 8008560:	f009 fd91 	bl	8012086 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8008564:	00ea      	lsls	r2, r5, #3
 8008566:	1952      	adds	r2, r2, r5
 8008568:	4b27      	ldr	r3, [pc, #156]	; (8008608 <CheckAttachedButtons+0x360>)
 800856a:	189b      	adds	r3, r3, r2
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d100      	bne.n	8008574 <CheckAttachedButtons+0x2cc>
 8008572:	e6e9      	b.n	8008348 <CheckAttachedButtons+0xa0>
 8008574:	d800      	bhi.n	8008578 <CheckAttachedButtons+0x2d0>
 8008576:	e6b2      	b.n	80082de <CheckAttachedButtons+0x36>
 8008578:	2b03      	cmp	r3, #3
 800857a:	d100      	bne.n	800857e <CheckAttachedButtons+0x2d6>
 800857c:	e6eb      	b.n	8008356 <CheckAttachedButtons+0xae>
 800857e:	2b04      	cmp	r3, #4
 8008580:	d000      	beq.n	8008584 <CheckAttachedButtons+0x2dc>
 8008582:	e6b3      	b.n	80082ec <CheckAttachedButtons+0x44>
					if (connected == GPIO_PIN_SET)	
 8008584:	4643      	mov	r3, r8
 8008586:	2b01      	cmp	r3, #1
 8008588:	d100      	bne.n	800858c <CheckAttachedButtons+0x2e4>
 800858a:	e6ef      	b.n	800836c <CheckAttachedButtons+0xc4>
					else if (connected == GPIO_PIN_RESET) 
 800858c:	2b00      	cmp	r3, #0
 800858e:	d000      	beq.n	8008592 <CheckAttachedButtons+0x2ea>
 8008590:	e6ac      	b.n	80082ec <CheckAttachedButtons+0x44>
						state = ON;
 8008592:	2602      	movs	r6, #2
 8008594:	e6ac      	b.n	80082f0 <CheckAttachedButtons+0x48>
					buttonReleasedCallback(i);
 8008596:	0020      	movs	r0, r4
 8008598:	f7ff fe11 	bl	80081be <buttonReleasedCallback>
					button[i].state = NONE;
 800859c:	00eb      	lsls	r3, r5, #3
 800859e:	195d      	adds	r5, r3, r5
 80085a0:	4b19      	ldr	r3, [pc, #100]	; (8008608 <CheckAttachedButtons+0x360>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	54ea      	strb	r2, [r5, r3]
      		break;
 80085a6:	e7a6      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <CheckAttachedButtons+0x36c>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1a2      	bne.n	80084f6 <CheckAttachedButtons+0x24e>
 80085b0:	00eb      	lsls	r3, r5, #3
 80085b2:	195b      	adds	r3, r3, r5
 80085b4:	4d14      	ldr	r5, [pc, #80]	; (8008608 <CheckAttachedButtons+0x360>)
 80085b6:	18ed      	adds	r5, r5, r3
 80085b8:	7a2b      	ldrb	r3, [r5, #8]
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d59b      	bpl.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80085be:	4b15      	ldr	r3, [pc, #84]	; (8008614 <CheckAttachedButtons+0x36c>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80085c4:	0020      	movs	r0, r4
 80085c6:	f7ff fdfb 	bl	80081c0 <buttonClickedCallback>
 80085ca:	e794      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <CheckAttachedButtons+0x36c>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d190      	bne.n	80084f6 <CheckAttachedButtons+0x24e>
 80085d4:	00eb      	lsls	r3, r5, #3
 80085d6:	195b      	adds	r3, r3, r5
 80085d8:	4d0b      	ldr	r5, [pc, #44]	; (8008608 <CheckAttachedButtons+0x360>)
 80085da:	18ed      	adds	r5, r5, r3
 80085dc:	7a2b      	ldrb	r3, [r5, #8]
 80085de:	079b      	lsls	r3, r3, #30
 80085e0:	d589      	bpl.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <CheckAttachedButtons+0x36c>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 80085e8:	0020      	movs	r0, r4
 80085ea:	f7ff fdea 	bl	80081c2 <buttonDblClickedCallback>
 80085ee:	e782      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 80085f0:	20001180 	.word	0x20001180
 80085f4:	200069d4 	.word	0x200069d4
 80085f8:	20001198 	.word	0x20001198
 80085fc:	20001176 	.word	0x20001176
 8008600:	0000fffe 	.word	0x0000fffe
 8008604:	20001178 	.word	0x20001178
 8008608:	20001140 	.word	0x20001140
 800860c:	0000fe0a 	.word	0x0000fe0a
 8008610:	0801af98 	.word	0x0801af98
 8008614:	2000117e 	.word	0x2000117e
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8008618:	4b41      	ldr	r3, [pc, #260]	; (8008720 <CheckAttachedButtons+0x478>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d000      	beq.n	8008622 <CheckAttachedButtons+0x37a>
 8008620:	e769      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 8008622:	00eb      	lsls	r3, r5, #3
 8008624:	195b      	adds	r3, r3, r5
 8008626:	4d3f      	ldr	r5, [pc, #252]	; (8008724 <CheckAttachedButtons+0x47c>)
 8008628:	18ed      	adds	r5, r5, r3
 800862a:	7a2b      	ldrb	r3, [r5, #8]
 800862c:	075b      	lsls	r3, r3, #29
 800862e:	d400      	bmi.n	8008632 <CheckAttachedButtons+0x38a>
 8008630:	e761      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008632:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <CheckAttachedButtons+0x478>)
 8008634:	2201      	movs	r2, #1
 8008636:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8008638:	2101      	movs	r1, #1
 800863a:	0020      	movs	r0, r4
 800863c:	f7ff fdc2 	bl	80081c4 <buttonPressedForXCallback>
 8008640:	e759      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8008642:	4b37      	ldr	r3, [pc, #220]	; (8008720 <CheckAttachedButtons+0x478>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d000      	beq.n	800864c <CheckAttachedButtons+0x3a4>
 800864a:	e754      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 800864c:	00eb      	lsls	r3, r5, #3
 800864e:	195b      	adds	r3, r3, r5
 8008650:	4d34      	ldr	r5, [pc, #208]	; (8008724 <CheckAttachedButtons+0x47c>)
 8008652:	18ed      	adds	r5, r5, r3
 8008654:	7a2b      	ldrb	r3, [r5, #8]
 8008656:	071b      	lsls	r3, r3, #28
 8008658:	d400      	bmi.n	800865c <CheckAttachedButtons+0x3b4>
 800865a:	e74c      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800865c:	4b30      	ldr	r3, [pc, #192]	; (8008720 <CheckAttachedButtons+0x478>)
 800865e:	2201      	movs	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008662:	2102      	movs	r1, #2
 8008664:	0020      	movs	r0, r4
 8008666:	f7ff fdad 	bl	80081c4 <buttonPressedForXCallback>
 800866a:	e744      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 800866c:	4b2c      	ldr	r3, [pc, #176]	; (8008720 <CheckAttachedButtons+0x478>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d000      	beq.n	8008676 <CheckAttachedButtons+0x3ce>
 8008674:	e73f      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 8008676:	00eb      	lsls	r3, r5, #3
 8008678:	195b      	adds	r3, r3, r5
 800867a:	4d2a      	ldr	r5, [pc, #168]	; (8008724 <CheckAttachedButtons+0x47c>)
 800867c:	18ed      	adds	r5, r5, r3
 800867e:	7a2b      	ldrb	r3, [r5, #8]
 8008680:	06db      	lsls	r3, r3, #27
 8008682:	d400      	bmi.n	8008686 <CheckAttachedButtons+0x3de>
 8008684:	e737      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008686:	4b26      	ldr	r3, [pc, #152]	; (8008720 <CheckAttachedButtons+0x478>)
 8008688:	2201      	movs	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 800868c:	2103      	movs	r1, #3
 800868e:	0020      	movs	r0, r4
 8008690:	f7ff fd98 	bl	80081c4 <buttonPressedForXCallback>
 8008694:	e72f      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008696:	4b22      	ldr	r3, [pc, #136]	; (8008720 <CheckAttachedButtons+0x478>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d000      	beq.n	80086a0 <CheckAttachedButtons+0x3f8>
 800869e:	e72a      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 80086a0:	00eb      	lsls	r3, r5, #3
 80086a2:	195b      	adds	r3, r3, r5
 80086a4:	4d1f      	ldr	r5, [pc, #124]	; (8008724 <CheckAttachedButtons+0x47c>)
 80086a6:	18ed      	adds	r5, r5, r3
 80086a8:	7a2b      	ldrb	r3, [r5, #8]
 80086aa:	069b      	lsls	r3, r3, #26
 80086ac:	d400      	bmi.n	80086b0 <CheckAttachedButtons+0x408>
 80086ae:	e722      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <CheckAttachedButtons+0x478>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 80086b6:	2101      	movs	r1, #1
 80086b8:	0020      	movs	r0, r4
 80086ba:	f7ff fd84 	bl	80081c6 <buttonReleasedForYCallback>
 80086be:	e71a      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <CheckAttachedButtons+0x478>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d000      	beq.n	80086ca <CheckAttachedButtons+0x422>
 80086c8:	e715      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 80086ca:	00eb      	lsls	r3, r5, #3
 80086cc:	195b      	adds	r3, r3, r5
 80086ce:	4d15      	ldr	r5, [pc, #84]	; (8008724 <CheckAttachedButtons+0x47c>)
 80086d0:	18ed      	adds	r5, r5, r3
 80086d2:	7a2b      	ldrb	r3, [r5, #8]
 80086d4:	065b      	lsls	r3, r3, #25
 80086d6:	d400      	bmi.n	80086da <CheckAttachedButtons+0x432>
 80086d8:	e70d      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <CheckAttachedButtons+0x478>)
 80086dc:	2201      	movs	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 80086e0:	2102      	movs	r1, #2
 80086e2:	0020      	movs	r0, r4
 80086e4:	f7ff fd6f 	bl	80081c6 <buttonReleasedForYCallback>
 80086e8:	e705      	b.n	80084f6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <CheckAttachedButtons+0x478>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d000      	beq.n	80086f4 <CheckAttachedButtons+0x44c>
 80086f2:	e700      	b.n	80084f6 <CheckAttachedButtons+0x24e>
 80086f4:	00eb      	lsls	r3, r5, #3
 80086f6:	195b      	adds	r3, r3, r5
 80086f8:	4d0a      	ldr	r5, [pc, #40]	; (8008724 <CheckAttachedButtons+0x47c>)
 80086fa:	18ed      	adds	r5, r5, r3
 80086fc:	2308      	movs	r3, #8
 80086fe:	56eb      	ldrsb	r3, [r5, r3]
 8008700:	2b00      	cmp	r3, #0
 8008702:	db00      	blt.n	8008706 <CheckAttachedButtons+0x45e>
 8008704:	e6f7      	b.n	80084f6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <CheckAttachedButtons+0x478>)
 8008708:	2201      	movs	r2, #1
 800870a:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 800870c:	2103      	movs	r1, #3
 800870e:	0020      	movs	r0, r4
 8008710:	f7ff fd59 	bl	80081c6 <buttonReleasedForYCallback>
 8008714:	e6ef      	b.n	80084f6 <CheckAttachedButtons+0x24e>
}
 8008716:	b007      	add	sp, #28
 8008718:	bc0c      	pop	{r2, r3}
 800871a:	4690      	mov	r8, r2
 800871c:	4699      	mov	r9, r3
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	2000117e 	.word	0x2000117e
 8008724:	20001140 	.word	0x20001140

08008728 <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872a:	b08d      	sub	sp, #52	; 0x34
 800872c:	0006      	movs	r6, r0
 800872e:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008730:	4b41      	ldr	r3, [pc, #260]	; (8008838 <AddPortButton+0x110>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d157      	bne.n	80087e8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8008738:	4b40      	ldr	r3, [pc, #256]	; (800883c <AddPortButton+0x114>)
 800873a:	2204      	movs	r2, #4
 800873c:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800873e:	4b3e      	ldr	r3, [pc, #248]	; (8008838 <AddPortButton+0x110>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d15a      	bne.n	80087fc <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8008746:	2512      	movs	r5, #18
 8008748:	446d      	add	r5, sp
 800874a:	af04      	add	r7, sp, #16
 800874c:	9700      	str	r7, [sp, #0]
 800874e:	ab05      	add	r3, sp, #20
 8008750:	002a      	movs	r2, r5
 8008752:	a906      	add	r1, sp, #24
 8008754:	0020      	movs	r0, r4
 8008756:	f005 fd37 	bl	800e1c8 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800875a:	882b      	ldrh	r3, [r5, #0]
 800875c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800875e:	2301      	movs	r3, #1
 8008760:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008762:	2500      	movs	r5, #0
 8008764:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008766:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8008768:	a907      	add	r1, sp, #28
 800876a:	9806      	ldr	r0, [sp, #24]
 800876c:	f009 fbbc 	bl	8011ee8 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008770:	883b      	ldrh	r3, [r7, #0]
 8008772:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008774:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008776:	2302      	movs	r3, #2
 8008778:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 800877a:	a907      	add	r1, sp, #28
 800877c:	9805      	ldr	r0, [sp, #20]
 800877e:	f009 fbb3 	bl	8011ee8 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8008782:	00e2      	lsls	r2, r4, #3
 8008784:	1912      	adds	r2, r2, r4
 8008786:	4b2e      	ldr	r3, [pc, #184]	; (8008840 <AddPortButton+0x118>)
 8008788:	189b      	adds	r3, r3, r2
 800878a:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800878c:	0025      	movs	r5, r4
 800878e:	353a      	adds	r5, #58	; 0x3a
 8008790:	00ad      	lsls	r5, r5, #2
 8008792:	210e      	movs	r1, #14
 8008794:	4469      	add	r1, sp
 8008796:	0028      	movs	r0, r5
 8008798:	f7ff f8ae 	bl	80078f8 <EE_ReadVariable>
	if(!res)																														// This variable exists
 800879c:	2800      	cmp	r0, #0
 800879e:	d133      	bne.n	8008808 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 80087a0:	230e      	movs	r3, #14
 80087a2:	446b      	add	r3, sp
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 80087a8:	091a      	lsrs	r2, r3, #4
 80087aa:	42a2      	cmp	r2, r4
 80087ac:	d103      	bne.n	80087b6 <AddPortButton+0x8e>
 80087ae:	220f      	movs	r2, #15
 80087b0:	4013      	ands	r3, r2
 80087b2:	42b3      	cmp	r3, r6
 80087b4:	d015      	beq.n	80087e2 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80087b6:	0324      	lsls	r4, r4, #12
 80087b8:	0231      	lsls	r1, r6, #8
 80087ba:	4321      	orrs	r1, r4
 80087bc:	b289      	uxth	r1, r1
 80087be:	230e      	movs	r3, #14
 80087c0:	446b      	add	r3, sp
 80087c2:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80087c4:	0028      	movs	r0, r5
 80087c6:	f7ff f949 	bl	8007a5c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80087ca:	1c68      	adds	r0, r5, #1
 80087cc:	2100      	movs	r1, #0
 80087ce:	f7ff f945 	bl	8007a5c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80087d2:	1ca8      	adds	r0, r5, #2
 80087d4:	2100      	movs	r1, #0
 80087d6:	f7ff f941 	bl	8007a5c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80087da:	1ce8      	adds	r0, r5, #3
 80087dc:	2100      	movs	r1, #0
 80087de:	f7ff f93d 	bl	8007a5c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 80087e2:	2000      	movs	r0, #0
 80087e4:	b00d      	add	sp, #52	; 0x34
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 80087e8:	008d      	lsls	r5, r1, #2
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <AddPortButton+0x11c>)
 80087ec:	58e8      	ldr	r0, [r5, r3]
 80087ee:	f006 fbbf 	bl	800ef70 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <AddPortButton+0x120>)
 80087f4:	58e8      	ldr	r0, [r5, r3]
 80087f6:	f006 fbbb 	bl	800ef70 <osSemaphoreRelease>
 80087fa:	e79d      	b.n	8008738 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80087fc:	0020      	movs	r0, r4
 80087fe:	f006 fa11 	bl	800ec24 <GetUart>
 8008802:	f00a fba2 	bl	8012f4a <HAL_UART_DeInit>
 8008806:	e79e      	b.n	8008746 <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008808:	0324      	lsls	r4, r4, #12
 800880a:	0231      	lsls	r1, r6, #8
 800880c:	4321      	orrs	r1, r4
 800880e:	b289      	uxth	r1, r1
 8008810:	230e      	movs	r3, #14
 8008812:	446b      	add	r3, sp
 8008814:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8008816:	0028      	movs	r0, r5
 8008818:	f7ff f920 	bl	8007a5c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800881c:	1c68      	adds	r0, r5, #1
 800881e:	2100      	movs	r1, #0
 8008820:	f7ff f91c 	bl	8007a5c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008824:	1ca8      	adds	r0, r5, #2
 8008826:	2100      	movs	r1, #0
 8008828:	f7ff f918 	bl	8007a5c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 800882c:	1ce8      	adds	r0, r5, #3
 800882e:	2100      	movs	r1, #0
 8008830:	f7ff f914 	bl	8007a5c <EE_WriteVariable>
 8008834:	e7d5      	b.n	80087e2 <AddPortButton+0xba>
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	20000af5 	.word	0x20000af5
 800883c:	20000db0 	.word	0x20000db0
 8008840:	20001140 	.word	0x20001140
 8008844:	20006a70 	.word	0x20006a70
 8008848:	20006a54 	.word	0x20006a54

0800884c <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008852:	4836      	ldr	r0, [pc, #216]	; (800892c <RemovePortButton+0xe0>)
 8008854:	00e1      	lsls	r1, r4, #3
 8008856:	1909      	adds	r1, r1, r4
 8008858:	1842      	adds	r2, r0, r1
 800885a:	2300      	movs	r3, #0
 800885c:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800885e:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008860:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008862:	7093      	strb	r3, [r2, #2]
 8008864:	70d3      	strb	r3, [r2, #3]
 8008866:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008868:	7153      	strb	r3, [r2, #5]
 800886a:	7193      	strb	r3, [r2, #6]
 800886c:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800886e:	0025      	movs	r5, r4
 8008870:	353a      	adds	r5, #58	; 0x3a
 8008872:	00ad      	lsls	r5, r5, #2
 8008874:	466b      	mov	r3, sp
 8008876:	1d99      	adds	r1, r3, #6
 8008878:	0028      	movs	r0, r5
 800887a:	f7ff f83d 	bl	80078f8 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 800887e:	2800      	cmp	r0, #0
 8008880:	d01e      	beq.n	80088c0 <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8008882:	0020      	movs	r0, r4
 8008884:	f006 f9ce 	bl	800ec24 <GetUart>
 8008888:	0005      	movs	r5, r0
	
	if (huart->Instance == USART1) 
 800888a:	6803      	ldr	r3, [r0, #0]
 800888c:	4a28      	ldr	r2, [pc, #160]	; (8008930 <RemovePortButton+0xe4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d03d      	beq.n	800890e <RemovePortButton+0xc2>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8008892:	4a28      	ldr	r2, [pc, #160]	; (8008934 <RemovePortButton+0xe8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d024      	beq.n	80088e2 <RemovePortButton+0x96>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8008898:	4a27      	ldr	r2, [pc, #156]	; (8008938 <RemovePortButton+0xec>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d025      	beq.n	80088ea <RemovePortButton+0x9e>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 800889e:	4a27      	ldr	r2, [pc, #156]	; (800893c <RemovePortButton+0xf0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d026      	beq.n	80088f2 <RemovePortButton+0xa6>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 80088a4:	4a26      	ldr	r2, [pc, #152]	; (8008940 <RemovePortButton+0xf4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d027      	beq.n	80088fa <RemovePortButton+0xae>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 80088aa:	4a26      	ldr	r2, [pc, #152]	; (8008944 <RemovePortButton+0xf8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d028      	beq.n	8008902 <RemovePortButton+0xb6>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 80088b0:	4a25      	ldr	r2, [pc, #148]	; (8008948 <RemovePortButton+0xfc>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d037      	beq.n	8008926 <RemovePortButton+0xda>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 80088b6:	4a25      	ldr	r2, [pc, #148]	; (800894c <RemovePortButton+0x100>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d026      	beq.n	800890a <RemovePortButton+0xbe>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} 
	else
		result = BOS_ERROR;			
 80088bc:	26ff      	movs	r6, #255	; 0xff
 80088be:	e027      	b.n	8008910 <RemovePortButton+0xc4>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 80088c0:	2100      	movs	r1, #0
 80088c2:	0028      	movs	r0, r5
 80088c4:	f7ff f8ca 	bl	8007a5c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80088c8:	1c68      	adds	r0, r5, #1
 80088ca:	2100      	movs	r1, #0
 80088cc:	f7ff f8c6 	bl	8007a5c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80088d0:	1ca8      	adds	r0, r5, #2
 80088d2:	2100      	movs	r1, #0
 80088d4:	f7ff f8c2 	bl	8007a5c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 80088d8:	1ce8      	adds	r0, r5, #3
 80088da:	2100      	movs	r1, #0
 80088dc:	f7ff f8be 	bl	8007a5c <EE_WriteVariable>
 80088e0:	e7cf      	b.n	8008882 <RemovePortButton+0x36>
		MX_USART2_UART_Init();
 80088e2:	f006 f81d 	bl	800e920 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 80088e6:	2600      	movs	r6, #0
 80088e8:	e012      	b.n	8008910 <RemovePortButton+0xc4>
		MX_USART3_UART_Init();
 80088ea:	f006 f831 	bl	800e950 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 80088ee:	2600      	movs	r6, #0
 80088f0:	e00e      	b.n	8008910 <RemovePortButton+0xc4>
		MX_USART4_UART_Init();
 80088f2:	f006 f845 	bl	800e980 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 80088f6:	2600      	movs	r6, #0
 80088f8:	e00a      	b.n	8008910 <RemovePortButton+0xc4>
		MX_USART5_UART_Init();
 80088fa:	f006 f859 	bl	800e9b0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 80088fe:	2600      	movs	r6, #0
 8008900:	e006      	b.n	8008910 <RemovePortButton+0xc4>
		MX_USART6_UART_Init();
 8008902:	f006 f86d 	bl	800e9e0 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008906:	2600      	movs	r6, #0
 8008908:	e002      	b.n	8008910 <RemovePortButton+0xc4>
 800890a:	2600      	movs	r6, #0
 800890c:	e000      	b.n	8008910 <RemovePortButton+0xc4>
 800890e:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008910:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <RemovePortButton+0x104>)
 8008912:	2200      	movs	r2, #0
 8008914:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8008916:	3201      	adds	r2, #1
 8008918:	490e      	ldr	r1, [pc, #56]	; (8008954 <RemovePortButton+0x108>)
 800891a:	0028      	movs	r0, r5
 800891c:	f00a fb6e 	bl	8012ffc <HAL_UART_Receive_IT>
	
	return result;
}
 8008920:	0030      	movs	r0, r6
 8008922:	b002      	add	sp, #8
 8008924:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 8008926:	2600      	movs	r6, #0
 8008928:	e7f2      	b.n	8008910 <RemovePortButton+0xc4>
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	20001140 	.word	0x20001140
 8008930:	40013800 	.word	0x40013800
 8008934:	40004400 	.word	0x40004400
 8008938:	40004800 	.word	0x40004800
 800893c:	40004c00 	.word	0x40004c00
 8008940:	40005000 	.word	0x40005000
 8008944:	40011400 	.word	0x40011400
 8008948:	40011800 	.word	0x40011800
 800894c:	40011c00 	.word	0x40011c00
 8008950:	20000db0 	.word	0x20000db0
 8008954:	20000c4c 	.word	0x20000c4c

08008958 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895a:	46de      	mov	lr, fp
 800895c:	4657      	mov	r7, sl
 800895e:	464e      	mov	r6, r9
 8008960:	4645      	mov	r5, r8
 8008962:	b5e0      	push	{r5, r6, r7, lr}
 8008964:	b085      	sub	sp, #20
 8008966:	0007      	movs	r7, r0
 8008968:	469b      	mov	fp, r3
 800896a:	ab0e      	add	r3, sp, #56	; 0x38
 800896c:	781e      	ldrb	r6, [r3, #0]
 800896e:	ab0f      	add	r3, sp, #60	; 0x3c
 8008970:	781d      	ldrb	r5, [r3, #0]
 8008972:	ab10      	add	r3, sp, #64	; 0x40
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	469a      	mov	sl, r3
 8008978:	ab11      	add	r3, sp, #68	; 0x44
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	4699      	mov	r9, r3
 800897e:	ab12      	add	r3, sp, #72	; 0x48
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	4698      	mov	r8, r3
 8008984:	ab13      	add	r3, sp, #76	; 0x4c
 8008986:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8008988:	00c4      	lsls	r4, r0, #3
 800898a:	1824      	adds	r4, r4, r0
 800898c:	48b3      	ldr	r0, [pc, #716]	; (8008c5c <SetButtonEvents+0x304>)
 800898e:	1900      	adds	r0, r0, r4
 8008990:	7840      	ldrb	r0, [r0, #1]
 8008992:	2800      	cmp	r0, #0
 8008994:	d100      	bne.n	8008998 <SetButtonEvents+0x40>
 8008996:	e155      	b.n	8008c44 <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008998:	00fc      	lsls	r4, r7, #3
 800899a:	19e4      	adds	r4, r4, r7
 800899c:	48af      	ldr	r0, [pc, #700]	; (8008c5c <SetButtonEvents+0x304>)
 800899e:	1900      	adds	r0, r0, r4
 80089a0:	465c      	mov	r4, fp
 80089a2:	7084      	strb	r4, [r0, #2]
 80089a4:	70c6      	strb	r6, [r0, #3]
 80089a6:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 80089a8:	4654      	mov	r4, sl
 80089aa:	7144      	strb	r4, [r0, #5]
 80089ac:	464c      	mov	r4, r9
 80089ae:	7184      	strb	r4, [r0, #6]
 80089b0:	4644      	mov	r4, r8
 80089b2:	71c4      	strb	r4, [r0, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d005      	beq.n	80089c4 <SetButtonEvents+0x6c>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d000      	beq.n	80089be <SetButtonEvents+0x66>
 80089bc:	e0ca      	b.n	8008b54 <SetButtonEvents+0x1fc>
 80089be:	2900      	cmp	r1, #0
 80089c0:	d100      	bne.n	80089c4 <SetButtonEvents+0x6c>
 80089c2:	e0c7      	b.n	8008b54 <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80089c4:	00f8      	lsls	r0, r7, #3
 80089c6:	19c0      	adds	r0, r0, r7
 80089c8:	49a4      	ldr	r1, [pc, #656]	; (8008c5c <SetButtonEvents+0x304>)
 80089ca:	1809      	adds	r1, r1, r0
 80089cc:	7a08      	ldrb	r0, [r1, #8]
 80089ce:	2401      	movs	r4, #1
 80089d0:	4320      	orrs	r0, r4
 80089d2:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d005      	beq.n	80089e4 <SetButtonEvents+0x8c>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d000      	beq.n	80089de <SetButtonEvents+0x86>
 80089dc:	e0c6      	b.n	8008b6c <SetButtonEvents+0x214>
 80089de:	2a00      	cmp	r2, #0
 80089e0:	d100      	bne.n	80089e4 <SetButtonEvents+0x8c>
 80089e2:	e0c3      	b.n	8008b6c <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80089e4:	00f9      	lsls	r1, r7, #3
 80089e6:	19c9      	adds	r1, r1, r7
 80089e8:	4a9c      	ldr	r2, [pc, #624]	; (8008c5c <SetButtonEvents+0x304>)
 80089ea:	1852      	adds	r2, r2, r1
 80089ec:	7a11      	ldrb	r1, [r2, #8]
 80089ee:	2002      	movs	r0, #2
 80089f0:	4301      	orrs	r1, r0
 80089f2:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d006      	beq.n	8008a06 <SetButtonEvents+0xae>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d000      	beq.n	80089fe <SetButtonEvents+0xa6>
 80089fc:	e0c2      	b.n	8008b84 <SetButtonEvents+0x22c>
 80089fe:	465a      	mov	r2, fp
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	d100      	bne.n	8008a06 <SetButtonEvents+0xae>
 8008a04:	e0be      	b.n	8008b84 <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008a06:	00f9      	lsls	r1, r7, #3
 8008a08:	19c9      	adds	r1, r1, r7
 8008a0a:	4a94      	ldr	r2, [pc, #592]	; (8008c5c <SetButtonEvents+0x304>)
 8008a0c:	1852      	adds	r2, r2, r1
 8008a0e:	7a11      	ldrb	r1, [r2, #8]
 8008a10:	2004      	movs	r0, #4
 8008a12:	4301      	orrs	r1, r0
 8008a14:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d005      	beq.n	8008a26 <SetButtonEvents+0xce>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d000      	beq.n	8008a20 <SetButtonEvents+0xc8>
 8008a1e:	e0be      	b.n	8008b9e <SetButtonEvents+0x246>
 8008a20:	2e00      	cmp	r6, #0
 8008a22:	d100      	bne.n	8008a26 <SetButtonEvents+0xce>
 8008a24:	e0bb      	b.n	8008b9e <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008a26:	00f9      	lsls	r1, r7, #3
 8008a28:	19c9      	adds	r1, r1, r7
 8008a2a:	4a8c      	ldr	r2, [pc, #560]	; (8008c5c <SetButtonEvents+0x304>)
 8008a2c:	1852      	adds	r2, r2, r1
 8008a2e:	7a11      	ldrb	r1, [r2, #8]
 8008a30:	2008      	movs	r0, #8
 8008a32:	4301      	orrs	r1, r0
 8008a34:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d005      	beq.n	8008a46 <SetButtonEvents+0xee>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d000      	beq.n	8008a40 <SetButtonEvents+0xe8>
 8008a3e:	e0bb      	b.n	8008bb8 <SetButtonEvents+0x260>
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	d100      	bne.n	8008a46 <SetButtonEvents+0xee>
 8008a44:	e0b8      	b.n	8008bb8 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008a46:	00f9      	lsls	r1, r7, #3
 8008a48:	19c9      	adds	r1, r1, r7
 8008a4a:	4a84      	ldr	r2, [pc, #528]	; (8008c5c <SetButtonEvents+0x304>)
 8008a4c:	1852      	adds	r2, r2, r1
 8008a4e:	7a11      	ldrb	r1, [r2, #8]
 8008a50:	2010      	movs	r0, #16
 8008a52:	4301      	orrs	r1, r0
 8008a54:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d006      	beq.n	8008a68 <SetButtonEvents+0x110>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d000      	beq.n	8008a60 <SetButtonEvents+0x108>
 8008a5e:	e0b8      	b.n	8008bd2 <SetButtonEvents+0x27a>
 8008a60:	4652      	mov	r2, sl
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d100      	bne.n	8008a68 <SetButtonEvents+0x110>
 8008a66:	e0b4      	b.n	8008bd2 <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008a68:	00f9      	lsls	r1, r7, #3
 8008a6a:	19c9      	adds	r1, r1, r7
 8008a6c:	4a7b      	ldr	r2, [pc, #492]	; (8008c5c <SetButtonEvents+0x304>)
 8008a6e:	1852      	adds	r2, r2, r1
 8008a70:	7a11      	ldrb	r1, [r2, #8]
 8008a72:	2020      	movs	r0, #32
 8008a74:	4301      	orrs	r1, r0
 8008a76:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d006      	beq.n	8008a8a <SetButtonEvents+0x132>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d000      	beq.n	8008a82 <SetButtonEvents+0x12a>
 8008a80:	e0b4      	b.n	8008bec <SetButtonEvents+0x294>
 8008a82:	464a      	mov	r2, r9
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d100      	bne.n	8008a8a <SetButtonEvents+0x132>
 8008a88:	e0b0      	b.n	8008bec <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a8a:	00f9      	lsls	r1, r7, #3
 8008a8c:	19c9      	adds	r1, r1, r7
 8008a8e:	4a73      	ldr	r2, [pc, #460]	; (8008c5c <SetButtonEvents+0x304>)
 8008a90:	1852      	adds	r2, r2, r1
 8008a92:	7a11      	ldrb	r1, [r2, #8]
 8008a94:	2040      	movs	r0, #64	; 0x40
 8008a96:	4301      	orrs	r1, r0
 8008a98:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d006      	beq.n	8008aac <SetButtonEvents+0x154>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d000      	beq.n	8008aa4 <SetButtonEvents+0x14c>
 8008aa2:	e0b0      	b.n	8008c06 <SetButtonEvents+0x2ae>
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d100      	bne.n	8008aac <SetButtonEvents+0x154>
 8008aaa:	e0ac      	b.n	8008c06 <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008aac:	00fa      	lsls	r2, r7, #3
 8008aae:	19d2      	adds	r2, r2, r7
 8008ab0:	4b6a      	ldr	r3, [pc, #424]	; (8008c5c <SetButtonEvents+0x304>)
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	7a19      	ldrb	r1, [r3, #8]
 8008ab6:	2280      	movs	r2, #128	; 0x80
 8008ab8:	4252      	negs	r2, r2
 8008aba:	430a      	orrs	r2, r1
 8008abc:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
	}
	
	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008abe:	003c      	movs	r4, r7
 8008ac0:	343a      	adds	r4, #58	; 0x3a
 8008ac2:	00a4      	lsls	r4, r4, #2
 8008ac4:	ab02      	add	r3, sp, #8
 8008ac6:	1d99      	adds	r1, r3, #6
 8008ac8:	0020      	movs	r0, r4
 8008aca:	f7fe ff15 	bl	80078f8 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d000      	beq.n	8008ad4 <SetButtonEvents+0x17c>
 8008ad2:	e0bf      	b.n	8008c54 <SetButtonEvents+0x2fc>
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008ad4:	ab02      	add	r3, sp, #8
 8008ad6:	3306      	adds	r3, #6
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	00fa      	lsls	r2, r7, #3
 8008ae0:	19d2      	adds	r2, r2, r7
 8008ae2:	4f5e      	ldr	r7, [pc, #376]	; (8008c5c <SetButtonEvents+0x304>)
 8008ae4:	18bf      	adds	r7, r7, r2
 8008ae6:	7a39      	ldrb	r1, [r7, #8]
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	d000      	beq.n	8008aee <SetButtonEvents+0x196>
 8008aec:	e098      	b.n	8008c20 <SetButtonEvents+0x2c8>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008aee:	1c63      	adds	r3, r4, #1
 8008af0:	aa02      	add	r2, sp, #8
 8008af2:	1d97      	adds	r7, r2, #6
 8008af4:	0039      	movs	r1, r7
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7fe fefd 	bl	80078f8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008afe:	883a      	ldrh	r2, [r7, #0]
 8008b00:	4659      	mov	r1, fp
 8008b02:	0209      	lsls	r1, r1, #8
 8008b04:	4653      	mov	r3, sl
 8008b06:	430b      	orrs	r3, r1
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d000      	beq.n	8008b0e <SetButtonEvents+0x1b6>
 8008b0c:	e090      	b.n	8008c30 <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008b0e:	1ca3      	adds	r3, r4, #2
 8008b10:	aa02      	add	r2, sp, #8
 8008b12:	1d97      	adds	r7, r2, #6
 8008b14:	0039      	movs	r1, r7
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f7fe feed 	bl	80078f8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008b1e:	883a      	ldrh	r2, [r7, #0]
 8008b20:	0236      	lsls	r6, r6, #8
 8008b22:	464b      	mov	r3, r9
 8008b24:	4333      	orrs	r3, r6
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d000      	beq.n	8008b2c <SetButtonEvents+0x1d4>
 8008b2a:	e086      	b.n	8008c3a <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008b2c:	3403      	adds	r4, #3
 8008b2e:	ab02      	add	r3, sp, #8
 8008b30:	1d9e      	adds	r6, r3, #6
 8008b32:	0031      	movs	r1, r6
 8008b34:	0020      	movs	r0, r4
 8008b36:	f7fe fedf 	bl	80078f8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008b3a:	8832      	ldrh	r2, [r6, #0]
 8008b3c:	022d      	lsls	r5, r5, #8
 8008b3e:	4643      	mov	r3, r8
 8008b40:	432b      	orrs	r3, r5
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d100      	bne.n	8008b48 <SetButtonEvents+0x1f0>
 8008b46:	e087      	b.n	8008c58 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008b48:	0019      	movs	r1, r3
 8008b4a:	0020      	movs	r0, r4
 8008b4c:	f7fe ff86 	bl	8007a5c <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008b50:	2000      	movs	r0, #0
 8008b52:	e078      	b.n	8008c46 <SetButtonEvents+0x2ee>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 8008b54:	4319      	orrs	r1, r3
 8008b56:	d000      	beq.n	8008b5a <SetButtonEvents+0x202>
 8008b58:	e73c      	b.n	80089d4 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008b5a:	00f8      	lsls	r0, r7, #3
 8008b5c:	19c0      	adds	r0, r0, r7
 8008b5e:	493f      	ldr	r1, [pc, #252]	; (8008c5c <SetButtonEvents+0x304>)
 8008b60:	1809      	adds	r1, r1, r0
 8008b62:	7a08      	ldrb	r0, [r1, #8]
 8008b64:	2401      	movs	r4, #1
 8008b66:	43a0      	bics	r0, r4
 8008b68:	7208      	strb	r0, [r1, #8]
 8008b6a:	e733      	b.n	80089d4 <SetButtonEvents+0x7c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	d000      	beq.n	8008b72 <SetButtonEvents+0x21a>
 8008b70:	e740      	b.n	80089f4 <SetButtonEvents+0x9c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008b72:	00f9      	lsls	r1, r7, #3
 8008b74:	19c9      	adds	r1, r1, r7
 8008b76:	4a39      	ldr	r2, [pc, #228]	; (8008c5c <SetButtonEvents+0x304>)
 8008b78:	1852      	adds	r2, r2, r1
 8008b7a:	7a11      	ldrb	r1, [r2, #8]
 8008b7c:	2002      	movs	r0, #2
 8008b7e:	4381      	bics	r1, r0
 8008b80:	7211      	strb	r1, [r2, #8]
 8008b82:	e737      	b.n	80089f4 <SetButtonEvents+0x9c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 8008b84:	465a      	mov	r2, fp
 8008b86:	431a      	orrs	r2, r3
 8008b88:	d000      	beq.n	8008b8c <SetButtonEvents+0x234>
 8008b8a:	e744      	b.n	8008a16 <SetButtonEvents+0xbe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008b8c:	00f9      	lsls	r1, r7, #3
 8008b8e:	19c9      	adds	r1, r1, r7
 8008b90:	4a32      	ldr	r2, [pc, #200]	; (8008c5c <SetButtonEvents+0x304>)
 8008b92:	1852      	adds	r2, r2, r1
 8008b94:	7a11      	ldrb	r1, [r2, #8]
 8008b96:	2004      	movs	r0, #4
 8008b98:	4381      	bics	r1, r0
 8008b9a:	7211      	strb	r1, [r2, #8]
 8008b9c:	e73b      	b.n	8008a16 <SetButtonEvents+0xbe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 8008b9e:	0032      	movs	r2, r6
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	d000      	beq.n	8008ba6 <SetButtonEvents+0x24e>
 8008ba4:	e747      	b.n	8008a36 <SetButtonEvents+0xde>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008ba6:	00f9      	lsls	r1, r7, #3
 8008ba8:	19c9      	adds	r1, r1, r7
 8008baa:	4a2c      	ldr	r2, [pc, #176]	; (8008c5c <SetButtonEvents+0x304>)
 8008bac:	1852      	adds	r2, r2, r1
 8008bae:	7a11      	ldrb	r1, [r2, #8]
 8008bb0:	2008      	movs	r0, #8
 8008bb2:	4381      	bics	r1, r0
 8008bb4:	7211      	strb	r1, [r2, #8]
 8008bb6:	e73e      	b.n	8008a36 <SetButtonEvents+0xde>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 8008bb8:	002a      	movs	r2, r5
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	d000      	beq.n	8008bc0 <SetButtonEvents+0x268>
 8008bbe:	e74a      	b.n	8008a56 <SetButtonEvents+0xfe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008bc0:	00f9      	lsls	r1, r7, #3
 8008bc2:	19c9      	adds	r1, r1, r7
 8008bc4:	4a25      	ldr	r2, [pc, #148]	; (8008c5c <SetButtonEvents+0x304>)
 8008bc6:	1852      	adds	r2, r2, r1
 8008bc8:	7a11      	ldrb	r1, [r2, #8]
 8008bca:	2010      	movs	r0, #16
 8008bcc:	4381      	bics	r1, r0
 8008bce:	7211      	strb	r1, [r2, #8]
 8008bd0:	e741      	b.n	8008a56 <SetButtonEvents+0xfe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	d000      	beq.n	8008bda <SetButtonEvents+0x282>
 8008bd8:	e74e      	b.n	8008a78 <SetButtonEvents+0x120>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008bda:	00f9      	lsls	r1, r7, #3
 8008bdc:	19c9      	adds	r1, r1, r7
 8008bde:	4a1f      	ldr	r2, [pc, #124]	; (8008c5c <SetButtonEvents+0x304>)
 8008be0:	1852      	adds	r2, r2, r1
 8008be2:	7a11      	ldrb	r1, [r2, #8]
 8008be4:	2020      	movs	r0, #32
 8008be6:	4381      	bics	r1, r0
 8008be8:	7211      	strb	r1, [r2, #8]
 8008bea:	e745      	b.n	8008a78 <SetButtonEvents+0x120>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 8008bec:	464a      	mov	r2, r9
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	d000      	beq.n	8008bf4 <SetButtonEvents+0x29c>
 8008bf2:	e752      	b.n	8008a9a <SetButtonEvents+0x142>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008bf4:	00f9      	lsls	r1, r7, #3
 8008bf6:	19c9      	adds	r1, r1, r7
 8008bf8:	4a18      	ldr	r2, [pc, #96]	; (8008c5c <SetButtonEvents+0x304>)
 8008bfa:	1852      	adds	r2, r2, r1
 8008bfc:	7a11      	ldrb	r1, [r2, #8]
 8008bfe:	2040      	movs	r0, #64	; 0x40
 8008c00:	4381      	bics	r1, r0
 8008c02:	7211      	strb	r1, [r2, #8]
 8008c04:	e749      	b.n	8008a9a <SetButtonEvents+0x142>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 8008c06:	4642      	mov	r2, r8
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	d000      	beq.n	8008c0e <SetButtonEvents+0x2b6>
 8008c0c:	e757      	b.n	8008abe <SetButtonEvents+0x166>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008c0e:	00fa      	lsls	r2, r7, #3
 8008c10:	19d2      	adds	r2, r2, r7
 8008c12:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <SetButtonEvents+0x304>)
 8008c14:	189b      	adds	r3, r3, r2
 8008c16:	7a19      	ldrb	r1, [r3, #8]
 8008c18:	227f      	movs	r2, #127	; 0x7f
 8008c1a:	400a      	ands	r2, r1
 8008c1c:	721a      	strb	r2, [r3, #8]
 8008c1e:	e74e      	b.n	8008abe <SetButtonEvents+0x166>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008c20:	0200      	lsls	r0, r0, #8
 8008c22:	4301      	orrs	r1, r0
 8008c24:	ab02      	add	r3, sp, #8
 8008c26:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008c28:	0020      	movs	r0, r4
 8008c2a:	f7fe ff17 	bl	8007a5c <EE_WriteVariable>
 8008c2e:	e75e      	b.n	8008aee <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008c30:	0019      	movs	r1, r3
 8008c32:	9801      	ldr	r0, [sp, #4]
 8008c34:	f7fe ff12 	bl	8007a5c <EE_WriteVariable>
 8008c38:	e769      	b.n	8008b0e <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	9801      	ldr	r0, [sp, #4]
 8008c3e:	f7fe ff0d 	bl	8007a5c <EE_WriteVariable>
 8008c42:	e773      	b.n	8008b2c <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008c44:	200b      	movs	r0, #11
}
 8008c46:	b005      	add	sp, #20
 8008c48:	bc3c      	pop	{r2, r3, r4, r5}
 8008c4a:	4690      	mov	r8, r2
 8008c4c:	4699      	mov	r9, r3
 8008c4e:	46a2      	mov	sl, r4
 8008c50:	46ab      	mov	fp, r5
 8008c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008c54:	200b      	movs	r0, #11
 8008c56:	e7f6      	b.n	8008c46 <SetButtonEvents+0x2ee>
	return result;
 8008c58:	2000      	movs	r0, #0
 8008c5a:	e7f4      	b.n	8008c46 <SetButtonEvents+0x2ee>
 8008c5c:	20001140 	.word	0x20001140

08008c60 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008c60:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008c62:	f007 ffb4 	bl	8010bce <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008c66:	b2c4      	uxtb	r4, r0
 8008c68:	0020      	movs	r0, r4
 8008c6a:	f7fe fce7 	bl	800763c <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008c6e:	0020      	movs	r0, r4
 8008c70:	f7fe fd12 	bl	8007698 <SwitchStreamDMAToMsg>
}
 8008c74:	bd10      	pop	{r4, pc}
	...

08008c78 <SetupDMAStreams>:
{
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	000d      	movs	r5, r1
 8008c7e:	0014      	movs	r4, r2
 8008c80:	220f      	movs	r2, #15
 8008c82:	446a      	add	r2, sp
 8008c84:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008c86:	aa0a      	add	r2, sp, #40	; 0x28
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00d      	beq.n	8008caa <SetupDMAStreams+0x32>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d100      	bne.n	8008c94 <SetupDMAStreams+0x1c>
 8008c92:	e0b9      	b.n	8008e08 <SetupDMAStreams+0x190>
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	d100      	bne.n	8008c9a <SetupDMAStreams+0x22>
 8008c98:	e0b9      	b.n	8008e0e <SetupDMAStreams+0x196>
	if (direction == FORWARD) 
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d00a      	beq.n	8008cb4 <SetupDMAStreams+0x3c>
	else if (direction == BACKWARD) 
 8008c9e:	2801      	cmp	r0, #1
 8008ca0:	d041      	beq.n	8008d26 <SetupDMAStreams+0xae>
	else if (direction == BIDIRECTIONAL) 
 8008ca2:	2802      	cmp	r0, #2
 8008ca4:	d069      	beq.n	8008d7a <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 8008ca6:	2067      	movs	r0, #103	; 0x67
 8008ca8:	e0af      	b.n	8008e0a <SetupDMAStreams+0x192>
		portStatus[src] = STREAM;
 8008caa:	4a5b      	ldr	r2, [pc, #364]	; (8008e18 <SetupDMAStreams+0x1a0>)
 8008cac:	2102      	movs	r1, #2
 8008cae:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008cb0:	2067      	movs	r0, #103	; 0x67
 8008cb2:	e0aa      	b.n	8008e0a <SetupDMAStreams+0x192>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f005 ffb5 	bl	800ec24 <GetUart>
 8008cba:	0006      	movs	r6, r0
 8008cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8008cbe:	7818      	ldrb	r0, [r3, #0]
 8008cc0:	f005 ffb0 	bl	800ec24 <GetUart>
 8008cc4:	0001      	movs	r1, r0
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	0030      	movs	r0, r6
 8008cca:	f7fe fd17 	bl	80076fc <StartDMAstream>
 8008cce:	2817      	cmp	r0, #23
 8008cd0:	d100      	bne.n	8008cd4 <SetupDMAStreams+0x5c>
 8008cd2:	e09a      	b.n	8008e0a <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008cd4:	0160      	lsls	r0, r4, #5
 8008cd6:	1b00      	subs	r0, r0, r4
 8008cd8:	0080      	lsls	r0, r0, #2
 8008cda:	1900      	adds	r0, r0, r4
 8008cdc:	00c0      	lsls	r0, r0, #3
 8008cde:	21fa      	movs	r1, #250	; 0xfa
 8008ce0:	0089      	lsls	r1, r1, #2
 8008ce2:	f7f7 fa35 	bl	8000150 <__udivsi3>
 8008ce6:	0001      	movs	r1, r0
 8008ce8:	260f      	movs	r6, #15
 8008cea:	446e      	add	r6, sp
 8008cec:	4b4b      	ldr	r3, [pc, #300]	; (8008e1c <SetupDMAStreams+0x1a4>)
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	0033      	movs	r3, r6
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	484a      	ldr	r0, [pc, #296]	; (8008e20 <SetupDMAStreams+0x1a8>)
 8008cf6:	f007 fe0d 	bl	8010914 <xTimerCreate>
 8008cfa:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008cfc:	7833      	ldrb	r3, [r6, #0]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4a48      	ldr	r2, [pc, #288]	; (8008e24 <SetupDMAStreams+0x1ac>)
 8008d04:	509d      	str	r5, [r3, r2]
	if (xTimerStream != NULL)
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d100      	bne.n	8008d0c <SetupDMAStreams+0x94>
 8008d0a:	e082      	b.n	8008e12 <SetupDMAStreams+0x19a>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008d0c:	f007 f894 	bl	800fe38 <xTaskGetTickCount>
 8008d10:	0002      	movs	r2, r0
 8008d12:	2301      	movs	r3, #1
 8008d14:	425b      	negs	r3, r3
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	f007 fe1d 	bl	801095c <xTimerGenericCommand>
	return BOS_OK;
 8008d22:	2000      	movs	r0, #0
 8008d24:	e071      	b.n	8008e0a <SetupDMAStreams+0x192>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008d26:	0010      	movs	r0, r2
 8008d28:	f005 ff7c 	bl	800ec24 <GetUart>
 8008d2c:	0006      	movs	r6, r0
 8008d2e:	230f      	movs	r3, #15
 8008d30:	446b      	add	r3, sp
 8008d32:	7818      	ldrb	r0, [r3, #0]
 8008d34:	f005 ff76 	bl	800ec24 <GetUart>
 8008d38:	0001      	movs	r1, r0
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	0030      	movs	r0, r6
 8008d3e:	f7fe fcdd 	bl	80076fc <StartDMAstream>
 8008d42:	2817      	cmp	r0, #23
 8008d44:	d061      	beq.n	8008e0a <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008d46:	0160      	lsls	r0, r4, #5
 8008d48:	1b00      	subs	r0, r0, r4
 8008d4a:	0080      	lsls	r0, r0, #2
 8008d4c:	1900      	adds	r0, r0, r4
 8008d4e:	00c0      	lsls	r0, r0, #3
 8008d50:	21fa      	movs	r1, #250	; 0xfa
 8008d52:	0089      	lsls	r1, r1, #2
 8008d54:	f7f7 f9fc 	bl	8000150 <__udivsi3>
 8008d58:	0001      	movs	r1, r0
 8008d5a:	4b30      	ldr	r3, [pc, #192]	; (8008e1c <SetupDMAStreams+0x1a4>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	ab0a      	add	r3, sp, #40	; 0x28
 8008d60:	2200      	movs	r2, #0
 8008d62:	482f      	ldr	r0, [pc, #188]	; (8008e20 <SetupDMAStreams+0x1a8>)
 8008d64:	f007 fdd6 	bl	8010914 <xTimerCreate>
 8008d68:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008d6a:	230f      	movs	r3, #15
 8008d6c:	446b      	add	r3, sp
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4a2b      	ldr	r2, [pc, #172]	; (8008e24 <SetupDMAStreams+0x1ac>)
 8008d76:	509d      	str	r5, [r3, r2]
 8008d78:	e7c5      	b.n	8008d06 <SetupDMAStreams+0x8e>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f005 ff52 	bl	800ec24 <GetUart>
 8008d80:	0006      	movs	r6, r0
 8008d82:	ab0a      	add	r3, sp, #40	; 0x28
 8008d84:	7818      	ldrb	r0, [r3, #0]
 8008d86:	f005 ff4d 	bl	800ec24 <GetUart>
 8008d8a:	0001      	movs	r1, r0
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	0030      	movs	r0, r6
 8008d90:	f7fe fcb4 	bl	80076fc <StartDMAstream>
 8008d94:	2817      	cmp	r0, #23
 8008d96:	d038      	beq.n	8008e0a <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008d98:	0160      	lsls	r0, r4, #5
 8008d9a:	1b00      	subs	r0, r0, r4
 8008d9c:	0080      	lsls	r0, r0, #2
 8008d9e:	1900      	adds	r0, r0, r4
 8008da0:	00c0      	lsls	r0, r0, #3
 8008da2:	21fa      	movs	r1, #250	; 0xfa
 8008da4:	0089      	lsls	r1, r1, #2
 8008da6:	f7f7 f9d3 	bl	8000150 <__udivsi3>
 8008daa:	0004      	movs	r4, r0
 8008dac:	260f      	movs	r6, #15
 8008dae:	446e      	add	r6, sp
 8008db0:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <SetupDMAStreams+0x1a4>)
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	0033      	movs	r3, r6
 8008db6:	2200      	movs	r2, #0
 8008db8:	0001      	movs	r1, r0
 8008dba:	4819      	ldr	r0, [pc, #100]	; (8008e20 <SetupDMAStreams+0x1a8>)
 8008dbc:	f007 fdaa 	bl	8010914 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008dc0:	7833      	ldrb	r3, [r6, #0]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a17      	ldr	r2, [pc, #92]	; (8008e24 <SetupDMAStreams+0x1ac>)
 8008dc8:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008dca:	ab0a      	add	r3, sp, #40	; 0x28
 8008dcc:	7818      	ldrb	r0, [r3, #0]
 8008dce:	f005 ff29 	bl	800ec24 <GetUart>
 8008dd2:	0007      	movs	r7, r0
 8008dd4:	7830      	ldrb	r0, [r6, #0]
 8008dd6:	f005 ff25 	bl	800ec24 <GetUart>
 8008dda:	0001      	movs	r1, r0
 8008ddc:	2201      	movs	r2, #1
 8008dde:	0038      	movs	r0, r7
 8008de0:	f7fe fc8c 	bl	80076fc <StartDMAstream>
 8008de4:	2817      	cmp	r0, #23
 8008de6:	d010      	beq.n	8008e0a <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <SetupDMAStreams+0x1a4>)
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	ab0a      	add	r3, sp, #40	; 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	0021      	movs	r1, r4
 8008df2:	480b      	ldr	r0, [pc, #44]	; (8008e20 <SetupDMAStreams+0x1a8>)
 8008df4:	f007 fd8e 	bl	8010914 <xTimerCreate>
 8008df8:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 8008dfa:	ab0a      	add	r3, sp, #40	; 0x28
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a08      	ldr	r2, [pc, #32]	; (8008e24 <SetupDMAStreams+0x1ac>)
 8008e04:	509d      	str	r5, [r3, r2]
 8008e06:	e77e      	b.n	8008d06 <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 8008e08:	2067      	movs	r0, #103	; 0x67
}
 8008e0a:	b005      	add	sp, #20
 8008e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8008e0e:	2067      	movs	r0, #103	; 0x67
 8008e10:	e7fb      	b.n	8008e0a <SetupDMAStreams+0x192>
	return BOS_OK;
 8008e12:	2000      	movs	r0, #0
 8008e14:	e7f9      	b.n	8008e0a <SetupDMAStreams+0x192>
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	20000db0 	.word	0x20000db0
 8008e1c:	08008c61 	.word	0x08008c61
 8008e20:	0801afd8 	.word	0x0801afd8
 8008e24:	20001100 	.word	0x20001100

08008e28 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008e28:	b510      	push	{r4, lr}
	switch (port)
 8008e2a:	2805      	cmp	r0, #5
 8008e2c:	d80a      	bhi.n	8008e44 <NotifyMessagingTask+0x1c>
 8008e2e:	0080      	lsls	r0, r0, #2
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <NotifyMessagingTask+0x60>)
 8008e32:	581b      	ldr	r3, [r3, r0]
 8008e34:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008e36:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <NotifyMessagingTask+0x64>)
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	2100      	movs	r1, #0
 8008e40:	f007 fc84 	bl	801074c <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008e44:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008e46:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <NotifyMessagingTask+0x68>)
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	2100      	movs	r1, #0
 8008e50:	f007 fc7c 	bl	801074c <xTaskGenericNotify>
 8008e54:	e7f6      	b.n	8008e44 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <NotifyMessagingTask+0x6c>)
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f007 fc74 	bl	801074c <xTaskGenericNotify>
 8008e64:	e7ee      	b.n	8008e44 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <NotifyMessagingTask+0x70>)
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f007 fc6c 	bl	801074c <xTaskGenericNotify>
 8008e74:	e7e6      	b.n	8008e44 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <NotifyMessagingTask+0x74>)
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f007 fc64 	bl	801074c <xTaskGenericNotify>
}
 8008e84:	e7de      	b.n	8008e44 <NotifyMessagingTask+0x1c>
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	0801afc0 	.word	0x0801afc0
 8008e8c:	2000111c 	.word	0x2000111c
 8008e90:	20001120 	.word	0x20001120
 8008e94:	20001124 	.word	0x20001124
 8008e98:	20001128 	.word	0x20001128
 8008e9c:	2000112c 	.word	0x2000112c

08008ea0 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea2:	46de      	mov	lr, fp
 8008ea4:	4657      	mov	r7, sl
 8008ea6:	464e      	mov	r6, r9
 8008ea8:	4645      	mov	r5, r8
 8008eaa:	b5e0      	push	{r5, r6, r7, lr}
 8008eac:	b085      	sub	sp, #20
 8008eae:	0007      	movs	r7, r0
 8008eb0:	4688      	mov	r8, r1
 8008eb2:	0015      	movs	r5, r2
 8008eb4:	4699      	mov	r9, r3
 8008eb6:	ab0e      	add	r3, sp, #56	; 0x38
 8008eb8:	881e      	ldrh	r6, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008eba:	0003      	movs	r3, r0
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <SendMessageFromPort+0x22>
 8008ec0:	e167      	b.n	8009192 <SendMessageFromPort+0x2f2>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d104      	bne.n	8008ed0 <SendMessageFromPort+0x30>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008ec6:	2aff      	cmp	r2, #255	; 0xff
 8008ec8:	d002      	beq.n	8008ed0 <SendMessageFromPort+0x30>
 8008eca:	2afe      	cmp	r2, #254	; 0xfe
 8008ecc:	d000      	beq.n	8008ed0 <SendMessageFromPort+0x30>
 8008ece:	e162      	b.n	8009196 <SendMessageFromPort+0x2f6>
 8008ed0:	2f00      	cmp	r7, #0
 8008ed2:	d005      	beq.n	8008ee0 <SendMessageFromPort+0x40>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8008ed4:	4643      	mov	r3, r8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <SendMessageFromPort+0x40>
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	d100      	bne.n	8008ee0 <SendMessageFromPort+0x40>
 8008ede:	e15c      	b.n	800919a <SendMessageFromPort+0x2fa>
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f006 ff0d 	bl	800fd00 <uxTaskPriorityGet>
 8008ee6:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008ee8:	2105      	movs	r1, #5
 8008eea:	2000      	movs	r0, #0
 8008eec:	f006 ff18 	bl	800fd20 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8008ef0:	4bae      	ldr	r3, [pc, #696]	; (80091ac <SendMessageFromPort+0x30c>)
 8008ef2:	2248      	movs	r2, #72	; 0x48
 8008ef4:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008ef6:	3212      	adds	r2, #18
 8008ef8:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008efa:	4643      	mov	r3, r8
 8008efc:	433b      	orrs	r3, r7
 8008efe:	d103      	bne.n	8008f08 <SendMessageFromPort+0x68>
 8008f00:	1cab      	adds	r3, r5, #2
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d902      	bls.n	8008f0e <SendMessageFromPort+0x6e>
 8008f08:	464b      	mov	r3, r9
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d134      	bne.n	8008f78 <SendMessageFromPort+0xd8>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8008f0e:	3e01      	subs	r6, #1
 8008f10:	4ba7      	ldr	r3, [pc, #668]	; (80091b0 <SendMessageFromPort+0x310>)
 8008f12:	5d9c      	ldrb	r4, [r3, r6]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008f14:	00f3      	lsls	r3, r6, #3
 8008f16:	1b9e      	subs	r6, r3, r6
 8008f18:	00f1      	lsls	r1, r6, #3
 8008f1a:	4ba6      	ldr	r3, [pc, #664]	; (80091b4 <SendMessageFromPort+0x314>)
 8008f1c:	18c9      	adds	r1, r1, r3
 8008f1e:	0022      	movs	r2, r4
 8008f20:	48a5      	ldr	r0, [pc, #660]	; (80091b8 <SendMessageFromPort+0x318>)
 8008f22:	f00b f86a 	bl	8013ffa <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008f26:	4ba1      	ldr	r3, [pc, #644]	; (80091ac <SendMessageFromPort+0x30c>)
 8008f28:	469a      	mov	sl, r3
 8008f2a:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008f2c:	1ce6      	adds	r6, r4, #3
 8008f2e:	0032      	movs	r2, r6
 8008f30:	0019      	movs	r1, r3
 8008f32:	48a2      	ldr	r0, [pc, #648]	; (80091bc <SendMessageFromPort+0x31c>)
 8008f34:	f00b f861 	bl	8013ffa <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008f38:	b2a4      	uxth	r4, r4
 8008f3a:	1ce1      	adds	r1, r4, #3
 8008f3c:	b289      	uxth	r1, r1
 8008f3e:	489f      	ldr	r0, [pc, #636]	; (80091bc <SendMessageFromPort+0x31c>)
 8008f40:	f005 f8c0 	bl	800e0c4 <CalculateCRC8>
 8008f44:	4653      	mov	r3, sl
 8008f46:	5598      	strb	r0, [r3, r6]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008f48:	2238      	movs	r2, #56	; 0x38
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	489b      	ldr	r0, [pc, #620]	; (80091bc <SendMessageFromPort+0x31c>)
 8008f4e:	f00b f85d 	bl	801400c <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008f52:	3502      	adds	r5, #2
 8008f54:	b2ed      	uxtb	r5, r5
 8008f56:	2d01      	cmp	r5, #1
 8008f58:	d900      	bls.n	8008f5c <SendMessageFromPort+0xbc>
 8008f5a:	e0eb      	b.n	8009134 <SendMessageFromPort+0x294>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <SendMessageFromPort+0xce>
 8008f62:	4643      	mov	r3, r8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <SendMessageFromPort+0xce>
			src = message[4];
 8008f68:	4b90      	ldr	r3, [pc, #576]	; (80091ac <SendMessageFromPort+0x30c>)
 8008f6a:	791b      	ldrb	r3, [r3, #4]
 8008f6c:	4698      	mov	r8, r3
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7fa ff54 	bl	8003e1c <FindBroadcastRoutes>
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008f74:	2501      	movs	r5, #1
 8008f76:	e0f5      	b.n	8009164 <SendMessageFromPort+0x2c4>
		if (src == 0)		src = myID;
 8008f78:	4643      	mov	r3, r8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <SendMessageFromPort+0xe4>
 8008f7e:	4b90      	ldr	r3, [pc, #576]	; (80091c0 <SendMessageFromPort+0x320>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	4698      	mov	r8, r3
		if (code > 0xFF)	extendCode = true;
 8008f84:	464b      	mov	r3, r9
 8008f86:	2bff      	cmp	r3, #255	; 0xff
 8008f88:	d84b      	bhi.n	8009022 <SendMessageFromPort+0x182>
	bool extendOptions = false, extendCode = false;
 8008f8a:	2100      	movs	r1, #0
		message[2] = length;	
 8008f8c:	4a87      	ldr	r2, [pc, #540]	; (80091ac <SendMessageFromPort+0x30c>)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	7093      	strb	r3, [r2, #2]
		message[3] = dst;						
 8008f92:	70d5      	strb	r5, [r2, #3]
		message[4] = src;
 8008f94:	4643      	mov	r3, r8
 8008f96:	7113      	strb	r3, [r2, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008f98:	488a      	ldr	r0, [pc, #552]	; (80091c4 <SendMessageFromPort+0x324>)
 8008f9a:	2306      	movs	r3, #6
 8008f9c:	56c3      	ldrsb	r3, [r0, r3]
 8008f9e:	79c0      	ldrb	r0, [r0, #7]
 8008fa0:	0080      	lsls	r0, r0, #2
 8008fa2:	4303      	orrs	r3, r0
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	0048      	lsls	r0, r1, #1
 8008fa8:	4303      	orrs	r3, r0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	7153      	strb	r3, [r2, #5]
		message[6+shift] = (uint8_t) code;
 8008fae:	4648      	mov	r0, r9
 8008fb0:	7190      	strb	r0, [r2, #6]
		if (extendCode == true) {
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	d037      	beq.n	8009026 <SendMessageFromPort+0x186>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008fb6:	0a02      	lsrs	r2, r0, #8
 8008fb8:	497c      	ldr	r1, [pc, #496]	; (80091ac <SendMessageFromPort+0x30c>)
 8008fba:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8008fc0:	2e2e      	cmp	r6, #46	; 0x2e
 8008fc2:	d933      	bls.n	800902c <SendMessageFromPort+0x18c>
			message[5] |= 0x80;		
 8008fc4:	2280      	movs	r2, #128	; 0x80
 8008fc6:	4252      	negs	r2, r2
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	4a78      	ldr	r2, [pc, #480]	; (80091ac <SendMessageFromPort+0x30c>)
 8008fcc:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8008fce:	4b7e      	ldr	r3, [pc, #504]	; (80091c8 <SendMessageFromPort+0x328>)
 8008fd0:	801e      	strh	r6, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 8008fd2:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8008fd4:	262e      	movs	r6, #46	; 0x2e
			while (totalNumberOfParams != 0)
 8008fd6:	4b7c      	ldr	r3, [pc, #496]	; (80091c8 <SendMessageFromPort+0x328>)
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	469a      	mov	sl, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d035      	beq.n	800904c <SendMessageFromPort+0x1ac>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8008fe0:	0031      	movs	r1, r6
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f7f7 f8b4 	bl	8000150 <__udivsi3>
 8008fe8:	b280      	uxth	r0, r0
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d13b      	bne.n	8009066 <SendMessageFromPort+0x1c6>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8008fee:	486f      	ldr	r0, [pc, #444]	; (80091ac <SendMessageFromPort+0x30c>)
 8008ff0:	7942      	ldrb	r2, [r0, #5]
 8008ff2:	237f      	movs	r3, #127	; 0x7f
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	7143      	strb	r3, [r0, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	3307      	adds	r3, #7
 8008ffc:	1818      	adds	r0, r3, r0
 8008ffe:	4c73      	ldr	r4, [pc, #460]	; (80091cc <SendMessageFromPort+0x32c>)
 8009000:	8821      	ldrh	r1, [r4, #0]
 8009002:	4b73      	ldr	r3, [pc, #460]	; (80091d0 <SendMessageFromPort+0x330>)
 8009004:	18c9      	adds	r1, r1, r3
 8009006:	4652      	mov	r2, sl
 8009008:	f00a fff7 	bl	8013ffa <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	8023      	strh	r3, [r4, #0]
 8009010:	4a6d      	ldr	r2, [pc, #436]	; (80091c8 <SendMessageFromPort+0x328>)
 8009012:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8009014:	465c      	mov	r4, fp
 8009016:	4454      	add	r4, sl
 8009018:	b2e4      	uxtb	r4, r4
 800901a:	3404      	adds	r4, #4
 800901c:	b2e4      	uxtb	r4, r4
					numberOfParams = totalNumberOfParams;
 800901e:	4656      	mov	r6, sl
 8009020:	e7d9      	b.n	8008fd6 <SendMessageFromPort+0x136>
		if (code > 0xFF)	extendCode = true;
 8009022:	2101      	movs	r1, #1
 8009024:	e7b2      	b.n	8008f8c <SendMessageFromPort+0xec>
 8009026:	2200      	movs	r2, #0
 8009028:	4693      	mov	fp, r2
 800902a:	e7c9      	b.n	8008fc0 <SendMessageFromPort+0x120>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800902c:	465b      	mov	r3, fp
 800902e:	3307      	adds	r3, #7
 8009030:	485e      	ldr	r0, [pc, #376]	; (80091ac <SendMessageFromPort+0x30c>)
 8009032:	1818      	adds	r0, r3, r0
 8009034:	4b65      	ldr	r3, [pc, #404]	; (80091cc <SendMessageFromPort+0x32c>)
 8009036:	8819      	ldrh	r1, [r3, #0]
 8009038:	4b65      	ldr	r3, [pc, #404]	; (80091d0 <SendMessageFromPort+0x330>)
 800903a:	18c9      	adds	r1, r1, r3
 800903c:	0032      	movs	r2, r6
 800903e:	f00a ffdc 	bl	8013ffa <memcpy>
			length = numberOfParams + shift + 4;
 8009042:	465b      	mov	r3, fp
 8009044:	199c      	adds	r4, r3, r6
 8009046:	b2e4      	uxtb	r4, r4
 8009048:	3404      	adds	r4, #4
 800904a:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true)
 800904c:	4b61      	ldr	r3, [pc, #388]	; (80091d4 <SendMessageFromPort+0x334>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d100      	bne.n	8009056 <SendMessageFromPort+0x1b6>
 8009054:	e767      	b.n	8008f26 <SendMessageFromPort+0x86>
			if (dstGroupID < BOS_BROADCAST)
 8009056:	4b60      	ldr	r3, [pc, #384]	; (80091d8 <SendMessageFromPort+0x338>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	469a      	mov	sl, r3
 800905c:	2bff      	cmp	r3, #255	; 0xff
 800905e:	d015      	beq.n	800908c <SendMessageFromPort+0x1ec>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8009060:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8009062:	2200      	movs	r2, #0
 8009064:	e016      	b.n	8009094 <SendMessageFromPort+0x1f4>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8009066:	9600      	str	r6, [sp, #0]
 8009068:	464b      	mov	r3, r9
 800906a:	002a      	movs	r2, r5
 800906c:	4641      	mov	r1, r8
 800906e:	0038      	movs	r0, r7
 8009070:	f7ff ff16 	bl	8008ea0 <SendMessageFromPort>
					osDelay(10);
 8009074:	200a      	movs	r0, #10
 8009076:	f005 ff27 	bl	800eec8 <osDelay>
					totalNumberOfParams -= numberOfParams;
 800907a:	4a53      	ldr	r2, [pc, #332]	; (80091c8 <SendMessageFromPort+0x328>)
 800907c:	8813      	ldrh	r3, [r2, #0]
 800907e:	1b9b      	subs	r3, r3, r6
 8009080:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 8009082:	4a52      	ldr	r2, [pc, #328]	; (80091cc <SendMessageFromPort+0x32c>)
 8009084:	8813      	ldrh	r3, [r2, #0]
 8009086:	18f3      	adds	r3, r6, r3
 8009088:	8013      	strh	r3, [r2, #0]
 800908a:	e7a4      	b.n	8008fd6 <SendMessageFromPort+0x136>
			uint8_t groupMembers = 0;
 800908c:	2200      	movs	r2, #0
 800908e:	e022      	b.n	80090d6 <SendMessageFromPort+0x236>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8009090:	3301      	adds	r3, #1
 8009092:	b29b      	uxth	r3, r3
 8009094:	4851      	ldr	r0, [pc, #324]	; (80091dc <SendMessageFromPort+0x33c>)
 8009096:	7800      	ldrb	r0, [r0, #0]
 8009098:	4298      	cmp	r0, r3
 800909a:	d316      	bcc.n	80090ca <SendMessageFromPort+0x22a>
					if (InGroup(i, dstGroupID))
 800909c:	1e58      	subs	r0, r3, #1
 800909e:	0040      	lsls	r0, r0, #1
 80090a0:	494f      	ldr	r1, [pc, #316]	; (80091e0 <SendMessageFromPort+0x340>)
 80090a2:	5a40      	ldrh	r0, [r0, r1]
 80090a4:	4651      	mov	r1, sl
 80090a6:	4108      	asrs	r0, r1
 80090a8:	07c1      	lsls	r1, r0, #31
 80090aa:	d5f1      	bpl.n	8009090 <SendMessageFromPort+0x1f0>
						++groupMembers;							// Add this member
 80090ac:	3201      	adds	r2, #1
 80090ae:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 80090b0:	18b0      	adds	r0, r6, r2
 80090b2:	3001      	adds	r0, #1
 80090b4:	282d      	cmp	r0, #45	; 0x2d
 80090b6:	dd00      	ble.n	80090ba <SendMessageFromPort+0x21a>
 80090b8:	e071      	b.n	800919e <SendMessageFromPort+0x2fe>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80090ba:	4659      	mov	r1, fp
 80090bc:	1dc8      	adds	r0, r1, #7
 80090be:	1830      	adds	r0, r6, r0
 80090c0:	1810      	adds	r0, r2, r0
 80090c2:	3801      	subs	r0, #1
 80090c4:	4939      	ldr	r1, [pc, #228]	; (80091ac <SendMessageFromPort+0x30c>)
 80090c6:	540b      	strb	r3, [r1, r0]
 80090c8:	e7e2      	b.n	8009090 <SendMessageFromPort+0x1f0>
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80090ca:	465b      	mov	r3, fp
 80090cc:	3307      	adds	r3, #7
 80090ce:	18f3      	adds	r3, r6, r3
 80090d0:	18d3      	adds	r3, r2, r3
 80090d2:	4836      	ldr	r0, [pc, #216]	; (80091ac <SendMessageFromPort+0x30c>)
 80090d4:	54c2      	strb	r2, [r0, r3]
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 80090d6:	4653      	mov	r3, sl
 80090d8:	2bff      	cmp	r3, #255	; 0xff
 80090da:	d01a      	beq.n	8009112 <SendMessageFromPort+0x272>
			else if (dstGroupID == BOS_BROADCAST)
 80090dc:	4653      	mov	r3, sl
 80090de:	2bff      	cmp	r3, #255	; 0xff
 80090e0:	d05f      	beq.n	80091a2 <SendMessageFromPort+0x302>
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80090e2:	18b3      	adds	r3, r6, r2
 80090e4:	3302      	adds	r3, #2
 80090e6:	2b2d      	cmp	r3, #45	; 0x2d
 80090e8:	dc5d      	bgt.n	80091a6 <SendMessageFromPort+0x306>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80090ea:	483e      	ldr	r0, [pc, #248]	; (80091e4 <SendMessageFromPort+0x344>)
 80090ec:	7803      	ldrb	r3, [r0, #0]
 80090ee:	3301      	adds	r3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	7003      	strb	r3, [r0, #0]
 80090f4:	4658      	mov	r0, fp
 80090f6:	3007      	adds	r0, #7
 80090f8:	1836      	adds	r6, r6, r0
 80090fa:	1996      	adds	r6, r2, r6
 80090fc:	3601      	adds	r6, #1
 80090fe:	482b      	ldr	r0, [pc, #172]	; (80091ac <SendMessageFromPort+0x30c>)
 8009100:	5583      	strb	r3, [r0, r6]
			if (dstGroupID == BOS_BROADCAST)
 8009102:	4653      	mov	r3, sl
 8009104:	2bff      	cmp	r3, #255	; 0xff
 8009106:	d012      	beq.n	800912e <SendMessageFromPort+0x28e>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009108:	18a4      	adds	r4, r4, r2
 800910a:	b2e4      	uxtb	r4, r4
 800910c:	3402      	adds	r4, #2
 800910e:	b2e4      	uxtb	r4, r4
 8009110:	e709      	b.n	8008f26 <SendMessageFromPort+0x86>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009112:	1c73      	adds	r3, r6, #1
 8009114:	2b2d      	cmp	r3, #45	; 0x2d
 8009116:	dce1      	bgt.n	80090dc <SendMessageFromPort+0x23c>
				message[7+shift+numberOfParams] = ++bcastID;
 8009118:	4832      	ldr	r0, [pc, #200]	; (80091e4 <SendMessageFromPort+0x344>)
 800911a:	7803      	ldrb	r3, [r0, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	b2db      	uxtb	r3, r3
 8009120:	7003      	strb	r3, [r0, #0]
 8009122:	4658      	mov	r0, fp
 8009124:	3007      	adds	r0, #7
 8009126:	1836      	adds	r6, r6, r0
 8009128:	4820      	ldr	r0, [pc, #128]	; (80091ac <SendMessageFromPort+0x30c>)
 800912a:	5583      	strb	r3, [r0, r6]
 800912c:	e7e9      	b.n	8009102 <SendMessageFromPort+0x262>
				length += 1;		// + bcastID
 800912e:	3401      	adds	r4, #1
 8009130:	b2e4      	uxtb	r4, r4
 8009132:	e6f8      	b.n	8008f26 <SendMessageFromPort+0x86>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8009134:	3404      	adds	r4, #4
 8009136:	b2a2      	uxth	r2, r4
 8009138:	2332      	movs	r3, #50	; 0x32
 800913a:	491c      	ldr	r1, [pc, #112]	; (80091ac <SendMessageFromPort+0x30c>)
 800913c:	0038      	movs	r0, r7
 800913e:	f005 fddd 	bl	800ecfc <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8009142:	9903      	ldr	r1, [sp, #12]
 8009144:	2000      	movs	r0, #0
 8009146:	f006 fdeb 	bl	800fd20 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 800914a:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <SendMessageFromPort+0x348>)
 800914c:	2202      	movs	r2, #2
 800914e:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009150:	2000      	movs	r0, #0
}
 8009152:	b005      	add	sp, #20
 8009154:	bc3c      	pop	{r2, r3, r4, r5}
 8009156:	4690      	mov	r8, r2
 8009158:	4699      	mov	r9, r3
 800915a:	46a2      	mov	sl, r4
 800915c:	46ab      	mov	fp, r5
 800915e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8009160:	3501      	adds	r5, #1
 8009162:	b2ed      	uxtb	r5, r5
 8009164:	2d05      	cmp	r5, #5
 8009166:	d8ec      	bhi.n	8009142 <SendMessageFromPort+0x2a2>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <SendMessageFromPort+0x320>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	4a1e      	ldr	r2, [pc, #120]	; (80091ec <SendMessageFromPort+0x34c>)
 8009172:	5a9b      	ldrh	r3, [r3, r2]
 8009174:	1e6a      	subs	r2, r5, #1
 8009176:	4113      	asrs	r3, r2
 8009178:	07db      	lsls	r3, r3, #31
 800917a:	d5f1      	bpl.n	8009160 <SendMessageFromPort+0x2c0>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 800917c:	1d22      	adds	r2, r4, #4
 800917e:	b292      	uxth	r2, r2
 8009180:	2332      	movs	r3, #50	; 0x32
 8009182:	490a      	ldr	r1, [pc, #40]	; (80091ac <SendMessageFromPort+0x30c>)
 8009184:	0028      	movs	r0, r5
 8009186:	f005 fdb9 	bl	800ecfc <writePxDMAMutex>
				Delay_ms(1);
 800918a:	2001      	movs	r0, #1
 800918c:	f007 ff18 	bl	8010fc0 <HAL_Delay>
 8009190:	e7e6      	b.n	8009160 <SendMessageFromPort+0x2c0>
		return BOS_ERR_WrongParam; 
 8009192:	2067      	movs	r0, #103	; 0x67
 8009194:	e7dd      	b.n	8009152 <SendMessageFromPort+0x2b2>
 8009196:	2067      	movs	r0, #103	; 0x67
 8009198:	e7db      	b.n	8009152 <SendMessageFromPort+0x2b2>
 800919a:	2067      	movs	r0, #103	; 0x67
 800919c:	e7d9      	b.n	8009152 <SendMessageFromPort+0x2b2>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800919e:	2069      	movs	r0, #105	; 0x69
 80091a0:	e7d7      	b.n	8009152 <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80091a2:	2069      	movs	r0, #105	; 0x69
 80091a4:	e7d5      	b.n	8009152 <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80091a6:	2069      	movs	r0, #105	; 0x69
 80091a8:	e7d3      	b.n	8009152 <SendMessageFromPort+0x2b2>
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	20000cbc 	.word	0x20000cbc
 80091b0:	20000cf4 	.word	0x20000cf4
 80091b4:	20000b34 	.word	0x20000b34
 80091b8:	20000cbf 	.word	0x20000cbf
 80091bc:	200010a0 	.word	0x200010a0
 80091c0:	20000070 	.word	0x20000070
 80091c4:	200069d4 	.word	0x200069d4
 80091c8:	200011b2 	.word	0x200011b2
 80091cc:	200011b0 	.word	0x200011b0
 80091d0:	20000cfc 	.word	0x20000cfc
 80091d4:	20000af4 	.word	0x20000af4
 80091d8:	2000003c 	.word	0x2000003c
 80091dc:	2000001c 	.word	0x2000001c
 80091e0:	20000cb4 	.word	0x20000cb4
 80091e4:	20000af8 	.word	0x20000af8
 80091e8:	20000dc8 	.word	0x20000dc8
 80091ec:	20000afc 	.word	0x20000afc

080091f0 <ForwardReceivedMessage>:
{
 80091f0:	b530      	push	{r4, r5, lr}
 80091f2:	b083      	sub	sp, #12
 80091f4:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <ForwardReceivedMessage+0x34>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80091fc:	1e42      	subs	r2, r0, #1
 80091fe:	00d3      	lsls	r3, r2, #3
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	00da      	lsls	r2, r3, #3
 8009204:	4b08      	ldr	r3, [pc, #32]	; (8009228 <ForwardReceivedMessage+0x38>)
 8009206:	5cd4      	ldrb	r4, [r2, r3]
	port = FindRoute(myID, dst); 
 8009208:	4b08      	ldr	r3, [pc, #32]	; (800922c <ForwardReceivedMessage+0x3c>)
 800920a:	7818      	ldrb	r0, [r3, #0]
 800920c:	0021      	movs	r1, r4
 800920e:	f7fa fe99 	bl	8003f44 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009212:	9500      	str	r5, [sp, #0]
 8009214:	2300      	movs	r3, #0
 8009216:	0022      	movs	r2, r4
 8009218:	2100      	movs	r1, #0
 800921a:	f7ff fe41 	bl	8008ea0 <SendMessageFromPort>
}
 800921e:	2000      	movs	r0, #0
 8009220:	b003      	add	sp, #12
 8009222:	bd30      	pop	{r4, r5, pc}
 8009224:	20000af4 	.word	0x20000af4
 8009228:	20000b34 	.word	0x20000b34
 800922c:	20000070 	.word	0x20000070

08009230 <BroadcastReceivedMessage>:
{
 8009230:	b500      	push	{lr}
 8009232:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <BroadcastReceivedMessage+0x38>)
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	4b0c      	ldr	r3, [pc, #48]	; (800926c <BroadcastReceivedMessage+0x3c>)
 800923c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800923e:	28ff      	cmp	r0, #255	; 0xff
 8009240:	d009      	beq.n	8009256 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8009242:	9100      	str	r1, [sp, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	22fe      	movs	r2, #254	; 0xfe
 8009248:	2100      	movs	r1, #0
 800924a:	2000      	movs	r0, #0
 800924c:	f7ff fe28 	bl	8008ea0 <SendMessageFromPort>
}
 8009250:	2000      	movs	r0, #0
 8009252:	b003      	add	sp, #12
 8009254:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8009256:	9100      	str	r1, [sp, #0]
 8009258:	2300      	movs	r3, #0
 800925a:	32ff      	adds	r2, #255	; 0xff
 800925c:	2100      	movs	r1, #0
 800925e:	2000      	movs	r0, #0
 8009260:	f7ff fe1e 	bl	8008ea0 <SendMessageFromPort>
 8009264:	e7f4      	b.n	8009250 <BroadcastReceivedMessage+0x20>
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	20000af4 	.word	0x20000af4
 800926c:	2000003c 	.word	0x2000003c

08009270 <BroadcastMessage>:
{
 8009270:	b530      	push	{r4, r5, lr}
 8009272:	b083      	sub	sp, #12
 8009274:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <BroadcastMessage+0x44>)
 8009278:	2501      	movs	r5, #1
 800927a:	701d      	strb	r5, [r3, #0]
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <BroadcastMessage+0x48>)
 800927e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009280:	29ff      	cmp	r1, #255	; 0xff
 8009282:	d00e      	beq.n	80092a2 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8009284:	9400      	str	r4, [sp, #0]
 8009286:	0013      	movs	r3, r2
 8009288:	22fe      	movs	r2, #254	; 0xfe
 800928a:	0001      	movs	r1, r0
 800928c:	2000      	movs	r0, #0
 800928e:	f7ff fe07 	bl	8008ea0 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8009292:	0022      	movs	r2, r4
 8009294:	2100      	movs	r1, #0
 8009296:	4809      	ldr	r0, [pc, #36]	; (80092bc <BroadcastMessage+0x4c>)
 8009298:	f00a feb8 	bl	801400c <memset>
}
 800929c:	2000      	movs	r0, #0
 800929e:	b003      	add	sp, #12
 80092a0:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 80092a2:	9400      	str	r4, [sp, #0]
 80092a4:	0013      	movs	r3, r2
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	0001      	movs	r1, r0
 80092aa:	2000      	movs	r0, #0
 80092ac:	f7ff fdf8 	bl	8008ea0 <SendMessageFromPort>
 80092b0:	e7ef      	b.n	8009292 <BroadcastMessage+0x22>
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	20000af4 	.word	0x20000af4
 80092b8:	2000003c 	.word	0x2000003c
 80092bc:	20000cfc 	.word	0x20000cfc

080092c0 <SendMessageToModule>:
{
 80092c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c2:	b083      	sub	sp, #12
 80092c4:	0004      	movs	r4, r0
 80092c6:	000e      	movs	r6, r1
 80092c8:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80092ca:	28ff      	cmp	r0, #255	; 0xff
 80092cc:	d012      	beq.n	80092f4 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80092ce:	4f0d      	ldr	r7, [pc, #52]	; (8009304 <SendMessageToModule+0x44>)
 80092d0:	7838      	ldrb	r0, [r7, #0]
 80092d2:	0021      	movs	r1, r4
 80092d4:	f7fa fe36 	bl	8003f44 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80092d8:	7839      	ldrb	r1, [r7, #0]
 80092da:	9500      	str	r5, [sp, #0]
 80092dc:	0033      	movs	r3, r6
 80092de:	0022      	movs	r2, r4
 80092e0:	f7ff fdde 	bl	8008ea0 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 80092e4:	002a      	movs	r2, r5
 80092e6:	2100      	movs	r1, #0
 80092e8:	4807      	ldr	r0, [pc, #28]	; (8009308 <SendMessageToModule+0x48>)
 80092ea:	f00a fe8f 	bl	801400c <memset>
}
 80092ee:	2000      	movs	r0, #0
 80092f0:	b003      	add	sp, #12
 80092f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <SendMessageToModule+0x44>)
 80092f6:	7818      	ldrb	r0, [r3, #0]
 80092f8:	0013      	movs	r3, r2
 80092fa:	000a      	movs	r2, r1
 80092fc:	21ff      	movs	r1, #255	; 0xff
 80092fe:	f7ff ffb7 	bl	8009270 <BroadcastMessage>
 8009302:	e7f4      	b.n	80092ee <SendMessageToModule+0x2e>
 8009304:	20000070 	.word	0x20000070
 8009308:	20000cfc 	.word	0x20000cfc

0800930c <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930e:	46de      	mov	lr, fp
 8009310:	4657      	mov	r7, sl
 8009312:	464e      	mov	r6, r9
 8009314:	4645      	mov	r5, r8
 8009316:	b5e0      	push	{r5, r6, r7, lr}
 8009318:	b08b      	sub	sp, #44	; 0x2c
 800931a:	9009      	str	r0, [sp, #36]	; 0x24
 800931c:	000e      	movs	r6, r1
 800931e:	4694      	mov	ip, r2
 8009320:	9208      	str	r2, [sp, #32]
 8009322:	0019      	movs	r1, r3
 8009324:	9307      	str	r3, [sp, #28]
 8009326:	ab14      	add	r3, sp, #80	; 0x50
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4698      	mov	r8, r3
 800932c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800932e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009330:	ab17      	add	r3, sp, #92	; 0x5c
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8009336:	4b4d      	ldr	r3, [pc, #308]	; (800946c <StartScastDMAStream+0x160>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	42b3      	cmp	r3, r6
 800933c:	d101      	bne.n	8009342 <StartScastDMAStream+0x36>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 800933e:	2400      	movs	r4, #0
 8009340:	e058      	b.n	80093f4 <StartScastDMAStream+0xe8>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009342:	0e3a      	lsrs	r2, r7, #24
 8009344:	4b4a      	ldr	r3, [pc, #296]	; (8009470 <StartScastDMAStream+0x164>)
 8009346:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8009348:	0c3a      	lsrs	r2, r7, #16
 800934a:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 800934c:	0a3a      	lsrs	r2, r7, #8
 800934e:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8009350:	70df      	strb	r7, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009352:	0e2a      	lsrs	r2, r5, #24
 8009354:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8009356:	0c2a      	lsrs	r2, r5, #16
 8009358:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 800935a:	0a2a      	lsrs	r2, r5, #8
 800935c:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 800935e:	71dd      	strb	r5, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8009360:	4644      	mov	r4, r8
 8009362:	721c      	strb	r4, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8009364:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8009366:	7299      	strb	r1, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8009368:	4662      	mov	r2, ip
 800936a:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 800936c:	464a      	mov	r2, r9
 800936e:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8009370:	220d      	movs	r2, #13
 8009372:	211c      	movs	r1, #28
 8009374:	0030      	movs	r0, r6
 8009376:	f7ff ffa3 	bl	80092c0 <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 800937a:	2000      	movs	r0, #0
 800937c:	b00b      	add	sp, #44	; 0x2c
 800937e:	bc3c      	pop	{r2, r3, r4, r5}
 8009380:	4690      	mov	r8, r2
 8009382:	4699      	mov	r9, r3
 8009384:	46a2      	mov	sl, r4
 8009386:	46ab      	mov	fp, r5
 8009388:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 800938a:	0031      	movs	r1, r6
 800938c:	f7fa fdda 	bl	8003f44 <FindRoute>
 8009390:	4683      	mov	fp, r0
			FindRoute(srcM, dstM);
 8009392:	9907      	ldr	r1, [sp, #28]
 8009394:	0030      	movs	r0, r6
 8009396:	f7fa fdd5 	bl	8003f44 <FindRoute>
			if (route[i] == dstM) {
 800939a:	4b36      	ldr	r3, [pc, #216]	; (8009474 <StartScastDMAStream+0x168>)
 800939c:	4652      	mov	r2, sl
 800939e:	5c98      	ldrb	r0, [r3, r2]
 80093a0:	9b07      	ldr	r3, [sp, #28]
 80093a2:	4298      	cmp	r0, r3
 80093a4:	d13a      	bne.n	800941c <StartScastDMAStream+0x110>
				temp2 = dstP;
 80093a6:	9808      	ldr	r0, [sp, #32]
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80093a8:	0e3a      	lsrs	r2, r7, #24
 80093aa:	4b31      	ldr	r3, [pc, #196]	; (8009470 <StartScastDMAStream+0x164>)
 80093ac:	701a      	strb	r2, [r3, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80093ae:	0c3a      	lsrs	r2, r7, #16
 80093b0:	705a      	strb	r2, [r3, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80093b2:	0a3a      	lsrs	r2, r7, #8
 80093b4:	709a      	strb	r2, [r3, #2]
			messageParams[3] = (uint8_t) count;
 80093b6:	70df      	strb	r7, [r3, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80093b8:	0e2a      	lsrs	r2, r5, #24
 80093ba:	711a      	strb	r2, [r3, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80093bc:	0c2a      	lsrs	r2, r5, #16
 80093be:	715a      	strb	r2, [r3, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80093c0:	0a2a      	lsrs	r2, r5, #8
 80093c2:	719a      	strb	r2, [r3, #6]
			messageParams[7] = (uint8_t) timeout;
 80093c4:	71dd      	strb	r5, [r3, #7]
			messageParams[8] = direction;										/* Stream direction */
 80093c6:	4642      	mov	r2, r8
 80093c8:	721a      	strb	r2, [r3, #8]
			messageParams[9] = temp1;												/* Source port */
 80093ca:	465a      	mov	r2, fp
 80093cc:	725a      	strb	r2, [r3, #9]
			messageParams[10] = temp2;											/* destination port */
 80093ce:	7298      	strb	r0, [r3, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 80093d0:	464a      	mov	r2, r9
 80093d2:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM, dstM);
 80093d4:	9907      	ldr	r1, [sp, #28]
 80093d6:	0030      	movs	r0, r6
 80093d8:	f7fa fdb4 	bl	8003f44 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <StartScastDMAStream+0x168>)
 80093de:	4652      	mov	r2, sl
 80093e0:	5c98      	ldrb	r0, [r3, r2]
 80093e2:	220c      	movs	r2, #12
 80093e4:	211b      	movs	r1, #27
 80093e6:	f7ff ff6b 	bl	80092c0 <SendMessageToModule>
			osDelay(10);
 80093ea:	200a      	movs	r0, #10
 80093ec:	f005 fd6c 	bl	800eec8 <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 80093f0:	3401      	adds	r4, #1
 80093f2:	b2e4      	uxtb	r4, r4
 80093f4:	2c01      	cmp	r4, #1
 80093f6:	d818      	bhi.n	800942a <StartScastDMAStream+0x11e>
		FindRoute(srcM, dstM);
 80093f8:	9907      	ldr	r1, [sp, #28]
 80093fa:	0030      	movs	r0, r6
 80093fc:	f7fa fda2 	bl	8003f44 <FindRoute>
		if (route[i]) 
 8009400:	46a2      	mov	sl, r4
 8009402:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <StartScastDMAStream+0x168>)
 8009404:	5d18      	ldrb	r0, [r3, r4]
 8009406:	2800      	cmp	r0, #0
 8009408:	d0f2      	beq.n	80093f0 <StartScastDMAStream+0xe4>
			if (route[i+1]) {
 800940a:	1c63      	adds	r3, r4, #1
 800940c:	4a19      	ldr	r2, [pc, #100]	; (8009474 <StartScastDMAStream+0x168>)
 800940e:	5cd1      	ldrb	r1, [r2, r3]
 8009410:	2900      	cmp	r1, #0
 8009412:	d0ba      	beq.n	800938a <StartScastDMAStream+0x7e>
				temp1 = FindRoute(route[i], route[i+1]);
 8009414:	f7fa fd96 	bl	8003f44 <FindRoute>
 8009418:	4683      	mov	fp, r0
 800941a:	e7ba      	b.n	8009392 <StartScastDMAStream+0x86>
				temp2 = FindRoute(route[i], route[i-1]);
 800941c:	4653      	mov	r3, sl
 800941e:	3b01      	subs	r3, #1
 8009420:	4a14      	ldr	r2, [pc, #80]	; (8009474 <StartScastDMAStream+0x168>)
 8009422:	5cd1      	ldrb	r1, [r2, r3]
 8009424:	f7fa fd8e 	bl	8003f44 <FindRoute>
 8009428:	e7be      	b.n	80093a8 <StartScastDMAStream+0x9c>
	if (srcM == dstM)
 800942a:	9907      	ldr	r1, [sp, #28]
 800942c:	428e      	cmp	r6, r1
 800942e:	d118      	bne.n	8009462 <StartScastDMAStream+0x156>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009436:	002a      	movs	r2, r5
 8009438:	0039      	movs	r1, r7
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fc1c 	bl	8008c78 <SetupDMAStreams>
	if (stored) {		
 8009440:	464b      	mov	r3, r9
 8009442:	2b00      	cmp	r3, #0
 8009444:	d099      	beq.n	800937a <StartScastDMAStream+0x6e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8009446:	2300      	movs	r3, #0
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	9302      	str	r3, [sp, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009456:	002a      	movs	r2, r5
 8009458:	0039      	movs	r1, r7
 800945a:	4640      	mov	r0, r8
 800945c:	f7fa f9ce 	bl	80037fc <SaveEEstreams>
 8009460:	e78b      	b.n	800937a <StartScastDMAStream+0x6e>
		port = FindRoute(srcM, dstM);
 8009462:	0030      	movs	r0, r6
 8009464:	f7fa fd6e 	bl	8003f44 <FindRoute>
 8009468:	9008      	str	r0, [sp, #32]
 800946a:	e7e1      	b.n	8009430 <StartScastDMAStream+0x124>
 800946c:	20000070 	.word	0x20000070
 8009470:	20000cfc 	.word	0x20000cfc
 8009474:	20006a8c 	.word	0x20006a8c

08009478 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 8009478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947a:	46de      	mov	lr, fp
 800947c:	4657      	mov	r7, sl
 800947e:	464e      	mov	r6, r9
 8009480:	4645      	mov	r5, r8
 8009482:	b5e0      	push	{r5, r6, r7, lr}
 8009484:	b085      	sub	sp, #20
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
	uint8_t port; bool emptyBuffer = false;
 8009486:	2300      	movs	r3, #0
 8009488:	9301      	str	r3, [sp, #4]
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800948a:	469b      	mov	fp, r3
 800948c:	e19a      	b.n	80097c4 <BackEndTask+0x34c>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
			{	
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800948e:	1e65      	subs	r5, r4, #1
 8009490:	4bcd      	ldr	r3, [pc, #820]	; (80097c8 <BackEndTask+0x350>)
 8009492:	5d5f      	ldrb	r7, [r3, r5]
 8009494:	e004      	b.n	80094a0 <BackEndTask+0x28>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
					{	
						packetStart = i;	
						break;
					}	
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009496:	2f3f      	cmp	r7, #63	; 0x3f
 8009498:	d02b      	beq.n	80094f2 <BackEndTask+0x7a>
						break;
					}							
					else 
					{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if (i == MSG_RX_BUF_SIZE-1)		
 800949a:	2f3f      	cmp	r7, #63	; 0x3f
 800949c:	d037      	beq.n	800950e <BackEndTask+0x96>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800949e:	3701      	adds	r7, #1
 80094a0:	2f3f      	cmp	r7, #63	; 0x3f
 80094a2:	dc0f      	bgt.n	80094c4 <BackEndTask+0x4c>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80094a4:	2f3e      	cmp	r7, #62	; 0x3e
 80094a6:	dcf6      	bgt.n	8009496 <BackEndTask+0x1e>
 80094a8:	01aa      	lsls	r2, r5, #6
 80094aa:	4bc8      	ldr	r3, [pc, #800]	; (80097cc <BackEndTask+0x354>)
 80094ac:	189b      	adds	r3, r3, r2
 80094ae:	5ddb      	ldrb	r3, [r3, r7]
 80094b0:	2b48      	cmp	r3, #72	; 0x48
 80094b2:	d1f0      	bne.n	8009496 <BackEndTask+0x1e>
 80094b4:	1c7b      	adds	r3, r7, #1
 80094b6:	0011      	movs	r1, r2
 80094b8:	4ac4      	ldr	r2, [pc, #784]	; (80097cc <BackEndTask+0x354>)
 80094ba:	1852      	adds	r2, r2, r1
 80094bc:	5cd3      	ldrb	r3, [r2, r3]
 80094be:	2b5a      	cmp	r3, #90	; 0x5a
 80094c0:	d1e9      	bne.n	8009496 <BackEndTask+0x1e>
						packetStart = i;	
 80094c2:	46bb      	mov	fp, r7
						}
					}						
				}
						
				/* Check parse status */
				if (emptyBuffer) {	
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d000      	beq.n	80094cc <BackEndTask+0x54>
 80094ca:	e176      	b.n	80097ba <BackEndTask+0x342>
					emptyBuffer = false;
					continue;
				}
				
				/* A.2. Parse the length byte */
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 80094cc:	465b      	mov	r3, fp
 80094ce:	2b3d      	cmp	r3, #61	; 0x3d
 80094d0:	d05d      	beq.n	800958e <BackEndTask+0x116>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
					parseStart = 0;				
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 80094d2:	2b3e      	cmp	r3, #62	; 0x3e
 80094d4:	d100      	bne.n	80094d8 <BackEndTask+0x60>
 80094d6:	e084      	b.n	80095e2 <BackEndTask+0x16a>
					packetLength = UARTRxBuf[port-1][0];
					parseStart = 1;
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 80094d8:	2b3f      	cmp	r3, #63	; 0x3f
 80094da:	d100      	bne.n	80094de <BackEndTask+0x66>
 80094dc:	e088      	b.n	80095f0 <BackEndTask+0x178>
					packetLength = UARTRxBuf[port-1][1];
					parseStart = 2;
				} else {
					packetLength = UARTRxBuf[port-1][packetStart+2];
 80094de:	3302      	adds	r3, #2
 80094e0:	01a9      	lsls	r1, r5, #6
 80094e2:	4aba      	ldr	r2, [pc, #744]	; (80097cc <BackEndTask+0x354>)
 80094e4:	1852      	adds	r2, r2, r1
 80094e6:	5cd3      	ldrb	r3, [r2, r3]
 80094e8:	4699      	mov	r9, r3
					parseStart = packetStart+3;
 80094ea:	2303      	movs	r3, #3
 80094ec:	445b      	add	r3, fp
 80094ee:	469a      	mov	sl, r3
 80094f0:	e055      	b.n	800959e <BackEndTask+0x126>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80094f2:	01aa      	lsls	r2, r5, #6
 80094f4:	4bb5      	ldr	r3, [pc, #724]	; (80097cc <BackEndTask+0x354>)
 80094f6:	189b      	adds	r3, r3, r2
 80094f8:	333f      	adds	r3, #63	; 0x3f
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b48      	cmp	r3, #72	; 0x48
 80094fe:	d1cc      	bne.n	800949a <BackEndTask+0x22>
 8009500:	0013      	movs	r3, r2
 8009502:	4ab2      	ldr	r2, [pc, #712]	; (80097cc <BackEndTask+0x354>)
 8009504:	5c9b      	ldrb	r3, [r3, r2]
 8009506:	2b5a      	cmp	r3, #90	; 0x5a
 8009508:	d1c7      	bne.n	800949a <BackEndTask+0x22>
						packetStart = MSG_RX_BUF_SIZE-1;	
 800950a:	46bb      	mov	fp, r7
 800950c:	e7da      	b.n	80094c4 <BackEndTask+0x4c>
							if (BOS.disableCLI == false)
 800950e:	4bb0      	ldr	r3, [pc, #704]	; (80097d0 <BackEndTask+0x358>)
 8009510:	7edb      	ldrb	r3, [r3, #27]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <BackEndTask+0xa4>
							emptyBuffer = true;
 8009516:	2301      	movs	r3, #1
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	e7c0      	b.n	800949e <BackEndTask+0x26>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800951c:	4baa      	ldr	r3, [pc, #680]	; (80097c8 <BackEndTask+0x350>)
 800951e:	5d5b      	ldrb	r3, [r3, r5]
 8009520:	e002      	b.n	8009528 <BackEndTask+0xb0>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009522:	2b3f      	cmp	r3, #63	; 0x3f
 8009524:	d02a      	beq.n	800957c <BackEndTask+0x104>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8009526:	3301      	adds	r3, #1
 8009528:	2b3f      	cmp	r3, #63	; 0x3f
 800952a:	dc2d      	bgt.n	8009588 <BackEndTask+0x110>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800952c:	01a9      	lsls	r1, r5, #6
 800952e:	4aa7      	ldr	r2, [pc, #668]	; (80097cc <BackEndTask+0x354>)
 8009530:	1852      	adds	r2, r2, r1
 8009532:	5cd2      	ldrb	r2, [r2, r3]
 8009534:	2a0d      	cmp	r2, #13
 8009536:	d1f6      	bne.n	8009526 <BackEndTask+0xae>
 8009538:	2b3e      	cmp	r3, #62	; 0x3e
 800953a:	dcf2      	bgt.n	8009522 <BackEndTask+0xaa>
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	0008      	movs	r0, r1
 8009540:	49a2      	ldr	r1, [pc, #648]	; (80097cc <BackEndTask+0x354>)
 8009542:	1809      	adds	r1, r1, r0
 8009544:	5c8a      	ldrb	r2, [r1, r2]
 8009546:	2a00      	cmp	r2, #0
 8009548:	d1eb      	bne.n	8009522 <BackEndTask+0xaa>
										UARTRxBuf[port-1][j] = 0;
 800954a:	01a9      	lsls	r1, r5, #6
 800954c:	4a9f      	ldr	r2, [pc, #636]	; (80097cc <BackEndTask+0x354>)
 800954e:	1852      	adds	r2, r2, r1
 8009550:	2100      	movs	r1, #0
 8009552:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8009554:	3301      	adds	r3, #1
 8009556:	4a9c      	ldr	r2, [pc, #624]	; (80097c8 <BackEndTask+0x350>)
 8009558:	5553      	strb	r3, [r2, r5]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 800955a:	4b9e      	ldr	r3, [pc, #632]	; (80097d4 <BackEndTask+0x35c>)
 800955c:	7818      	ldrb	r0, [r3, #0]
 800955e:	4a9e      	ldr	r2, [pc, #632]	; (80097d8 <BackEndTask+0x360>)
 8009560:	5411      	strb	r1, [r2, r0]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8009562:	3103      	adds	r1, #3
 8009564:	5591      	strb	r1, [r2, r6]
										PcPort = port;
 8009566:	701c      	strb	r4, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8009568:	4b9c      	ldr	r3, [pc, #624]	; (80097dc <BackEndTask+0x364>)
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	2202      	movs	r2, #2
 8009570:	2100      	movs	r1, #0
 8009572:	f007 f8eb 	bl	801074c <xTaskGenericNotify>
							emptyBuffer = true;
 8009576:	2301      	movs	r3, #1
 8009578:	9301      	str	r3, [sp, #4]
										break;
 800957a:	e790      	b.n	800949e <BackEndTask+0x26>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800957c:	01aa      	lsls	r2, r5, #6
 800957e:	4993      	ldr	r1, [pc, #588]	; (80097cc <BackEndTask+0x354>)
 8009580:	5c52      	ldrb	r2, [r2, r1]
 8009582:	2a00      	cmp	r2, #0
 8009584:	d1cf      	bne.n	8009526 <BackEndTask+0xae>
 8009586:	e7e0      	b.n	800954a <BackEndTask+0xd2>
							emptyBuffer = true;
 8009588:	2301      	movs	r3, #1
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	e787      	b.n	800949e <BackEndTask+0x26>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 800958e:	01aa      	lsls	r2, r5, #6
 8009590:	4b8e      	ldr	r3, [pc, #568]	; (80097cc <BackEndTask+0x354>)
 8009592:	189b      	adds	r3, r3, r2
 8009594:	333f      	adds	r3, #63	; 0x3f
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4699      	mov	r9, r3
					parseStart = 0;				
 800959a:	2300      	movs	r3, #0
 800959c:	469a      	mov	sl, r3
				}
				
				/* A.3. Set packet end from packet start and length */			
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 800959e:	464b      	mov	r3, r9
 80095a0:	1cdf      	adds	r7, r3, #3
 80095a2:	46b8      	mov	r8, r7
 80095a4:	44d8      	add	r8, fp
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 80095a6:	4643      	mov	r3, r8
 80095a8:	2b3f      	cmp	r3, #63	; 0x3f
 80095aa:	dd03      	ble.n	80095b4 <BackEndTask+0x13c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	425b      	negs	r3, r3
 80095b0:	469c      	mov	ip, r3
 80095b2:	44e0      	add	r8, ip
			
				if (packetStart != packetEnd)										// Non-empty packet
 80095b4:	45c3      	cmp	fp, r8
 80095b6:	d123      	bne.n	8009600 <BackEndTask+0x188>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 80095b8:	45c3      	cmp	fp, r8
 80095ba:	db00      	blt.n	80095be <BackEndTask+0x146>
 80095bc:	e0c3      	b.n	8009746 <BackEndTask+0x2ce>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80095be:	01a8      	lsls	r0, r5, #6
 80095c0:	4458      	add	r0, fp
 80095c2:	4b82      	ldr	r3, [pc, #520]	; (80097cc <BackEndTask+0x354>)
 80095c4:	18c0      	adds	r0, r0, r3
 80095c6:	464a      	mov	r2, r9
 80095c8:	3204      	adds	r2, #4
 80095ca:	2100      	movs	r1, #0
 80095cc:	f00a fd1e 	bl	801400c <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80095d0:	4643      	mov	r3, r8
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a7c      	ldr	r2, [pc, #496]	; (80097c8 <BackEndTask+0x350>)
 80095d6:	5553      	strb	r3, [r2, r5]
				++rejectedMsg;							
 80095d8:	4a81      	ldr	r2, [pc, #516]	; (80097e0 <BackEndTask+0x368>)
 80095da:	8813      	ldrh	r3, [r2, #0]
 80095dc:	3301      	adds	r3, #1
 80095de:	8013      	strh	r3, [r2, #0]
 80095e0:	e0dc      	b.n	800979c <BackEndTask+0x324>
					packetLength = UARTRxBuf[port-1][0];
 80095e2:	01ab      	lsls	r3, r5, #6
 80095e4:	4a79      	ldr	r2, [pc, #484]	; (80097cc <BackEndTask+0x354>)
 80095e6:	5c9b      	ldrb	r3, [r3, r2]
 80095e8:	4699      	mov	r9, r3
					parseStart = 1;
 80095ea:	2301      	movs	r3, #1
 80095ec:	469a      	mov	sl, r3
 80095ee:	e7d6      	b.n	800959e <BackEndTask+0x126>
					packetLength = UARTRxBuf[port-1][1];
 80095f0:	01aa      	lsls	r2, r5, #6
 80095f2:	4b76      	ldr	r3, [pc, #472]	; (80097cc <BackEndTask+0x354>)
 80095f4:	189b      	adds	r3, r3, r2
 80095f6:	785b      	ldrb	r3, [r3, #1]
 80095f8:	4699      	mov	r9, r3
					parseStart = 2;
 80095fa:	2302      	movs	r3, #2
 80095fc:	469a      	mov	sl, r3
 80095fe:	e7ce      	b.n	800959e <BackEndTask+0x126>
					Delay_ms(1);
 8009600:	2001      	movs	r0, #1
 8009602:	f007 fcdd 	bl	8010fc0 <HAL_Delay>
					if (packetStart < packetEnd) {
 8009606:	45c3      	cmp	fp, r8
 8009608:	da49      	bge.n	800969e <BackEndTask+0x226>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800960a:	01a9      	lsls	r1, r5, #6
 800960c:	4459      	add	r1, fp
 800960e:	4b6f      	ldr	r3, [pc, #444]	; (80097cc <BackEndTask+0x354>)
 8009610:	18c9      	adds	r1, r1, r3
 8009612:	003a      	movs	r2, r7
 8009614:	4873      	ldr	r0, [pc, #460]	; (80097e4 <BackEndTask+0x36c>)
 8009616:	f00a fcf0 	bl	8013ffa <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 800961a:	464b      	mov	r3, r9
 800961c:	1cd9      	adds	r1, r3, #3
 800961e:	4f71      	ldr	r7, [pc, #452]	; (80097e4 <BackEndTask+0x36c>)
 8009620:	0038      	movs	r0, r7
 8009622:	f004 fd4f 	bl	800e0c4 <CalculateCRC8>
 8009626:	9002      	str	r0, [sp, #8]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009628:	2238      	movs	r2, #56	; 0x38
 800962a:	2100      	movs	r1, #0
 800962c:	0038      	movs	r0, r7
 800962e:	f00a fced 	bl	801400c <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009632:	01aa      	lsls	r2, r5, #6
 8009634:	4b65      	ldr	r3, [pc, #404]	; (80097cc <BackEndTask+0x354>)
 8009636:	189b      	adds	r3, r3, r2
 8009638:	4642      	mov	r2, r8
 800963a:	5c9b      	ldrb	r3, [r3, r2]
 800963c:	9a02      	ldr	r2, [sp, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	d1ba      	bne.n	80095b8 <BackEndTask+0x140>
						portStatus[port] = MSG;
 8009642:	4b65      	ldr	r3, [pc, #404]	; (80097d8 <BackEndTask+0x360>)
 8009644:	2201      	movs	r2, #1
 8009646:	559a      	strb	r2, [r3, r6]
						messageLength[port-1] = packetLength;	
 8009648:	4b67      	ldr	r3, [pc, #412]	; (80097e8 <BackEndTask+0x370>)
 800964a:	464a      	mov	r2, r9
 800964c:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800964e:	233f      	movs	r3, #63	; 0x3f
 8009650:	4652      	mov	r2, sl
 8009652:	1a9b      	subs	r3, r3, r2
 8009654:	454b      	cmp	r3, r9
 8009656:	db3f      	blt.n	80096d8 <BackEndTask+0x260>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8009658:	00eb      	lsls	r3, r5, #3
 800965a:	1b5b      	subs	r3, r3, r5
 800965c:	00d8      	lsls	r0, r3, #3
 800965e:	4b63      	ldr	r3, [pc, #396]	; (80097ec <BackEndTask+0x374>)
 8009660:	18c0      	adds	r0, r0, r3
 8009662:	01a9      	lsls	r1, r5, #6
 8009664:	4451      	add	r1, sl
 8009666:	4b59      	ldr	r3, [pc, #356]	; (80097cc <BackEndTask+0x354>)
 8009668:	18c9      	adds	r1, r1, r3
 800966a:	464a      	mov	r2, r9
 800966c:	f00a fcc5 	bl	8013ffa <memcpy>
						if (packetStart < packetEnd) {
 8009670:	45c3      	cmp	fp, r8
 8009672:	da52      	bge.n	800971a <BackEndTask+0x2a2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009674:	01a8      	lsls	r0, r5, #6
 8009676:	4458      	add	r0, fp
 8009678:	4b54      	ldr	r3, [pc, #336]	; (80097cc <BackEndTask+0x354>)
 800967a:	18c0      	adds	r0, r0, r3
 800967c:	464a      	mov	r2, r9
 800967e:	3204      	adds	r2, #4
 8009680:	2100      	movs	r1, #0
 8009682:	f00a fcc3 	bl	801400c <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009686:	4642      	mov	r2, r8
 8009688:	3201      	adds	r2, #1
 800968a:	4b4f      	ldr	r3, [pc, #316]	; (80097c8 <BackEndTask+0x350>)
 800968c:	555a      	strb	r2, [r3, r5]
						++acceptedMsg;
 800968e:	4a58      	ldr	r2, [pc, #352]	; (80097f0 <BackEndTask+0x378>)
 8009690:	8813      	ldrh	r3, [r2, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8009696:	0020      	movs	r0, r4
 8009698:	f7ff fbc6 	bl	8008e28 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 800969c:	e074      	b.n	8009788 <BackEndTask+0x310>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800969e:	01ab      	lsls	r3, r5, #6
 80096a0:	9303      	str	r3, [sp, #12]
 80096a2:	0019      	movs	r1, r3
 80096a4:	4459      	add	r1, fp
 80096a6:	4849      	ldr	r0, [pc, #292]	; (80097cc <BackEndTask+0x354>)
 80096a8:	4684      	mov	ip, r0
 80096aa:	4461      	add	r1, ip
 80096ac:	2240      	movs	r2, #64	; 0x40
 80096ae:	4658      	mov	r0, fp
 80096b0:	1a10      	subs	r0, r2, r0
 80096b2:	9002      	str	r0, [sp, #8]
 80096b4:	0002      	movs	r2, r0
 80096b6:	484b      	ldr	r0, [pc, #300]	; (80097e4 <BackEndTask+0x36c>)
 80096b8:	f00a fc9f 	bl	8013ffa <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 80096bc:	4949      	ldr	r1, [pc, #292]	; (80097e4 <BackEndTask+0x36c>)
 80096be:	0008      	movs	r0, r1
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	469c      	mov	ip, r3
 80096c4:	4460      	add	r0, ip
 80096c6:	9a03      	ldr	r2, [sp, #12]
 80096c8:	4940      	ldr	r1, [pc, #256]	; (80097cc <BackEndTask+0x354>)
 80096ca:	468c      	mov	ip, r1
 80096cc:	4462      	add	r2, ip
 80096ce:	0011      	movs	r1, r2
 80096d0:	1afa      	subs	r2, r7, r3
 80096d2:	f00a fc92 	bl	8013ffa <memcpy>
 80096d6:	e7a0      	b.n	800961a <BackEndTask+0x1a2>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 80096d8:	00ee      	lsls	r6, r5, #3
 80096da:	1b73      	subs	r3, r6, r5
 80096dc:	00d8      	lsls	r0, r3, #3
 80096de:	4f43      	ldr	r7, [pc, #268]	; (80097ec <BackEndTask+0x374>)
 80096e0:	19c0      	adds	r0, r0, r7
 80096e2:	01ab      	lsls	r3, r5, #6
 80096e4:	9302      	str	r3, [sp, #8]
 80096e6:	0019      	movs	r1, r3
 80096e8:	4451      	add	r1, sl
 80096ea:	4a38      	ldr	r2, [pc, #224]	; (80097cc <BackEndTask+0x354>)
 80096ec:	4694      	mov	ip, r2
 80096ee:	4461      	add	r1, ip
 80096f0:	2240      	movs	r2, #64	; 0x40
 80096f2:	4653      	mov	r3, sl
 80096f4:	1ad2      	subs	r2, r2, r3
 80096f6:	4692      	mov	sl, r2
 80096f8:	f00a fc7f 	bl	8013ffa <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 80096fc:	1b76      	subs	r6, r6, r5
 80096fe:	00f3      	lsls	r3, r6, #3
 8009700:	4453      	add	r3, sl
 8009702:	19d8      	adds	r0, r3, r7
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	4a31      	ldr	r2, [pc, #196]	; (80097cc <BackEndTask+0x354>)
 8009708:	4694      	mov	ip, r2
 800970a:	4463      	add	r3, ip
 800970c:	0019      	movs	r1, r3
 800970e:	464b      	mov	r3, r9
 8009710:	4652      	mov	r2, sl
 8009712:	1a9a      	subs	r2, r3, r2
 8009714:	f00a fc71 	bl	8013ffa <memcpy>
 8009718:	e7aa      	b.n	8009670 <BackEndTask+0x1f8>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800971a:	01ae      	lsls	r6, r5, #6
 800971c:	465b      	mov	r3, fp
 800971e:	18f0      	adds	r0, r6, r3
 8009720:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <BackEndTask+0x354>)
 8009722:	469a      	mov	sl, r3
 8009724:	4450      	add	r0, sl
 8009726:	2740      	movs	r7, #64	; 0x40
 8009728:	465b      	mov	r3, fp
 800972a:	1aff      	subs	r7, r7, r3
 800972c:	003a      	movs	r2, r7
 800972e:	2100      	movs	r1, #0
 8009730:	f00a fc6c 	bl	801400c <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009734:	0030      	movs	r0, r6
 8009736:	4450      	add	r0, sl
 8009738:	464a      	mov	r2, r9
 800973a:	3204      	adds	r2, #4
 800973c:	1bd2      	subs	r2, r2, r7
 800973e:	2100      	movs	r1, #0
 8009740:	f00a fc64 	bl	801400c <memset>
 8009744:	e79f      	b.n	8009686 <BackEndTask+0x20e>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009746:	01af      	lsls	r7, r5, #6
 8009748:	465b      	mov	r3, fp
 800974a:	18f8      	adds	r0, r7, r3
 800974c:	4b1f      	ldr	r3, [pc, #124]	; (80097cc <BackEndTask+0x354>)
 800974e:	469a      	mov	sl, r3
 8009750:	4450      	add	r0, sl
 8009752:	2240      	movs	r2, #64	; 0x40
 8009754:	465b      	mov	r3, fp
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	9302      	str	r3, [sp, #8]
 800975a:	001a      	movs	r2, r3
 800975c:	2100      	movs	r1, #0
 800975e:	f00a fc55 	bl	801400c <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009762:	0038      	movs	r0, r7
 8009764:	4450      	add	r0, sl
 8009766:	464a      	mov	r2, r9
 8009768:	3204      	adds	r2, #4
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	2100      	movs	r1, #0
 8009770:	f00a fc4c 	bl	801400c <memset>
 8009774:	e72c      	b.n	80095d0 <BackEndTask+0x158>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8009776:	0020      	movs	r0, r4
 8009778:	f005 fa54 	bl	800ec24 <GetUart>
 800977c:	01ad      	lsls	r5, r5, #6
 800977e:	4913      	ldr	r1, [pc, #76]	; (80097cc <BackEndTask+0x354>)
 8009780:	1869      	adds	r1, r5, r1
 8009782:	2240      	movs	r2, #64	; 0x40
 8009784:	f009 fcfe 	bl	8013184 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 8009788:	3401      	adds	r4, #1
 800978a:	b2e4      	uxtb	r4, r4
 800978c:	2c05      	cmp	r4, #5
 800978e:	d817      	bhi.n	80097c0 <BackEndTask+0x348>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8009790:	0026      	movs	r6, r4
 8009792:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <BackEndTask+0x360>)
 8009794:	5d1b      	ldrb	r3, [r3, r4]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d800      	bhi.n	800979c <BackEndTask+0x324>
 800979a:	e678      	b.n	800948e <BackEndTask+0x16>
			if (MsgDMAStopped[port-1] == true) {
 800979c:	1e75      	subs	r5, r6, #1
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <BackEndTask+0x37c>)
 80097a0:	5d5b      	ldrb	r3, [r3, r5]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0f0      	beq.n	8009788 <BackEndTask+0x310>
				MsgDMAStopped[port-1] = false;
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <BackEndTask+0x37c>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	555a      	strb	r2, [r3, r5]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80097ac:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <BackEndTask+0x360>)
 80097ae:	5d9b      	ldrb	r3, [r3, r6]
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d1e0      	bne.n	8009776 <BackEndTask+0x2fe>
 80097b4:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <BackEndTask+0x360>)
 80097b6:	559a      	strb	r2, [r3, r6]
 80097b8:	e7dd      	b.n	8009776 <BackEndTask+0x2fe>
					emptyBuffer = false;
 80097ba:	2300      	movs	r3, #0
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	e7e3      	b.n	8009788 <BackEndTask+0x310>
			}				
		}
		
		taskYIELD();
 80097c0:	f007 fa6c 	bl	8010c9c <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 80097c4:	2401      	movs	r4, #1
 80097c6:	e7e1      	b.n	800978c <BackEndTask+0x314>
 80097c8:	20001098 	.word	0x20001098
 80097cc:	20000f58 	.word	0x20000f58
 80097d0:	200069d4 	.word	0x200069d4
 80097d4:	20000af7 	.word	0x20000af7
 80097d8:	20000db0 	.word	0x20000db0
 80097dc:	2000113c 	.word	0x2000113c
 80097e0:	20001350 	.word	0x20001350
 80097e4:	200010a0 	.word	0x200010a0
 80097e8:	20000cf4 	.word	0x20000cf4
 80097ec:	20000b34 	.word	0x20000b34
 80097f0:	200011b4 	.word	0x200011b4
 80097f4:	20000f50 	.word	0x20000f50

080097f8 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 80097f8:	2001      	movs	r0, #1
 80097fa:	4770      	bx	lr

080097fc <PxMessagingTask>:
{
 80097fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fe:	46de      	mov	lr, fp
 8009800:	4657      	mov	r7, sl
 8009802:	464e      	mov	r6, r9
 8009804:	4645      	mov	r5, r8
 8009806:	b5e0      	push	{r5, r6, r7, lr}
 8009808:	b097      	sub	sp, #92	; 0x5c
 800980a:	9006      	str	r0, [sp, #24]
	port = (int8_t)(unsigned) argument;
 800980c:	b2c3      	uxtb	r3, r0
 800980e:	9307      	str	r3, [sp, #28]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	9308      	str	r3, [sp, #32]
 8009814:	469b      	mov	fp, r3
 8009816:	e05c      	b.n	80098d2 <PxMessagingTask+0xd6>
				longMessage = 1;
 8009818:	4ad0      	ldr	r2, [pc, #832]	; (8009b5c <PxMessagingTask+0x360>)
 800981a:	2101      	movs	r1, #1
 800981c:	7011      	strb	r1, [r2, #0]
 800981e:	e072      	b.n	8009906 <PxMessagingTask+0x10a>
				++shift;				
 8009820:	2401      	movs	r4, #1
 8009822:	e07d      	b.n	8009920 <PxMessagingTask+0x124>
				code = cMessage[port-1][3+shift];
 8009824:	1ce2      	adds	r2, r4, #3
 8009826:	00eb      	lsls	r3, r5, #3
 8009828:	1b5b      	subs	r3, r3, r5
 800982a:	00d9      	lsls	r1, r3, #3
 800982c:	4bcc      	ldr	r3, [pc, #816]	; (8009b60 <PxMessagingTask+0x364>)
 800982e:	185b      	adds	r3, r3, r1
 8009830:	5c9e      	ldrb	r6, [r3, r2]
 8009832:	e08e      	b.n	8009952 <PxMessagingTask+0x156>
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009834:	2bfc      	cmp	r3, #252	; 0xfc
 8009836:	d805      	bhi.n	8009844 <PxMessagingTask+0x48>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8009838:	4bca      	ldr	r3, [pc, #808]	; (8009b64 <PxMessagingTask+0x368>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	454b      	cmp	r3, r9
 800983e:	d001      	beq.n	8009844 <PxMessagingTask+0x48>
 8009840:	2b01      	cmp	r3, #1
 8009842:	d020      	beq.n	8009886 <PxMessagingTask+0x8a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009844:	464b      	mov	r3, r9
 8009846:	2bff      	cmp	r3, #255	; 0xff
 8009848:	d100      	bne.n	800984c <PxMessagingTask+0x50>
 800984a:	e0b4      	b.n	80099b6 <PxMessagingTask+0x1ba>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 800984c:	464b      	mov	r3, r9
 800984e:	2bff      	cmp	r3, #255	; 0xff
 8009850:	d100      	bne.n	8009854 <PxMessagingTask+0x58>
 8009852:	e0cf      	b.n	80099f4 <PxMessagingTask+0x1f8>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009854:	464b      	mov	r3, r9
 8009856:	2bfe      	cmp	r3, #254	; 0xfe
 8009858:	d100      	bne.n	800985c <PxMessagingTask+0x60>
 800985a:	e0da      	b.n	8009a12 <PxMessagingTask+0x216>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 800985c:	464b      	mov	r3, r9
 800985e:	2bfe      	cmp	r3, #254	; 0xfe
 8009860:	d100      	bne.n	8009864 <PxMessagingTask+0x68>
 8009862:	e110      	b.n	8009a86 <PxMessagingTask+0x28a>
				shift += 4;
 8009864:	3404      	adds	r4, #4
 8009866:	b2e4      	uxtb	r4, r4
				numOfParams = messageLength[port-1] - shift;
 8009868:	4bbf      	ldr	r3, [pc, #764]	; (8009b68 <PxMessagingTask+0x36c>)
 800986a:	5d5b      	ldrb	r3, [r3, r5]
 800986c:	1b1f      	subs	r7, r3, r4
 800986e:	b2ff      	uxtb	r7, r7
				if (result == BOS_OK)
 8009870:	465a      	mov	r2, fp
 8009872:	2a00      	cmp	r2, #0
 8009874:	d10f      	bne.n	8009896 <PxMessagingTask+0x9a>
					switch (code)
 8009876:	2e23      	cmp	r6, #35	; 0x23
 8009878:	d901      	bls.n	800987e <PxMessagingTask+0x82>
 800987a:	f001 faf5 	bl	800ae68 <PxMessagingTask+0x166c>
 800987e:	00b2      	lsls	r2, r6, #2
 8009880:	49ba      	ldr	r1, [pc, #744]	; (8009b6c <PxMessagingTask+0x370>)
 8009882:	588a      	ldr	r2, [r1, r2]
 8009884:	4697      	mov	pc, r2
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8009886:	2e10      	cmp	r6, #16
 8009888:	d171      	bne.n	800996e <PxMessagingTask+0x172>
 800988a:	e7db      	b.n	8009844 <PxMessagingTask+0x48>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 800988c:	2e19      	cmp	r6, #25
 800988e:	d079      	beq.n	8009984 <PxMessagingTask+0x188>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009890:	2e1a      	cmp	r6, #26
 8009892:	d100      	bne.n	8009896 <PxMessagingTask+0x9a>
 8009894:	e080      	b.n	8009998 <PxMessagingTask+0x19c>
		if (result == BOS_ERR_UnknownMessage) {
 8009896:	465b      	mov	r3, fp
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <PxMessagingTask+0xa4>
 800989c:	f001 fafa 	bl	800ae94 <PxMessagingTask+0x1698>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 80098a0:	00eb      	lsls	r3, r5, #3
 80098a2:	1b5b      	subs	r3, r3, r5
 80098a4:	00d8      	lsls	r0, r3, #3
 80098a6:	4bae      	ldr	r3, [pc, #696]	; (8009b60 <PxMessagingTask+0x364>)
 80098a8:	18c0      	adds	r0, r0, r3
 80098aa:	4caf      	ldr	r4, [pc, #700]	; (8009b68 <PxMessagingTask+0x36c>)
 80098ac:	5d62      	ldrb	r2, [r4, r5]
 80098ae:	2100      	movs	r1, #0
 80098b0:	f00a fbac 	bl	801400c <memset>
		messageLength[port-1] = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 80098b8:	4bad      	ldr	r3, [pc, #692]	; (8009b70 <PxMessagingTask+0x374>)
 80098ba:	4642      	mov	r2, r8
 80098bc:	5c9b      	ldrb	r3, [r3, r2]
 80098be:	3b02      	subs	r3, #2
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d903      	bls.n	80098ce <PxMessagingTask+0xd2>
			portStatus[port] = FREE;
 80098c6:	4baa      	ldr	r3, [pc, #680]	; (8009b70 <PxMessagingTask+0x374>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	4641      	mov	r1, r8
 80098cc:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80098ce:	f007 f9e5 	bl	8010c9c <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80098d2:	2101      	movs	r1, #1
 80098d4:	4249      	negs	r1, r1
 80098d6:	2001      	movs	r0, #1
 80098d8:	f006 feec 	bl	80106b4 <ulTaskNotifyTake>
 80098dc:	23ff      	movs	r3, #255	; 0xff
 80098de:	9a06      	ldr	r2, [sp, #24]
 80098e0:	401a      	ands	r2, r3
 80098e2:	4690      	mov	r8, r2
		if (messageLength[port-1])
 80098e4:	1e55      	subs	r5, r2, #1
 80098e6:	4ba0      	ldr	r3, [pc, #640]	; (8009b68 <PxMessagingTask+0x36c>)
 80098e8:	5d58      	ldrb	r0, [r3, r5]
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d0d3      	beq.n	8009896 <PxMessagingTask+0x9a>
			if (cMessage[port-1][2]>>7) {
 80098ee:	00eb      	lsls	r3, r5, #3
 80098f0:	1b5b      	subs	r3, r3, r5
 80098f2:	00da      	lsls	r2, r3, #3
 80098f4:	4b9a      	ldr	r3, [pc, #616]	; (8009b60 <PxMessagingTask+0x364>)
 80098f6:	189b      	adds	r3, r3, r2
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	b25a      	sxtb	r2, r3
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	db8b      	blt.n	8009818 <PxMessagingTask+0x1c>
				longMessage = 0;
 8009900:	4a96      	ldr	r2, [pc, #600]	; (8009b5c <PxMessagingTask+0x360>)
 8009902:	2100      	movs	r1, #0
 8009904:	7011      	strb	r1, [r2, #0]
			dst = cMessage[port-1][0]; 
 8009906:	4996      	ldr	r1, [pc, #600]	; (8009b60 <PxMessagingTask+0x364>)
 8009908:	00ea      	lsls	r2, r5, #3
 800990a:	1b56      	subs	r6, r2, r5
 800990c:	00f4      	lsls	r4, r6, #3
 800990e:	5c64      	ldrb	r4, [r4, r1]
 8009910:	46a1      	mov	r9, r4
			src = cMessage[port-1][1];	
 8009912:	00f4      	lsls	r4, r6, #3
 8009914:	1909      	adds	r1, r1, r4
 8009916:	784a      	ldrb	r2, [r1, #1]
 8009918:	9205      	str	r2, [sp, #20]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 800991a:	07da      	lsls	r2, r3, #31
 800991c:	d480      	bmi.n	8009820 <PxMessagingTask+0x24>
			shift = 0;
 800991e:	2400      	movs	r4, #0
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009920:	0899      	lsrs	r1, r3, #2
 8009922:	2203      	movs	r2, #3
 8009924:	400a      	ands	r2, r1
 8009926:	4993      	ldr	r1, [pc, #588]	; (8009b74 <PxMessagingTask+0x378>)
 8009928:	71ca      	strb	r2, [r1, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 800992a:	2260      	movs	r2, #96	; 0x60
 800992c:	401a      	ands	r2, r3
 800992e:	718a      	strb	r2, [r1, #6]
			if (extendCode == true) {		
 8009930:	079b      	lsls	r3, r3, #30
 8009932:	d400      	bmi.n	8009936 <PxMessagingTask+0x13a>
 8009934:	e776      	b.n	8009824 <PxMessagingTask+0x28>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009936:	1d21      	adds	r1, r4, #4
 8009938:	00ea      	lsls	r2, r5, #3
 800993a:	1b52      	subs	r2, r2, r5
 800993c:	00d3      	lsls	r3, r2, #3
 800993e:	4a88      	ldr	r2, [pc, #544]	; (8009b60 <PxMessagingTask+0x364>)
 8009940:	18d3      	adds	r3, r2, r3
 8009942:	5c5e      	ldrb	r6, [r3, r1]
 8009944:	0236      	lsls	r6, r6, #8
 8009946:	1ce2      	adds	r2, r4, #3
 8009948:	5c9b      	ldrb	r3, [r3, r2]
 800994a:	18f6      	adds	r6, r6, r3
 800994c:	b2b6      	uxth	r6, r6
				++shift;
 800994e:	3401      	adds	r4, #1
 8009950:	b2e4      	uxtb	r4, r4
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009952:	464b      	mov	r3, r9
 8009954:	3b01      	subs	r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2bfc      	cmp	r3, #252	; 0xfc
 800995a:	d900      	bls.n	800995e <PxMessagingTask+0x162>
 800995c:	e76a      	b.n	8009834 <PxMessagingTask+0x38>
 800995e:	4a81      	ldr	r2, [pc, #516]	; (8009b64 <PxMessagingTask+0x368>)
 8009960:	7812      	ldrb	r2, [r2, #0]
 8009962:	454a      	cmp	r2, r9
 8009964:	d100      	bne.n	8009968 <PxMessagingTask+0x16c>
 8009966:	e765      	b.n	8009834 <PxMessagingTask+0x38>
 8009968:	2a01      	cmp	r2, #1
 800996a:	d100      	bne.n	800996e <PxMessagingTask+0x172>
 800996c:	e762      	b.n	8009834 <PxMessagingTask+0x38>
				ForwardReceivedMessage(port);
 800996e:	9807      	ldr	r0, [sp, #28]
 8009970:	f7ff fc3e 	bl	80091f0 <ForwardReceivedMessage>
				if (BOS.trace)
 8009974:	4b7f      	ldr	r3, [pc, #508]	; (8009b74 <PxMessagingTask+0x378>)
 8009976:	79db      	ldrb	r3, [r3, #7]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d087      	beq.n	800988c <PxMessagingTask+0x90>
					indMode = IND_SHORT_BLINK;
 800997c:	4b7e      	ldr	r3, [pc, #504]	; (8009b78 <PxMessagingTask+0x37c>)
 800997e:	2203      	movs	r2, #3
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e783      	b.n	800988c <PxMessagingTask+0x90>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8009984:	2064      	movs	r0, #100	; 0x64
 8009986:	f007 fb1b 	bl	8010fc0 <HAL_Delay>
 800998a:	2300      	movs	r3, #0
 800998c:	9a07      	ldr	r2, [sp, #28]
 800998e:	4649      	mov	r1, r9
 8009990:	9805      	ldr	r0, [sp, #20]
 8009992:	f7fa fb77 	bl	8004084 <remoteBootloaderUpdate>
 8009996:	e77e      	b.n	8009896 <PxMessagingTask+0x9a>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009998:	2064      	movs	r0, #100	; 0x64
 800999a:	f007 fb11 	bl	8010fc0 <HAL_Delay>
 800999e:	00eb      	lsls	r3, r5, #3
 80099a0:	1b5b      	subs	r3, r3, r5
 80099a2:	00da      	lsls	r2, r3, #3
 80099a4:	4b6e      	ldr	r3, [pc, #440]	; (8009b60 <PxMessagingTask+0x364>)
 80099a6:	189b      	adds	r3, r3, r2
 80099a8:	5d1b      	ldrb	r3, [r3, r4]
 80099aa:	9a07      	ldr	r2, [sp, #28]
 80099ac:	4649      	mov	r1, r9
 80099ae:	9805      	ldr	r0, [sp, #20]
 80099b0:	f7fa fb68 	bl	8004084 <remoteBootloaderUpdate>
 80099b4:	e76f      	b.n	8009896 <PxMessagingTask+0x9a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80099b6:	1e42      	subs	r2, r0, #1
 80099b8:	00eb      	lsls	r3, r5, #3
 80099ba:	1b5b      	subs	r3, r3, r5
 80099bc:	00d9      	lsls	r1, r3, #3
 80099be:	4b68      	ldr	r3, [pc, #416]	; (8009b60 <PxMessagingTask+0x364>)
 80099c0:	185b      	adds	r3, r3, r1
 80099c2:	5c9b      	ldrb	r3, [r3, r2]
 80099c4:	4a6d      	ldr	r2, [pc, #436]	; (8009b7c <PxMessagingTask+0x380>)
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d100      	bne.n	80099ce <PxMessagingTask+0x1d2>
 80099cc:	e73e      	b.n	800984c <PxMessagingTask+0x50>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 80099ce:	4a6b      	ldr	r2, [pc, #428]	; (8009b7c <PxMessagingTask+0x380>)
 80099d0:	7013      	strb	r3, [r2, #0]
 80099d2:	4a6b      	ldr	r2, [pc, #428]	; (8009b80 <PxMessagingTask+0x384>)
 80099d4:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 80099d6:	9907      	ldr	r1, [sp, #28]
 80099d8:	20ff      	movs	r0, #255	; 0xff
 80099da:	f7ff fc29 	bl	8009230 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 80099de:	4b62      	ldr	r3, [pc, #392]	; (8009b68 <PxMessagingTask+0x36c>)
 80099e0:	5d5a      	ldrb	r2, [r3, r5]
 80099e2:	3a01      	subs	r2, #1
 80099e4:	00eb      	lsls	r3, r5, #3
 80099e6:	1b5b      	subs	r3, r3, r5
 80099e8:	00d9      	lsls	r1, r3, #3
 80099ea:	4b5d      	ldr	r3, [pc, #372]	; (8009b60 <PxMessagingTask+0x364>)
 80099ec:	185b      	adds	r3, r3, r1
 80099ee:	2100      	movs	r1, #0
 80099f0:	5499      	strb	r1, [r3, r2]
 80099f2:	e72f      	b.n	8009854 <PxMessagingTask+0x58>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 80099f4:	3801      	subs	r0, #1
 80099f6:	00eb      	lsls	r3, r5, #3
 80099f8:	1b5b      	subs	r3, r3, r5
 80099fa:	00da      	lsls	r2, r3, #3
 80099fc:	4b58      	ldr	r3, [pc, #352]	; (8009b60 <PxMessagingTask+0x364>)
 80099fe:	189b      	adds	r3, r3, r2
 8009a00:	5c1a      	ldrb	r2, [r3, r0]
 8009a02:	4b5e      	ldr	r3, [pc, #376]	; (8009b7c <PxMessagingTask+0x380>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d000      	beq.n	8009a0c <PxMessagingTask+0x210>
 8009a0a:	e723      	b.n	8009854 <PxMessagingTask+0x58>
					result = BOS_ERR_MSG_Reflection;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	469b      	mov	fp, r3
 8009a10:	e720      	b.n	8009854 <PxMessagingTask+0x58>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009a12:	4b55      	ldr	r3, [pc, #340]	; (8009b68 <PxMessagingTask+0x36c>)
 8009a14:	5d5a      	ldrb	r2, [r3, r5]
 8009a16:	3a01      	subs	r2, #1
 8009a18:	00eb      	lsls	r3, r5, #3
 8009a1a:	1b5b      	subs	r3, r3, r5
 8009a1c:	00d9      	lsls	r1, r3, #3
 8009a1e:	4b50      	ldr	r3, [pc, #320]	; (8009b60 <PxMessagingTask+0x364>)
 8009a20:	185b      	adds	r3, r3, r1
 8009a22:	5c9b      	ldrb	r3, [r3, r2]
 8009a24:	4a55      	ldr	r2, [pc, #340]	; (8009b7c <PxMessagingTask+0x380>)
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d100      	bne.n	8009a2e <PxMessagingTask+0x232>
 8009a2c:	e716      	b.n	800985c <PxMessagingTask+0x60>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009a2e:	4a53      	ldr	r2, [pc, #332]	; (8009b7c <PxMessagingTask+0x380>)
 8009a30:	7013      	strb	r3, [r2, #0]
 8009a32:	4a53      	ldr	r2, [pc, #332]	; (8009b80 <PxMessagingTask+0x384>)
 8009a34:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8009a36:	9907      	ldr	r1, [sp, #28]
 8009a38:	20fe      	movs	r0, #254	; 0xfe
 8009a3a:	f7ff fbf9 	bl	8009230 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009a3e:	4b4a      	ldr	r3, [pc, #296]	; (8009b68 <PxMessagingTask+0x36c>)
 8009a40:	5d58      	ldrb	r0, [r3, r5]
 8009a42:	1e41      	subs	r1, r0, #1
 8009a44:	00ea      	lsls	r2, r5, #3
 8009a46:	1b52      	subs	r2, r2, r5
 8009a48:	00d7      	lsls	r7, r2, #3
 8009a4a:	4b45      	ldr	r3, [pc, #276]	; (8009b60 <PxMessagingTask+0x364>)
 8009a4c:	19db      	adds	r3, r3, r7
 8009a4e:	2200      	movs	r2, #0
 8009a50:	545a      	strb	r2, [r3, r1]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009a52:	3802      	subs	r0, #2
 8009a54:	5c1b      	ldrb	r3, [r3, r0]
 8009a56:	001f      	movs	r7, r3
 8009a58:	46a4      	mov	ip, r4
					for(i=0 ; i<temp ; i++)
 8009a5a:	42ba      	cmp	r2, r7
 8009a5c:	d20e      	bcs.n	8009a7c <PxMessagingTask+0x280>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009a5e:	1bc1      	subs	r1, r0, r7
 8009a60:	1851      	adds	r1, r2, r1
 8009a62:	00eb      	lsls	r3, r5, #3
 8009a64:	1b5b      	subs	r3, r3, r5
 8009a66:	00dc      	lsls	r4, r3, #3
 8009a68:	4b3d      	ldr	r3, [pc, #244]	; (8009b60 <PxMessagingTask+0x364>)
 8009a6a:	191b      	adds	r3, r3, r4
 8009a6c:	5c59      	ldrb	r1, [r3, r1]
 8009a6e:	4b3d      	ldr	r3, [pc, #244]	; (8009b64 <PxMessagingTask+0x368>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	4299      	cmp	r1, r3
 8009a74:	d018      	beq.n	8009aa8 <PxMessagingTask+0x2ac>
					for(i=0 ; i<temp ; i++)
 8009a76:	3201      	adds	r2, #1
 8009a78:	b2d2      	uxtb	r2, r2
 8009a7a:	e7ee      	b.n	8009a5a <PxMessagingTask+0x25e>
 8009a7c:	46ba      	mov	sl, r7
 8009a7e:	4664      	mov	r4, ip
					result = BOS_ERR_WrongID;
 8009a80:	2366      	movs	r3, #102	; 0x66
 8009a82:	469b      	mov	fp, r3
 8009a84:	e6ee      	b.n	8009864 <PxMessagingTask+0x68>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8009a86:	4b38      	ldr	r3, [pc, #224]	; (8009b68 <PxMessagingTask+0x36c>)
 8009a88:	5d5a      	ldrb	r2, [r3, r5]
 8009a8a:	3a01      	subs	r2, #1
 8009a8c:	00eb      	lsls	r3, r5, #3
 8009a8e:	1b5b      	subs	r3, r3, r5
 8009a90:	00d9      	lsls	r1, r3, #3
 8009a92:	4b33      	ldr	r3, [pc, #204]	; (8009b60 <PxMessagingTask+0x364>)
 8009a94:	185b      	adds	r3, r3, r1
 8009a96:	5c9a      	ldrb	r2, [r3, r2]
 8009a98:	4b38      	ldr	r3, [pc, #224]	; (8009b7c <PxMessagingTask+0x380>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d000      	beq.n	8009aa2 <PxMessagingTask+0x2a6>
 8009aa0:	e6e0      	b.n	8009864 <PxMessagingTask+0x68>
					result = BOS_ERR_MSG_Reflection;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	469b      	mov	fp, r3
 8009aa6:	e6dd      	b.n	8009864 <PxMessagingTask+0x68>
 8009aa8:	46ba      	mov	sl, r7
 8009aaa:	4664      	mov	r4, ip
							result = BOS_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	469b      	mov	fp, r3
 8009ab0:	e6d8      	b.n	8009864 <PxMessagingTask+0x68>
							indMode = IND_PING;	osDelay(10);
 8009ab2:	4b31      	ldr	r3, [pc, #196]	; (8009b78 <PxMessagingTask+0x37c>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	200a      	movs	r0, #10
 8009aba:	f005 fa05 	bl	800eec8 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009abe:	4b2d      	ldr	r3, [pc, #180]	; (8009b74 <PxMessagingTask+0x378>)
 8009ac0:	799b      	ldrb	r3, [r3, #6]
 8009ac2:	2b60      	cmp	r3, #96	; 0x60
 8009ac4:	d002      	beq.n	8009acc <PxMessagingTask+0x2d0>
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d000      	beq.n	8009acc <PxMessagingTask+0x2d0>
 8009aca:	e6e4      	b.n	8009896 <PxMessagingTask+0x9a>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009acc:	2200      	movs	r2, #0
 8009ace:	2102      	movs	r1, #2
 8009ad0:	9805      	ldr	r0, [sp, #20]
 8009ad2:	f7ff fbf5 	bl	80092c0 <SendMessageToModule>
 8009ad6:	e6de      	b.n	8009896 <PxMessagingTask+0x9a>
							if (!moduleAlias[myID][0])
 8009ad8:	4b22      	ldr	r3, [pc, #136]	; (8009b64 <PxMessagingTask+0x368>)
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	0093      	lsls	r3, r2, #2
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	005a      	lsls	r2, r3, #1
 8009ae2:	4b28      	ldr	r3, [pc, #160]	; (8009b84 <PxMessagingTask+0x388>)
 8009ae4:	5cd3      	ldrb	r3, [r2, r3]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d116      	bne.n	8009b18 <PxMessagingTask+0x31c>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009aea:	9a05      	ldr	r2, [sp, #20]
 8009aec:	4926      	ldr	r1, [pc, #152]	; (8009b88 <PxMessagingTask+0x38c>)
 8009aee:	4827      	ldr	r0, [pc, #156]	; (8009b8c <PxMessagingTask+0x390>)
 8009af0:	f00a fc86 	bl	8014400 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009af4:	4c25      	ldr	r4, [pc, #148]	; (8009b8c <PxMessagingTask+0x390>)
 8009af6:	0020      	movs	r0, r4
 8009af8:	f7f6 fb0e 	bl	8000118 <strlen>
 8009afc:	b282      	uxth	r2, r0
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <PxMessagingTask+0x394>)
 8009b00:	7818      	ldrb	r0, [r3, #0]
 8009b02:	2301      	movs	r3, #1
 8009b04:	425b      	negs	r3, r3
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	3333      	adds	r3, #51	; 0x33
 8009b0a:	0021      	movs	r1, r4
 8009b0c:	f005 f8a8 	bl	800ec60 <writePxMutex>
							responseStatus = BOS_OK;								
 8009b10:	4b20      	ldr	r3, [pc, #128]	; (8009b94 <PxMessagingTask+0x398>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
							break;
 8009b16:	e6be      	b.n	8009896 <PxMessagingTask+0x9a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009b18:	230a      	movs	r3, #10
 8009b1a:	9905      	ldr	r1, [sp, #20]
 8009b1c:	434b      	muls	r3, r1
 8009b1e:	4a19      	ldr	r2, [pc, #100]	; (8009b84 <PxMessagingTask+0x388>)
 8009b20:	189b      	adds	r3, r3, r2
 8009b22:	000a      	movs	r2, r1
 8009b24:	491c      	ldr	r1, [pc, #112]	; (8009b98 <PxMessagingTask+0x39c>)
 8009b26:	4819      	ldr	r0, [pc, #100]	; (8009b8c <PxMessagingTask+0x390>)
 8009b28:	f00a fc6a 	bl	8014400 <sprintf>
 8009b2c:	e7e2      	b.n	8009af4 <PxMessagingTask+0x2f8>
							IND_ON();
 8009b2e:	2180      	movs	r1, #128	; 0x80
 8009b30:	2090      	movs	r0, #144	; 0x90
 8009b32:	2201      	movs	r2, #1
 8009b34:	0109      	lsls	r1, r1, #4
 8009b36:	05c0      	lsls	r0, r0, #23
 8009b38:	f008 faa5 	bl	8012086 <HAL_GPIO_WritePin>
							break;
 8009b3c:	e6ab      	b.n	8009896 <PxMessagingTask+0x9a>
							IND_OFF();
 8009b3e:	2180      	movs	r1, #128	; 0x80
 8009b40:	2090      	movs	r0, #144	; 0x90
 8009b42:	2200      	movs	r2, #0
 8009b44:	0109      	lsls	r1, r1, #4
 8009b46:	05c0      	lsls	r0, r0, #23
 8009b48:	f008 fa9d 	bl	8012086 <HAL_GPIO_WritePin>
							break;
 8009b4c:	e6a3      	b.n	8009896 <PxMessagingTask+0x9a>
							IND_toggle();
 8009b4e:	2180      	movs	r1, #128	; 0x80
 8009b50:	2090      	movs	r0, #144	; 0x90
 8009b52:	0109      	lsls	r1, r1, #4
 8009b54:	05c0      	lsls	r0, r0, #23
 8009b56:	f008 fa9c 	bl	8012092 <HAL_GPIO_TogglePin>
							break;
 8009b5a:	e69c      	b.n	8009896 <PxMessagingTask+0x9a>
 8009b5c:	20000cb9 	.word	0x20000cb9
 8009b60:	20000b34 	.word	0x20000b34
 8009b64:	20000070 	.word	0x20000070
 8009b68:	20000cf4 	.word	0x20000cf4
 8009b6c:	0801afe4 	.word	0x0801afe4
 8009b70:	20000db0 	.word	0x20000db0
 8009b74:	200069d4 	.word	0x200069d4
 8009b78:	20000cb8 	.word	0x20000cb8
 8009b7c:	200011b6 	.word	0x200011b6
 8009b80:	20000af8 	.word	0x20000af8
 8009b84:	20000d2c 	.word	0x20000d2c
 8009b88:	08019a84 	.word	0x08019a84
 8009b8c:	20001300 	.word	0x20001300
 8009b90:	20000af7 	.word	0x20000af7
 8009b94:	20000dc8 	.word	0x20000dc8
 8009b98:	08019a98 	.word	0x08019a98
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8009b9c:	9b05      	ldr	r3, [sp, #20]
 8009b9e:	021a      	lsls	r2, r3, #8
 8009ba0:	b292      	uxth	r2, r2
 8009ba2:	1ca0      	adds	r0, r4, #2
 8009ba4:	00eb      	lsls	r3, r5, #3
 8009ba6:	1b5b      	subs	r3, r3, r5
 8009ba8:	00d9      	lsls	r1, r3, #3
 8009baa:	4bda      	ldr	r3, [pc, #872]	; (8009f14 <PxMessagingTask+0x718>)
 8009bac:	1859      	adds	r1, r3, r1
 8009bae:	5c0b      	ldrb	r3, [r1, r0]
 8009bb0:	18d2      	adds	r2, r2, r3
 8009bb2:	4bd9      	ldr	r3, [pc, #868]	; (8009f18 <PxMessagingTask+0x71c>)
 8009bb4:	00a8      	lsls	r0, r5, #2
 8009bb6:	521a      	strh	r2, [r3, r0]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8009bb8:	5d0a      	ldrb	r2, [r1, r4]
 8009bba:	0212      	lsls	r2, r2, #8
 8009bbc:	3401      	adds	r4, #1
 8009bbe:	5d09      	ldrb	r1, [r1, r4]
 8009bc0:	1852      	adds	r2, r2, r1
 8009bc2:	181b      	adds	r3, r3, r0
 8009bc4:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009bc6:	4bd5      	ldr	r3, [pc, #852]	; (8009f1c <PxMessagingTask+0x720>)
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	4ad5      	ldr	r2, [pc, #852]	; (8009f20 <PxMessagingTask+0x724>)
 8009bcc:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009bd2:	9c07      	ldr	r4, [sp, #28]
 8009bd4:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009bd6:	2002      	movs	r0, #2
 8009bd8:	f005 f976 	bl	800eec8 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009bdc:	2303      	movs	r3, #3
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	3308      	adds	r3, #8
 8009be2:	2200      	movs	r2, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	0020      	movs	r0, r4
 8009be8:	f7ff f95a 	bl	8008ea0 <SendMessageFromPort>
							break;
 8009bec:	e653      	b.n	8009896 <PxMessagingTask+0x9a>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	021a      	lsls	r2, r3, #8
 8009bf2:	b292      	uxth	r2, r2
 8009bf4:	1ca1      	adds	r1, r4, #2
 8009bf6:	00eb      	lsls	r3, r5, #3
 8009bf8:	1b5b      	subs	r3, r3, r5
 8009bfa:	00d8      	lsls	r0, r3, #3
 8009bfc:	4bc5      	ldr	r3, [pc, #788]	; (8009f14 <PxMessagingTask+0x718>)
 8009bfe:	1818      	adds	r0, r3, r0
 8009c00:	5c43      	ldrb	r3, [r0, r1]
 8009c02:	18d2      	adds	r2, r2, r3
 8009c04:	4bc4      	ldr	r3, [pc, #784]	; (8009f18 <PxMessagingTask+0x71c>)
 8009c06:	00a9      	lsls	r1, r5, #2
 8009c08:	525a      	strh	r2, [r3, r1]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009c0a:	5d02      	ldrb	r2, [r0, r4]
 8009c0c:	0212      	lsls	r2, r2, #8
 8009c0e:	3401      	adds	r4, #1
 8009c10:	5d00      	ldrb	r0, [r0, r4]
 8009c12:	1812      	adds	r2, r2, r0
 8009c14:	185b      	adds	r3, r3, r1
 8009c16:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009c18:	4bc2      	ldr	r3, [pc, #776]	; (8009f24 <PxMessagingTask+0x728>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
							break;
 8009c1e:	e63a      	b.n	8009896 <PxMessagingTask+0x9a>
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009c20:	9b07      	ldr	r3, [sp, #28]
 8009c22:	429e      	cmp	r6, r3
 8009c24:	d00c      	beq.n	8009c40 <PxMessagingTask+0x444>
 8009c26:	0030      	movs	r0, r6
 8009c28:	f004 fffc 	bl	800ec24 <GetUart>
 8009c2c:	19a2      	adds	r2, r4, r6
 8009c2e:	3a01      	subs	r2, #1
 8009c30:	00eb      	lsls	r3, r5, #3
 8009c32:	1b5b      	subs	r3, r3, r5
 8009c34:	00d9      	lsls	r1, r3, #3
 8009c36:	4bb7      	ldr	r3, [pc, #732]	; (8009f14 <PxMessagingTask+0x718>)
 8009c38:	185b      	adds	r3, r3, r1
 8009c3a:	5c99      	ldrb	r1, [r3, r2]
 8009c3c:	f005 f88a 	bl	800ed54 <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009c40:	3601      	adds	r6, #1
 8009c42:	b2f6      	uxtb	r6, r6
 8009c44:	2e05      	cmp	r6, #5
 8009c46:	d9eb      	bls.n	8009c20 <PxMessagingTask+0x424>
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009c48:	9807      	ldr	r0, [sp, #28]
 8009c4a:	f004 ffeb 	bl	800ec24 <GetUart>
 8009c4e:	340a      	adds	r4, #10
 8009c50:	00eb      	lsls	r3, r5, #3
 8009c52:	1b5b      	subs	r3, r3, r5
 8009c54:	00da      	lsls	r2, r3, #3
 8009c56:	4baf      	ldr	r3, [pc, #700]	; (8009f14 <PxMessagingTask+0x718>)
 8009c58:	189b      	adds	r3, r3, r2
 8009c5a:	5d19      	ldrb	r1, [r3, r4]
 8009c5c:	f005 f87a 	bl	800ed54 <SwapUartPins>
							break;
 8009c60:	e619      	b.n	8009896 <PxMessagingTask+0x9a>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009c62:	2601      	movs	r6, #1
 8009c64:	e7ee      	b.n	8009c44 <PxMessagingTask+0x448>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009c66:	00eb      	lsls	r3, r5, #3
 8009c68:	1b5b      	subs	r3, r3, r5
 8009c6a:	00da      	lsls	r2, r3, #3
 8009c6c:	4ba9      	ldr	r3, [pc, #676]	; (8009f14 <PxMessagingTask+0x718>)
 8009c6e:	189b      	adds	r3, r3, r2
 8009c70:	5d1b      	ldrb	r3, [r3, r4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d108      	bne.n	8009c88 <PxMessagingTask+0x48c>
								myID = cMessage[port-1][1+shift];
 8009c76:	3401      	adds	r4, #1
 8009c78:	2238      	movs	r2, #56	; 0x38
 8009c7a:	436a      	muls	r2, r5
 8009c7c:	4ba5      	ldr	r3, [pc, #660]	; (8009f14 <PxMessagingTask+0x718>)
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	5d1a      	ldrb	r2, [r3, r4]
 8009c82:	4ba9      	ldr	r3, [pc, #676]	; (8009f28 <PxMessagingTask+0x72c>)
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e606      	b.n	8009896 <PxMessagingTask+0x9a>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d000      	beq.n	8009c8e <PxMessagingTask+0x492>
 8009c8c:	e603      	b.n	8009896 <PxMessagingTask+0x9a>
								messageParams[0] = 0;											/* change own ID */
 8009c8e:	4aa4      	ldr	r2, [pc, #656]	; (8009f20 <PxMessagingTask+0x724>)
 8009c90:	2100      	movs	r1, #0
 8009c92:	7011      	strb	r1, [r2, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009c94:	1c60      	adds	r0, r4, #1
 8009c96:	3337      	adds	r3, #55	; 0x37
 8009c98:	436b      	muls	r3, r5
 8009c9a:	4e9e      	ldr	r6, [pc, #632]	; (8009f14 <PxMessagingTask+0x718>)
 8009c9c:	18f3      	adds	r3, r6, r3
 8009c9e:	5c18      	ldrb	r0, [r3, r0]
 8009ca0:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009ca2:	3402      	adds	r4, #2
 8009ca4:	5d18      	ldrb	r0, [r3, r4]
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	330d      	adds	r3, #13
 8009cac:	000a      	movs	r2, r1
 8009cae:	f7ff f8f7 	bl	8008ea0 <SendMessageFromPort>
 8009cb2:	e5f0      	b.n	8009896 <PxMessagingTask+0x9a>
							if (longMessage) {
 8009cb4:	4b9d      	ldr	r3, [pc, #628]	; (8009f2c <PxMessagingTask+0x730>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00f      	beq.n	8009cdc <PxMessagingTask+0x4e0>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009cbc:	4e9c      	ldr	r6, [pc, #624]	; (8009f30 <PxMessagingTask+0x734>)
 8009cbe:	8833      	ldrh	r3, [r6, #0]
 8009cc0:	489c      	ldr	r0, [pc, #624]	; (8009f34 <PxMessagingTask+0x738>)
 8009cc2:	1818      	adds	r0, r3, r0
 8009cc4:	2138      	movs	r1, #56	; 0x38
 8009cc6:	4369      	muls	r1, r5
 8009cc8:	190c      	adds	r4, r1, r4
 8009cca:	4992      	ldr	r1, [pc, #584]	; (8009f14 <PxMessagingTask+0x718>)
 8009ccc:	1861      	adds	r1, r4, r1
 8009cce:	003a      	movs	r2, r7
 8009cd0:	f00a f993 	bl	8013ffa <memcpy>
								longMessageLastPtr += numOfParams;
 8009cd4:	8833      	ldrh	r3, [r6, #0]
 8009cd6:	19df      	adds	r7, r3, r7
 8009cd8:	8037      	strh	r7, [r6, #0]
 8009cda:	e5dc      	b.n	8009896 <PxMessagingTask+0x9a>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009cdc:	4e94      	ldr	r6, [pc, #592]	; (8009f30 <PxMessagingTask+0x734>)
 8009cde:	8830      	ldrh	r0, [r6, #0]
 8009ce0:	4b94      	ldr	r3, [pc, #592]	; (8009f34 <PxMessagingTask+0x738>)
 8009ce2:	4699      	mov	r9, r3
 8009ce4:	4448      	add	r0, r9
 8009ce6:	2138      	movs	r1, #56	; 0x38
 8009ce8:	4369      	muls	r1, r5
 8009cea:	190c      	adds	r4, r1, r4
 8009cec:	4989      	ldr	r1, [pc, #548]	; (8009f14 <PxMessagingTask+0x718>)
 8009cee:	1861      	adds	r1, r4, r1
 8009cf0:	003a      	movs	r2, r7
 8009cf2:	f00a f982 	bl	8013ffa <memcpy>
								longMessageLastPtr += numOfParams;
 8009cf6:	8834      	ldrh	r4, [r6, #0]
 8009cf8:	19e4      	adds	r4, r4, r7
 8009cfa:	b2a4      	uxth	r4, r4
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009cfc:	2116      	movs	r1, #22
 8009cfe:	0020      	movs	r0, r4
 8009d00:	f7f6 fa26 	bl	8000150 <__udivsi3>
 8009d04:	4b8c      	ldr	r3, [pc, #560]	; (8009f38 <PxMessagingTask+0x73c>)
 8009d06:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009d08:	0022      	movs	r2, r4
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	488b      	ldr	r0, [pc, #556]	; (8009f3c <PxMessagingTask+0x740>)
 8009d0e:	f00a f974 	bl	8013ffa <memcpy>
								longMessageLastPtr = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	8033      	strh	r3, [r6, #0]
 8009d16:	e5be      	b.n	8009896 <PxMessagingTask+0x9a>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009d18:	3401      	adds	r4, #1
 8009d1a:	b2e4      	uxtb	r4, r4
 8009d1c:	2c05      	cmp	r4, #5
 8009d1e:	d810      	bhi.n	8009d42 <PxMessagingTask+0x546>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009d20:	0020      	movs	r0, r4
 8009d22:	f004 ff7f 	bl	800ec24 <GetUart>
 8009d26:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d1f3      	bne.n	8009d18 <PxMessagingTask+0x51c>
									messageParams[temp++] = p;
 8009d30:	1c73      	adds	r3, r6, #1
 8009d32:	4a7b      	ldr	r2, [pc, #492]	; (8009f20 <PxMessagingTask+0x724>)
 8009d34:	5594      	strb	r4, [r2, r6]
 8009d36:	b2de      	uxtb	r6, r3
 8009d38:	e7ee      	b.n	8009d18 <PxMessagingTask+0x51c>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009d3a:	2401      	movs	r4, #1
							temp = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	001e      	movs	r6, r3
 8009d40:	e7ec      	b.n	8009d1c <PxMessagingTask+0x520>
 8009d42:	46b2      	mov	sl, r6
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009d44:	b2b2      	uxth	r2, r6
 8009d46:	2114      	movs	r1, #20
 8009d48:	9805      	ldr	r0, [sp, #20]
 8009d4a:	f7ff fab9 	bl	80092c0 <SendMessageToModule>
							break;
 8009d4e:	e5a2      	b.n	8009896 <PxMessagingTask+0x9a>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	1860      	adds	r0, r4, r1
 8009d56:	00ea      	lsls	r2, r5, #3
 8009d58:	1b52      	subs	r2, r2, r5
 8009d5a:	00d6      	lsls	r6, r2, #3
 8009d5c:	4a6d      	ldr	r2, [pc, #436]	; (8009f14 <PxMessagingTask+0x718>)
 8009d5e:	1992      	adds	r2, r2, r6
 8009d60:	5c10      	ldrb	r0, [r2, r0]
 8009d62:	3801      	subs	r0, #1
 8009d64:	2680      	movs	r6, #128	; 0x80
 8009d66:	0236      	lsls	r6, r6, #8
 8009d68:	4106      	asrs	r6, r0
 8009d6a:	4875      	ldr	r0, [pc, #468]	; (8009f40 <PxMessagingTask+0x744>)
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	5a1a      	ldrh	r2, [r3, r0]
 8009d70:	4332      	orrs	r2, r6
 8009d72:	521a      	strh	r2, [r3, r0]
							for (p=0 ; p<numOfParams ; p++) 
 8009d74:	3101      	adds	r1, #1
 8009d76:	b2c9      	uxtb	r1, r1
 8009d78:	42b9      	cmp	r1, r7
 8009d7a:	d3e9      	bcc.n	8009d50 <PxMessagingTask+0x554>
							responseStatus = BOS_OK;
 8009d7c:	4b69      	ldr	r3, [pc, #420]	; (8009f24 <PxMessagingTask+0x728>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
							break;		
 8009d82:	e588      	b.n	8009896 <PxMessagingTask+0x9a>
							for (p=0 ; p<numOfParams ; p++) 
 8009d84:	2100      	movs	r1, #0
 8009d86:	e7f7      	b.n	8009d78 <PxMessagingTask+0x57c>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8009d88:	00eb      	lsls	r3, r5, #3
 8009d8a:	1b5b      	subs	r3, r3, r5
 8009d8c:	00da      	lsls	r2, r3, #3
 8009d8e:	4b61      	ldr	r3, [pc, #388]	; (8009f14 <PxMessagingTask+0x718>)
 8009d90:	189b      	adds	r3, r3, r2
 8009d92:	5d1e      	ldrb	r6, [r3, r4]
 8009d94:	0636      	lsls	r6, r6, #24
 8009d96:	1c62      	adds	r2, r4, #1
 8009d98:	5c9a      	ldrb	r2, [r3, r2]
 8009d9a:	0412      	lsls	r2, r2, #16
 8009d9c:	18b6      	adds	r6, r6, r2
 8009d9e:	1ca2      	adds	r2, r4, #2
 8009da0:	5c9a      	ldrb	r2, [r3, r2]
 8009da2:	0212      	lsls	r2, r2, #8
 8009da4:	18b6      	adds	r6, r6, r2
 8009da6:	1ce2      	adds	r2, r4, #3
 8009da8:	5c9a      	ldrb	r2, [r3, r2]
 8009daa:	18b6      	adds	r6, r6, r2
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 8009dac:	1d22      	adds	r2, r4, #4
 8009dae:	4691      	mov	r9, r2
 8009db0:	5c9b      	ldrb	r3, [r3, r2]
 8009db2:	2bff      	cmp	r3, #255	; 0xff
 8009db4:	d00e      	beq.n	8009dd4 <PxMessagingTask+0x5d8>
									for (p=0 ; p<numOfParams ; p++) 
 8009db6:	2400      	movs	r4, #0
								temp = temp32 = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	469a      	mov	sl, r3
 8009dbc:	e01b      	b.n	8009df6 <PxMessagingTask+0x5fa>
										UpdateBaudrate(p, temp32); 
 8009dbe:	0031      	movs	r1, r6
 8009dc0:	0020      	movs	r0, r4
 8009dc2:	f004 ffbd 	bl	800ed40 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009dc6:	3401      	adds	r4, #1
 8009dc8:	b2e4      	uxtb	r4, r4
 8009dca:	2c05      	cmp	r4, #5
 8009dcc:	d9f7      	bls.n	8009dbe <PxMessagingTask+0x5c2>
								temp = temp32 = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	469a      	mov	sl, r3
 8009dd2:	e560      	b.n	8009896 <PxMessagingTask+0x9a>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009dd4:	2401      	movs	r4, #1
 8009dd6:	e7f8      	b.n	8009dca <PxMessagingTask+0x5ce>
										temp = cMessage[port-1][4+shift+p];
 8009dd8:	464b      	mov	r3, r9
 8009dda:	18e2      	adds	r2, r4, r3
 8009ddc:	00eb      	lsls	r3, r5, #3
 8009dde:	1b5b      	subs	r3, r3, r5
 8009de0:	00d9      	lsls	r1, r3, #3
 8009de2:	4b4c      	ldr	r3, [pc, #304]	; (8009f14 <PxMessagingTask+0x718>)
 8009de4:	185b      	adds	r3, r3, r1
 8009de6:	5c9b      	ldrb	r3, [r3, r2]
 8009de8:	469a      	mov	sl, r3
										if (temp>0 && temp<=NumOfPorts)	{
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d904      	bls.n	8009dfc <PxMessagingTask+0x600>
									for (p=0 ; p<numOfParams ; p++) 
 8009df2:	3401      	adds	r4, #1
 8009df4:	b2e4      	uxtb	r4, r4
 8009df6:	42bc      	cmp	r4, r7
 8009df8:	d3ee      	bcc.n	8009dd8 <PxMessagingTask+0x5dc>
 8009dfa:	e54c      	b.n	8009896 <PxMessagingTask+0x9a>
											UpdateBaudrate(temp, temp32); 
 8009dfc:	0031      	movs	r1, r6
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f004 ff9e 	bl	800ed40 <UpdateBaudrate>
 8009e04:	e7f5      	b.n	8009df2 <PxMessagingTask+0x5f6>
								SaveToRO();
 8009e06:	f001 fa05 	bl	800b214 <SaveToRO>
							SaveEEportsDir();
 8009e0a:	f7f9 fb33 	bl	8003474 <SaveEEportsDir>
							indMode = IND_PING;
 8009e0e:	4b4d      	ldr	r3, [pc, #308]	; (8009f44 <PxMessagingTask+0x748>)
 8009e10:	2201      	movs	r2, #1
 8009e12:	701a      	strb	r2, [r3, #0]
							break;
 8009e14:	e53f      	b.n	8009896 <PxMessagingTask+0x9a>
							ClearEEportsDir();
 8009e16:	f7f9 fb4d 	bl	80034b4 <ClearEEportsDir>
							osDelay(100);
 8009e1a:	2064      	movs	r0, #100	; 0x64
 8009e1c:	f005 f854 	bl	800eec8 <osDelay>
							indMode = IND_TOPOLOGY;
 8009e20:	4b48      	ldr	r3, [pc, #288]	; (8009f44 <PxMessagingTask+0x748>)
 8009e22:	2202      	movs	r2, #2
 8009e24:	701a      	strb	r2, [r3, #0]
							break;
 8009e26:	e536      	b.n	8009896 <PxMessagingTask+0x9a>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009e28:	f005 f970 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 8009e2c:	0006      	movs	r6, r0
							if (dst == BOS_BROADCAST)
 8009e2e:	464b      	mov	r3, r9
 8009e30:	2bff      	cmp	r3, #255	; 0xff
 8009e32:	d025      	beq.n	8009e80 <PxMessagingTask+0x684>
							else if (dst == BOS_MULTICAST)
 8009e34:	2bfe      	cmp	r3, #254	; 0xfe
 8009e36:	d02d      	beq.n	8009e94 <PxMessagingTask+0x698>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009e38:	00ea      	lsls	r2, r5, #3
 8009e3a:	1b52      	subs	r2, r2, r5
 8009e3c:	00d3      	lsls	r3, r2, #3
 8009e3e:	191c      	adds	r4, r3, r4
 8009e40:	4934      	ldr	r1, [pc, #208]	; (8009f14 <PxMessagingTask+0x718>)
 8009e42:	1861      	adds	r1, r4, r1
 8009e44:	003a      	movs	r2, r7
 8009e46:	4840      	ldr	r0, [pc, #256]	; (8009f48 <PxMessagingTask+0x74c>)
 8009e48:	f00a f8d7 	bl	8013ffa <memcpy>
								temp = PcPort; PcPort = port;
 8009e4c:	4f3f      	ldr	r7, [pc, #252]	; (8009f4c <PxMessagingTask+0x750>)
 8009e4e:	783c      	ldrb	r4, [r7, #0]
 8009e50:	9b07      	ldr	r3, [sp, #28]
 8009e52:	703b      	strb	r3, [r7, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009e54:	2299      	movs	r2, #153	; 0x99
 8009e56:	0092      	lsls	r2, r2, #2
 8009e58:	0031      	movs	r1, r6
 8009e5a:	483b      	ldr	r0, [pc, #236]	; (8009f48 <PxMessagingTask+0x74c>)
 8009e5c:	f005 f8f0 	bl	800f040 <FreeRTOS_CLIProcessCommand>
 8009e60:	4681      	mov	r9, r0
								PcPort = temp;
 8009e62:	703c      	strb	r4, [r7, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 8009e64:	4b3a      	ldr	r3, [pc, #232]	; (8009f50 <PxMessagingTask+0x754>)
 8009e66:	799b      	ldrb	r3, [r3, #6]
 8009e68:	2b60      	cmp	r3, #96	; 0x60
 8009e6a:	d01f      	beq.n	8009eac <PxMessagingTask+0x6b0>
							while( xReturned != pdFALSE );								
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1ec      	bne.n	8009e4c <PxMessagingTask+0x650>
 8009e72:	46a2      	mov	sl, r4
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009e74:	2232      	movs	r2, #50	; 0x32
 8009e76:	2100      	movs	r1, #0
 8009e78:	4833      	ldr	r0, [pc, #204]	; (8009f48 <PxMessagingTask+0x74c>)
 8009e7a:	f00a f8c7 	bl	801400c <memset>
							break;
 8009e7e:	e50a      	b.n	8009896 <PxMessagingTask+0x9a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009e80:	2138      	movs	r1, #56	; 0x38
 8009e82:	4369      	muls	r1, r5
 8009e84:	190c      	adds	r4, r1, r4
 8009e86:	4923      	ldr	r1, [pc, #140]	; (8009f14 <PxMessagingTask+0x718>)
 8009e88:	1861      	adds	r1, r4, r1
 8009e8a:	1e7a      	subs	r2, r7, #1
 8009e8c:	482e      	ldr	r0, [pc, #184]	; (8009f48 <PxMessagingTask+0x74c>)
 8009e8e:	f00a f8b4 	bl	8013ffa <memcpy>
 8009e92:	e7db      	b.n	8009e4c <PxMessagingTask+0x650>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8009e94:	2138      	movs	r1, #56	; 0x38
 8009e96:	4369      	muls	r1, r5
 8009e98:	190c      	adds	r4, r1, r4
 8009e9a:	491e      	ldr	r1, [pc, #120]	; (8009f14 <PxMessagingTask+0x718>)
 8009e9c:	1861      	adds	r1, r4, r1
 8009e9e:	4653      	mov	r3, sl
 8009ea0:	1afa      	subs	r2, r7, r3
 8009ea2:	3a02      	subs	r2, #2
 8009ea4:	4828      	ldr	r0, [pc, #160]	; (8009f48 <PxMessagingTask+0x74c>)
 8009ea6:	f00a f8a8 	bl	8013ffa <memcpy>
 8009eaa:	e7cf      	b.n	8009e4c <PxMessagingTask+0x650>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 8009eac:	0030      	movs	r0, r6
 8009eae:	f7f6 f933 	bl	8000118 <strlen>
 8009eb2:	0002      	movs	r2, r0
 8009eb4:	0031      	movs	r1, r6
 8009eb6:	481a      	ldr	r0, [pc, #104]	; (8009f20 <PxMessagingTask+0x724>)
 8009eb8:	f00a f89f 	bl	8013ffa <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8009ebc:	0030      	movs	r0, r6
 8009ebe:	f7f6 f92b 	bl	8000118 <strlen>
 8009ec2:	b282      	uxth	r2, r0
 8009ec4:	2118      	movs	r1, #24
 8009ec6:	9805      	ldr	r0, [sp, #20]
 8009ec8:	f7ff f9fa 	bl	80092c0 <SendMessageToModule>
									osDelay(10); 
 8009ecc:	200a      	movs	r0, #10
 8009ece:	f004 fffb 	bl	800eec8 <osDelay>
 8009ed2:	e7cb      	b.n	8009e6c <PxMessagingTask+0x670>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009ed4:	f005 f91a 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 8009ed8:	0006      	movs	r6, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009eda:	f7f6 f91d 	bl	8000118 <strlen>
 8009ede:	0002      	movs	r2, r0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	0030      	movs	r0, r6
 8009ee4:	f00a f892 	bl	801400c <memset>
							if (longMessage) {
 8009ee8:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <PxMessagingTask+0x730>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d031      	beq.n	8009f54 <PxMessagingTask+0x758>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <PxMessagingTask+0x734>)
 8009ef2:	4699      	mov	r9, r3
 8009ef4:	8818      	ldrh	r0, [r3, #0]
 8009ef6:	1830      	adds	r0, r6, r0
 8009ef8:	2138      	movs	r1, #56	; 0x38
 8009efa:	4369      	muls	r1, r5
 8009efc:	190c      	adds	r4, r1, r4
 8009efe:	4905      	ldr	r1, [pc, #20]	; (8009f14 <PxMessagingTask+0x718>)
 8009f00:	1861      	adds	r1, r4, r1
 8009f02:	003a      	movs	r2, r7
 8009f04:	f00a f879 	bl	8013ffa <memcpy>
								longMessageLastPtr += numOfParams;
 8009f08:	464b      	mov	r3, r9
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	19df      	adds	r7, r3, r7
 8009f0e:	464b      	mov	r3, r9
 8009f10:	801f      	strh	r7, [r3, #0]
 8009f12:	e4c0      	b.n	8009896 <PxMessagingTask+0x9a>
 8009f14:	20000b34 	.word	0x20000b34
 8009f18:	20000d4c 	.word	0x20000d4c
 8009f1c:	20000072 	.word	0x20000072
 8009f20:	20000cfc 	.word	0x20000cfc
 8009f24:	20000dc8 	.word	0x20000dc8
 8009f28:	20000070 	.word	0x20000070
 8009f2c:	20000cb9 	.word	0x20000cb9
 8009f30:	20000cba 	.word	0x20000cba
 8009f34:	200011ec 	.word	0x200011ec
 8009f38:	2000001c 	.word	0x2000001c
 8009f3c:	200000a4 	.word	0x200000a4
 8009f40:	20006e08 	.word	0x20006e08
 8009f44:	20000cb8 	.word	0x20000cb8
 8009f48:	200011b8 	.word	0x200011b8
 8009f4c:	20000af7 	.word	0x20000af7
 8009f50:	200069d4 	.word	0x200069d4
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009f54:	4beb      	ldr	r3, [pc, #940]	; (800a304 <PxMessagingTask+0xb08>)
 8009f56:	4699      	mov	r9, r3
 8009f58:	8818      	ldrh	r0, [r3, #0]
 8009f5a:	1830      	adds	r0, r6, r0
 8009f5c:	2138      	movs	r1, #56	; 0x38
 8009f5e:	4369      	muls	r1, r5
 8009f60:	190c      	adds	r4, r1, r4
 8009f62:	49e9      	ldr	r1, [pc, #932]	; (800a308 <PxMessagingTask+0xb0c>)
 8009f64:	1861      	adds	r1, r4, r1
 8009f66:	003a      	movs	r2, r7
 8009f68:	f00a f847 	bl	8013ffa <memcpy>
								longMessageLastPtr = 0;
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	464b      	mov	r3, r9
 8009f70:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 8009f72:	4be6      	ldr	r3, [pc, #920]	; (800a30c <PxMessagingTask+0xb10>)
 8009f74:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8009f76:	000b      	movs	r3, r1
 8009f78:	000a      	movs	r2, r1
 8009f7a:	48e5      	ldr	r0, [pc, #916]	; (800a310 <PxMessagingTask+0xb14>)
 8009f7c:	6800      	ldr	r0, [r0, #0]
 8009f7e:	f006 fbe5 	bl	801074c <xTaskGenericNotify>
 8009f82:	e488      	b.n	8009896 <PxMessagingTask+0x9a>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8009f84:	4be3      	ldr	r3, [pc, #908]	; (800a314 <PxMessagingTask+0xb18>)
 8009f86:	4ae4      	ldr	r2, [pc, #912]	; (800a318 <PxMessagingTask+0xb1c>)
 8009f88:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 8009f8a:	4be4      	ldr	r3, [pc, #912]	; (800a31c <PxMessagingTask+0xb20>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009f90:	200a      	movs	r0, #10
 8009f92:	f004 ff99 	bl	800eec8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	4be1      	ldr	r3, [pc, #900]	; (800a320 <PxMessagingTask+0xb24>)
 8009f9c:	4ae1      	ldr	r2, [pc, #900]	; (800a324 <PxMessagingTask+0xb28>)
 8009f9e:	60da      	str	r2, [r3, #12]
 8009fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009fa4:	46c0      	nop			; (mov r8, r8)
 8009fa6:	e7fd      	b.n	8009fa4 <PxMessagingTask+0x7a8>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009fa8:	00eb      	lsls	r3, r5, #3
 8009faa:	1b5b      	subs	r3, r3, r5
 8009fac:	00da      	lsls	r2, r3, #3
 8009fae:	4ed6      	ldr	r6, [pc, #856]	; (800a308 <PxMessagingTask+0xb0c>)
 8009fb0:	18b6      	adds	r6, r6, r2
 8009fb2:	5d30      	ldrb	r0, [r6, r4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	3319      	adds	r3, #25
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f7fe ff6f 	bl	8008ea0 <SendMessageFromPort>
								osDelay(100);
 8009fc2:	2064      	movs	r0, #100	; 0x64
 8009fc4:	f004 ff80 	bl	800eec8 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8009fc8:	5d33      	ldrb	r3, [r6, r4]
 8009fca:	4ad7      	ldr	r2, [pc, #860]	; (800a328 <PxMessagingTask+0xb2c>)
 8009fcc:	7811      	ldrb	r1, [r2, #0]
 8009fce:	9a07      	ldr	r2, [sp, #28]
 8009fd0:	9805      	ldr	r0, [sp, #20]
 8009fd2:	f7fa f857 	bl	8004084 <remoteBootloaderUpdate>
								break;
 8009fd6:	e45e      	b.n	8009896 <PxMessagingTask+0x9a>
							temp = cMessage[port-1][11+shift];
 8009fd8:	9409      	str	r4, [sp, #36]	; 0x24
 8009fda:	230b      	movs	r3, #11
 8009fdc:	469c      	mov	ip, r3
 8009fde:	44a4      	add	ip, r4
 8009fe0:	4661      	mov	r1, ip
 8009fe2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fe4:	00eb      	lsls	r3, r5, #3
 8009fe6:	1b5b      	subs	r3, r3, r5
 8009fe8:	00da      	lsls	r2, r3, #3
 8009fea:	4bc7      	ldr	r3, [pc, #796]	; (800a308 <PxMessagingTask+0xb0c>)
 8009fec:	189b      	adds	r3, r3, r2
 8009fee:	5c5b      	ldrb	r3, [r3, r1]
 8009ff0:	469a      	mov	sl, r3
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009ff2:	2f0f      	cmp	r7, #15
 8009ff4:	d100      	bne.n	8009ff8 <PxMessagingTask+0x7fc>
 8009ff6:	e08a      	b.n	800a10e <PxMessagingTask+0x912>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8009ff8:	2f11      	cmp	r7, #17
 8009ffa:	d100      	bne.n	8009ffe <PxMessagingTask+0x802>
 8009ffc:	e090      	b.n	800a120 <PxMessagingTask+0x924>
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009ffe:	00ea      	lsls	r2, r5, #3
 800a000:	1b52      	subs	r2, r2, r5
 800a002:	00d3      	lsls	r3, r2, #3
 800a004:	4ac0      	ldr	r2, [pc, #768]	; (800a308 <PxMessagingTask+0xb0c>)
 800a006:	18d3      	adds	r3, r2, r3
 800a008:	5d1a      	ldrb	r2, [r3, r4]
 800a00a:	0612      	lsls	r2, r2, #24
 800a00c:	1c61      	adds	r1, r4, #1
 800a00e:	910c      	str	r1, [sp, #48]	; 0x30
 800a010:	5c59      	ldrb	r1, [r3, r1]
 800a012:	0409      	lsls	r1, r1, #16
 800a014:	1852      	adds	r2, r2, r1
 800a016:	1ca1      	adds	r1, r4, #2
 800a018:	910d      	str	r1, [sp, #52]	; 0x34
 800a01a:	5c59      	ldrb	r1, [r3, r1]
 800a01c:	0209      	lsls	r1, r1, #8
 800a01e:	1852      	adds	r2, r2, r1
 800a020:	1ce1      	adds	r1, r4, #3
 800a022:	910e      	str	r1, [sp, #56]	; 0x38
 800a024:	5c59      	ldrb	r1, [r3, r1]
 800a026:	1852      	adds	r2, r2, r1
 800a028:	920a      	str	r2, [sp, #40]	; 0x28
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800a02a:	1d22      	adds	r2, r4, #4
 800a02c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a02e:	5c9e      	ldrb	r6, [r3, r2]
 800a030:	0636      	lsls	r6, r6, #24
 800a032:	1d62      	adds	r2, r4, #5
 800a034:	9210      	str	r2, [sp, #64]	; 0x40
 800a036:	5c9a      	ldrb	r2, [r3, r2]
 800a038:	0412      	lsls	r2, r2, #16
 800a03a:	18b6      	adds	r6, r6, r2
 800a03c:	1da2      	adds	r2, r4, #6
 800a03e:	9211      	str	r2, [sp, #68]	; 0x44
 800a040:	5c9a      	ldrb	r2, [r3, r2]
 800a042:	0212      	lsls	r2, r2, #8
 800a044:	18b2      	adds	r2, r6, r2
 800a046:	1de1      	adds	r1, r4, #7
 800a048:	5c5e      	ldrb	r6, [r3, r1]
 800a04a:	1996      	adds	r6, r2, r6
							if (temp == false)
 800a04c:	4653      	mov	r3, sl
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d16f      	bne.n	800a132 <PxMessagingTask+0x936>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800a052:	00eb      	lsls	r3, r5, #3
 800a054:	1b5b      	subs	r3, r3, r5
 800a056:	00d9      	lsls	r1, r3, #3
 800a058:	4aab      	ldr	r2, [pc, #684]	; (800a308 <PxMessagingTask+0xb0c>)
 800a05a:	1852      	adds	r2, r2, r1
 800a05c:	0023      	movs	r3, r4
 800a05e:	3309      	adds	r3, #9
 800a060:	5cd3      	ldrb	r3, [r2, r3]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d013      	beq.n	800a08e <PxMessagingTask+0x892>
 800a066:	2238      	movs	r2, #56	; 0x38
 800a068:	436a      	muls	r2, r5
 800a06a:	49a7      	ldr	r1, [pc, #668]	; (800a308 <PxMessagingTask+0xb0c>)
 800a06c:	1889      	adds	r1, r1, r2
 800a06e:	0022      	movs	r2, r4
 800a070:	320a      	adds	r2, #10
 800a072:	5c89      	ldrb	r1, [r1, r2]
 800a074:	2900      	cmp	r1, #0
 800a076:	d00a      	beq.n	800a08e <PxMessagingTask+0x892>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800a078:	3a02      	subs	r2, #2
 800a07a:	2738      	movs	r7, #56	; 0x38
 800a07c:	436f      	muls	r7, r5
 800a07e:	48a2      	ldr	r0, [pc, #648]	; (800a308 <PxMessagingTask+0xb0c>)
 800a080:	19c0      	adds	r0, r0, r7
 800a082:	5c80      	ldrb	r0, [r0, r2]
 800a084:	9100      	str	r1, [sp, #0]
 800a086:	0032      	movs	r2, r6
 800a088:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a08a:	f7fe fdf5 	bl	8008c78 <SetupDMAStreams>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800a08e:	00eb      	lsls	r3, r5, #3
 800a090:	1b5b      	subs	r3, r3, r5
 800a092:	00da      	lsls	r2, r3, #3
 800a094:	4b9c      	ldr	r3, [pc, #624]	; (800a308 <PxMessagingTask+0xb0c>)
 800a096:	189b      	adds	r3, r3, r2
 800a098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a09a:	5c9b      	ldrb	r3, [r3, r2]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d012      	beq.n	800a0c6 <PxMessagingTask+0x8ca>
 800a0a0:	0022      	movs	r2, r4
 800a0a2:	320c      	adds	r2, #12
 800a0a4:	2038      	movs	r0, #56	; 0x38
 800a0a6:	4368      	muls	r0, r5
 800a0a8:	4997      	ldr	r1, [pc, #604]	; (800a308 <PxMessagingTask+0xb0c>)
 800a0aa:	1809      	adds	r1, r1, r0
 800a0ac:	5c89      	ldrb	r1, [r1, r2]
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	d009      	beq.n	800a0c6 <PxMessagingTask+0x8ca>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 800a0b2:	3a04      	subs	r2, #4
 800a0b4:	0007      	movs	r7, r0
 800a0b6:	4894      	ldr	r0, [pc, #592]	; (800a308 <PxMessagingTask+0xb0c>)
 800a0b8:	19c0      	adds	r0, r0, r7
 800a0ba:	5c80      	ldrb	r0, [r0, r2]
 800a0bc:	9100      	str	r1, [sp, #0]
 800a0be:	0032      	movs	r2, r6
 800a0c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0c2:	f7fe fdd9 	bl	8008c78 <SetupDMAStreams>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a0c6:	00eb      	lsls	r3, r5, #3
 800a0c8:	1b5b      	subs	r3, r3, r5
 800a0ca:	00d9      	lsls	r1, r3, #3
 800a0cc:	4a8e      	ldr	r2, [pc, #568]	; (800a308 <PxMessagingTask+0xb0c>)
 800a0ce:	1852      	adds	r2, r2, r1
 800a0d0:	0023      	movs	r3, r4
 800a0d2:	330d      	adds	r3, #13
 800a0d4:	5cd3      	ldrb	r3, [r2, r3]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <PxMessagingTask+0x8e2>
 800a0da:	f7ff fbdc 	bl	8009896 <PxMessagingTask+0x9a>
 800a0de:	2238      	movs	r2, #56	; 0x38
 800a0e0:	436a      	muls	r2, r5
 800a0e2:	4989      	ldr	r1, [pc, #548]	; (800a308 <PxMessagingTask+0xb0c>)
 800a0e4:	1889      	adds	r1, r1, r2
 800a0e6:	0022      	movs	r2, r4
 800a0e8:	320e      	adds	r2, #14
 800a0ea:	5c89      	ldrb	r1, [r1, r2]
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	d101      	bne.n	800a0f4 <PxMessagingTask+0x8f8>
 800a0f0:	f7ff fbd1 	bl	8009896 <PxMessagingTask+0x9a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a0f4:	3408      	adds	r4, #8
 800a0f6:	2038      	movs	r0, #56	; 0x38
 800a0f8:	4368      	muls	r0, r5
 800a0fa:	4a83      	ldr	r2, [pc, #524]	; (800a308 <PxMessagingTask+0xb0c>)
 800a0fc:	1812      	adds	r2, r2, r0
 800a0fe:	5d10      	ldrb	r0, [r2, r4]
 800a100:	9100      	str	r1, [sp, #0]
 800a102:	0032      	movs	r2, r6
 800a104:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a106:	f7fe fdb7 	bl	8008c78 <SetupDMAStreams>
 800a10a:	f7ff fbc4 	bl	8009896 <PxMessagingTask+0x9a>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a10e:	2338      	movs	r3, #56	; 0x38
 800a110:	436b      	muls	r3, r5
 800a112:	4a7d      	ldr	r2, [pc, #500]	; (800a308 <PxMessagingTask+0xb0c>)
 800a114:	18d2      	adds	r2, r2, r3
 800a116:	0023      	movs	r3, r4
 800a118:	330d      	adds	r3, #13
 800a11a:	5cd3      	ldrb	r3, [r2, r3]
 800a11c:	469a      	mov	sl, r3
 800a11e:	e76b      	b.n	8009ff8 <PxMessagingTask+0x7fc>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a120:	2338      	movs	r3, #56	; 0x38
 800a122:	436b      	muls	r3, r5
 800a124:	4a78      	ldr	r2, [pc, #480]	; (800a308 <PxMessagingTask+0xb0c>)
 800a126:	18d2      	adds	r2, r2, r3
 800a128:	0023      	movs	r3, r4
 800a12a:	330f      	adds	r3, #15
 800a12c:	5cd3      	ldrb	r3, [r2, r3]
 800a12e:	469a      	mov	sl, r3
 800a130:	e765      	b.n	8009ffe <PxMessagingTask+0x802>
 800a132:	000e      	movs	r6, r1
 800a134:	46b9      	mov	r9, r7
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a136:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a138:	003b      	movs	r3, r7
 800a13a:	3308      	adds	r3, #8
 800a13c:	2238      	movs	r2, #56	; 0x38
 800a13e:	436a      	muls	r2, r5
 800a140:	4c71      	ldr	r4, [pc, #452]	; (800a308 <PxMessagingTask+0xb0c>)
 800a142:	18a4      	adds	r4, r4, r2
 800a144:	5ce1      	ldrb	r1, [r4, r3]
 800a146:	20e4      	movs	r0, #228	; 0xe4
 800a148:	f7fd fc88 	bl	8007a5c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a14c:	5de1      	ldrb	r1, [r4, r7]
 800a14e:	0209      	lsls	r1, r1, #8
 800a150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a152:	5ce3      	ldrb	r3, [r4, r3]
 800a154:	18c9      	adds	r1, r1, r3
 800a156:	b289      	uxth	r1, r1
 800a158:	20e5      	movs	r0, #229	; 0xe5
 800a15a:	f7fd fc7f 	bl	8007a5c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a160:	5ce1      	ldrb	r1, [r4, r3]
 800a162:	0209      	lsls	r1, r1, #8
 800a164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a166:	5ce3      	ldrb	r3, [r4, r3]
 800a168:	18c9      	adds	r1, r1, r3
 800a16a:	b289      	uxth	r1, r1
 800a16c:	20e6      	movs	r0, #230	; 0xe6
 800a16e:	f7fd fc75 	bl	8007a5c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a174:	5ce1      	ldrb	r1, [r4, r3]
 800a176:	0209      	lsls	r1, r1, #8
 800a178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a17a:	5ce3      	ldrb	r3, [r4, r3]
 800a17c:	18c9      	adds	r1, r1, r3
 800a17e:	b289      	uxth	r1, r1
 800a180:	20e7      	movs	r0, #231	; 0xe7
 800a182:	f7fd fc6b 	bl	8007a5c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a188:	5ce1      	ldrb	r1, [r4, r3]
 800a18a:	0209      	lsls	r1, r1, #8
 800a18c:	5da3      	ldrb	r3, [r4, r6]
 800a18e:	18c9      	adds	r1, r1, r3
 800a190:	b289      	uxth	r1, r1
 800a192:	20e8      	movs	r0, #232	; 0xe8
 800a194:	f7fd fc62 	bl	8007a5c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a198:	003b      	movs	r3, r7
 800a19a:	3309      	adds	r3, #9
 800a19c:	5ce1      	ldrb	r1, [r4, r3]
 800a19e:	0209      	lsls	r1, r1, #8
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	5ce3      	ldrb	r3, [r4, r3]
 800a1a4:	18c9      	adds	r1, r1, r3
 800a1a6:	b289      	uxth	r1, r1
 800a1a8:	20e9      	movs	r0, #233	; 0xe9
 800a1aa:	f7fd fc57 	bl	8007a5c <EE_WriteVariable>
								if (numOfParams == 19)
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	2b13      	cmp	r3, #19
 800a1b2:	d10e      	bne.n	800a1d2 <PxMessagingTask+0x9d6>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a1b4:	2238      	movs	r2, #56	; 0x38
 800a1b6:	436a      	muls	r2, r5
 800a1b8:	4b53      	ldr	r3, [pc, #332]	; (800a308 <PxMessagingTask+0xb0c>)
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1be:	5c99      	ldrb	r1, [r3, r2]
 800a1c0:	0209      	lsls	r1, r1, #8
 800a1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c4:	320c      	adds	r2, #12
 800a1c6:	5c9b      	ldrb	r3, [r3, r2]
 800a1c8:	18c9      	adds	r1, r1, r3
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	20ea      	movs	r0, #234	; 0xea
 800a1ce:	f7fd fc45 	bl	8007a5c <EE_WriteVariable>
								if (numOfParams == 21)
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	2b15      	cmp	r3, #21
 800a1d6:	d110      	bne.n	800a1fa <PxMessagingTask+0x9fe>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1da:	0001      	movs	r1, r0
 800a1dc:	310d      	adds	r1, #13
 800a1de:	3323      	adds	r3, #35	; 0x23
 800a1e0:	436b      	muls	r3, r5
 800a1e2:	4a49      	ldr	r2, [pc, #292]	; (800a308 <PxMessagingTask+0xb0c>)
 800a1e4:	18d2      	adds	r2, r2, r3
 800a1e6:	5c51      	ldrb	r1, [r2, r1]
 800a1e8:	0209      	lsls	r1, r1, #8
 800a1ea:	0003      	movs	r3, r0
 800a1ec:	330e      	adds	r3, #14
 800a1ee:	5cd3      	ldrb	r3, [r2, r3]
 800a1f0:	18c9      	adds	r1, r1, r3
 800a1f2:	b289      	uxth	r1, r1
 800a1f4:	20eb      	movs	r0, #235	; 0xeb
 800a1f6:	f7fd fc31 	bl	8007a5c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	4b48      	ldr	r3, [pc, #288]	; (800a320 <PxMessagingTask+0xb24>)
 800a200:	4a48      	ldr	r2, [pc, #288]	; (800a324 <PxMessagingTask+0xb28>)
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a208:	46c0      	nop			; (mov r8, r8)
 800a20a:	e7fd      	b.n	800a208 <PxMessagingTask+0xa0c>
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a20c:	00eb      	lsls	r3, r5, #3
 800a20e:	1b5b      	subs	r3, r3, r5
 800a210:	00da      	lsls	r2, r3, #3
 800a212:	4e3d      	ldr	r6, [pc, #244]	; (800a308 <PxMessagingTask+0xb0c>)
 800a214:	18b6      	adds	r6, r6, r2
 800a216:	5d33      	ldrb	r3, [r6, r4]
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	1c62      	adds	r2, r4, #1
 800a21c:	5cb2      	ldrb	r2, [r6, r2]
 800a21e:	0412      	lsls	r2, r2, #16
 800a220:	189b      	adds	r3, r3, r2
 800a222:	1ca2      	adds	r2, r4, #2
 800a224:	5cb2      	ldrb	r2, [r6, r2]
 800a226:	0212      	lsls	r2, r2, #8
 800a228:	189b      	adds	r3, r3, r2
 800a22a:	1ce2      	adds	r2, r4, #3
 800a22c:	5cb2      	ldrb	r2, [r6, r2]
 800a22e:	4699      	mov	r9, r3
 800a230:	4491      	add	r9, r2
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a232:	1d23      	adds	r3, r4, #4
 800a234:	5cf2      	ldrb	r2, [r6, r3]
 800a236:	0612      	lsls	r2, r2, #24
 800a238:	1d63      	adds	r3, r4, #5
 800a23a:	5cf3      	ldrb	r3, [r6, r3]
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	18d3      	adds	r3, r2, r3
 800a240:	1da2      	adds	r2, r4, #6
 800a242:	5cb2      	ldrb	r2, [r6, r2]
 800a244:	0212      	lsls	r2, r2, #8
 800a246:	189b      	adds	r3, r3, r2
 800a248:	1de2      	adds	r2, r4, #7
 800a24a:	5cb2      	ldrb	r2, [r6, r2]
 800a24c:	469c      	mov	ip, r3
 800a24e:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a250:	0020      	movs	r0, r4
 800a252:	3009      	adds	r0, #9
 800a254:	0022      	movs	r2, r4
 800a256:	320b      	adds	r2, #11
 800a258:	0023      	movs	r3, r4
 800a25a:	330a      	adds	r3, #10
 800a25c:	0027      	movs	r7, r4
 800a25e:	3708      	adds	r7, #8
 800a260:	340c      	adds	r4, #12
 800a262:	5d34      	ldrb	r4, [r6, r4]
 800a264:	5cf3      	ldrb	r3, [r6, r3]
 800a266:	9309      	str	r3, [sp, #36]	; 0x24
 800a268:	5cb2      	ldrb	r2, [r6, r2]
 800a26a:	492f      	ldr	r1, [pc, #188]	; (800a328 <PxMessagingTask+0xb2c>)
 800a26c:	7809      	ldrb	r1, [r1, #0]
 800a26e:	5c30      	ldrb	r0, [r6, r0]
 800a270:	1e63      	subs	r3, r4, #1
 800a272:	419c      	sbcs	r4, r3
 800a274:	9403      	str	r4, [sp, #12]
 800a276:	4664      	mov	r4, ip
 800a278:	9402      	str	r4, [sp, #8]
 800a27a:	464c      	mov	r4, r9
 800a27c:	9401      	str	r4, [sp, #4]
 800a27e:	5df4      	ldrb	r4, [r6, r7]
 800a280:	9400      	str	r4, [sp, #0]
 800a282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a284:	f7ff f842 	bl	800930c <StartScastDMAStream>
							break;								
 800a288:	f7ff fb05 	bl	8009896 <PxMessagingTask+0x9a>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a28c:	00ea      	lsls	r2, r5, #3
 800a28e:	1b52      	subs	r2, r2, r5
 800a290:	00d1      	lsls	r1, r2, #3
 800a292:	4a1d      	ldr	r2, [pc, #116]	; (800a308 <PxMessagingTask+0xb0c>)
 800a294:	1852      	adds	r2, r2, r1
 800a296:	5d12      	ldrb	r2, [r2, r4]
 800a298:	2a00      	cmp	r2, #0
 800a29a:	d000      	beq.n	800a29e <PxMessagingTask+0xaa2>
 800a29c:	e09b      	b.n	800a3d6 <PxMessagingTask+0xbda>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a29e:	1ca1      	adds	r1, r4, #2
 800a2a0:	2338      	movs	r3, #56	; 0x38
 800a2a2:	436b      	muls	r3, r5
 800a2a4:	4a18      	ldr	r2, [pc, #96]	; (800a308 <PxMessagingTask+0xb0c>)
 800a2a6:	18d2      	adds	r2, r2, r3
 800a2a8:	5c53      	ldrb	r3, [r2, r1]
 800a2aa:	061b      	lsls	r3, r3, #24
 800a2ac:	1ce1      	adds	r1, r4, #3
 800a2ae:	5c51      	ldrb	r1, [r2, r1]
 800a2b0:	0409      	lsls	r1, r1, #16
 800a2b2:	185b      	adds	r3, r3, r1
 800a2b4:	1d21      	adds	r1, r4, #4
 800a2b6:	5c51      	ldrb	r1, [r2, r1]
 800a2b8:	0209      	lsls	r1, r1, #8
 800a2ba:	185b      	adds	r3, r3, r1
 800a2bc:	1d61      	adds	r1, r4, #5
 800a2be:	5c51      	ldrb	r1, [r2, r1]
 800a2c0:	185b      	adds	r3, r3, r1
									switch (cMessage[port-1][1+shift])											// requested format
 800a2c2:	3401      	adds	r4, #1
 800a2c4:	5d12      	ldrb	r2, [r2, r4]
 800a2c6:	3a01      	subs	r2, #1
 800a2c8:	b2d1      	uxtb	r1, r2
 800a2ca:	2907      	cmp	r1, #7
 800a2cc:	d901      	bls.n	800a2d2 <PxMessagingTask+0xad6>
 800a2ce:	f7ff fae2 	bl	8009896 <PxMessagingTask+0x9a>
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	0092      	lsls	r2, r2, #2
 800a2d6:	4915      	ldr	r1, [pc, #84]	; (800a32c <PxMessagingTask+0xb30>)
 800a2d8:	588a      	ldr	r2, [r1, r2]
 800a2da:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	4b14      	ldr	r3, [pc, #80]	; (800a330 <PxMessagingTask+0xb34>)
 800a2e0:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	211f      	movs	r1, #31
 800a2e6:	9805      	ldr	r0, [sp, #20]
 800a2e8:	f7fe ffea 	bl	80092c0 <SendMessageToModule>
 800a2ec:	f7ff fad3 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <PxMessagingTask+0xb34>)
 800a2f4:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	211f      	movs	r1, #31
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	f7fe ffe0 	bl	80092c0 <SendMessageToModule>
 800a300:	f7ff fac9 	bl	8009896 <PxMessagingTask+0x9a>
 800a304:	20000cba 	.word	0x20000cba
 800a308:	20000b34 	.word	0x20000b34
 800a30c:	20000dc8 	.word	0x20000dc8
 800a310:	2000113c 	.word	0x2000113c
 800a314:	20007ff0 	.word	0x20007ff0
 800a318:	deadbeef 	.word	0xdeadbeef
 800a31c:	20000cb8 	.word	0x20000cb8
 800a320:	e000ed00 	.word	0xe000ed00
 800a324:	05fa0004 	.word	0x05fa0004
 800a328:	20000070 	.word	0x20000070
 800a32c:	0801b074 	.word	0x0801b074
 800a330:	20000cfc 	.word	0x20000cfc
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a334:	8819      	ldrh	r1, [r3, #0]
 800a336:	4aea      	ldr	r2, [pc, #936]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a338:	7011      	strb	r1, [r2, #0]
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	0a1b      	lsrs	r3, r3, #8
 800a33e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a340:	2202      	movs	r2, #2
 800a342:	211f      	movs	r1, #31
 800a344:	9805      	ldr	r0, [sp, #20]
 800a346:	f7fe ffbb 	bl	80092c0 <SendMessageToModule>
 800a34a:	f7ff faa4 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a34e:	8819      	ldrh	r1, [r3, #0]
 800a350:	4ae3      	ldr	r2, [pc, #908]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a352:	7011      	strb	r1, [r2, #0]
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b21b      	sxth	r3, r3
 800a358:	121b      	asrs	r3, r3, #8
 800a35a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a35c:	2202      	movs	r2, #2
 800a35e:	211f      	movs	r1, #31
 800a360:	9805      	ldr	r0, [sp, #20]
 800a362:	f7fe ffad 	bl	80092c0 <SendMessageToModule>
 800a366:	f7ff fa96 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a36a:	6819      	ldr	r1, [r3, #0]
 800a36c:	4adc      	ldr	r2, [pc, #880]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a36e:	7011      	strb	r1, [r2, #0]
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	0a09      	lsrs	r1, r1, #8
 800a374:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a376:	6819      	ldr	r1, [r3, #0]
 800a378:	0c09      	lsrs	r1, r1, #16
 800a37a:	7091      	strb	r1, [r2, #2]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	0e1b      	lsrs	r3, r3, #24
 800a380:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a382:	2204      	movs	r2, #4
 800a384:	211f      	movs	r1, #31
 800a386:	9805      	ldr	r0, [sp, #20]
 800a388:	f7fe ff9a 	bl	80092c0 <SendMessageToModule>
 800a38c:	f7ff fa83 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a390:	6819      	ldr	r1, [r3, #0]
 800a392:	4ad3      	ldr	r2, [pc, #844]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a394:	7011      	strb	r1, [r2, #0]
 800a396:	6819      	ldr	r1, [r3, #0]
 800a398:	1209      	asrs	r1, r1, #8
 800a39a:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	1409      	asrs	r1, r1, #16
 800a3a0:	7091      	strb	r1, [r2, #2]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	0e1b      	lsrs	r3, r3, #24
 800a3a6:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a3a8:	2204      	movs	r2, #4
 800a3aa:	211f      	movs	r1, #31
 800a3ac:	9805      	ldr	r0, [sp, #20]
 800a3ae:	f7fe ff87 	bl	80092c0 <SendMessageToModule>
 800a3b2:	f7ff fa70 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a3b6:	7819      	ldrb	r1, [r3, #0]
 800a3b8:	4ac9      	ldr	r2, [pc, #804]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a3ba:	7011      	strb	r1, [r2, #0]
 800a3bc:	7859      	ldrb	r1, [r3, #1]
 800a3be:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a3c0:	7899      	ldrb	r1, [r3, #2]
 800a3c2:	7091      	strb	r1, [r2, #2]
 800a3c4:	78db      	ldrb	r3, [r3, #3]
 800a3c6:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	211f      	movs	r1, #31
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	f7fe ff77 	bl	80092c0 <SendMessageToModule>
 800a3d2:	f7ff fa60 	bl	8009896 <PxMessagingTask+0x9a>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a3d6:	2a02      	cmp	r2, #2
 800a3d8:	d000      	beq.n	800a3dc <PxMessagingTask+0xbe0>
 800a3da:	e08e      	b.n	800a4fa <PxMessagingTask+0xcfe>
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	48c1      	ldr	r0, [pc, #772]	; (800a6e4 <PxMessagingTask+0xee8>)
 800a3e0:	3236      	adds	r2, #54	; 0x36
 800a3e2:	436a      	muls	r2, r5
 800a3e4:	1881      	adds	r1, r0, r2
 800a3e6:	2600      	movs	r6, #0
 800a3e8:	54ce      	strb	r6, [r1, r3]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a3ea:	3401      	adds	r4, #1
 800a3ec:	1912      	adds	r2, r2, r4
 800a3ee:	1810      	adds	r0, r2, r0
 800a3f0:	f7f9 fc14 	bl	8003c1c <IsModuleParameter>
 800a3f4:	4682      	mov	sl, r0
									if (temp == 0) {																					// Parameter does not exist
 800a3f6:	42b0      	cmp	r0, r6
 800a3f8:	d106      	bne.n	800a408 <PxMessagingTask+0xc0c>
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	211f      	movs	r1, #31
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	f7fe ff5e 	bl	80092c0 <SendMessageToModule>
 800a404:	f7ff fa47 	bl	8009896 <PxMessagingTask+0x9a>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a408:	3801      	subs	r0, #1
 800a40a:	4ab7      	ldr	r2, [pc, #732]	; (800a6e8 <PxMessagingTask+0xeec>)
 800a40c:	210c      	movs	r1, #12
 800a40e:	4341      	muls	r1, r0
 800a410:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a412:	1852      	adds	r2, r2, r1
 800a414:	7912      	ldrb	r2, [r2, #4]
 800a416:	49b2      	ldr	r1, [pc, #712]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a418:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a41a:	3a01      	subs	r2, #1
 800a41c:	b2d1      	uxtb	r1, r2
 800a41e:	2907      	cmp	r1, #7
 800a420:	d901      	bls.n	800a426 <PxMessagingTask+0xc2a>
 800a422:	f7ff fa38 	bl	8009896 <PxMessagingTask+0x9a>
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	0092      	lsls	r2, r2, #2
 800a42a:	49b0      	ldr	r1, [pc, #704]	; (800a6ec <PxMessagingTask+0xef0>)
 800a42c:	588a      	ldr	r2, [r1, r2]
 800a42e:	4697      	mov	pc, r2
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	4bab      	ldr	r3, [pc, #684]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a434:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a436:	2202      	movs	r2, #2
 800a438:	211f      	movs	r1, #31
 800a43a:	9805      	ldr	r0, [sp, #20]
 800a43c:	f7fe ff40 	bl	80092c0 <SendMessageToModule>
 800a440:	f7ff fa29 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	4ba6      	ldr	r3, [pc, #664]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a448:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a44a:	2202      	movs	r2, #2
 800a44c:	211f      	movs	r1, #31
 800a44e:	9805      	ldr	r0, [sp, #20]
 800a450:	f7fe ff36 	bl	80092c0 <SendMessageToModule>
 800a454:	f7ff fa1f 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a458:	8819      	ldrh	r1, [r3, #0]
 800a45a:	4aa1      	ldr	r2, [pc, #644]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a45c:	7051      	strb	r1, [r2, #1]
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a464:	2203      	movs	r2, #3
 800a466:	211f      	movs	r1, #31
 800a468:	9805      	ldr	r0, [sp, #20]
 800a46a:	f7fe ff29 	bl	80092c0 <SendMessageToModule>
 800a46e:	f7ff fa12 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a472:	8819      	ldrh	r1, [r3, #0]
 800a474:	4a9a      	ldr	r2, [pc, #616]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a476:	7051      	strb	r1, [r2, #1]
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b21b      	sxth	r3, r3
 800a47c:	121b      	asrs	r3, r3, #8
 800a47e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a480:	2203      	movs	r2, #3
 800a482:	211f      	movs	r1, #31
 800a484:	9805      	ldr	r0, [sp, #20]
 800a486:	f7fe ff1b 	bl	80092c0 <SendMessageToModule>
 800a48a:	f7ff fa04 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a48e:	6819      	ldr	r1, [r3, #0]
 800a490:	4a93      	ldr	r2, [pc, #588]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a492:	7051      	strb	r1, [r2, #1]
 800a494:	6819      	ldr	r1, [r3, #0]
 800a496:	0a09      	lsrs	r1, r1, #8
 800a498:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	0c09      	lsrs	r1, r1, #16
 800a49e:	70d1      	strb	r1, [r2, #3]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	0e1b      	lsrs	r3, r3, #24
 800a4a4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	211f      	movs	r1, #31
 800a4aa:	9805      	ldr	r0, [sp, #20]
 800a4ac:	f7fe ff08 	bl	80092c0 <SendMessageToModule>
 800a4b0:	f7ff f9f1 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a4b4:	6819      	ldr	r1, [r3, #0]
 800a4b6:	4a8a      	ldr	r2, [pc, #552]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a4b8:	7051      	strb	r1, [r2, #1]
 800a4ba:	6819      	ldr	r1, [r3, #0]
 800a4bc:	1209      	asrs	r1, r1, #8
 800a4be:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	1409      	asrs	r1, r1, #16
 800a4c4:	70d1      	strb	r1, [r2, #3]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	0e1b      	lsrs	r3, r3, #24
 800a4ca:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a4cc:	2205      	movs	r2, #5
 800a4ce:	211f      	movs	r1, #31
 800a4d0:	9805      	ldr	r0, [sp, #20]
 800a4d2:	f7fe fef5 	bl	80092c0 <SendMessageToModule>
 800a4d6:	f7ff f9de 	bl	8009896 <PxMessagingTask+0x9a>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a4da:	7819      	ldrb	r1, [r3, #0]
 800a4dc:	4a80      	ldr	r2, [pc, #512]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a4de:	7051      	strb	r1, [r2, #1]
 800a4e0:	7859      	ldrb	r1, [r3, #1]
 800a4e2:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a4e4:	7899      	ldrb	r1, [r3, #2]
 800a4e6:	70d1      	strb	r1, [r2, #3]
 800a4e8:	78db      	ldrb	r3, [r3, #3]
 800a4ea:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a4ec:	2209      	movs	r2, #9
 800a4ee:	211f      	movs	r1, #31
 800a4f0:	9805      	ldr	r0, [sp, #20]
 800a4f2:	f7fe fee5 	bl	80092c0 <SendMessageToModule>
 800a4f6:	f7ff f9ce 	bl	8009896 <PxMessagingTask+0x9a>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a4fa:	2a02      	cmp	r2, #2
 800a4fc:	d801      	bhi.n	800a502 <PxMessagingTask+0xd06>
 800a4fe:	f7ff f9ca 	bl	8009896 <PxMessagingTask+0x9a>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a502:	3a04      	subs	r2, #4
 800a504:	0092      	lsls	r2, r2, #2
 800a506:	4b7a      	ldr	r3, [pc, #488]	; (800a6f0 <PxMessagingTask+0xef4>)
 800a508:	58d1      	ldr	r1, [r2, r3]
 800a50a:	220f      	movs	r2, #15
 800a50c:	400a      	ands	r2, r1
 800a50e:	4b74      	ldr	r3, [pc, #464]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a510:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a512:	d106      	bne.n	800a522 <PxMessagingTask+0xd26>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a514:	3201      	adds	r2, #1
 800a516:	211f      	movs	r1, #31
 800a518:	9805      	ldr	r0, [sp, #20]
 800a51a:	f7fe fed1 	bl	80092c0 <SendMessageToModule>
 800a51e:	f7ff f9ba 	bl	8009896 <PxMessagingTask+0x9a>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a522:	0c09      	lsrs	r1, r1, #16
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	059b      	lsls	r3, r3, #22
 800a528:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 800a52a:	3a01      	subs	r2, #1
 800a52c:	b2d0      	uxtb	r0, r2
 800a52e:	2807      	cmp	r0, #7
 800a530:	d901      	bls.n	800a536 <PxMessagingTask+0xd3a>
 800a532:	f7ff f9b0 	bl	8009896 <PxMessagingTask+0x9a>
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	0092      	lsls	r2, r2, #2
 800a53a:	486e      	ldr	r0, [pc, #440]	; (800a6f4 <PxMessagingTask+0xef8>)
 800a53c:	5882      	ldr	r2, [r0, r2]
 800a53e:	4697      	mov	pc, r2
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a540:	781a      	ldrb	r2, [r3, #0]
 800a542:	4b67      	ldr	r3, [pc, #412]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a544:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a546:	2202      	movs	r2, #2
 800a548:	211f      	movs	r1, #31
 800a54a:	9805      	ldr	r0, [sp, #20]
 800a54c:	f7fe feb8 	bl	80092c0 <SendMessageToModule>
 800a550:	f7ff f9a1 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	4b62      	ldr	r3, [pc, #392]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a558:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a55a:	2202      	movs	r2, #2
 800a55c:	211f      	movs	r1, #31
 800a55e:	9805      	ldr	r0, [sp, #20]
 800a560:	f7fe feae 	bl	80092c0 <SendMessageToModule>
 800a564:	f7ff f997 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a568:	8819      	ldrh	r1, [r3, #0]
 800a56a:	4a5d      	ldr	r2, [pc, #372]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a56c:	7051      	strb	r1, [r2, #1]
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	0a1b      	lsrs	r3, r3, #8
 800a572:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a574:	2203      	movs	r2, #3
 800a576:	211f      	movs	r1, #31
 800a578:	9805      	ldr	r0, [sp, #20]
 800a57a:	f7fe fea1 	bl	80092c0 <SendMessageToModule>
 800a57e:	f7ff f98a 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a582:	8819      	ldrh	r1, [r3, #0]
 800a584:	4a56      	ldr	r2, [pc, #344]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a586:	7051      	strb	r1, [r2, #1]
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	121b      	asrs	r3, r3, #8
 800a58e:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a590:	2203      	movs	r2, #3
 800a592:	211f      	movs	r1, #31
 800a594:	9805      	ldr	r0, [sp, #20]
 800a596:	f7fe fe93 	bl	80092c0 <SendMessageToModule>
 800a59a:	f7ff f97c 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a59e:	6819      	ldr	r1, [r3, #0]
 800a5a0:	4a4f      	ldr	r2, [pc, #316]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a5a2:	7051      	strb	r1, [r2, #1]
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	0a09      	lsrs	r1, r1, #8
 800a5a8:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a5aa:	6819      	ldr	r1, [r3, #0]
 800a5ac:	0c09      	lsrs	r1, r1, #16
 800a5ae:	70d1      	strb	r1, [r2, #3]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	0e1b      	lsrs	r3, r3, #24
 800a5b4:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	211f      	movs	r1, #31
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	f7fe fe80 	bl	80092c0 <SendMessageToModule>
 800a5c0:	f7ff f969 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a5c4:	6819      	ldr	r1, [r3, #0]
 800a5c6:	4a46      	ldr	r2, [pc, #280]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a5c8:	7051      	strb	r1, [r2, #1]
 800a5ca:	6819      	ldr	r1, [r3, #0]
 800a5cc:	1209      	asrs	r1, r1, #8
 800a5ce:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a5d0:	6819      	ldr	r1, [r3, #0]
 800a5d2:	1409      	asrs	r1, r1, #16
 800a5d4:	70d1      	strb	r1, [r2, #3]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	0e1b      	lsrs	r3, r3, #24
 800a5da:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a5dc:	2205      	movs	r2, #5
 800a5de:	211f      	movs	r1, #31
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	f7fe fe6d 	bl	80092c0 <SendMessageToModule>
 800a5e6:	f7ff f956 	bl	8009896 <PxMessagingTask+0x9a>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a5ea:	781a      	ldrb	r2, [r3, #0]
 800a5ec:	4b3c      	ldr	r3, [pc, #240]	; (800a6e0 <PxMessagingTask+0xee4>)
 800a5ee:	705a      	strb	r2, [r3, #1]
 800a5f0:	4a41      	ldr	r2, [pc, #260]	; (800a6f8 <PxMessagingTask+0xefc>)
 800a5f2:	188a      	adds	r2, r1, r2
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a5f8:	4a40      	ldr	r2, [pc, #256]	; (800a6fc <PxMessagingTask+0xf00>)
 800a5fa:	188a      	adds	r2, r1, r2
 800a5fc:	7812      	ldrb	r2, [r2, #0]
 800a5fe:	70da      	strb	r2, [r3, #3]
 800a600:	4a3f      	ldr	r2, [pc, #252]	; (800a700 <PxMessagingTask+0xf04>)
 800a602:	4694      	mov	ip, r2
 800a604:	4461      	add	r1, ip
 800a606:	780a      	ldrb	r2, [r1, #0]
 800a608:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a60a:	2209      	movs	r2, #9
 800a60c:	211f      	movs	r1, #31
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7fe fe56 	bl	80092c0 <SendMessageToModule>
 800a614:	f7ff f93f 	bl	8009896 <PxMessagingTask+0x9a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a618:	4b3a      	ldr	r3, [pc, #232]	; (800a704 <PxMessagingTask+0xf08>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2002      	movs	r0, #2
 800a620:	4240      	negs	r0, r0
 800a622:	17c1      	asrs	r1, r0, #31
 800a624:	1880      	adds	r0, r0, r2
 800a626:	4159      	adcs	r1, r3
 800a628:	2900      	cmp	r1, #0
 800a62a:	d014      	beq.n	800a656 <PxMessagingTask+0xe5a>
							else if (remoteBuffer == REMOTE_MEMORY_ADD)										// We requested a memory location
 800a62c:	0011      	movs	r1, r2
 800a62e:	4319      	orrs	r1, r3
 800a630:	d125      	bne.n	800a67e <PxMessagingTask+0xe82>
								switch (remoteBuffer)															// Requested format
 800a632:	2601      	movs	r6, #1
 800a634:	4276      	negs	r6, r6
 800a636:	17f7      	asrs	r7, r6, #31
 800a638:	18b6      	adds	r6, r6, r2
 800a63a:	415f      	adcs	r7, r3
 800a63c:	2207      	movs	r2, #7
 800a63e:	2300      	movs	r3, #0
 800a640:	0030      	movs	r0, r6
 800a642:	0039      	movs	r1, r7
 800a644:	f7f5 ff72 	bl	800052c <__aeabi_ulcmp>
 800a648:	3001      	adds	r0, #1
 800a64a:	2801      	cmp	r0, #1
 800a64c:	d817      	bhi.n	800a67e <PxMessagingTask+0xe82>
 800a64e:	00b6      	lsls	r6, r6, #2
 800a650:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <PxMessagingTask+0xf0c>)
 800a652:	599b      	ldr	r3, [r3, r6]
 800a654:	469f      	mov	pc, r3
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a656:	2900      	cmp	r1, #0
 800a658:	d101      	bne.n	800a65e <PxMessagingTask+0xe62>
 800a65a:	2801      	cmp	r0, #1
 800a65c:	d8e6      	bhi.n	800a62c <PxMessagingTask+0xe30>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a65e:	2238      	movs	r2, #56	; 0x38
 800a660:	436a      	muls	r2, r5
 800a662:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <PxMessagingTask+0xee8>)
 800a664:	189b      	adds	r3, r3, r2
 800a666:	5d1b      	ldrb	r3, [r3, r4]
 800a668:	4a28      	ldr	r2, [pc, #160]	; (800a70c <PxMessagingTask+0xf10>)
 800a66a:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d806      	bhi.n	800a67e <PxMessagingTask+0xe82>
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4a27      	ldr	r2, [pc, #156]	; (800a710 <PxMessagingTask+0xf14>)
 800a674:	58d3      	ldr	r3, [r2, r3]
 800a676:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a678:	4b26      	ldr	r3, [pc, #152]	; (800a714 <PxMessagingTask+0xf18>)
 800a67a:	2210      	movs	r2, #16
 800a67c:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a67e:	4b25      	ldr	r3, [pc, #148]	; (800a714 <PxMessagingTask+0xf18>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b10      	cmp	r3, #16
 800a684:	d101      	bne.n	800a68a <PxMessagingTask+0xe8e>
 800a686:	f7ff f906 	bl	8009896 <PxMessagingTask+0x9a>
 800a68a:	4b22      	ldr	r3, [pc, #136]	; (800a714 <PxMessagingTask+0xf18>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	f7ff f901 	bl	8009896 <PxMessagingTask+0x9a>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a694:	3401      	adds	r4, #1
 800a696:	2238      	movs	r2, #56	; 0x38
 800a698:	436a      	muls	r2, r5
 800a69a:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <PxMessagingTask+0xee8>)
 800a69c:	189b      	adds	r3, r3, r2
 800a69e:	5d1a      	ldrb	r2, [r3, r4]
 800a6a0:	4b18      	ldr	r3, [pc, #96]	; (800a704 <PxMessagingTask+0xf08>)
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	605a      	str	r2, [r3, #4]
 800a6a8:	e7e9      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	2238      	movs	r2, #56	; 0x38
 800a6ae:	436a      	muls	r2, r5
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <PxMessagingTask+0xee8>)
 800a6b2:	189b      	adds	r3, r3, r2
 800a6b4:	571a      	ldrsb	r2, [r3, r4]
 800a6b6:	17d1      	asrs	r1, r2, #31
 800a6b8:	4b12      	ldr	r3, [pc, #72]	; (800a704 <PxMessagingTask+0xf08>)
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	6059      	str	r1, [r3, #4]
 800a6be:	e7de      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a6c0:	1c61      	adds	r1, r4, #1
 800a6c2:	2338      	movs	r3, #56	; 0x38
 800a6c4:	436b      	muls	r3, r5
 800a6c6:	4a07      	ldr	r2, [pc, #28]	; (800a6e4 <PxMessagingTask+0xee8>)
 800a6c8:	18d2      	adds	r2, r2, r3
 800a6ca:	5c53      	ldrb	r3, [r2, r1]
 800a6cc:	3402      	adds	r4, #2
 800a6ce:	5d12      	ldrb	r2, [r2, r4]
 800a6d0:	0212      	lsls	r2, r2, #8
 800a6d2:	189b      	adds	r3, r3, r2
 800a6d4:	17d9      	asrs	r1, r3, #31
 800a6d6:	4a0b      	ldr	r2, [pc, #44]	; (800a704 <PxMessagingTask+0xf08>)
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	6051      	str	r1, [r2, #4]
 800a6dc:	e7cf      	b.n	800a67e <PxMessagingTask+0xe82>
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	20000cfc 	.word	0x20000cfc
 800a6e4:	20000b34 	.word	0x20000b34
 800a6e8:	200000e8 	.word	0x200000e8
 800a6ec:	0801b094 	.word	0x0801b094
 800a6f0:	2000695c 	.word	0x2000695c
 800a6f4:	0801b0b4 	.word	0x0801b0b4
 800a6f8:	20000001 	.word	0x20000001
 800a6fc:	20000002 	.word	0x20000002
 800a700:	20000003 	.word	0x20000003
 800a704:	20000dc0 	.word	0x20000dc0
 800a708:	0801b0d4 	.word	0x0801b0d4
 800a70c:	20000090 	.word	0x20000090
 800a710:	0801b0f4 	.word	0x0801b0f4
 800a714:	20000dc8 	.word	0x20000dc8
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800a718:	1c61      	adds	r1, r4, #1
 800a71a:	2338      	movs	r3, #56	; 0x38
 800a71c:	436b      	muls	r3, r5
 800a71e:	4add      	ldr	r2, [pc, #884]	; (800aa94 <PxMessagingTask+0x1298>)
 800a720:	18d2      	adds	r2, r2, r3
 800a722:	5c53      	ldrb	r3, [r2, r1]
 800a724:	3402      	adds	r4, #2
 800a726:	5d12      	ldrb	r2, [r2, r4]
 800a728:	0212      	lsls	r2, r2, #8
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	17d9      	asrs	r1, r3, #31
 800a72e:	4ada      	ldr	r2, [pc, #872]	; (800aa98 <PxMessagingTask+0x129c>)
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	6051      	str	r1, [r2, #4]
 800a734:	e7a3      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a736:	1c61      	adds	r1, r4, #1
 800a738:	2338      	movs	r3, #56	; 0x38
 800a73a:	436b      	muls	r3, r5
 800a73c:	4ad5      	ldr	r2, [pc, #852]	; (800aa94 <PxMessagingTask+0x1298>)
 800a73e:	18d2      	adds	r2, r2, r3
 800a740:	5c53      	ldrb	r3, [r2, r1]
 800a742:	1ca1      	adds	r1, r4, #2
 800a744:	5c51      	ldrb	r1, [r2, r1]
 800a746:	0209      	lsls	r1, r1, #8
 800a748:	185b      	adds	r3, r3, r1
 800a74a:	1ce1      	adds	r1, r4, #3
 800a74c:	5c51      	ldrb	r1, [r2, r1]
 800a74e:	0409      	lsls	r1, r1, #16
 800a750:	185b      	adds	r3, r3, r1
 800a752:	3404      	adds	r4, #4
 800a754:	5d12      	ldrb	r2, [r2, r4]
 800a756:	0612      	lsls	r2, r2, #24
 800a758:	189b      	adds	r3, r3, r2
 800a75a:	4acf      	ldr	r2, [pc, #828]	; (800aa98 <PxMessagingTask+0x129c>)
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	2300      	movs	r3, #0
 800a760:	6053      	str	r3, [r2, #4]
 800a762:	e78c      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800a764:	1c61      	adds	r1, r4, #1
 800a766:	2338      	movs	r3, #56	; 0x38
 800a768:	436b      	muls	r3, r5
 800a76a:	4aca      	ldr	r2, [pc, #808]	; (800aa94 <PxMessagingTask+0x1298>)
 800a76c:	18d2      	adds	r2, r2, r3
 800a76e:	5c53      	ldrb	r3, [r2, r1]
 800a770:	1ca1      	adds	r1, r4, #2
 800a772:	5c51      	ldrb	r1, [r2, r1]
 800a774:	0209      	lsls	r1, r1, #8
 800a776:	185b      	adds	r3, r3, r1
 800a778:	1ce1      	adds	r1, r4, #3
 800a77a:	5c51      	ldrb	r1, [r2, r1]
 800a77c:	0409      	lsls	r1, r1, #16
 800a77e:	185b      	adds	r3, r3, r1
 800a780:	3404      	adds	r4, #4
 800a782:	5d12      	ldrb	r2, [r2, r4]
 800a784:	0612      	lsls	r2, r2, #24
 800a786:	189b      	adds	r3, r3, r2
 800a788:	17d9      	asrs	r1, r3, #31
 800a78a:	4ac3      	ldr	r2, [pc, #780]	; (800aa98 <PxMessagingTask+0x129c>)
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	6051      	str	r1, [r2, #4]
 800a790:	e775      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a792:	1c61      	adds	r1, r4, #1
 800a794:	2338      	movs	r3, #56	; 0x38
 800a796:	436b      	muls	r3, r5
 800a798:	4abe      	ldr	r2, [pc, #760]	; (800aa94 <PxMessagingTask+0x1298>)
 800a79a:	18d2      	adds	r2, r2, r3
 800a79c:	5c53      	ldrb	r3, [r2, r1]
 800a79e:	1ca1      	adds	r1, r4, #2
 800a7a0:	5c51      	ldrb	r1, [r2, r1]
 800a7a2:	0209      	lsls	r1, r1, #8
 800a7a4:	185b      	adds	r3, r3, r1
 800a7a6:	1ce1      	adds	r1, r4, #3
 800a7a8:	5c51      	ldrb	r1, [r2, r1]
 800a7aa:	0409      	lsls	r1, r1, #16
 800a7ac:	185b      	adds	r3, r3, r1
 800a7ae:	3404      	adds	r4, #4
 800a7b0:	5d12      	ldrb	r2, [r2, r4]
 800a7b2:	0612      	lsls	r2, r2, #24
 800a7b4:	189b      	adds	r3, r3, r2
 800a7b6:	4ab8      	ldr	r2, [pc, #736]	; (800aa98 <PxMessagingTask+0x129c>)
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6053      	str	r3, [r2, #4]
 800a7be:	e75e      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = cMessage[port-1][shift]; break;
 800a7c0:	2238      	movs	r2, #56	; 0x38
 800a7c2:	436a      	muls	r2, r5
 800a7c4:	4bb3      	ldr	r3, [pc, #716]	; (800aa94 <PxMessagingTask+0x1298>)
 800a7c6:	189b      	adds	r3, r3, r2
 800a7c8:	5d1a      	ldrb	r2, [r3, r4]
 800a7ca:	4bb3      	ldr	r3, [pc, #716]	; (800aa98 <PxMessagingTask+0x129c>)
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	e754      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = (int8_t)cMessage[port-1][shift]; break;
 800a7d4:	2238      	movs	r2, #56	; 0x38
 800a7d6:	436a      	muls	r2, r5
 800a7d8:	4bae      	ldr	r3, [pc, #696]	; (800aa94 <PxMessagingTask+0x1298>)
 800a7da:	189b      	adds	r3, r3, r2
 800a7dc:	571a      	ldrsb	r2, [r3, r4]
 800a7de:	17d1      	asrs	r1, r2, #31
 800a7e0:	4bad      	ldr	r3, [pc, #692]	; (800aa98 <PxMessagingTask+0x129c>)
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	6059      	str	r1, [r3, #4]
 800a7e6:	e74a      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint16_t)cMessage[port-1][shift]<<0) + ((uint16_t)cMessage[port-1][1+shift]<<8); break;
 800a7e8:	2338      	movs	r3, #56	; 0x38
 800a7ea:	436b      	muls	r3, r5
 800a7ec:	4aa9      	ldr	r2, [pc, #676]	; (800aa94 <PxMessagingTask+0x1298>)
 800a7ee:	18d2      	adds	r2, r2, r3
 800a7f0:	5d13      	ldrb	r3, [r2, r4]
 800a7f2:	3401      	adds	r4, #1
 800a7f4:	5d12      	ldrb	r2, [r2, r4]
 800a7f6:	0212      	lsls	r2, r2, #8
 800a7f8:	189b      	adds	r3, r3, r2
 800a7fa:	17d9      	asrs	r1, r3, #31
 800a7fc:	4aa6      	ldr	r2, [pc, #664]	; (800aa98 <PxMessagingTask+0x129c>)
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	6051      	str	r1, [r2, #4]
 800a802:	e73c      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((int16_t)cMessage[port-1][shift]<<0) + ((int16_t)cMessage[port-1][1+shift]<<8); break;
 800a804:	2338      	movs	r3, #56	; 0x38
 800a806:	436b      	muls	r3, r5
 800a808:	4aa2      	ldr	r2, [pc, #648]	; (800aa94 <PxMessagingTask+0x1298>)
 800a80a:	18d2      	adds	r2, r2, r3
 800a80c:	5d13      	ldrb	r3, [r2, r4]
 800a80e:	3401      	adds	r4, #1
 800a810:	5d12      	ldrb	r2, [r2, r4]
 800a812:	0212      	lsls	r2, r2, #8
 800a814:	189b      	adds	r3, r3, r2
 800a816:	17d9      	asrs	r1, r3, #31
 800a818:	4a9f      	ldr	r2, [pc, #636]	; (800aa98 <PxMessagingTask+0x129c>)
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	6051      	str	r1, [r2, #4]
 800a81e:	e72e      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 800a820:	2338      	movs	r3, #56	; 0x38
 800a822:	436b      	muls	r3, r5
 800a824:	4a9b      	ldr	r2, [pc, #620]	; (800aa94 <PxMessagingTask+0x1298>)
 800a826:	18d2      	adds	r2, r2, r3
 800a828:	5d13      	ldrb	r3, [r2, r4]
 800a82a:	1c61      	adds	r1, r4, #1
 800a82c:	5c51      	ldrb	r1, [r2, r1]
 800a82e:	0209      	lsls	r1, r1, #8
 800a830:	185b      	adds	r3, r3, r1
 800a832:	1ca1      	adds	r1, r4, #2
 800a834:	5c51      	ldrb	r1, [r2, r1]
 800a836:	0409      	lsls	r1, r1, #16
 800a838:	185b      	adds	r3, r3, r1
 800a83a:	3403      	adds	r4, #3
 800a83c:	5d12      	ldrb	r2, [r2, r4]
 800a83e:	0612      	lsls	r2, r2, #24
 800a840:	189b      	adds	r3, r3, r2
 800a842:	4a95      	ldr	r2, [pc, #596]	; (800aa98 <PxMessagingTask+0x129c>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	2300      	movs	r3, #0
 800a848:	6053      	str	r3, [r2, #4]
 800a84a:	e718      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((int32_t)cMessage[port-1][shift]<<0) + ((int32_t)cMessage[port-1][1+shift]<<8) + ((int32_t)cMessage[port-1][2+shift]<<16) + ((int32_t)cMessage[port-1][3+shift]<<24); break;									
 800a84c:	2338      	movs	r3, #56	; 0x38
 800a84e:	436b      	muls	r3, r5
 800a850:	4a90      	ldr	r2, [pc, #576]	; (800aa94 <PxMessagingTask+0x1298>)
 800a852:	18d2      	adds	r2, r2, r3
 800a854:	5d13      	ldrb	r3, [r2, r4]
 800a856:	1c61      	adds	r1, r4, #1
 800a858:	5c51      	ldrb	r1, [r2, r1]
 800a85a:	0209      	lsls	r1, r1, #8
 800a85c:	185b      	adds	r3, r3, r1
 800a85e:	1ca1      	adds	r1, r4, #2
 800a860:	5c51      	ldrb	r1, [r2, r1]
 800a862:	0409      	lsls	r1, r1, #16
 800a864:	185b      	adds	r3, r3, r1
 800a866:	3403      	adds	r4, #3
 800a868:	5d12      	ldrb	r2, [r2, r4]
 800a86a:	0612      	lsls	r2, r2, #24
 800a86c:	189b      	adds	r3, r3, r2
 800a86e:	17d9      	asrs	r1, r3, #31
 800a870:	4a89      	ldr	r2, [pc, #548]	; (800aa98 <PxMessagingTask+0x129c>)
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	6051      	str	r1, [r2, #4]
 800a876:	e702      	b.n	800a67e <PxMessagingTask+0xe82>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 800a878:	2338      	movs	r3, #56	; 0x38
 800a87a:	436b      	muls	r3, r5
 800a87c:	4a85      	ldr	r2, [pc, #532]	; (800aa94 <PxMessagingTask+0x1298>)
 800a87e:	18d2      	adds	r2, r2, r3
 800a880:	5d13      	ldrb	r3, [r2, r4]
 800a882:	1c61      	adds	r1, r4, #1
 800a884:	5c51      	ldrb	r1, [r2, r1]
 800a886:	0209      	lsls	r1, r1, #8
 800a888:	185b      	adds	r3, r3, r1
 800a88a:	1ca1      	adds	r1, r4, #2
 800a88c:	5c51      	ldrb	r1, [r2, r1]
 800a88e:	0409      	lsls	r1, r1, #16
 800a890:	185b      	adds	r3, r3, r1
 800a892:	3403      	adds	r4, #3
 800a894:	5d12      	ldrb	r2, [r2, r4]
 800a896:	0612      	lsls	r2, r2, #24
 800a898:	189b      	adds	r3, r3, r2
 800a89a:	4a7f      	ldr	r2, [pc, #508]	; (800aa98 <PxMessagingTask+0x129c>)
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6053      	str	r3, [r2, #4]
 800a8a2:	e6ec      	b.n	800a67e <PxMessagingTask+0xe82>
							responseStatus = BOS_OK;		// Initialize response
 800a8a4:	4b7d      	ldr	r3, [pc, #500]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a8aa:	00eb      	lsls	r3, r5, #3
 800a8ac:	1b5b      	subs	r3, r3, r5
 800a8ae:	00da      	lsls	r2, r3, #3
 800a8b0:	4b78      	ldr	r3, [pc, #480]	; (800aa94 <PxMessagingTask+0x1298>)
 800a8b2:	189b      	adds	r3, r3, r2
 800a8b4:	5d1b      	ldrb	r3, [r3, r4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d100      	bne.n	800a8bc <PxMessagingTask+0x10c0>
 800a8ba:	e155      	b.n	800ab68 <PxMessagingTask+0x136c>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a8bc:	2b1e      	cmp	r3, #30
 800a8be:	d900      	bls.n	800a8c2 <PxMessagingTask+0x10c6>
 800a8c0:	e14e      	b.n	800ab60 <PxMessagingTask+0x1364>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a8c2:	1e5e      	subs	r6, r3, #1
 800a8c4:	00b2      	lsls	r2, r6, #2
 800a8c6:	4b76      	ldr	r3, [pc, #472]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a8c8:	58d2      	ldr	r2, [r2, r3]
 800a8ca:	0c13      	lsrs	r3, r2, #16
 800a8cc:	2180      	movs	r1, #128	; 0x80
 800a8ce:	0589      	lsls	r1, r1, #22
 800a8d0:	468c      	mov	ip, r1
 800a8d2:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a8d4:	1c61      	adds	r1, r4, #1
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	2038      	movs	r0, #56	; 0x38
 800a8da:	4368      	muls	r0, r5
 800a8dc:	496d      	ldr	r1, [pc, #436]	; (800aa94 <PxMessagingTask+0x1298>)
 800a8de:	1809      	adds	r1, r1, r0
 800a8e0:	4648      	mov	r0, r9
 800a8e2:	5c0f      	ldrb	r7, [r1, r0]
 800a8e4:	1e79      	subs	r1, r7, #1
 800a8e6:	b2c8      	uxtb	r0, r1
 800a8e8:	2807      	cmp	r0, #7
 800a8ea:	d81b      	bhi.n	800a924 <PxMessagingTask+0x1128>
 800a8ec:	b2c9      	uxtb	r1, r1
 800a8ee:	0089      	lsls	r1, r1, #2
 800a8f0:	486c      	ldr	r0, [pc, #432]	; (800aaa4 <PxMessagingTask+0x12a8>)
 800a8f2:	5841      	ldr	r1, [r0, r1]
 800a8f4:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a8f6:	0712      	lsls	r2, r2, #28
 800a8f8:	d109      	bne.n	800a90e <PxMessagingTask+0x1112>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f009 f930 	bl	8013b60 <malloc>
 800a900:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a902:	d03b      	beq.n	800a97c <PxMessagingTask+0x1180>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a904:	0400      	lsls	r0, r0, #16
 800a906:	19c7      	adds	r7, r0, r7
 800a908:	00b6      	lsls	r6, r6, #2
 800a90a:	4a65      	ldr	r2, [pc, #404]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a90c:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a90e:	4a63      	ldr	r2, [pc, #396]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a910:	7812      	ldrb	r2, [r2, #0]
 800a912:	2a12      	cmp	r2, #18
 800a914:	d006      	beq.n	800a924 <PxMessagingTask+0x1128>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a916:	1ca2      	adds	r2, r4, #2
 800a918:	2038      	movs	r0, #56	; 0x38
 800a91a:	4368      	muls	r0, r5
 800a91c:	495d      	ldr	r1, [pc, #372]	; (800aa94 <PxMessagingTask+0x1298>)
 800a91e:	1809      	adds	r1, r1, r0
 800a920:	5c8a      	ldrb	r2, [r1, r2]
 800a922:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a924:	2338      	movs	r3, #56	; 0x38
 800a926:	436b      	muls	r3, r5
 800a928:	4a5a      	ldr	r2, [pc, #360]	; (800aa94 <PxMessagingTask+0x1298>)
 800a92a:	18d3      	adds	r3, r2, r3
 800a92c:	5d1a      	ldrb	r2, [r3, r4]
 800a92e:	3a01      	subs	r2, #1
 800a930:	0090      	lsls	r0, r2, #2
 800a932:	495b      	ldr	r1, [pc, #364]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a934:	5841      	ldr	r1, [r0, r1]
 800a936:	200f      	movs	r0, #15
 800a938:	4008      	ands	r0, r1
 800a93a:	464c      	mov	r4, r9
 800a93c:	5d1b      	ldrb	r3, [r3, r4]
 800a93e:	4298      	cmp	r0, r3
 800a940:	d009      	beq.n	800a956 <PxMessagingTask+0x115a>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a942:	4859      	ldr	r0, [pc, #356]	; (800aaa8 <PxMessagingTask+0x12ac>)
 800a944:	4684      	mov	ip, r0
 800a946:	4463      	add	r3, ip
 800a948:	0092      	lsls	r2, r2, #2
 800a94a:	400b      	ands	r3, r1
 800a94c:	4954      	ldr	r1, [pc, #336]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a94e:	5053      	str	r3, [r2, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a950:	4b52      	ldr	r3, [pc, #328]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a952:	2214      	movs	r2, #20
 800a954:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a956:	4b55      	ldr	r3, [pc, #340]	; (800aaac <PxMessagingTask+0x12b0>)
 800a958:	799b      	ldrb	r3, [r3, #6]
 800a95a:	2b60      	cmp	r3, #96	; 0x60
 800a95c:	d003      	beq.n	800a966 <PxMessagingTask+0x116a>
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d001      	beq.n	800a966 <PxMessagingTask+0x116a>
 800a962:	f7fe ff98 	bl	8009896 <PxMessagingTask+0x9a>
								messageParams[0] = responseStatus;
 800a966:	4b4d      	ldr	r3, [pc, #308]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	4b51      	ldr	r3, [pc, #324]	; (800aab0 <PxMessagingTask+0x12b4>)
 800a96c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a96e:	2201      	movs	r2, #1
 800a970:	2121      	movs	r1, #33	; 0x21
 800a972:	9805      	ldr	r0, [sp, #20]
 800a974:	f7fe fca4 	bl	80092c0 <SendMessageToModule>
 800a978:	f7fe ff8d 	bl	8009896 <PxMessagingTask+0x9a>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a97c:	4a47      	ldr	r2, [pc, #284]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a97e:	2112      	movs	r1, #18
 800a980:	7011      	strb	r1, [r2, #0]
 800a982:	e7c4      	b.n	800a90e <PxMessagingTask+0x1112>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a984:	0712      	lsls	r2, r2, #28
 800a986:	d109      	bne.n	800a99c <PxMessagingTask+0x11a0>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a988:	2001      	movs	r0, #1
 800a98a:	f009 f8e9 	bl	8013b60 <malloc>
 800a98e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a990:	d010      	beq.n	800a9b4 <PxMessagingTask+0x11b8>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a992:	0400      	lsls	r0, r0, #16
 800a994:	19c7      	adds	r7, r0, r7
 800a996:	00b6      	lsls	r6, r6, #2
 800a998:	4a41      	ldr	r2, [pc, #260]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a99a:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a99c:	4a3f      	ldr	r2, [pc, #252]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	2a12      	cmp	r2, #18
 800a9a2:	d0bf      	beq.n	800a924 <PxMessagingTask+0x1128>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a9a4:	1ca2      	adds	r2, r4, #2
 800a9a6:	2038      	movs	r0, #56	; 0x38
 800a9a8:	4368      	muls	r0, r5
 800a9aa:	493a      	ldr	r1, [pc, #232]	; (800aa94 <PxMessagingTask+0x1298>)
 800a9ac:	1809      	adds	r1, r1, r0
 800a9ae:	568a      	ldrsb	r2, [r1, r2]
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e7b7      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a9b4:	4a39      	ldr	r2, [pc, #228]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a9b6:	2112      	movs	r1, #18
 800a9b8:	7011      	strb	r1, [r2, #0]
 800a9ba:	e7ef      	b.n	800a99c <PxMessagingTask+0x11a0>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a9bc:	0712      	lsls	r2, r2, #28
 800a9be:	d109      	bne.n	800a9d4 <PxMessagingTask+0x11d8>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a9c0:	2002      	movs	r0, #2
 800a9c2:	f009 f8cd 	bl	8013b60 <malloc>
 800a9c6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a9c8:	d015      	beq.n	800a9f6 <PxMessagingTask+0x11fa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a9ca:	0400      	lsls	r0, r0, #16
 800a9cc:	19c7      	adds	r7, r0, r7
 800a9ce:	00b6      	lsls	r6, r6, #2
 800a9d0:	4a33      	ldr	r2, [pc, #204]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800a9d2:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a9d4:	4a31      	ldr	r2, [pc, #196]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a9d6:	7812      	ldrb	r2, [r2, #0]
 800a9d8:	2a12      	cmp	r2, #18
 800a9da:	d0a3      	beq.n	800a924 <PxMessagingTask+0x1128>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a9dc:	1ca2      	adds	r2, r4, #2
 800a9de:	2138      	movs	r1, #56	; 0x38
 800a9e0:	4369      	muls	r1, r5
 800a9e2:	482c      	ldr	r0, [pc, #176]	; (800aa94 <PxMessagingTask+0x1298>)
 800a9e4:	1841      	adds	r1, r0, r1
 800a9e6:	5c88      	ldrb	r0, [r1, r2]
 800a9e8:	1ce2      	adds	r2, r4, #3
 800a9ea:	5c8a      	ldrb	r2, [r1, r2]
 800a9ec:	0212      	lsls	r2, r2, #8
 800a9ee:	1882      	adds	r2, r0, r2
 800a9f0:	b292      	uxth	r2, r2
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	e796      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a9f6:	4a29      	ldr	r2, [pc, #164]	; (800aa9c <PxMessagingTask+0x12a0>)
 800a9f8:	2112      	movs	r1, #18
 800a9fa:	7011      	strb	r1, [r2, #0]
 800a9fc:	e7ea      	b.n	800a9d4 <PxMessagingTask+0x11d8>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a9fe:	0712      	lsls	r2, r2, #28
 800aa00:	d109      	bne.n	800aa16 <PxMessagingTask+0x121a>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800aa02:	2002      	movs	r0, #2
 800aa04:	f009 f8ac 	bl	8013b60 <malloc>
 800aa08:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aa0a:	d016      	beq.n	800aa3a <PxMessagingTask+0x123e>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aa0c:	0400      	lsls	r0, r0, #16
 800aa0e:	19c7      	adds	r7, r0, r7
 800aa10:	00b6      	lsls	r6, r6, #2
 800aa12:	4a23      	ldr	r2, [pc, #140]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800aa14:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800aa16:	4a21      	ldr	r2, [pc, #132]	; (800aa9c <PxMessagingTask+0x12a0>)
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	2a12      	cmp	r2, #18
 800aa1c:	d100      	bne.n	800aa20 <PxMessagingTask+0x1224>
 800aa1e:	e781      	b.n	800a924 <PxMessagingTask+0x1128>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800aa20:	1ca2      	adds	r2, r4, #2
 800aa22:	2138      	movs	r1, #56	; 0x38
 800aa24:	4369      	muls	r1, r5
 800aa26:	481b      	ldr	r0, [pc, #108]	; (800aa94 <PxMessagingTask+0x1298>)
 800aa28:	1841      	adds	r1, r0, r1
 800aa2a:	5c88      	ldrb	r0, [r1, r2]
 800aa2c:	1ce2      	adds	r2, r4, #3
 800aa2e:	5c8a      	ldrb	r2, [r1, r2]
 800aa30:	0212      	lsls	r2, r2, #8
 800aa32:	1882      	adds	r2, r0, r2
 800aa34:	b212      	sxth	r2, r2
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	e774      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800aa3a:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <PxMessagingTask+0x12a0>)
 800aa3c:	2112      	movs	r1, #18
 800aa3e:	7011      	strb	r1, [r2, #0]
 800aa40:	e7e9      	b.n	800aa16 <PxMessagingTask+0x121a>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aa42:	0712      	lsls	r2, r2, #28
 800aa44:	d109      	bne.n	800aa5a <PxMessagingTask+0x125e>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800aa46:	2004      	movs	r0, #4
 800aa48:	f009 f88a 	bl	8013b60 <malloc>
 800aa4c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aa4e:	d01d      	beq.n	800aa8c <PxMessagingTask+0x1290>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aa50:	0400      	lsls	r0, r0, #16
 800aa52:	19c7      	adds	r7, r0, r7
 800aa54:	00b6      	lsls	r6, r6, #2
 800aa56:	4a12      	ldr	r2, [pc, #72]	; (800aaa0 <PxMessagingTask+0x12a4>)
 800aa58:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800aa5a:	4a10      	ldr	r2, [pc, #64]	; (800aa9c <PxMessagingTask+0x12a0>)
 800aa5c:	7812      	ldrb	r2, [r2, #0]
 800aa5e:	2a12      	cmp	r2, #18
 800aa60:	d100      	bne.n	800aa64 <PxMessagingTask+0x1268>
 800aa62:	e75f      	b.n	800a924 <PxMessagingTask+0x1128>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800aa64:	1ca2      	adds	r2, r4, #2
 800aa66:	2138      	movs	r1, #56	; 0x38
 800aa68:	4369      	muls	r1, r5
 800aa6a:	480a      	ldr	r0, [pc, #40]	; (800aa94 <PxMessagingTask+0x1298>)
 800aa6c:	1841      	adds	r1, r0, r1
 800aa6e:	5c88      	ldrb	r0, [r1, r2]
 800aa70:	1ce2      	adds	r2, r4, #3
 800aa72:	5c8a      	ldrb	r2, [r1, r2]
 800aa74:	0212      	lsls	r2, r2, #8
 800aa76:	1880      	adds	r0, r0, r2
 800aa78:	1d22      	adds	r2, r4, #4
 800aa7a:	5c8a      	ldrb	r2, [r1, r2]
 800aa7c:	0412      	lsls	r2, r2, #16
 800aa7e:	1882      	adds	r2, r0, r2
 800aa80:	1d60      	adds	r0, r4, #5
 800aa82:	5c09      	ldrb	r1, [r1, r0]
 800aa84:	0609      	lsls	r1, r1, #24
 800aa86:	1852      	adds	r2, r2, r1
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	e74b      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800aa8c:	4a03      	ldr	r2, [pc, #12]	; (800aa9c <PxMessagingTask+0x12a0>)
 800aa8e:	2112      	movs	r1, #18
 800aa90:	7011      	strb	r1, [r2, #0]
 800aa92:	e7e2      	b.n	800aa5a <PxMessagingTask+0x125e>
 800aa94:	20000b34 	.word	0x20000b34
 800aa98:	20000dc0 	.word	0x20000dc0
 800aa9c:	20000dc8 	.word	0x20000dc8
 800aaa0:	2000695c 	.word	0x2000695c
 800aaa4:	0801b118 	.word	0x0801b118
 800aaa8:	0000fff0 	.word	0x0000fff0
 800aaac:	200069d4 	.word	0x200069d4
 800aab0:	20000cfc 	.word	0x20000cfc
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aab4:	0712      	lsls	r2, r2, #28
 800aab6:	d109      	bne.n	800aacc <PxMessagingTask+0x12d0>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800aab8:	2004      	movs	r0, #4
 800aaba:	f009 f851 	bl	8013b60 <malloc>
 800aabe:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aac0:	d01d      	beq.n	800aafe <PxMessagingTask+0x1302>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aac2:	0400      	lsls	r0, r0, #16
 800aac4:	19c7      	adds	r7, r0, r7
 800aac6:	00b6      	lsls	r6, r6, #2
 800aac8:	4ade      	ldr	r2, [pc, #888]	; (800ae44 <PxMessagingTask+0x1648>)
 800aaca:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800aacc:	4ade      	ldr	r2, [pc, #888]	; (800ae48 <PxMessagingTask+0x164c>)
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	2a12      	cmp	r2, #18
 800aad2:	d100      	bne.n	800aad6 <PxMessagingTask+0x12da>
 800aad4:	e726      	b.n	800a924 <PxMessagingTask+0x1128>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800aad6:	1ca2      	adds	r2, r4, #2
 800aad8:	2138      	movs	r1, #56	; 0x38
 800aada:	4369      	muls	r1, r5
 800aadc:	48db      	ldr	r0, [pc, #876]	; (800ae4c <PxMessagingTask+0x1650>)
 800aade:	1841      	adds	r1, r0, r1
 800aae0:	5c88      	ldrb	r0, [r1, r2]
 800aae2:	1ce2      	adds	r2, r4, #3
 800aae4:	5c8a      	ldrb	r2, [r1, r2]
 800aae6:	0212      	lsls	r2, r2, #8
 800aae8:	1880      	adds	r0, r0, r2
 800aaea:	1d22      	adds	r2, r4, #4
 800aaec:	5c8a      	ldrb	r2, [r1, r2]
 800aaee:	0412      	lsls	r2, r2, #16
 800aaf0:	1882      	adds	r2, r0, r2
 800aaf2:	1d60      	adds	r0, r4, #5
 800aaf4:	5c09      	ldrb	r1, [r1, r0]
 800aaf6:	0609      	lsls	r1, r1, #24
 800aaf8:	1852      	adds	r2, r2, r1
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	e712      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800aafe:	4ad2      	ldr	r2, [pc, #840]	; (800ae48 <PxMessagingTask+0x164c>)
 800ab00:	2112      	movs	r1, #18
 800ab02:	7011      	strb	r1, [r2, #0]
 800ab04:	e7e2      	b.n	800aacc <PxMessagingTask+0x12d0>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ab06:	0712      	lsls	r2, r2, #28
 800ab08:	d109      	bne.n	800ab1e <PxMessagingTask+0x1322>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800ab0a:	2004      	movs	r0, #4
 800ab0c:	f009 f828 	bl	8013b60 <malloc>
 800ab10:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ab12:	d021      	beq.n	800ab58 <PxMessagingTask+0x135c>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ab14:	0400      	lsls	r0, r0, #16
 800ab16:	19c7      	adds	r7, r0, r7
 800ab18:	00b6      	lsls	r6, r6, #2
 800ab1a:	4aca      	ldr	r2, [pc, #808]	; (800ae44 <PxMessagingTask+0x1648>)
 800ab1c:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) {			// Write remote value
 800ab1e:	4aca      	ldr	r2, [pc, #808]	; (800ae48 <PxMessagingTask+0x164c>)
 800ab20:	7812      	ldrb	r2, [r2, #0]
 800ab22:	2a12      	cmp	r2, #18
 800ab24:	d100      	bne.n	800ab28 <PxMessagingTask+0x132c>
 800ab26:	e6fd      	b.n	800a924 <PxMessagingTask+0x1128>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800ab28:	1ca2      	adds	r2, r4, #2
 800ab2a:	2138      	movs	r1, #56	; 0x38
 800ab2c:	4369      	muls	r1, r5
 800ab2e:	48c7      	ldr	r0, [pc, #796]	; (800ae4c <PxMessagingTask+0x1650>)
 800ab30:	1841      	adds	r1, r0, r1
 800ab32:	5c88      	ldrb	r0, [r1, r2]
 800ab34:	1ce2      	adds	r2, r4, #3
 800ab36:	5c8a      	ldrb	r2, [r1, r2]
 800ab38:	0212      	lsls	r2, r2, #8
 800ab3a:	1880      	adds	r0, r0, r2
 800ab3c:	1d22      	adds	r2, r4, #4
 800ab3e:	5c8a      	ldrb	r2, [r1, r2]
 800ab40:	0412      	lsls	r2, r2, #16
 800ab42:	1882      	adds	r2, r0, r2
 800ab44:	1d60      	adds	r0, r4, #5
 800ab46:	5c09      	ldrb	r1, [r1, r0]
 800ab48:	0609      	lsls	r1, r1, #24
 800ab4a:	1852      	adds	r2, r2, r1
 800ab4c:	49c0      	ldr	r1, [pc, #768]	; (800ae50 <PxMessagingTask+0x1654>)
 800ab4e:	600a      	str	r2, [r1, #0]
 800ab50:	2000      	movs	r0, #0
 800ab52:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	e6e5      	b.n	800a924 <PxMessagingTask+0x1128>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ab58:	4abb      	ldr	r2, [pc, #748]	; (800ae48 <PxMessagingTask+0x164c>)
 800ab5a:	2112      	movs	r1, #18
 800ab5c:	7011      	strb	r1, [r2, #0]
 800ab5e:	e7de      	b.n	800ab1e <PxMessagingTask+0x1322>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800ab60:	4bb9      	ldr	r3, [pc, #740]	; (800ae48 <PxMessagingTask+0x164c>)
 800ab62:	2213      	movs	r2, #19
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	e6f6      	b.n	800a956 <PxMessagingTask+0x115a>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800ab68:	1ca2      	adds	r2, r4, #2
 800ab6a:	2338      	movs	r3, #56	; 0x38
 800ab6c:	436b      	muls	r3, r5
 800ab6e:	49b7      	ldr	r1, [pc, #732]	; (800ae4c <PxMessagingTask+0x1650>)
 800ab70:	18cb      	adds	r3, r1, r3
 800ab72:	5c9f      	ldrb	r7, [r3, r2]
 800ab74:	063f      	lsls	r7, r7, #24
 800ab76:	1ce2      	adds	r2, r4, #3
 800ab78:	5c9a      	ldrb	r2, [r3, r2]
 800ab7a:	0412      	lsls	r2, r2, #16
 800ab7c:	18bf      	adds	r7, r7, r2
 800ab7e:	1d22      	adds	r2, r4, #4
 800ab80:	5c9a      	ldrb	r2, [r3, r2]
 800ab82:	0212      	lsls	r2, r2, #8
 800ab84:	18bf      	adds	r7, r7, r2
 800ab86:	1d62      	adds	r2, r4, #5
 800ab88:	5c9b      	ldrb	r3, [r3, r2]
 800ab8a:	18ff      	adds	r7, r7, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800ab8c:	23e0      	movs	r3, #224	; 0xe0
 800ab8e:	061b      	lsls	r3, r3, #24
 800ab90:	18fa      	adds	r2, r7, r3
 800ab92:	4bb0      	ldr	r3, [pc, #704]	; (800ae54 <PxMessagingTask+0x1658>)
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d87c      	bhi.n	800ac92 <PxMessagingTask+0x1496>
									switch (cMessage[port-1][1+shift])															// Requested format
 800ab98:	1c63      	adds	r3, r4, #1
 800ab9a:	2138      	movs	r1, #56	; 0x38
 800ab9c:	4369      	muls	r1, r5
 800ab9e:	4aab      	ldr	r2, [pc, #684]	; (800ae4c <PxMessagingTask+0x1650>)
 800aba0:	1852      	adds	r2, r2, r1
 800aba2:	5cd3      	ldrb	r3, [r2, r3]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	2a07      	cmp	r2, #7
 800abaa:	d900      	bls.n	800abae <PxMessagingTask+0x13b2>
 800abac:	e6d3      	b.n	800a956 <PxMessagingTask+0x115a>
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4aa9      	ldr	r2, [pc, #676]	; (800ae58 <PxMessagingTask+0x165c>)
 800abb4:	58d3      	ldr	r3, [r2, r3]
 800abb6:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800abb8:	3406      	adds	r4, #6
 800abba:	2238      	movs	r2, #56	; 0x38
 800abbc:	436a      	muls	r2, r5
 800abbe:	4ba3      	ldr	r3, [pc, #652]	; (800ae4c <PxMessagingTask+0x1650>)
 800abc0:	189b      	adds	r3, r3, r2
 800abc2:	5d1b      	ldrb	r3, [r3, r4]
 800abc4:	703b      	strb	r3, [r7, #0]
 800abc6:	e6c6      	b.n	800a956 <PxMessagingTask+0x115a>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800abc8:	3406      	adds	r4, #6
 800abca:	2238      	movs	r2, #56	; 0x38
 800abcc:	436a      	muls	r2, r5
 800abce:	4b9f      	ldr	r3, [pc, #636]	; (800ae4c <PxMessagingTask+0x1650>)
 800abd0:	189b      	adds	r3, r3, r2
 800abd2:	571b      	ldrsb	r3, [r3, r4]
 800abd4:	703b      	strb	r3, [r7, #0]
 800abd6:	e6be      	b.n	800a956 <PxMessagingTask+0x115a>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800abd8:	1da1      	adds	r1, r4, #6
 800abda:	2338      	movs	r3, #56	; 0x38
 800abdc:	436b      	muls	r3, r5
 800abde:	4a9b      	ldr	r2, [pc, #620]	; (800ae4c <PxMessagingTask+0x1650>)
 800abe0:	18d2      	adds	r2, r2, r3
 800abe2:	5c53      	ldrb	r3, [r2, r1]
 800abe4:	3407      	adds	r4, #7
 800abe6:	5d12      	ldrb	r2, [r2, r4]
 800abe8:	0212      	lsls	r2, r2, #8
 800abea:	189b      	adds	r3, r3, r2
 800abec:	b29b      	uxth	r3, r3
 800abee:	803b      	strh	r3, [r7, #0]
 800abf0:	e6b1      	b.n	800a956 <PxMessagingTask+0x115a>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800abf2:	1da1      	adds	r1, r4, #6
 800abf4:	2338      	movs	r3, #56	; 0x38
 800abf6:	436b      	muls	r3, r5
 800abf8:	4a94      	ldr	r2, [pc, #592]	; (800ae4c <PxMessagingTask+0x1650>)
 800abfa:	18d2      	adds	r2, r2, r3
 800abfc:	5c53      	ldrb	r3, [r2, r1]
 800abfe:	3407      	adds	r4, #7
 800ac00:	5d12      	ldrb	r2, [r2, r4]
 800ac02:	0212      	lsls	r2, r2, #8
 800ac04:	189b      	adds	r3, r3, r2
 800ac06:	b21b      	sxth	r3, r3
 800ac08:	803b      	strh	r3, [r7, #0]
 800ac0a:	e6a4      	b.n	800a956 <PxMessagingTask+0x115a>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800ac0c:	1da1      	adds	r1, r4, #6
 800ac0e:	2338      	movs	r3, #56	; 0x38
 800ac10:	436b      	muls	r3, r5
 800ac12:	4a8e      	ldr	r2, [pc, #568]	; (800ae4c <PxMessagingTask+0x1650>)
 800ac14:	18d2      	adds	r2, r2, r3
 800ac16:	5c53      	ldrb	r3, [r2, r1]
 800ac18:	1de1      	adds	r1, r4, #7
 800ac1a:	5c51      	ldrb	r1, [r2, r1]
 800ac1c:	0209      	lsls	r1, r1, #8
 800ac1e:	185b      	adds	r3, r3, r1
 800ac20:	0021      	movs	r1, r4
 800ac22:	3108      	adds	r1, #8
 800ac24:	5c51      	ldrb	r1, [r2, r1]
 800ac26:	0409      	lsls	r1, r1, #16
 800ac28:	185b      	adds	r3, r3, r1
 800ac2a:	3409      	adds	r4, #9
 800ac2c:	5d12      	ldrb	r2, [r2, r4]
 800ac2e:	0612      	lsls	r2, r2, #24
 800ac30:	189b      	adds	r3, r3, r2
 800ac32:	603b      	str	r3, [r7, #0]
 800ac34:	e68f      	b.n	800a956 <PxMessagingTask+0x115a>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800ac36:	1da1      	adds	r1, r4, #6
 800ac38:	2338      	movs	r3, #56	; 0x38
 800ac3a:	436b      	muls	r3, r5
 800ac3c:	4a83      	ldr	r2, [pc, #524]	; (800ae4c <PxMessagingTask+0x1650>)
 800ac3e:	18d2      	adds	r2, r2, r3
 800ac40:	5c53      	ldrb	r3, [r2, r1]
 800ac42:	1de1      	adds	r1, r4, #7
 800ac44:	5c51      	ldrb	r1, [r2, r1]
 800ac46:	0209      	lsls	r1, r1, #8
 800ac48:	185b      	adds	r3, r3, r1
 800ac4a:	0021      	movs	r1, r4
 800ac4c:	3108      	adds	r1, #8
 800ac4e:	5c51      	ldrb	r1, [r2, r1]
 800ac50:	0409      	lsls	r1, r1, #16
 800ac52:	185b      	adds	r3, r3, r1
 800ac54:	3409      	adds	r4, #9
 800ac56:	5d12      	ldrb	r2, [r2, r4]
 800ac58:	0612      	lsls	r2, r2, #24
 800ac5a:	189b      	adds	r3, r3, r2
 800ac5c:	603b      	str	r3, [r7, #0]
 800ac5e:	e67a      	b.n	800a956 <PxMessagingTask+0x115a>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800ac60:	1da1      	adds	r1, r4, #6
 800ac62:	2338      	movs	r3, #56	; 0x38
 800ac64:	436b      	muls	r3, r5
 800ac66:	4a79      	ldr	r2, [pc, #484]	; (800ae4c <PxMessagingTask+0x1650>)
 800ac68:	18d2      	adds	r2, r2, r3
 800ac6a:	5c53      	ldrb	r3, [r2, r1]
 800ac6c:	1de1      	adds	r1, r4, #7
 800ac6e:	5c51      	ldrb	r1, [r2, r1]
 800ac70:	0209      	lsls	r1, r1, #8
 800ac72:	185b      	adds	r3, r3, r1
 800ac74:	0021      	movs	r1, r4
 800ac76:	3108      	adds	r1, #8
 800ac78:	5c51      	ldrb	r1, [r2, r1]
 800ac7a:	0409      	lsls	r1, r1, #16
 800ac7c:	185b      	adds	r3, r3, r1
 800ac7e:	3409      	adds	r4, #9
 800ac80:	5d12      	ldrb	r2, [r2, r4]
 800ac82:	0612      	lsls	r2, r2, #24
 800ac84:	189b      	adds	r3, r3, r2
 800ac86:	4a72      	ldr	r2, [pc, #456]	; (800ae50 <PxMessagingTask+0x1654>)
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	e661      	b.n	800a956 <PxMessagingTask+0x115a>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800ac92:	4a72      	ldr	r2, [pc, #456]	; (800ae5c <PxMessagingTask+0x1660>)
 800ac94:	23f8      	movs	r3, #248	; 0xf8
 800ac96:	061b      	lsls	r3, r3, #24
 800ac98:	18fb      	adds	r3, r7, r3
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d900      	bls.n	800aca0 <PxMessagingTask+0x14a4>
 800ac9e:	e0af      	b.n	800ae00 <PxMessagingTask+0x1604>
									HAL_FLASH_Unlock();
 800aca0:	f007 f810 	bl	8011cc4 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800aca4:	2e22      	cmp	r6, #34	; 0x22
 800aca6:	d111      	bne.n	800accc <PxMessagingTask+0x14d0>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aca8:	2300      	movs	r3, #0
 800acaa:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800acac:	9714      	str	r7, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800acae:	3301      	adds	r3, #1
 800acb0:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800acb2:	a912      	add	r1, sp, #72	; 0x48
 800acb4:	a813      	add	r0, sp, #76	; 0x4c
 800acb6:	f007 f8c5 	bl	8011e44 <HAL_FLASHEx_Erase>
 800acba:	9008      	str	r0, [sp, #32]
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d102      	bne.n	800acc6 <PxMessagingTask+0x14ca>
 800acc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acc2:	3301      	adds	r3, #1
 800acc4:	d002      	beq.n	800accc <PxMessagingTask+0x14d0>
 800acc6:	4b60      	ldr	r3, [pc, #384]	; (800ae48 <PxMessagingTask+0x164c>)
 800acc8:	2216      	movs	r2, #22
 800acca:	701a      	strb	r2, [r3, #0]
									if (responseStatus == BOS_OK)
 800accc:	4b5e      	ldr	r3, [pc, #376]	; (800ae48 <PxMessagingTask+0x164c>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d116      	bne.n	800ad02 <PxMessagingTask+0x1506>
										switch (cMessage[port-1][1+shift])															// Requested format
 800acd4:	1c63      	adds	r3, r4, #1
 800acd6:	2138      	movs	r1, #56	; 0x38
 800acd8:	4369      	muls	r1, r5
 800acda:	4a5c      	ldr	r2, [pc, #368]	; (800ae4c <PxMessagingTask+0x1650>)
 800acdc:	1852      	adds	r2, r2, r1
 800acde:	5cd3      	ldrb	r3, [r2, r3]
 800ace0:	3b01      	subs	r3, #1
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	2a07      	cmp	r2, #7
 800ace6:	d80c      	bhi.n	800ad02 <PxMessagingTask+0x1506>
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a5c      	ldr	r2, [pc, #368]	; (800ae60 <PxMessagingTask+0x1664>)
 800acee:	58d3      	ldr	r3, [r2, r3]
 800acf0:	469f      	mov	pc, r3
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800acf2:	883b      	ldrh	r3, [r7, #0]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	4a5b      	ldr	r2, [pc, #364]	; (800ae64 <PxMessagingTask+0x1668>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00c      	beq.n	800ad16 <PxMessagingTask+0x151a>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800acfc:	4b52      	ldr	r3, [pc, #328]	; (800ae48 <PxMessagingTask+0x164c>)
 800acfe:	2216      	movs	r2, #22
 800ad00:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800ad02:	f006 fff3 	bl	8011cec <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800ad06:	9b08      	ldr	r3, [sp, #32]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d100      	bne.n	800ad0e <PxMessagingTask+0x1512>
 800ad0c:	e623      	b.n	800a956 <PxMessagingTask+0x115a>
 800ad0e:	4b4e      	ldr	r3, [pc, #312]	; (800ae48 <PxMessagingTask+0x164c>)
 800ad10:	2216      	movs	r2, #22
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	e61f      	b.n	800a956 <PxMessagingTask+0x115a>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800ad16:	3406      	adds	r4, #6
 800ad18:	2238      	movs	r2, #56	; 0x38
 800ad1a:	436a      	muls	r2, r5
 800ad1c:	4b4b      	ldr	r3, [pc, #300]	; (800ae4c <PxMessagingTask+0x1650>)
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	5d1a      	ldrb	r2, [r3, r4]
 800ad22:	2300      	movs	r3, #0
 800ad24:	494a      	ldr	r1, [pc, #296]	; (800ae50 <PxMessagingTask+0x1654>)
 800ad26:	600a      	str	r2, [r1, #0]
 800ad28:	604b      	str	r3, [r1, #4]
 800ad2a:	0039      	movs	r1, r7
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	f007 f815 	bl	8011d5c <HAL_FLASH_Program>
 800ad32:	9008      	str	r0, [sp, #32]
 800ad34:	e7e5      	b.n	800ad02 <PxMessagingTask+0x1506>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800ad36:	883b      	ldrh	r3, [r7, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	4a4a      	ldr	r2, [pc, #296]	; (800ae64 <PxMessagingTask+0x1668>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d003      	beq.n	800ad48 <PxMessagingTask+0x154c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ad40:	4b41      	ldr	r3, [pc, #260]	; (800ae48 <PxMessagingTask+0x164c>)
 800ad42:	2216      	movs	r2, #22
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	e7dc      	b.n	800ad02 <PxMessagingTask+0x1506>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800ad48:	1da1      	adds	r1, r4, #6
 800ad4a:	2238      	movs	r2, #56	; 0x38
 800ad4c:	436a      	muls	r2, r5
 800ad4e:	4b3f      	ldr	r3, [pc, #252]	; (800ae4c <PxMessagingTask+0x1650>)
 800ad50:	189b      	adds	r3, r3, r2
 800ad52:	5c5a      	ldrb	r2, [r3, r1]
 800ad54:	3407      	adds	r4, #7
 800ad56:	5d1b      	ldrb	r3, [r3, r4]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	18d2      	adds	r2, r2, r3
 800ad5c:	17d3      	asrs	r3, r2, #31
 800ad5e:	493c      	ldr	r1, [pc, #240]	; (800ae50 <PxMessagingTask+0x1654>)
 800ad60:	600a      	str	r2, [r1, #0]
 800ad62:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800ad64:	0039      	movs	r1, r7
 800ad66:	2001      	movs	r0, #1
 800ad68:	f006 fff8 	bl	8011d5c <HAL_FLASH_Program>
 800ad6c:	9008      	str	r0, [sp, #32]
 800ad6e:	e7c8      	b.n	800ad02 <PxMessagingTask+0x1506>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	d003      	beq.n	800ad7e <PxMessagingTask+0x1582>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ad76:	4b34      	ldr	r3, [pc, #208]	; (800ae48 <PxMessagingTask+0x164c>)
 800ad78:	2216      	movs	r2, #22
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e7c1      	b.n	800ad02 <PxMessagingTask+0x1506>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800ad7e:	1da2      	adds	r2, r4, #6
 800ad80:	2338      	movs	r3, #56	; 0x38
 800ad82:	436b      	muls	r3, r5
 800ad84:	4931      	ldr	r1, [pc, #196]	; (800ae4c <PxMessagingTask+0x1650>)
 800ad86:	18cb      	adds	r3, r1, r3
 800ad88:	5c9a      	ldrb	r2, [r3, r2]
 800ad8a:	1de1      	adds	r1, r4, #7
 800ad8c:	5c59      	ldrb	r1, [r3, r1]
 800ad8e:	0209      	lsls	r1, r1, #8
 800ad90:	1852      	adds	r2, r2, r1
 800ad92:	0021      	movs	r1, r4
 800ad94:	3108      	adds	r1, #8
 800ad96:	5c59      	ldrb	r1, [r3, r1]
 800ad98:	0409      	lsls	r1, r1, #16
 800ad9a:	1852      	adds	r2, r2, r1
 800ad9c:	3409      	adds	r4, #9
 800ad9e:	5d1b      	ldrb	r3, [r3, r4]
 800ada0:	061b      	lsls	r3, r3, #24
 800ada2:	18d2      	adds	r2, r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	492a      	ldr	r1, [pc, #168]	; (800ae50 <PxMessagingTask+0x1654>)
 800ada8:	600a      	str	r2, [r1, #0]
 800adaa:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800adac:	0039      	movs	r1, r7
 800adae:	2002      	movs	r0, #2
 800adb0:	f006 ffd4 	bl	8011d5c <HAL_FLASH_Program>
 800adb4:	9008      	str	r0, [sp, #32]
 800adb6:	e7a4      	b.n	800ad02 <PxMessagingTask+0x1506>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	d003      	beq.n	800adc6 <PxMessagingTask+0x15ca>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800adbe:	4b22      	ldr	r3, [pc, #136]	; (800ae48 <PxMessagingTask+0x164c>)
 800adc0:	2216      	movs	r2, #22
 800adc2:	701a      	strb	r2, [r3, #0]
 800adc4:	e79d      	b.n	800ad02 <PxMessagingTask+0x1506>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800adc6:	1da2      	adds	r2, r4, #6
 800adc8:	2338      	movs	r3, #56	; 0x38
 800adca:	436b      	muls	r3, r5
 800adcc:	491f      	ldr	r1, [pc, #124]	; (800ae4c <PxMessagingTask+0x1650>)
 800adce:	18cb      	adds	r3, r1, r3
 800add0:	5c9a      	ldrb	r2, [r3, r2]
 800add2:	1de1      	adds	r1, r4, #7
 800add4:	5c59      	ldrb	r1, [r3, r1]
 800add6:	0209      	lsls	r1, r1, #8
 800add8:	1852      	adds	r2, r2, r1
 800adda:	0021      	movs	r1, r4
 800addc:	3108      	adds	r1, #8
 800adde:	5c59      	ldrb	r1, [r3, r1]
 800ade0:	0409      	lsls	r1, r1, #16
 800ade2:	1852      	adds	r2, r2, r1
 800ade4:	3409      	adds	r4, #9
 800ade6:	5d1b      	ldrb	r3, [r3, r4]
 800ade8:	061b      	lsls	r3, r3, #24
 800adea:	18d2      	adds	r2, r2, r3
 800adec:	2300      	movs	r3, #0
 800adee:	4918      	ldr	r1, [pc, #96]	; (800ae50 <PxMessagingTask+0x1654>)
 800adf0:	600a      	str	r2, [r1, #0]
 800adf2:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800adf4:	0039      	movs	r1, r7
 800adf6:	2003      	movs	r0, #3
 800adf8:	f006 ffb0 	bl	8011d5c <HAL_FLASH_Program>
 800adfc:	9008      	str	r0, [sp, #32]
 800adfe:	e780      	b.n	800ad02 <PxMessagingTask+0x1506>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ae00:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <PxMessagingTask+0x164c>)
 800ae02:	2215      	movs	r2, #21
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	e5a6      	b.n	800a956 <PxMessagingTask+0x115a>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800ae08:	00eb      	lsls	r3, r5, #3
 800ae0a:	1b5b      	subs	r3, r3, r5
 800ae0c:	00da      	lsls	r2, r3, #3
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <PxMessagingTask+0x1650>)
 800ae10:	189b      	adds	r3, r3, r2
 800ae12:	5d1a      	ldrb	r2, [r3, r4]
 800ae14:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <PxMessagingTask+0x164c>)
 800ae16:	701a      	strb	r2, [r3, #0]
							break;	
 800ae18:	f7fe fd3d 	bl	8009896 <PxMessagingTask+0x9a>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800ae1c:	1c60      	adds	r0, r4, #1
 800ae1e:	00eb      	lsls	r3, r5, #3
 800ae20:	1b5a      	subs	r2, r3, r5
 800ae22:	00d1      	lsls	r1, r2, #3
 800ae24:	1809      	adds	r1, r1, r0
 800ae26:	4809      	ldr	r0, [pc, #36]	; (800ae4c <PxMessagingTask+0x1650>)
 800ae28:	1809      	adds	r1, r1, r0
 800ae2a:	1e7a      	subs	r2, r7, #1
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	1b5b      	subs	r3, r3, r5
 800ae30:	00de      	lsls	r6, r3, #3
 800ae32:	1980      	adds	r0, r0, r6
 800ae34:	5d00      	ldrb	r0, [r0, r4]
 800ae36:	230a      	movs	r3, #10
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	f003 ff11 	bl	800ec60 <writePxMutex>
							break;
 800ae3e:	f7fe fd2a 	bl	8009896 <PxMessagingTask+0x9a>
 800ae42:	46c0      	nop			; (mov r8, r8)
 800ae44:	2000695c 	.word	0x2000695c
 800ae48:	20000dc8 	.word	0x20000dc8
 800ae4c:	20000b34 	.word	0x20000b34
 800ae50:	20000dc0 	.word	0x20000dc0
 800ae54:	00007fff 	.word	0x00007fff
 800ae58:	0801b138 	.word	0x0801b138
 800ae5c:	0001ffff 	.word	0x0001ffff
 800ae60:	0801b158 	.word	0x0801b158
 800ae64:	0000ffff 	.word	0x0000ffff
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800ae68:	9400      	str	r4, [sp, #0]
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	9a05      	ldr	r2, [sp, #20]
 800ae6e:	9907      	ldr	r1, [sp, #28]
 800ae70:	0030      	movs	r0, r6
 800ae72:	f7fe fcc1 	bl	80097f8 <User_MessagingParser>
 800ae76:	4683      	mov	fp, r0
							if (result == BOS_ERR_UnknownMessage) {
 800ae78:	2801      	cmp	r0, #1
 800ae7a:	d001      	beq.n	800ae80 <PxMessagingTask+0x1684>
 800ae7c:	f7fe fd0b 	bl	8009896 <PxMessagingTask+0x9a>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800ae80:	9400      	str	r4, [sp, #0]
 800ae82:	464b      	mov	r3, r9
 800ae84:	9a05      	ldr	r2, [sp, #20]
 800ae86:	9907      	ldr	r1, [sp, #28]
 800ae88:	0030      	movs	r0, r6
 800ae8a:	f001 fce5 	bl	800c858 <Module_MessagingTask>
 800ae8e:	4683      	mov	fp, r0
 800ae90:	f7fe fd01 	bl	8009896 <PxMessagingTask+0x9a>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	9805      	ldr	r0, [sp, #20]
 800ae9a:	f7fe fa11 	bl	80092c0 <SendMessageToModule>
			result = BOS_OK;			
 800ae9e:	2300      	movs	r3, #0
 800aea0:	469b      	mov	fp, r3
 800aea2:	f7fe fcfd 	bl	80098a0 <PxMessagingTask+0xa4>
 800aea6:	46c0      	nop			; (mov r8, r8)

0800aea8 <weight1ModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE weight1ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800aeac:	d101      	bne.n	800aeb2 <weight1ModParamCommand+0xa>
 800aeae:	b672      	cpsid	i
 800aeb0:	e7fe      	b.n	800aeb0 <weight1ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight1_buffer);
 800aeb2:	4b06      	ldr	r3, [pc, #24]	; (800aecc <weight1ModParamCommand+0x24>)
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	f7f8 f935 	bl	8003124 <__aeabi_f2d>
 800aeba:	0002      	movs	r2, r0
 800aebc:	000b      	movs	r3, r1
 800aebe:	4904      	ldr	r1, [pc, #16]	; (800aed0 <weight1ModParamCommand+0x28>)
 800aec0:	0020      	movs	r0, r4
 800aec2:	f009 fa9d 	bl	8014400 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800aec6:	2000      	movs	r0, #0
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	20006b78 	.word	0x20006b78
 800aed0:	0801b934 	.word	0x0801b934

0800aed4 <weight2ModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE weight2ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800aed4:	b510      	push	{r4, lr}
 800aed6:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800aed8:	d101      	bne.n	800aede <weight2ModParamCommand+0xa>
 800aeda:	b672      	cpsid	i
 800aedc:	e7fe      	b.n	800aedc <weight2ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight2_buffer);
 800aede:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <weight2ModParamCommand+0x24>)
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f7f8 f91f 	bl	8003124 <__aeabi_f2d>
 800aee6:	0002      	movs	r2, r0
 800aee8:	000b      	movs	r3, r1
 800aeea:	4904      	ldr	r1, [pc, #16]	; (800aefc <weight2ModParamCommand+0x28>)
 800aeec:	0020      	movs	r0, r4
 800aeee:	f009 fa87 	bl	8014400 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800aef2:	2000      	movs	r0, #0
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	20006a90 	.word	0x20006a90
 800aefc:	0801b934 	.word	0x0801b934

0800af00 <unitCommand>:
{
 800af00:	b530      	push	{r4, r5, lr}
 800af02:	b083      	sub	sp, #12
 800af04:	0004      	movs	r4, r0
 800af06:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	d101      	bne.n	800af14 <unitCommand+0x14>
 800af10:	b672      	cpsid	i
 800af12:	e7fe      	b.n	800af12 <unitCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800af14:	aa01      	add	r2, sp, #4
 800af16:	2101      	movs	r1, #1
 800af18:	f004 f8fc 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800af1c:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "g", 1))
 800af1e:	7803      	ldrb	r3, [r0, #0]
 800af20:	2b67      	cmp	r3, #103	; 0x67
 800af22:	d01c      	beq.n	800af5e <unitCommand+0x5e>
  else if (!strncmp((const char *)pcParameterString1, "kg", 2))
 800af24:	2202      	movs	r2, #2
 800af26:	4927      	ldr	r1, [pc, #156]	; (800afc4 <unitCommand+0xc4>)
 800af28:	f009 faae 	bl	8014488 <strncmp>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d021      	beq.n	800af74 <unitCommand+0x74>
  else if (!strncmp((const char *)pcParameterString1, "ounce", 5))
 800af30:	2205      	movs	r2, #5
 800af32:	4925      	ldr	r1, [pc, #148]	; (800afc8 <unitCommand+0xc8>)
 800af34:	0028      	movs	r0, r5
 800af36:	f009 faa7 	bl	8014488 <strncmp>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d023      	beq.n	800af86 <unitCommand+0x86>
	else if (!strncmp((const char *)pcParameterString1, "lb", 2))
 800af3e:	2202      	movs	r2, #2
 800af40:	4922      	ldr	r1, [pc, #136]	; (800afcc <unitCommand+0xcc>)
 800af42:	0028      	movs	r0, r5
 800af44:	f009 faa0 	bl	8014488 <strncmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d125      	bne.n	800af98 <unitCommand+0x98>
    unit = Pound;
 800af4c:	4b20      	ldr	r3, [pc, #128]	; (800afd0 <unitCommand+0xd0>)
 800af4e:	2204      	movs	r2, #4
 800af50:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Pound\r\n" );
 800af52:	321b      	adds	r2, #27
 800af54:	491f      	ldr	r1, [pc, #124]	; (800afd4 <unitCommand+0xd4>)
 800af56:	0020      	movs	r0, r4
 800af58:	f009 f84f 	bl	8013ffa <memcpy>
 800af5c:	e007      	b.n	800af6e <unitCommand+0x6e>
    unit = Gram;
 800af5e:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <unitCommand+0xd0>)
 800af60:	2201      	movs	r2, #1
 800af62:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Gram\r\n" );
 800af64:	321d      	adds	r2, #29
 800af66:	491c      	ldr	r1, [pc, #112]	; (800afd8 <unitCommand+0xd8>)
 800af68:	0020      	movs	r0, r4
 800af6a:	f009 f846 	bl	8013ffa <memcpy>
}
 800af6e:	2000      	movs	r0, #0
 800af70:	b003      	add	sp, #12
 800af72:	bd30      	pop	{r4, r5, pc}
    unit = KGram;
 800af74:	4b16      	ldr	r3, [pc, #88]	; (800afd0 <unitCommand+0xd0>)
 800af76:	2202      	movs	r2, #2
 800af78:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: KGram\r\n" );
 800af7a:	321d      	adds	r2, #29
 800af7c:	4917      	ldr	r1, [pc, #92]	; (800afdc <unitCommand+0xdc>)
 800af7e:	0020      	movs	r0, r4
 800af80:	f009 f83b 	bl	8013ffa <memcpy>
 800af84:	e7f3      	b.n	800af6e <unitCommand+0x6e>
    unit = Ounce;
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <unitCommand+0xd0>)
 800af88:	2203      	movs	r2, #3
 800af8a:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Ounce\r\n" );
 800af8c:	321c      	adds	r2, #28
 800af8e:	4914      	ldr	r1, [pc, #80]	; (800afe0 <unitCommand+0xe0>)
 800af90:	0020      	movs	r0, r4
 800af92:	f009 f832 	bl	8013ffa <memcpy>
 800af96:	e7ea      	b.n	800af6e <unitCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "raw", 3))
 800af98:	2203      	movs	r2, #3
 800af9a:	4912      	ldr	r1, [pc, #72]	; (800afe4 <unitCommand+0xe4>)
 800af9c:	0028      	movs	r0, r5
 800af9e:	f009 fa73 	bl	8014488 <strncmp>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d005      	beq.n	800afb2 <unitCommand+0xb2>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800afa6:	2213      	movs	r2, #19
 800afa8:	490f      	ldr	r1, [pc, #60]	; (800afe8 <unitCommand+0xe8>)
 800afaa:	0020      	movs	r0, r4
 800afac:	f009 f825 	bl	8013ffa <memcpy>
 800afb0:	e7dd      	b.n	800af6e <unitCommand+0x6e>
    unit = RAW;
 800afb2:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <unitCommand+0xd0>)
 800afb4:	2205      	movs	r2, #5
 800afb6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Raw\r\n" );
 800afb8:	3218      	adds	r2, #24
 800afba:	490c      	ldr	r1, [pc, #48]	; (800afec <unitCommand+0xec>)
 800afbc:	0020      	movs	r0, r4
 800afbe:	f009 f81c 	bl	8013ffa <memcpy>
 800afc2:	e7d4      	b.n	800af6e <unitCommand+0x6e>
 800afc4:	0801b880 	.word	0x0801b880
 800afc8:	0801b8a4 	.word	0x0801b8a4
 800afcc:	0801b8cc 	.word	0x0801b8cc
 800afd0:	2000010c 	.word	0x2000010c
 800afd4:	0801b8d0 	.word	0x0801b8d0
 800afd8:	0801b860 	.word	0x0801b860
 800afdc:	0801b884 	.word	0x0801b884
 800afe0:	0801b8ac 	.word	0x0801b8ac
 800afe4:	0801b8f0 	.word	0x0801b8f0
 800afe8:	08019c98 	.word	0x08019c98
 800afec:	0801b8f4 	.word	0x0801b8f4

0800aff0 <CheckForEnterKey>:
{
 800aff0:	b510      	push	{r4, lr}
 800aff2:	b082      	sub	sp, #8
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800aff4:	2300      	movs	r3, #0
 800aff6:	2b3f      	cmp	r3, #63	; 0x3f
 800aff8:	d81b      	bhi.n	800b032 <CheckForEnterKey+0x42>
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800affa:	4a0f      	ldr	r2, [pc, #60]	; (800b038 <CheckForEnterKey+0x48>)
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	3a01      	subs	r2, #1
 800b000:	001c      	movs	r4, r3
 800b002:	0190      	lsls	r0, r2, #6
 800b004:	490d      	ldr	r1, [pc, #52]	; (800b03c <CheckForEnterKey+0x4c>)
 800b006:	1809      	adds	r1, r1, r0
 800b008:	5cc9      	ldrb	r1, [r1, r3]
 800b00a:	290d      	cmp	r1, #13
 800b00c:	d002      	beq.n	800b014 <CheckForEnterKey+0x24>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800b00e:	3301      	adds	r3, #1
 800b010:	b2db      	uxtb	r3, r3
 800b012:	e7f0      	b.n	800aff6 <CheckForEnterKey+0x6>
			UARTRxBuf[PcPort-1][chr] = 0;
 800b014:	4b09      	ldr	r3, [pc, #36]	; (800b03c <CheckForEnterKey+0x4c>)
 800b016:	181a      	adds	r2, r3, r0
 800b018:	2300      	movs	r3, #0
 800b01a:	5513      	strb	r3, [r2, r4]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800b01c:	4a08      	ldr	r2, [pc, #32]	; (800b040 <CheckForEnterKey+0x50>)
 800b01e:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		                // Stop the streaming task
 800b020:	4a08      	ldr	r2, [pc, #32]	; (800b044 <CheckForEnterKey+0x54>)
 800b022:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimer, 0 );            // Stop the timeout timer
 800b024:	4a08      	ldr	r2, [pc, #32]	; (800b048 <CheckForEnterKey+0x58>)
 800b026:	6810      	ldr	r0, [r2, #0]
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	390a      	subs	r1, #10
 800b02e:	f005 fc95 	bl	801095c <xTimerGenericCommand>
}
 800b032:	b002      	add	sp, #8
 800b034:	bd10      	pop	{r4, pc}
 800b036:	46c0      	nop			; (mov r8, r8)
 800b038:	20000af7 	.word	0x20000af7
 800b03c:	20000f58 	.word	0x20000f58
 800b040:	20001780 	.word	0x20001780
 800b044:	20006b05 	.word	0x20006b05
 800b048:	200017a8 	.word	0x200017a8

0800b04c <HandleTimeout>:
{
 800b04c:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800b04e:	f005 fdbe 	bl	8010bce <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800b052:	28ff      	cmp	r0, #255	; 0xff
 800b054:	d000      	beq.n	800b058 <HandleTimeout+0xc>
}
 800b056:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		                                    // Stop the streaming task
 800b058:	2300      	movs	r3, #0
 800b05a:	4a02      	ldr	r2, [pc, #8]	; (800b064 <HandleTimeout+0x18>)
 800b05c:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING;     // stop streaming
 800b05e:	4a02      	ldr	r2, [pc, #8]	; (800b068 <HandleTimeout+0x1c>)
 800b060:	7013      	strb	r3, [r2, #0]
}
 800b062:	e7f8      	b.n	800b056 <HandleTimeout+0xa>
 800b064:	20006b05 	.word	0x20006b05
 800b068:	20001780 	.word	0x20001780

0800b06c <SystemClock_Config>:
{
 800b06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b070:	2401      	movs	r4, #1
 800b072:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b074:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b076:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800b078:	2310      	movs	r3, #16
 800b07a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b07c:	2702      	movs	r7, #2
 800b07e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b080:	2680      	movs	r6, #128	; 0x80
 800b082:	0276      	lsls	r6, r6, #9
 800b084:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b086:	2380      	movs	r3, #128	; 0x80
 800b088:	035b      	lsls	r3, r3, #13
 800b08a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b08c:	2500      	movs	r5, #0
 800b08e:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b090:	a80d      	add	r0, sp, #52	; 0x34
 800b092:	f007 f80d 	bl	80120b0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b096:	2307      	movs	r3, #7
 800b098:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b09a:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b09c:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b09e:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	a809      	add	r0, sp, #36	; 0x24
 800b0a4:	f007 faa8 	bl	80125f8 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800b0a8:	4b1a      	ldr	r3, [pc, #104]	; (800b114 <SystemClock_Config+0xa8>)
 800b0aa:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b0ac:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b0ae:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b0b0:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b0b2:	a802      	add	r0, sp, #8
 800b0b4:	f007 fc34 	bl	8012920 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b0b8:	4d17      	ldr	r5, [pc, #92]	; (800b118 <SystemClock_Config+0xac>)
 800b0ba:	69ea      	ldr	r2, [r5, #28]
 800b0bc:	2180      	movs	r1, #128	; 0x80
 800b0be:	0549      	lsls	r1, r1, #21
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	61ea      	str	r2, [r5, #28]
 800b0c4:	69eb      	ldr	r3, [r5, #28]
 800b0c6:	400b      	ands	r3, r1
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800b0cc:	f006 ffe6 	bl	801209c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b0d0:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b0d2:	23c0      	movs	r3, #192	; 0xc0
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b0d8:	a802      	add	r0, sp, #8
 800b0da:	f007 fc21 	bl	8012920 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800b0de:	f007 fbfb 	bl	80128d8 <HAL_RCC_GetHCLKFreq>
 800b0e2:	21fa      	movs	r1, #250	; 0xfa
 800b0e4:	0089      	lsls	r1, r1, #2
 800b0e6:	f7f5 f833 	bl	8000150 <__udivsi3>
 800b0ea:	f005 ffc9 	bl	8011080 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b0ee:	2004      	movs	r0, #4
 800b0f0:	f005 ffe2 	bl	80110b8 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b0f4:	69ab      	ldr	r3, [r5, #24]
 800b0f6:	4323      	orrs	r3, r4
 800b0f8:	61ab      	str	r3, [r5, #24]
 800b0fa:	69ab      	ldr	r3, [r5, #24]
 800b0fc:	401c      	ands	r4, r3
 800b0fe:	9401      	str	r4, [sp, #4]
 800b100:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800b102:	2001      	movs	r0, #1
 800b104:	2200      	movs	r2, #0
 800b106:	2100      	movs	r1, #0
 800b108:	4240      	negs	r0, r0
 800b10a:	f005 ff75 	bl	8010ff8 <HAL_NVIC_SetPriority>
}
 800b10e:	b01b      	add	sp, #108	; 0x6c
 800b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	00040003 	.word	0x00040003
 800b118:	40021000 	.word	0x40021000

0800b11c <Module_Init>:
{
 800b11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11e:	b085      	sub	sp, #20
	MX_USART2_UART_Init();
 800b120:	f003 fbfe 	bl	800e920 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b124:	f003 fc14 	bl	800e950 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b128:	f003 fc2a 	bl	800e980 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800b12c:	f003 fc40 	bl	800e9b0 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b130:	f003 fc56 	bl	800e9e0 <MX_USART6_UART_Init>
	HX711_GPIO_Init();// GPIO init
 800b134:	f003 f82c 	bl	800e190 <HX711_GPIO_Init>
	xTaskCreate(LoadcellTask,(const char* ) "LoadcellTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&LoadcellHandle);
 800b138:	22a0      	movs	r2, #160	; 0xa0
 800b13a:	2300      	movs	r3, #0
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	9302      	str	r3, [sp, #8]
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <Module_Init+0xc4>)
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	2303      	movs	r3, #3
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	0052      	lsls	r2, r2, #1
 800b14c:	4925      	ldr	r1, [pc, #148]	; (800b1e4 <Module_Init+0xc8>)
 800b14e:	4826      	ldr	r0, [pc, #152]	; (800b1e8 <Module_Init+0xcc>)
 800b150:	f004 fd4e 	bl	800fbf0 <xTaskGenericCreate>
	EE_ReadVariable(_EE_cell_full_scale,&full_scale);
 800b154:	20fa      	movs	r0, #250	; 0xfa
 800b156:	4925      	ldr	r1, [pc, #148]	; (800b1ec <Module_Init+0xd0>)
 800b158:	0040      	lsls	r0, r0, #1
 800b15a:	f7fc fbcd 	bl	80078f8 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_LSB,&word_LSB);
 800b15e:	4d24      	ldr	r5, [pc, #144]	; (800b1f0 <Module_Init+0xd4>)
 800b160:	20f6      	movs	r0, #246	; 0xf6
 800b162:	0029      	movs	r1, r5
 800b164:	30ff      	adds	r0, #255	; 0xff
 800b166:	f7fc fbc7 	bl	80078f8 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_MSB,&word_MSB);
 800b16a:	4c22      	ldr	r4, [pc, #136]	; (800b1f4 <Module_Init+0xd8>)
 800b16c:	20fb      	movs	r0, #251	; 0xfb
 800b16e:	0021      	movs	r1, r4
 800b170:	0040      	lsls	r0, r0, #1
 800b172:	f7fc fbc1 	bl	80078f8 <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800b176:	882b      	ldrh	r3, [r5, #0]
 800b178:	8822      	ldrh	r2, [r4, #0]
 800b17a:	0412      	lsls	r2, r2, #16
 800b17c:	189b      	adds	r3, r3, r2
 800b17e:	4f1e      	ldr	r7, [pc, #120]	; (800b1f8 <Module_Init+0xdc>)
 800b180:	603b      	str	r3, [r7, #0]
	cell_drift =*(float*) &temp32;
 800b182:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <Module_Init+0xe0>)
 800b184:	6013      	str	r3, [r2, #0]
	EE_ReadVariable(_EE_cell_output_LSB,&word_LSB);
 800b186:	20f8      	movs	r0, #248	; 0xf8
 800b188:	0029      	movs	r1, r5
 800b18a:	30ff      	adds	r0, #255	; 0xff
 800b18c:	f7fc fbb4 	bl	80078f8 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_output_MSB,&word_MSB);
 800b190:	20fc      	movs	r0, #252	; 0xfc
 800b192:	0021      	movs	r1, r4
 800b194:	0040      	lsls	r0, r0, #1
 800b196:	f7fc fbaf 	bl	80078f8 <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800b19a:	882b      	ldrh	r3, [r5, #0]
 800b19c:	8822      	ldrh	r2, [r4, #0]
 800b19e:	0412      	lsls	r2, r2, #16
 800b1a0:	189b      	adds	r3, r3, r2
 800b1a2:	603b      	str	r3, [r7, #0]
	cell_output =*(float*) &temp32;
 800b1a4:	4e16      	ldr	r6, [pc, #88]	; (800b200 <Module_Init+0xe4>)
 800b1a6:	6033      	str	r3, [r6, #0]
	EE_ReadVariable(_EE_zero_drift_LSB,&word_LSB);
 800b1a8:	20fa      	movs	r0, #250	; 0xfa
 800b1aa:	0029      	movs	r1, r5
 800b1ac:	30ff      	adds	r0, #255	; 0xff
 800b1ae:	f7fc fba3 	bl	80078f8 <EE_ReadVariable>
	EE_ReadVariable(_EE_zero_drift_MSB,&word_MSB);
 800b1b2:	20fd      	movs	r0, #253	; 0xfd
 800b1b4:	0021      	movs	r1, r4
 800b1b6:	0040      	lsls	r0, r0, #1
 800b1b8:	f7fc fb9e 	bl	80078f8 <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800b1bc:	882b      	ldrh	r3, [r5, #0]
 800b1be:	8822      	ldrh	r2, [r4, #0]
 800b1c0:	0412      	lsls	r2, r2, #16
 800b1c2:	189b      	adds	r3, r3, r2
 800b1c4:	603b      	str	r3, [r7, #0]
	Zero_Drift =*(float*) &temp32;
 800b1c6:	4a0f      	ldr	r2, [pc, #60]	; (800b204 <Module_Init+0xe8>)
 800b1c8:	6013      	str	r3, [r2, #0]
	calibration_factor =cell_output * AVDD / 1000.0f;// mV
 800b1ca:	490f      	ldr	r1, [pc, #60]	; (800b208 <Module_Init+0xec>)
 800b1cc:	6830      	ldr	r0, [r6, #0]
 800b1ce:	f7f5 fe6b 	bl	8000ea8 <__aeabi_fmul>
 800b1d2:	490e      	ldr	r1, [pc, #56]	; (800b20c <Module_Init+0xf0>)
 800b1d4:	f7f5 fc90 	bl	8000af8 <__aeabi_fdiv>
 800b1d8:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <Module_Init+0xf4>)
 800b1da:	6018      	str	r0, [r3, #0]
}
 800b1dc:	b005      	add	sp, #20
 800b1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e0:	20001368 	.word	0x20001368
 800b1e4:	0801b1f0 	.word	0x0801b1f0
 800b1e8:	0800c5fd 	.word	0x0800c5fd
 800b1ec:	20001778 	.word	0x20001778
 800b1f0:	200017a4 	.word	0x200017a4
 800b1f4:	200017a6 	.word	0x200017a6
 800b1f8:	20001788 	.word	0x20001788
 800b1fc:	200000e0 	.word	0x200000e0
 800b200:	20001774 	.word	0x20001774
 800b204:	2000176c 	.word	0x2000176c
 800b208:	40400000 	.word	0x40400000
 800b20c:	447a0000 	.word	0x447a0000
 800b210:	20001770 	.word	0x20001770

0800b214 <SaveToRO>:
{
 800b214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b216:	46c6      	mov	lr, r8
 800b218:	b500      	push	{lr}
 800b21a:	b086      	sub	sp, #24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b21c:	2215      	movs	r2, #21
 800b21e:	2100      	movs	r1, #0
 800b220:	4668      	mov	r0, sp
 800b222:	f008 fef3 	bl	801400c <memset>
	HAL_FLASH_Unlock();
 800b226:	f006 fd4d 	bl	8011cc4 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b22a:	4866      	ldr	r0, [pc, #408]	; (800b3c4 <SaveToRO+0x1b0>)
 800b22c:	f006 fdf8 	bl	8011e20 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b230:	4865      	ldr	r0, [pc, #404]	; (800b3c8 <SaveToRO+0x1b4>)
 800b232:	f006 fd65 	bl	8011d00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b236:	2800      	cmp	r0, #0
 800b238:	d10b      	bne.n	800b252 <SaveToRO+0x3e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b23a:	4a64      	ldr	r2, [pc, #400]	; (800b3cc <SaveToRO+0x1b8>)
 800b23c:	6913      	ldr	r3, [r2, #16]
 800b23e:	2102      	movs	r1, #2
 800b240:	438b      	bics	r3, r1
 800b242:	6113      	str	r3, [r2, #16]
	if (myID)
 800b244:	4b62      	ldr	r3, [pc, #392]	; (800b3d0 <SaveToRO+0x1bc>)
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	2a00      	cmp	r2, #0
 800b24a:	d109      	bne.n	800b260 <SaveToRO+0x4c>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b24c:	2400      	movs	r4, #0
 800b24e:	4e61      	ldr	r6, [pc, #388]	; (800b3d4 <SaveToRO+0x1c0>)
 800b250:	e081      	b.n	800b356 <SaveToRO+0x142>
		return pFlash.ErrorCode;
 800b252:	4b61      	ldr	r3, [pc, #388]	; (800b3d8 <SaveToRO+0x1c4>)
 800b254:	69d8      	ldr	r0, [r3, #28]
 800b256:	b2c0      	uxtb	r0, r0
}
 800b258:	b006      	add	sp, #24
 800b25a:	bc04      	pop	{r2}
 800b25c:	4690      	mov	r8, r2
 800b25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b260:	4b5e      	ldr	r3, [pc, #376]	; (800b3dc <SaveToRO+0x1c8>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	021b      	lsls	r3, r3, #8
 800b266:	18d2      	adds	r2, r2, r3
 800b268:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b26a:	2300      	movs	r3, #0
 800b26c:	4955      	ldr	r1, [pc, #340]	; (800b3c4 <SaveToRO+0x1b0>)
 800b26e:	2001      	movs	r0, #1
 800b270:	f006 fd74 	bl	8011d5c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b274:	4854      	ldr	r0, [pc, #336]	; (800b3c8 <SaveToRO+0x1b4>)
 800b276:	f006 fd43 	bl	8011d00 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d107      	bne.n	800b28e <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b27e:	4a53      	ldr	r2, [pc, #332]	; (800b3cc <SaveToRO+0x1b8>)
 800b280:	6913      	ldr	r3, [r2, #16]
 800b282:	2101      	movs	r1, #1
 800b284:	438b      	bics	r3, r1
 800b286:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b288:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 800b28a:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b28c:	e02e      	b.n	800b2ec <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 800b28e:	4b52      	ldr	r3, [pc, #328]	; (800b3d8 <SaveToRO+0x1c4>)
 800b290:	69d8      	ldr	r0, [r3, #28]
 800b292:	b2c0      	uxtb	r0, r0
 800b294:	e7e0      	b.n	800b258 <SaveToRO+0x44>
						return pFlash.ErrorCode;
 800b296:	4b50      	ldr	r3, [pc, #320]	; (800b3d8 <SaveToRO+0x1c4>)
 800b298:	69d8      	ldr	r0, [r3, #28]
 800b29a:	b2c0      	uxtb	r0, r0
 800b29c:	e7dc      	b.n	800b258 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b29e:	3401      	adds	r4, #1
 800b2a0:	b2e4      	uxtb	r4, r4
 800b2a2:	2c0a      	cmp	r4, #10
 800b2a4:	d820      	bhi.n	800b2e8 <SaveToRO+0xd4>
				if (array[i-1][0]) {
 800b2a6:	1e72      	subs	r2, r6, #1
 800b2a8:	00d3      	lsls	r3, r2, #3
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	0059      	lsls	r1, r3, #1
 800b2ae:	4b4c      	ldr	r3, [pc, #304]	; (800b3e0 <SaveToRO+0x1cc>)
 800b2b0:	5acb      	ldrh	r3, [r1, r3]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0f3      	beq.n	800b29e <SaveToRO+0x8a>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b2b6:	00d3      	lsls	r3, r2, #3
 800b2b8:	1a9a      	subs	r2, r3, r2
 800b2ba:	1912      	adds	r2, r2, r4
 800b2bc:	0052      	lsls	r2, r2, #1
 800b2be:	4b48      	ldr	r3, [pc, #288]	; (800b3e0 <SaveToRO+0x1cc>)
 800b2c0:	5ad2      	ldrh	r2, [r2, r3]
 800b2c2:	4b40      	ldr	r3, [pc, #256]	; (800b3c4 <SaveToRO+0x1b0>)
 800b2c4:	18e9      	adds	r1, r5, r3
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f006 fd47 	bl	8011d5c <HAL_FLASH_Program>
					add += 2;
 800b2ce:	3502      	adds	r5, #2
 800b2d0:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b2d2:	483d      	ldr	r0, [pc, #244]	; (800b3c8 <SaveToRO+0x1b4>)
 800b2d4:	f006 fd14 	bl	8011d00 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d1dc      	bne.n	800b296 <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b2dc:	4a3b      	ldr	r2, [pc, #236]	; (800b3cc <SaveToRO+0x1b8>)
 800b2de:	6913      	ldr	r3, [r2, #16]
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	438b      	bics	r3, r1
 800b2e4:	6113      	str	r3, [r2, #16]
 800b2e6:	e7da      	b.n	800b29e <SaveToRO+0x8a>
		for(uint8_t i=1 ; i<=N ; i++)
 800b2e8:	3601      	adds	r6, #1
 800b2ea:	b2f6      	uxtb	r6, r6
 800b2ec:	4b3b      	ldr	r3, [pc, #236]	; (800b3dc <SaveToRO+0x1c8>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	42b3      	cmp	r3, r6
 800b2f2:	d3ab      	bcc.n	800b24c <SaveToRO+0x38>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b2f4:	2400      	movs	r4, #0
 800b2f6:	e7d4      	b.n	800b2a2 <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800b2f8:	4b37      	ldr	r3, [pc, #220]	; (800b3d8 <SaveToRO+0x1c4>)
 800b2fa:	69d8      	ldr	r0, [r3, #28]
 800b2fc:	b2c0      	uxtb	r0, r0
 800b2fe:	e7ab      	b.n	800b258 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b300:	2500      	movs	r5, #0
 800b302:	00bb      	lsls	r3, r7, #2
 800b304:	19db      	adds	r3, r3, r7
 800b306:	009a      	lsls	r2, r3, #2
 800b308:	4b36      	ldr	r3, [pc, #216]	; (800b3e4 <SaveToRO+0x1d0>)
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	4698      	mov	r8, r3
 800b310:	0018      	movs	r0, r3
 800b312:	f7f4 ff01 	bl	8000118 <strlen>
 800b316:	3001      	adds	r0, #1
 800b318:	0840      	lsrs	r0, r0, #1
 800b31a:	4285      	cmp	r5, r0
 800b31c:	d219      	bcs.n	800b352 <SaveToRO+0x13e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b31e:	006b      	lsls	r3, r5, #1
 800b320:	4642      	mov	r2, r8
 800b322:	5ad2      	ldrh	r2, [r2, r3]
 800b324:	2300      	movs	r3, #0
 800b326:	0031      	movs	r1, r6
 800b328:	2001      	movs	r0, #1
 800b32a:	f006 fd17 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b32e:	4826      	ldr	r0, [pc, #152]	; (800b3c8 <SaveToRO+0x1b4>)
 800b330:	f006 fce6 	bl	8011d00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b334:	2800      	cmp	r0, #0
 800b336:	d108      	bne.n	800b34a <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b338:	4a24      	ldr	r2, [pc, #144]	; (800b3cc <SaveToRO+0x1b8>)
 800b33a:	6913      	ldr	r3, [r2, #16]
 800b33c:	2101      	movs	r1, #1
 800b33e:	438b      	bics	r3, r1
 800b340:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b342:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b344:	3501      	adds	r5, #1
 800b346:	b2ed      	uxtb	r5, r5
 800b348:	e7db      	b.n	800b302 <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800b34a:	4b23      	ldr	r3, [pc, #140]	; (800b3d8 <SaveToRO+0x1c4>)
 800b34c:	69d8      	ldr	r0, [r3, #28]
 800b34e:	b2c0      	uxtb	r0, r0
 800b350:	e782      	b.n	800b258 <SaveToRO+0x44>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b352:	3401      	adds	r4, #1
 800b354:	b2e4      	uxtb	r4, r4
 800b356:	4b24      	ldr	r3, [pc, #144]	; (800b3e8 <SaveToRO+0x1d4>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	d92d      	bls.n	800b3ba <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) 
 800b35e:	0027      	movs	r7, r4
 800b360:	00a3      	lsls	r3, r4, #2
 800b362:	191b      	adds	r3, r3, r4
 800b364:	009a      	lsls	r2, r3, #2
 800b366:	4b1f      	ldr	r3, [pc, #124]	; (800b3e4 <SaveToRO+0x1d0>)
 800b368:	5cd3      	ldrb	r3, [r2, r3]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0f1      	beq.n	800b352 <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b36e:	23fe      	movs	r3, #254	; 0xfe
 800b370:	466a      	mov	r2, sp
 800b372:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b374:	00a3      	lsls	r3, r4, #2
 800b376:	191b      	adds	r3, r3, r4
 800b378:	0099      	lsls	r1, r3, #2
 800b37a:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <SaveToRO+0x1d0>)
 800b37c:	18c9      	adds	r1, r1, r3
 800b37e:	2214      	movs	r2, #20
 800b380:	466b      	mov	r3, sp
 800b382:	1c58      	adds	r0, r3, #1
 800b384:	f008 fe39 	bl	8013ffa <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b388:	2500      	movs	r5, #0
 800b38a:	2d09      	cmp	r5, #9
 800b38c:	d8b8      	bhi.n	800b300 <SaveToRO+0xec>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b38e:	006b      	lsls	r3, r5, #1
 800b390:	466a      	mov	r2, sp
 800b392:	5ad2      	ldrh	r2, [r2, r3]
 800b394:	2300      	movs	r3, #0
 800b396:	0031      	movs	r1, r6
 800b398:	2001      	movs	r0, #1
 800b39a:	f006 fcdf 	bl	8011d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b39e:	480a      	ldr	r0, [pc, #40]	; (800b3c8 <SaveToRO+0x1b4>)
 800b3a0:	f006 fcae 	bl	8011d00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d1a7      	bne.n	800b2f8 <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3a8:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <SaveToRO+0x1b8>)
 800b3aa:	6913      	ldr	r3, [r2, #16]
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	438b      	bics	r3, r1
 800b3b0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b3b2:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	b2ed      	uxtb	r5, r5
 800b3b8:	e7e7      	b.n	800b38a <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800b3ba:	f006 fc97 	bl	8011cec <HAL_FLASH_Lock>
	return result;
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e74a      	b.n	800b258 <SaveToRO+0x44>
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	0801d800 	.word	0x0801d800
 800b3c8:	0000c350 	.word	0x0000c350
 800b3cc:	40022000 	.word	0x40022000
 800b3d0:	20000070 	.word	0x20000070
 800b3d4:	0801dc00 	.word	0x0801dc00
 800b3d8:	20006e50 	.word	0x20006e50
 800b3dc:	2000001c 	.word	0x2000001c
 800b3e0:	200000c4 	.word	0x200000c4
 800b3e4:	200069f0 	.word	0x200069f0
 800b3e8:	20000ea7 	.word	0x20000ea7

0800b3ec <RegisterModuleCLICommands>:
{
 800b3ec:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800b3ee:	4811      	ldr	r0, [pc, #68]	; (800b434 <RegisterModuleCLICommands+0x48>)
 800b3f0:	f003 fe0a 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sampleCommandDefinition );
 800b3f4:	4810      	ldr	r0, [pc, #64]	; (800b438 <RegisterModuleCLICommands+0x4c>)
 800b3f6:	f003 fe07 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &streamCommandDefinition);
 800b3fa:	4810      	ldr	r0, [pc, #64]	; (800b43c <RegisterModuleCLICommands+0x50>)
 800b3fc:	f003 fe04 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &stopCommandDefinition);
 800b400:	480f      	ldr	r0, [pc, #60]	; (800b440 <RegisterModuleCLICommands+0x54>)
 800b402:	f003 fe01 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unitCommandDefinition);
 800b406:	480f      	ldr	r0, [pc, #60]	; (800b444 <RegisterModuleCLICommands+0x58>)
 800b408:	f003 fdfe 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rateCommandDefinition);
 800b40c:	480e      	ldr	r0, [pc, #56]	; (800b448 <RegisterModuleCLICommands+0x5c>)
 800b40e:	f003 fdfb 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &calibrationCommandDefinition);
 800b412:	480e      	ldr	r0, [pc, #56]	; (800b44c <RegisterModuleCLICommands+0x60>)
 800b414:	f003 fdf8 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &zerocalCommandDefinition);
 800b418:	480d      	ldr	r0, [pc, #52]	; (800b450 <RegisterModuleCLICommands+0x64>)
 800b41a:	f003 fdf5 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight1CommandDefinition);
 800b41e:	480d      	ldr	r0, [pc, #52]	; (800b454 <RegisterModuleCLICommands+0x68>)
 800b420:	f003 fdf2 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight2CommandDefinition);
 800b424:	480c      	ldr	r0, [pc, #48]	; (800b458 <RegisterModuleCLICommands+0x6c>)
 800b426:	f003 fdef 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dataformatCommandDefinition);
 800b42a:	480c      	ldr	r0, [pc, #48]	; (800b45c <RegisterModuleCLICommands+0x70>)
 800b42c:	f003 fdec 	bl	800f008 <FreeRTOS_CLIRegisterCommand>
}
 800b430:	bd10      	pop	{r4, pc}
 800b432:	46c0      	nop			; (mov r8, r8)
 800b434:	0801b31c 	.word	0x0801b31c
 800b438:	0801b3b0 	.word	0x0801b3b0
 800b43c:	0801b850 	.word	0x0801b850
 800b440:	0801b3c0 	.word	0x0801b3c0
 800b444:	0801b914 	.word	0x0801b914
 800b448:	0801b3a0 	.word	0x0801b3a0
 800b44c:	0801b2b0 	.word	0x0801b2b0
 800b450:	0801b994 	.word	0x0801b994
 800b454:	0801b924 	.word	0x0801b924
 800b458:	0801b93c 	.word	0x0801b93c
 800b45c:	0801b2c0 	.word	0x0801b2c0

0800b460 <GetPort>:
	if (huart->Instance == USART4)
 800b460:	6803      	ldr	r3, [r0, #0]
 800b462:	4a0d      	ldr	r2, [pc, #52]	; (800b498 <GetPort+0x38>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00f      	beq.n	800b488 <GetPort+0x28>
	else if (huart->Instance == USART2)
 800b468:	4a0c      	ldr	r2, [pc, #48]	; (800b49c <GetPort+0x3c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d00e      	beq.n	800b48c <GetPort+0x2c>
	else if (huart->Instance == USART6)
 800b46e:	4a0c      	ldr	r2, [pc, #48]	; (800b4a0 <GetPort+0x40>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00d      	beq.n	800b490 <GetPort+0x30>
	else if (huart->Instance == USART3)
 800b474:	4a0b      	ldr	r2, [pc, #44]	; (800b4a4 <GetPort+0x44>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00c      	beq.n	800b494 <GetPort+0x34>
	else if (huart->Instance == USART5)
 800b47a:	4a0b      	ldr	r2, [pc, #44]	; (800b4a8 <GetPort+0x48>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d001      	beq.n	800b484 <GetPort+0x24>
	return 0;
 800b480:	2000      	movs	r0, #0
}
 800b482:	4770      	bx	lr
			return P5;
 800b484:	2005      	movs	r0, #5
 800b486:	e7fc      	b.n	800b482 <GetPort+0x22>
			return P1;
 800b488:	2001      	movs	r0, #1
 800b48a:	e7fa      	b.n	800b482 <GetPort+0x22>
			return P2;
 800b48c:	2002      	movs	r0, #2
 800b48e:	e7f8      	b.n	800b482 <GetPort+0x22>
			return P3;
 800b490:	2003      	movs	r0, #3
 800b492:	e7f6      	b.n	800b482 <GetPort+0x22>
			return P4;
 800b494:	2004      	movs	r0, #4
 800b496:	e7f4      	b.n	800b482 <GetPort+0x22>
 800b498:	40004c00 	.word	0x40004c00
 800b49c:	40004400 	.word	0x40004400
 800b4a0:	40011400 	.word	0x40011400
 800b4a4:	40004800 	.word	0x40004800
 800b4a8:	40005000 	.word	0x40005000

0800b4ac <readHX711>:
{
 800b4ac:	b510      	push	{r4, lr}
	while(HAL_GPIO_ReadPin(GPIOA,DOUT) == 1) {
 800b4ae:	2180      	movs	r1, #128	; 0x80
 800b4b0:	2090      	movs	r0, #144	; 0x90
 800b4b2:	00c9      	lsls	r1, r1, #3
 800b4b4:	05c0      	lsls	r0, r0, #23
 800b4b6:	f006 fddf 	bl	8012078 <HAL_GPIO_ReadPin>
 800b4ba:	2801      	cmp	r0, #1
 800b4bc:	d0f7      	beq.n	800b4ae <readHX711+0x2>
	portENTER_CRITICAL();
 800b4be:	f005 fbf9 	bl	8010cb4 <vPortEnterCritical>
	for(j =0; j < pulses; j++) {
 800b4c2:	2400      	movs	r4, #0
 800b4c4:	e00b      	b.n	800b4de <readHX711+0x32>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800b4c6:	2180      	movs	r1, #128	; 0x80
 800b4c8:	2090      	movs	r0, #144	; 0x90
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	0089      	lsls	r1, r1, #2
 800b4ce:	05c0      	lsls	r0, r0, #23
 800b4d0:	f006 fdd9 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_us(1);
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	f003 f9ff 	bl	800e8d8 <StartMicroDelay>
	for(j =0; j < pulses; j++) {
 800b4da:	3401      	adds	r4, #1
 800b4dc:	b2e4      	uxtb	r4, r4
 800b4de:	4b23      	ldr	r3, [pc, #140]	; (800b56c <readHX711+0xc0>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	42a3      	cmp	r3, r4
 800b4e4:	d91f      	bls.n	800b526 <readHX711+0x7a>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800b4e6:	2180      	movs	r1, #128	; 0x80
 800b4e8:	2090      	movs	r0, #144	; 0x90
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	0089      	lsls	r1, r1, #2
 800b4ee:	05c0      	lsls	r0, r0, #23
 800b4f0:	f006 fdc9 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_us(1);
 800b4f4:	2001      	movs	r0, #1
 800b4f6:	f003 f9ef 	bl	800e8d8 <StartMicroDelay>
		if(j < 24) {
 800b4fa:	2c17      	cmp	r4, #23
 800b4fc:	d8e3      	bhi.n	800b4c6 <readHX711+0x1a>
			Current_pin_state =HAL_GPIO_ReadPin(GPIOA,DOUT);
 800b4fe:	2180      	movs	r1, #128	; 0x80
 800b500:	2090      	movs	r0, #144	; 0x90
 800b502:	00c9      	lsls	r1, r1, #3
 800b504:	05c0      	lsls	r0, r0, #23
 800b506:	f006 fdb7 	bl	8012078 <HAL_GPIO_ReadPin>
 800b50a:	1e43      	subs	r3, r0, #1
 800b50c:	4198      	sbcs	r0, r3
 800b50e:	b2c0      	uxtb	r0, r0
 800b510:	4b17      	ldr	r3, [pc, #92]	; (800b570 <readHX711+0xc4>)
 800b512:	7018      	strb	r0, [r3, #0]
			Data |=Current_pin_state;
 800b514:	4b17      	ldr	r3, [pc, #92]	; (800b574 <readHX711+0xc8>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	4310      	orrs	r0, r2
 800b51a:	6018      	str	r0, [r3, #0]
			if(j < 23) Data =Data << 1;
 800b51c:	2c16      	cmp	r4, #22
 800b51e:	d8d2      	bhi.n	800b4c6 <readHX711+0x1a>
 800b520:	0040      	lsls	r0, r0, #1
 800b522:	6018      	str	r0, [r3, #0]
 800b524:	e7cf      	b.n	800b4c6 <readHX711+0x1a>
	value =Data;
 800b526:	4c14      	ldr	r4, [pc, #80]	; (800b578 <readHX711+0xcc>)
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <readHX711+0xc8>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	6022      	str	r2, [r4, #0]
	Data =0;
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
	portEXIT_CRITICAL();
 800b532:	f005 fbcb 	bl	8010ccc <vPortExitCritical>
	if(value > ADC_full_range) {
 800b536:	6820      	ldr	r0, [r4, #0]
 800b538:	4b10      	ldr	r3, [pc, #64]	; (800b57c <readHX711+0xd0>)
 800b53a:	4298      	cmp	r0, r3
 800b53c:	d806      	bhi.n	800b54c <readHX711+0xa0>
		valuef =(float) value;
 800b53e:	f7f6 f813 	bl	8001568 <__aeabi_ui2f>
 800b542:	4b0f      	ldr	r3, [pc, #60]	; (800b580 <readHX711+0xd4>)
 800b544:	6018      	str	r0, [r3, #0]
	return (valuef);		
 800b546:	4b0e      	ldr	r3, [pc, #56]	; (800b580 <readHX711+0xd4>)
 800b548:	6818      	ldr	r0, [r3, #0]
}
 800b54a:	bd10      	pop	{r4, pc}
		value = (~value & 0x00FFFFFF);
 800b54c:	43c0      	mvns	r0, r0
 800b54e:	0200      	lsls	r0, r0, #8
 800b550:	0a00      	lsrs	r0, r0, #8
		value +=1;// the output of the ADC
 800b552:	3001      	adds	r0, #1
 800b554:	4b08      	ldr	r3, [pc, #32]	; (800b578 <readHX711+0xcc>)
 800b556:	6018      	str	r0, [r3, #0]
		valuef =-(float) value;
 800b558:	f7f6 f806 	bl	8001568 <__aeabi_ui2f>
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	061b      	lsls	r3, r3, #24
 800b560:	469c      	mov	ip, r3
 800b562:	4460      	add	r0, ip
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <readHX711+0xd4>)
 800b566:	6018      	str	r0, [r3, #0]
 800b568:	e7ed      	b.n	800b546 <readHX711+0x9a>
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	2000177a 	.word	0x2000177a
 800b570:	20001354 	.word	0x20001354
 800b574:	2000135c 	.word	0x2000135c
 800b578:	2000178c 	.word	0x2000178c
 800b57c:	007fffff 	.word	0x007fffff
 800b580:	20001790 	.word	0x20001790

0800b584 <weightCalculation>:
{
 800b584:	b570      	push	{r4, r5, r6, lr}
	rawvalue = (valuef * 0.5 * AVDD) / (ADC_full_range * gain) + cell_drift - IC_drift - Zero_Drift;//+0.000022;
 800b586:	4b22      	ldr	r3, [pc, #136]	; (800b610 <weightCalculation+0x8c>)
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f7f7 fdcb 	bl	8003124 <__aeabi_f2d>
 800b58e:	2200      	movs	r2, #0
 800b590:	4b20      	ldr	r3, [pc, #128]	; (800b614 <weightCalculation+0x90>)
 800b592:	f7f6 ff4f 	bl	8002434 <__aeabi_dmul>
 800b596:	2200      	movs	r2, #0
 800b598:	4b1f      	ldr	r3, [pc, #124]	; (800b618 <weightCalculation+0x94>)
 800b59a:	f7f6 ff4b 	bl	8002434 <__aeabi_dmul>
 800b59e:	0004      	movs	r4, r0
 800b5a0:	000d      	movs	r5, r1
 800b5a2:	4b1e      	ldr	r3, [pc, #120]	; (800b61c <weightCalculation+0x98>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	05d8      	lsls	r0, r3, #23
 800b5a8:	1ac0      	subs	r0, r0, r3
 800b5aa:	f7f7 fd4f 	bl	800304c <__aeabi_i2d>
 800b5ae:	0002      	movs	r2, r0
 800b5b0:	000b      	movs	r3, r1
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	0029      	movs	r1, r5
 800b5b6:	f7f6 fb33 	bl	8001c20 <__aeabi_ddiv>
 800b5ba:	0004      	movs	r4, r0
 800b5bc:	000d      	movs	r5, r1
 800b5be:	4b18      	ldr	r3, [pc, #96]	; (800b620 <weightCalculation+0x9c>)
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f7f7 fdaf 	bl	8003124 <__aeabi_f2d>
 800b5c6:	0022      	movs	r2, r4
 800b5c8:	002b      	movs	r3, r5
 800b5ca:	f7f6 f80d 	bl	80015e8 <__aeabi_dadd>
 800b5ce:	4a15      	ldr	r2, [pc, #84]	; (800b624 <weightCalculation+0xa0>)
 800b5d0:	4b15      	ldr	r3, [pc, #84]	; (800b628 <weightCalculation+0xa4>)
 800b5d2:	f7f7 f9a1 	bl	8002918 <__aeabi_dsub>
 800b5d6:	0004      	movs	r4, r0
 800b5d8:	000d      	movs	r5, r1
 800b5da:	4b14      	ldr	r3, [pc, #80]	; (800b62c <weightCalculation+0xa8>)
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f7f7 fda1 	bl	8003124 <__aeabi_f2d>
 800b5e2:	0002      	movs	r2, r0
 800b5e4:	000b      	movs	r3, r1
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	0029      	movs	r1, r5
 800b5ea:	f7f7 f995 	bl	8002918 <__aeabi_dsub>
 800b5ee:	f7f7 fdeb 	bl	80031c8 <__aeabi_d2f>
 800b5f2:	1c04      	adds	r4, r0, #0
 800b5f4:	4b0e      	ldr	r3, [pc, #56]	; (800b630 <weightCalculation+0xac>)
 800b5f6:	6018      	str	r0, [r3, #0]
	weight = (rawvalue * full_scale) / calibration_factor;
 800b5f8:	4b0e      	ldr	r3, [pc, #56]	; (800b634 <weightCalculation+0xb0>)
 800b5fa:	8818      	ldrh	r0, [r3, #0]
 800b5fc:	f7f5 ff6a 	bl	80014d4 <__aeabi_i2f>
 800b600:	1c21      	adds	r1, r4, #0
 800b602:	f7f5 fc51 	bl	8000ea8 <__aeabi_fmul>
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <weightCalculation+0xb4>)
 800b608:	6819      	ldr	r1, [r3, #0]
 800b60a:	f7f5 fa75 	bl	8000af8 <__aeabi_fdiv>
}
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	20001790 	.word	0x20001790
 800b614:	3fe00000 	.word	0x3fe00000
 800b618:	40080000 	.word	0x40080000
 800b61c:	200000e4 	.word	0x200000e4
 800b620:	200000e0 	.word	0x200000e0
 800b624:	62317873 	.word	0x62317873
 800b628:	3ee3abd9 	.word	0x3ee3abd9
 800b62c:	2000176c 	.word	0x2000176c
 800b630:	2000177c 	.word	0x2000177c
 800b634:	20001778 	.word	0x20001778
 800b638:	20001770 	.word	0x20001770

0800b63c <SetHX711Rate>:
{
 800b63c:	b510      	push	{r4, lr}
 800b63e:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800b640:	2180      	movs	r1, #128	; 0x80
 800b642:	2090      	movs	r0, #144	; 0x90
 800b644:	2200      	movs	r2, #0
 800b646:	0089      	lsls	r1, r1, #2
 800b648:	05c0      	lsls	r0, r0, #23
 800b64a:	f006 fd1c 	bl	8012086 <HAL_GPIO_WritePin>
	rate=Data_Rate;
 800b64e:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <SetHX711Rate+0x48>)
 800b650:	701c      	strb	r4, [r3, #0]
	switch(rate)
 800b652:	2c0a      	cmp	r4, #10
 800b654:	d008      	beq.n	800b668 <SetHX711Rate+0x2c>
 800b656:	2c50      	cmp	r4, #80	; 0x50
 800b658:	d00d      	beq.n	800b676 <SetHX711Rate+0x3a>
		default: HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET);
 800b65a:	2090      	movs	r0, #144	; 0x90
 800b65c:	2200      	movs	r2, #0
 800b65e:	2140      	movs	r1, #64	; 0x40
 800b660:	05c0      	lsls	r0, r0, #23
 800b662:	f006 fd10 	bl	8012086 <HAL_GPIO_WritePin>
}
 800b666:	e005      	b.n	800b674 <SetHX711Rate+0x38>
		case(10): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET); break;
 800b668:	2090      	movs	r0, #144	; 0x90
 800b66a:	2200      	movs	r2, #0
 800b66c:	2140      	movs	r1, #64	; 0x40
 800b66e:	05c0      	lsls	r0, r0, #23
 800b670:	f006 fd09 	bl	8012086 <HAL_GPIO_WritePin>
}
 800b674:	bd10      	pop	{r4, pc}
		case(80): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_SET); break;
 800b676:	2090      	movs	r0, #144	; 0x90
 800b678:	2201      	movs	r2, #1
 800b67a:	2140      	movs	r1, #64	; 0x40
 800b67c:	05c0      	lsls	r0, r0, #23
 800b67e:	f006 fd02 	bl	8012086 <HAL_GPIO_WritePin>
 800b682:	e7f7      	b.n	800b674 <SetHX711Rate+0x38>
 800b684:	2000177b 	.word	0x2000177b

0800b688 <rateCommand>:
{
 800b688:	b530      	push	{r4, r5, lr}
 800b68a:	b083      	sub	sp, #12
 800b68c:	0004      	movs	r4, r0
 800b68e:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800b694:	2c00      	cmp	r4, #0
 800b696:	d101      	bne.n	800b69c <rateCommand+0x14>
 800b698:	b672      	cpsid	i
 800b69a:	e7fe      	b.n	800b69a <rateCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b69c:	aa01      	add	r2, sp, #4
 800b69e:	2101      	movs	r1, #1
 800b6a0:	f003 fd38 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800b6a4:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "10", 2))
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	4914      	ldr	r1, [pc, #80]	; (800b6fc <rateCommand+0x74>)
 800b6aa:	f008 feed 	bl	8014488 <strncmp>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d00c      	beq.n	800b6cc <rateCommand+0x44>
  else if (!strncmp((const char *)pcParameterString1, "80", 2))
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	4912      	ldr	r1, [pc, #72]	; (800b700 <rateCommand+0x78>)
 800b6b6:	0028      	movs	r0, r5
 800b6b8:	f008 fee6 	bl	8014488 <strncmp>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d014      	beq.n	800b6ea <rateCommand+0x62>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800b6c0:	2213      	movs	r2, #19
 800b6c2:	4910      	ldr	r1, [pc, #64]	; (800b704 <rateCommand+0x7c>)
 800b6c4:	0020      	movs	r0, r4
 800b6c6:	f008 fc98 	bl	8013ffa <memcpy>
 800b6ca:	e007      	b.n	800b6dc <rateCommand+0x54>
    rate = 10;      // 10SPS
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <rateCommand+0x80>)
 800b6ce:	220a      	movs	r2, #10
 800b6d0:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 10\r\n" );
 800b6d2:	3212      	adds	r2, #18
 800b6d4:	490d      	ldr	r1, [pc, #52]	; (800b70c <rateCommand+0x84>)
 800b6d6:	0020      	movs	r0, r4
 800b6d8:	f008 fc8f 	bl	8013ffa <memcpy>
	SetHX711Rate(rate);
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <rateCommand+0x80>)
 800b6de:	7818      	ldrb	r0, [r3, #0]
 800b6e0:	f7ff ffac 	bl	800b63c <SetHX711Rate>
}
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	b003      	add	sp, #12
 800b6e8:	bd30      	pop	{r4, r5, pc}
    rate = 80;      // 80SPS
 800b6ea:	4b07      	ldr	r3, [pc, #28]	; (800b708 <rateCommand+0x80>)
 800b6ec:	2250      	movs	r2, #80	; 0x50
 800b6ee:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 80\r\n" );
 800b6f0:	3a34      	subs	r2, #52	; 0x34
 800b6f2:	4907      	ldr	r1, [pc, #28]	; (800b710 <rateCommand+0x88>)
 800b6f4:	0020      	movs	r0, r4
 800b6f6:	f008 fc80 	bl	8013ffa <memcpy>
 800b6fa:	e7ef      	b.n	800b6dc <rateCommand+0x54>
 800b6fc:	08019dc0 	.word	0x08019dc0
 800b700:	0801b380 	.word	0x0801b380
 800b704:	08019c98 	.word	0x08019c98
 800b708:	2000177b 	.word	0x2000177b
 800b70c:	0801b364 	.word	0x0801b364
 800b710:	0801b384 	.word	0x0801b384

0800b714 <formatModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE formatModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800b714:	b510      	push	{r4, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	0004      	movs	r4, r0
 800b71a:	0010      	movs	r0, r2
	//Module_Status result = H26R0_OK;
  int8_t *pcParameterString1;
  portBASE_TYPE xParameterStringLength1 = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	9301      	str	r3, [sp, #4]

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b720:	2c00      	cmp	r4, #0
 800b722:	d101      	bne.n	800b728 <formatModParamCommand+0x14>
 800b724:	b672      	cpsid	i
 800b726:	e7fe      	b.n	800b726 <formatModParamCommand+0x12>

  /* 1st parameter for naming of uart port: P1 to P6 */
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b728:	aa01      	add	r2, sp, #4
 800b72a:	2101      	movs	r1, #1
 800b72c:	f003 fcf2 	bl	800f114 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "u", 1))
 800b730:	7803      	ldrb	r3, [r0, #0]
 800b732:	2b75      	cmp	r3, #117	; 0x75
 800b734:	d00d      	beq.n	800b752 <formatModParamCommand+0x3e>
  {
    H26R0_DATA_FORMAT = FMT_UINT32;      
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
  }
  else if (!strncmp((const char *)pcParameterString1, "f", 1))
 800b736:	2b66      	cmp	r3, #102	; 0x66
 800b738:	d014      	beq.n	800b764 <formatModParamCommand+0x50>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
  }
	else
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800b73a:	2213      	movs	r2, #19
 800b73c:	490e      	ldr	r1, [pc, #56]	; (800b778 <formatModParamCommand+0x64>)
 800b73e:	0020      	movs	r0, r4
 800b740:	f008 fc5b 	bl	8013ffa <memcpy>
	}
	SetHX711Rate(rate);
 800b744:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <formatModParamCommand+0x68>)
 800b746:	7818      	ldrb	r0, [r3, #0]
 800b748:	f7ff ff78 	bl	800b63c <SetHX711Rate>
	return pdFALSE;	
}
 800b74c:	2000      	movs	r0, #0
 800b74e:	b002      	add	sp, #8
 800b750:	bd10      	pop	{r4, pc}
    H26R0_DATA_FORMAT = FMT_UINT32;      
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <formatModParamCommand+0x6c>)
 800b754:	2205      	movs	r2, #5
 800b756:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
 800b758:	3214      	adds	r2, #20
 800b75a:	490a      	ldr	r1, [pc, #40]	; (800b784 <formatModParamCommand+0x70>)
 800b75c:	0020      	movs	r0, r4
 800b75e:	f008 fc4c 	bl	8013ffa <memcpy>
 800b762:	e7ef      	b.n	800b744 <formatModParamCommand+0x30>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <formatModParamCommand+0x6c>)
 800b766:	2207      	movs	r2, #7
 800b768:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
 800b76a:	3213      	adds	r2, #19
 800b76c:	4906      	ldr	r1, [pc, #24]	; (800b788 <formatModParamCommand+0x74>)
 800b76e:	0020      	movs	r0, r4
 800b770:	f008 fc43 	bl	8013ffa <memcpy>
 800b774:	e7e6      	b.n	800b744 <formatModParamCommand+0x30>
 800b776:	46c0      	nop			; (mov r8, r8)
 800b778:	08019c98 	.word	0x08019c98
 800b77c:	2000177b 	.word	0x2000177b
 800b780:	200000c0 	.word	0x200000c0
 800b784:	0801b32c 	.word	0x0801b32c
 800b788:	0801b348 	.word	0x0801b348

0800b78c <SetHX711Gain>:
	switch(ch)
 800b78c:	2801      	cmp	r0, #1
 800b78e:	d005      	beq.n	800b79c <SetHX711Gain+0x10>
 800b790:	2802      	cmp	r0, #2
 800b792:	d00a      	beq.n	800b7aa <SetHX711Gain+0x1e>
		default: pulses=25;
 800b794:	4b08      	ldr	r3, [pc, #32]	; (800b7b8 <SetHX711Gain+0x2c>)
 800b796:	2219      	movs	r2, #25
 800b798:	701a      	strb	r2, [r3, #0]
}
 800b79a:	e005      	b.n	800b7a8 <SetHX711Gain+0x1c>
		case(1): pulses=25;	gain=128; break;  //Chanel A, Gain factor 128
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <SetHX711Gain+0x2c>)
 800b79e:	2219      	movs	r2, #25
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <SetHX711Gain+0x30>)
 800b7a4:	3267      	adds	r2, #103	; 0x67
 800b7a6:	701a      	strb	r2, [r3, #0]
}
 800b7a8:	4770      	bx	lr
		case(2): pulses=27; gain=32;  break;  //Chanel B, Gain factor 32
 800b7aa:	4b03      	ldr	r3, [pc, #12]	; (800b7b8 <SetHX711Gain+0x2c>)
 800b7ac:	221b      	movs	r2, #27
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	4b02      	ldr	r3, [pc, #8]	; (800b7bc <SetHX711Gain+0x30>)
 800b7b2:	3205      	adds	r2, #5
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e7f7      	b.n	800b7a8 <SetHX711Gain+0x1c>
 800b7b8:	2000177a 	.word	0x2000177a
 800b7bc:	200000e4 	.word	0x200000e4

0800b7c0 <Calibration>:
{
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	0004      	movs	r4, r0
 800b7c4:	1c0f      	adds	r7, r1, #0
	cell_output=Cell_Output;
 800b7c6:	4d1b      	ldr	r5, [pc, #108]	; (800b834 <Calibration+0x74>)
 800b7c8:	6029      	str	r1, [r5, #0]
	full_scale=Full_Scale;
 800b7ca:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <Calibration+0x78>)
 800b7cc:	8018      	strh	r0, [r3, #0]
	cell_drift=Cell_Drift/1000.0f;
 800b7ce:	491b      	ldr	r1, [pc, #108]	; (800b83c <Calibration+0x7c>)
 800b7d0:	1c10      	adds	r0, r2, #0
 800b7d2:	f7f5 f991 	bl	8000af8 <__aeabi_fdiv>
 800b7d6:	4e1a      	ldr	r6, [pc, #104]	; (800b840 <Calibration+0x80>)
 800b7d8:	6030      	str	r0, [r6, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800b7da:	491a      	ldr	r1, [pc, #104]	; (800b844 <Calibration+0x84>)
 800b7dc:	1c38      	adds	r0, r7, #0
 800b7de:	f7f5 fb63 	bl	8000ea8 <__aeabi_fmul>
 800b7e2:	4916      	ldr	r1, [pc, #88]	; (800b83c <Calibration+0x7c>)
 800b7e4:	f7f5 f988 	bl	8000af8 <__aeabi_fdiv>
 800b7e8:	4b17      	ldr	r3, [pc, #92]	; (800b848 <Calibration+0x88>)
 800b7ea:	6018      	str	r0, [r3, #0]
	EE_WriteVariable(_EE_cell_full_scale, full_scale);
 800b7ec:	20fa      	movs	r0, #250	; 0xfa
 800b7ee:	0021      	movs	r1, r4
 800b7f0:	0040      	lsls	r0, r0, #1
 800b7f2:	f7fc f933 	bl	8007a5c <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_drift;
 800b7f6:	8831      	ldrh	r1, [r6, #0]
 800b7f8:	4f14      	ldr	r7, [pc, #80]	; (800b84c <Calibration+0x8c>)
 800b7fa:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_drift)+1);
 800b7fc:	4c14      	ldr	r4, [pc, #80]	; (800b850 <Calibration+0x90>)
 800b7fe:	8873      	ldrh	r3, [r6, #2]
 800b800:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_drift_LSB, word_LSB);
 800b802:	20f6      	movs	r0, #246	; 0xf6
 800b804:	30ff      	adds	r0, #255	; 0xff
 800b806:	f7fc f929 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_drift_MSB, word_MSB);
 800b80a:	8821      	ldrh	r1, [r4, #0]
 800b80c:	20fb      	movs	r0, #251	; 0xfb
 800b80e:	0040      	lsls	r0, r0, #1
 800b810:	f7fc f924 	bl	8007a5c <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_output;
 800b814:	8829      	ldrh	r1, [r5, #0]
 800b816:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_output)+1);
 800b818:	886b      	ldrh	r3, [r5, #2]
 800b81a:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_output_LSB, word_LSB);
 800b81c:	20f8      	movs	r0, #248	; 0xf8
 800b81e:	30ff      	adds	r0, #255	; 0xff
 800b820:	f7fc f91c 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_output_MSB, word_MSB);
 800b824:	8821      	ldrh	r1, [r4, #0]
 800b826:	20fc      	movs	r0, #252	; 0xfc
 800b828:	0040      	lsls	r0, r0, #1
 800b82a:	f7fc f917 	bl	8007a5c <EE_WriteVariable>
}
 800b82e:	2000      	movs	r0, #0
 800b830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b832:	46c0      	nop			; (mov r8, r8)
 800b834:	20001774 	.word	0x20001774
 800b838:	20001778 	.word	0x20001778
 800b83c:	447a0000 	.word	0x447a0000
 800b840:	200000e0 	.word	0x200000e0
 800b844:	40400000 	.word	0x40400000
 800b848:	20001770 	.word	0x20001770
 800b84c:	200017a4 	.word	0x200017a4
 800b850:	200017a6 	.word	0x200017a6

0800b854 <calibrationCommand>:
{
 800b854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b856:	b087      	sub	sp, #28
 800b858:	9001      	str	r0, [sp, #4]
 800b85a:	0017      	movs	r7, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength2 = 0;
 800b860:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength3 = 0;
 800b862:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800b864:	2800      	cmp	r0, #0
 800b866:	d101      	bne.n	800b86c <calibrationCommand+0x18>
 800b868:	b672      	cpsid	i
 800b86a:	e7fe      	b.n	800b86a <calibrationCommand+0x16>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b86c:	aa05      	add	r2, sp, #20
 800b86e:	2101      	movs	r1, #1
 800b870:	0038      	movs	r0, r7
 800b872:	f003 fc4f 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800b876:	0004      	movs	r4, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800b878:	aa04      	add	r2, sp, #16
 800b87a:	2102      	movs	r1, #2
 800b87c:	0038      	movs	r0, r7
 800b87e:	f003 fc49 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800b882:	0006      	movs	r6, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800b884:	aa03      	add	r2, sp, #12
 800b886:	2103      	movs	r1, #3
 800b888:	0038      	movs	r0, r7
 800b88a:	f003 fc43 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800b88e:	0007      	movs	r7, r0
  if (NULL != pcParameterString1)
 800b890:	2c00      	cmp	r4, #0
 800b892:	d023      	beq.n	800b8dc <calibrationCommand+0x88>
    load_cell_scale = atoi( (char *)pcParameterString1);
 800b894:	0020      	movs	r0, r4
 800b896:	f008 f920 	bl	8013ada <atoi>
 800b89a:	b284      	uxth	r4, r0
	Module_Status result = H26R0_OK;
 800b89c:	2500      	movs	r5, #0
	if (NULL != pcParameterString2)
 800b89e:	2e00      	cmp	r6, #0
 800b8a0:	d01f      	beq.n	800b8e2 <calibrationCommand+0x8e>
    load_cell_output = atof( (char *)pcParameterString2);
 800b8a2:	0030      	movs	r0, r6
 800b8a4:	f008 f914 	bl	8013ad0 <atof>
 800b8a8:	f7f7 fc8e 	bl	80031c8 <__aeabi_d2f>
 800b8ac:	1c06      	adds	r6, r0, #0
  if (NULL != pcParameterString3)
 800b8ae:	2f00      	cmp	r7, #0
 800b8b0:	d01a      	beq.n	800b8e8 <calibrationCommand+0x94>
      load_cell_drift = atof( (char *)pcParameterString3);
 800b8b2:	0038      	movs	r0, r7
 800b8b4:	f008 f90c 	bl	8013ad0 <atof>
 800b8b8:	f7f7 fc86 	bl	80031c8 <__aeabi_d2f>
 800b8bc:	1c07      	adds	r7, r0, #0
  if (H26R0_ERR_WrongParams == result)
 800b8be:	2d02      	cmp	r5, #2
 800b8c0:	d013      	beq.n	800b8ea <calibrationCommand+0x96>
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800b8c2:	2228      	movs	r2, #40	; 0x28
 800b8c4:	490c      	ldr	r1, [pc, #48]	; (800b8f8 <calibrationCommand+0xa4>)
 800b8c6:	9801      	ldr	r0, [sp, #4]
 800b8c8:	f008 fb97 	bl	8013ffa <memcpy>
	Calibration(load_cell_scale, load_cell_output, load_cell_drift);
 800b8cc:	1c3a      	adds	r2, r7, #0
 800b8ce:	1c31      	adds	r1, r6, #0
 800b8d0:	0020      	movs	r0, r4
 800b8d2:	f7ff ff75 	bl	800b7c0 <Calibration>
}
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	b007      	add	sp, #28
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t load_cell_scale=0;
 800b8dc:	2400      	movs	r4, #0
    result = H26R0_ERR_WrongParams;
 800b8de:	2502      	movs	r5, #2
 800b8e0:	e7dd      	b.n	800b89e <calibrationCommand+0x4a>
	float load_cell_output=0.0f;
 800b8e2:	2600      	movs	r6, #0
    result = H26R0_ERR_WrongParams;
 800b8e4:	2502      	movs	r5, #2
 800b8e6:	e7e2      	b.n	800b8ae <calibrationCommand+0x5a>
	float load_cell_drift=0.0f;
 800b8e8:	2700      	movs	r7, #0
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800b8ea:	2213      	movs	r2, #19
 800b8ec:	4903      	ldr	r1, [pc, #12]	; (800b8fc <calibrationCommand+0xa8>)
 800b8ee:	9801      	ldr	r0, [sp, #4]
 800b8f0:	f008 fb83 	bl	8013ffa <memcpy>
 800b8f4:	e7e5      	b.n	800b8c2 <calibrationCommand+0x6e>
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	0801b288 	.word	0x0801b288
 800b8fc:	08019c98 	.word	0x08019c98

0800b900 <StreamGramToPort>:
{
 800b900:	b530      	push	{r4, r5, lr}
 800b902:	b083      	sub	sp, #12
 800b904:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800b906:	4d1b      	ldr	r5, [pc, #108]	; (800b974 <StreamGramToPort+0x74>)
 800b908:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800b90a:	481b      	ldr	r0, [pc, #108]	; (800b978 <StreamGramToPort+0x78>)
 800b90c:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800b90e:	491b      	ldr	r1, [pc, #108]	; (800b97c <StreamGramToPort+0x7c>)
 800b910:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800b912:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <StreamGramToPort+0x80>)
 800b914:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800b916:	4b1b      	ldr	r3, [pc, #108]	; (800b984 <StreamGramToPort+0x84>)
 800b918:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <StreamGramToPort+0x88>)
 800b91c:	2202      	movs	r2, #2
 800b91e:	701a      	strb	r2, [r3, #0]
	unit=Gram;
 800b920:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <StreamGramToPort+0x8c>)
 800b922:	3a01      	subs	r2, #1
 800b924:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800b926:	1e63      	subs	r3, r4, #1
 800b928:	3303      	adds	r3, #3
 800b92a:	d902      	bls.n	800b932 <StreamGramToPort+0x32>
}	
 800b92c:	2000      	movs	r0, #0
 800b92e:	b003      	add	sp, #12
 800b930:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800b932:	0163      	lsls	r3, r4, #5
 800b934:	1b1b      	subs	r3, r3, r4
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	191c      	adds	r4, r3, r4
 800b93a:	00e0      	lsls	r0, r4, #3
 800b93c:	21fa      	movs	r1, #250	; 0xfa
 800b93e:	0089      	lsls	r1, r1, #2
 800b940:	f7f4 fc06 	bl	8000150 <__udivsi3>
 800b944:	0001      	movs	r1, r0
 800b946:	4b12      	ldr	r3, [pc, #72]	; (800b990 <StreamGramToPort+0x90>)
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	23ff      	movs	r3, #255	; 0xff
 800b94c:	2200      	movs	r2, #0
 800b94e:	4811      	ldr	r0, [pc, #68]	; (800b994 <StreamGramToPort+0x94>)
 800b950:	f004 ffe0 	bl	8010914 <xTimerCreate>
 800b954:	0004      	movs	r4, r0
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <StreamGramToPort+0x98>)
 800b958:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800b95a:	f004 fa6d 	bl	800fe38 <xTaskGetTickCount>
 800b95e:	0002      	movs	r2, r0
 800b960:	2301      	movs	r3, #1
 800b962:	425b      	negs	r3, r3
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	2101      	movs	r1, #1
 800b96a:	0020      	movs	r0, r4
 800b96c:	f004 fff6 	bl	801095c <xTimerGenericCommand>
 800b970:	e7dc      	b.n	800b92c <StreamGramToPort+0x2c>
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	20006b04 	.word	0x20006b04
 800b978:	20006b06 	.word	0x20006b06
 800b97c:	20006d44 	.word	0x20006d44
 800b980:	20006cd0 	.word	0x20006cd0
 800b984:	20006d48 	.word	0x20006d48
 800b988:	20006b05 	.word	0x20006b05
 800b98c:	2000010c 	.word	0x2000010c
 800b990:	0800b04d 	.word	0x0800b04d
 800b994:	0801b260 	.word	0x0801b260
 800b998:	200017a8 	.word	0x200017a8

0800b99c <StreamKGramToPort>:
{
 800b99c:	b530      	push	{r4, r5, lr}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800b9a2:	4d1a      	ldr	r5, [pc, #104]	; (800ba0c <StreamKGramToPort+0x70>)
 800b9a4:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800b9a6:	481a      	ldr	r0, [pc, #104]	; (800ba10 <StreamKGramToPort+0x74>)
 800b9a8:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800b9aa:	491a      	ldr	r1, [pc, #104]	; (800ba14 <StreamKGramToPort+0x78>)
 800b9ac:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800b9ae:	4a1a      	ldr	r2, [pc, #104]	; (800ba18 <StreamKGramToPort+0x7c>)
 800b9b0:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <StreamKGramToPort+0x80>)
 800b9b4:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	4a19      	ldr	r2, [pc, #100]	; (800ba20 <StreamKGramToPort+0x84>)
 800b9ba:	7013      	strb	r3, [r2, #0]
	unit=KGram;
 800b9bc:	4a19      	ldr	r2, [pc, #100]	; (800ba24 <StreamKGramToPort+0x88>)
 800b9be:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800b9c0:	1e63      	subs	r3, r4, #1
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	d902      	bls.n	800b9cc <StreamKGramToPort+0x30>
}
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	b003      	add	sp, #12
 800b9ca:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800b9cc:	0163      	lsls	r3, r4, #5
 800b9ce:	1b1b      	subs	r3, r3, r4
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	191c      	adds	r4, r3, r4
 800b9d4:	00e0      	lsls	r0, r4, #3
 800b9d6:	21fa      	movs	r1, #250	; 0xfa
 800b9d8:	0089      	lsls	r1, r1, #2
 800b9da:	f7f4 fbb9 	bl	8000150 <__udivsi3>
 800b9de:	0001      	movs	r1, r0
 800b9e0:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <StreamKGramToPort+0x8c>)
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	23ff      	movs	r3, #255	; 0xff
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	4810      	ldr	r0, [pc, #64]	; (800ba2c <StreamKGramToPort+0x90>)
 800b9ea:	f004 ff93 	bl	8010914 <xTimerCreate>
 800b9ee:	0004      	movs	r4, r0
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <StreamKGramToPort+0x94>)
 800b9f2:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800b9f4:	f004 fa20 	bl	800fe38 <xTaskGetTickCount>
 800b9f8:	0002      	movs	r2, r0
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	425b      	negs	r3, r3
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2300      	movs	r3, #0
 800ba02:	2101      	movs	r1, #1
 800ba04:	0020      	movs	r0, r4
 800ba06:	f004 ffa9 	bl	801095c <xTimerGenericCommand>
 800ba0a:	e7dc      	b.n	800b9c6 <StreamKGramToPort+0x2a>
 800ba0c:	20006b04 	.word	0x20006b04
 800ba10:	20006b06 	.word	0x20006b06
 800ba14:	20006d44 	.word	0x20006d44
 800ba18:	20006cd0 	.word	0x20006cd0
 800ba1c:	20006d48 	.word	0x20006d48
 800ba20:	20006b05 	.word	0x20006b05
 800ba24:	2000010c 	.word	0x2000010c
 800ba28:	0800b04d 	.word	0x0800b04d
 800ba2c:	0801b274 	.word	0x0801b274
 800ba30:	200017a8 	.word	0x200017a8

0800ba34 <StreamOunceToPort>:
{
 800ba34:	b530      	push	{r4, r5, lr}
 800ba36:	b083      	sub	sp, #12
 800ba38:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800ba3a:	4d1b      	ldr	r5, [pc, #108]	; (800baa8 <StreamOunceToPort+0x74>)
 800ba3c:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800ba3e:	481b      	ldr	r0, [pc, #108]	; (800baac <StreamOunceToPort+0x78>)
 800ba40:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800ba42:	491b      	ldr	r1, [pc, #108]	; (800bab0 <StreamOunceToPort+0x7c>)
 800ba44:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800ba46:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <StreamOunceToPort+0x80>)
 800ba48:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <StreamOunceToPort+0x84>)
 800ba4c:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <StreamOunceToPort+0x88>)
 800ba50:	2202      	movs	r2, #2
 800ba52:	701a      	strb	r2, [r3, #0]
	unit=Ounce;
 800ba54:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <StreamOunceToPort+0x8c>)
 800ba56:	3201      	adds	r2, #1
 800ba58:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800ba5a:	1e63      	subs	r3, r4, #1
 800ba5c:	3303      	adds	r3, #3
 800ba5e:	d902      	bls.n	800ba66 <StreamOunceToPort+0x32>
}
 800ba60:	2000      	movs	r0, #0
 800ba62:	b003      	add	sp, #12
 800ba64:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800ba66:	0163      	lsls	r3, r4, #5
 800ba68:	1b1b      	subs	r3, r3, r4
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	191c      	adds	r4, r3, r4
 800ba6e:	00e0      	lsls	r0, r4, #3
 800ba70:	21fa      	movs	r1, #250	; 0xfa
 800ba72:	0089      	lsls	r1, r1, #2
 800ba74:	f7f4 fb6c 	bl	8000150 <__udivsi3>
 800ba78:	0001      	movs	r1, r0
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <StreamOunceToPort+0x90>)
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	23ff      	movs	r3, #255	; 0xff
 800ba80:	2200      	movs	r2, #0
 800ba82:	4811      	ldr	r0, [pc, #68]	; (800bac8 <StreamOunceToPort+0x94>)
 800ba84:	f004 ff46 	bl	8010914 <xTimerCreate>
 800ba88:	0004      	movs	r4, r0
 800ba8a:	4b10      	ldr	r3, [pc, #64]	; (800bacc <StreamOunceToPort+0x98>)
 800ba8c:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800ba8e:	f004 f9d3 	bl	800fe38 <xTaskGetTickCount>
 800ba92:	0002      	movs	r2, r0
 800ba94:	2301      	movs	r3, #1
 800ba96:	425b      	negs	r3, r3
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	0020      	movs	r0, r4
 800baa0:	f004 ff5c 	bl	801095c <xTimerGenericCommand>
 800baa4:	e7dc      	b.n	800ba60 <StreamOunceToPort+0x2c>
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	20006b04 	.word	0x20006b04
 800baac:	20006b06 	.word	0x20006b06
 800bab0:	20006d44 	.word	0x20006d44
 800bab4:	20006cd0 	.word	0x20006cd0
 800bab8:	20006d48 	.word	0x20006d48
 800babc:	20006b05 	.word	0x20006b05
 800bac0:	2000010c 	.word	0x2000010c
 800bac4:	0800b04d 	.word	0x0800b04d
 800bac8:	0801b274 	.word	0x0801b274
 800bacc:	200017a8 	.word	0x200017a8

0800bad0 <StreamPoundToPort>:
{
 800bad0:	b530      	push	{r4, r5, lr}
 800bad2:	b083      	sub	sp, #12
 800bad4:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800bad6:	4d1b      	ldr	r5, [pc, #108]	; (800bb44 <StreamPoundToPort+0x74>)
 800bad8:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800bada:	481b      	ldr	r0, [pc, #108]	; (800bb48 <StreamPoundToPort+0x78>)
 800badc:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800bade:	491b      	ldr	r1, [pc, #108]	; (800bb4c <StreamPoundToPort+0x7c>)
 800bae0:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800bae2:	4a1b      	ldr	r2, [pc, #108]	; (800bb50 <StreamPoundToPort+0x80>)
 800bae4:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800bae6:	4b1b      	ldr	r3, [pc, #108]	; (800bb54 <StreamPoundToPort+0x84>)
 800bae8:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <StreamPoundToPort+0x88>)
 800baec:	2202      	movs	r2, #2
 800baee:	701a      	strb	r2, [r3, #0]
	unit=Pound;
 800baf0:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <StreamPoundToPort+0x8c>)
 800baf2:	3202      	adds	r2, #2
 800baf4:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800baf6:	1e63      	subs	r3, r4, #1
 800baf8:	3303      	adds	r3, #3
 800bafa:	d902      	bls.n	800bb02 <StreamPoundToPort+0x32>
}
 800bafc:	2000      	movs	r0, #0
 800bafe:	b003      	add	sp, #12
 800bb00:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bb02:	0163      	lsls	r3, r4, #5
 800bb04:	1b1b      	subs	r3, r3, r4
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	191c      	adds	r4, r3, r4
 800bb0a:	00e0      	lsls	r0, r4, #3
 800bb0c:	21fa      	movs	r1, #250	; 0xfa
 800bb0e:	0089      	lsls	r1, r1, #2
 800bb10:	f7f4 fb1e 	bl	8000150 <__udivsi3>
 800bb14:	0001      	movs	r1, r0
 800bb16:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <StreamPoundToPort+0x90>)
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	23ff      	movs	r3, #255	; 0xff
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4811      	ldr	r0, [pc, #68]	; (800bb64 <StreamPoundToPort+0x94>)
 800bb20:	f004 fef8 	bl	8010914 <xTimerCreate>
 800bb24:	0004      	movs	r4, r0
 800bb26:	4b10      	ldr	r3, [pc, #64]	; (800bb68 <StreamPoundToPort+0x98>)
 800bb28:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bb2a:	f004 f985 	bl	800fe38 <xTaskGetTickCount>
 800bb2e:	0002      	movs	r2, r0
 800bb30:	2301      	movs	r3, #1
 800bb32:	425b      	negs	r3, r3
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	2300      	movs	r3, #0
 800bb38:	2101      	movs	r1, #1
 800bb3a:	0020      	movs	r0, r4
 800bb3c:	f004 ff0e 	bl	801095c <xTimerGenericCommand>
 800bb40:	e7dc      	b.n	800bafc <StreamPoundToPort+0x2c>
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	20006b04 	.word	0x20006b04
 800bb48:	20006b06 	.word	0x20006b06
 800bb4c:	20006d44 	.word	0x20006d44
 800bb50:	20006cd0 	.word	0x20006cd0
 800bb54:	20006d48 	.word	0x20006d48
 800bb58:	20006b05 	.word	0x20006b05
 800bb5c:	2000010c 	.word	0x2000010c
 800bb60:	0800b04d 	.word	0x0800b04d
 800bb64:	0801b274 	.word	0x0801b274
 800bb68:	200017a8 	.word	0x200017a8

0800bb6c <StreamKGramToCLI>:
{
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	b082      	sub	sp, #8
	global_ch=Ch;
 800bb70:	4b1a      	ldr	r3, [pc, #104]	; (800bbdc <StreamKGramToCLI+0x70>)
 800bb72:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800bb74:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <StreamKGramToCLI+0x74>)
 800bb76:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800bb78:	4b1a      	ldr	r3, [pc, #104]	; (800bbe4 <StreamKGramToCLI+0x78>)
 800bb7a:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800bb7c:	4b1a      	ldr	r3, [pc, #104]	; (800bbe8 <StreamKGramToCLI+0x7c>)
 800bb7e:	2101      	movs	r1, #1
 800bb80:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bb82:	1e53      	subs	r3, r2, #1
 800bb84:	3303      	adds	r3, #3
 800bb86:	d909      	bls.n	800bb9c <StreamKGramToCLI+0x30>
	if (global_timeout > 0)
 800bb88:	4b16      	ldr	r3, [pc, #88]	; (800bbe4 <StreamKGramToCLI+0x78>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <StreamKGramToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800bb90:	4b16      	ldr	r3, [pc, #88]	; (800bbec <StreamKGramToCLI+0x80>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	701a      	strb	r2, [r3, #0]
}
 800bb96:	2000      	movs	r0, #0
 800bb98:	b002      	add	sp, #8
 800bb9a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bb9c:	0153      	lsls	r3, r2, #5
 800bb9e:	1a9b      	subs	r3, r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	189a      	adds	r2, r3, r2
 800bba4:	00d0      	lsls	r0, r2, #3
 800bba6:	21fa      	movs	r1, #250	; 0xfa
 800bba8:	0089      	lsls	r1, r1, #2
 800bbaa:	f7f4 fad1 	bl	8000150 <__udivsi3>
 800bbae:	0001      	movs	r1, r0
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <StreamKGramToCLI+0x84>)
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	23ff      	movs	r3, #255	; 0xff
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	480e      	ldr	r0, [pc, #56]	; (800bbf4 <StreamKGramToCLI+0x88>)
 800bbba:	f004 feab 	bl	8010914 <xTimerCreate>
 800bbbe:	0004      	movs	r4, r0
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <StreamKGramToCLI+0x8c>)
 800bbc2:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bbc4:	f004 f938 	bl	800fe38 <xTaskGetTickCount>
 800bbc8:	0002      	movs	r2, r0
 800bbca:	2301      	movs	r3, #1
 800bbcc:	425b      	negs	r3, r3
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	0020      	movs	r0, r4
 800bbd6:	f004 fec1 	bl	801095c <xTimerGenericCommand>
 800bbda:	e7d5      	b.n	800bb88 <StreamKGramToCLI+0x1c>
 800bbdc:	20006b04 	.word	0x20006b04
 800bbe0:	20006cd0 	.word	0x20006cd0
 800bbe4:	20006d48 	.word	0x20006d48
 800bbe8:	20006b05 	.word	0x20006b05
 800bbec:	20001780 	.word	0x20001780
 800bbf0:	0800b04d 	.word	0x0800b04d
 800bbf4:	0801b274 	.word	0x0801b274
 800bbf8:	200017a8 	.word	0x200017a8

0800bbfc <demoCommand>:
{
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	0004      	movs	r4, r0
 800bc02:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800bc08:	2c00      	cmp	r4, #0
 800bc0a:	d101      	bne.n	800bc10 <demoCommand+0x14>
 800bc0c:	b672      	cpsid	i
 800bc0e:	e7fe      	b.n	800bc0e <demoCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bc10:	aa03      	add	r2, sp, #12
 800bc12:	2101      	movs	r1, #1
 800bc14:	f003 fa7e 	bl	800f114 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d01b      	beq.n	800bc54 <demoCommand+0x58>
    channel = atoi( (char *)pcParameterString1);
 800bc1c:	f007 ff5d 	bl	8013ada <atoi>
 800bc20:	b2c5      	uxtb	r5, r0
	Module_Status result = H26R0_OK;
 800bc22:	2600      	movs	r6, #0
		if (channel == 1 || channel == 2)
 800bc24:	1e6b      	subs	r3, r5, #1
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d916      	bls.n	800bc5a <demoCommand+0x5e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	d101      	bne.n	800bc34 <demoCommand+0x38>
 800bc30:	2d01      	cmp	r5, #1
 800bc32:	d032      	beq.n	800bc9a <demoCommand+0x9e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800bc34:	2212      	movs	r2, #18
 800bc36:	491a      	ldr	r1, [pc, #104]	; (800bca0 <demoCommand+0xa4>)
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f008 f9de 	bl	8013ffa <memcpy>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800bc3e:	0020      	movs	r0, r4
 800bc40:	f7f4 fa6a 	bl	8000118 <strlen>
 800bc44:	0002      	movs	r2, r0
 800bc46:	2100      	movs	r1, #0
 800bc48:	0020      	movs	r0, r4
 800bc4a:	f008 f9df 	bl	801400c <memset>
}
 800bc4e:	2000      	movs	r0, #0
 800bc50:	b004      	add	sp, #16
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800bc54:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800bc56:	2500      	movs	r5, #0
 800bc58:	e7e4      	b.n	800bc24 <demoCommand+0x28>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800bc5a:	2237      	movs	r2, #55	; 0x37
 800bc5c:	4911      	ldr	r1, [pc, #68]	; (800bca4 <demoCommand+0xa8>)
 800bc5e:	0020      	movs	r0, r4
 800bc60:	f008 f9cb 	bl	8013ffa <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bc64:	0020      	movs	r0, r4
 800bc66:	f7f4 fa57 	bl	8000118 <strlen>
 800bc6a:	b282      	uxth	r2, r0
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <demoCommand+0xac>)
 800bc6e:	7818      	ldrb	r0, [r3, #0]
 800bc70:	2301      	movs	r3, #1
 800bc72:	425b      	negs	r3, r3
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	3333      	adds	r3, #51	; 0x33
 800bc78:	0021      	movs	r1, r4
 800bc7a:	f002 fff1 	bl	800ec60 <writePxMutex>
		StreamKGramToCLI(channel, 500, 10000);
 800bc7e:	21fa      	movs	r1, #250	; 0xfa
 800bc80:	4a0a      	ldr	r2, [pc, #40]	; (800bcac <demoCommand+0xb0>)
 800bc82:	0049      	lsls	r1, r1, #1
 800bc84:	0028      	movs	r0, r5
 800bc86:	f7ff ff71 	bl	800bb6c <StreamKGramToCLI>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){ Delay_ms(1); };
 800bc8a:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <demoCommand+0xb4>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0cc      	beq.n	800bc2c <demoCommand+0x30>
 800bc92:	2001      	movs	r0, #1
 800bc94:	f005 f994 	bl	8010fc0 <HAL_Delay>
 800bc98:	e7f7      	b.n	800bc8a <demoCommand+0x8e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800bc9a:	2d02      	cmp	r5, #2
 800bc9c:	d1ca      	bne.n	800bc34 <demoCommand+0x38>
 800bc9e:	e7ce      	b.n	800bc3e <demoCommand+0x42>
 800bca0:	0801b308 	.word	0x0801b308
 800bca4:	0801b2d0 	.word	0x0801b2d0
 800bca8:	20000af7 	.word	0x20000af7
 800bcac:	00002710 	.word	0x00002710
 800bcb0:	20001780 	.word	0x20001780

0800bcb4 <StreamKGramToVERBOSE>:
{
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	b082      	sub	sp, #8
	global_ch=Ch;
 800bcb8:	4b1a      	ldr	r3, [pc, #104]	; (800bd24 <StreamKGramToVERBOSE+0x70>)
 800bcba:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800bcbc:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <StreamKGramToVERBOSE+0x74>)
 800bcbe:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800bcc0:	4b1a      	ldr	r3, [pc, #104]	; (800bd2c <StreamKGramToVERBOSE+0x78>)
 800bcc2:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_VERBOSE_CASE;
 800bcc4:	4b1a      	ldr	r3, [pc, #104]	; (800bd30 <StreamKGramToVERBOSE+0x7c>)
 800bcc6:	2104      	movs	r1, #4
 800bcc8:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bcca:	1e53      	subs	r3, r2, #1
 800bccc:	3303      	adds	r3, #3
 800bcce:	d909      	bls.n	800bce4 <StreamKGramToVERBOSE+0x30>
	if (global_timeout > 0)
 800bcd0:	4b16      	ldr	r3, [pc, #88]	; (800bd2c <StreamKGramToVERBOSE+0x78>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <StreamKGramToVERBOSE+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800bcd8:	4b16      	ldr	r3, [pc, #88]	; (800bd34 <StreamKGramToVERBOSE+0x80>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	701a      	strb	r2, [r3, #0]
}
 800bcde:	2000      	movs	r0, #0
 800bce0:	b002      	add	sp, #8
 800bce2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bce4:	0153      	lsls	r3, r2, #5
 800bce6:	1a9b      	subs	r3, r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	189a      	adds	r2, r3, r2
 800bcec:	00d0      	lsls	r0, r2, #3
 800bcee:	21fa      	movs	r1, #250	; 0xfa
 800bcf0:	0089      	lsls	r1, r1, #2
 800bcf2:	f7f4 fa2d 	bl	8000150 <__udivsi3>
 800bcf6:	0001      	movs	r1, r0
 800bcf8:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <StreamKGramToVERBOSE+0x84>)
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	23ff      	movs	r3, #255	; 0xff
 800bcfe:	2200      	movs	r2, #0
 800bd00:	480e      	ldr	r0, [pc, #56]	; (800bd3c <StreamKGramToVERBOSE+0x88>)
 800bd02:	f004 fe07 	bl	8010914 <xTimerCreate>
 800bd06:	0004      	movs	r4, r0
 800bd08:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <StreamKGramToVERBOSE+0x8c>)
 800bd0a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bd0c:	f004 f894 	bl	800fe38 <xTaskGetTickCount>
 800bd10:	0002      	movs	r2, r0
 800bd12:	2301      	movs	r3, #1
 800bd14:	425b      	negs	r3, r3
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	0020      	movs	r0, r4
 800bd1e:	f004 fe1d 	bl	801095c <xTimerGenericCommand>
 800bd22:	e7d5      	b.n	800bcd0 <StreamKGramToVERBOSE+0x1c>
 800bd24:	20006b04 	.word	0x20006b04
 800bd28:	20006cd0 	.word	0x20006cd0
 800bd2c:	20006d48 	.word	0x20006d48
 800bd30:	20006b05 	.word	0x20006b05
 800bd34:	20001780 	.word	0x20001780
 800bd38:	0800b04d 	.word	0x0800b04d
 800bd3c:	0801b274 	.word	0x0801b274
 800bd40:	200017a8 	.word	0x200017a8

0800bd44 <StreamRawToPort>:
{
 800bd44:	b510      	push	{r4, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	9a04      	ldr	r2, [sp, #16]
	global_ch=Ch;
 800bd4a:	491c      	ldr	r1, [pc, #112]	; (800bdbc <StreamRawToPort+0x78>)
 800bd4c:	7008      	strb	r0, [r1, #0]
	global_period=Period;
 800bd4e:	491c      	ldr	r1, [pc, #112]	; (800bdc0 <StreamRawToPort+0x7c>)
 800bd50:	600b      	str	r3, [r1, #0]
	global_timeout=Timeout;
 800bd52:	4b1c      	ldr	r3, [pc, #112]	; (800bdc4 <StreamRawToPort+0x80>)
 800bd54:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800bd56:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <StreamRawToPort+0x84>)
 800bd58:	2102      	movs	r1, #2
 800bd5a:	7019      	strb	r1, [r3, #0]
	unit=RAW;
 800bd5c:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <StreamRawToPort+0x88>)
 800bd5e:	3103      	adds	r1, #3
 800bd60:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bd62:	1e53      	subs	r3, r2, #1
 800bd64:	3303      	adds	r3, #3
 800bd66:	d909      	bls.n	800bd7c <StreamRawToPort+0x38>
	if (global_timeout > 0)
 800bd68:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <StreamRawToPort+0x80>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <StreamRawToPort+0x32>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800bd70:	4b17      	ldr	r3, [pc, #92]	; (800bdd0 <StreamRawToPort+0x8c>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	701a      	strb	r2, [r3, #0]
}
 800bd76:	2000      	movs	r0, #0
 800bd78:	b002      	add	sp, #8
 800bd7a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bd7c:	0153      	lsls	r3, r2, #5
 800bd7e:	1a9b      	subs	r3, r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	189a      	adds	r2, r3, r2
 800bd84:	00d0      	lsls	r0, r2, #3
 800bd86:	21fa      	movs	r1, #250	; 0xfa
 800bd88:	0089      	lsls	r1, r1, #2
 800bd8a:	f7f4 f9e1 	bl	8000150 <__udivsi3>
 800bd8e:	0001      	movs	r1, r0
 800bd90:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <StreamRawToPort+0x90>)
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	23ff      	movs	r3, #255	; 0xff
 800bd96:	2200      	movs	r2, #0
 800bd98:	480f      	ldr	r0, [pc, #60]	; (800bdd8 <StreamRawToPort+0x94>)
 800bd9a:	f004 fdbb 	bl	8010914 <xTimerCreate>
 800bd9e:	0004      	movs	r4, r0
 800bda0:	4b0e      	ldr	r3, [pc, #56]	; (800bddc <StreamRawToPort+0x98>)
 800bda2:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bda4:	f004 f848 	bl	800fe38 <xTaskGetTickCount>
 800bda8:	0002      	movs	r2, r0
 800bdaa:	2301      	movs	r3, #1
 800bdac:	425b      	negs	r3, r3
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	0020      	movs	r0, r4
 800bdb6:	f004 fdd1 	bl	801095c <xTimerGenericCommand>
 800bdba:	e7d5      	b.n	800bd68 <StreamRawToPort+0x24>
 800bdbc:	20006b04 	.word	0x20006b04
 800bdc0:	20006cd0 	.word	0x20006cd0
 800bdc4:	20006d48 	.word	0x20006d48
 800bdc8:	20006b05 	.word	0x20006b05
 800bdcc:	2000010c 	.word	0x2000010c
 800bdd0:	20001780 	.word	0x20001780
 800bdd4:	0800b04d 	.word	0x0800b04d
 800bdd8:	0801b274 	.word	0x0801b274
 800bddc:	200017a8 	.word	0x200017a8

0800bde0 <StreamKGramToBuffer>:
{
 800bde0:	b510      	push	{r4, lr}
 800bde2:	b082      	sub	sp, #8
	global_ch=Ch;
 800bde4:	4c19      	ldr	r4, [pc, #100]	; (800be4c <StreamKGramToBuffer+0x6c>)
 800bde6:	7020      	strb	r0, [r4, #0]
	global_period=Period;
 800bde8:	4819      	ldr	r0, [pc, #100]	; (800be50 <StreamKGramToBuffer+0x70>)
 800bdea:	6002      	str	r2, [r0, #0]
	global_timeout=Timeout;
 800bdec:	4a19      	ldr	r2, [pc, #100]	; (800be54 <StreamKGramToBuffer+0x74>)
 800bdee:	6013      	str	r3, [r2, #0]
	ptr_weight_buffer=Buffer;
 800bdf0:	4a19      	ldr	r2, [pc, #100]	; (800be58 <StreamKGramToBuffer+0x78>)
 800bdf2:	6011      	str	r1, [r2, #0]
	global_mode=STREAM_BUFFER_CASE;
 800bdf4:	4a19      	ldr	r2, [pc, #100]	; (800be5c <StreamKGramToBuffer+0x7c>)
 800bdf6:	2103      	movs	r1, #3
 800bdf8:	7011      	strb	r1, [r2, #0]
	unit=KGram;
 800bdfa:	4a19      	ldr	r2, [pc, #100]	; (800be60 <StreamKGramToBuffer+0x80>)
 800bdfc:	3901      	subs	r1, #1
 800bdfe:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800be00:	1e5a      	subs	r2, r3, #1
 800be02:	3203      	adds	r2, #3
 800be04:	d902      	bls.n	800be0c <StreamKGramToBuffer+0x2c>
}
 800be06:	2000      	movs	r0, #0
 800be08:	b002      	add	sp, #8
 800be0a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	1ad2      	subs	r2, r2, r3
 800be10:	0092      	lsls	r2, r2, #2
 800be12:	18d3      	adds	r3, r2, r3
 800be14:	00d8      	lsls	r0, r3, #3
 800be16:	21fa      	movs	r1, #250	; 0xfa
 800be18:	0089      	lsls	r1, r1, #2
 800be1a:	f7f4 f999 	bl	8000150 <__udivsi3>
 800be1e:	0001      	movs	r1, r0
 800be20:	4b10      	ldr	r3, [pc, #64]	; (800be64 <StreamKGramToBuffer+0x84>)
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	23ff      	movs	r3, #255	; 0xff
 800be26:	2200      	movs	r2, #0
 800be28:	480f      	ldr	r0, [pc, #60]	; (800be68 <StreamKGramToBuffer+0x88>)
 800be2a:	f004 fd73 	bl	8010914 <xTimerCreate>
 800be2e:	0004      	movs	r4, r0
 800be30:	4b0e      	ldr	r3, [pc, #56]	; (800be6c <StreamKGramToBuffer+0x8c>)
 800be32:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800be34:	f004 f800 	bl	800fe38 <xTaskGetTickCount>
 800be38:	0002      	movs	r2, r0
 800be3a:	2301      	movs	r3, #1
 800be3c:	425b      	negs	r3, r3
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	2300      	movs	r3, #0
 800be42:	2101      	movs	r1, #1
 800be44:	0020      	movs	r0, r4
 800be46:	f004 fd89 	bl	801095c <xTimerGenericCommand>
 800be4a:	e7dc      	b.n	800be06 <StreamKGramToBuffer+0x26>
 800be4c:	20006b04 	.word	0x20006b04
 800be50:	20006cd0 	.word	0x20006cd0
 800be54:	20006d48 	.word	0x20006d48
 800be58:	20006bec 	.word	0x20006bec
 800be5c:	20006b05 	.word	0x20006b05
 800be60:	2000010c 	.word	0x2000010c
 800be64:	0800b04d 	.word	0x0800b04d
 800be68:	0801b274 	.word	0x0801b274
 800be6c:	200017a8 	.word	0x200017a8

0800be70 <streamCommand>:
{
 800be70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be72:	46de      	mov	lr, fp
 800be74:	4647      	mov	r7, r8
 800be76:	b580      	push	{r7, lr}
 800be78:	b08d      	sub	sp, #52	; 0x34
 800be7a:	9003      	str	r0, [sp, #12]
 800be7c:	0015      	movs	r5, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	930b      	str	r3, [sp, #44]	; 0x2c
  portBASE_TYPE xParameterStringLength2 = 0;
 800be82:	930a      	str	r3, [sp, #40]	; 0x28
  portBASE_TYPE xParameterStringLength3 = 0;
 800be84:	9309      	str	r3, [sp, #36]	; 0x24
  portBASE_TYPE xParameterStringLength4 = 0;
 800be86:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength5 = 0;
 800be88:	9307      	str	r3, [sp, #28]
  configASSERT( pcWriteBuffer );
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d101      	bne.n	800be92 <streamCommand+0x22>
 800be8e:	b672      	cpsid	i
 800be90:	e7fe      	b.n	800be90 <streamCommand+0x20>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800be92:	aa0b      	add	r2, sp, #44	; 0x2c
 800be94:	2101      	movs	r1, #1
 800be96:	0028      	movs	r0, r5
 800be98:	f003 f93c 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800be9c:	0007      	movs	r7, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800be9e:	aa0a      	add	r2, sp, #40	; 0x28
 800bea0:	2102      	movs	r1, #2
 800bea2:	0028      	movs	r0, r5
 800bea4:	f003 f936 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800bea8:	9004      	str	r0, [sp, #16]
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800beaa:	aa09      	add	r2, sp, #36	; 0x24
 800beac:	2103      	movs	r1, #3
 800beae:	0028      	movs	r0, r5
 800beb0:	f003 f930 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800beb4:	0006      	movs	r6, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800beb6:	aa08      	add	r2, sp, #32
 800beb8:	2104      	movs	r1, #4
 800beba:	0028      	movs	r0, r5
 800bebc:	f003 f92a 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800bec0:	0004      	movs	r4, r0
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800bec2:	aa07      	add	r2, sp, #28
 800bec4:	2105      	movs	r1, #5
 800bec6:	0028      	movs	r0, r5
 800bec8:	f003 f924 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800becc:	4683      	mov	fp, r0
  if (NULL != pcParameterString1)
 800bece:	2f00      	cmp	r7, #0
 800bed0:	d043      	beq.n	800bf5a <streamCommand+0xea>
    channel = atoi( (char *)pcParameterString1);
 800bed2:	0038      	movs	r0, r7
 800bed4:	f007 fe01 	bl	8013ada <atoi>
 800bed8:	b2c5      	uxtb	r5, r0
  Module_Status result = H26R0_OK;
 800beda:	2700      	movs	r7, #0
	if (NULL != pcParameterString2)
 800bedc:	9804      	ldr	r0, [sp, #16]
 800bede:	2800      	cmp	r0, #0
 800bee0:	d03e      	beq.n	800bf60 <streamCommand+0xf0>
    period = atoi( (char *)pcParameterString2);
 800bee2:	f007 fdfa 	bl	8013ada <atoi>
 800bee6:	9004      	str	r0, [sp, #16]
  if (NULL != pcParameterString3)
 800bee8:	2e00      	cmp	r6, #0
 800beea:	d042      	beq.n	800bf72 <streamCommand+0x102>
    if (!strncmp((const char *)pcParameterString3, "inf", 3))
 800beec:	2203      	movs	r2, #3
 800beee:	4959      	ldr	r1, [pc, #356]	; (800c054 <streamCommand+0x1e4>)
 800bef0:	0030      	movs	r0, r6
 800bef2:	f008 fac9 	bl	8014488 <strncmp>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d136      	bne.n	800bf68 <streamCommand+0xf8>
      timeout = portMAX_DELAY;
 800befa:	2601      	movs	r6, #1
 800befc:	4276      	negs	r6, r6
	if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "buffer", 6)) 
 800befe:	2c00      	cmp	r4, #0
 800bf00:	d006      	beq.n	800bf10 <streamCommand+0xa0>
 800bf02:	2206      	movs	r2, #6
 800bf04:	4954      	ldr	r1, [pc, #336]	; (800c058 <streamCommand+0x1e8>)
 800bf06:	0020      	movs	r0, r4
 800bf08:	f008 fabe 	bl	8014488 <strncmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d033      	beq.n	800bf78 <streamCommand+0x108>
	else if (NULL != pcParameterString4 && NULL != pcParameterString5 && pcParameterString4[0] == 'p') 
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	d04e      	beq.n	800bfb2 <streamCommand+0x142>
 800bf14:	465b      	mov	r3, fp
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d04b      	beq.n	800bfb2 <streamCommand+0x142>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	56e3      	ldrsb	r3, [r4, r3]
 800bf1e:	2b70      	cmp	r3, #112	; 0x70
 800bf20:	d147      	bne.n	800bfb2 <streamCommand+0x142>
		port = ( uint8_t ) atol( ( char * ) pcParameterString4+1 );
 800bf22:	1c60      	adds	r0, r4, #1
 800bf24:	f007 fddf 	bl	8013ae6 <atol>
 800bf28:	9005      	str	r0, [sp, #20]
 800bf2a:	466b      	mov	r3, sp
 800bf2c:	7d1b      	ldrb	r3, [r3, #20]
 800bf2e:	4698      	mov	r8, r3
		module = (uint8_t) GetID((char *)pcParameterString5);
 800bf30:	4658      	mov	r0, fp
 800bf32:	f7f8 fbbb 	bl	80046ac <GetID>
 800bf36:	b2c4      	uxtb	r4, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800bf38:	2c64      	cmp	r4, #100	; 0x64
 800bf3a:	d032      	beq.n	800bfa2 <streamCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800bf3c:	466b      	mov	r3, sp
 800bf3e:	7d1a      	ldrb	r2, [r3, #20]
 800bf40:	0023      	movs	r3, r4
 800bf42:	4946      	ldr	r1, [pc, #280]	; (800c05c <streamCommand+0x1ec>)
 800bf44:	9803      	ldr	r0, [sp, #12]
 800bf46:	f008 fa5b 	bl	8014400 <sprintf>
			StreamKGramToPort(channel, port, module, period, timeout);
 800bf4a:	9600      	str	r6, [sp, #0]
 800bf4c:	9b04      	ldr	r3, [sp, #16]
 800bf4e:	0022      	movs	r2, r4
 800bf50:	4641      	mov	r1, r8
 800bf52:	0028      	movs	r0, r5
 800bf54:	f7ff fd22 	bl	800b99c <StreamKGramToPort>
			return pdFALSE;
 800bf58:	e033      	b.n	800bfc2 <streamCommand+0x152>
    result = H26R0_ERR_WrongParams;
 800bf5a:	2702      	movs	r7, #2
	uint8_t channel = 1;
 800bf5c:	2501      	movs	r5, #1
 800bf5e:	e7bd      	b.n	800bedc <streamCommand+0x6c>
    result = H26R0_ERR_WrongParams;
 800bf60:	2702      	movs	r7, #2
  uint32_t period = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	e7bf      	b.n	800bee8 <streamCommand+0x78>
      timeout = atoi( (char *)pcParameterString3);
 800bf68:	0030      	movs	r0, r6
 800bf6a:	f007 fdb6 	bl	8013ada <atoi>
 800bf6e:	0006      	movs	r6, r0
 800bf70:	e7c5      	b.n	800befe <streamCommand+0x8e>
    result = H26R0_ERR_WrongParams;
 800bf72:	2702      	movs	r7, #2
  uint32_t timeout = 0;
 800bf74:	2600      	movs	r6, #0
 800bf76:	e7c2      	b.n	800befe <streamCommand+0x8e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800bf78:	226b      	movs	r2, #107	; 0x6b
 800bf7a:	4939      	ldr	r1, [pc, #228]	; (800c060 <streamCommand+0x1f0>)
 800bf7c:	9803      	ldr	r0, [sp, #12]
 800bf7e:	f008 f83c 	bl	8013ffa <memcpy>
		if (channel==1){
 800bf82:	2d01      	cmp	r5, #1
 800bf84:	d106      	bne.n	800bf94 <streamCommand+0x124>
		StreamKGramToBuffer(channel, &weight1_buffer, period, timeout);
 800bf86:	0033      	movs	r3, r6
 800bf88:	9a04      	ldr	r2, [sp, #16]
 800bf8a:	4936      	ldr	r1, [pc, #216]	; (800c064 <streamCommand+0x1f4>)
 800bf8c:	0028      	movs	r0, r5
 800bf8e:	f7ff ff27 	bl	800bde0 <StreamKGramToBuffer>
 800bf92:	e016      	b.n	800bfc2 <streamCommand+0x152>
		StreamKGramToBuffer(channel, &weight2_buffer, period, timeout);
 800bf94:	0033      	movs	r3, r6
 800bf96:	9a04      	ldr	r2, [sp, #16]
 800bf98:	4933      	ldr	r1, [pc, #204]	; (800c068 <streamCommand+0x1f8>)
 800bf9a:	0028      	movs	r0, r5
 800bf9c:	f7ff ff20 	bl	800bde0 <StreamKGramToBuffer>
 800bfa0:	e00f      	b.n	800bfc2 <streamCommand+0x152>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongName);
 800bfa2:	2214      	movs	r2, #20
 800bfa4:	4931      	ldr	r1, [pc, #196]	; (800c06c <streamCommand+0x1fc>)
 800bfa6:	9803      	ldr	r0, [sp, #12]
 800bfa8:	f008 f827 	bl	8013ffa <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800bfac:	2f02      	cmp	r7, #2
 800bfae:	d108      	bne.n	800bfc2 <streamCommand+0x152>
 800bfb0:	e002      	b.n	800bfb8 <streamCommand+0x148>
	else if (NULL == pcParameterString5) 
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <streamCommand+0x15e>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800bfb8:	2212      	movs	r2, #18
 800bfba:	492d      	ldr	r1, [pc, #180]	; (800c070 <streamCommand+0x200>)
 800bfbc:	9803      	ldr	r0, [sp, #12]
 800bfbe:	f008 f81c 	bl	8013ffa <memcpy>
}
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	b00d      	add	sp, #52	; 0x34
 800bfc6:	bc0c      	pop	{r2, r3}
 800bfc8:	4690      	mov	r8, r2
 800bfca:	469b      	mov	fp, r3
 800bfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "-v", 2)) {
 800bfce:	2c00      	cmp	r4, #0
 800bfd0:	d00c      	beq.n	800bfec <streamCommand+0x17c>
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	4927      	ldr	r1, [pc, #156]	; (800c074 <streamCommand+0x204>)
 800bfd6:	0020      	movs	r0, r4
 800bfd8:	f008 fa56 	bl	8014488 <strncmp>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d105      	bne.n	800bfec <streamCommand+0x17c>
			StreamKGramToVERBOSE(channel, period, timeout);
 800bfe0:	0032      	movs	r2, r6
 800bfe2:	9904      	ldr	r1, [sp, #16]
 800bfe4:	0028      	movs	r0, r5
 800bfe6:	f7ff fe65 	bl	800bcb4 <StreamKGramToVERBOSE>
 800bfea:	e7df      	b.n	800bfac <streamCommand+0x13c>
			if (channel == 1 || channel == 2)
 800bfec:	1e6b      	subs	r3, r5, #1
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d828      	bhi.n	800c046 <streamCommand+0x1d6>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800bff4:	2225      	movs	r2, #37	; 0x25
 800bff6:	4920      	ldr	r1, [pc, #128]	; (800c078 <streamCommand+0x208>)
 800bff8:	9c03      	ldr	r4, [sp, #12]
 800bffa:	0020      	movs	r0, r4
 800bffc:	f007 fffd 	bl	8013ffa <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c000:	0020      	movs	r0, r4
 800c002:	f7f4 f889 	bl	8000118 <strlen>
 800c006:	b282      	uxth	r2, r0
 800c008:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <streamCommand+0x20c>)
 800c00a:	7818      	ldrb	r0, [r3, #0]
 800c00c:	2301      	movs	r3, #1
 800c00e:	425b      	negs	r3, r3
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	3333      	adds	r3, #51	; 0x33
 800c014:	0021      	movs	r1, r4
 800c016:	f002 fe23 	bl	800ec60 <writePxMutex>
			StreamKGramToCLI(channel, period, timeout);
 800c01a:	0032      	movs	r2, r6
 800c01c:	9904      	ldr	r1, [sp, #16]
 800c01e:	0028      	movs	r0, r5
 800c020:	f7ff fda4 	bl	800bb6c <StreamKGramToCLI>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800c024:	4b16      	ldr	r3, [pc, #88]	; (800c080 <streamCommand+0x210>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d109      	bne.n	800c040 <streamCommand+0x1d0>
			memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c02c:	9c03      	ldr	r4, [sp, #12]
 800c02e:	0020      	movs	r0, r4
 800c030:	f7f4 f872 	bl	8000118 <strlen>
 800c034:	0002      	movs	r2, r0
 800c036:	2100      	movs	r1, #0
 800c038:	0020      	movs	r0, r4
 800c03a:	f007 ffe7 	bl	801400c <memset>
 800c03e:	e7b5      	b.n	800bfac <streamCommand+0x13c>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800c040:	f004 fe2c 	bl	8010c9c <vPortYield>
 800c044:	e7ee      	b.n	800c024 <streamCommand+0x1b4>
				 strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c046:	2212      	movs	r2, #18
 800c048:	4909      	ldr	r1, [pc, #36]	; (800c070 <streamCommand+0x200>)
 800c04a:	9803      	ldr	r0, [sp, #12]
 800c04c:	f007 ffd5 	bl	8013ffa <memcpy>
 800c050:	e7ac      	b.n	800bfac <streamCommand+0x13c>
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	0801b764 	.word	0x0801b764
 800c058:	0801b768 	.word	0x0801b768
 800c05c:	0801b7dc 	.word	0x0801b7dc
 800c060:	0801b770 	.word	0x0801b770
 800c064:	20006b78 	.word	0x20006b78
 800c068:	20006a90 	.word	0x20006a90
 800c06c:	0801b810 	.word	0x0801b810
 800c070:	0801b308 	.word	0x0801b308
 800c074:	0801b824 	.word	0x0801b824
 800c078:	0801b828 	.word	0x0801b828
 800c07c:	20000af7 	.word	0x20000af7
 800c080:	20001780 	.word	0x20001780

0800c084 <PowerDown>:
{
 800c084:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800c086:	2180      	movs	r1, #128	; 0x80
 800c088:	2090      	movs	r0, #144	; 0x90
 800c08a:	2201      	movs	r2, #1
 800c08c:	0089      	lsls	r1, r1, #2
 800c08e:	05c0      	lsls	r0, r0, #23
 800c090:	f005 fff9 	bl	8012086 <HAL_GPIO_WritePin>
}
 800c094:	2000      	movs	r0, #0
 800c096:	bd10      	pop	{r4, pc}

0800c098 <Stop>:
{
 800c098:	b510      	push	{r4, lr}
 800c09a:	b082      	sub	sp, #8
	global_mode=IDLE_CASE;
 800c09c:	2400      	movs	r4, #0
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <Stop+0x30>)
 800c0a0:	701c      	strb	r4, [r3, #0]
  PowerDown();
 800c0a2:	f7ff ffef 	bl	800c084 <PowerDown>
	xTimerStop( xTimer, 0 );
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <Stop+0x34>)
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	9400      	str	r4, [sp, #0]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2103      	movs	r1, #3
 800c0b2:	f004 fc53 	bl	801095c <xTimerGenericCommand>
	weight1_buffer=0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4a05      	ldr	r2, [pc, #20]	; (800c0d0 <Stop+0x38>)
 800c0ba:	6013      	str	r3, [r2, #0]
	weight2_buffer=0;
 800c0bc:	4a05      	ldr	r2, [pc, #20]	; (800c0d4 <Stop+0x3c>)
 800c0be:	6013      	str	r3, [r2, #0]
}
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	b002      	add	sp, #8
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	20006b05 	.word	0x20006b05
 800c0cc:	200017a8 	.word	0x200017a8
 800c0d0:	20006b78 	.word	0x20006b78
 800c0d4:	20006a90 	.word	0x20006a90

0800c0d8 <stopCommand>:
{
 800c0d8:	b510      	push	{r4, lr}
  configASSERT( pcWriteBuffer );
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d101      	bne.n	800c0e2 <stopCommand+0xa>
 800c0de:	b672      	cpsid	i
 800c0e0:	e7fe      	b.n	800c0e0 <stopCommand+0x8>
	Stop();
 800c0e2:	f7ff ffd9 	bl	800c098 <Stop>
}
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	bd10      	pop	{r4, pc}

0800c0ea <PowerOn>:
{
 800c0ea:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c0ec:	2180      	movs	r1, #128	; 0x80
 800c0ee:	2090      	movs	r0, #144	; 0x90
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	0089      	lsls	r1, r1, #2
 800c0f4:	05c0      	lsls	r0, r0, #23
 800c0f6:	f005 ffc6 	bl	8012086 <HAL_GPIO_WritePin>
}
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	bd10      	pop	{r4, pc}
	...

0800c100 <SampleGram>:
{
 800c100:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c102:	f7ff fb43 	bl	800b78c <SetHX711Gain>
	PowerOn();
 800c106:	f7ff fff0 	bl	800c0ea <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c10a:	2400      	movs	r4, #0
 800c10c:	e003      	b.n	800c116 <SampleGram+0x16>
 800c10e:	f7ff f9cd 	bl	800b4ac <readHX711>
 800c112:	3401      	adds	r4, #1
 800c114:	b2e4      	uxtb	r4, r4
 800c116:	2c01      	cmp	r4, #1
 800c118:	d9f9      	bls.n	800c10e <SampleGram+0xe>
	weightGram=weightCalculation()*Kg2Gram_ratio;
 800c11a:	f7ff fa33 	bl	800b584 <weightCalculation>
 800c11e:	4903      	ldr	r1, [pc, #12]	; (800c12c <SampleGram+0x2c>)
 800c120:	f7f4 fec2 	bl	8000ea8 <__aeabi_fmul>
 800c124:	4b02      	ldr	r3, [pc, #8]	; (800c130 <SampleGram+0x30>)
 800c126:	6018      	str	r0, [r3, #0]
}
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	447a0000 	.word	0x447a0000
 800c130:	20001794 	.word	0x20001794

0800c134 <SampleKGram>:
{
 800c134:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c136:	f7ff fb29 	bl	800b78c <SetHX711Gain>
	PowerOn();
 800c13a:	f7ff ffd6 	bl	800c0ea <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c13e:	2400      	movs	r4, #0
 800c140:	e003      	b.n	800c14a <SampleKGram+0x16>
 800c142:	f7ff f9b3 	bl	800b4ac <readHX711>
 800c146:	3401      	adds	r4, #1
 800c148:	b2e4      	uxtb	r4, r4
 800c14a:	2c01      	cmp	r4, #1
 800c14c:	d9f9      	bls.n	800c142 <SampleKGram+0xe>
	weightKGram=weightCalculation();
 800c14e:	f7ff fa19 	bl	800b584 <weightCalculation>
 800c152:	4b01      	ldr	r3, [pc, #4]	; (800c158 <SampleKGram+0x24>)
 800c154:	6018      	str	r0, [r3, #0]
}
 800c156:	bd10      	pop	{r4, pc}
 800c158:	20001798 	.word	0x20001798

0800c15c <SampleOunce>:
{
 800c15c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c15e:	f7ff fb15 	bl	800b78c <SetHX711Gain>
	PowerOn();
 800c162:	f7ff ffc2 	bl	800c0ea <PowerOn>
	for(i=0; i<2; i++)		readHX711();
 800c166:	2400      	movs	r4, #0
 800c168:	e003      	b.n	800c172 <SampleOunce+0x16>
 800c16a:	f7ff f99f 	bl	800b4ac <readHX711>
 800c16e:	3401      	adds	r4, #1
 800c170:	b2e4      	uxtb	r4, r4
 800c172:	2c01      	cmp	r4, #1
 800c174:	d9f9      	bls.n	800c16a <SampleOunce+0xe>
	weightOunce=weightCalculation()*Kg2Ounce_ratio;
 800c176:	f7ff fa05 	bl	800b584 <weightCalculation>
 800c17a:	f7f6 ffd3 	bl	8003124 <__aeabi_f2d>
 800c17e:	4a04      	ldr	r2, [pc, #16]	; (800c190 <SampleOunce+0x34>)
 800c180:	4b04      	ldr	r3, [pc, #16]	; (800c194 <SampleOunce+0x38>)
 800c182:	f7f6 f957 	bl	8002434 <__aeabi_dmul>
 800c186:	f7f7 f81f 	bl	80031c8 <__aeabi_d2f>
 800c18a:	4b03      	ldr	r3, [pc, #12]	; (800c198 <SampleOunce+0x3c>)
 800c18c:	6018      	str	r0, [r3, #0]
}
 800c18e:	bd10      	pop	{r4, pc}
 800c190:	6e978d50 	.word	0x6e978d50
 800c194:	4041a312 	.word	0x4041a312
 800c198:	2000179c 	.word	0x2000179c

0800c19c <SamplePound>:
{
 800c19c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c19e:	f7ff faf5 	bl	800b78c <SetHX711Gain>
	PowerOn();
 800c1a2:	f7ff ffa2 	bl	800c0ea <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c1a6:	2400      	movs	r4, #0
 800c1a8:	e003      	b.n	800c1b2 <SamplePound+0x16>
 800c1aa:	f7ff f97f 	bl	800b4ac <readHX711>
 800c1ae:	3401      	adds	r4, #1
 800c1b0:	b2e4      	uxtb	r4, r4
 800c1b2:	2c01      	cmp	r4, #1
 800c1b4:	d9f9      	bls.n	800c1aa <SamplePound+0xe>
	weightPound=weightCalculation()*Kg2Pound_ratio;  
 800c1b6:	f7ff f9e5 	bl	800b584 <weightCalculation>
 800c1ba:	f7f6 ffb3 	bl	8003124 <__aeabi_f2d>
 800c1be:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <SamplePound+0x34>)
 800c1c0:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <SamplePound+0x38>)
 800c1c2:	f7f6 f937 	bl	8002434 <__aeabi_dmul>
 800c1c6:	f7f6 ffff 	bl	80031c8 <__aeabi_d2f>
 800c1ca:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <SamplePound+0x3c>)
 800c1cc:	6018      	str	r0, [r3, #0]
}
 800c1ce:	bd10      	pop	{r4, pc}
 800c1d0:	2f275feb 	.word	0x2f275feb
 800c1d4:	4001a311 	.word	0x4001a311
 800c1d8:	200017a0 	.word	0x200017a0

0800c1dc <Average>:
{
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	0004      	movs	r4, r0
 800c1e0:	000d      	movs	r5, r1
	PowerOn();
 800c1e2:	f7ff ff82 	bl	800c0ea <PowerOn>
	SetHX711Gain(ch);
 800c1e6:	0020      	movs	r0, r4
 800c1e8:	f7ff fad0 	bl	800b78c <SetHX711Gain>
	for(i=0; i<=N; i++)
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	e001      	b.n	800c1f4 <Average+0x18>
 800c1f0:	3401      	adds	r4, #1
 800c1f2:	b2e4      	uxtb	r4, r4
 800c1f4:	42ac      	cmp	r4, r5
 800c1f6:	d809      	bhi.n	800c20c <Average+0x30>
		readHX711();	
 800c1f8:	f7ff f958 	bl	800b4ac <readHX711>
		if (i>=1)
 800c1fc:	2c00      	cmp	r4, #0
 800c1fe:	d0f7      	beq.n	800c1f0 <Average+0x14>
			Sample[i]=valuef;
 800c200:	00a3      	lsls	r3, r4, #2
 800c202:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <Average+0x5c>)
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	4a0d      	ldr	r2, [pc, #52]	; (800c23c <Average+0x60>)
 800c208:	5099      	str	r1, [r3, r2]
 800c20a:	e7f1      	b.n	800c1f0 <Average+0x14>
	float average=0.0;
 800c20c:	2600      	movs	r6, #0
	for (ii=0; ii<N; ii++)
 800c20e:	2400      	movs	r4, #0
 800c210:	e008      	b.n	800c224 <Average+0x48>
		average+=Sample[ii+1];
 800c212:	3401      	adds	r4, #1
 800c214:	00a2      	lsls	r2, r4, #2
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <Average+0x60>)
 800c218:	58d1      	ldr	r1, [r2, r3]
 800c21a:	1c30      	adds	r0, r6, #0
 800c21c:	f7f4 fad2 	bl	80007c4 <__aeabi_fadd>
 800c220:	1c06      	adds	r6, r0, #0
	for (ii=0; ii<N; ii++)
 800c222:	b2e4      	uxtb	r4, r4
 800c224:	42ac      	cmp	r4, r5
 800c226:	d3f4      	bcc.n	800c212 <Average+0x36>
	average/=N;
 800c228:	0028      	movs	r0, r5
 800c22a:	f7f5 f953 	bl	80014d4 <__aeabi_i2f>
 800c22e:	1c01      	adds	r1, r0, #0
 800c230:	1c30      	adds	r0, r6, #0
 800c232:	f7f4 fc61 	bl	8000af8 <__aeabi_fdiv>
}
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	20001790 	.word	0x20001790
 800c23c:	2000136c 	.word	0x2000136c

0800c240 <SendResults>:
{
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	b087      	sub	sp, #28
 800c244:	1c05      	adds	r5, r0, #0
 800c246:	000c      	movs	r4, r1
 800c248:	001f      	movs	r7, r3
 800c24a:	ab0c      	add	r3, sp, #48	; 0x30
 800c24c:	781e      	ldrb	r6, [r3, #0]
	float Raw_Msg=0.0f;
 800c24e:	2300      	movs	r3, #0
 800c250:	9305      	str	r3, [sp, #20]
	uint32_t RawMsgInt=0;
 800c252:	2300      	movs	r3, #0
 800c254:	9304      	str	r3, [sp, #16]
	switch (unit)
 800c256:	4bad      	ldr	r3, [pc, #692]	; (800c50c <SendResults+0x2cc>)
 800c258:	781a      	ldrb	r2, [r3, #0]
 800c25a:	2a05      	cmp	r2, #5
 800c25c:	d823      	bhi.n	800c2a6 <SendResults+0x66>
 800c25e:	0093      	lsls	r3, r2, #2
 800c260:	4aab      	ldr	r2, [pc, #684]	; (800c510 <SendResults+0x2d0>)
 800c262:	58d3      	ldr	r3, [r2, r3]
 800c264:	469f      	mov	pc, r3
			Raw_Msg=message*Kg2Gram_ratio; break;
 800c266:	49ab      	ldr	r1, [pc, #684]	; (800c514 <SendResults+0x2d4>)
 800c268:	f7f4 fe1e 	bl	8000ea8 <__aeabi_fmul>
 800c26c:	9005      	str	r0, [sp, #20]
 800c26e:	e01b      	b.n	800c2a8 <SendResults+0x68>
			Raw_Msg=message; break;
 800c270:	9005      	str	r0, [sp, #20]
 800c272:	e019      	b.n	800c2a8 <SendResults+0x68>
			Raw_Msg=message*Kg2Ounce_ratio; break;
 800c274:	f7f6 ff56 	bl	8003124 <__aeabi_f2d>
 800c278:	4aa7      	ldr	r2, [pc, #668]	; (800c518 <SendResults+0x2d8>)
 800c27a:	4ba8      	ldr	r3, [pc, #672]	; (800c51c <SendResults+0x2dc>)
 800c27c:	f7f6 f8da 	bl	8002434 <__aeabi_dmul>
 800c280:	f7f6 ffa2 	bl	80031c8 <__aeabi_d2f>
 800c284:	9005      	str	r0, [sp, #20]
 800c286:	e00f      	b.n	800c2a8 <SendResults+0x68>
			Raw_Msg=message*Kg2Pound_ratio; break;
 800c288:	f7f6 ff4c 	bl	8003124 <__aeabi_f2d>
 800c28c:	4aa4      	ldr	r2, [pc, #656]	; (800c520 <SendResults+0x2e0>)
 800c28e:	4ba5      	ldr	r3, [pc, #660]	; (800c524 <SendResults+0x2e4>)
 800c290:	f7f6 f8d0 	bl	8002434 <__aeabi_dmul>
 800c294:	f7f6 ff98 	bl	80031c8 <__aeabi_d2f>
 800c298:	9005      	str	r0, [sp, #20]
 800c29a:	e005      	b.n	800c2a8 <SendResults+0x68>
			Raw_Msg=Average(global_ch, 1);
 800c29c:	4ba2      	ldr	r3, [pc, #648]	; (800c528 <SendResults+0x2e8>)
 800c29e:	7818      	ldrb	r0, [r3, #0]
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	f7ff ff9b 	bl	800c1dc <Average>
			Raw_Msg=message; break;
 800c2a6:	9505      	str	r5, [sp, #20]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800c2a8:	f002 ff30 	bl	800f10c <FreeRTOS_CLIGetOutputBuffer>
 800c2ac:	0005      	movs	r5, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800c2ae:	2c04      	cmp	r4, #4
 800c2b0:	d001      	beq.n	800c2b6 <SendResults+0x76>
 800c2b2:	2c02      	cmp	r4, #2
 800c2b4:	d106      	bne.n	800c2c4 <SendResults+0x84>
  switch(Mode)
 800c2b6:	2c09      	cmp	r4, #9
 800c2b8:	d900      	bls.n	800c2bc <SendResults+0x7c>
 800c2ba:	e11c      	b.n	800c4f6 <SendResults+0x2b6>
 800c2bc:	00a3      	lsls	r3, r4, #2
 800c2be:	4a9b      	ldr	r2, [pc, #620]	; (800c52c <SendResults+0x2ec>)
 800c2c0:	58d3      	ldr	r3, [r2, r3]
 800c2c2:	469f      	mov	pc, r3
		strUnit = malloc(6*sizeof(char));
 800c2c4:	2006      	movs	r0, #6
 800c2c6:	f007 fc4b 	bl	8013b60 <malloc>
 800c2ca:	9003      	str	r0, [sp, #12]
		memset(strUnit, 0, (6*sizeof(char)));
 800c2cc:	2206      	movs	r2, #6
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	f007 fe9c 	bl	801400c <memset>
		if (unit == Gram)
 800c2d4:	4b8d      	ldr	r3, [pc, #564]	; (800c50c <SendResults+0x2cc>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d00d      	beq.n	800c2f8 <SendResults+0xb8>
		else if (unit == KGram)
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d011      	beq.n	800c304 <SendResults+0xc4>
		else if (unit == Ounce)
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d015      	beq.n	800c310 <SendResults+0xd0>
		else if (unit == Pound)
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	d019      	beq.n	800c31c <SendResults+0xdc>
		else if (unit == RAW)
 800c2e8:	2b05      	cmp	r3, #5
 800c2ea:	d01d      	beq.n	800c328 <SendResults+0xe8>
			sprintf( ( char * ) strUnit, "Kg");
 800c2ec:	2203      	movs	r2, #3
 800c2ee:	4990      	ldr	r1, [pc, #576]	; (800c530 <SendResults+0x2f0>)
 800c2f0:	9803      	ldr	r0, [sp, #12]
 800c2f2:	f007 fe82 	bl	8013ffa <memcpy>
 800c2f6:	e7de      	b.n	800c2b6 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Gram");
 800c2f8:	2205      	movs	r2, #5
 800c2fa:	498e      	ldr	r1, [pc, #568]	; (800c534 <SendResults+0x2f4>)
 800c2fc:	9803      	ldr	r0, [sp, #12]
 800c2fe:	f007 fe7c 	bl	8013ffa <memcpy>
 800c302:	e7d8      	b.n	800c2b6 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Kg");
 800c304:	2203      	movs	r2, #3
 800c306:	498a      	ldr	r1, [pc, #552]	; (800c530 <SendResults+0x2f0>)
 800c308:	9803      	ldr	r0, [sp, #12]
 800c30a:	f007 fe76 	bl	8013ffa <memcpy>
 800c30e:	e7d2      	b.n	800c2b6 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Ounce");
 800c310:	2206      	movs	r2, #6
 800c312:	4989      	ldr	r1, [pc, #548]	; (800c538 <SendResults+0x2f8>)
 800c314:	9803      	ldr	r0, [sp, #12]
 800c316:	f007 fe70 	bl	8013ffa <memcpy>
 800c31a:	e7cc      	b.n	800c2b6 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Pound");
 800c31c:	2206      	movs	r2, #6
 800c31e:	4987      	ldr	r1, [pc, #540]	; (800c53c <SendResults+0x2fc>)
 800c320:	9803      	ldr	r0, [sp, #12]
 800c322:	f007 fe6a 	bl	8013ffa <memcpy>
 800c326:	e7c6      	b.n	800c2b6 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Raw Data");
 800c328:	2209      	movs	r2, #9
 800c32a:	4985      	ldr	r1, [pc, #532]	; (800c540 <SendResults+0x300>)
 800c32c:	9803      	ldr	r0, [sp, #12]
 800c32e:	f007 fe64 	bl	8013ffa <memcpy>
 800c332:	e7c0      	b.n	800c2b6 <SendResults+0x76>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c334:	4b83      	ldr	r3, [pc, #524]	; (800c544 <SendResults+0x304>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b05      	cmp	r3, #5
 800c33a:	d01d      	beq.n	800c378 <SendResults+0x138>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c33c:	2b07      	cmp	r3, #7
 800c33e:	d000      	beq.n	800c342 <SendResults+0x102>
 800c340:	e0d9      	b.n	800c4f6 <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsg, strUnit, Raw_Msg);
 800c342:	9805      	ldr	r0, [sp, #20]
 800c344:	f7f6 feee 	bl	8003124 <__aeabi_f2d>
 800c348:	9000      	str	r0, [sp, #0]
 800c34a:	9101      	str	r1, [sp, #4]
 800c34c:	9a03      	ldr	r2, [sp, #12]
 800c34e:	497e      	ldr	r1, [pc, #504]	; (800c548 <SendResults+0x308>)
 800c350:	0028      	movs	r0, r5
 800c352:	f008 f855 	bl	8014400 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c356:	0028      	movs	r0, r5
 800c358:	f7f3 fede 	bl	8000118 <strlen>
 800c35c:	23fa      	movs	r3, #250	; 0xfa
 800c35e:	b282      	uxth	r2, r0
 800c360:	497a      	ldr	r1, [pc, #488]	; (800c54c <SendResults+0x30c>)
 800c362:	7808      	ldrb	r0, [r1, #0]
 800c364:	2101      	movs	r1, #1
 800c366:	4249      	negs	r1, r1
 800c368:	9100      	str	r1, [sp, #0]
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	0029      	movs	r1, r5
 800c36e:	f002 fc77 	bl	800ec60 <writePxMutex>
			CheckForEnterKey();
 800c372:	f7fe fe3d 	bl	800aff0 <CheckForEnterKey>
 800c376:	e0be      	b.n	800c4f6 <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800c378:	4975      	ldr	r1, [pc, #468]	; (800c550 <SendResults+0x310>)
 800c37a:	9805      	ldr	r0, [sp, #20]
 800c37c:	f7f4 fd94 	bl	8000ea8 <__aeabi_fmul>
 800c380:	f7f4 f928 	bl	80005d4 <__aeabi_f2uiz>
 800c384:	0003      	movs	r3, r0
 800c386:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsgUINT, strUnit, RawMsgInt);
 800c388:	9a03      	ldr	r2, [sp, #12]
 800c38a:	4972      	ldr	r1, [pc, #456]	; (800c554 <SendResults+0x314>)
 800c38c:	0028      	movs	r0, r5
 800c38e:	f008 f837 	bl	8014400 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c392:	0028      	movs	r0, r5
 800c394:	f7f3 fec0 	bl	8000118 <strlen>
 800c398:	23fa      	movs	r3, #250	; 0xfa
 800c39a:	b282      	uxth	r2, r0
 800c39c:	496b      	ldr	r1, [pc, #428]	; (800c54c <SendResults+0x30c>)
 800c39e:	7808      	ldrb	r0, [r1, #0]
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	4249      	negs	r1, r1
 800c3a4:	9100      	str	r1, [sp, #0]
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	0029      	movs	r1, r5
 800c3aa:	f002 fc59 	bl	800ec60 <writePxMutex>
			CheckForEnterKey();
 800c3ae:	f7fe fe1f 	bl	800aff0 <CheckForEnterKey>
 800c3b2:	e0a0      	b.n	800c4f6 <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c3b4:	4b63      	ldr	r3, [pc, #396]	; (800c544 <SendResults+0x304>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2b05      	cmp	r3, #5
 800c3ba:	d01c      	beq.n	800c3f6 <SendResults+0x1b6>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d000      	beq.n	800c3c2 <SendResults+0x182>
 800c3c0:	e099      	b.n	800c4f6 <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsg, Raw_Msg);
 800c3c2:	9805      	ldr	r0, [sp, #20]
 800c3c4:	f7f6 feae 	bl	8003124 <__aeabi_f2d>
 800c3c8:	0002      	movs	r2, r0
 800c3ca:	000b      	movs	r3, r1
 800c3cc:	4962      	ldr	r1, [pc, #392]	; (800c558 <SendResults+0x318>)
 800c3ce:	0028      	movs	r0, r5
 800c3d0:	f008 f816 	bl	8014400 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c3d4:	0028      	movs	r0, r5
 800c3d6:	f7f3 fe9f 	bl	8000118 <strlen>
 800c3da:	23fa      	movs	r3, #250	; 0xfa
 800c3dc:	b282      	uxth	r2, r0
 800c3de:	495b      	ldr	r1, [pc, #364]	; (800c54c <SendResults+0x30c>)
 800c3e0:	7808      	ldrb	r0, [r1, #0]
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	4249      	negs	r1, r1
 800c3e6:	9100      	str	r1, [sp, #0]
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	0029      	movs	r1, r5
 800c3ec:	f002 fc38 	bl	800ec60 <writePxMutex>
			CheckForEnterKey();
 800c3f0:	f7fe fdfe 	bl	800aff0 <CheckForEnterKey>
 800c3f4:	e07f      	b.n	800c4f6 <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800c3f6:	4956      	ldr	r1, [pc, #344]	; (800c550 <SendResults+0x310>)
 800c3f8:	9805      	ldr	r0, [sp, #20]
 800c3fa:	f7f4 fd55 	bl	8000ea8 <__aeabi_fmul>
 800c3fe:	f7f4 f8e9 	bl	80005d4 <__aeabi_f2uiz>
 800c402:	0002      	movs	r2, r0
 800c404:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsgUINT, RawMsgInt);
 800c406:	4955      	ldr	r1, [pc, #340]	; (800c55c <SendResults+0x31c>)
 800c408:	0028      	movs	r0, r5
 800c40a:	f007 fff9 	bl	8014400 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c40e:	0028      	movs	r0, r5
 800c410:	f7f3 fe82 	bl	8000118 <strlen>
 800c414:	23fa      	movs	r3, #250	; 0xfa
 800c416:	b282      	uxth	r2, r0
 800c418:	494c      	ldr	r1, [pc, #304]	; (800c54c <SendResults+0x30c>)
 800c41a:	7808      	ldrb	r0, [r1, #0]
 800c41c:	2101      	movs	r1, #1
 800c41e:	4249      	negs	r1, r1
 800c420:	9100      	str	r1, [sp, #0]
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	0029      	movs	r1, r5
 800c426:	f002 fc1b 	bl	800ec60 <writePxMutex>
			CheckForEnterKey();
 800c42a:	f7fe fde1 	bl	800aff0 <CheckForEnterKey>
 800c42e:	e062      	b.n	800c4f6 <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c430:	4b44      	ldr	r3, [pc, #272]	; (800c544 <SendResults+0x304>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b05      	cmp	r3, #5
 800c436:	d016      	beq.n	800c466 <SendResults+0x226>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c438:	2b07      	cmp	r3, #7
 800c43a:	d15c      	bne.n	800c4f6 <SendResults+0x2b6>
				if (Module==myID){ 
 800c43c:	4b48      	ldr	r3, [pc, #288]	; (800c560 <SendResults+0x320>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	42b3      	cmp	r3, r6
 800c442:	d03d      	beq.n	800c4c0 <SendResults+0x280>
						messageParams[0] = Port;
 800c444:	4b47      	ldr	r3, [pc, #284]	; (800c564 <SendResults+0x324>)
 800c446:	701f      	strb	r7, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800c448:	aa05      	add	r2, sp, #20
 800c44a:	78d1      	ldrb	r1, [r2, #3]
 800c44c:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800c44e:	7891      	ldrb	r1, [r2, #2]
 800c450:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800c452:	7851      	ldrb	r1, [r2, #1]
 800c454:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800c456:	7812      	ldrb	r2, [r2, #0]
 800c458:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(float)+1);
 800c45a:	2205      	movs	r2, #5
 800c45c:	2123      	movs	r1, #35	; 0x23
 800c45e:	0030      	movs	r0, r6
 800c460:	f7fc ff2e 	bl	80092c0 <SendMessageToModule>
 800c464:	e047      	b.n	800c4f6 <SendResults+0x2b6>
				RawMsgInt=Raw_Msg*10;
 800c466:	493a      	ldr	r1, [pc, #232]	; (800c550 <SendResults+0x310>)
 800c468:	9805      	ldr	r0, [sp, #20]
 800c46a:	f7f4 fd1d 	bl	8000ea8 <__aeabi_fmul>
 800c46e:	f7f4 f8b1 	bl	80005d4 <__aeabi_f2uiz>
 800c472:	9004      	str	r0, [sp, #16]
				if (Module==myID){
 800c474:	4b3a      	ldr	r3, [pc, #232]	; (800c560 <SendResults+0x320>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	42b3      	cmp	r3, r6
 800c47a:	d010      	beq.n	800c49e <SendResults+0x25e>
						messageParams[0] = Port;
 800c47c:	4b39      	ldr	r3, [pc, #228]	; (800c564 <SendResults+0x324>)
 800c47e:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800c480:	aa04      	add	r2, sp, #16
 800c482:	78d1      	ldrb	r1, [r2, #3]
 800c484:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800c486:	7891      	ldrb	r1, [r2, #2]
 800c488:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800c48a:	7851      	ldrb	r1, [r2, #1]
 800c48c:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(uint32_t)+1);
 800c492:	2205      	movs	r2, #5
 800c494:	2123      	movs	r1, #35	; 0x23
 800c496:	0030      	movs	r0, r6
 800c498:	f7fc ff12 	bl	80092c0 <SendMessageToModule>
 800c49c:	e02b      	b.n	800c4f6 <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800c49e:	ab04      	add	r3, sp, #16
 800c4a0:	78da      	ldrb	r2, [r3, #3]
 800c4a2:	4931      	ldr	r1, [pc, #196]	; (800c568 <SendResults+0x328>)
 800c4a4:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800c4a6:	789a      	ldrb	r2, [r3, #2]
 800c4a8:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800c4aa:	785a      	ldrb	r2, [r3, #1]
 800c4ac:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	2204      	movs	r2, #4
 800c4b8:	0038      	movs	r0, r7
 800c4ba:	f002 fbd1 	bl	800ec60 <writePxMutex>
 800c4be:	e01a      	b.n	800c4f6 <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800c4c0:	ab05      	add	r3, sp, #20
 800c4c2:	78da      	ldrb	r2, [r3, #3]
 800c4c4:	4928      	ldr	r1, [pc, #160]	; (800c568 <SendResults+0x328>)
 800c4c6:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800c4c8:	789a      	ldrb	r2, [r3, #2]
 800c4ca:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800c4cc:	785a      	ldrb	r2, [r3, #1]
 800c4ce:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800c4d4:	230a      	movs	r3, #10
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	2204      	movs	r2, #4
 800c4da:	0038      	movs	r0, r7
 800c4dc:	f002 fbc0 	bl	800ec60 <writePxMutex>
 800c4e0:	e009      	b.n	800c4f6 <SendResults+0x2b6>
      memset(Buffer, 0, sizeof(float));
 800c4e2:	2204      	movs	r2, #4
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c4e8:	f007 fd90 	bl	801400c <memset>
      memcpy(Buffer, &Raw_Msg, sizeof(float));
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	a905      	add	r1, sp, #20
 800c4f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c4f2:	f007 fd82 	bl	8013ffa <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE){
 800c4f6:	2c04      	cmp	r4, #4
 800c4f8:	d004      	beq.n	800c504 <SendResults+0x2c4>
 800c4fa:	2c02      	cmp	r4, #2
 800c4fc:	d002      	beq.n	800c504 <SendResults+0x2c4>
		free(strUnit);
 800c4fe:	9803      	ldr	r0, [sp, #12]
 800c500:	f007 fb38 	bl	8013b74 <free>
}
 800c504:	2000      	movs	r0, #0
 800c506:	b007      	add	sp, #28
 800c508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c50a:	46c0      	nop			; (mov r8, r8)
 800c50c:	2000010c 	.word	0x2000010c
 800c510:	0801b178 	.word	0x0801b178
 800c514:	447a0000 	.word	0x447a0000
 800c518:	6e978d50 	.word	0x6e978d50
 800c51c:	4041a312 	.word	0x4041a312
 800c520:	2f275feb 	.word	0x2f275feb
 800c524:	4001a311 	.word	0x4001a311
 800c528:	20006b04 	.word	0x20006b04
 800c52c:	0801b190 	.word	0x0801b190
 800c530:	0801b208 	.word	0x0801b208
 800c534:	0801b200 	.word	0x0801b200
 800c538:	0801b20c 	.word	0x0801b20c
 800c53c:	0801b214 	.word	0x0801b214
 800c540:	0801b21c 	.word	0x0801b21c
 800c544:	200000c0 	.word	0x200000c0
 800c548:	0801b23c 	.word	0x0801b23c
 800c54c:	20000af7 	.word	0x20000af7
 800c550:	41200000 	.word	0x41200000
 800c554:	0801b228 	.word	0x0801b228
 800c558:	0801b258 	.word	0x0801b258
 800c55c:	0801b250 	.word	0x0801b250
 800c560:	20000070 	.word	0x20000070
 800c564:	20000cfc 	.word	0x20000cfc
 800c568:	20001784 	.word	0x20001784

0800c56c <sampleCommand>:
{
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	0005      	movs	r5, r0
 800c572:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800c578:	2d00      	cmp	r5, #0
 800c57a:	d101      	bne.n	800c580 <sampleCommand+0x14>
 800c57c:	b672      	cpsid	i
 800c57e:	e7fe      	b.n	800c57e <sampleCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c580:	aa03      	add	r2, sp, #12
 800c582:	2101      	movs	r1, #1
 800c584:	f002 fdc6 	bl	800f114 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800c588:	2800      	cmp	r0, #0
 800c58a:	d019      	beq.n	800c5c0 <sampleCommand+0x54>
    channel = atoi( (char *)pcParameterString1);
 800c58c:	f007 faa5 	bl	8013ada <atoi>
 800c590:	b2c4      	uxtb	r4, r0
	Module_Status result = H26R0_OK;
 800c592:	2600      	movs	r6, #0
	if (channel == 1 || channel == 2)
 800c594:	1e63      	subs	r3, r4, #1
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d914      	bls.n	800c5c6 <sampleCommand+0x5a>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800c59c:	2e00      	cmp	r6, #0
 800c59e:	d101      	bne.n	800c5a4 <sampleCommand+0x38>
 800c5a0:	2c01      	cmp	r4, #1
 800c5a2:	d020      	beq.n	800c5e6 <sampleCommand+0x7a>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c5a4:	2212      	movs	r2, #18
 800c5a6:	4911      	ldr	r1, [pc, #68]	; (800c5ec <sampleCommand+0x80>)
 800c5a8:	0028      	movs	r0, r5
 800c5aa:	f007 fd26 	bl	8013ffa <memcpy>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800c5ae:	2299      	movs	r2, #153	; 0x99
 800c5b0:	0092      	lsls	r2, r2, #2
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	0028      	movs	r0, r5
 800c5b6:	f007 fd29 	bl	801400c <memset>
}
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	b004      	add	sp, #16
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800c5c0:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800c5c2:	2400      	movs	r4, #0
 800c5c4:	e7e6      	b.n	800c594 <sampleCommand+0x28>
		DATA_To_SEND=SampleKGram(channel);
 800c5c6:	0020      	movs	r0, r4
 800c5c8:	f7ff fdb4 	bl	800c134 <SampleKGram>
 800c5cc:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <sampleCommand+0x84>)
 800c5ce:	6018      	str	r0, [r3, #0]
		global_mode=SAMPLE_CLI_CASE;
 800c5d0:	2106      	movs	r1, #6
 800c5d2:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <sampleCommand+0x88>)
 800c5d4:	7019      	strb	r1, [r3, #0]
		SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800c5d6:	4b08      	ldr	r3, [pc, #32]	; (800c5f8 <sampleCommand+0x8c>)
 800c5d8:	781a      	ldrb	r2, [r3, #0]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	f7ff fe2e 	bl	800c240 <SendResults>
 800c5e4:	e7da      	b.n	800c59c <sampleCommand+0x30>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800c5e6:	2c02      	cmp	r4, #2
 800c5e8:	d1dc      	bne.n	800c5a4 <sampleCommand+0x38>
 800c5ea:	e7e0      	b.n	800c5ae <sampleCommand+0x42>
 800c5ec:	0801b308 	.word	0x0801b308
 800c5f0:	20001358 	.word	0x20001358
 800c5f4:	20006b05 	.word	0x20006b05
 800c5f8:	2000010c 	.word	0x2000010c

0800c5fc <LoadcellTask>:
{
 800c5fc:	b530      	push	{r4, r5, lr}
 800c5fe:	b083      	sub	sp, #12
 800c600:	e021      	b.n	800c646 <LoadcellTask+0x4a>
		switch(global_mode)
 800c602:	2b01      	cmp	r3, #1
 800c604:	d000      	beq.n	800c608 <LoadcellTask+0xc>
 800c606:	e086      	b.n	800c716 <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800c608:	f004 fcd4 	bl	8010fb4 <HAL_GetTick>
 800c60c:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);		
 800c60e:	4b44      	ldr	r3, [pc, #272]	; (800c720 <LoadcellTask+0x124>)
 800c610:	7818      	ldrb	r0, [r3, #0]
 800c612:	f7ff fd8f 	bl	800c134 <SampleKGram>
 800c616:	4b43      	ldr	r3, [pc, #268]	; (800c724 <LoadcellTask+0x128>)
 800c618:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800c61a:	4b43      	ldr	r3, [pc, #268]	; (800c728 <LoadcellTask+0x12c>)
 800c61c:	781a      	ldrb	r2, [r3, #0]
 800c61e:	4b43      	ldr	r3, [pc, #268]	; (800c72c <LoadcellTask+0x130>)
 800c620:	7819      	ldrb	r1, [r3, #0]
 800c622:	2300      	movs	r3, #0
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	f7ff fe0a 	bl	800c240 <SendResults>
				while(HAL_GetTick()-t0<(global_period-1)) {taskYIELD();}
 800c62c:	e001      	b.n	800c632 <LoadcellTask+0x36>
 800c62e:	f004 fb35 	bl	8010c9c <vPortYield>
 800c632:	f004 fcbf 	bl	8010fb4 <HAL_GetTick>
 800c636:	1b00      	subs	r0, r0, r4
 800c638:	4b3d      	ldr	r3, [pc, #244]	; (800c730 <LoadcellTask+0x134>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	4298      	cmp	r0, r3
 800c640:	d3f5      	bcc.n	800c62e <LoadcellTask+0x32>
		taskYIELD();
 800c642:	f004 fb2b 	bl	8010c9c <vPortYield>
		switch(global_mode)
 800c646:	4b39      	ldr	r3, [pc, #228]	; (800c72c <LoadcellTask+0x130>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d023      	beq.n	800c696 <LoadcellTask+0x9a>
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	2a02      	cmp	r2, #2
 800c652:	d9d6      	bls.n	800c602 <LoadcellTask+0x6>
 800c654:	2b03      	cmp	r3, #3
 800c656:	d03f      	beq.n	800c6d8 <LoadcellTask+0xdc>
 800c658:	2b04      	cmp	r3, #4
 800c65a:	d15c      	bne.n	800c716 <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800c65c:	f004 fcaa 	bl	8010fb4 <HAL_GetTick>
 800c660:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800c662:	4b2f      	ldr	r3, [pc, #188]	; (800c720 <LoadcellTask+0x124>)
 800c664:	7818      	ldrb	r0, [r3, #0]
 800c666:	f7ff fd65 	bl	800c134 <SampleKGram>
 800c66a:	4b2e      	ldr	r3, [pc, #184]	; (800c724 <LoadcellTask+0x128>)
 800c66c:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800c66e:	4b2e      	ldr	r3, [pc, #184]	; (800c728 <LoadcellTask+0x12c>)
 800c670:	781a      	ldrb	r2, [r3, #0]
 800c672:	4b2e      	ldr	r3, [pc, #184]	; (800c72c <LoadcellTask+0x130>)
 800c674:	7819      	ldrb	r1, [r3, #0]
 800c676:	2300      	movs	r3, #0
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	f7ff fde0 	bl	800c240 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800c680:	e001      	b.n	800c686 <LoadcellTask+0x8a>
 800c682:	f004 fb0b 	bl	8010c9c <vPortYield>
 800c686:	f004 fc95 	bl	8010fb4 <HAL_GetTick>
 800c68a:	1b00      	subs	r0, r0, r4
 800c68c:	4b28      	ldr	r3, [pc, #160]	; (800c730 <LoadcellTask+0x134>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4298      	cmp	r0, r3
 800c692:	d3f6      	bcc.n	800c682 <LoadcellTask+0x86>
 800c694:	e7d5      	b.n	800c642 <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800c696:	f004 fc8d 	bl	8010fb4 <HAL_GetTick>
 800c69a:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800c69c:	4b20      	ldr	r3, [pc, #128]	; (800c720 <LoadcellTask+0x124>)
 800c69e:	7818      	ldrb	r0, [r3, #0]
 800c6a0:	f7ff fd48 	bl	800c134 <SampleKGram>
 800c6a4:	4b1f      	ldr	r3, [pc, #124]	; (800c724 <LoadcellTask+0x128>)
 800c6a6:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, global_port, global_module, NULL);
 800c6a8:	4b22      	ldr	r3, [pc, #136]	; (800c734 <LoadcellTask+0x138>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	4a1e      	ldr	r2, [pc, #120]	; (800c728 <LoadcellTask+0x12c>)
 800c6ae:	7812      	ldrb	r2, [r2, #0]
 800c6b0:	491e      	ldr	r1, [pc, #120]	; (800c72c <LoadcellTask+0x130>)
 800c6b2:	7809      	ldrb	r1, [r1, #0]
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	9501      	str	r5, [sp, #4]
 800c6b8:	4d1f      	ldr	r5, [pc, #124]	; (800c738 <LoadcellTask+0x13c>)
 800c6ba:	782d      	ldrb	r5, [r5, #0]
 800c6bc:	9500      	str	r5, [sp, #0]
 800c6be:	f7ff fdbf 	bl	800c240 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800c6c2:	e001      	b.n	800c6c8 <LoadcellTask+0xcc>
 800c6c4:	f004 faea 	bl	8010c9c <vPortYield>
 800c6c8:	f004 fc74 	bl	8010fb4 <HAL_GetTick>
 800c6cc:	1b00      	subs	r0, r0, r4
 800c6ce:	4b18      	ldr	r3, [pc, #96]	; (800c730 <LoadcellTask+0x134>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4298      	cmp	r0, r3
 800c6d4:	d3f6      	bcc.n	800c6c4 <LoadcellTask+0xc8>
 800c6d6:	e7b4      	b.n	800c642 <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800c6d8:	f004 fc6c 	bl	8010fb4 <HAL_GetTick>
 800c6dc:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800c6de:	4b10      	ldr	r3, [pc, #64]	; (800c720 <LoadcellTask+0x124>)
 800c6e0:	7818      	ldrb	r0, [r3, #0]
 800c6e2:	f7ff fd27 	bl	800c134 <SampleKGram>
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	; (800c724 <LoadcellTask+0x128>)
 800c6e8:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, ptr_weight_buffer);
 800c6ea:	4b0f      	ldr	r3, [pc, #60]	; (800c728 <LoadcellTask+0x12c>)
 800c6ec:	781a      	ldrb	r2, [r3, #0]
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <LoadcellTask+0x130>)
 800c6f0:	7819      	ldrb	r1, [r3, #0]
 800c6f2:	4b12      	ldr	r3, [pc, #72]	; (800c73c <LoadcellTask+0x140>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	f7ff fda0 	bl	800c240 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800c700:	e001      	b.n	800c706 <LoadcellTask+0x10a>
 800c702:	f004 facb 	bl	8010c9c <vPortYield>
 800c706:	f004 fc55 	bl	8010fb4 <HAL_GetTick>
 800c70a:	1b00      	subs	r0, r0, r4
 800c70c:	4b08      	ldr	r3, [pc, #32]	; (800c730 <LoadcellTask+0x134>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4298      	cmp	r0, r3
 800c712:	d3f6      	bcc.n	800c702 <LoadcellTask+0x106>
 800c714:	e795      	b.n	800c642 <LoadcellTask+0x46>
			default: global_mode = IDLE_CASE; break;
 800c716:	4b05      	ldr	r3, [pc, #20]	; (800c72c <LoadcellTask+0x130>)
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
 800c71c:	e791      	b.n	800c642 <LoadcellTask+0x46>
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	20006b04 	.word	0x20006b04
 800c724:	20001358 	.word	0x20001358
 800c728:	2000010c 	.word	0x2000010c
 800c72c:	20006b05 	.word	0x20006b05
 800c730:	20006cd0 	.word	0x20006cd0
 800c734:	20006b06 	.word	0x20006b06
 800c738:	20006d44 	.word	0x20006d44
 800c73c:	20006bec 	.word	0x20006bec

0800c740 <ZeroCal>:
{
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	0006      	movs	r6, r0
	IND_ON();
 800c744:	2580      	movs	r5, #128	; 0x80
 800c746:	012d      	lsls	r5, r5, #4
 800c748:	2490      	movs	r4, #144	; 0x90
 800c74a:	05e4      	lsls	r4, r4, #23
 800c74c:	2201      	movs	r2, #1
 800c74e:	0029      	movs	r1, r5
 800c750:	0020      	movs	r0, r4
 800c752:	f005 fc98 	bl	8012086 <HAL_GPIO_WritePin>
	SetHX711Rate(80);
 800c756:	2050      	movs	r0, #80	; 0x50
 800c758:	f7fe ff70 	bl	800b63c <SetHX711Rate>
	Zero_Drift=(Average(ch,100)*0.5*AVDD)/(ADC_full_range*gain);
 800c75c:	2164      	movs	r1, #100	; 0x64
 800c75e:	0030      	movs	r0, r6
 800c760:	f7ff fd3c 	bl	800c1dc <Average>
 800c764:	f7f6 fcde 	bl	8003124 <__aeabi_f2d>
 800c768:	2200      	movs	r2, #0
 800c76a:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <ZeroCal+0x94>)
 800c76c:	f7f5 fe62 	bl	8002434 <__aeabi_dmul>
 800c770:	2200      	movs	r2, #0
 800c772:	4b19      	ldr	r3, [pc, #100]	; (800c7d8 <ZeroCal+0x98>)
 800c774:	f7f5 fe5e 	bl	8002434 <__aeabi_dmul>
 800c778:	0006      	movs	r6, r0
 800c77a:	000f      	movs	r7, r1
 800c77c:	4b17      	ldr	r3, [pc, #92]	; (800c7dc <ZeroCal+0x9c>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	05d8      	lsls	r0, r3, #23
 800c782:	1ac0      	subs	r0, r0, r3
 800c784:	f7f6 fc62 	bl	800304c <__aeabi_i2d>
 800c788:	0002      	movs	r2, r0
 800c78a:	000b      	movs	r3, r1
 800c78c:	0030      	movs	r0, r6
 800c78e:	0039      	movs	r1, r7
 800c790:	f7f5 fa46 	bl	8001c20 <__aeabi_ddiv>
 800c794:	f7f6 fd18 	bl	80031c8 <__aeabi_d2f>
 800c798:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <ZeroCal+0xa0>)
 800c79a:	6018      	str	r0, [r3, #0]
	temp32=*(uint32_t*)&Zero_Drift;
 800c79c:	4e11      	ldr	r6, [pc, #68]	; (800c7e4 <ZeroCal+0xa4>)
 800c79e:	6030      	str	r0, [r6, #0]
	SetHX711Rate(10);
 800c7a0:	200a      	movs	r0, #10
 800c7a2:	f7fe ff4b 	bl	800b63c <SetHX711Rate>
	word_LSB=0x0000FFFF & temp32;
 800c7a6:	6833      	ldr	r3, [r6, #0]
 800c7a8:	b299      	uxth	r1, r3
 800c7aa:	4a0f      	ldr	r2, [pc, #60]	; (800c7e8 <ZeroCal+0xa8>)
 800c7ac:	8011      	strh	r1, [r2, #0]
	word_MSB=0x0000FFFF & (temp32>>16); 
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	4e0e      	ldr	r6, [pc, #56]	; (800c7ec <ZeroCal+0xac>)
 800c7b2:	8033      	strh	r3, [r6, #0]
	EE_WriteVariable(_EE_zero_drift_LSB, word_LSB);
 800c7b4:	20fa      	movs	r0, #250	; 0xfa
 800c7b6:	30ff      	adds	r0, #255	; 0xff
 800c7b8:	f7fb f950 	bl	8007a5c <EE_WriteVariable>
	EE_WriteVariable(_EE_zero_drift_MSB, word_MSB);
 800c7bc:	8831      	ldrh	r1, [r6, #0]
 800c7be:	20fd      	movs	r0, #253	; 0xfd
 800c7c0:	0040      	lsls	r0, r0, #1
 800c7c2:	f7fb f94b 	bl	8007a5c <EE_WriteVariable>
	IND_OFF();
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	0029      	movs	r1, r5
 800c7ca:	0020      	movs	r0, r4
 800c7cc:	f005 fc5b 	bl	8012086 <HAL_GPIO_WritePin>
}
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d4:	3fe00000 	.word	0x3fe00000
 800c7d8:	40080000 	.word	0x40080000
 800c7dc:	200000e4 	.word	0x200000e4
 800c7e0:	2000176c 	.word	0x2000176c
 800c7e4:	20001788 	.word	0x20001788
 800c7e8:	200017a4 	.word	0x200017a4
 800c7ec:	200017a6 	.word	0x200017a6

0800c7f0 <zerocalCommand>:
{
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	0004      	movs	r4, r0
 800c7f6:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800c7fc:	2c00      	cmp	r4, #0
 800c7fe:	d101      	bne.n	800c804 <zerocalCommand+0x14>
 800c800:	b672      	cpsid	i
 800c802:	e7fe      	b.n	800c802 <zerocalCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c804:	aa01      	add	r2, sp, #4
 800c806:	2101      	movs	r1, #1
 800c808:	f002 fc84 	bl	800f114 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "1", 1))
 800c80c:	7803      	ldrb	r3, [r0, #0]
 800c80e:	2b31      	cmp	r3, #49	; 0x31
 800c810:	d009      	beq.n	800c826 <zerocalCommand+0x36>
  else if (!strncmp((const char *)pcParameterString1, "2", 1))
 800c812:	2b32      	cmp	r3, #50	; 0x32
 800c814:	d010      	beq.n	800c838 <zerocalCommand+0x48>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c816:	2213      	movs	r2, #19
 800c818:	490c      	ldr	r1, [pc, #48]	; (800c84c <zerocalCommand+0x5c>)
 800c81a:	0020      	movs	r0, r4
 800c81c:	f007 fbed 	bl	8013ffa <memcpy>
}
 800c820:	2000      	movs	r0, #0
 800c822:	b002      	add	sp, #8
 800c824:	bd10      	pop	{r4, pc}
		ZeroCal(channel);
 800c826:	2001      	movs	r0, #1
 800c828:	f7ff ff8a 	bl	800c740 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 1\r\n" );
 800c82c:	2221      	movs	r2, #33	; 0x21
 800c82e:	4908      	ldr	r1, [pc, #32]	; (800c850 <zerocalCommand+0x60>)
 800c830:	0020      	movs	r0, r4
 800c832:	f007 fbe2 	bl	8013ffa <memcpy>
 800c836:	e7f3      	b.n	800c820 <zerocalCommand+0x30>
		ZeroCal(channel);
 800c838:	2002      	movs	r0, #2
 800c83a:	f7ff ff81 	bl	800c740 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 2\r\n" );
 800c83e:	2221      	movs	r2, #33	; 0x21
 800c840:	4904      	ldr	r1, [pc, #16]	; (800c854 <zerocalCommand+0x64>)
 800c842:	0020      	movs	r0, r4
 800c844:	f007 fbd9 	bl	8013ffa <memcpy>
 800c848:	e7ea      	b.n	800c820 <zerocalCommand+0x30>
 800c84a:	46c0      	nop			; (mov r8, r8)
 800c84c:	08019c98 	.word	0x08019c98
 800c850:	0801b94c 	.word	0x0801b94c
 800c854:	0801b970 	.word	0x0801b970

0800c858 <Module_MessagingTask>:
{
 800c858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85a:	46c6      	mov	lr, r8
 800c85c:	b500      	push	{lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	ab08      	add	r3, sp, #32
 800c862:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800c864:	4bdc      	ldr	r3, [pc, #880]	; (800cbd8 <Module_MessagingTask+0x380>)
 800c866:	469c      	mov	ip, r3
 800c868:	4460      	add	r0, ip
 800c86a:	b283      	uxth	r3, r0
 800c86c:	2b0d      	cmp	r3, #13
 800c86e:	d900      	bls.n	800c872 <Module_MessagingTask+0x1a>
 800c870:	e1af      	b.n	800cbd2 <Module_MessagingTask+0x37a>
 800c872:	0098      	lsls	r0, r3, #2
 800c874:	4bd9      	ldr	r3, [pc, #868]	; (800cbdc <Module_MessagingTask+0x384>)
 800c876:	581b      	ldr	r3, [r3, r0]
 800c878:	469f      	mov	pc, r3
			SetHX711Rate(cMessage[port-1][shift]);
 800c87a:	3901      	subs	r1, #1
 800c87c:	00cb      	lsls	r3, r1, #3
 800c87e:	1a59      	subs	r1, r3, r1
 800c880:	00ca      	lsls	r2, r1, #3
 800c882:	4bd7      	ldr	r3, [pc, #860]	; (800cbe0 <Module_MessagingTask+0x388>)
 800c884:	189b      	adds	r3, r3, r2
 800c886:	5d18      	ldrb	r0, [r3, r4]
 800c888:	f7fe fed8 	bl	800b63c <SetHX711Rate>
	Module_Status result = H26R0_OK;
 800c88c:	2000      	movs	r0, #0
}
 800c88e:	b002      	add	sp, #8
 800c890:	bc04      	pop	{r2}
 800c892:	4690      	mov	r8, r2
 800c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800c896:	1e48      	subs	r0, r1, #1
 800c898:	1da1      	adds	r1, r4, #6
 800c89a:	4ad1      	ldr	r2, [pc, #836]	; (800cbe0 <Module_MessagingTask+0x388>)
 800c89c:	00c7      	lsls	r7, r0, #3
 800c89e:	1a3b      	subs	r3, r7, r0
 800c8a0:	00dd      	lsls	r5, r3, #3
 800c8a2:	1955      	adds	r5, r2, r5
 800c8a4:	5c6b      	ldrb	r3, [r5, r1]
 800c8a6:	061b      	lsls	r3, r3, #24
 800c8a8:	1d61      	adds	r1, r4, #5
 800c8aa:	5c69      	ldrb	r1, [r5, r1]
 800c8ac:	0409      	lsls	r1, r1, #16
 800c8ae:	185b      	adds	r3, r3, r1
 800c8b0:	1d21      	adds	r1, r4, #4
 800c8b2:	5c69      	ldrb	r1, [r5, r1]
 800c8b4:	0209      	lsls	r1, r1, #8
 800c8b6:	185b      	adds	r3, r3, r1
 800c8b8:	1ce1      	adds	r1, r4, #3
 800c8ba:	5c69      	ldrb	r1, [r5, r1]
 800c8bc:	4698      	mov	r8, r3
 800c8be:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800c8c0:	0021      	movs	r1, r4
 800c8c2:	310a      	adds	r1, #10
 800c8c4:	5c6e      	ldrb	r6, [r5, r1]
 800c8c6:	0636      	lsls	r6, r6, #24
 800c8c8:	3901      	subs	r1, #1
 800c8ca:	5c69      	ldrb	r1, [r5, r1]
 800c8cc:	0409      	lsls	r1, r1, #16
 800c8ce:	1876      	adds	r6, r6, r1
 800c8d0:	0021      	movs	r1, r4
 800c8d2:	3108      	adds	r1, #8
 800c8d4:	5c69      	ldrb	r1, [r5, r1]
 800c8d6:	0209      	lsls	r1, r1, #8
 800c8d8:	1876      	adds	r6, r6, r1
 800c8da:	1de1      	adds	r1, r4, #7
 800c8dc:	5c69      	ldrb	r1, [r5, r1]
 800c8de:	1876      	adds	r6, r6, r1
		StreamGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800c8e0:	1c61      	adds	r1, r4, #1
 800c8e2:	1ca3      	adds	r3, r4, #2
 800c8e4:	5ceb      	ldrb	r3, [r5, r3]
 800c8e6:	469c      	mov	ip, r3
 800c8e8:	5c69      	ldrb	r1, [r5, r1]
 800c8ea:	1a38      	subs	r0, r7, r0
 800c8ec:	00c5      	lsls	r5, r0, #3
 800c8ee:	1952      	adds	r2, r2, r5
 800c8f0:	5d10      	ldrb	r0, [r2, r4]
 800c8f2:	9600      	str	r6, [sp, #0]
 800c8f4:	4643      	mov	r3, r8
 800c8f6:	4662      	mov	r2, ip
 800c8f8:	f7ff f802 	bl	800b900 <StreamGramToPort>
	Module_Status result = H26R0_OK;
 800c8fc:	2000      	movs	r0, #0
			break;
 800c8fe:	e7c6      	b.n	800c88e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t) cMessage[port - 1][5 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c900:	1e48      	subs	r0, r1, #1
 800c902:	1ce1      	adds	r1, r4, #3
 800c904:	4ab6      	ldr	r2, [pc, #728]	; (800cbe0 <Module_MessagingTask+0x388>)
 800c906:	00c7      	lsls	r7, r0, #3
 800c908:	1a3b      	subs	r3, r7, r0
 800c90a:	00dd      	lsls	r5, r3, #3
 800c90c:	1955      	adds	r5, r2, r5
 800c90e:	5c6b      	ldrb	r3, [r5, r1]
 800c910:	061b      	lsls	r3, r3, #24
 800c912:	1d21      	adds	r1, r4, #4
 800c914:	5c69      	ldrb	r1, [r5, r1]
 800c916:	0409      	lsls	r1, r1, #16
 800c918:	185b      	adds	r3, r3, r1
 800c91a:	1d61      	adds	r1, r4, #5
 800c91c:	5c69      	ldrb	r1, [r5, r1]
 800c91e:	0209      	lsls	r1, r1, #8
 800c920:	185b      	adds	r3, r3, r1
 800c922:	1da1      	adds	r1, r4, #6
 800c924:	5c69      	ldrb	r1, [r5, r1]
 800c926:	4698      	mov	r8, r3
 800c928:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t) cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift];
 800c92a:	1de1      	adds	r1, r4, #7
 800c92c:	5c6e      	ldrb	r6, [r5, r1]
 800c92e:	0636      	lsls	r6, r6, #24
 800c930:	3101      	adds	r1, #1
 800c932:	5c69      	ldrb	r1, [r5, r1]
 800c934:	0409      	lsls	r1, r1, #16
 800c936:	1876      	adds	r6, r6, r1
 800c938:	0021      	movs	r1, r4
 800c93a:	3109      	adds	r1, #9
 800c93c:	5c69      	ldrb	r1, [r5, r1]
 800c93e:	0209      	lsls	r1, r1, #8
 800c940:	1876      	adds	r6, r6, r1
 800c942:	0021      	movs	r1, r4
 800c944:	310a      	adds	r1, #10
 800c946:	5c69      	ldrb	r1, [r5, r1]
 800c948:	1876      	adds	r6, r6, r1
		StreamKGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800c94a:	1c61      	adds	r1, r4, #1
 800c94c:	1ca3      	adds	r3, r4, #2
 800c94e:	5ceb      	ldrb	r3, [r5, r3]
 800c950:	469c      	mov	ip, r3
 800c952:	5c69      	ldrb	r1, [r5, r1]
 800c954:	1a38      	subs	r0, r7, r0
 800c956:	00c5      	lsls	r5, r0, #3
 800c958:	1952      	adds	r2, r2, r5
 800c95a:	5d10      	ldrb	r0, [r2, r4]
 800c95c:	9600      	str	r6, [sp, #0]
 800c95e:	4643      	mov	r3, r8
 800c960:	4662      	mov	r2, ip
 800c962:	f7ff f81b 	bl	800b99c <StreamKGramToPort>
	Module_Status result = H26R0_OK;
 800c966:	2000      	movs	r0, #0
			break;
 800c968:	e791      	b.n	800c88e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t) cMessage[port - 1][5 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c96a:	1e48      	subs	r0, r1, #1
 800c96c:	1ce1      	adds	r1, r4, #3
 800c96e:	4a9c      	ldr	r2, [pc, #624]	; (800cbe0 <Module_MessagingTask+0x388>)
 800c970:	00c7      	lsls	r7, r0, #3
 800c972:	1a3b      	subs	r3, r7, r0
 800c974:	00dd      	lsls	r5, r3, #3
 800c976:	1955      	adds	r5, r2, r5
 800c978:	5c6b      	ldrb	r3, [r5, r1]
 800c97a:	061b      	lsls	r3, r3, #24
 800c97c:	1d21      	adds	r1, r4, #4
 800c97e:	5c69      	ldrb	r1, [r5, r1]
 800c980:	0409      	lsls	r1, r1, #16
 800c982:	185b      	adds	r3, r3, r1
 800c984:	1d61      	adds	r1, r4, #5
 800c986:	5c69      	ldrb	r1, [r5, r1]
 800c988:	0209      	lsls	r1, r1, #8
 800c98a:	185b      	adds	r3, r3, r1
 800c98c:	1da1      	adds	r1, r4, #6
 800c98e:	5c69      	ldrb	r1, [r5, r1]
 800c990:	4698      	mov	r8, r3
 800c992:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t) cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift];
 800c994:	1de1      	adds	r1, r4, #7
 800c996:	5c6e      	ldrb	r6, [r5, r1]
 800c998:	0636      	lsls	r6, r6, #24
 800c99a:	3101      	adds	r1, #1
 800c99c:	5c69      	ldrb	r1, [r5, r1]
 800c99e:	0409      	lsls	r1, r1, #16
 800c9a0:	1876      	adds	r6, r6, r1
 800c9a2:	0021      	movs	r1, r4
 800c9a4:	3109      	adds	r1, #9
 800c9a6:	5c69      	ldrb	r1, [r5, r1]
 800c9a8:	0209      	lsls	r1, r1, #8
 800c9aa:	1876      	adds	r6, r6, r1
 800c9ac:	0021      	movs	r1, r4
 800c9ae:	310a      	adds	r1, #10
 800c9b0:	5c69      	ldrb	r1, [r5, r1]
 800c9b2:	1876      	adds	r6, r6, r1
		StreamOunceToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800c9b4:	1c61      	adds	r1, r4, #1
 800c9b6:	1ca3      	adds	r3, r4, #2
 800c9b8:	5ceb      	ldrb	r3, [r5, r3]
 800c9ba:	469c      	mov	ip, r3
 800c9bc:	5c69      	ldrb	r1, [r5, r1]
 800c9be:	1a38      	subs	r0, r7, r0
 800c9c0:	00c5      	lsls	r5, r0, #3
 800c9c2:	1952      	adds	r2, r2, r5
 800c9c4:	5d10      	ldrb	r0, [r2, r4]
 800c9c6:	9600      	str	r6, [sp, #0]
 800c9c8:	4643      	mov	r3, r8
 800c9ca:	4662      	mov	r2, ip
 800c9cc:	f7ff f832 	bl	800ba34 <StreamOunceToPort>
	Module_Status result = H26R0_OK;
 800c9d0:	2000      	movs	r0, #0
			break;
 800c9d2:	e75c      	b.n	800c88e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][3 + shift] << 24) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t) cMessage[port - 1][5 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c9d4:	1e48      	subs	r0, r1, #1
 800c9d6:	1ce1      	adds	r1, r4, #3
 800c9d8:	4a81      	ldr	r2, [pc, #516]	; (800cbe0 <Module_MessagingTask+0x388>)
 800c9da:	00c7      	lsls	r7, r0, #3
 800c9dc:	1a3b      	subs	r3, r7, r0
 800c9de:	00dd      	lsls	r5, r3, #3
 800c9e0:	1955      	adds	r5, r2, r5
 800c9e2:	5c6b      	ldrb	r3, [r5, r1]
 800c9e4:	061b      	lsls	r3, r3, #24
 800c9e6:	1d21      	adds	r1, r4, #4
 800c9e8:	5c69      	ldrb	r1, [r5, r1]
 800c9ea:	0409      	lsls	r1, r1, #16
 800c9ec:	185b      	adds	r3, r3, r1
 800c9ee:	1d61      	adds	r1, r4, #5
 800c9f0:	5c69      	ldrb	r1, [r5, r1]
 800c9f2:	0209      	lsls	r1, r1, #8
 800c9f4:	185b      	adds	r3, r3, r1
 800c9f6:	1da1      	adds	r1, r4, #6
 800c9f8:	5c69      	ldrb	r1, [r5, r1]
 800c9fa:	4698      	mov	r8, r3
 800c9fc:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][7 + shift] << 24) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t) cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift];
 800c9fe:	1de1      	adds	r1, r4, #7
 800ca00:	5c6e      	ldrb	r6, [r5, r1]
 800ca02:	0636      	lsls	r6, r6, #24
 800ca04:	3101      	adds	r1, #1
 800ca06:	5c69      	ldrb	r1, [r5, r1]
 800ca08:	0409      	lsls	r1, r1, #16
 800ca0a:	1876      	adds	r6, r6, r1
 800ca0c:	0021      	movs	r1, r4
 800ca0e:	3109      	adds	r1, #9
 800ca10:	5c69      	ldrb	r1, [r5, r1]
 800ca12:	0209      	lsls	r1, r1, #8
 800ca14:	1876      	adds	r6, r6, r1
 800ca16:	0021      	movs	r1, r4
 800ca18:	310a      	adds	r1, #10
 800ca1a:	5c69      	ldrb	r1, [r5, r1]
 800ca1c:	1876      	adds	r6, r6, r1
		StreamPoundToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800ca1e:	1c61      	adds	r1, r4, #1
 800ca20:	1ca3      	adds	r3, r4, #2
 800ca22:	5ceb      	ldrb	r3, [r5, r3]
 800ca24:	469c      	mov	ip, r3
 800ca26:	5c69      	ldrb	r1, [r5, r1]
 800ca28:	1a38      	subs	r0, r7, r0
 800ca2a:	00c5      	lsls	r5, r0, #3
 800ca2c:	1952      	adds	r2, r2, r5
 800ca2e:	5d10      	ldrb	r0, [r2, r4]
 800ca30:	9600      	str	r6, [sp, #0]
 800ca32:	4643      	mov	r3, r8
 800ca34:	4662      	mov	r2, ip
 800ca36:	f7ff f84b 	bl	800bad0 <StreamPoundToPort>
	Module_Status result = H26R0_OK;
 800ca3a:	2000      	movs	r0, #0
			break;
 800ca3c:	e727      	b.n	800c88e <Module_MessagingTask+0x36>
			global_mode=IDLE_CASE;
 800ca3e:	4b69      	ldr	r3, [pc, #420]	; (800cbe4 <Module_MessagingTask+0x38c>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	701a      	strb	r2, [r3, #0]
			PowerDown();
 800ca44:	f7ff fb1e 	bl	800c084 <PowerDown>
			xTimerStop( xTimer, portMAX_DELAY );
 800ca48:	4b67      	ldr	r3, [pc, #412]	; (800cbe8 <Module_MessagingTask+0x390>)
 800ca4a:	6818      	ldr	r0, [r3, #0]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	425b      	negs	r3, r3
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	2300      	movs	r3, #0
 800ca54:	2200      	movs	r2, #0
 800ca56:	2103      	movs	r1, #3
 800ca58:	f003 ff80 	bl	801095c <xTimerGenericCommand>
	Module_Status result = H26R0_OK;
 800ca5c:	2000      	movs	r0, #0
			break;
 800ca5e:	e716      	b.n	800c88e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800ca60:	3901      	subs	r1, #1
 800ca62:	00cb      	lsls	r3, r1, #3
 800ca64:	1a59      	subs	r1, r3, r1
 800ca66:	00ca      	lsls	r2, r1, #3
 800ca68:	4b5d      	ldr	r3, [pc, #372]	; (800cbe0 <Module_MessagingTask+0x388>)
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	5d18      	ldrb	r0, [r3, r4]
 800ca6e:	2801      	cmp	r0, #1
 800ca70:	d005      	beq.n	800ca7e <Module_MessagingTask+0x226>
				H26R0_Weight2=SampleGram(cMessage[port-1][shift]);
 800ca72:	f7ff fb45 	bl	800c100 <SampleGram>
 800ca76:	4b5d      	ldr	r3, [pc, #372]	; (800cbec <Module_MessagingTask+0x394>)
 800ca78:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	e707      	b.n	800c88e <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleGram(cMessage[port-1][shift]);
 800ca7e:	f7ff fb3f 	bl	800c100 <SampleGram>
 800ca82:	4b5b      	ldr	r3, [pc, #364]	; (800cbf0 <Module_MessagingTask+0x398>)
 800ca84:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800ca86:	2000      	movs	r0, #0
 800ca88:	e701      	b.n	800c88e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800ca8a:	3901      	subs	r1, #1
 800ca8c:	00cb      	lsls	r3, r1, #3
 800ca8e:	1a59      	subs	r1, r3, r1
 800ca90:	00ca      	lsls	r2, r1, #3
 800ca92:	4b53      	ldr	r3, [pc, #332]	; (800cbe0 <Module_MessagingTask+0x388>)
 800ca94:	189b      	adds	r3, r3, r2
 800ca96:	5d18      	ldrb	r0, [r3, r4]
 800ca98:	2801      	cmp	r0, #1
 800ca9a:	d005      	beq.n	800caa8 <Module_MessagingTask+0x250>
				H26R0_Weight2=SampleKGram(cMessage[port-1][shift]);	
 800ca9c:	f7ff fb4a 	bl	800c134 <SampleKGram>
 800caa0:	4b52      	ldr	r3, [pc, #328]	; (800cbec <Module_MessagingTask+0x394>)
 800caa2:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800caa4:	2000      	movs	r0, #0
 800caa6:	e6f2      	b.n	800c88e <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleKGram(cMessage[port-1][shift]);
 800caa8:	f7ff fb44 	bl	800c134 <SampleKGram>
 800caac:	4b50      	ldr	r3, [pc, #320]	; (800cbf0 <Module_MessagingTask+0x398>)
 800caae:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cab0:	2000      	movs	r0, #0
 800cab2:	e6ec      	b.n	800c88e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800cab4:	3901      	subs	r1, #1
 800cab6:	00cb      	lsls	r3, r1, #3
 800cab8:	1a59      	subs	r1, r3, r1
 800caba:	00ca      	lsls	r2, r1, #3
 800cabc:	4b48      	ldr	r3, [pc, #288]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	5d18      	ldrb	r0, [r3, r4]
 800cac2:	2801      	cmp	r0, #1
 800cac4:	d005      	beq.n	800cad2 <Module_MessagingTask+0x27a>
				H26R0_Weight2=SampleOunce(cMessage[port-1][shift]);	
 800cac6:	f7ff fb49 	bl	800c15c <SampleOunce>
 800caca:	4b48      	ldr	r3, [pc, #288]	; (800cbec <Module_MessagingTask+0x394>)
 800cacc:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cace:	2000      	movs	r0, #0
 800cad0:	e6dd      	b.n	800c88e <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleOunce(cMessage[port-1][shift]);
 800cad2:	f7ff fb43 	bl	800c15c <SampleOunce>
 800cad6:	4b46      	ldr	r3, [pc, #280]	; (800cbf0 <Module_MessagingTask+0x398>)
 800cad8:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cada:	2000      	movs	r0, #0
 800cadc:	e6d7      	b.n	800c88e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800cade:	3901      	subs	r1, #1
 800cae0:	00cb      	lsls	r3, r1, #3
 800cae2:	1a59      	subs	r1, r3, r1
 800cae4:	00ca      	lsls	r2, r1, #3
 800cae6:	4b3e      	ldr	r3, [pc, #248]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cae8:	189b      	adds	r3, r3, r2
 800caea:	5d18      	ldrb	r0, [r3, r4]
 800caec:	2801      	cmp	r0, #1
 800caee:	d005      	beq.n	800cafc <Module_MessagingTask+0x2a4>
				H26R0_Weight2=SamplePound(cMessage[port-1][shift]);
 800caf0:	f7ff fb54 	bl	800c19c <SamplePound>
 800caf4:	4b3d      	ldr	r3, [pc, #244]	; (800cbec <Module_MessagingTask+0x394>)
 800caf6:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800caf8:	2000      	movs	r0, #0
 800cafa:	e6c8      	b.n	800c88e <Module_MessagingTask+0x36>
				H26R0_Weight1=SamplePound(cMessage[port-1][shift]);
 800cafc:	f7ff fb4e 	bl	800c19c <SamplePound>
 800cb00:	4b3b      	ldr	r3, [pc, #236]	; (800cbf0 <Module_MessagingTask+0x398>)
 800cb02:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cb04:	2000      	movs	r0, #0
 800cb06:	e6c2      	b.n	800c88e <Module_MessagingTask+0x36>
				ZeroCal(cMessage[port-1][shift]);
 800cb08:	3901      	subs	r1, #1
 800cb0a:	00cb      	lsls	r3, r1, #3
 800cb0c:	1a59      	subs	r1, r3, r1
 800cb0e:	00ca      	lsls	r2, r1, #3
 800cb10:	4b33      	ldr	r3, [pc, #204]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cb12:	189b      	adds	r3, r3, r2
 800cb14:	5d18      	ldrb	r0, [r3, r4]
 800cb16:	f7ff fe13 	bl	800c740 <ZeroCal>
	Module_Status result = H26R0_OK;
 800cb1a:	2000      	movs	r0, #0
			break;
 800cb1c:	e6b7      	b.n	800c88e <Module_MessagingTask+0x36>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800cb1e:	1e4d      	subs	r5, r1, #1
 800cb20:	1c62      	adds	r2, r4, #1
 800cb22:	4b2f      	ldr	r3, [pc, #188]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cb24:	4698      	mov	r8, r3
 800cb26:	00ef      	lsls	r7, r5, #3
 800cb28:	1b7b      	subs	r3, r7, r5
 800cb2a:	00d8      	lsls	r0, r3, #3
 800cb2c:	4440      	add	r0, r8
 800cb2e:	5c83      	ldrb	r3, [r0, r2]
 800cb30:	061b      	lsls	r3, r3, #24
 800cb32:	1ca2      	adds	r2, r4, #2
 800cb34:	5c82      	ldrb	r2, [r0, r2]
 800cb36:	0412      	lsls	r2, r2, #16
 800cb38:	189b      	adds	r3, r3, r2
 800cb3a:	1ce2      	adds	r2, r4, #3
 800cb3c:	5c82      	ldrb	r2, [r0, r2]
 800cb3e:	0212      	lsls	r2, r2, #8
 800cb40:	189b      	adds	r3, r3, r2
 800cb42:	1d22      	adds	r2, r4, #4
 800cb44:	5c82      	ldrb	r2, [r0, r2]
 800cb46:	189b      	adds	r3, r3, r2
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800cb48:	1d62      	adds	r2, r4, #5
 800cb4a:	5c86      	ldrb	r6, [r0, r2]
 800cb4c:	0636      	lsls	r6, r6, #24
 800cb4e:	1da2      	adds	r2, r4, #6
 800cb50:	5c82      	ldrb	r2, [r0, r2]
 800cb52:	0412      	lsls	r2, r2, #16
 800cb54:	18b6      	adds	r6, r6, r2
 800cb56:	1de2      	adds	r2, r4, #7
 800cb58:	5c82      	ldrb	r2, [r0, r2]
 800cb5a:	0212      	lsls	r2, r2, #8
 800cb5c:	18b6      	adds	r6, r6, r2
 800cb5e:	0022      	movs	r2, r4
 800cb60:	3208      	adds	r2, #8
 800cb62:	5c82      	ldrb	r2, [r0, r2]
 800cb64:	18b6      	adds	r6, r6, r2
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cb66:	0021      	movs	r1, r4
 800cb68:	3109      	adds	r1, #9
 800cb6a:	0022      	movs	r2, r4
 800cb6c:	320a      	adds	r2, #10
 800cb6e:	5c82      	ldrb	r2, [r0, r2]
 800cb70:	5c41      	ldrb	r1, [r0, r1]
 800cb72:	5d00      	ldrb	r0, [r0, r4]
 800cb74:	9600      	str	r6, [sp, #0]
 800cb76:	f7ff f8e5 	bl	800bd44 <StreamRawToPort>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800cb7a:	1b7d      	subs	r5, r7, r5
 800cb7c:	00eb      	lsls	r3, r5, #3
 800cb7e:	4443      	add	r3, r8
 800cb80:	5d18      	ldrb	r0, [r3, r4]
 800cb82:	2101      	movs	r1, #1
 800cb84:	f7ff fb2a 	bl	800c1dc <Average>
 800cb88:	4b18      	ldr	r3, [pc, #96]	; (800cbec <Module_MessagingTask+0x394>)
 800cb8a:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cb8c:	2000      	movs	r0, #0
			break;
 800cb8e:	e67e      	b.n	800c88e <Module_MessagingTask+0x36>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800cb90:	3901      	subs	r1, #1
 800cb92:	00cb      	lsls	r3, r1, #3
 800cb94:	1a59      	subs	r1, r3, r1
 800cb96:	00ca      	lsls	r2, r1, #3
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cb9a:	189b      	adds	r3, r3, r2
 800cb9c:	5d18      	ldrb	r0, [r3, r4]
 800cb9e:	2101      	movs	r1, #1
 800cba0:	f7ff fb1c 	bl	800c1dc <Average>
 800cba4:	4b11      	ldr	r3, [pc, #68]	; (800cbec <Module_MessagingTask+0x394>)
 800cba6:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800cba8:	2000      	movs	r0, #0
			break;
 800cbaa:	e670      	b.n	800c88e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0)
 800cbac:	3901      	subs	r1, #1
 800cbae:	00cb      	lsls	r3, r1, #3
 800cbb0:	1a59      	subs	r1, r3, r1
 800cbb2:	00ca      	lsls	r2, r1, #3
 800cbb4:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <Module_MessagingTask+0x388>)
 800cbb6:	189b      	adds	r3, r3, r2
 800cbb8:	5d1b      	ldrb	r3, [r3, r4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d004      	beq.n	800cbc8 <Module_MessagingTask+0x370>
				H26R0_DATA_FORMAT = FMT_FLOAT;
 800cbbe:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <Module_MessagingTask+0x39c>)
 800cbc0:	2207      	movs	r2, #7
 800cbc2:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e662      	b.n	800c88e <Module_MessagingTask+0x36>
				H26R0_DATA_FORMAT = FMT_UINT32;
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <Module_MessagingTask+0x39c>)
 800cbca:	2205      	movs	r2, #5
 800cbcc:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e65d      	b.n	800c88e <Module_MessagingTask+0x36>
			result = H26R0_ERR_UnknownMessage;
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	e65b      	b.n	800c88e <Module_MessagingTask+0x36>
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	fffff894 	.word	0xfffff894
 800cbdc:	0801b1b8 	.word	0x0801b1b8
 800cbe0:	20000b34 	.word	0x20000b34
 800cbe4:	20006b05 	.word	0x20006b05
 800cbe8:	200017a8 	.word	0x200017a8
 800cbec:	20001364 	.word	0x20001364
 800cbf0:	20001360 	.word	0x20001360
 800cbf4:	200000c0 	.word	0x200000c0

0800cbf8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cbf8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cbfa:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cc00:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800cc02:	2280      	movs	r2, #128	; 0x80
 800cc04:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cc06:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cc08:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cc0a:	3320      	adds	r3, #32
 800cc0c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cc0e:	2380      	movs	r3, #128	; 0x80
 800cc10:	019b      	lsls	r3, r3, #6
 800cc12:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cc14:	f004 fb8e 	bl	8011334 <HAL_DMA_Init>
}
 800cc18:	bd10      	pop	{r4, pc}

0800cc1a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cc1a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cc1c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cc1e:	2310      	movs	r3, #16
 800cc20:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800cc26:	2280      	movs	r2, #128	; 0x80
 800cc28:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cc2a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cc2c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800cc2e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cc30:	2380      	movs	r3, #128	; 0x80
 800cc32:	019b      	lsls	r3, r3, #6
 800cc34:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cc36:	f004 fb7d 	bl	8011334 <HAL_DMA_Init>
}
 800cc3a:	bd10      	pop	{r4, pc}

0800cc3c <DMA_Init>:
{
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800cc40:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <DMA_Init+0x7c>)
 800cc42:	6959      	ldr	r1, [r3, #20]
 800cc44:	2201      	movs	r2, #1
 800cc46:	4311      	orrs	r1, r2
 800cc48:	6159      	str	r1, [r3, #20]
 800cc4a:	6959      	ldr	r1, [r3, #20]
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	9200      	str	r2, [sp, #0]
 800cc50:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800cc52:	6959      	ldr	r1, [r3, #20]
 800cc54:	2202      	movs	r2, #2
 800cc56:	4311      	orrs	r1, r2
 800cc58:	6159      	str	r1, [r3, #20]
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	401a      	ands	r2, r3
 800cc5e:	9201      	str	r2, [sp, #4]
 800cc60:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800cc62:	4c16      	ldr	r4, [pc, #88]	; (800ccbc <DMA_Init+0x80>)
 800cc64:	4916      	ldr	r1, [pc, #88]	; (800ccc0 <DMA_Init+0x84>)
 800cc66:	0020      	movs	r0, r4
 800cc68:	f7ff ffc6 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800cc6c:	0020      	movs	r0, r4
 800cc6e:	3038      	adds	r0, #56	; 0x38
 800cc70:	4914      	ldr	r1, [pc, #80]	; (800ccc4 <DMA_Init+0x88>)
 800cc72:	f7ff ffc1 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800cc76:	0020      	movs	r0, r4
 800cc78:	3070      	adds	r0, #112	; 0x70
 800cc7a:	4913      	ldr	r1, [pc, #76]	; (800ccc8 <DMA_Init+0x8c>)
 800cc7c:	f7ff ffbc 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800cc80:	0020      	movs	r0, r4
 800cc82:	30a8      	adds	r0, #168	; 0xa8
 800cc84:	4911      	ldr	r1, [pc, #68]	; (800cccc <DMA_Init+0x90>)
 800cc86:	f7ff ffb7 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800cc8a:	0020      	movs	r0, r4
 800cc8c:	30e0      	adds	r0, #224	; 0xe0
 800cc8e:	4910      	ldr	r1, [pc, #64]	; (800ccd0 <DMA_Init+0x94>)
 800cc90:	f7ff ffb2 	bl	800cbf8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800cc94:	4c0f      	ldr	r4, [pc, #60]	; (800ccd4 <DMA_Init+0x98>)
 800cc96:	4910      	ldr	r1, [pc, #64]	; (800ccd8 <DMA_Init+0x9c>)
 800cc98:	0020      	movs	r0, r4
 800cc9a:	f7ff ffbe 	bl	800cc1a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800cc9e:	0020      	movs	r0, r4
 800cca0:	3038      	adds	r0, #56	; 0x38
 800cca2:	490e      	ldr	r1, [pc, #56]	; (800ccdc <DMA_Init+0xa0>)
 800cca4:	f7ff ffb9 	bl	800cc1a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800cca8:	0020      	movs	r0, r4
 800ccaa:	3070      	adds	r0, #112	; 0x70
 800ccac:	490c      	ldr	r1, [pc, #48]	; (800cce0 <DMA_Init+0xa4>)
 800ccae:	f7ff ffb4 	bl	800cc1a <DMA_MSG_TX_CH_Init>
}
 800ccb2:	b002      	add	sp, #8
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	46c0      	nop			; (mov r8, r8)
 800ccb8:	40021000 	.word	0x40021000
 800ccbc:	200017ac 	.word	0x200017ac
 800ccc0:	40020008 	.word	0x40020008
 800ccc4:	40020030 	.word	0x40020030
 800ccc8:	40020058 	.word	0x40020058
 800cccc:	4002006c 	.word	0x4002006c
 800ccd0:	4002041c 	.word	0x4002041c
 800ccd4:	200018fc 	.word	0x200018fc
 800ccd8:	4002001c 	.word	0x4002001c
 800ccdc:	40020044 	.word	0x40020044
 800cce0:	40020080 	.word	0x40020080

0800cce4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cce4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cce6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cce8:	2300      	movs	r3, #0
 800ccea:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ccec:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ccee:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ccf0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ccf2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ccf4:	3320      	adds	r3, #32
 800ccf6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ccf8:	2380      	movs	r3, #128	; 0x80
 800ccfa:	015b      	lsls	r3, r3, #5
 800ccfc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ccfe:	f004 fb19 	bl	8011334 <HAL_DMA_Init>
}
 800cd02:	bd10      	pop	{r4, pc}

0800cd04 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800cd04:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	4a20      	ldr	r2, [pc, #128]	; (800cd8c <SetupDMAInterrupts+0x88>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d020      	beq.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd0e:	d827      	bhi.n	800cd60 <SetupDMAInterrupts+0x5c>
 800cd10:	4a1f      	ldr	r2, [pc, #124]	; (800cd90 <SetupDMAInterrupts+0x8c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d00e      	beq.n	800cd34 <SetupDMAInterrupts+0x30>
 800cd16:	d815      	bhi.n	800cd44 <SetupDMAInterrupts+0x40>
 800cd18:	4a1e      	ldr	r2, [pc, #120]	; (800cd94 <SetupDMAInterrupts+0x90>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d107      	bne.n	800cd2e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cd1e:	2200      	movs	r2, #0
 800cd20:	2009      	movs	r0, #9
 800cd22:	f004 f969 	bl	8010ff8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cd26:	2009      	movs	r0, #9
 800cd28:	f004 f996 	bl	8011058 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cd2c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cd2e:	4a1a      	ldr	r2, [pc, #104]	; (800cd98 <SetupDMAInterrupts+0x94>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d1fb      	bne.n	800cd2c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800cd34:	2200      	movs	r2, #0
 800cd36:	200a      	movs	r0, #10
 800cd38:	f004 f95e 	bl	8010ff8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cd3c:	200a      	movs	r0, #10
 800cd3e:	f004 f98b 	bl	8011058 <HAL_NVIC_EnableIRQ>
			break;
 800cd42:	e7f3      	b.n	800cd2c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cd44:	4a15      	ldr	r2, [pc, #84]	; (800cd9c <SetupDMAInterrupts+0x98>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d002      	beq.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd4a:	4a15      	ldr	r2, [pc, #84]	; (800cda0 <SetupDMAInterrupts+0x9c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d1ed      	bne.n	800cd2c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800cd50:	2200      	movs	r2, #0
 800cd52:	200b      	movs	r0, #11
 800cd54:	f004 f950 	bl	8010ff8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cd58:	200b      	movs	r0, #11
 800cd5a:	f004 f97d 	bl	8011058 <HAL_NVIC_EnableIRQ>
}
 800cd5e:	e7e5      	b.n	800cd2c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cd60:	4a10      	ldr	r2, [pc, #64]	; (800cda4 <SetupDMAInterrupts+0xa0>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d0e6      	beq.n	800cd34 <SetupDMAInterrupts+0x30>
 800cd66:	d909      	bls.n	800cd7c <SetupDMAInterrupts+0x78>
 800cd68:	4a0f      	ldr	r2, [pc, #60]	; (800cda8 <SetupDMAInterrupts+0xa4>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d0f0      	beq.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd6e:	4a0f      	ldr	r2, [pc, #60]	; (800cdac <SetupDMAInterrupts+0xa8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d0ed      	beq.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd74:	4a0e      	ldr	r2, [pc, #56]	; (800cdb0 <SetupDMAInterrupts+0xac>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d1d8      	bne.n	800cd2c <SetupDMAInterrupts+0x28>
 800cd7a:	e7e9      	b.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd7c:	4a0d      	ldr	r2, [pc, #52]	; (800cdb4 <SetupDMAInterrupts+0xb0>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d0e6      	beq.n	800cd50 <SetupDMAInterrupts+0x4c>
 800cd82:	4a0d      	ldr	r2, [pc, #52]	; (800cdb8 <SetupDMAInterrupts+0xb4>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d0d5      	beq.n	800cd34 <SetupDMAInterrupts+0x30>
 800cd88:	e7d0      	b.n	800cd2c <SetupDMAInterrupts+0x28>
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	4002006c 	.word	0x4002006c
 800cd90:	40020030 	.word	0x40020030
 800cd94:	40020008 	.word	0x40020008
 800cd98:	4002001c 	.word	0x4002001c
 800cd9c:	40020044 	.word	0x40020044
 800cda0:	40020058 	.word	0x40020058
 800cda4:	4002041c 	.word	0x4002041c
 800cda8:	40020444 	.word	0x40020444
 800cdac:	40020458 	.word	0x40020458
 800cdb0:	40020430 	.word	0x40020430
 800cdb4:	40020080 	.word	0x40020080
 800cdb8:	40020408 	.word	0x40020408

0800cdbc <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800cdbc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cdbe:	6803      	ldr	r3, [r0, #0]
 800cdc0:	4a1a      	ldr	r2, [pc, #104]	; (800ce2c <UnSetupDMAInterrupts+0x70>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d018      	beq.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800cdc6:	d81b      	bhi.n	800ce00 <UnSetupDMAInterrupts+0x44>
 800cdc8:	4a19      	ldr	r2, [pc, #100]	; (800ce30 <UnSetupDMAInterrupts+0x74>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d00a      	beq.n	800cde4 <UnSetupDMAInterrupts+0x28>
 800cdce:	d80d      	bhi.n	800cdec <UnSetupDMAInterrupts+0x30>
 800cdd0:	4a18      	ldr	r2, [pc, #96]	; (800ce34 <UnSetupDMAInterrupts+0x78>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d103      	bne.n	800cdde <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cdd6:	2009      	movs	r0, #9
 800cdd8:	f004 f948 	bl	801106c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cddc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cdde:	4a16      	ldr	r2, [pc, #88]	; (800ce38 <UnSetupDMAInterrupts+0x7c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d1fb      	bne.n	800cddc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cde4:	200a      	movs	r0, #10
 800cde6:	f004 f941 	bl	801106c <HAL_NVIC_DisableIRQ>
			break;
 800cdea:	e7f7      	b.n	800cddc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cdec:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <UnSetupDMAInterrupts+0x80>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d002      	beq.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800cdf2:	4a13      	ldr	r2, [pc, #76]	; (800ce40 <UnSetupDMAInterrupts+0x84>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d1f1      	bne.n	800cddc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cdf8:	200b      	movs	r0, #11
 800cdfa:	f004 f937 	bl	801106c <HAL_NVIC_DisableIRQ>
}
 800cdfe:	e7ed      	b.n	800cddc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800ce00:	4a10      	ldr	r2, [pc, #64]	; (800ce44 <UnSetupDMAInterrupts+0x88>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d0ee      	beq.n	800cde4 <UnSetupDMAInterrupts+0x28>
 800ce06:	d909      	bls.n	800ce1c <UnSetupDMAInterrupts+0x60>
 800ce08:	4a0f      	ldr	r2, [pc, #60]	; (800ce48 <UnSetupDMAInterrupts+0x8c>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d0f4      	beq.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800ce0e:	4a0f      	ldr	r2, [pc, #60]	; (800ce4c <UnSetupDMAInterrupts+0x90>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d0f1      	beq.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800ce14:	4a0e      	ldr	r2, [pc, #56]	; (800ce50 <UnSetupDMAInterrupts+0x94>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d1e0      	bne.n	800cddc <UnSetupDMAInterrupts+0x20>
 800ce1a:	e7ed      	b.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800ce1c:	4a0d      	ldr	r2, [pc, #52]	; (800ce54 <UnSetupDMAInterrupts+0x98>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d0ea      	beq.n	800cdf8 <UnSetupDMAInterrupts+0x3c>
 800ce22:	4a0d      	ldr	r2, [pc, #52]	; (800ce58 <UnSetupDMAInterrupts+0x9c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d0dd      	beq.n	800cde4 <UnSetupDMAInterrupts+0x28>
 800ce28:	e7d8      	b.n	800cddc <UnSetupDMAInterrupts+0x20>
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	4002006c 	.word	0x4002006c
 800ce30:	40020030 	.word	0x40020030
 800ce34:	40020008 	.word	0x40020008
 800ce38:	4002001c 	.word	0x4002001c
 800ce3c:	40020044 	.word	0x40020044
 800ce40:	40020058 	.word	0x40020058
 800ce44:	4002041c 	.word	0x4002041c
 800ce48:	40020444 	.word	0x40020444
 800ce4c:	40020458 	.word	0x40020458
 800ce50:	40020430 	.word	0x40020430
 800ce54:	40020080 	.word	0x40020080
 800ce58:	40020408 	.word	0x40020408

0800ce5c <DMA_MSG_TX_UnSetup>:
{	
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ce60:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ce62:	f7ff ffab 	bl	800cdbc <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ce66:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ce6c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ce6e:	bd10      	pop	{r4, pc}

0800ce70 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ce70:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	4acc      	ldr	r2, [pc, #816]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d100      	bne.n	800ce7c <RemapAndLinkDMAtoUARTRx+0xc>
 800ce7a:	e0ca      	b.n	800d012 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800ce7c:	4aca      	ldr	r2, [pc, #808]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d100      	bne.n	800ce84 <RemapAndLinkDMAtoUARTRx+0x14>
 800ce82:	e0d8      	b.n	800d036 <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800ce84:	4ac8      	ldr	r2, [pc, #800]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d100      	bne.n	800ce8c <RemapAndLinkDMAtoUARTRx+0x1c>
 800ce8a:	e0e5      	b.n	800d058 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800ce8c:	4ac6      	ldr	r2, [pc, #792]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d100      	bne.n	800ce94 <RemapAndLinkDMAtoUARTRx+0x24>
 800ce92:	e0f2      	b.n	800d07a <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800ce94:	4ac4      	ldr	r2, [pc, #784]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d100      	bne.n	800ce9c <RemapAndLinkDMAtoUARTRx+0x2c>
 800ce9a:	e0ff      	b.n	800d09c <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ce9c:	4ac2      	ldr	r2, [pc, #776]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d100      	bne.n	800cea4 <RemapAndLinkDMAtoUARTRx+0x34>
 800cea2:	e10b      	b.n	800d0bc <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cea4:	4ac1      	ldr	r2, [pc, #772]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d100      	bne.n	800ceac <RemapAndLinkDMAtoUARTRx+0x3c>
 800ceaa:	e118      	b.n	800d0de <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ceac:	4abf      	ldr	r2, [pc, #764]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d100      	bne.n	800ceb4 <RemapAndLinkDMAtoUARTRx+0x44>
 800ceb2:	e124      	b.n	800d0fe <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ceb4:	4abd      	ldr	r2, [pc, #756]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d100      	bne.n	800cebc <RemapAndLinkDMAtoUARTRx+0x4c>
 800ceba:	e131      	b.n	800d120 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800cebc:	4abb      	ldr	r2, [pc, #748]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d100      	bne.n	800cec4 <RemapAndLinkDMAtoUARTRx+0x54>
 800cec2:	e13e      	b.n	800d142 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800cec4:	4ab9      	ldr	r2, [pc, #740]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d100      	bne.n	800cecc <RemapAndLinkDMAtoUARTRx+0x5c>
 800ceca:	e14b      	b.n	800d164 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800cecc:	4ab7      	ldr	r2, [pc, #732]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d100      	bne.n	800ced4 <RemapAndLinkDMAtoUARTRx+0x64>
 800ced2:	e157      	b.n	800d184 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ced4:	4ab6      	ldr	r2, [pc, #728]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d100      	bne.n	800cedc <RemapAndLinkDMAtoUARTRx+0x6c>
 800ceda:	e18b      	b.n	800d1f4 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cedc:	4ab4      	ldr	r2, [pc, #720]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d100      	bne.n	800cee4 <RemapAndLinkDMAtoUARTRx+0x74>
 800cee2:	e197      	b.n	800d214 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cee4:	4ab2      	ldr	r2, [pc, #712]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d100      	bne.n	800ceec <RemapAndLinkDMAtoUARTRx+0x7c>
 800ceea:	e1a4      	b.n	800d236 <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ceec:	4ab0      	ldr	r2, [pc, #704]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d100      	bne.n	800cef4 <RemapAndLinkDMAtoUARTRx+0x84>
 800cef2:	e1b1      	b.n	800d258 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cef4:	4aae      	ldr	r2, [pc, #696]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d100      	bne.n	800cefc <RemapAndLinkDMAtoUARTRx+0x8c>
 800cefa:	e1be      	b.n	800d27a <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cefc:	4aac      	ldr	r2, [pc, #688]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d100      	bne.n	800cf04 <RemapAndLinkDMAtoUARTRx+0x94>
 800cf02:	e1ca      	b.n	800d29a <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cf04:	4aab      	ldr	r2, [pc, #684]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d100      	bne.n	800cf0c <RemapAndLinkDMAtoUARTRx+0x9c>
 800cf0a:	e1d7      	b.n	800d2bc <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cf0c:	4aa9      	ldr	r2, [pc, #676]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d100      	bne.n	800cf14 <RemapAndLinkDMAtoUARTRx+0xa4>
 800cf12:	e1e3      	b.n	800d2dc <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cf14:	4aa7      	ldr	r2, [pc, #668]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d100      	bne.n	800cf1c <RemapAndLinkDMAtoUARTRx+0xac>
 800cf1a:	e1f0      	b.n	800d2fe <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cf1c:	4aa5      	ldr	r2, [pc, #660]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d100      	bne.n	800cf24 <RemapAndLinkDMAtoUARTRx+0xb4>
 800cf22:	e1fd      	b.n	800d320 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cf24:	4aa3      	ldr	r2, [pc, #652]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d100      	bne.n	800cf2c <RemapAndLinkDMAtoUARTRx+0xbc>
 800cf2a:	e20a      	b.n	800d342 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cf2c:	4aa1      	ldr	r2, [pc, #644]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d100      	bne.n	800cf34 <RemapAndLinkDMAtoUARTRx+0xc4>
 800cf32:	e216      	b.n	800d362 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cf34:	4aa0      	ldr	r2, [pc, #640]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d100      	bne.n	800cf3c <RemapAndLinkDMAtoUARTRx+0xcc>
 800cf3a:	e223      	b.n	800d384 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800cf3c:	4a9e      	ldr	r2, [pc, #632]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d100      	bne.n	800cf44 <RemapAndLinkDMAtoUARTRx+0xd4>
 800cf42:	e22f      	b.n	800d3a4 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800cf44:	4a9c      	ldr	r2, [pc, #624]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d100      	bne.n	800cf4c <RemapAndLinkDMAtoUARTRx+0xdc>
 800cf4a:	e23c      	b.n	800d3c6 <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800cf4c:	4a9a      	ldr	r2, [pc, #616]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d100      	bne.n	800cf54 <RemapAndLinkDMAtoUARTRx+0xe4>
 800cf52:	e249      	b.n	800d3e8 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800cf54:	4a98      	ldr	r2, [pc, #608]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d100      	bne.n	800cf5c <RemapAndLinkDMAtoUARTRx+0xec>
 800cf5a:	e256      	b.n	800d40a <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800cf5c:	4a96      	ldr	r2, [pc, #600]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d100      	bne.n	800cf64 <RemapAndLinkDMAtoUARTRx+0xf4>
 800cf62:	e262      	b.n	800d42a <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cf64:	4a95      	ldr	r2, [pc, #596]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d100      	bne.n	800cf6c <RemapAndLinkDMAtoUARTRx+0xfc>
 800cf6a:	e26f      	b.n	800d44c <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cf6c:	4a93      	ldr	r2, [pc, #588]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d100      	bne.n	800cf74 <RemapAndLinkDMAtoUARTRx+0x104>
 800cf72:	e27b      	b.n	800d46c <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cf74:	4a91      	ldr	r2, [pc, #580]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d100      	bne.n	800cf7c <RemapAndLinkDMAtoUARTRx+0x10c>
 800cf7a:	e288      	b.n	800d48e <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cf7c:	4a8f      	ldr	r2, [pc, #572]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d100      	bne.n	800cf84 <RemapAndLinkDMAtoUARTRx+0x114>
 800cf82:	e295      	b.n	800d4b0 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cf84:	4a8d      	ldr	r2, [pc, #564]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d100      	bne.n	800cf8c <RemapAndLinkDMAtoUARTRx+0x11c>
 800cf8a:	e2a2      	b.n	800d4d2 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cf8c:	4a8b      	ldr	r2, [pc, #556]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d100      	bne.n	800cf94 <RemapAndLinkDMAtoUARTRx+0x124>
 800cf92:	e2ae      	b.n	800d4f2 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cf94:	4a8a      	ldr	r2, [pc, #552]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d100      	bne.n	800cf9c <RemapAndLinkDMAtoUARTRx+0x12c>
 800cf9a:	e2bb      	b.n	800d514 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cf9c:	4a88      	ldr	r2, [pc, #544]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d100      	bne.n	800cfa4 <RemapAndLinkDMAtoUARTRx+0x134>
 800cfa2:	e2c7      	b.n	800d534 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cfa4:	4a86      	ldr	r2, [pc, #536]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d100      	bne.n	800cfac <RemapAndLinkDMAtoUARTRx+0x13c>
 800cfaa:	e2d4      	b.n	800d556 <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800cfac:	4a84      	ldr	r2, [pc, #528]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d100      	bne.n	800cfb4 <RemapAndLinkDMAtoUARTRx+0x144>
 800cfb2:	e2f7      	b.n	800d5a4 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800cfb4:	4a82      	ldr	r2, [pc, #520]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d100      	bne.n	800cfbc <RemapAndLinkDMAtoUARTRx+0x14c>
 800cfba:	e304      	b.n	800d5c6 <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800cfbc:	4a80      	ldr	r2, [pc, #512]	; (800d1c0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d100      	bne.n	800cfc4 <RemapAndLinkDMAtoUARTRx+0x154>
 800cfc2:	e310      	b.n	800d5e6 <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800cfc4:	4a7f      	ldr	r2, [pc, #508]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d100      	bne.n	800cfcc <RemapAndLinkDMAtoUARTRx+0x15c>
 800cfca:	e31d      	b.n	800d608 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800cfcc:	4a7d      	ldr	r2, [pc, #500]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d100      	bne.n	800cfd4 <RemapAndLinkDMAtoUARTRx+0x164>
 800cfd2:	e328      	b.n	800d626 <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800cfd4:	4a7b      	ldr	r2, [pc, #492]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d100      	bne.n	800cfdc <RemapAndLinkDMAtoUARTRx+0x16c>
 800cfda:	e335      	b.n	800d648 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800cfdc:	4a79      	ldr	r2, [pc, #484]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d100      	bne.n	800cfe4 <RemapAndLinkDMAtoUARTRx+0x174>
 800cfe2:	e342      	b.n	800d66a <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800cfe4:	4a77      	ldr	r2, [pc, #476]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d100      	bne.n	800cfec <RemapAndLinkDMAtoUARTRx+0x17c>
 800cfea:	e34f      	b.n	800d68c <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800cfec:	4a75      	ldr	r2, [pc, #468]	; (800d1c4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d11e      	bne.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800cff2:	4b75      	ldr	r3, [pc, #468]	; (800d1c8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800cff4:	680a      	ldr	r2, [r1, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d11a      	bne.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800cffa:	4a74      	ldr	r2, [pc, #464]	; (800d1cc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800cffc:	23a8      	movs	r3, #168	; 0xa8
 800cffe:	58d4      	ldr	r4, [r2, r3]
 800d000:	4d73      	ldr	r5, [pc, #460]	; (800d1d0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800d002:	402c      	ands	r4, r5
 800d004:	50d4      	str	r4, [r2, r3]
 800d006:	58d5      	ldr	r5, [r2, r3]
 800d008:	24f0      	movs	r4, #240	; 0xf0
 800d00a:	0124      	lsls	r4, r4, #4
 800d00c:	432c      	orrs	r4, r5
 800d00e:	50d4      	str	r4, [r2, r3]
 800d010:	e00e      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800d012:	4a70      	ldr	r2, [pc, #448]	; (800d1d4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800d014:	680c      	ldr	r4, [r1, #0]
 800d016:	4294      	cmp	r4, r2
 800d018:	d000      	beq.n	800d01c <RemapAndLinkDMAtoUARTRx+0x1ac>
 800d01a:	e72f      	b.n	800ce7c <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800d01c:	4a6e      	ldr	r2, [pc, #440]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d01e:	23a8      	movs	r3, #168	; 0xa8
 800d020:	58d4      	ldr	r4, [r2, r3]
 800d022:	250f      	movs	r5, #15
 800d024:	43ac      	bics	r4, r5
 800d026:	50d4      	str	r4, [r2, r3]
 800d028:	58d4      	ldr	r4, [r2, r3]
 800d02a:	3d07      	subs	r5, #7
 800d02c:	432c      	orrs	r4, r5
 800d02e:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800d030:	6641      	str	r1, [r0, #100]	; 0x64
 800d032:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d034:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800d036:	4a69      	ldr	r2, [pc, #420]	; (800d1dc <RemapAndLinkDMAtoUARTRx+0x36c>)
 800d038:	680c      	ldr	r4, [r1, #0]
 800d03a:	4294      	cmp	r4, r2
 800d03c:	d000      	beq.n	800d040 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800d03e:	e721      	b.n	800ce84 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800d040:	4a65      	ldr	r2, [pc, #404]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d042:	23a8      	movs	r3, #168	; 0xa8
 800d044:	58d4      	ldr	r4, [r2, r3]
 800d046:	4d62      	ldr	r5, [pc, #392]	; (800d1d0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800d048:	402c      	ands	r4, r5
 800d04a:	50d4      	str	r4, [r2, r3]
 800d04c:	58d5      	ldr	r5, [r2, r3]
 800d04e:	2480      	movs	r4, #128	; 0x80
 800d050:	0124      	lsls	r4, r4, #4
 800d052:	432c      	orrs	r4, r5
 800d054:	50d4      	str	r4, [r2, r3]
 800d056:	e7eb      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800d058:	4a61      	ldr	r2, [pc, #388]	; (800d1e0 <RemapAndLinkDMAtoUARTRx+0x370>)
 800d05a:	680c      	ldr	r4, [r1, #0]
 800d05c:	4294      	cmp	r4, r2
 800d05e:	d000      	beq.n	800d062 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800d060:	e714      	b.n	800ce8c <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800d062:	4a5d      	ldr	r2, [pc, #372]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d064:	23a8      	movs	r3, #168	; 0xa8
 800d066:	58d4      	ldr	r4, [r2, r3]
 800d068:	4d5e      	ldr	r5, [pc, #376]	; (800d1e4 <RemapAndLinkDMAtoUARTRx+0x374>)
 800d06a:	402c      	ands	r4, r5
 800d06c:	50d4      	str	r4, [r2, r3]
 800d06e:	58d5      	ldr	r5, [r2, r3]
 800d070:	2480      	movs	r4, #128	; 0x80
 800d072:	0324      	lsls	r4, r4, #12
 800d074:	432c      	orrs	r4, r5
 800d076:	50d4      	str	r4, [r2, r3]
 800d078:	e7da      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800d07a:	4a5b      	ldr	r2, [pc, #364]	; (800d1e8 <RemapAndLinkDMAtoUARTRx+0x378>)
 800d07c:	680c      	ldr	r4, [r1, #0]
 800d07e:	4294      	cmp	r4, r2
 800d080:	d000      	beq.n	800d084 <RemapAndLinkDMAtoUARTRx+0x214>
 800d082:	e707      	b.n	800ce94 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800d084:	4a54      	ldr	r2, [pc, #336]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d086:	23a8      	movs	r3, #168	; 0xa8
 800d088:	58d4      	ldr	r4, [r2, r3]
 800d08a:	4d58      	ldr	r5, [pc, #352]	; (800d1ec <RemapAndLinkDMAtoUARTRx+0x37c>)
 800d08c:	402c      	ands	r4, r5
 800d08e:	50d4      	str	r4, [r2, r3]
 800d090:	58d5      	ldr	r5, [r2, r3]
 800d092:	2480      	movs	r4, #128	; 0x80
 800d094:	0424      	lsls	r4, r4, #16
 800d096:	432c      	orrs	r4, r5
 800d098:	50d4      	str	r4, [r2, r3]
 800d09a:	e7c9      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800d09c:	4a54      	ldr	r2, [pc, #336]	; (800d1f0 <RemapAndLinkDMAtoUARTRx+0x380>)
 800d09e:	680c      	ldr	r4, [r1, #0]
 800d0a0:	4294      	cmp	r4, r2
 800d0a2:	d000      	beq.n	800d0a6 <RemapAndLinkDMAtoUARTRx+0x236>
 800d0a4:	e6fa      	b.n	800ce9c <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800d0a6:	4a49      	ldr	r2, [pc, #292]	; (800d1cc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d0a8:	23a8      	movs	r3, #168	; 0xa8
 800d0aa:	58d4      	ldr	r4, [r2, r3]
 800d0ac:	25f0      	movs	r5, #240	; 0xf0
 800d0ae:	43ac      	bics	r4, r5
 800d0b0:	50d4      	str	r4, [r2, r3]
 800d0b2:	58d4      	ldr	r4, [r2, r3]
 800d0b4:	3d70      	subs	r5, #112	; 0x70
 800d0b6:	432c      	orrs	r4, r5
 800d0b8:	50d4      	str	r4, [r2, r3]
 800d0ba:	e7b9      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800d0bc:	4a42      	ldr	r2, [pc, #264]	; (800d1c8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800d0be:	680c      	ldr	r4, [r1, #0]
 800d0c0:	4294      	cmp	r4, r2
 800d0c2:	d000      	beq.n	800d0c6 <RemapAndLinkDMAtoUARTRx+0x256>
 800d0c4:	e6ee      	b.n	800cea4 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800d0c6:	4a41      	ldr	r2, [pc, #260]	; (800d1cc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d0c8:	23a8      	movs	r3, #168	; 0xa8
 800d0ca:	58d4      	ldr	r4, [r2, r3]
 800d0cc:	4d40      	ldr	r5, [pc, #256]	; (800d1d0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800d0ce:	402c      	ands	r4, r5
 800d0d0:	50d4      	str	r4, [r2, r3]
 800d0d2:	58d5      	ldr	r5, [r2, r3]
 800d0d4:	2480      	movs	r4, #128	; 0x80
 800d0d6:	0124      	lsls	r4, r4, #4
 800d0d8:	432c      	orrs	r4, r5
 800d0da:	50d4      	str	r4, [r2, r3]
 800d0dc:	e7a8      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800d0de:	4a3d      	ldr	r2, [pc, #244]	; (800d1d4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800d0e0:	680c      	ldr	r4, [r1, #0]
 800d0e2:	4294      	cmp	r4, r2
 800d0e4:	d000      	beq.n	800d0e8 <RemapAndLinkDMAtoUARTRx+0x278>
 800d0e6:	e6e1      	b.n	800ceac <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800d0e8:	4a3b      	ldr	r2, [pc, #236]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d0ea:	23a8      	movs	r3, #168	; 0xa8
 800d0ec:	58d4      	ldr	r4, [r2, r3]
 800d0ee:	250f      	movs	r5, #15
 800d0f0:	43ac      	bics	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	58d4      	ldr	r4, [r2, r3]
 800d0f6:	3d06      	subs	r5, #6
 800d0f8:	432c      	orrs	r4, r5
 800d0fa:	50d4      	str	r4, [r2, r3]
 800d0fc:	e798      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800d0fe:	4a37      	ldr	r2, [pc, #220]	; (800d1dc <RemapAndLinkDMAtoUARTRx+0x36c>)
 800d100:	680c      	ldr	r4, [r1, #0]
 800d102:	4294      	cmp	r4, r2
 800d104:	d000      	beq.n	800d108 <RemapAndLinkDMAtoUARTRx+0x298>
 800d106:	e6d5      	b.n	800ceb4 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800d108:	4a33      	ldr	r2, [pc, #204]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d10a:	23a8      	movs	r3, #168	; 0xa8
 800d10c:	58d4      	ldr	r4, [r2, r3]
 800d10e:	4d30      	ldr	r5, [pc, #192]	; (800d1d0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800d110:	402c      	ands	r4, r5
 800d112:	50d4      	str	r4, [r2, r3]
 800d114:	58d5      	ldr	r5, [r2, r3]
 800d116:	2490      	movs	r4, #144	; 0x90
 800d118:	0124      	lsls	r4, r4, #4
 800d11a:	432c      	orrs	r4, r5
 800d11c:	50d4      	str	r4, [r2, r3]
 800d11e:	e787      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800d120:	4a2f      	ldr	r2, [pc, #188]	; (800d1e0 <RemapAndLinkDMAtoUARTRx+0x370>)
 800d122:	680c      	ldr	r4, [r1, #0]
 800d124:	4294      	cmp	r4, r2
 800d126:	d000      	beq.n	800d12a <RemapAndLinkDMAtoUARTRx+0x2ba>
 800d128:	e6c8      	b.n	800cebc <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800d12a:	4a2b      	ldr	r2, [pc, #172]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d12c:	23a8      	movs	r3, #168	; 0xa8
 800d12e:	58d4      	ldr	r4, [r2, r3]
 800d130:	4d2c      	ldr	r5, [pc, #176]	; (800d1e4 <RemapAndLinkDMAtoUARTRx+0x374>)
 800d132:	402c      	ands	r4, r5
 800d134:	50d4      	str	r4, [r2, r3]
 800d136:	58d5      	ldr	r5, [r2, r3]
 800d138:	2490      	movs	r4, #144	; 0x90
 800d13a:	0324      	lsls	r4, r4, #12
 800d13c:	432c      	orrs	r4, r5
 800d13e:	50d4      	str	r4, [r2, r3]
 800d140:	e776      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800d142:	4a29      	ldr	r2, [pc, #164]	; (800d1e8 <RemapAndLinkDMAtoUARTRx+0x378>)
 800d144:	680c      	ldr	r4, [r1, #0]
 800d146:	4294      	cmp	r4, r2
 800d148:	d000      	beq.n	800d14c <RemapAndLinkDMAtoUARTRx+0x2dc>
 800d14a:	e6bb      	b.n	800cec4 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800d14c:	4a22      	ldr	r2, [pc, #136]	; (800d1d8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800d14e:	23a8      	movs	r3, #168	; 0xa8
 800d150:	58d4      	ldr	r4, [r2, r3]
 800d152:	4d26      	ldr	r5, [pc, #152]	; (800d1ec <RemapAndLinkDMAtoUARTRx+0x37c>)
 800d154:	402c      	ands	r4, r5
 800d156:	50d4      	str	r4, [r2, r3]
 800d158:	58d5      	ldr	r5, [r2, r3]
 800d15a:	2490      	movs	r4, #144	; 0x90
 800d15c:	0424      	lsls	r4, r4, #16
 800d15e:	432c      	orrs	r4, r5
 800d160:	50d4      	str	r4, [r2, r3]
 800d162:	e765      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800d164:	4a22      	ldr	r2, [pc, #136]	; (800d1f0 <RemapAndLinkDMAtoUARTRx+0x380>)
 800d166:	680c      	ldr	r4, [r1, #0]
 800d168:	4294      	cmp	r4, r2
 800d16a:	d000      	beq.n	800d16e <RemapAndLinkDMAtoUARTRx+0x2fe>
 800d16c:	e6ae      	b.n	800cecc <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800d16e:	4a17      	ldr	r2, [pc, #92]	; (800d1cc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d170:	23a8      	movs	r3, #168	; 0xa8
 800d172:	58d4      	ldr	r4, [r2, r3]
 800d174:	25f0      	movs	r5, #240	; 0xf0
 800d176:	43ac      	bics	r4, r5
 800d178:	50d4      	str	r4, [r2, r3]
 800d17a:	58d4      	ldr	r4, [r2, r3]
 800d17c:	3d60      	subs	r5, #96	; 0x60
 800d17e:	432c      	orrs	r4, r5
 800d180:	50d4      	str	r4, [r2, r3]
 800d182:	e755      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800d184:	4a10      	ldr	r2, [pc, #64]	; (800d1c8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800d186:	680c      	ldr	r4, [r1, #0]
 800d188:	4294      	cmp	r4, r2
 800d18a:	d000      	beq.n	800d18e <RemapAndLinkDMAtoUARTRx+0x31e>
 800d18c:	e6a2      	b.n	800ced4 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800d18e:	4a0f      	ldr	r2, [pc, #60]	; (800d1cc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d190:	23a8      	movs	r3, #168	; 0xa8
 800d192:	58d4      	ldr	r4, [r2, r3]
 800d194:	4d0e      	ldr	r5, [pc, #56]	; (800d1d0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800d196:	402c      	ands	r4, r5
 800d198:	50d4      	str	r4, [r2, r3]
 800d19a:	58d5      	ldr	r5, [r2, r3]
 800d19c:	2490      	movs	r4, #144	; 0x90
 800d19e:	0124      	lsls	r4, r4, #4
 800d1a0:	432c      	orrs	r4, r5
 800d1a2:	50d4      	str	r4, [r2, r3]
 800d1a4:	e744      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	40013800 	.word	0x40013800
 800d1ac:	40004400 	.word	0x40004400
 800d1b0:	40004800 	.word	0x40004800
 800d1b4:	40004c00 	.word	0x40004c00
 800d1b8:	40005000 	.word	0x40005000
 800d1bc:	40011400 	.word	0x40011400
 800d1c0:	40011800 	.word	0x40011800
 800d1c4:	40011c00 	.word	0x40011c00
 800d1c8:	40020430 	.word	0x40020430
 800d1cc:	40020400 	.word	0x40020400
 800d1d0:	fffff0ff 	.word	0xfffff0ff
 800d1d4:	40020008 	.word	0x40020008
 800d1d8:	40020000 	.word	0x40020000
 800d1dc:	40020030 	.word	0x40020030
 800d1e0:	40020058 	.word	0x40020058
 800d1e4:	fff0ffff 	.word	0xfff0ffff
 800d1e8:	4002006c 	.word	0x4002006c
 800d1ec:	ff0fffff 	.word	0xff0fffff
 800d1f0:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800d1f4:	4ae0      	ldr	r2, [pc, #896]	; (800d578 <RemapAndLinkDMAtoUARTRx+0x708>)
 800d1f6:	680c      	ldr	r4, [r1, #0]
 800d1f8:	4294      	cmp	r4, r2
 800d1fa:	d000      	beq.n	800d1fe <RemapAndLinkDMAtoUARTRx+0x38e>
 800d1fc:	e66e      	b.n	800cedc <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800d1fe:	4adf      	ldr	r2, [pc, #892]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d200:	23a8      	movs	r3, #168	; 0xa8
 800d202:	58d4      	ldr	r4, [r2, r3]
 800d204:	250f      	movs	r5, #15
 800d206:	43ac      	bics	r4, r5
 800d208:	50d4      	str	r4, [r2, r3]
 800d20a:	58d4      	ldr	r4, [r2, r3]
 800d20c:	3d05      	subs	r5, #5
 800d20e:	432c      	orrs	r4, r5
 800d210:	50d4      	str	r4, [r2, r3]
 800d212:	e70d      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800d214:	4ada      	ldr	r2, [pc, #872]	; (800d580 <RemapAndLinkDMAtoUARTRx+0x710>)
 800d216:	680c      	ldr	r4, [r1, #0]
 800d218:	4294      	cmp	r4, r2
 800d21a:	d000      	beq.n	800d21e <RemapAndLinkDMAtoUARTRx+0x3ae>
 800d21c:	e662      	b.n	800cee4 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800d21e:	4ad7      	ldr	r2, [pc, #860]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d220:	23a8      	movs	r3, #168	; 0xa8
 800d222:	58d4      	ldr	r4, [r2, r3]
 800d224:	4dd7      	ldr	r5, [pc, #860]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d226:	402c      	ands	r4, r5
 800d228:	50d4      	str	r4, [r2, r3]
 800d22a:	58d5      	ldr	r5, [r2, r3]
 800d22c:	24a0      	movs	r4, #160	; 0xa0
 800d22e:	0124      	lsls	r4, r4, #4
 800d230:	432c      	orrs	r4, r5
 800d232:	50d4      	str	r4, [r2, r3]
 800d234:	e6fc      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800d236:	4ad4      	ldr	r2, [pc, #848]	; (800d588 <RemapAndLinkDMAtoUARTRx+0x718>)
 800d238:	680c      	ldr	r4, [r1, #0]
 800d23a:	4294      	cmp	r4, r2
 800d23c:	d000      	beq.n	800d240 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800d23e:	e655      	b.n	800ceec <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800d240:	4ace      	ldr	r2, [pc, #824]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d242:	23a8      	movs	r3, #168	; 0xa8
 800d244:	58d4      	ldr	r4, [r2, r3]
 800d246:	4dd1      	ldr	r5, [pc, #836]	; (800d58c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800d248:	402c      	ands	r4, r5
 800d24a:	50d4      	str	r4, [r2, r3]
 800d24c:	58d5      	ldr	r5, [r2, r3]
 800d24e:	24a0      	movs	r4, #160	; 0xa0
 800d250:	0324      	lsls	r4, r4, #12
 800d252:	432c      	orrs	r4, r5
 800d254:	50d4      	str	r4, [r2, r3]
 800d256:	e6eb      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800d258:	4acd      	ldr	r2, [pc, #820]	; (800d590 <RemapAndLinkDMAtoUARTRx+0x720>)
 800d25a:	680c      	ldr	r4, [r1, #0]
 800d25c:	4294      	cmp	r4, r2
 800d25e:	d000      	beq.n	800d262 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800d260:	e648      	b.n	800cef4 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800d262:	4ac6      	ldr	r2, [pc, #792]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d264:	23a8      	movs	r3, #168	; 0xa8
 800d266:	58d4      	ldr	r4, [r2, r3]
 800d268:	4dca      	ldr	r5, [pc, #808]	; (800d594 <RemapAndLinkDMAtoUARTRx+0x724>)
 800d26a:	402c      	ands	r4, r5
 800d26c:	50d4      	str	r4, [r2, r3]
 800d26e:	58d5      	ldr	r5, [r2, r3]
 800d270:	24a0      	movs	r4, #160	; 0xa0
 800d272:	0424      	lsls	r4, r4, #16
 800d274:	432c      	orrs	r4, r5
 800d276:	50d4      	str	r4, [r2, r3]
 800d278:	e6da      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800d27a:	4ac7      	ldr	r2, [pc, #796]	; (800d598 <RemapAndLinkDMAtoUARTRx+0x728>)
 800d27c:	680c      	ldr	r4, [r1, #0]
 800d27e:	4294      	cmp	r4, r2
 800d280:	d000      	beq.n	800d284 <RemapAndLinkDMAtoUARTRx+0x414>
 800d282:	e63b      	b.n	800cefc <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800d284:	4ac5      	ldr	r2, [pc, #788]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d286:	23a8      	movs	r3, #168	; 0xa8
 800d288:	58d4      	ldr	r4, [r2, r3]
 800d28a:	25f0      	movs	r5, #240	; 0xf0
 800d28c:	43ac      	bics	r4, r5
 800d28e:	50d4      	str	r4, [r2, r3]
 800d290:	58d4      	ldr	r4, [r2, r3]
 800d292:	3d50      	subs	r5, #80	; 0x50
 800d294:	432c      	orrs	r4, r5
 800d296:	50d4      	str	r4, [r2, r3]
 800d298:	e6ca      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800d29a:	4ac1      	ldr	r2, [pc, #772]	; (800d5a0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800d29c:	680c      	ldr	r4, [r1, #0]
 800d29e:	4294      	cmp	r4, r2
 800d2a0:	d000      	beq.n	800d2a4 <RemapAndLinkDMAtoUARTRx+0x434>
 800d2a2:	e62f      	b.n	800cf04 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800d2a4:	4abd      	ldr	r2, [pc, #756]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d2a6:	23a8      	movs	r3, #168	; 0xa8
 800d2a8:	58d4      	ldr	r4, [r2, r3]
 800d2aa:	4db6      	ldr	r5, [pc, #728]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d2ac:	402c      	ands	r4, r5
 800d2ae:	50d4      	str	r4, [r2, r3]
 800d2b0:	58d5      	ldr	r5, [r2, r3]
 800d2b2:	24a0      	movs	r4, #160	; 0xa0
 800d2b4:	0124      	lsls	r4, r4, #4
 800d2b6:	432c      	orrs	r4, r5
 800d2b8:	50d4      	str	r4, [r2, r3]
 800d2ba:	e6b9      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800d2bc:	4aae      	ldr	r2, [pc, #696]	; (800d578 <RemapAndLinkDMAtoUARTRx+0x708>)
 800d2be:	680c      	ldr	r4, [r1, #0]
 800d2c0:	4294      	cmp	r4, r2
 800d2c2:	d000      	beq.n	800d2c6 <RemapAndLinkDMAtoUARTRx+0x456>
 800d2c4:	e622      	b.n	800cf0c <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800d2c6:	4aad      	ldr	r2, [pc, #692]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d2c8:	23a8      	movs	r3, #168	; 0xa8
 800d2ca:	58d4      	ldr	r4, [r2, r3]
 800d2cc:	250f      	movs	r5, #15
 800d2ce:	43ac      	bics	r4, r5
 800d2d0:	50d4      	str	r4, [r2, r3]
 800d2d2:	58d4      	ldr	r4, [r2, r3]
 800d2d4:	3d04      	subs	r5, #4
 800d2d6:	432c      	orrs	r4, r5
 800d2d8:	50d4      	str	r4, [r2, r3]
 800d2da:	e6a9      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800d2dc:	4aa8      	ldr	r2, [pc, #672]	; (800d580 <RemapAndLinkDMAtoUARTRx+0x710>)
 800d2de:	680c      	ldr	r4, [r1, #0]
 800d2e0:	4294      	cmp	r4, r2
 800d2e2:	d000      	beq.n	800d2e6 <RemapAndLinkDMAtoUARTRx+0x476>
 800d2e4:	e616      	b.n	800cf14 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800d2e6:	4aa5      	ldr	r2, [pc, #660]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d2e8:	23a8      	movs	r3, #168	; 0xa8
 800d2ea:	58d4      	ldr	r4, [r2, r3]
 800d2ec:	4da5      	ldr	r5, [pc, #660]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d2ee:	402c      	ands	r4, r5
 800d2f0:	50d4      	str	r4, [r2, r3]
 800d2f2:	58d5      	ldr	r5, [r2, r3]
 800d2f4:	24b0      	movs	r4, #176	; 0xb0
 800d2f6:	0124      	lsls	r4, r4, #4
 800d2f8:	432c      	orrs	r4, r5
 800d2fa:	50d4      	str	r4, [r2, r3]
 800d2fc:	e698      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800d2fe:	4aa2      	ldr	r2, [pc, #648]	; (800d588 <RemapAndLinkDMAtoUARTRx+0x718>)
 800d300:	680c      	ldr	r4, [r1, #0]
 800d302:	4294      	cmp	r4, r2
 800d304:	d000      	beq.n	800d308 <RemapAndLinkDMAtoUARTRx+0x498>
 800d306:	e609      	b.n	800cf1c <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800d308:	4a9c      	ldr	r2, [pc, #624]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d30a:	23a8      	movs	r3, #168	; 0xa8
 800d30c:	58d4      	ldr	r4, [r2, r3]
 800d30e:	4d9f      	ldr	r5, [pc, #636]	; (800d58c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800d310:	402c      	ands	r4, r5
 800d312:	50d4      	str	r4, [r2, r3]
 800d314:	58d5      	ldr	r5, [r2, r3]
 800d316:	24b0      	movs	r4, #176	; 0xb0
 800d318:	0324      	lsls	r4, r4, #12
 800d31a:	432c      	orrs	r4, r5
 800d31c:	50d4      	str	r4, [r2, r3]
 800d31e:	e687      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800d320:	4a9b      	ldr	r2, [pc, #620]	; (800d590 <RemapAndLinkDMAtoUARTRx+0x720>)
 800d322:	680c      	ldr	r4, [r1, #0]
 800d324:	4294      	cmp	r4, r2
 800d326:	d000      	beq.n	800d32a <RemapAndLinkDMAtoUARTRx+0x4ba>
 800d328:	e5fc      	b.n	800cf24 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800d32a:	4a94      	ldr	r2, [pc, #592]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d32c:	23a8      	movs	r3, #168	; 0xa8
 800d32e:	58d4      	ldr	r4, [r2, r3]
 800d330:	4d98      	ldr	r5, [pc, #608]	; (800d594 <RemapAndLinkDMAtoUARTRx+0x724>)
 800d332:	402c      	ands	r4, r5
 800d334:	50d4      	str	r4, [r2, r3]
 800d336:	58d5      	ldr	r5, [r2, r3]
 800d338:	24b0      	movs	r4, #176	; 0xb0
 800d33a:	0424      	lsls	r4, r4, #16
 800d33c:	432c      	orrs	r4, r5
 800d33e:	50d4      	str	r4, [r2, r3]
 800d340:	e676      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800d342:	4a95      	ldr	r2, [pc, #596]	; (800d598 <RemapAndLinkDMAtoUARTRx+0x728>)
 800d344:	680c      	ldr	r4, [r1, #0]
 800d346:	4294      	cmp	r4, r2
 800d348:	d000      	beq.n	800d34c <RemapAndLinkDMAtoUARTRx+0x4dc>
 800d34a:	e5ef      	b.n	800cf2c <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800d34c:	4a93      	ldr	r2, [pc, #588]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d34e:	23a8      	movs	r3, #168	; 0xa8
 800d350:	58d4      	ldr	r4, [r2, r3]
 800d352:	25f0      	movs	r5, #240	; 0xf0
 800d354:	43ac      	bics	r4, r5
 800d356:	50d4      	str	r4, [r2, r3]
 800d358:	58d4      	ldr	r4, [r2, r3]
 800d35a:	3d40      	subs	r5, #64	; 0x40
 800d35c:	432c      	orrs	r4, r5
 800d35e:	50d4      	str	r4, [r2, r3]
 800d360:	e666      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800d362:	4a8f      	ldr	r2, [pc, #572]	; (800d5a0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800d364:	680c      	ldr	r4, [r1, #0]
 800d366:	4294      	cmp	r4, r2
 800d368:	d000      	beq.n	800d36c <RemapAndLinkDMAtoUARTRx+0x4fc>
 800d36a:	e5e3      	b.n	800cf34 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800d36c:	4a8b      	ldr	r2, [pc, #556]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d36e:	23a8      	movs	r3, #168	; 0xa8
 800d370:	58d4      	ldr	r4, [r2, r3]
 800d372:	4d84      	ldr	r5, [pc, #528]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d374:	402c      	ands	r4, r5
 800d376:	50d4      	str	r4, [r2, r3]
 800d378:	58d5      	ldr	r5, [r2, r3]
 800d37a:	24b0      	movs	r4, #176	; 0xb0
 800d37c:	0124      	lsls	r4, r4, #4
 800d37e:	432c      	orrs	r4, r5
 800d380:	50d4      	str	r4, [r2, r3]
 800d382:	e655      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d384:	4a7c      	ldr	r2, [pc, #496]	; (800d578 <RemapAndLinkDMAtoUARTRx+0x708>)
 800d386:	680c      	ldr	r4, [r1, #0]
 800d388:	4294      	cmp	r4, r2
 800d38a:	d000      	beq.n	800d38e <RemapAndLinkDMAtoUARTRx+0x51e>
 800d38c:	e5d6      	b.n	800cf3c <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d38e:	4a7b      	ldr	r2, [pc, #492]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d390:	23a8      	movs	r3, #168	; 0xa8
 800d392:	58d4      	ldr	r4, [r2, r3]
 800d394:	250f      	movs	r5, #15
 800d396:	43ac      	bics	r4, r5
 800d398:	50d4      	str	r4, [r2, r3]
 800d39a:	58d4      	ldr	r4, [r2, r3]
 800d39c:	3d03      	subs	r5, #3
 800d39e:	432c      	orrs	r4, r5
 800d3a0:	50d4      	str	r4, [r2, r3]
 800d3a2:	e645      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d3a4:	4a76      	ldr	r2, [pc, #472]	; (800d580 <RemapAndLinkDMAtoUARTRx+0x710>)
 800d3a6:	680c      	ldr	r4, [r1, #0]
 800d3a8:	4294      	cmp	r4, r2
 800d3aa:	d000      	beq.n	800d3ae <RemapAndLinkDMAtoUARTRx+0x53e>
 800d3ac:	e5ca      	b.n	800cf44 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d3ae:	4a73      	ldr	r2, [pc, #460]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d3b0:	23a8      	movs	r3, #168	; 0xa8
 800d3b2:	58d4      	ldr	r4, [r2, r3]
 800d3b4:	4d73      	ldr	r5, [pc, #460]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d3b6:	402c      	ands	r4, r5
 800d3b8:	50d4      	str	r4, [r2, r3]
 800d3ba:	58d5      	ldr	r5, [r2, r3]
 800d3bc:	24c0      	movs	r4, #192	; 0xc0
 800d3be:	0124      	lsls	r4, r4, #4
 800d3c0:	432c      	orrs	r4, r5
 800d3c2:	50d4      	str	r4, [r2, r3]
 800d3c4:	e634      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d3c6:	4a70      	ldr	r2, [pc, #448]	; (800d588 <RemapAndLinkDMAtoUARTRx+0x718>)
 800d3c8:	680c      	ldr	r4, [r1, #0]
 800d3ca:	4294      	cmp	r4, r2
 800d3cc:	d000      	beq.n	800d3d0 <RemapAndLinkDMAtoUARTRx+0x560>
 800d3ce:	e5bd      	b.n	800cf4c <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d3d0:	4a6a      	ldr	r2, [pc, #424]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d3d2:	23a8      	movs	r3, #168	; 0xa8
 800d3d4:	58d4      	ldr	r4, [r2, r3]
 800d3d6:	4d6d      	ldr	r5, [pc, #436]	; (800d58c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800d3d8:	402c      	ands	r4, r5
 800d3da:	50d4      	str	r4, [r2, r3]
 800d3dc:	58d5      	ldr	r5, [r2, r3]
 800d3de:	24c0      	movs	r4, #192	; 0xc0
 800d3e0:	0324      	lsls	r4, r4, #12
 800d3e2:	432c      	orrs	r4, r5
 800d3e4:	50d4      	str	r4, [r2, r3]
 800d3e6:	e623      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d3e8:	4a69      	ldr	r2, [pc, #420]	; (800d590 <RemapAndLinkDMAtoUARTRx+0x720>)
 800d3ea:	680c      	ldr	r4, [r1, #0]
 800d3ec:	4294      	cmp	r4, r2
 800d3ee:	d000      	beq.n	800d3f2 <RemapAndLinkDMAtoUARTRx+0x582>
 800d3f0:	e5b0      	b.n	800cf54 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d3f2:	4a62      	ldr	r2, [pc, #392]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d3f4:	23a8      	movs	r3, #168	; 0xa8
 800d3f6:	58d4      	ldr	r4, [r2, r3]
 800d3f8:	4d66      	ldr	r5, [pc, #408]	; (800d594 <RemapAndLinkDMAtoUARTRx+0x724>)
 800d3fa:	402c      	ands	r4, r5
 800d3fc:	50d4      	str	r4, [r2, r3]
 800d3fe:	58d5      	ldr	r5, [r2, r3]
 800d400:	24c0      	movs	r4, #192	; 0xc0
 800d402:	0424      	lsls	r4, r4, #16
 800d404:	432c      	orrs	r4, r5
 800d406:	50d4      	str	r4, [r2, r3]
 800d408:	e612      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d40a:	4a63      	ldr	r2, [pc, #396]	; (800d598 <RemapAndLinkDMAtoUARTRx+0x728>)
 800d40c:	680c      	ldr	r4, [r1, #0]
 800d40e:	4294      	cmp	r4, r2
 800d410:	d000      	beq.n	800d414 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800d412:	e5a3      	b.n	800cf5c <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d414:	4a61      	ldr	r2, [pc, #388]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d416:	23a8      	movs	r3, #168	; 0xa8
 800d418:	58d4      	ldr	r4, [r2, r3]
 800d41a:	25f0      	movs	r5, #240	; 0xf0
 800d41c:	43ac      	bics	r4, r5
 800d41e:	50d4      	str	r4, [r2, r3]
 800d420:	58d4      	ldr	r4, [r2, r3]
 800d422:	3d30      	subs	r5, #48	; 0x30
 800d424:	432c      	orrs	r4, r5
 800d426:	50d4      	str	r4, [r2, r3]
 800d428:	e602      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d42a:	4a5d      	ldr	r2, [pc, #372]	; (800d5a0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800d42c:	680c      	ldr	r4, [r1, #0]
 800d42e:	4294      	cmp	r4, r2
 800d430:	d000      	beq.n	800d434 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800d432:	e597      	b.n	800cf64 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d434:	4a59      	ldr	r2, [pc, #356]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d436:	23a8      	movs	r3, #168	; 0xa8
 800d438:	58d4      	ldr	r4, [r2, r3]
 800d43a:	4d52      	ldr	r5, [pc, #328]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d43c:	402c      	ands	r4, r5
 800d43e:	50d4      	str	r4, [r2, r3]
 800d440:	58d5      	ldr	r5, [r2, r3]
 800d442:	24c0      	movs	r4, #192	; 0xc0
 800d444:	0124      	lsls	r4, r4, #4
 800d446:	432c      	orrs	r4, r5
 800d448:	50d4      	str	r4, [r2, r3]
 800d44a:	e5f1      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d44c:	4a4a      	ldr	r2, [pc, #296]	; (800d578 <RemapAndLinkDMAtoUARTRx+0x708>)
 800d44e:	680c      	ldr	r4, [r1, #0]
 800d450:	4294      	cmp	r4, r2
 800d452:	d000      	beq.n	800d456 <RemapAndLinkDMAtoUARTRx+0x5e6>
 800d454:	e58a      	b.n	800cf6c <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d456:	4a49      	ldr	r2, [pc, #292]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d458:	23a8      	movs	r3, #168	; 0xa8
 800d45a:	58d4      	ldr	r4, [r2, r3]
 800d45c:	250f      	movs	r5, #15
 800d45e:	43ac      	bics	r4, r5
 800d460:	50d4      	str	r4, [r2, r3]
 800d462:	58d4      	ldr	r4, [r2, r3]
 800d464:	3d02      	subs	r5, #2
 800d466:	432c      	orrs	r4, r5
 800d468:	50d4      	str	r4, [r2, r3]
 800d46a:	e5e1      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d46c:	4a44      	ldr	r2, [pc, #272]	; (800d580 <RemapAndLinkDMAtoUARTRx+0x710>)
 800d46e:	680c      	ldr	r4, [r1, #0]
 800d470:	4294      	cmp	r4, r2
 800d472:	d000      	beq.n	800d476 <RemapAndLinkDMAtoUARTRx+0x606>
 800d474:	e57e      	b.n	800cf74 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d476:	4a41      	ldr	r2, [pc, #260]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d478:	23a8      	movs	r3, #168	; 0xa8
 800d47a:	58d4      	ldr	r4, [r2, r3]
 800d47c:	4d41      	ldr	r5, [pc, #260]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d47e:	402c      	ands	r4, r5
 800d480:	50d4      	str	r4, [r2, r3]
 800d482:	58d5      	ldr	r5, [r2, r3]
 800d484:	24d0      	movs	r4, #208	; 0xd0
 800d486:	0124      	lsls	r4, r4, #4
 800d488:	432c      	orrs	r4, r5
 800d48a:	50d4      	str	r4, [r2, r3]
 800d48c:	e5d0      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d48e:	4a3e      	ldr	r2, [pc, #248]	; (800d588 <RemapAndLinkDMAtoUARTRx+0x718>)
 800d490:	680c      	ldr	r4, [r1, #0]
 800d492:	4294      	cmp	r4, r2
 800d494:	d000      	beq.n	800d498 <RemapAndLinkDMAtoUARTRx+0x628>
 800d496:	e571      	b.n	800cf7c <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d498:	4a38      	ldr	r2, [pc, #224]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d49a:	23a8      	movs	r3, #168	; 0xa8
 800d49c:	58d4      	ldr	r4, [r2, r3]
 800d49e:	4d3b      	ldr	r5, [pc, #236]	; (800d58c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800d4a0:	402c      	ands	r4, r5
 800d4a2:	50d4      	str	r4, [r2, r3]
 800d4a4:	58d5      	ldr	r5, [r2, r3]
 800d4a6:	24d0      	movs	r4, #208	; 0xd0
 800d4a8:	0324      	lsls	r4, r4, #12
 800d4aa:	432c      	orrs	r4, r5
 800d4ac:	50d4      	str	r4, [r2, r3]
 800d4ae:	e5bf      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d4b0:	4a37      	ldr	r2, [pc, #220]	; (800d590 <RemapAndLinkDMAtoUARTRx+0x720>)
 800d4b2:	680c      	ldr	r4, [r1, #0]
 800d4b4:	4294      	cmp	r4, r2
 800d4b6:	d000      	beq.n	800d4ba <RemapAndLinkDMAtoUARTRx+0x64a>
 800d4b8:	e564      	b.n	800cf84 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d4ba:	4a30      	ldr	r2, [pc, #192]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d4bc:	23a8      	movs	r3, #168	; 0xa8
 800d4be:	58d4      	ldr	r4, [r2, r3]
 800d4c0:	4d34      	ldr	r5, [pc, #208]	; (800d594 <RemapAndLinkDMAtoUARTRx+0x724>)
 800d4c2:	402c      	ands	r4, r5
 800d4c4:	50d4      	str	r4, [r2, r3]
 800d4c6:	58d5      	ldr	r5, [r2, r3]
 800d4c8:	24d0      	movs	r4, #208	; 0xd0
 800d4ca:	0424      	lsls	r4, r4, #16
 800d4cc:	432c      	orrs	r4, r5
 800d4ce:	50d4      	str	r4, [r2, r3]
 800d4d0:	e5ae      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d4d2:	4a31      	ldr	r2, [pc, #196]	; (800d598 <RemapAndLinkDMAtoUARTRx+0x728>)
 800d4d4:	680c      	ldr	r4, [r1, #0]
 800d4d6:	4294      	cmp	r4, r2
 800d4d8:	d000      	beq.n	800d4dc <RemapAndLinkDMAtoUARTRx+0x66c>
 800d4da:	e557      	b.n	800cf8c <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d4dc:	4a2f      	ldr	r2, [pc, #188]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d4de:	23a8      	movs	r3, #168	; 0xa8
 800d4e0:	58d4      	ldr	r4, [r2, r3]
 800d4e2:	25f0      	movs	r5, #240	; 0xf0
 800d4e4:	43ac      	bics	r4, r5
 800d4e6:	50d4      	str	r4, [r2, r3]
 800d4e8:	58d4      	ldr	r4, [r2, r3]
 800d4ea:	3d20      	subs	r5, #32
 800d4ec:	432c      	orrs	r4, r5
 800d4ee:	50d4      	str	r4, [r2, r3]
 800d4f0:	e59e      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d4f2:	4a2b      	ldr	r2, [pc, #172]	; (800d5a0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800d4f4:	680c      	ldr	r4, [r1, #0]
 800d4f6:	4294      	cmp	r4, r2
 800d4f8:	d000      	beq.n	800d4fc <RemapAndLinkDMAtoUARTRx+0x68c>
 800d4fa:	e54b      	b.n	800cf94 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d4fc:	4a27      	ldr	r2, [pc, #156]	; (800d59c <RemapAndLinkDMAtoUARTRx+0x72c>)
 800d4fe:	23a8      	movs	r3, #168	; 0xa8
 800d500:	58d4      	ldr	r4, [r2, r3]
 800d502:	4d20      	ldr	r5, [pc, #128]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d504:	402c      	ands	r4, r5
 800d506:	50d4      	str	r4, [r2, r3]
 800d508:	58d5      	ldr	r5, [r2, r3]
 800d50a:	24d0      	movs	r4, #208	; 0xd0
 800d50c:	0124      	lsls	r4, r4, #4
 800d50e:	432c      	orrs	r4, r5
 800d510:	50d4      	str	r4, [r2, r3]
 800d512:	e58d      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d514:	4a18      	ldr	r2, [pc, #96]	; (800d578 <RemapAndLinkDMAtoUARTRx+0x708>)
 800d516:	680c      	ldr	r4, [r1, #0]
 800d518:	4294      	cmp	r4, r2
 800d51a:	d000      	beq.n	800d51e <RemapAndLinkDMAtoUARTRx+0x6ae>
 800d51c:	e53e      	b.n	800cf9c <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d51e:	4a17      	ldr	r2, [pc, #92]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d520:	23a8      	movs	r3, #168	; 0xa8
 800d522:	58d4      	ldr	r4, [r2, r3]
 800d524:	250f      	movs	r5, #15
 800d526:	43ac      	bics	r4, r5
 800d528:	50d4      	str	r4, [r2, r3]
 800d52a:	58d4      	ldr	r4, [r2, r3]
 800d52c:	3d01      	subs	r5, #1
 800d52e:	432c      	orrs	r4, r5
 800d530:	50d4      	str	r4, [r2, r3]
 800d532:	e57d      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d534:	4a12      	ldr	r2, [pc, #72]	; (800d580 <RemapAndLinkDMAtoUARTRx+0x710>)
 800d536:	680c      	ldr	r4, [r1, #0]
 800d538:	4294      	cmp	r4, r2
 800d53a:	d000      	beq.n	800d53e <RemapAndLinkDMAtoUARTRx+0x6ce>
 800d53c:	e532      	b.n	800cfa4 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d53e:	4a0f      	ldr	r2, [pc, #60]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d540:	23a8      	movs	r3, #168	; 0xa8
 800d542:	58d4      	ldr	r4, [r2, r3]
 800d544:	4d0f      	ldr	r5, [pc, #60]	; (800d584 <RemapAndLinkDMAtoUARTRx+0x714>)
 800d546:	402c      	ands	r4, r5
 800d548:	50d4      	str	r4, [r2, r3]
 800d54a:	58d5      	ldr	r5, [r2, r3]
 800d54c:	24e0      	movs	r4, #224	; 0xe0
 800d54e:	0124      	lsls	r4, r4, #4
 800d550:	432c      	orrs	r4, r5
 800d552:	50d4      	str	r4, [r2, r3]
 800d554:	e56c      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d556:	4a0c      	ldr	r2, [pc, #48]	; (800d588 <RemapAndLinkDMAtoUARTRx+0x718>)
 800d558:	680c      	ldr	r4, [r1, #0]
 800d55a:	4294      	cmp	r4, r2
 800d55c:	d000      	beq.n	800d560 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800d55e:	e525      	b.n	800cfac <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d560:	4a06      	ldr	r2, [pc, #24]	; (800d57c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800d562:	23a8      	movs	r3, #168	; 0xa8
 800d564:	58d4      	ldr	r4, [r2, r3]
 800d566:	4d09      	ldr	r5, [pc, #36]	; (800d58c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800d568:	402c      	ands	r4, r5
 800d56a:	50d4      	str	r4, [r2, r3]
 800d56c:	58d5      	ldr	r5, [r2, r3]
 800d56e:	24e0      	movs	r4, #224	; 0xe0
 800d570:	0324      	lsls	r4, r4, #12
 800d572:	432c      	orrs	r4, r5
 800d574:	50d4      	str	r4, [r2, r3]
 800d576:	e55b      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800d578:	40020008 	.word	0x40020008
 800d57c:	40020000 	.word	0x40020000
 800d580:	40020030 	.word	0x40020030
 800d584:	fffff0ff 	.word	0xfffff0ff
 800d588:	40020058 	.word	0x40020058
 800d58c:	fff0ffff 	.word	0xfff0ffff
 800d590:	4002006c 	.word	0x4002006c
 800d594:	ff0fffff 	.word	0xff0fffff
 800d598:	4002041c 	.word	0x4002041c
 800d59c:	40020400 	.word	0x40020400
 800d5a0:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d5a4:	4a41      	ldr	r2, [pc, #260]	; (800d6ac <RemapAndLinkDMAtoUARTRx+0x83c>)
 800d5a6:	680c      	ldr	r4, [r1, #0]
 800d5a8:	4294      	cmp	r4, r2
 800d5aa:	d000      	beq.n	800d5ae <RemapAndLinkDMAtoUARTRx+0x73e>
 800d5ac:	e502      	b.n	800cfb4 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d5ae:	4a40      	ldr	r2, [pc, #256]	; (800d6b0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800d5b0:	23a8      	movs	r3, #168	; 0xa8
 800d5b2:	58d4      	ldr	r4, [r2, r3]
 800d5b4:	4d3f      	ldr	r5, [pc, #252]	; (800d6b4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800d5b6:	402c      	ands	r4, r5
 800d5b8:	50d4      	str	r4, [r2, r3]
 800d5ba:	58d5      	ldr	r5, [r2, r3]
 800d5bc:	24e0      	movs	r4, #224	; 0xe0
 800d5be:	0424      	lsls	r4, r4, #16
 800d5c0:	432c      	orrs	r4, r5
 800d5c2:	50d4      	str	r4, [r2, r3]
 800d5c4:	e534      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d5c6:	4a3c      	ldr	r2, [pc, #240]	; (800d6b8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800d5c8:	680c      	ldr	r4, [r1, #0]
 800d5ca:	4294      	cmp	r4, r2
 800d5cc:	d000      	beq.n	800d5d0 <RemapAndLinkDMAtoUARTRx+0x760>
 800d5ce:	e4f5      	b.n	800cfbc <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d5d0:	4a3a      	ldr	r2, [pc, #232]	; (800d6bc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800d5d2:	23a8      	movs	r3, #168	; 0xa8
 800d5d4:	58d4      	ldr	r4, [r2, r3]
 800d5d6:	25f0      	movs	r5, #240	; 0xf0
 800d5d8:	43ac      	bics	r4, r5
 800d5da:	50d4      	str	r4, [r2, r3]
 800d5dc:	58d4      	ldr	r4, [r2, r3]
 800d5de:	3d10      	subs	r5, #16
 800d5e0:	432c      	orrs	r4, r5
 800d5e2:	50d4      	str	r4, [r2, r3]
 800d5e4:	e524      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d5e6:	4a36      	ldr	r2, [pc, #216]	; (800d6c0 <RemapAndLinkDMAtoUARTRx+0x850>)
 800d5e8:	680c      	ldr	r4, [r1, #0]
 800d5ea:	4294      	cmp	r4, r2
 800d5ec:	d000      	beq.n	800d5f0 <RemapAndLinkDMAtoUARTRx+0x780>
 800d5ee:	e4e9      	b.n	800cfc4 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d5f0:	4a32      	ldr	r2, [pc, #200]	; (800d6bc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800d5f2:	23a8      	movs	r3, #168	; 0xa8
 800d5f4:	58d4      	ldr	r4, [r2, r3]
 800d5f6:	4d33      	ldr	r5, [pc, #204]	; (800d6c4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800d5f8:	402c      	ands	r4, r5
 800d5fa:	50d4      	str	r4, [r2, r3]
 800d5fc:	58d5      	ldr	r5, [r2, r3]
 800d5fe:	24e0      	movs	r4, #224	; 0xe0
 800d600:	0124      	lsls	r4, r4, #4
 800d602:	432c      	orrs	r4, r5
 800d604:	50d4      	str	r4, [r2, r3]
 800d606:	e513      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d608:	4a2f      	ldr	r2, [pc, #188]	; (800d6c8 <RemapAndLinkDMAtoUARTRx+0x858>)
 800d60a:	680c      	ldr	r4, [r1, #0]
 800d60c:	4294      	cmp	r4, r2
 800d60e:	d000      	beq.n	800d612 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800d610:	e4dc      	b.n	800cfcc <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d612:	4a27      	ldr	r2, [pc, #156]	; (800d6b0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800d614:	23a8      	movs	r3, #168	; 0xa8
 800d616:	58d5      	ldr	r5, [r2, r3]
 800d618:	260f      	movs	r6, #15
 800d61a:	43b5      	bics	r5, r6
 800d61c:	50d5      	str	r5, [r2, r3]
 800d61e:	58d4      	ldr	r4, [r2, r3]
 800d620:	4334      	orrs	r4, r6
 800d622:	50d4      	str	r4, [r2, r3]
 800d624:	e504      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d626:	4a29      	ldr	r2, [pc, #164]	; (800d6cc <RemapAndLinkDMAtoUARTRx+0x85c>)
 800d628:	680c      	ldr	r4, [r1, #0]
 800d62a:	4294      	cmp	r4, r2
 800d62c:	d000      	beq.n	800d630 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800d62e:	e4d1      	b.n	800cfd4 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d630:	4a1f      	ldr	r2, [pc, #124]	; (800d6b0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800d632:	23a8      	movs	r3, #168	; 0xa8
 800d634:	58d4      	ldr	r4, [r2, r3]
 800d636:	4d23      	ldr	r5, [pc, #140]	; (800d6c4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800d638:	402c      	ands	r4, r5
 800d63a:	50d4      	str	r4, [r2, r3]
 800d63c:	58d5      	ldr	r5, [r2, r3]
 800d63e:	24f0      	movs	r4, #240	; 0xf0
 800d640:	0124      	lsls	r4, r4, #4
 800d642:	432c      	orrs	r4, r5
 800d644:	50d4      	str	r4, [r2, r3]
 800d646:	e4f3      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d648:	4a21      	ldr	r2, [pc, #132]	; (800d6d0 <RemapAndLinkDMAtoUARTRx+0x860>)
 800d64a:	680c      	ldr	r4, [r1, #0]
 800d64c:	4294      	cmp	r4, r2
 800d64e:	d000      	beq.n	800d652 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800d650:	e4c4      	b.n	800cfdc <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d652:	4a17      	ldr	r2, [pc, #92]	; (800d6b0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800d654:	23a8      	movs	r3, #168	; 0xa8
 800d656:	58d4      	ldr	r4, [r2, r3]
 800d658:	4d1e      	ldr	r5, [pc, #120]	; (800d6d4 <RemapAndLinkDMAtoUARTRx+0x864>)
 800d65a:	402c      	ands	r4, r5
 800d65c:	50d4      	str	r4, [r2, r3]
 800d65e:	58d5      	ldr	r5, [r2, r3]
 800d660:	24f0      	movs	r4, #240	; 0xf0
 800d662:	0324      	lsls	r4, r4, #12
 800d664:	432c      	orrs	r4, r5
 800d666:	50d4      	str	r4, [r2, r3]
 800d668:	e4e2      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d66a:	4a10      	ldr	r2, [pc, #64]	; (800d6ac <RemapAndLinkDMAtoUARTRx+0x83c>)
 800d66c:	680c      	ldr	r4, [r1, #0]
 800d66e:	4294      	cmp	r4, r2
 800d670:	d000      	beq.n	800d674 <RemapAndLinkDMAtoUARTRx+0x804>
 800d672:	e4b7      	b.n	800cfe4 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d674:	4a0e      	ldr	r2, [pc, #56]	; (800d6b0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800d676:	23a8      	movs	r3, #168	; 0xa8
 800d678:	58d4      	ldr	r4, [r2, r3]
 800d67a:	4d0e      	ldr	r5, [pc, #56]	; (800d6b4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800d67c:	402c      	ands	r4, r5
 800d67e:	50d4      	str	r4, [r2, r3]
 800d680:	58d5      	ldr	r5, [r2, r3]
 800d682:	24f0      	movs	r4, #240	; 0xf0
 800d684:	0424      	lsls	r4, r4, #16
 800d686:	432c      	orrs	r4, r5
 800d688:	50d4      	str	r4, [r2, r3]
 800d68a:	e4d1      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d68c:	4a0a      	ldr	r2, [pc, #40]	; (800d6b8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800d68e:	680c      	ldr	r4, [r1, #0]
 800d690:	4294      	cmp	r4, r2
 800d692:	d000      	beq.n	800d696 <RemapAndLinkDMAtoUARTRx+0x826>
 800d694:	e4aa      	b.n	800cfec <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d696:	4a09      	ldr	r2, [pc, #36]	; (800d6bc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800d698:	23a8      	movs	r3, #168	; 0xa8
 800d69a:	58d5      	ldr	r5, [r2, r3]
 800d69c:	26f0      	movs	r6, #240	; 0xf0
 800d69e:	43b5      	bics	r5, r6
 800d6a0:	50d5      	str	r5, [r2, r3]
 800d6a2:	58d4      	ldr	r4, [r2, r3]
 800d6a4:	4334      	orrs	r4, r6
 800d6a6:	50d4      	str	r4, [r2, r3]
 800d6a8:	e4c2      	b.n	800d030 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800d6aa:	46c0      	nop			; (mov r8, r8)
 800d6ac:	4002006c 	.word	0x4002006c
 800d6b0:	40020000 	.word	0x40020000
 800d6b4:	ff0fffff 	.word	0xff0fffff
 800d6b8:	4002041c 	.word	0x4002041c
 800d6bc:	40020400 	.word	0x40020400
 800d6c0:	40020430 	.word	0x40020430
 800d6c4:	fffff0ff 	.word	0xfffff0ff
 800d6c8:	40020008 	.word	0x40020008
 800d6cc:	40020030 	.word	0x40020030
 800d6d0:	40020058 	.word	0x40020058
 800d6d4:	fff0ffff 	.word	0xfff0ffff

0800d6d8 <DMA_MSG_RX_Setup>:
{	
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	0004      	movs	r4, r0
 800d6dc:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d6de:	f7ff fbc7 	bl	800ce70 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	0028      	movs	r0, r5
 800d6e6:	f7ff fb0d 	bl	800cd04 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d6ea:	0020      	movs	r0, r4
 800d6ec:	f7fd feb8 	bl	800b460 <GetPort>
 800d6f0:	1e41      	subs	r1, r0, #1
 800d6f2:	0189      	lsls	r1, r1, #6
 800d6f4:	4803      	ldr	r0, [pc, #12]	; (800d704 <DMA_MSG_RX_Setup+0x2c>)
 800d6f6:	1809      	adds	r1, r1, r0
 800d6f8:	2240      	movs	r2, #64	; 0x40
 800d6fa:	0020      	movs	r0, r4
 800d6fc:	f005 fd42 	bl	8013184 <HAL_UART_Receive_DMA>
}
 800d700:	bd70      	pop	{r4, r5, r6, pc}
 800d702:	46c0      	nop			; (mov r8, r8)
 800d704:	20000f58 	.word	0x20000f58

0800d708 <SetupMessagingRxDMAs>:
{	
 800d708:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d70a:	4b17      	ldr	r3, [pc, #92]	; (800d768 <SetupMessagingRxDMAs+0x60>)
 800d70c:	785b      	ldrb	r3, [r3, #1]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d010      	beq.n	800d734 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800d712:	4b15      	ldr	r3, [pc, #84]	; (800d768 <SetupMessagingRxDMAs+0x60>)
 800d714:	789b      	ldrb	r3, [r3, #2]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d011      	beq.n	800d73e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800d71a:	4b13      	ldr	r3, [pc, #76]	; (800d768 <SetupMessagingRxDMAs+0x60>)
 800d71c:	78db      	ldrb	r3, [r3, #3]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d012      	beq.n	800d748 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800d722:	4b11      	ldr	r3, [pc, #68]	; (800d768 <SetupMessagingRxDMAs+0x60>)
 800d724:	791b      	ldrb	r3, [r3, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d013      	beq.n	800d752 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <SetupMessagingRxDMAs+0x60>)
 800d72c:	795b      	ldrb	r3, [r3, #5]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d014      	beq.n	800d75c <SetupMessagingRxDMAs+0x54>
}
 800d732:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d734:	490d      	ldr	r1, [pc, #52]	; (800d76c <SetupMessagingRxDMAs+0x64>)
 800d736:	480e      	ldr	r0, [pc, #56]	; (800d770 <SetupMessagingRxDMAs+0x68>)
 800d738:	f7ff ffce 	bl	800d6d8 <DMA_MSG_RX_Setup>
 800d73c:	e7e9      	b.n	800d712 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d73e:	490d      	ldr	r1, [pc, #52]	; (800d774 <SetupMessagingRxDMAs+0x6c>)
 800d740:	480d      	ldr	r0, [pc, #52]	; (800d778 <SetupMessagingRxDMAs+0x70>)
 800d742:	f7ff ffc9 	bl	800d6d8 <DMA_MSG_RX_Setup>
 800d746:	e7e8      	b.n	800d71a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d748:	490c      	ldr	r1, [pc, #48]	; (800d77c <SetupMessagingRxDMAs+0x74>)
 800d74a:	480d      	ldr	r0, [pc, #52]	; (800d780 <SetupMessagingRxDMAs+0x78>)
 800d74c:	f7ff ffc4 	bl	800d6d8 <DMA_MSG_RX_Setup>
 800d750:	e7e7      	b.n	800d722 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d752:	490c      	ldr	r1, [pc, #48]	; (800d784 <SetupMessagingRxDMAs+0x7c>)
 800d754:	480c      	ldr	r0, [pc, #48]	; (800d788 <SetupMessagingRxDMAs+0x80>)
 800d756:	f7ff ffbf 	bl	800d6d8 <DMA_MSG_RX_Setup>
 800d75a:	e7e6      	b.n	800d72a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d75c:	490b      	ldr	r1, [pc, #44]	; (800d78c <SetupMessagingRxDMAs+0x84>)
 800d75e:	480c      	ldr	r0, [pc, #48]	; (800d790 <SetupMessagingRxDMAs+0x88>)
 800d760:	f7ff ffba 	bl	800d6d8 <DMA_MSG_RX_Setup>
}
 800d764:	e7e5      	b.n	800d732 <SetupMessagingRxDMAs+0x2a>
 800d766:	46c0      	nop			; (mov r8, r8)
 800d768:	20000db0 	.word	0x20000db0
 800d76c:	200017ac 	.word	0x200017ac
 800d770:	20006c60 	.word	0x20006c60
 800d774:	200017e4 	.word	0x200017e4
 800d778:	20006cd4 	.word	0x20006cd4
 800d77c:	2000181c 	.word	0x2000181c
 800d780:	20006bf0 	.word	0x20006bf0
 800d784:	20001854 	.word	0x20001854
 800d788:	20006a94 	.word	0x20006a94
 800d78c:	2000188c 	.word	0x2000188c
 800d790:	20006b08 	.word	0x20006b08

0800d794 <DMA_STREAM_Setup>:
{	
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	0005      	movs	r5, r0
 800d798:	000f      	movs	r7, r1
 800d79a:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d79c:	f7fd fe60 	bl	800b460 <GetPort>
	hDMA = &streamDMA[port-1];
 800d7a0:	3801      	subs	r0, #1
 800d7a2:	00c3      	lsls	r3, r0, #3
 800d7a4:	1a18      	subs	r0, r3, r0
 800d7a6:	00c4      	lsls	r4, r0, #3
 800d7a8:	4b09      	ldr	r3, [pc, #36]	; (800d7d0 <DMA_STREAM_Setup+0x3c>)
 800d7aa:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d7ac:	0021      	movs	r1, r4
 800d7ae:	0028      	movs	r0, r5
 800d7b0:	f7ff fb5e 	bl	800ce70 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	0020      	movs	r0, r4
 800d7b8:	f7ff faa4 	bl	800cd04 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d7bc:	2369      	movs	r3, #105	; 0x69
 800d7be:	2201      	movs	r2, #1
 800d7c0:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	3128      	adds	r1, #40	; 0x28
 800d7c6:	0032      	movs	r2, r6
 800d7c8:	0028      	movs	r0, r5
 800d7ca:	f005 fcdb 	bl	8013184 <HAL_UART_Receive_DMA>
}
 800d7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d0:	200019a4 	.word	0x200019a4

0800d7d4 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d7d4:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d7d6:	6803      	ldr	r3, [r0, #0]
 800d7d8:	4acc      	ldr	r2, [pc, #816]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d100      	bne.n	800d7e0 <RemapAndLinkDMAtoUARTTx+0xc>
 800d7de:	e0ca      	b.n	800d976 <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d7e0:	4aca      	ldr	r2, [pc, #808]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d100      	bne.n	800d7e8 <RemapAndLinkDMAtoUARTTx+0x14>
 800d7e6:	e0d8      	b.n	800d99a <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d7e8:	4ac8      	ldr	r2, [pc, #800]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d100      	bne.n	800d7f0 <RemapAndLinkDMAtoUARTTx+0x1c>
 800d7ee:	e0e5      	b.n	800d9bc <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d7f0:	4ac6      	ldr	r2, [pc, #792]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d100      	bne.n	800d7f8 <RemapAndLinkDMAtoUARTTx+0x24>
 800d7f6:	e0f2      	b.n	800d9de <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d7f8:	4ac4      	ldr	r2, [pc, #784]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d100      	bne.n	800d800 <RemapAndLinkDMAtoUARTTx+0x2c>
 800d7fe:	e0fe      	b.n	800d9fe <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d800:	4ac2      	ldr	r2, [pc, #776]	; (800db0c <RemapAndLinkDMAtoUARTTx+0x338>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d100      	bne.n	800d808 <RemapAndLinkDMAtoUARTTx+0x34>
 800d806:	e10b      	b.n	800da20 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d808:	4ac1      	ldr	r2, [pc, #772]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d100      	bne.n	800d810 <RemapAndLinkDMAtoUARTTx+0x3c>
 800d80e:	e118      	b.n	800da42 <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d810:	4abf      	ldr	r2, [pc, #764]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d100      	bne.n	800d818 <RemapAndLinkDMAtoUARTTx+0x44>
 800d816:	e124      	b.n	800da62 <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d818:	4abd      	ldr	r2, [pc, #756]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d100      	bne.n	800d820 <RemapAndLinkDMAtoUARTTx+0x4c>
 800d81e:	e131      	b.n	800da84 <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d820:	4abb      	ldr	r2, [pc, #748]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d100      	bne.n	800d828 <RemapAndLinkDMAtoUARTTx+0x54>
 800d826:	e13e      	b.n	800daa6 <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d828:	4ab9      	ldr	r2, [pc, #740]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d100      	bne.n	800d830 <RemapAndLinkDMAtoUARTTx+0x5c>
 800d82e:	e14a      	b.n	800dac6 <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d830:	4ab7      	ldr	r2, [pc, #732]	; (800db10 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d100      	bne.n	800d838 <RemapAndLinkDMAtoUARTTx+0x64>
 800d836:	e157      	b.n	800dae8 <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d838:	4ab6      	ldr	r2, [pc, #728]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d100      	bne.n	800d840 <RemapAndLinkDMAtoUARTTx+0x6c>
 800d83e:	e18b      	b.n	800db58 <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d840:	4ab4      	ldr	r2, [pc, #720]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d100      	bne.n	800d848 <RemapAndLinkDMAtoUARTTx+0x74>
 800d846:	e197      	b.n	800db78 <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d848:	4ab2      	ldr	r2, [pc, #712]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d100      	bne.n	800d850 <RemapAndLinkDMAtoUARTTx+0x7c>
 800d84e:	e1a4      	b.n	800db9a <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d850:	4ab0      	ldr	r2, [pc, #704]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d100      	bne.n	800d858 <RemapAndLinkDMAtoUARTTx+0x84>
 800d856:	e1b1      	b.n	800dbbc <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d858:	4aae      	ldr	r2, [pc, #696]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d100      	bne.n	800d860 <RemapAndLinkDMAtoUARTTx+0x8c>
 800d85e:	e1bd      	b.n	800dbdc <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d860:	4aac      	ldr	r2, [pc, #688]	; (800db14 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d100      	bne.n	800d868 <RemapAndLinkDMAtoUARTTx+0x94>
 800d866:	e1ca      	b.n	800dbfe <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d868:	4aab      	ldr	r2, [pc, #684]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d100      	bne.n	800d870 <RemapAndLinkDMAtoUARTTx+0x9c>
 800d86e:	e1d7      	b.n	800dc20 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d870:	4aa9      	ldr	r2, [pc, #676]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d100      	bne.n	800d878 <RemapAndLinkDMAtoUARTTx+0xa4>
 800d876:	e1e3      	b.n	800dc40 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d878:	4aa7      	ldr	r2, [pc, #668]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d100      	bne.n	800d880 <RemapAndLinkDMAtoUARTTx+0xac>
 800d87e:	e1f0      	b.n	800dc62 <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d880:	4aa5      	ldr	r2, [pc, #660]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d100      	bne.n	800d888 <RemapAndLinkDMAtoUARTTx+0xb4>
 800d886:	e1fd      	b.n	800dc84 <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d888:	4aa3      	ldr	r2, [pc, #652]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d100      	bne.n	800d890 <RemapAndLinkDMAtoUARTTx+0xbc>
 800d88e:	e209      	b.n	800dca4 <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d890:	4aa1      	ldr	r2, [pc, #644]	; (800db18 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d100      	bne.n	800d898 <RemapAndLinkDMAtoUARTTx+0xc4>
 800d896:	e216      	b.n	800dcc6 <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d898:	4aa0      	ldr	r2, [pc, #640]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d100      	bne.n	800d8a0 <RemapAndLinkDMAtoUARTTx+0xcc>
 800d89e:	e223      	b.n	800dce8 <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d8a0:	4a9e      	ldr	r2, [pc, #632]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d100      	bne.n	800d8a8 <RemapAndLinkDMAtoUARTTx+0xd4>
 800d8a6:	e22f      	b.n	800dd08 <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d8a8:	4a9c      	ldr	r2, [pc, #624]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d100      	bne.n	800d8b0 <RemapAndLinkDMAtoUARTTx+0xdc>
 800d8ae:	e23c      	b.n	800dd2a <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d8b0:	4a9a      	ldr	r2, [pc, #616]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d100      	bne.n	800d8b8 <RemapAndLinkDMAtoUARTTx+0xe4>
 800d8b6:	e249      	b.n	800dd4c <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d8b8:	4a98      	ldr	r2, [pc, #608]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d100      	bne.n	800d8c0 <RemapAndLinkDMAtoUARTTx+0xec>
 800d8be:	e255      	b.n	800dd6c <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d8c0:	4a96      	ldr	r2, [pc, #600]	; (800db1c <RemapAndLinkDMAtoUARTTx+0x348>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d100      	bne.n	800d8c8 <RemapAndLinkDMAtoUARTTx+0xf4>
 800d8c6:	e262      	b.n	800dd8e <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d8c8:	4a95      	ldr	r2, [pc, #596]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d100      	bne.n	800d8d0 <RemapAndLinkDMAtoUARTTx+0xfc>
 800d8ce:	e26f      	b.n	800ddb0 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d8d0:	4a93      	ldr	r2, [pc, #588]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d100      	bne.n	800d8d8 <RemapAndLinkDMAtoUARTTx+0x104>
 800d8d6:	e27b      	b.n	800ddd0 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d8d8:	4a91      	ldr	r2, [pc, #580]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d100      	bne.n	800d8e0 <RemapAndLinkDMAtoUARTTx+0x10c>
 800d8de:	e288      	b.n	800ddf2 <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d8e0:	4a8f      	ldr	r2, [pc, #572]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d100      	bne.n	800d8e8 <RemapAndLinkDMAtoUARTTx+0x114>
 800d8e6:	e295      	b.n	800de14 <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d8e8:	4a8d      	ldr	r2, [pc, #564]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d100      	bne.n	800d8f0 <RemapAndLinkDMAtoUARTTx+0x11c>
 800d8ee:	e2a1      	b.n	800de34 <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d8f0:	4a8b      	ldr	r2, [pc, #556]	; (800db20 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d100      	bne.n	800d8f8 <RemapAndLinkDMAtoUARTTx+0x124>
 800d8f6:	e2ae      	b.n	800de56 <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d8f8:	4a8a      	ldr	r2, [pc, #552]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d100      	bne.n	800d900 <RemapAndLinkDMAtoUARTTx+0x12c>
 800d8fe:	e2bb      	b.n	800de78 <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d900:	4a88      	ldr	r2, [pc, #544]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d100      	bne.n	800d908 <RemapAndLinkDMAtoUARTTx+0x134>
 800d906:	e2c7      	b.n	800de98 <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d908:	4a86      	ldr	r2, [pc, #536]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d100      	bne.n	800d910 <RemapAndLinkDMAtoUARTTx+0x13c>
 800d90e:	e2d4      	b.n	800deba <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d910:	4a84      	ldr	r2, [pc, #528]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d100      	bne.n	800d918 <RemapAndLinkDMAtoUARTTx+0x144>
 800d916:	e2f7      	b.n	800df08 <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d918:	4a82      	ldr	r2, [pc, #520]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d100      	bne.n	800d920 <RemapAndLinkDMAtoUARTTx+0x14c>
 800d91e:	e303      	b.n	800df28 <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d920:	4a80      	ldr	r2, [pc, #512]	; (800db24 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d100      	bne.n	800d928 <RemapAndLinkDMAtoUARTTx+0x154>
 800d926:	e310      	b.n	800df4a <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d928:	4a7f      	ldr	r2, [pc, #508]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d100      	bne.n	800d930 <RemapAndLinkDMAtoUARTTx+0x15c>
 800d92e:	e31d      	b.n	800df6c <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d930:	4a7d      	ldr	r2, [pc, #500]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d100      	bne.n	800d938 <RemapAndLinkDMAtoUARTTx+0x164>
 800d936:	e328      	b.n	800df8a <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d938:	4a7b      	ldr	r2, [pc, #492]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d100      	bne.n	800d940 <RemapAndLinkDMAtoUARTTx+0x16c>
 800d93e:	e335      	b.n	800dfac <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d940:	4a79      	ldr	r2, [pc, #484]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d100      	bne.n	800d948 <RemapAndLinkDMAtoUARTTx+0x174>
 800d946:	e342      	b.n	800dfce <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d948:	4a77      	ldr	r2, [pc, #476]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d100      	bne.n	800d950 <RemapAndLinkDMAtoUARTTx+0x17c>
 800d94e:	e34d      	b.n	800dfec <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d950:	4a75      	ldr	r2, [pc, #468]	; (800db28 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d11e      	bne.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d956:	4b75      	ldr	r3, [pc, #468]	; (800db2c <RemapAndLinkDMAtoUARTTx+0x358>)
 800d958:	680a      	ldr	r2, [r1, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d11a      	bne.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d95e:	4a74      	ldr	r2, [pc, #464]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d960:	23a8      	movs	r3, #168	; 0xa8
 800d962:	58d4      	ldr	r4, [r2, r3]
 800d964:	4d73      	ldr	r5, [pc, #460]	; (800db34 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d966:	402c      	ands	r4, r5
 800d968:	50d4      	str	r4, [r2, r3]
 800d96a:	58d5      	ldr	r5, [r2, r3]
 800d96c:	24f0      	movs	r4, #240	; 0xf0
 800d96e:	0324      	lsls	r4, r4, #12
 800d970:	432c      	orrs	r4, r5
 800d972:	50d4      	str	r4, [r2, r3]
 800d974:	e00e      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d976:	4a70      	ldr	r2, [pc, #448]	; (800db38 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d978:	680c      	ldr	r4, [r1, #0]
 800d97a:	4294      	cmp	r4, r2
 800d97c:	d000      	beq.n	800d980 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800d97e:	e72f      	b.n	800d7e0 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d980:	4a6e      	ldr	r2, [pc, #440]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800d982:	23a8      	movs	r3, #168	; 0xa8
 800d984:	58d4      	ldr	r4, [r2, r3]
 800d986:	25f0      	movs	r5, #240	; 0xf0
 800d988:	43ac      	bics	r4, r5
 800d98a:	50d4      	str	r4, [r2, r3]
 800d98c:	58d4      	ldr	r4, [r2, r3]
 800d98e:	3d70      	subs	r5, #112	; 0x70
 800d990:	432c      	orrs	r4, r5
 800d992:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d994:	6601      	str	r1, [r0, #96]	; 0x60
 800d996:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d998:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d99a:	4a69      	ldr	r2, [pc, #420]	; (800db40 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800d99c:	680c      	ldr	r4, [r1, #0]
 800d99e:	4294      	cmp	r4, r2
 800d9a0:	d000      	beq.n	800d9a4 <RemapAndLinkDMAtoUARTTx+0x1d0>
 800d9a2:	e721      	b.n	800d7e8 <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d9a4:	4a65      	ldr	r2, [pc, #404]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800d9a6:	23a8      	movs	r3, #168	; 0xa8
 800d9a8:	58d4      	ldr	r4, [r2, r3]
 800d9aa:	4d66      	ldr	r5, [pc, #408]	; (800db44 <RemapAndLinkDMAtoUARTTx+0x370>)
 800d9ac:	402c      	ands	r4, r5
 800d9ae:	50d4      	str	r4, [r2, r3]
 800d9b0:	58d5      	ldr	r5, [r2, r3]
 800d9b2:	2480      	movs	r4, #128	; 0x80
 800d9b4:	0224      	lsls	r4, r4, #8
 800d9b6:	432c      	orrs	r4, r5
 800d9b8:	50d4      	str	r4, [r2, r3]
 800d9ba:	e7eb      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d9bc:	4a62      	ldr	r2, [pc, #392]	; (800db48 <RemapAndLinkDMAtoUARTTx+0x374>)
 800d9be:	680c      	ldr	r4, [r1, #0]
 800d9c0:	4294      	cmp	r4, r2
 800d9c2:	d000      	beq.n	800d9c6 <RemapAndLinkDMAtoUARTTx+0x1f2>
 800d9c4:	e714      	b.n	800d7f0 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d9c6:	4a5d      	ldr	r2, [pc, #372]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800d9c8:	23a8      	movs	r3, #168	; 0xa8
 800d9ca:	58d4      	ldr	r4, [r2, r3]
 800d9cc:	4d5f      	ldr	r5, [pc, #380]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x378>)
 800d9ce:	402c      	ands	r4, r5
 800d9d0:	50d4      	str	r4, [r2, r3]
 800d9d2:	58d5      	ldr	r5, [r2, r3]
 800d9d4:	2480      	movs	r4, #128	; 0x80
 800d9d6:	0524      	lsls	r4, r4, #20
 800d9d8:	432c      	orrs	r4, r5
 800d9da:	50d4      	str	r4, [r2, r3]
 800d9dc:	e7da      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d9de:	4a5c      	ldr	r2, [pc, #368]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800d9e0:	680c      	ldr	r4, [r1, #0]
 800d9e2:	4294      	cmp	r4, r2
 800d9e4:	d000      	beq.n	800d9e8 <RemapAndLinkDMAtoUARTTx+0x214>
 800d9e6:	e707      	b.n	800d7f8 <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d9e8:	4a51      	ldr	r2, [pc, #324]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d9ea:	23a8      	movs	r3, #168	; 0xa8
 800d9ec:	58d4      	ldr	r4, [r2, r3]
 800d9ee:	250f      	movs	r5, #15
 800d9f0:	43ac      	bics	r4, r5
 800d9f2:	50d4      	str	r4, [r2, r3]
 800d9f4:	58d4      	ldr	r4, [r2, r3]
 800d9f6:	3d07      	subs	r5, #7
 800d9f8:	432c      	orrs	r4, r5
 800d9fa:	50d4      	str	r4, [r2, r3]
 800d9fc:	e7ca      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d9fe:	4a55      	ldr	r2, [pc, #340]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x380>)
 800da00:	680c      	ldr	r4, [r1, #0]
 800da02:	4294      	cmp	r4, r2
 800da04:	d000      	beq.n	800da08 <RemapAndLinkDMAtoUARTTx+0x234>
 800da06:	e6fb      	b.n	800d800 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800da08:	4a49      	ldr	r2, [pc, #292]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800da0a:	23a8      	movs	r3, #168	; 0xa8
 800da0c:	58d4      	ldr	r4, [r2, r3]
 800da0e:	4d4d      	ldr	r5, [pc, #308]	; (800db44 <RemapAndLinkDMAtoUARTTx+0x370>)
 800da10:	402c      	ands	r4, r5
 800da12:	50d4      	str	r4, [r2, r3]
 800da14:	58d5      	ldr	r5, [r2, r3]
 800da16:	2480      	movs	r4, #128	; 0x80
 800da18:	0224      	lsls	r4, r4, #8
 800da1a:	432c      	orrs	r4, r5
 800da1c:	50d4      	str	r4, [r2, r3]
 800da1e:	e7b9      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800da20:	4a42      	ldr	r2, [pc, #264]	; (800db2c <RemapAndLinkDMAtoUARTTx+0x358>)
 800da22:	680c      	ldr	r4, [r1, #0]
 800da24:	4294      	cmp	r4, r2
 800da26:	d000      	beq.n	800da2a <RemapAndLinkDMAtoUARTTx+0x256>
 800da28:	e6ee      	b.n	800d808 <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800da2a:	4a41      	ldr	r2, [pc, #260]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800da2c:	23a8      	movs	r3, #168	; 0xa8
 800da2e:	58d4      	ldr	r4, [r2, r3]
 800da30:	4d40      	ldr	r5, [pc, #256]	; (800db34 <RemapAndLinkDMAtoUARTTx+0x360>)
 800da32:	402c      	ands	r4, r5
 800da34:	50d4      	str	r4, [r2, r3]
 800da36:	58d5      	ldr	r5, [r2, r3]
 800da38:	2480      	movs	r4, #128	; 0x80
 800da3a:	0324      	lsls	r4, r4, #12
 800da3c:	432c      	orrs	r4, r5
 800da3e:	50d4      	str	r4, [r2, r3]
 800da40:	e7a8      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800da42:	4a3d      	ldr	r2, [pc, #244]	; (800db38 <RemapAndLinkDMAtoUARTTx+0x364>)
 800da44:	680c      	ldr	r4, [r1, #0]
 800da46:	4294      	cmp	r4, r2
 800da48:	d000      	beq.n	800da4c <RemapAndLinkDMAtoUARTTx+0x278>
 800da4a:	e6e1      	b.n	800d810 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800da4c:	4a3b      	ldr	r2, [pc, #236]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800da4e:	23a8      	movs	r3, #168	; 0xa8
 800da50:	58d4      	ldr	r4, [r2, r3]
 800da52:	25f0      	movs	r5, #240	; 0xf0
 800da54:	43ac      	bics	r4, r5
 800da56:	50d4      	str	r4, [r2, r3]
 800da58:	58d4      	ldr	r4, [r2, r3]
 800da5a:	3d60      	subs	r5, #96	; 0x60
 800da5c:	432c      	orrs	r4, r5
 800da5e:	50d4      	str	r4, [r2, r3]
 800da60:	e798      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800da62:	4a37      	ldr	r2, [pc, #220]	; (800db40 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800da64:	680c      	ldr	r4, [r1, #0]
 800da66:	4294      	cmp	r4, r2
 800da68:	d000      	beq.n	800da6c <RemapAndLinkDMAtoUARTTx+0x298>
 800da6a:	e6d5      	b.n	800d818 <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800da6c:	4a33      	ldr	r2, [pc, #204]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800da6e:	23a8      	movs	r3, #168	; 0xa8
 800da70:	58d4      	ldr	r4, [r2, r3]
 800da72:	4d34      	ldr	r5, [pc, #208]	; (800db44 <RemapAndLinkDMAtoUARTTx+0x370>)
 800da74:	402c      	ands	r4, r5
 800da76:	50d4      	str	r4, [r2, r3]
 800da78:	58d5      	ldr	r5, [r2, r3]
 800da7a:	2490      	movs	r4, #144	; 0x90
 800da7c:	0224      	lsls	r4, r4, #8
 800da7e:	432c      	orrs	r4, r5
 800da80:	50d4      	str	r4, [r2, r3]
 800da82:	e787      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800da84:	4a30      	ldr	r2, [pc, #192]	; (800db48 <RemapAndLinkDMAtoUARTTx+0x374>)
 800da86:	680c      	ldr	r4, [r1, #0]
 800da88:	4294      	cmp	r4, r2
 800da8a:	d000      	beq.n	800da8e <RemapAndLinkDMAtoUARTTx+0x2ba>
 800da8c:	e6c8      	b.n	800d820 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800da8e:	4a2b      	ldr	r2, [pc, #172]	; (800db3c <RemapAndLinkDMAtoUARTTx+0x368>)
 800da90:	23a8      	movs	r3, #168	; 0xa8
 800da92:	58d4      	ldr	r4, [r2, r3]
 800da94:	4d2d      	ldr	r5, [pc, #180]	; (800db4c <RemapAndLinkDMAtoUARTTx+0x378>)
 800da96:	402c      	ands	r4, r5
 800da98:	50d4      	str	r4, [r2, r3]
 800da9a:	58d5      	ldr	r5, [r2, r3]
 800da9c:	2490      	movs	r4, #144	; 0x90
 800da9e:	0524      	lsls	r4, r4, #20
 800daa0:	432c      	orrs	r4, r5
 800daa2:	50d4      	str	r4, [r2, r3]
 800daa4:	e776      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800daa6:	4a2a      	ldr	r2, [pc, #168]	; (800db50 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800daa8:	680c      	ldr	r4, [r1, #0]
 800daaa:	4294      	cmp	r4, r2
 800daac:	d000      	beq.n	800dab0 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800daae:	e6bb      	b.n	800d828 <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800dab0:	4a1f      	ldr	r2, [pc, #124]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800dab2:	23a8      	movs	r3, #168	; 0xa8
 800dab4:	58d4      	ldr	r4, [r2, r3]
 800dab6:	250f      	movs	r5, #15
 800dab8:	43ac      	bics	r4, r5
 800daba:	50d4      	str	r4, [r2, r3]
 800dabc:	58d4      	ldr	r4, [r2, r3]
 800dabe:	3d06      	subs	r5, #6
 800dac0:	432c      	orrs	r4, r5
 800dac2:	50d4      	str	r4, [r2, r3]
 800dac4:	e766      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800dac6:	4a23      	ldr	r2, [pc, #140]	; (800db54 <RemapAndLinkDMAtoUARTTx+0x380>)
 800dac8:	680c      	ldr	r4, [r1, #0]
 800daca:	4294      	cmp	r4, r2
 800dacc:	d000      	beq.n	800dad0 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800dace:	e6af      	b.n	800d830 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800dad0:	4a17      	ldr	r2, [pc, #92]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800dad2:	23a8      	movs	r3, #168	; 0xa8
 800dad4:	58d4      	ldr	r4, [r2, r3]
 800dad6:	4d1b      	ldr	r5, [pc, #108]	; (800db44 <RemapAndLinkDMAtoUARTTx+0x370>)
 800dad8:	402c      	ands	r4, r5
 800dada:	50d4      	str	r4, [r2, r3]
 800dadc:	58d5      	ldr	r5, [r2, r3]
 800dade:	2490      	movs	r4, #144	; 0x90
 800dae0:	0224      	lsls	r4, r4, #8
 800dae2:	432c      	orrs	r4, r5
 800dae4:	50d4      	str	r4, [r2, r3]
 800dae6:	e755      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800dae8:	4a10      	ldr	r2, [pc, #64]	; (800db2c <RemapAndLinkDMAtoUARTTx+0x358>)
 800daea:	680c      	ldr	r4, [r1, #0]
 800daec:	4294      	cmp	r4, r2
 800daee:	d000      	beq.n	800daf2 <RemapAndLinkDMAtoUARTTx+0x31e>
 800daf0:	e6a2      	b.n	800d838 <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800daf2:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800daf4:	23a8      	movs	r3, #168	; 0xa8
 800daf6:	58d4      	ldr	r4, [r2, r3]
 800daf8:	4d0e      	ldr	r5, [pc, #56]	; (800db34 <RemapAndLinkDMAtoUARTTx+0x360>)
 800dafa:	402c      	ands	r4, r5
 800dafc:	50d4      	str	r4, [r2, r3]
 800dafe:	58d5      	ldr	r5, [r2, r3]
 800db00:	2490      	movs	r4, #144	; 0x90
 800db02:	0324      	lsls	r4, r4, #12
 800db04:	432c      	orrs	r4, r5
 800db06:	50d4      	str	r4, [r2, r3]
 800db08:	e744      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800db0a:	46c0      	nop			; (mov r8, r8)
 800db0c:	40013800 	.word	0x40013800
 800db10:	40004400 	.word	0x40004400
 800db14:	40004800 	.word	0x40004800
 800db18:	40004c00 	.word	0x40004c00
 800db1c:	40005000 	.word	0x40005000
 800db20:	40011400 	.word	0x40011400
 800db24:	40011800 	.word	0x40011800
 800db28:	40011c00 	.word	0x40011c00
 800db2c:	40020458 	.word	0x40020458
 800db30:	40020400 	.word	0x40020400
 800db34:	fff0ffff 	.word	0xfff0ffff
 800db38:	4002001c 	.word	0x4002001c
 800db3c:	40020000 	.word	0x40020000
 800db40:	40020044 	.word	0x40020044
 800db44:	ffff0fff 	.word	0xffff0fff
 800db48:	40020080 	.word	0x40020080
 800db4c:	f0ffffff 	.word	0xf0ffffff
 800db50:	40020408 	.word	0x40020408
 800db54:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800db58:	4ae0      	ldr	r2, [pc, #896]	; (800dedc <RemapAndLinkDMAtoUARTTx+0x708>)
 800db5a:	680c      	ldr	r4, [r1, #0]
 800db5c:	4294      	cmp	r4, r2
 800db5e:	d000      	beq.n	800db62 <RemapAndLinkDMAtoUARTTx+0x38e>
 800db60:	e66e      	b.n	800d840 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800db62:	4adf      	ldr	r2, [pc, #892]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800db64:	23a8      	movs	r3, #168	; 0xa8
 800db66:	58d4      	ldr	r4, [r2, r3]
 800db68:	25f0      	movs	r5, #240	; 0xf0
 800db6a:	43ac      	bics	r4, r5
 800db6c:	50d4      	str	r4, [r2, r3]
 800db6e:	58d4      	ldr	r4, [r2, r3]
 800db70:	3d50      	subs	r5, #80	; 0x50
 800db72:	432c      	orrs	r4, r5
 800db74:	50d4      	str	r4, [r2, r3]
 800db76:	e70d      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800db78:	4ada      	ldr	r2, [pc, #872]	; (800dee4 <RemapAndLinkDMAtoUARTTx+0x710>)
 800db7a:	680c      	ldr	r4, [r1, #0]
 800db7c:	4294      	cmp	r4, r2
 800db7e:	d000      	beq.n	800db82 <RemapAndLinkDMAtoUARTTx+0x3ae>
 800db80:	e662      	b.n	800d848 <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800db82:	4ad7      	ldr	r2, [pc, #860]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800db84:	23a8      	movs	r3, #168	; 0xa8
 800db86:	58d4      	ldr	r4, [r2, r3]
 800db88:	4dd7      	ldr	r5, [pc, #860]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800db8a:	402c      	ands	r4, r5
 800db8c:	50d4      	str	r4, [r2, r3]
 800db8e:	58d5      	ldr	r5, [r2, r3]
 800db90:	24a0      	movs	r4, #160	; 0xa0
 800db92:	0224      	lsls	r4, r4, #8
 800db94:	432c      	orrs	r4, r5
 800db96:	50d4      	str	r4, [r2, r3]
 800db98:	e6fc      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800db9a:	4ad4      	ldr	r2, [pc, #848]	; (800deec <RemapAndLinkDMAtoUARTTx+0x718>)
 800db9c:	680c      	ldr	r4, [r1, #0]
 800db9e:	4294      	cmp	r4, r2
 800dba0:	d000      	beq.n	800dba4 <RemapAndLinkDMAtoUARTTx+0x3d0>
 800dba2:	e655      	b.n	800d850 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800dba4:	4ace      	ldr	r2, [pc, #824]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dba6:	23a8      	movs	r3, #168	; 0xa8
 800dba8:	58d4      	ldr	r4, [r2, r3]
 800dbaa:	4dd1      	ldr	r5, [pc, #836]	; (800def0 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800dbac:	402c      	ands	r4, r5
 800dbae:	50d4      	str	r4, [r2, r3]
 800dbb0:	58d5      	ldr	r5, [r2, r3]
 800dbb2:	24a0      	movs	r4, #160	; 0xa0
 800dbb4:	0524      	lsls	r4, r4, #20
 800dbb6:	432c      	orrs	r4, r5
 800dbb8:	50d4      	str	r4, [r2, r3]
 800dbba:	e6eb      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800dbbc:	4acd      	ldr	r2, [pc, #820]	; (800def4 <RemapAndLinkDMAtoUARTTx+0x720>)
 800dbbe:	680c      	ldr	r4, [r1, #0]
 800dbc0:	4294      	cmp	r4, r2
 800dbc2:	d000      	beq.n	800dbc6 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800dbc4:	e648      	b.n	800d858 <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800dbc6:	4acc      	ldr	r2, [pc, #816]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dbc8:	23a8      	movs	r3, #168	; 0xa8
 800dbca:	58d4      	ldr	r4, [r2, r3]
 800dbcc:	250f      	movs	r5, #15
 800dbce:	43ac      	bics	r4, r5
 800dbd0:	50d4      	str	r4, [r2, r3]
 800dbd2:	58d4      	ldr	r4, [r2, r3]
 800dbd4:	3d05      	subs	r5, #5
 800dbd6:	432c      	orrs	r4, r5
 800dbd8:	50d4      	str	r4, [r2, r3]
 800dbda:	e6db      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800dbdc:	4ac7      	ldr	r2, [pc, #796]	; (800defc <RemapAndLinkDMAtoUARTTx+0x728>)
 800dbde:	680c      	ldr	r4, [r1, #0]
 800dbe0:	4294      	cmp	r4, r2
 800dbe2:	d000      	beq.n	800dbe6 <RemapAndLinkDMAtoUARTTx+0x412>
 800dbe4:	e63c      	b.n	800d860 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800dbe6:	4ac4      	ldr	r2, [pc, #784]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dbe8:	23a8      	movs	r3, #168	; 0xa8
 800dbea:	58d4      	ldr	r4, [r2, r3]
 800dbec:	4dbe      	ldr	r5, [pc, #760]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dbee:	402c      	ands	r4, r5
 800dbf0:	50d4      	str	r4, [r2, r3]
 800dbf2:	58d5      	ldr	r5, [r2, r3]
 800dbf4:	24a0      	movs	r4, #160	; 0xa0
 800dbf6:	0224      	lsls	r4, r4, #8
 800dbf8:	432c      	orrs	r4, r5
 800dbfa:	50d4      	str	r4, [r2, r3]
 800dbfc:	e6ca      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800dbfe:	4ac0      	ldr	r2, [pc, #768]	; (800df00 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800dc00:	680c      	ldr	r4, [r1, #0]
 800dc02:	4294      	cmp	r4, r2
 800dc04:	d000      	beq.n	800dc08 <RemapAndLinkDMAtoUARTTx+0x434>
 800dc06:	e62f      	b.n	800d868 <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800dc08:	4abb      	ldr	r2, [pc, #748]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dc0a:	23a8      	movs	r3, #168	; 0xa8
 800dc0c:	58d4      	ldr	r4, [r2, r3]
 800dc0e:	4dbd      	ldr	r5, [pc, #756]	; (800df04 <RemapAndLinkDMAtoUARTTx+0x730>)
 800dc10:	402c      	ands	r4, r5
 800dc12:	50d4      	str	r4, [r2, r3]
 800dc14:	58d5      	ldr	r5, [r2, r3]
 800dc16:	24a0      	movs	r4, #160	; 0xa0
 800dc18:	0324      	lsls	r4, r4, #12
 800dc1a:	432c      	orrs	r4, r5
 800dc1c:	50d4      	str	r4, [r2, r3]
 800dc1e:	e6b9      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800dc20:	4aae      	ldr	r2, [pc, #696]	; (800dedc <RemapAndLinkDMAtoUARTTx+0x708>)
 800dc22:	680c      	ldr	r4, [r1, #0]
 800dc24:	4294      	cmp	r4, r2
 800dc26:	d000      	beq.n	800dc2a <RemapAndLinkDMAtoUARTTx+0x456>
 800dc28:	e622      	b.n	800d870 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800dc2a:	4aad      	ldr	r2, [pc, #692]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dc2c:	23a8      	movs	r3, #168	; 0xa8
 800dc2e:	58d4      	ldr	r4, [r2, r3]
 800dc30:	25f0      	movs	r5, #240	; 0xf0
 800dc32:	43ac      	bics	r4, r5
 800dc34:	50d4      	str	r4, [r2, r3]
 800dc36:	58d4      	ldr	r4, [r2, r3]
 800dc38:	3d40      	subs	r5, #64	; 0x40
 800dc3a:	432c      	orrs	r4, r5
 800dc3c:	50d4      	str	r4, [r2, r3]
 800dc3e:	e6a9      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800dc40:	4aa8      	ldr	r2, [pc, #672]	; (800dee4 <RemapAndLinkDMAtoUARTTx+0x710>)
 800dc42:	680c      	ldr	r4, [r1, #0]
 800dc44:	4294      	cmp	r4, r2
 800dc46:	d000      	beq.n	800dc4a <RemapAndLinkDMAtoUARTTx+0x476>
 800dc48:	e616      	b.n	800d878 <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800dc4a:	4aa5      	ldr	r2, [pc, #660]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dc4c:	23a8      	movs	r3, #168	; 0xa8
 800dc4e:	58d4      	ldr	r4, [r2, r3]
 800dc50:	4da5      	ldr	r5, [pc, #660]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dc52:	402c      	ands	r4, r5
 800dc54:	50d4      	str	r4, [r2, r3]
 800dc56:	58d5      	ldr	r5, [r2, r3]
 800dc58:	24b0      	movs	r4, #176	; 0xb0
 800dc5a:	0224      	lsls	r4, r4, #8
 800dc5c:	432c      	orrs	r4, r5
 800dc5e:	50d4      	str	r4, [r2, r3]
 800dc60:	e698      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800dc62:	4aa2      	ldr	r2, [pc, #648]	; (800deec <RemapAndLinkDMAtoUARTTx+0x718>)
 800dc64:	680c      	ldr	r4, [r1, #0]
 800dc66:	4294      	cmp	r4, r2
 800dc68:	d000      	beq.n	800dc6c <RemapAndLinkDMAtoUARTTx+0x498>
 800dc6a:	e609      	b.n	800d880 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800dc6c:	4a9c      	ldr	r2, [pc, #624]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dc6e:	23a8      	movs	r3, #168	; 0xa8
 800dc70:	58d4      	ldr	r4, [r2, r3]
 800dc72:	4d9f      	ldr	r5, [pc, #636]	; (800def0 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800dc74:	402c      	ands	r4, r5
 800dc76:	50d4      	str	r4, [r2, r3]
 800dc78:	58d5      	ldr	r5, [r2, r3]
 800dc7a:	24b0      	movs	r4, #176	; 0xb0
 800dc7c:	0524      	lsls	r4, r4, #20
 800dc7e:	432c      	orrs	r4, r5
 800dc80:	50d4      	str	r4, [r2, r3]
 800dc82:	e687      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800dc84:	4a9b      	ldr	r2, [pc, #620]	; (800def4 <RemapAndLinkDMAtoUARTTx+0x720>)
 800dc86:	680c      	ldr	r4, [r1, #0]
 800dc88:	4294      	cmp	r4, r2
 800dc8a:	d000      	beq.n	800dc8e <RemapAndLinkDMAtoUARTTx+0x4ba>
 800dc8c:	e5fc      	b.n	800d888 <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800dc8e:	4a9a      	ldr	r2, [pc, #616]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dc90:	23a8      	movs	r3, #168	; 0xa8
 800dc92:	58d4      	ldr	r4, [r2, r3]
 800dc94:	250f      	movs	r5, #15
 800dc96:	43ac      	bics	r4, r5
 800dc98:	50d4      	str	r4, [r2, r3]
 800dc9a:	58d4      	ldr	r4, [r2, r3]
 800dc9c:	3d04      	subs	r5, #4
 800dc9e:	432c      	orrs	r4, r5
 800dca0:	50d4      	str	r4, [r2, r3]
 800dca2:	e677      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800dca4:	4a95      	ldr	r2, [pc, #596]	; (800defc <RemapAndLinkDMAtoUARTTx+0x728>)
 800dca6:	680c      	ldr	r4, [r1, #0]
 800dca8:	4294      	cmp	r4, r2
 800dcaa:	d000      	beq.n	800dcae <RemapAndLinkDMAtoUARTTx+0x4da>
 800dcac:	e5f0      	b.n	800d890 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800dcae:	4a92      	ldr	r2, [pc, #584]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dcb0:	23a8      	movs	r3, #168	; 0xa8
 800dcb2:	58d4      	ldr	r4, [r2, r3]
 800dcb4:	4d8c      	ldr	r5, [pc, #560]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dcb6:	402c      	ands	r4, r5
 800dcb8:	50d4      	str	r4, [r2, r3]
 800dcba:	58d5      	ldr	r5, [r2, r3]
 800dcbc:	24b0      	movs	r4, #176	; 0xb0
 800dcbe:	0224      	lsls	r4, r4, #8
 800dcc0:	432c      	orrs	r4, r5
 800dcc2:	50d4      	str	r4, [r2, r3]
 800dcc4:	e666      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800dcc6:	4a8e      	ldr	r2, [pc, #568]	; (800df00 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800dcc8:	680c      	ldr	r4, [r1, #0]
 800dcca:	4294      	cmp	r4, r2
 800dccc:	d000      	beq.n	800dcd0 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800dcce:	e5e3      	b.n	800d898 <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800dcd0:	4a89      	ldr	r2, [pc, #548]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dcd2:	23a8      	movs	r3, #168	; 0xa8
 800dcd4:	58d4      	ldr	r4, [r2, r3]
 800dcd6:	4d8b      	ldr	r5, [pc, #556]	; (800df04 <RemapAndLinkDMAtoUARTTx+0x730>)
 800dcd8:	402c      	ands	r4, r5
 800dcda:	50d4      	str	r4, [r2, r3]
 800dcdc:	58d5      	ldr	r5, [r2, r3]
 800dcde:	24b0      	movs	r4, #176	; 0xb0
 800dce0:	0324      	lsls	r4, r4, #12
 800dce2:	432c      	orrs	r4, r5
 800dce4:	50d4      	str	r4, [r2, r3]
 800dce6:	e655      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800dce8:	4a7c      	ldr	r2, [pc, #496]	; (800dedc <RemapAndLinkDMAtoUARTTx+0x708>)
 800dcea:	680c      	ldr	r4, [r1, #0]
 800dcec:	4294      	cmp	r4, r2
 800dcee:	d000      	beq.n	800dcf2 <RemapAndLinkDMAtoUARTTx+0x51e>
 800dcf0:	e5d6      	b.n	800d8a0 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800dcf2:	4a7b      	ldr	r2, [pc, #492]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dcf4:	23a8      	movs	r3, #168	; 0xa8
 800dcf6:	58d4      	ldr	r4, [r2, r3]
 800dcf8:	25f0      	movs	r5, #240	; 0xf0
 800dcfa:	43ac      	bics	r4, r5
 800dcfc:	50d4      	str	r4, [r2, r3]
 800dcfe:	58d4      	ldr	r4, [r2, r3]
 800dd00:	3d30      	subs	r5, #48	; 0x30
 800dd02:	432c      	orrs	r4, r5
 800dd04:	50d4      	str	r4, [r2, r3]
 800dd06:	e645      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800dd08:	4a76      	ldr	r2, [pc, #472]	; (800dee4 <RemapAndLinkDMAtoUARTTx+0x710>)
 800dd0a:	680c      	ldr	r4, [r1, #0]
 800dd0c:	4294      	cmp	r4, r2
 800dd0e:	d000      	beq.n	800dd12 <RemapAndLinkDMAtoUARTTx+0x53e>
 800dd10:	e5ca      	b.n	800d8a8 <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800dd12:	4a73      	ldr	r2, [pc, #460]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dd14:	23a8      	movs	r3, #168	; 0xa8
 800dd16:	58d4      	ldr	r4, [r2, r3]
 800dd18:	4d73      	ldr	r5, [pc, #460]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dd1a:	402c      	ands	r4, r5
 800dd1c:	50d4      	str	r4, [r2, r3]
 800dd1e:	58d5      	ldr	r5, [r2, r3]
 800dd20:	24c0      	movs	r4, #192	; 0xc0
 800dd22:	0224      	lsls	r4, r4, #8
 800dd24:	432c      	orrs	r4, r5
 800dd26:	50d4      	str	r4, [r2, r3]
 800dd28:	e634      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800dd2a:	4a70      	ldr	r2, [pc, #448]	; (800deec <RemapAndLinkDMAtoUARTTx+0x718>)
 800dd2c:	680c      	ldr	r4, [r1, #0]
 800dd2e:	4294      	cmp	r4, r2
 800dd30:	d000      	beq.n	800dd34 <RemapAndLinkDMAtoUARTTx+0x560>
 800dd32:	e5bd      	b.n	800d8b0 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800dd34:	4a6a      	ldr	r2, [pc, #424]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dd36:	23a8      	movs	r3, #168	; 0xa8
 800dd38:	58d4      	ldr	r4, [r2, r3]
 800dd3a:	4d6d      	ldr	r5, [pc, #436]	; (800def0 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800dd3c:	402c      	ands	r4, r5
 800dd3e:	50d4      	str	r4, [r2, r3]
 800dd40:	58d5      	ldr	r5, [r2, r3]
 800dd42:	24c0      	movs	r4, #192	; 0xc0
 800dd44:	0524      	lsls	r4, r4, #20
 800dd46:	432c      	orrs	r4, r5
 800dd48:	50d4      	str	r4, [r2, r3]
 800dd4a:	e623      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800dd4c:	4a69      	ldr	r2, [pc, #420]	; (800def4 <RemapAndLinkDMAtoUARTTx+0x720>)
 800dd4e:	680c      	ldr	r4, [r1, #0]
 800dd50:	4294      	cmp	r4, r2
 800dd52:	d000      	beq.n	800dd56 <RemapAndLinkDMAtoUARTTx+0x582>
 800dd54:	e5b0      	b.n	800d8b8 <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800dd56:	4a68      	ldr	r2, [pc, #416]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dd58:	23a8      	movs	r3, #168	; 0xa8
 800dd5a:	58d4      	ldr	r4, [r2, r3]
 800dd5c:	250f      	movs	r5, #15
 800dd5e:	43ac      	bics	r4, r5
 800dd60:	50d4      	str	r4, [r2, r3]
 800dd62:	58d4      	ldr	r4, [r2, r3]
 800dd64:	3d03      	subs	r5, #3
 800dd66:	432c      	orrs	r4, r5
 800dd68:	50d4      	str	r4, [r2, r3]
 800dd6a:	e613      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800dd6c:	4a63      	ldr	r2, [pc, #396]	; (800defc <RemapAndLinkDMAtoUARTTx+0x728>)
 800dd6e:	680c      	ldr	r4, [r1, #0]
 800dd70:	4294      	cmp	r4, r2
 800dd72:	d000      	beq.n	800dd76 <RemapAndLinkDMAtoUARTTx+0x5a2>
 800dd74:	e5a4      	b.n	800d8c0 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800dd76:	4a60      	ldr	r2, [pc, #384]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dd78:	23a8      	movs	r3, #168	; 0xa8
 800dd7a:	58d4      	ldr	r4, [r2, r3]
 800dd7c:	4d5a      	ldr	r5, [pc, #360]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dd7e:	402c      	ands	r4, r5
 800dd80:	50d4      	str	r4, [r2, r3]
 800dd82:	58d5      	ldr	r5, [r2, r3]
 800dd84:	24c0      	movs	r4, #192	; 0xc0
 800dd86:	0224      	lsls	r4, r4, #8
 800dd88:	432c      	orrs	r4, r5
 800dd8a:	50d4      	str	r4, [r2, r3]
 800dd8c:	e602      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800dd8e:	4a5c      	ldr	r2, [pc, #368]	; (800df00 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800dd90:	680c      	ldr	r4, [r1, #0]
 800dd92:	4294      	cmp	r4, r2
 800dd94:	d000      	beq.n	800dd98 <RemapAndLinkDMAtoUARTTx+0x5c4>
 800dd96:	e597      	b.n	800d8c8 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800dd98:	4a57      	ldr	r2, [pc, #348]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800dd9a:	23a8      	movs	r3, #168	; 0xa8
 800dd9c:	58d4      	ldr	r4, [r2, r3]
 800dd9e:	4d59      	ldr	r5, [pc, #356]	; (800df04 <RemapAndLinkDMAtoUARTTx+0x730>)
 800dda0:	402c      	ands	r4, r5
 800dda2:	50d4      	str	r4, [r2, r3]
 800dda4:	58d5      	ldr	r5, [r2, r3]
 800dda6:	24c0      	movs	r4, #192	; 0xc0
 800dda8:	0324      	lsls	r4, r4, #12
 800ddaa:	432c      	orrs	r4, r5
 800ddac:	50d4      	str	r4, [r2, r3]
 800ddae:	e5f1      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800ddb0:	4a4a      	ldr	r2, [pc, #296]	; (800dedc <RemapAndLinkDMAtoUARTTx+0x708>)
 800ddb2:	680c      	ldr	r4, [r1, #0]
 800ddb4:	4294      	cmp	r4, r2
 800ddb6:	d000      	beq.n	800ddba <RemapAndLinkDMAtoUARTTx+0x5e6>
 800ddb8:	e58a      	b.n	800d8d0 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800ddba:	4a49      	ldr	r2, [pc, #292]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ddbc:	23a8      	movs	r3, #168	; 0xa8
 800ddbe:	58d4      	ldr	r4, [r2, r3]
 800ddc0:	25f0      	movs	r5, #240	; 0xf0
 800ddc2:	43ac      	bics	r4, r5
 800ddc4:	50d4      	str	r4, [r2, r3]
 800ddc6:	58d4      	ldr	r4, [r2, r3]
 800ddc8:	3d20      	subs	r5, #32
 800ddca:	432c      	orrs	r4, r5
 800ddcc:	50d4      	str	r4, [r2, r3]
 800ddce:	e5e1      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800ddd0:	4a44      	ldr	r2, [pc, #272]	; (800dee4 <RemapAndLinkDMAtoUARTTx+0x710>)
 800ddd2:	680c      	ldr	r4, [r1, #0]
 800ddd4:	4294      	cmp	r4, r2
 800ddd6:	d000      	beq.n	800ddda <RemapAndLinkDMAtoUARTTx+0x606>
 800ddd8:	e57e      	b.n	800d8d8 <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800ddda:	4a41      	ldr	r2, [pc, #260]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dddc:	23a8      	movs	r3, #168	; 0xa8
 800ddde:	58d4      	ldr	r4, [r2, r3]
 800dde0:	4d41      	ldr	r5, [pc, #260]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800dde2:	402c      	ands	r4, r5
 800dde4:	50d4      	str	r4, [r2, r3]
 800dde6:	58d5      	ldr	r5, [r2, r3]
 800dde8:	24d0      	movs	r4, #208	; 0xd0
 800ddea:	0224      	lsls	r4, r4, #8
 800ddec:	432c      	orrs	r4, r5
 800ddee:	50d4      	str	r4, [r2, r3]
 800ddf0:	e5d0      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800ddf2:	4a3e      	ldr	r2, [pc, #248]	; (800deec <RemapAndLinkDMAtoUARTTx+0x718>)
 800ddf4:	680c      	ldr	r4, [r1, #0]
 800ddf6:	4294      	cmp	r4, r2
 800ddf8:	d000      	beq.n	800ddfc <RemapAndLinkDMAtoUARTTx+0x628>
 800ddfa:	e571      	b.n	800d8e0 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800ddfc:	4a38      	ldr	r2, [pc, #224]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ddfe:	23a8      	movs	r3, #168	; 0xa8
 800de00:	58d4      	ldr	r4, [r2, r3]
 800de02:	4d3b      	ldr	r5, [pc, #236]	; (800def0 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800de04:	402c      	ands	r4, r5
 800de06:	50d4      	str	r4, [r2, r3]
 800de08:	58d5      	ldr	r5, [r2, r3]
 800de0a:	24d0      	movs	r4, #208	; 0xd0
 800de0c:	0524      	lsls	r4, r4, #20
 800de0e:	432c      	orrs	r4, r5
 800de10:	50d4      	str	r4, [r2, r3]
 800de12:	e5bf      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800de14:	4a37      	ldr	r2, [pc, #220]	; (800def4 <RemapAndLinkDMAtoUARTTx+0x720>)
 800de16:	680c      	ldr	r4, [r1, #0]
 800de18:	4294      	cmp	r4, r2
 800de1a:	d000      	beq.n	800de1e <RemapAndLinkDMAtoUARTTx+0x64a>
 800de1c:	e564      	b.n	800d8e8 <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800de1e:	4a36      	ldr	r2, [pc, #216]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800de20:	23a8      	movs	r3, #168	; 0xa8
 800de22:	58d4      	ldr	r4, [r2, r3]
 800de24:	250f      	movs	r5, #15
 800de26:	43ac      	bics	r4, r5
 800de28:	50d4      	str	r4, [r2, r3]
 800de2a:	58d4      	ldr	r4, [r2, r3]
 800de2c:	3d02      	subs	r5, #2
 800de2e:	432c      	orrs	r4, r5
 800de30:	50d4      	str	r4, [r2, r3]
 800de32:	e5af      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800de34:	4a31      	ldr	r2, [pc, #196]	; (800defc <RemapAndLinkDMAtoUARTTx+0x728>)
 800de36:	680c      	ldr	r4, [r1, #0]
 800de38:	4294      	cmp	r4, r2
 800de3a:	d000      	beq.n	800de3e <RemapAndLinkDMAtoUARTTx+0x66a>
 800de3c:	e558      	b.n	800d8f0 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800de3e:	4a2e      	ldr	r2, [pc, #184]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800de40:	23a8      	movs	r3, #168	; 0xa8
 800de42:	58d4      	ldr	r4, [r2, r3]
 800de44:	4d28      	ldr	r5, [pc, #160]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800de46:	402c      	ands	r4, r5
 800de48:	50d4      	str	r4, [r2, r3]
 800de4a:	58d5      	ldr	r5, [r2, r3]
 800de4c:	24d0      	movs	r4, #208	; 0xd0
 800de4e:	0224      	lsls	r4, r4, #8
 800de50:	432c      	orrs	r4, r5
 800de52:	50d4      	str	r4, [r2, r3]
 800de54:	e59e      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800de56:	4a2a      	ldr	r2, [pc, #168]	; (800df00 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800de58:	680c      	ldr	r4, [r1, #0]
 800de5a:	4294      	cmp	r4, r2
 800de5c:	d000      	beq.n	800de60 <RemapAndLinkDMAtoUARTTx+0x68c>
 800de5e:	e54b      	b.n	800d8f8 <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800de60:	4a25      	ldr	r2, [pc, #148]	; (800def8 <RemapAndLinkDMAtoUARTTx+0x724>)
 800de62:	23a8      	movs	r3, #168	; 0xa8
 800de64:	58d4      	ldr	r4, [r2, r3]
 800de66:	4d27      	ldr	r5, [pc, #156]	; (800df04 <RemapAndLinkDMAtoUARTTx+0x730>)
 800de68:	402c      	ands	r4, r5
 800de6a:	50d4      	str	r4, [r2, r3]
 800de6c:	58d5      	ldr	r5, [r2, r3]
 800de6e:	24d0      	movs	r4, #208	; 0xd0
 800de70:	0324      	lsls	r4, r4, #12
 800de72:	432c      	orrs	r4, r5
 800de74:	50d4      	str	r4, [r2, r3]
 800de76:	e58d      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800de78:	4a18      	ldr	r2, [pc, #96]	; (800dedc <RemapAndLinkDMAtoUARTTx+0x708>)
 800de7a:	680c      	ldr	r4, [r1, #0]
 800de7c:	4294      	cmp	r4, r2
 800de7e:	d000      	beq.n	800de82 <RemapAndLinkDMAtoUARTTx+0x6ae>
 800de80:	e53e      	b.n	800d900 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800de82:	4a17      	ldr	r2, [pc, #92]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800de84:	23a8      	movs	r3, #168	; 0xa8
 800de86:	58d4      	ldr	r4, [r2, r3]
 800de88:	25f0      	movs	r5, #240	; 0xf0
 800de8a:	43ac      	bics	r4, r5
 800de8c:	50d4      	str	r4, [r2, r3]
 800de8e:	58d4      	ldr	r4, [r2, r3]
 800de90:	3d10      	subs	r5, #16
 800de92:	432c      	orrs	r4, r5
 800de94:	50d4      	str	r4, [r2, r3]
 800de96:	e57d      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800de98:	4a12      	ldr	r2, [pc, #72]	; (800dee4 <RemapAndLinkDMAtoUARTTx+0x710>)
 800de9a:	680c      	ldr	r4, [r1, #0]
 800de9c:	4294      	cmp	r4, r2
 800de9e:	d000      	beq.n	800dea2 <RemapAndLinkDMAtoUARTTx+0x6ce>
 800dea0:	e532      	b.n	800d908 <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800dea2:	4a0f      	ldr	r2, [pc, #60]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dea4:	23a8      	movs	r3, #168	; 0xa8
 800dea6:	58d4      	ldr	r4, [r2, r3]
 800dea8:	4d0f      	ldr	r5, [pc, #60]	; (800dee8 <RemapAndLinkDMAtoUARTTx+0x714>)
 800deaa:	402c      	ands	r4, r5
 800deac:	50d4      	str	r4, [r2, r3]
 800deae:	58d5      	ldr	r5, [r2, r3]
 800deb0:	24e0      	movs	r4, #224	; 0xe0
 800deb2:	0224      	lsls	r4, r4, #8
 800deb4:	432c      	orrs	r4, r5
 800deb6:	50d4      	str	r4, [r2, r3]
 800deb8:	e56c      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800deba:	4a0c      	ldr	r2, [pc, #48]	; (800deec <RemapAndLinkDMAtoUARTTx+0x718>)
 800debc:	680c      	ldr	r4, [r1, #0]
 800debe:	4294      	cmp	r4, r2
 800dec0:	d000      	beq.n	800dec4 <RemapAndLinkDMAtoUARTTx+0x6f0>
 800dec2:	e525      	b.n	800d910 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800dec4:	4a06      	ldr	r2, [pc, #24]	; (800dee0 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800dec6:	23a8      	movs	r3, #168	; 0xa8
 800dec8:	58d4      	ldr	r4, [r2, r3]
 800deca:	4d09      	ldr	r5, [pc, #36]	; (800def0 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800decc:	402c      	ands	r4, r5
 800dece:	50d4      	str	r4, [r2, r3]
 800ded0:	58d5      	ldr	r5, [r2, r3]
 800ded2:	24e0      	movs	r4, #224	; 0xe0
 800ded4:	0524      	lsls	r4, r4, #20
 800ded6:	432c      	orrs	r4, r5
 800ded8:	50d4      	str	r4, [r2, r3]
 800deda:	e55b      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800dedc:	4002001c 	.word	0x4002001c
 800dee0:	40020000 	.word	0x40020000
 800dee4:	40020044 	.word	0x40020044
 800dee8:	ffff0fff 	.word	0xffff0fff
 800deec:	40020080 	.word	0x40020080
 800def0:	f0ffffff 	.word	0xf0ffffff
 800def4:	40020408 	.word	0x40020408
 800def8:	40020400 	.word	0x40020400
 800defc:	40020444 	.word	0x40020444
 800df00:	40020458 	.word	0x40020458
 800df04:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800df08:	4a41      	ldr	r2, [pc, #260]	; (800e010 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800df0a:	680c      	ldr	r4, [r1, #0]
 800df0c:	4294      	cmp	r4, r2
 800df0e:	d000      	beq.n	800df12 <RemapAndLinkDMAtoUARTTx+0x73e>
 800df10:	e502      	b.n	800d918 <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800df12:	4a40      	ldr	r2, [pc, #256]	; (800e014 <RemapAndLinkDMAtoUARTTx+0x840>)
 800df14:	23a8      	movs	r3, #168	; 0xa8
 800df16:	58d4      	ldr	r4, [r2, r3]
 800df18:	250f      	movs	r5, #15
 800df1a:	43ac      	bics	r4, r5
 800df1c:	50d4      	str	r4, [r2, r3]
 800df1e:	58d4      	ldr	r4, [r2, r3]
 800df20:	3d01      	subs	r5, #1
 800df22:	432c      	orrs	r4, r5
 800df24:	50d4      	str	r4, [r2, r3]
 800df26:	e535      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800df28:	4a3b      	ldr	r2, [pc, #236]	; (800e018 <RemapAndLinkDMAtoUARTTx+0x844>)
 800df2a:	680c      	ldr	r4, [r1, #0]
 800df2c:	4294      	cmp	r4, r2
 800df2e:	d000      	beq.n	800df32 <RemapAndLinkDMAtoUARTTx+0x75e>
 800df30:	e4f6      	b.n	800d920 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800df32:	4a38      	ldr	r2, [pc, #224]	; (800e014 <RemapAndLinkDMAtoUARTTx+0x840>)
 800df34:	23a8      	movs	r3, #168	; 0xa8
 800df36:	58d4      	ldr	r4, [r2, r3]
 800df38:	4d38      	ldr	r5, [pc, #224]	; (800e01c <RemapAndLinkDMAtoUARTTx+0x848>)
 800df3a:	402c      	ands	r4, r5
 800df3c:	50d4      	str	r4, [r2, r3]
 800df3e:	58d5      	ldr	r5, [r2, r3]
 800df40:	24e0      	movs	r4, #224	; 0xe0
 800df42:	0224      	lsls	r4, r4, #8
 800df44:	432c      	orrs	r4, r5
 800df46:	50d4      	str	r4, [r2, r3]
 800df48:	e524      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800df4a:	4a35      	ldr	r2, [pc, #212]	; (800e020 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800df4c:	680c      	ldr	r4, [r1, #0]
 800df4e:	4294      	cmp	r4, r2
 800df50:	d000      	beq.n	800df54 <RemapAndLinkDMAtoUARTTx+0x780>
 800df52:	e4e9      	b.n	800d928 <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800df54:	4a2f      	ldr	r2, [pc, #188]	; (800e014 <RemapAndLinkDMAtoUARTTx+0x840>)
 800df56:	23a8      	movs	r3, #168	; 0xa8
 800df58:	58d4      	ldr	r4, [r2, r3]
 800df5a:	4d32      	ldr	r5, [pc, #200]	; (800e024 <RemapAndLinkDMAtoUARTTx+0x850>)
 800df5c:	402c      	ands	r4, r5
 800df5e:	50d4      	str	r4, [r2, r3]
 800df60:	58d5      	ldr	r5, [r2, r3]
 800df62:	24e0      	movs	r4, #224	; 0xe0
 800df64:	0324      	lsls	r4, r4, #12
 800df66:	432c      	orrs	r4, r5
 800df68:	50d4      	str	r4, [r2, r3]
 800df6a:	e513      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800df6c:	4a2e      	ldr	r2, [pc, #184]	; (800e028 <RemapAndLinkDMAtoUARTTx+0x854>)
 800df6e:	680c      	ldr	r4, [r1, #0]
 800df70:	4294      	cmp	r4, r2
 800df72:	d000      	beq.n	800df76 <RemapAndLinkDMAtoUARTTx+0x7a2>
 800df74:	e4dc      	b.n	800d930 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800df76:	4a2d      	ldr	r2, [pc, #180]	; (800e02c <RemapAndLinkDMAtoUARTTx+0x858>)
 800df78:	23a8      	movs	r3, #168	; 0xa8
 800df7a:	58d5      	ldr	r5, [r2, r3]
 800df7c:	26f0      	movs	r6, #240	; 0xf0
 800df7e:	43b5      	bics	r5, r6
 800df80:	50d5      	str	r5, [r2, r3]
 800df82:	58d4      	ldr	r4, [r2, r3]
 800df84:	4334      	orrs	r4, r6
 800df86:	50d4      	str	r4, [r2, r3]
 800df88:	e504      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800df8a:	4a29      	ldr	r2, [pc, #164]	; (800e030 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800df8c:	680c      	ldr	r4, [r1, #0]
 800df8e:	4294      	cmp	r4, r2
 800df90:	d000      	beq.n	800df94 <RemapAndLinkDMAtoUARTTx+0x7c0>
 800df92:	e4d1      	b.n	800d938 <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800df94:	4a25      	ldr	r2, [pc, #148]	; (800e02c <RemapAndLinkDMAtoUARTTx+0x858>)
 800df96:	23a8      	movs	r3, #168	; 0xa8
 800df98:	58d4      	ldr	r4, [r2, r3]
 800df9a:	4d20      	ldr	r5, [pc, #128]	; (800e01c <RemapAndLinkDMAtoUARTTx+0x848>)
 800df9c:	402c      	ands	r4, r5
 800df9e:	50d4      	str	r4, [r2, r3]
 800dfa0:	58d5      	ldr	r5, [r2, r3]
 800dfa2:	24f0      	movs	r4, #240	; 0xf0
 800dfa4:	0224      	lsls	r4, r4, #8
 800dfa6:	432c      	orrs	r4, r5
 800dfa8:	50d4      	str	r4, [r2, r3]
 800dfaa:	e4f3      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800dfac:	4a21      	ldr	r2, [pc, #132]	; (800e034 <RemapAndLinkDMAtoUARTTx+0x860>)
 800dfae:	680c      	ldr	r4, [r1, #0]
 800dfb0:	4294      	cmp	r4, r2
 800dfb2:	d000      	beq.n	800dfb6 <RemapAndLinkDMAtoUARTTx+0x7e2>
 800dfb4:	e4c4      	b.n	800d940 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800dfb6:	4a1d      	ldr	r2, [pc, #116]	; (800e02c <RemapAndLinkDMAtoUARTTx+0x858>)
 800dfb8:	23a8      	movs	r3, #168	; 0xa8
 800dfba:	58d4      	ldr	r4, [r2, r3]
 800dfbc:	4d1e      	ldr	r5, [pc, #120]	; (800e038 <RemapAndLinkDMAtoUARTTx+0x864>)
 800dfbe:	402c      	ands	r4, r5
 800dfc0:	50d4      	str	r4, [r2, r3]
 800dfc2:	58d5      	ldr	r5, [r2, r3]
 800dfc4:	24f0      	movs	r4, #240	; 0xf0
 800dfc6:	0524      	lsls	r4, r4, #20
 800dfc8:	432c      	orrs	r4, r5
 800dfca:	50d4      	str	r4, [r2, r3]
 800dfcc:	e4e2      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800dfce:	4a10      	ldr	r2, [pc, #64]	; (800e010 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800dfd0:	680c      	ldr	r4, [r1, #0]
 800dfd2:	4294      	cmp	r4, r2
 800dfd4:	d000      	beq.n	800dfd8 <RemapAndLinkDMAtoUARTTx+0x804>
 800dfd6:	e4b7      	b.n	800d948 <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800dfd8:	4a0e      	ldr	r2, [pc, #56]	; (800e014 <RemapAndLinkDMAtoUARTTx+0x840>)
 800dfda:	23a8      	movs	r3, #168	; 0xa8
 800dfdc:	58d5      	ldr	r5, [r2, r3]
 800dfde:	260f      	movs	r6, #15
 800dfe0:	43b5      	bics	r5, r6
 800dfe2:	50d5      	str	r5, [r2, r3]
 800dfe4:	58d4      	ldr	r4, [r2, r3]
 800dfe6:	4334      	orrs	r4, r6
 800dfe8:	50d4      	str	r4, [r2, r3]
 800dfea:	e4d3      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800dfec:	4a0a      	ldr	r2, [pc, #40]	; (800e018 <RemapAndLinkDMAtoUARTTx+0x844>)
 800dfee:	680c      	ldr	r4, [r1, #0]
 800dff0:	4294      	cmp	r4, r2
 800dff2:	d000      	beq.n	800dff6 <RemapAndLinkDMAtoUARTTx+0x822>
 800dff4:	e4ac      	b.n	800d950 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800dff6:	4a07      	ldr	r2, [pc, #28]	; (800e014 <RemapAndLinkDMAtoUARTTx+0x840>)
 800dff8:	23a8      	movs	r3, #168	; 0xa8
 800dffa:	58d4      	ldr	r4, [r2, r3]
 800dffc:	4d07      	ldr	r5, [pc, #28]	; (800e01c <RemapAndLinkDMAtoUARTTx+0x848>)
 800dffe:	402c      	ands	r4, r5
 800e000:	50d4      	str	r4, [r2, r3]
 800e002:	58d5      	ldr	r5, [r2, r3]
 800e004:	24f0      	movs	r4, #240	; 0xf0
 800e006:	0224      	lsls	r4, r4, #8
 800e008:	432c      	orrs	r4, r5
 800e00a:	50d4      	str	r4, [r2, r3]
 800e00c:	e4c2      	b.n	800d994 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e00e:	46c0      	nop			; (mov r8, r8)
 800e010:	40020408 	.word	0x40020408
 800e014:	40020400 	.word	0x40020400
 800e018:	40020444 	.word	0x40020444
 800e01c:	ffff0fff 	.word	0xffff0fff
 800e020:	40020458 	.word	0x40020458
 800e024:	fff0ffff 	.word	0xfff0ffff
 800e028:	4002001c 	.word	0x4002001c
 800e02c:	40020000 	.word	0x40020000
 800e030:	40020044 	.word	0x40020044
 800e034:	40020080 	.word	0x40020080
 800e038:	f0ffffff 	.word	0xf0ffffff

0800e03c <DMA_MSG_TX_Setup>:
{	
 800e03c:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800e03e:	4b0d      	ldr	r3, [pc, #52]	; (800e074 <DMA_MSG_TX_Setup+0x38>)
 800e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e042:	2b00      	cmp	r3, #0
 800e044:	d010      	beq.n	800e068 <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800e046:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <DMA_MSG_TX_Setup+0x38>)
 800e048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00e      	beq.n	800e06c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800e04e:	4a09      	ldr	r2, [pc, #36]	; (800e074 <DMA_MSG_TX_Setup+0x38>)
 800e050:	2394      	movs	r3, #148	; 0x94
 800e052:	58d3      	ldr	r3, [r2, r3]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00b      	beq.n	800e070 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800e058:	0021      	movs	r1, r4
 800e05a:	f7ff fbbb 	bl	800d7d4 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800e05e:	2100      	movs	r1, #0
 800e060:	0020      	movs	r0, r4
 800e062:	f7fe fe4f 	bl	800cd04 <SetupDMAInterrupts>
}
 800e066:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800e068:	4c02      	ldr	r4, [pc, #8]	; (800e074 <DMA_MSG_TX_Setup+0x38>)
 800e06a:	e7f5      	b.n	800e058 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800e06c:	4c02      	ldr	r4, [pc, #8]	; (800e078 <DMA_MSG_TX_Setup+0x3c>)
 800e06e:	e7f3      	b.n	800e058 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800e070:	4c02      	ldr	r4, [pc, #8]	; (800e07c <DMA_MSG_TX_Setup+0x40>)
 800e072:	e7f1      	b.n	800e058 <DMA_MSG_TX_Setup+0x1c>
 800e074:	200018fc 	.word	0x200018fc
 800e078:	20001934 	.word	0x20001934
 800e07c:	2000196c 	.word	0x2000196c

0800e080 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800e080:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800e082:	4807      	ldr	r0, [pc, #28]	; (800e0a0 <CRC_Init+0x20>)
 800e084:	4b07      	ldr	r3, [pc, #28]	; (800e0a4 <CRC_Init+0x24>)
 800e086:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800e088:	2310      	movs	r3, #16
 800e08a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800e08c:	2300      	movs	r3, #0
 800e08e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800e090:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800e092:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800e094:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800e096:	3303      	adds	r3, #3
 800e098:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800e09a:	f003 f870 	bl	801117e <HAL_CRC_Init>
}
 800e09e:	bd10      	pop	{r4, pc}
 800e0a0:	20006d4c 	.word	0x20006d4c
 800e0a4:	40023000 	.word	0x40023000

0800e0a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800e0a8:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800e0aa:	4a05      	ldr	r2, [pc, #20]	; (800e0c0 <HAL_CRC_MspInit+0x18>)
 800e0ac:	6951      	ldr	r1, [r2, #20]
 800e0ae:	2340      	movs	r3, #64	; 0x40
 800e0b0:	4319      	orrs	r1, r3
 800e0b2:	6151      	str	r1, [r2, #20]
 800e0b4:	6952      	ldr	r2, [r2, #20]
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	9b01      	ldr	r3, [sp, #4]
}
 800e0bc:	b002      	add	sp, #8
 800e0be:	4770      	bx	lr
 800e0c0:	40021000 	.word	0x40021000

0800e0c4 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800e0c4:	b570      	push	{r4, r5, r6, lr}
 800e0c6:	0004      	movs	r4, r0
 800e0c8:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d014      	beq.n	800e0f8 <CalculateCRC8+0x34>
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	d101      	bne.n	800e0d6 <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800e0d2:	2000      	movs	r0, #0
}
 800e0d4:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800e0d6:	088e      	lsrs	r6, r1, #2
 800e0d8:	0032      	movs	r2, r6
 800e0da:	0001      	movs	r1, r0
 800e0dc:	4807      	ldr	r0, [pc, #28]	; (800e0fc <CalculateCRC8+0x38>)
 800e0de:	f003 f8a9 	bl	8011234 <HAL_CRC_Calculate>
 800e0e2:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800e0e4:	07ab      	lsls	r3, r5, #30
 800e0e6:	d0f5      	beq.n	800e0d4 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800e0e8:	0131      	lsls	r1, r6, #4
 800e0ea:	1861      	adds	r1, r4, r1
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	4803      	ldr	r0, [pc, #12]	; (800e0fc <CalculateCRC8+0x38>)
 800e0f0:	f003 f876 	bl	80111e0 <HAL_CRC_Accumulate>
 800e0f4:	b2c0      	uxtb	r0, r0
 800e0f6:	e7ed      	b.n	800e0d4 <CalculateCRC8+0x10>
	return 0;
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e7eb      	b.n	800e0d4 <CalculateCRC8+0x10>
 800e0fc:	20006d4c 	.word	0x20006d4c

0800e100 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800e100:	b500      	push	{lr}
 800e102:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800e104:	2380      	movs	r3, #128	; 0x80
 800e106:	011b      	lsls	r3, r3, #4
 800e108:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e10a:	2301      	movs	r3, #1
 800e10c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e112:	3303      	adds	r3, #3
 800e114:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800e116:	2090      	movs	r0, #144	; 0x90
 800e118:	a901      	add	r1, sp, #4
 800e11a:	05c0      	lsls	r0, r0, #23
 800e11c:	f003 fee4 	bl	8011ee8 <HAL_GPIO_Init>
}
 800e120:	b007      	add	sp, #28
 800e122:	bd00      	pop	{pc}

0800e124 <GPIO_Init>:
{
 800e124:	b500      	push	{lr}
 800e126:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800e128:	4b18      	ldr	r3, [pc, #96]	; (800e18c <GPIO_Init+0x68>)
 800e12a:	6959      	ldr	r1, [r3, #20]
 800e12c:	2080      	movs	r0, #128	; 0x80
 800e12e:	0300      	lsls	r0, r0, #12
 800e130:	4301      	orrs	r1, r0
 800e132:	6159      	str	r1, [r3, #20]
 800e134:	695a      	ldr	r2, [r3, #20]
 800e136:	4002      	ands	r2, r0
 800e138:	9201      	str	r2, [sp, #4]
 800e13a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800e13c:	6959      	ldr	r1, [r3, #20]
 800e13e:	2080      	movs	r0, #128	; 0x80
 800e140:	0280      	lsls	r0, r0, #10
 800e142:	4301      	orrs	r1, r0
 800e144:	6159      	str	r1, [r3, #20]
 800e146:	695a      	ldr	r2, [r3, #20]
 800e148:	4002      	ands	r2, r0
 800e14a:	9202      	str	r2, [sp, #8]
 800e14c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800e14e:	6959      	ldr	r1, [r3, #20]
 800e150:	2080      	movs	r0, #128	; 0x80
 800e152:	0340      	lsls	r0, r0, #13
 800e154:	4301      	orrs	r1, r0
 800e156:	6159      	str	r1, [r3, #20]
 800e158:	695a      	ldr	r2, [r3, #20]
 800e15a:	4002      	ands	r2, r0
 800e15c:	9203      	str	r2, [sp, #12]
 800e15e:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800e160:	6959      	ldr	r1, [r3, #20]
 800e162:	2080      	movs	r0, #128	; 0x80
 800e164:	02c0      	lsls	r0, r0, #11
 800e166:	4301      	orrs	r1, r0
 800e168:	6159      	str	r1, [r3, #20]
 800e16a:	695a      	ldr	r2, [r3, #20]
 800e16c:	4002      	ands	r2, r0
 800e16e:	9204      	str	r2, [sp, #16]
 800e170:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800e172:	695a      	ldr	r2, [r3, #20]
 800e174:	2180      	movs	r1, #128	; 0x80
 800e176:	03c9      	lsls	r1, r1, #15
 800e178:	430a      	orrs	r2, r1
 800e17a:	615a      	str	r2, [r3, #20]
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	400b      	ands	r3, r1
 800e180:	9305      	str	r3, [sp, #20]
 800e182:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800e184:	f7ff ffbc 	bl	800e100 <IND_LED_Init>
}
 800e188:	b007      	add	sp, #28
 800e18a:	bd00      	pop	{pc}
 800e18c:	40021000 	.word	0x40021000

0800e190 <HX711_GPIO_Init>:

//-- Configure indicator LED
void HX711_GPIO_Init(void)
{
 800e190:	b530      	push	{r4, r5, lr}
 800e192:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800e194:	2390      	movs	r3, #144	; 0x90
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e19a:	2301      	movs	r3, #1
 800e19c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19e:	2500      	movs	r5, #0
 800e1a0:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e1a2:	3302      	adds	r3, #2
 800e1a4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1a6:	2490      	movs	r4, #144	; 0x90
 800e1a8:	05e4      	lsls	r4, r4, #23
 800e1aa:	a901      	add	r1, sp, #4
 800e1ac:	0020      	movs	r0, r4
 800e1ae:	f003 fe9b 	bl	8011ee8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e1b2:	2380      	movs	r3, #128	; 0x80
 800e1b4:	00db      	lsls	r3, r3, #3
 800e1b6:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e1b8:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800e1ba:	a901      	add	r1, sp, #4
 800e1bc:	0020      	movs	r0, r4
 800e1be:	f003 fe93 	bl	8011ee8 <HAL_GPIO_Init>
}
 800e1c2:	b007      	add	sp, #28
 800e1c4:	bd30      	pop	{r4, r5, pc}
	...

0800e1c8 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	000e      	movs	r6, r1
 800e1cc:	0014      	movs	r4, r2
 800e1ce:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800e1d0:	f000 fd28 	bl	800ec24 <GetUart>
	
	if (huart == &huart1) 
 800e1d4:	4b26      	ldr	r3, [pc, #152]	; (800e270 <GetPortGPIOs+0xa8>)
 800e1d6:	4298      	cmp	r0, r3
 800e1d8:	d047      	beq.n	800e26a <GetPortGPIOs+0xa2>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800e1da:	4b26      	ldr	r3, [pc, #152]	; (800e274 <GetPortGPIOs+0xac>)
 800e1dc:	4298      	cmp	r0, r3
 800e1de:	d00d      	beq.n	800e1fc <GetPortGPIOs+0x34>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800e1e0:	4b25      	ldr	r3, [pc, #148]	; (800e278 <GetPortGPIOs+0xb0>)
 800e1e2:	4298      	cmp	r0, r3
 800e1e4:	d015      	beq.n	800e212 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800e1e6:	4b25      	ldr	r3, [pc, #148]	; (800e27c <GetPortGPIOs+0xb4>)
 800e1e8:	4298      	cmp	r0, r3
 800e1ea:	d01e      	beq.n	800e22a <GetPortGPIOs+0x62>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800e1ec:	4b24      	ldr	r3, [pc, #144]	; (800e280 <GetPortGPIOs+0xb8>)
 800e1ee:	4298      	cmp	r0, r3
 800e1f0:	d026      	beq.n	800e240 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800e1f2:	4b24      	ldr	r3, [pc, #144]	; (800e284 <GetPortGPIOs+0xbc>)
 800e1f4:	4298      	cmp	r0, r3
 800e1f6:	d02d      	beq.n	800e254 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800e1f8:	20ff      	movs	r0, #255	; 0xff
 800e1fa:	e037      	b.n	800e26c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800e1fc:	2390      	movs	r3, #144	; 0x90
 800e1fe:	05db      	lsls	r3, r3, #23
 800e200:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800e202:	2204      	movs	r2, #4
 800e204:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800e206:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800e208:	2308      	movs	r3, #8
 800e20a:	9a04      	ldr	r2, [sp, #16]
 800e20c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e20e:	2000      	movs	r0, #0
 800e210:	e02c      	b.n	800e26c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800e212:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <GetPortGPIOs+0xc0>)
 800e214:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800e216:	2280      	movs	r2, #128	; 0x80
 800e218:	00d2      	lsls	r2, r2, #3
 800e21a:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800e21c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800e21e:	2380      	movs	r3, #128	; 0x80
 800e220:	011b      	lsls	r3, r3, #4
 800e222:	9a04      	ldr	r2, [sp, #16]
 800e224:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e226:	2000      	movs	r0, #0
 800e228:	e020      	b.n	800e26c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800e22a:	2390      	movs	r3, #144	; 0x90
 800e22c:	05db      	lsls	r3, r3, #23
 800e22e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800e230:	2201      	movs	r2, #1
 800e232:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800e234:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800e236:	2302      	movs	r3, #2
 800e238:	9a04      	ldr	r2, [sp, #16]
 800e23a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e23c:	2000      	movs	r0, #0
 800e23e:	e015      	b.n	800e26c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800e240:	4b11      	ldr	r3, [pc, #68]	; (800e288 <GetPortGPIOs+0xc0>)
 800e242:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800e244:	2208      	movs	r2, #8
 800e246:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800e248:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800e24a:	2310      	movs	r3, #16
 800e24c:	9a04      	ldr	r2, [sp, #16]
 800e24e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e250:	2000      	movs	r0, #0
 800e252:	e00b      	b.n	800e26c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800e254:	2390      	movs	r3, #144	; 0x90
 800e256:	05db      	lsls	r3, r3, #23
 800e258:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800e25a:	2210      	movs	r2, #16
 800e25c:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800e25e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800e260:	2320      	movs	r3, #32
 800e262:	9a04      	ldr	r2, [sp, #16]
 800e264:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e266:	2000      	movs	r0, #0
 800e268:	e000      	b.n	800e26c <GetPortGPIOs+0xa4>
 800e26a:	2000      	movs	r0, #0
	
	return result;	
}
 800e26c:	bd70      	pop	{r4, r5, r6, pc}
 800e26e:	46c0      	nop			; (mov r8, r8)
 800e270:	20006b7c 	.word	0x20006b7c
 800e274:	20006cd4 	.word	0x20006cd4
 800e278:	20006a94 	.word	0x20006a94
 800e27c:	20006c60 	.word	0x20006c60
 800e280:	20006b08 	.word	0x20006b08
 800e284:	20006bf0 	.word	0x20006bf0
 800e288:	48000400 	.word	0x48000400

0800e28c <IsFactoryReset>:
{
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800e290:	4b39      	ldr	r3, [pc, #228]	; (800e378 <IsFactoryReset+0xec>)
 800e292:	6959      	ldr	r1, [r3, #20]
 800e294:	2080      	movs	r0, #128	; 0x80
 800e296:	0280      	lsls	r0, r0, #10
 800e298:	4301      	orrs	r1, r0
 800e29a:	6159      	str	r1, [r3, #20]
 800e29c:	695a      	ldr	r2, [r3, #20]
 800e29e:	4002      	ands	r2, r0
 800e2a0:	9203      	str	r2, [sp, #12]
 800e2a2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800e2a4:	6959      	ldr	r1, [r3, #20]
 800e2a6:	2080      	movs	r0, #128	; 0x80
 800e2a8:	02c0      	lsls	r0, r0, #11
 800e2aa:	4301      	orrs	r1, r0
 800e2ac:	6159      	str	r1, [r3, #20]
 800e2ae:	695a      	ldr	r2, [r3, #20]
 800e2b0:	4002      	ands	r2, r0
 800e2b2:	9204      	str	r2, [sp, #16]
 800e2b4:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800e2b6:	6959      	ldr	r1, [r3, #20]
 800e2b8:	2080      	movs	r0, #128	; 0x80
 800e2ba:	0300      	lsls	r0, r0, #12
 800e2bc:	4301      	orrs	r1, r0
 800e2be:	6159      	str	r1, [r3, #20]
 800e2c0:	695a      	ldr	r2, [r3, #20]
 800e2c2:	4002      	ands	r2, r0
 800e2c4:	9205      	str	r2, [sp, #20]
 800e2c6:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800e2c8:	695a      	ldr	r2, [r3, #20]
 800e2ca:	2180      	movs	r1, #128	; 0x80
 800e2cc:	0349      	lsls	r1, r1, #13
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	615a      	str	r2, [r3, #20]
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	400b      	ands	r3, r1
 800e2d6:	9306      	str	r3, [sp, #24]
 800e2d8:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800e2da:	2522      	movs	r5, #34	; 0x22
 800e2dc:	446d      	add	r5, sp
 800e2de:	ab08      	add	r3, sp, #32
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	ab0b      	add	r3, sp, #44	; 0x2c
 800e2e4:	002a      	movs	r2, r5
 800e2e6:	a90c      	add	r1, sp, #48	; 0x30
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	f7ff ff6d 	bl	800e1c8 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800e2ee:	ac07      	add	r4, sp, #28
 800e2f0:	9400      	str	r4, [sp, #0]
 800e2f2:	ab09      	add	r3, sp, #36	; 0x24
 800e2f4:	221e      	movs	r2, #30
 800e2f6:	446a      	add	r2, sp
 800e2f8:	a90a      	add	r1, sp, #40	; 0x28
 800e2fa:	2005      	movs	r0, #5
 800e2fc:	f7ff ff64 	bl	800e1c8 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e300:	2301      	movs	r3, #1
 800e302:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e304:	2600      	movs	r6, #0
 800e306:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800e308:	882b      	ldrh	r3, [r5, #0]
 800e30a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800e30c:	a90d      	add	r1, sp, #52	; 0x34
 800e30e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e310:	f003 fdea 	bl	8011ee8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e314:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800e316:	2302      	movs	r3, #2
 800e318:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800e31a:	8823      	ldrh	r3, [r4, #0]
 800e31c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800e31e:	a90d      	add	r1, sp, #52	; 0x34
 800e320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e322:	f003 fde1 	bl	8011ee8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800e326:	8829      	ldrh	r1, [r5, #0]
 800e328:	2200      	movs	r2, #0
 800e32a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e32c:	f003 feab 	bl	8012086 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800e330:	2005      	movs	r0, #5
 800e332:	f000 fae3 	bl	800e8fc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800e336:	8821      	ldrh	r1, [r4, #0]
 800e338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33a:	f003 fe9d 	bl	8012078 <HAL_GPIO_ReadPin>
 800e33e:	2800      	cmp	r0, #0
 800e340:	d006      	beq.n	800e350 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800e342:	4b0e      	ldr	r3, [pc, #56]	; (800e37c <IsFactoryReset+0xf0>)
 800e344:	2201      	movs	r2, #1
 800e346:	4252      	negs	r2, r2
 800e348:	601a      	str	r2, [r3, #0]
	return 0;
 800e34a:	2000      	movs	r0, #0
}
 800e34c:	b012      	add	sp, #72	; 0x48
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800e350:	2322      	movs	r3, #34	; 0x22
 800e352:	446b      	add	r3, sp
 800e354:	8819      	ldrh	r1, [r3, #0]
 800e356:	2201      	movs	r2, #1
 800e358:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e35a:	f003 fe94 	bl	8012086 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800e35e:	2005      	movs	r0, #5
 800e360:	f000 facc 	bl	800e8fc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800e364:	ab07      	add	r3, sp, #28
 800e366:	8819      	ldrh	r1, [r3, #0]
 800e368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e36a:	f003 fe85 	bl	8012078 <HAL_GPIO_ReadPin>
 800e36e:	2801      	cmp	r0, #1
 800e370:	d1e7      	bne.n	800e342 <IsFactoryReset+0xb6>
			return 1;
 800e372:	2001      	movs	r0, #1
 800e374:	e7ea      	b.n	800e34c <IsFactoryReset+0xc0>
 800e376:	46c0      	nop			; (mov r8, r8)
 800e378:	40021000 	.word	0x40021000
 800e37c:	20007ff0 	.word	0x20007ff0

0800e380 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800e380:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800e382:	f002 fe0f 	bl	8010fa4 <HAL_IncTick>
  osSystickHandler();  
 800e386:	f000 fe1f 	bl	800efc8 <osSystickHandler>

}
 800e38a:	bd10      	pop	{r4, pc}

0800e38c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800e38c:	e7fe      	b.n	800e38c <HardFault_Handler>

0800e38e <USART1_IRQHandler>:
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e38e:	4770      	bx	lr

0800e390 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800e390:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800e392:	4802      	ldr	r0, [pc, #8]	; (800e39c <USART2_IRQHandler+0xc>)
 800e394:	f005 fb11 	bl	80139ba <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	46c0      	nop			; (mov r8, r8)
 800e39c:	20006cd4 	.word	0x20006cd4

0800e3a0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800e3a0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800e3a2:	4806      	ldr	r0, [pc, #24]	; (800e3bc <USART3_8_IRQHandler+0x1c>)
 800e3a4:	f005 fb09 	bl	80139ba <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800e3a8:	4805      	ldr	r0, [pc, #20]	; (800e3c0 <USART3_8_IRQHandler+0x20>)
 800e3aa:	f005 fb06 	bl	80139ba <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800e3ae:	4805      	ldr	r0, [pc, #20]	; (800e3c4 <USART3_8_IRQHandler+0x24>)
 800e3b0:	f005 fb03 	bl	80139ba <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800e3b4:	4804      	ldr	r0, [pc, #16]	; (800e3c8 <USART3_8_IRQHandler+0x28>)
 800e3b6:	f005 fb00 	bl	80139ba <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e3ba:	bd10      	pop	{r4, pc}
 800e3bc:	20006a94 	.word	0x20006a94
 800e3c0:	20006c60 	.word	0x20006c60
 800e3c4:	20006b08 	.word	0x20006b08
 800e3c8:	20006bf0 	.word	0x20006bf0

0800e3cc <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800e3cc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800e3ce:	2001      	movs	r0, #1
 800e3d0:	f7f9 f9be 	bl	8007750 <DMA_IRQHandler>
	
}
 800e3d4:	bd10      	pop	{r4, pc}
	...

0800e3d8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800e3d8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800e3da:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	06db      	lsls	r3, r3, #27
 800e3e0:	d408      	bmi.n	800e3f4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800e3e2:	4b0b      	ldr	r3, [pc, #44]	; (800e410 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	05db      	lsls	r3, r3, #23
 800e3e8:	d408      	bmi.n	800e3fc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	06db      	lsls	r3, r3, #27
 800e3f0:	d408      	bmi.n	800e404 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800e3f2:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800e3f4:	2005      	movs	r0, #5
 800e3f6:	f7f9 f9ab 	bl	8007750 <DMA_IRQHandler>
 800e3fa:	e7fa      	b.n	800e3f2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800e3fc:	2002      	movs	r0, #2
 800e3fe:	f7f9 f9a7 	bl	8007750 <DMA_IRQHandler>
 800e402:	e7f6      	b.n	800e3f2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800e404:	4803      	ldr	r0, [pc, #12]	; (800e414 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800e406:	f003 f811 	bl	801142c <HAL_DMA_IRQHandler>
}
 800e40a:	e7f2      	b.n	800e3f2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800e40c:	40020400 	.word	0x40020400
 800e410:	40020000 	.word	0x40020000
 800e414:	200018fc 	.word	0x200018fc

0800e418 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800e418:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800e41a:	4b14      	ldr	r3, [pc, #80]	; (800e46c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	03db      	lsls	r3, r3, #15
 800e420:	d413      	bmi.n	800e44a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800e422:	4b12      	ldr	r3, [pc, #72]	; (800e46c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	02db      	lsls	r3, r3, #11
 800e428:	d413      	bmi.n	800e452 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800e42a:	4b11      	ldr	r3, [pc, #68]	; (800e470 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	05db      	lsls	r3, r3, #23
 800e430:	d413      	bmi.n	800e45a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800e432:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	04db      	lsls	r3, r3, #19
 800e438:	d413      	bmi.n	800e462 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800e43a:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	01db      	lsls	r3, r3, #7
 800e440:	d506      	bpl.n	800e450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800e442:	480c      	ldr	r0, [pc, #48]	; (800e474 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800e444:	f002 fff2 	bl	801142c <HAL_DMA_IRQHandler>
	}
}
 800e448:	e002      	b.n	800e450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800e44a:	2003      	movs	r0, #3
 800e44c:	f7f9 f980 	bl	8007750 <DMA_IRQHandler>
}
 800e450:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800e452:	2004      	movs	r0, #4
 800e454:	f7f9 f97c 	bl	8007750 <DMA_IRQHandler>
 800e458:	e7fa      	b.n	800e450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800e45a:	2006      	movs	r0, #6
 800e45c:	f7f9 f978 	bl	8007750 <DMA_IRQHandler>
 800e460:	e7f6      	b.n	800e450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800e462:	4805      	ldr	r0, [pc, #20]	; (800e478 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800e464:	f002 ffe2 	bl	801142c <HAL_DMA_IRQHandler>
 800e468:	e7f2      	b.n	800e450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800e46a:	46c0      	nop			; (mov r8, r8)
 800e46c:	40020000 	.word	0x40020000
 800e470:	40020400 	.word	0x40020400
 800e474:	2000196c 	.word	0x2000196c
 800e478:	20001934 	.word	0x20001934

0800e47c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e47c:	b510      	push	{r4, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800e482:	2300      	movs	r3, #0
 800e484:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800e486:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800e48c:	f7fe fce6 	bl	800ce5c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800e490:	0020      	movs	r0, r4
 800e492:	f7fc ffe5 	bl	800b460 <GetPort>
 800e496:	0080      	lsls	r0, r0, #2
 800e498:	4b03      	ldr	r3, [pc, #12]	; (800e4a8 <HAL_UART_TxCpltCallback+0x2c>)
 800e49a:	58c0      	ldr	r0, [r0, r3]
 800e49c:	a901      	add	r1, sp, #4
 800e49e:	f001 f923 	bl	800f6e8 <xQueueGiveFromISR>
}
 800e4a2:	b002      	add	sp, #8
 800e4a4:	bd10      	pop	{r4, pc}
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	20006a54 	.word	0x20006a54

0800e4ac <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800e4b0:	2369      	movs	r3, #105	; 0x69
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800e4b6:	f7fc ffd3 	bl	800b460 <GetPort>
	if (portStatus[port] == STREAM) {
 800e4ba:	4b0b      	ldr	r3, [pc, #44]	; (800e4e8 <HAL_UART_ErrorCallback+0x3c>)
 800e4bc:	5c1b      	ldrb	r3, [r3, r0]
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	d004      	beq.n	800e4cc <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800e4c2:	3801      	subs	r0, #1
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <HAL_UART_ErrorCallback+0x40>)
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	541a      	strb	r2, [r3, r0]
	}	
}
 800e4ca:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800e4cc:	3801      	subs	r0, #1
 800e4ce:	0080      	lsls	r0, r0, #2
 800e4d0:	4b07      	ldr	r3, [pc, #28]	; (800e4f0 <HAL_UART_ErrorCallback+0x44>)
 800e4d2:	58c3      	ldr	r3, [r0, r3]
 800e4d4:	6819      	ldr	r1, [r3, #0]
 800e4d6:	3128      	adds	r1, #40	; 0x28
 800e4d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	0020      	movs	r0, r4
 800e4e2:	f004 fe4f 	bl	8013184 <HAL_UART_Receive_DMA>
 800e4e6:	e7f0      	b.n	800e4ca <HAL_UART_ErrorCallback+0x1e>
 800e4e8:	20000db0 	.word	0x20000db0
 800e4ec:	20000f50 	.word	0x20000f50
 800e4f0:	200010ec 	.word	0x200010ec

0800e4f4 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800e4f8:	f7fc ffb2 	bl	800b460 <GetPort>
 800e4fc:	4b14      	ldr	r3, [pc, #80]	; (800e550 <HAL_UART_RxCpltCallback+0x5c>)
 800e4fe:	5c1b      	ldrb	r3, [r3, r0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d006      	beq.n	800e512 <HAL_UART_RxCpltCallback+0x1e>
 800e504:	0020      	movs	r0, r4
 800e506:	f7fc ffab 	bl	800b460 <GetPort>
 800e50a:	4b11      	ldr	r3, [pc, #68]	; (800e550 <HAL_UART_RxCpltCallback+0x5c>)
 800e50c:	5c1b      	ldrb	r3, [r3, r0]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d11c      	bne.n	800e54c <HAL_UART_RxCpltCallback+0x58>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800e512:	0020      	movs	r0, r4
 800e514:	f7fc ffa4 	bl	800b460 <GetPort>
 800e518:	4b0e      	ldr	r3, [pc, #56]	; (800e554 <HAL_UART_RxCpltCallback+0x60>)
 800e51a:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800e51c:	0020      	movs	r0, r4
 800e51e:	f7fc ff9f 	bl	800b460 <GetPort>
 800e522:	4b0b      	ldr	r3, [pc, #44]	; (800e550 <HAL_UART_RxCpltCallback+0x5c>)
 800e524:	2205      	movs	r2, #5
 800e526:	541a      	strb	r2, [r3, r0]
		// Clear the circular RX buffer
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800e528:	0020      	movs	r0, r4
 800e52a:	f7fc ff99 	bl	800b460 <GetPort>
 800e52e:	3801      	subs	r0, #1
 800e530:	0180      	lsls	r0, r0, #6
 800e532:	4b09      	ldr	r3, [pc, #36]	; (800e558 <HAL_UART_RxCpltCallback+0x64>)
 800e534:	18c0      	adds	r0, r0, r3
 800e536:	2240      	movs	r2, #64	; 0x40
 800e538:	2100      	movs	r1, #0
 800e53a:	f005 fd67 	bl	801400c <memset>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800e53e:	0020      	movs	r0, r4
 800e540:	f7fc ff8e 	bl	800b460 <GetPort>
 800e544:	3801      	subs	r0, #1
 800e546:	4b05      	ldr	r3, [pc, #20]	; (800e55c <HAL_UART_RxCpltCallback+0x68>)
 800e548:	2201      	movs	r2, #1
 800e54a:	541a      	strb	r2, [r3, r0]
	}
}
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	46c0      	nop			; (mov r8, r8)
 800e550:	20000db0 	.word	0x20000db0
 800e554:	200069d4 	.word	0x200069d4
 800e558:	20000f58 	.word	0x20000f58
 800e55c:	20000f50 	.word	0x20000f50

0800e560 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800e560:	b672      	cpsid	i
 800e562:	e7fe      	b.n	800e562 <vApplicationStackOverflowHook+0x2>

0800e564 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800e564:	b672      	cpsid	i
 800e566:	e7fe      	b.n	800e566 <vApplicationMallocFailedHook+0x2>

0800e568 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	46d6      	mov	lr, sl
 800e56c:	464f      	mov	r7, r9
 800e56e:	4646      	mov	r6, r8
 800e570:	b5c0      	push	{r6, r7, lr}
 800e572:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800e574:	ac03      	add	r4, sp, #12
 800e576:	4b37      	ldr	r3, [pc, #220]	; (800e654 <RTC_CalendarConfig+0xec>)
 800e578:	0022      	movs	r2, r4
 800e57a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800e57c:	c243      	stmia	r2!, {r0, r1, r6}
 800e57e:	466b      	mov	r3, sp
 800e580:	4a35      	ldr	r2, [pc, #212]	; (800e658 <RTC_CalendarConfig+0xf0>)
 800e582:	ca03      	ldmia	r2!, {r0, r1}
 800e584:	c303      	stmia	r3!, {r0, r1}
 800e586:	0019      	movs	r1, r3
 800e588:	7813      	ldrb	r3, [r2, #0]
 800e58a:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800e58c:	2015      	movs	r0, #21
 800e58e:	4468      	add	r0, sp
 800e590:	f005 faa3 	bl	8013ada <atoi>
 800e594:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	4698      	mov	r8, r3
 800e59a:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800e59c:	a804      	add	r0, sp, #16
 800e59e:	f005 fa9c 	bl	8013ada <atoi>
 800e5a2:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800e5a4:	4643      	mov	r3, r8
 800e5a6:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800e5a8:	2400      	movs	r4, #0
 800e5aa:	e001      	b.n	800e5b0 <RTC_CalendarConfig+0x48>
 800e5ac:	3401      	adds	r4, #1
 800e5ae:	b2e4      	uxtb	r4, r4
 800e5b0:	2c0b      	cmp	r4, #11
 800e5b2:	d80a      	bhi.n	800e5ca <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e5b4:	00a3      	lsls	r3, r4, #2
 800e5b6:	4a29      	ldr	r2, [pc, #164]	; (800e65c <RTC_CalendarConfig+0xf4>)
 800e5b8:	5899      	ldr	r1, [r3, r2]
 800e5ba:	a803      	add	r0, sp, #12
 800e5bc:	f7f1 fda2 	bl	8000104 <strcmp>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	d1f3      	bne.n	800e5ac <RTC_CalendarConfig+0x44>
			month = i + 1;
 800e5c4:	1c65      	adds	r5, r4, #1
 800e5c6:	b2ed      	uxtb	r5, r5
 800e5c8:	e7f0      	b.n	800e5ac <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800e5ca:	466b      	mov	r3, sp
 800e5cc:	1d98      	adds	r0, r3, #6
 800e5ce:	f005 fa84 	bl	8013ada <atoi>
 800e5d2:	b2c3      	uxtb	r3, r0
 800e5d4:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800e5d6:	ac03      	add	r4, sp, #12
 800e5d8:	2300      	movs	r3, #0
 800e5da:	469a      	mov	sl, r3
 800e5dc:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800e5de:	466b      	mov	r3, sp
 800e5e0:	1cd8      	adds	r0, r3, #3
 800e5e2:	f005 fa7a 	bl	8013ada <atoi>
 800e5e6:	b2c3      	uxtb	r3, r0
 800e5e8:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800e5ea:	4653      	mov	r3, sl
 800e5ec:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800e5ee:	4668      	mov	r0, sp
 800e5f0:	f005 fa73 	bl	8013ada <atoi>
 800e5f4:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800e5f6:	a90b      	add	r1, sp, #44	; 0x2c
 800e5f8:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800e5fa:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800e5fc:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800e5fe:	2301      	movs	r3, #1
 800e600:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e602:	2200      	movs	r2, #0
 800e604:	4816      	ldr	r0, [pc, #88]	; (800e660 <RTC_CalendarConfig+0xf8>)
 800e606:	f004 fb35 	bl	8012c74 <HAL_RTC_SetDate>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d119      	bne.n	800e642 <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e60e:	a906      	add	r1, sp, #24
 800e610:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800e612:	464b      	mov	r3, r9
 800e614:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800e616:	4643      	mov	r3, r8
 800e618:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e61a:	2300      	movs	r3, #0
 800e61c:	720b      	strb	r3, [r1, #8]
 800e61e:	4a11      	ldr	r2, [pc, #68]	; (800e664 <RTC_CalendarConfig+0xfc>)
 800e620:	3018      	adds	r0, #24
 800e622:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e624:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e626:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e628:	2200      	movs	r2, #0
 800e62a:	480d      	ldr	r0, [pc, #52]	; (800e660 <RTC_CalendarConfig+0xf8>)
 800e62c:	f004 faa4 	bl	8012b78 <HAL_RTC_SetTime>
 800e630:	2800      	cmp	r0, #0
 800e632:	d10d      	bne.n	800e650 <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e634:	4a0c      	ldr	r2, [pc, #48]	; (800e668 <RTC_CalendarConfig+0x100>)
 800e636:	2101      	movs	r1, #1
 800e638:	4809      	ldr	r0, [pc, #36]	; (800e660 <RTC_CalendarConfig+0xf8>)
 800e63a:	f004 fbdd 	bl	8012df8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e63e:	2000      	movs	r0, #0
 800e640:	e000      	b.n	800e644 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800e642:	20ff      	movs	r0, #255	; 0xff
}
 800e644:	b00c      	add	sp, #48	; 0x30
 800e646:	bc1c      	pop	{r2, r3, r4}
 800e648:	4690      	mov	r8, r2
 800e64a:	4699      	mov	r9, r3
 800e64c:	46a2      	mov	sl, r4
 800e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800e650:	20ff      	movs	r0, #255	; 0xff
 800e652:	e7f7      	b.n	800e644 <RTC_CalendarConfig+0xdc>
 800e654:	080189f0 	.word	0x080189f0
 800e658:	0801b9a4 	.word	0x0801b9a4
 800e65c:	20000040 	.word	0x20000040
 800e660:	20006d70 	.word	0x20006d70
 800e664:	200069d4 	.word	0x200069d4
 800e668:	000032f2 	.word	0x000032f2

0800e66c <RTC_Init>:
{
 800e66c:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e66e:	4a1c      	ldr	r2, [pc, #112]	; (800e6e0 <RTC_Init+0x74>)
 800e670:	6a11      	ldr	r1, [r2, #32]
 800e672:	2380      	movs	r3, #128	; 0x80
 800e674:	021b      	lsls	r3, r3, #8
 800e676:	430b      	orrs	r3, r1
 800e678:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e67a:	481a      	ldr	r0, [pc, #104]	; (800e6e4 <RTC_Init+0x78>)
 800e67c:	4b1a      	ldr	r3, [pc, #104]	; (800e6e8 <RTC_Init+0x7c>)
 800e67e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e680:	2300      	movs	r3, #0
 800e682:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e684:	227c      	movs	r2, #124	; 0x7c
 800e686:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e688:	4a18      	ldr	r2, [pc, #96]	; (800e6ec <RTC_Init+0x80>)
 800e68a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e68c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e68e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e690:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e692:	f004 fa15 	bl	8012ac0 <HAL_RTC_Init>
 800e696:	2800      	cmp	r0, #0
 800e698:	d11f      	bne.n	800e6da <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e69a:	2101      	movs	r1, #1
 800e69c:	4811      	ldr	r0, [pc, #68]	; (800e6e4 <RTC_Init+0x78>)
 800e69e:	f004 fbb1 	bl	8012e04 <HAL_RTCEx_BKUPRead>
 800e6a2:	4b13      	ldr	r3, [pc, #76]	; (800e6f0 <RTC_Init+0x84>)
 800e6a4:	4298      	cmp	r0, r3
 800e6a6:	d10e      	bne.n	800e6c6 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e6a8:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <RTC_Init+0x74>)
 800e6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	d502      	bpl.n	800e6b6 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800e6b0:	4b10      	ldr	r3, [pc, #64]	; (800e6f4 <RTC_Init+0x88>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e6b6:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <RTC_Init+0x74>)
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ba:	015b      	lsls	r3, r3, #5
 800e6bc:	d505      	bpl.n	800e6ca <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800e6be:	4b0d      	ldr	r3, [pc, #52]	; (800e6f4 <RTC_Init+0x88>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	701a      	strb	r2, [r3, #0]
 800e6c4:	e001      	b.n	800e6ca <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800e6c6:	f7ff ff4f 	bl	800e568 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e6ca:	4a05      	ldr	r2, [pc, #20]	; (800e6e0 <RTC_Init+0x74>)
 800e6cc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e6ce:	2380      	movs	r3, #128	; 0x80
 800e6d0:	045b      	lsls	r3, r3, #17
 800e6d2:	430b      	orrs	r3, r1
 800e6d4:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800e6d6:	2000      	movs	r0, #0
}
 800e6d8:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e6da:	20ff      	movs	r0, #255	; 0xff
 800e6dc:	e7fc      	b.n	800e6d8 <RTC_Init+0x6c>
 800e6de:	46c0      	nop			; (mov r8, r8)
 800e6e0:	40021000 	.word	0x40021000
 800e6e4:	20006d70 	.word	0x20006d70
 800e6e8:	40002800 	.word	0x40002800
 800e6ec:	000007cf 	.word	0x000007cf
 800e6f0:	000032f2 	.word	0x000032f2
 800e6f4:	20001af4 	.word	0x20001af4

0800e6f8 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6fa:	46c6      	mov	lr, r8
 800e6fc:	b500      	push	{lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	ac0c      	add	r4, sp, #48	; 0x30
 800e702:	7827      	ldrb	r7, [r4, #0]
 800e704:	ac0d      	add	r4, sp, #52	; 0x34
 800e706:	7824      	ldrb	r4, [r4, #0]
 800e708:	46a0      	mov	r8, r4
 800e70a:	ac0e      	add	r4, sp, #56	; 0x38
 800e70c:	7825      	ldrb	r5, [r4, #0]
 800e70e:	ac0f      	add	r4, sp, #60	; 0x3c
 800e710:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e712:	3230      	adds	r2, #48	; 0x30
 800e714:	ac05      	add	r4, sp, #20
 800e716:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e718:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e71a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e71c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e71e:	2200      	movs	r2, #0
 800e720:	0021      	movs	r1, r4
 800e722:	481f      	ldr	r0, [pc, #124]	; (800e7a0 <BOS_CalendarConfig+0xa8>)
 800e724:	f004 faa6 	bl	8012c74 <HAL_RTC_SetDate>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d134      	bne.n	800e796 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e72c:	466b      	mov	r3, sp
 800e72e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e730:	4642      	mov	r2, r8
 800e732:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e734:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e736:	2300      	movs	r3, #0
 800e738:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e73a:	2e01      	cmp	r6, #1
 800e73c:	d01e      	beq.n	800e77c <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e73e:	2e02      	cmp	r6, #2
 800e740:	d022      	beq.n	800e788 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e742:	4b18      	ldr	r3, [pc, #96]	; (800e7a4 <BOS_CalendarConfig+0xac>)
 800e744:	2218      	movs	r2, #24
 800e746:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e748:	2200      	movs	r2, #0
 800e74a:	4669      	mov	r1, sp
 800e74c:	4814      	ldr	r0, [pc, #80]	; (800e7a0 <BOS_CalendarConfig+0xa8>)
 800e74e:	f004 fa13 	bl	8012b78 <HAL_RTC_SetTime>
 800e752:	2800      	cmp	r0, #0
 800e754:	d121      	bne.n	800e79a <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e756:	4a13      	ldr	r2, [pc, #76]	; (800e7a4 <BOS_CalendarConfig+0xac>)
 800e758:	7b53      	ldrb	r3, [r2, #13]
 800e75a:	021b      	lsls	r3, r3, #8
 800e75c:	7911      	ldrb	r1, [r2, #4]
 800e75e:	4319      	orrs	r1, r3
 800e760:	308d      	adds	r0, #141	; 0x8d
 800e762:	0040      	lsls	r0, r0, #1
 800e764:	f7f9 f97a 	bl	8007a5c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e768:	4a0f      	ldr	r2, [pc, #60]	; (800e7a8 <BOS_CalendarConfig+0xb0>)
 800e76a:	2101      	movs	r1, #1
 800e76c:	480c      	ldr	r0, [pc, #48]	; (800e7a0 <BOS_CalendarConfig+0xa8>)
 800e76e:	f004 fb43 	bl	8012df8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e772:	2000      	movs	r0, #0
}
 800e774:	b006      	add	sp, #24
 800e776:	bc04      	pop	{r2}
 800e778:	4690      	mov	r8, r2
 800e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e77c:	466a      	mov	r2, sp
 800e77e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e780:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <BOS_CalendarConfig+0xac>)
 800e782:	220c      	movs	r2, #12
 800e784:	735a      	strb	r2, [r3, #13]
 800e786:	e7df      	b.n	800e748 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e788:	2340      	movs	r3, #64	; 0x40
 800e78a:	466a      	mov	r2, sp
 800e78c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <BOS_CalendarConfig+0xac>)
 800e790:	220c      	movs	r2, #12
 800e792:	735a      	strb	r2, [r3, #13]
 800e794:	e7d8      	b.n	800e748 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e796:	20ff      	movs	r0, #255	; 0xff
 800e798:	e7ec      	b.n	800e774 <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800e79a:	20ff      	movs	r0, #255	; 0xff
 800e79c:	e7ea      	b.n	800e774 <BOS_CalendarConfig+0x7c>
 800e79e:	46c0      	nop			; (mov r8, r8)
 800e7a0:	20006d70 	.word	0x20006d70
 800e7a4:	200069d4 	.word	0x200069d4
 800e7a8:	000032f2 	.word	0x000032f2

0800e7ac <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e7ac:	b530      	push	{r4, r5, lr}
 800e7ae:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e7b0:	4d16      	ldr	r5, [pc, #88]	; (800e80c <GetTimeDate+0x60>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	a902      	add	r1, sp, #8
 800e7b6:	0028      	movs	r0, r5
 800e7b8:	f004 fad2 	bl	8012d60 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e7bc:	ac07      	add	r4, sp, #28
 800e7be:	2200      	movs	r2, #0
 800e7c0:	0021      	movs	r1, r4
 800e7c2:	0028      	movs	r0, r5
 800e7c4:	f004 faf4 	bl	8012db0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e7c8:	ab02      	add	r3, sp, #8
 800e7ca:	7a1a      	ldrb	r2, [r3, #8]
 800e7cc:	09d2      	lsrs	r2, r2, #7
 800e7ce:	3201      	adds	r2, #1
 800e7d0:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <GetTimeDate+0x64>)
 800e7d2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e7d4:	9a03      	ldr	r2, [sp, #12]
 800e7d6:	9201      	str	r2, [sp, #4]
 800e7d8:	0852      	lsrs	r2, r2, #1
 800e7da:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e7dc:	aa02      	add	r2, sp, #8
 800e7de:	7892      	ldrb	r2, [r2, #2]
 800e7e0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e7e2:	aa02      	add	r2, sp, #8
 800e7e4:	7852      	ldrb	r2, [r2, #1]
 800e7e6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e7e8:	aa02      	add	r2, sp, #8
 800e7ea:	7812      	ldrb	r2, [r2, #0]
 800e7ec:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e7ee:	78a2      	ldrb	r2, [r4, #2]
 800e7f0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e7f2:	7862      	ldrb	r2, [r4, #1]
 800e7f4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e7f6:	7822      	ldrb	r2, [r4, #0]
 800e7f8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e7fa:	78e2      	ldrb	r2, [r4, #3]
 800e7fc:	21fa      	movs	r1, #250	; 0xfa
 800e7fe:	00c9      	lsls	r1, r1, #3
 800e800:	468c      	mov	ip, r1
 800e802:	4462      	add	r2, ip
 800e804:	831a      	strh	r2, [r3, #24]
}
 800e806:	b009      	add	sp, #36	; 0x24
 800e808:	bd30      	pop	{r4, r5, pc}
 800e80a:	46c0      	nop			; (mov r8, r8)
 800e80c:	20006d70 	.word	0x20006d70
 800e810:	200069d4 	.word	0x200069d4

0800e814 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e814:	b530      	push	{r4, r5, lr}
 800e816:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e818:	4a12      	ldr	r2, [pc, #72]	; (800e864 <TIM_USEC_Init+0x50>)
 800e81a:	69d1      	ldr	r1, [r2, #28]
 800e81c:	2080      	movs	r0, #128	; 0x80
 800e81e:	0040      	lsls	r0, r0, #1
 800e820:	4301      	orrs	r1, r0
 800e822:	61d1      	str	r1, [r2, #28]
 800e824:	69d3      	ldr	r3, [r2, #28]
 800e826:	4003      	ands	r3, r0
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e82c:	4c0e      	ldr	r4, [pc, #56]	; (800e868 <TIM_USEC_Init+0x54>)
 800e82e:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <TIM_USEC_Init+0x58>)
 800e830:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e832:	f004 f865 	bl	8012900 <HAL_RCC_GetPCLK1Freq>
 800e836:	490e      	ldr	r1, [pc, #56]	; (800e870 <TIM_USEC_Init+0x5c>)
 800e838:	f7f1 fc8a 	bl	8000150 <__udivsi3>
 800e83c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e83e:	2500      	movs	r5, #0
 800e840:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e842:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <TIM_USEC_Init+0x60>)
 800e844:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e846:	0020      	movs	r0, r4
 800e848:	f004 fb3e 	bl	8012ec8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e84c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e84e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e850:	a902      	add	r1, sp, #8
 800e852:	0020      	movs	r0, r4
 800e854:	f004 fb52 	bl	8012efc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e858:	0020      	movs	r0, r4
 800e85a:	f004 fada 	bl	8012e12 <HAL_TIM_Base_Start>
}
 800e85e:	b005      	add	sp, #20
 800e860:	bd30      	pop	{r4, r5, pc}
 800e862:	46c0      	nop			; (mov r8, r8)
 800e864:	40021000 	.word	0x40021000
 800e868:	20006dcc 	.word	0x20006dcc
 800e86c:	40002000 	.word	0x40002000
 800e870:	000f4240 	.word	0x000f4240
 800e874:	0000ffff 	.word	0x0000ffff

0800e878 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e878:	b530      	push	{r4, r5, lr}
 800e87a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e87c:	4a12      	ldr	r2, [pc, #72]	; (800e8c8 <TIM_MSEC_Init+0x50>)
 800e87e:	6991      	ldr	r1, [r2, #24]
 800e880:	2080      	movs	r0, #128	; 0x80
 800e882:	0240      	lsls	r0, r0, #9
 800e884:	4301      	orrs	r1, r0
 800e886:	6191      	str	r1, [r2, #24]
 800e888:	6993      	ldr	r3, [r2, #24]
 800e88a:	4003      	ands	r3, r0
 800e88c:	9301      	str	r3, [sp, #4]
 800e88e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e890:	4c0e      	ldr	r4, [pc, #56]	; (800e8cc <TIM_MSEC_Init+0x54>)
 800e892:	4b0f      	ldr	r3, [pc, #60]	; (800e8d0 <TIM_MSEC_Init+0x58>)
 800e894:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e896:	f004 f833 	bl	8012900 <HAL_RCC_GetPCLK1Freq>
 800e89a:	21fa      	movs	r1, #250	; 0xfa
 800e89c:	0089      	lsls	r1, r1, #2
 800e89e:	f7f1 fc57 	bl	8000150 <__udivsi3>
 800e8a2:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8a4:	2500      	movs	r5, #0
 800e8a6:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	; (800e8d4 <TIM_MSEC_Init+0x5c>)
 800e8aa:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e8ac:	0020      	movs	r0, r4
 800e8ae:	f004 fb0b 	bl	8012ec8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e8b2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e8b4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e8b6:	a902      	add	r1, sp, #8
 800e8b8:	0020      	movs	r0, r4
 800e8ba:	f004 fb1f 	bl	8012efc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e8be:	0020      	movs	r0, r4
 800e8c0:	f004 faa7 	bl	8012e12 <HAL_TIM_Base_Start>
}
 800e8c4:	b005      	add	sp, #20
 800e8c6:	bd30      	pop	{r4, r5, pc}
 800e8c8:	40021000 	.word	0x40021000
 800e8cc:	20006d90 	.word	0x20006d90
 800e8d0:	40014000 	.word	0x40014000
 800e8d4:	0000ffff 	.word	0x0000ffff

0800e8d8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e8d8:	b510      	push	{r4, lr}
 800e8da:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e8dc:	f002 f9ea 	bl	8010cb4 <vPortEnterCritical>
	
	if (Delay)
 800e8e0:	2c00      	cmp	r4, #0
 800e8e2:	d006      	beq.n	800e8f2 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e8e4:	4b04      	ldr	r3, [pc, #16]	; (800e8f8 <StartMicroDelay+0x20>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e8ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e8ec:	1a5b      	subs	r3, r3, r1
 800e8ee:	42a3      	cmp	r3, r4
 800e8f0:	d9fb      	bls.n	800e8ea <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e8f2:	f002 f9eb 	bl	8010ccc <vPortExitCritical>
}
 800e8f6:	bd10      	pop	{r4, pc}
 800e8f8:	20006dcc 	.word	0x20006dcc

0800e8fc <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e900:	f002 f9d8 	bl	8010cb4 <vPortEnterCritical>
	
	if (Delay)
 800e904:	2c00      	cmp	r4, #0
 800e906:	d006      	beq.n	800e916 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e908:	4b04      	ldr	r3, [pc, #16]	; (800e91c <StartMilliDelay+0x20>)
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e90e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e910:	1a5b      	subs	r3, r3, r1
 800e912:	42a3      	cmp	r3, r4
 800e914:	d9fb      	bls.n	800e90e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e916:	f002 f9d9 	bl	8010ccc <vPortExitCritical>
}
 800e91a:	bd10      	pop	{r4, pc}
 800e91c:	20006d90 	.word	0x20006d90

0800e920 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e920:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e922:	4809      	ldr	r0, [pc, #36]	; (800e948 <MX_USART2_UART_Init+0x28>)
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <MX_USART2_UART_Init+0x2c>)
 800e926:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e928:	23e1      	movs	r3, #225	; 0xe1
 800e92a:	031b      	lsls	r3, r3, #12
 800e92c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e92e:	2300      	movs	r3, #0
 800e930:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e932:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e934:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e936:	220c      	movs	r2, #12
 800e938:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e93a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e93c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e93e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e940:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e942:	f004 ff61 	bl	8013808 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800e946:	bd10      	pop	{r4, pc}
 800e948:	20006cd4 	.word	0x20006cd4
 800e94c:	40004400 	.word	0x40004400

0800e950 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e950:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e952:	4809      	ldr	r0, [pc, #36]	; (800e978 <MX_USART3_UART_Init+0x28>)
 800e954:	4b09      	ldr	r3, [pc, #36]	; (800e97c <MX_USART3_UART_Init+0x2c>)
 800e956:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e958:	23e1      	movs	r3, #225	; 0xe1
 800e95a:	031b      	lsls	r3, r3, #12
 800e95c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e95e:	2300      	movs	r3, #0
 800e960:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e962:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e964:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e966:	220c      	movs	r2, #12
 800e968:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e96a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e96c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e96e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e970:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e972:	f004 ff49 	bl	8013808 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e976:	bd10      	pop	{r4, pc}
 800e978:	20006a94 	.word	0x20006a94
 800e97c:	40004800 	.word	0x40004800

0800e980 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e980:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e982:	4809      	ldr	r0, [pc, #36]	; (800e9a8 <MX_USART4_UART_Init+0x28>)
 800e984:	4b09      	ldr	r3, [pc, #36]	; (800e9ac <MX_USART4_UART_Init+0x2c>)
 800e986:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e988:	23e1      	movs	r3, #225	; 0xe1
 800e98a:	031b      	lsls	r3, r3, #12
 800e98c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e98e:	2300      	movs	r3, #0
 800e990:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e992:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e994:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e996:	220c      	movs	r2, #12
 800e998:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e99a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e99c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e99e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e9a0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e9a2:	f004 ff31 	bl	8013808 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e9a6:	bd10      	pop	{r4, pc}
 800e9a8:	20006c60 	.word	0x20006c60
 800e9ac:	40004c00 	.word	0x40004c00

0800e9b0 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e9b0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e9b2:	4809      	ldr	r0, [pc, #36]	; (800e9d8 <MX_USART5_UART_Init+0x28>)
 800e9b4:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <MX_USART5_UART_Init+0x2c>)
 800e9b6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e9b8:	23e1      	movs	r3, #225	; 0xe1
 800e9ba:	031b      	lsls	r3, r3, #12
 800e9bc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e9c2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e9c4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e9c6:	220c      	movs	r2, #12
 800e9c8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e9ca:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e9cc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e9ce:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e9d0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e9d2:	f004 ff19 	bl	8013808 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e9d6:	bd10      	pop	{r4, pc}
 800e9d8:	20006b08 	.word	0x20006b08
 800e9dc:	40005000 	.word	0x40005000

0800e9e0 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e9e0:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e9e2:	4809      	ldr	r0, [pc, #36]	; (800ea08 <MX_USART6_UART_Init+0x28>)
 800e9e4:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <MX_USART6_UART_Init+0x2c>)
 800e9e6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e9e8:	23e1      	movs	r3, #225	; 0xe1
 800e9ea:	031b      	lsls	r3, r3, #12
 800e9ec:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e9f2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e9f4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e9f6:	220c      	movs	r2, #12
 800e9f8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e9fa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e9fc:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e9fe:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ea00:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800ea02:	f004 ff01 	bl	8013808 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800ea06:	bd10      	pop	{r4, pc}
 800ea08:	20006bf0 	.word	0x20006bf0
 800ea0c:	40011400 	.word	0x40011400

0800ea10 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea12:	46ce      	mov	lr, r9
 800ea14:	b500      	push	{lr}
 800ea16:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800ea18:	6803      	ldr	r3, [r0, #0]
 800ea1a:	4a7a      	ldr	r2, [pc, #488]	; (800ec04 <HAL_UART_MspInit+0x1f4>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d010      	beq.n	800ea42 <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800ea20:	4a79      	ldr	r2, [pc, #484]	; (800ec08 <HAL_UART_MspInit+0x1f8>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d011      	beq.n	800ea4a <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800ea26:	4a79      	ldr	r2, [pc, #484]	; (800ec0c <HAL_UART_MspInit+0x1fc>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d03a      	beq.n	800eaa2 <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800ea2c:	4a78      	ldr	r2, [pc, #480]	; (800ec10 <HAL_UART_MspInit+0x200>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d064      	beq.n	800eafc <HAL_UART_MspInit+0xec>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800ea32:	4a78      	ldr	r2, [pc, #480]	; (800ec14 <HAL_UART_MspInit+0x204>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d100      	bne.n	800ea3a <HAL_UART_MspInit+0x2a>
 800ea38:	e08b      	b.n	800eb52 <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800ea3a:	4a77      	ldr	r2, [pc, #476]	; (800ec18 <HAL_UART_MspInit+0x208>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d100      	bne.n	800ea42 <HAL_UART_MspInit+0x32>
 800ea40:	e0b2      	b.n	800eba8 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800ea42:	b00a      	add	sp, #40	; 0x28
 800ea44:	bc04      	pop	{r2}
 800ea46:	4691      	mov	r9, r2
 800ea48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800ea4a:	4a74      	ldr	r2, [pc, #464]	; (800ec1c <HAL_UART_MspInit+0x20c>)
 800ea4c:	69d1      	ldr	r1, [r2, #28]
 800ea4e:	2080      	movs	r0, #128	; 0x80
 800ea50:	0280      	lsls	r0, r0, #10
 800ea52:	4301      	orrs	r1, r0
 800ea54:	61d1      	str	r1, [r2, #28]
 800ea56:	69d3      	ldr	r3, [r2, #28]
 800ea58:	4003      	ands	r3, r0
 800ea5a:	9300      	str	r3, [sp, #0]
 800ea5c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ea5e:	2304      	movs	r3, #4
 800ea60:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea62:	2702      	movs	r7, #2
 800ea64:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ea66:	2401      	movs	r4, #1
 800ea68:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ea6a:	2603      	movs	r6, #3
 800ea6c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800ea6e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800ea70:	2590      	movs	r5, #144	; 0x90
 800ea72:	05ed      	lsls	r5, r5, #23
 800ea74:	a905      	add	r1, sp, #20
 800ea76:	0028      	movs	r0, r5
 800ea78:	f003 fa36 	bl	8011ee8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800ea7c:	2308      	movs	r3, #8
 800ea7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea80:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ea82:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ea84:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800ea86:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800ea88:	a905      	add	r1, sp, #20
 800ea8a:	0028      	movs	r0, r5
 800ea8c:	f003 fa2c 	bl	8011ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800ea90:	2200      	movs	r2, #0
 800ea92:	2101      	movs	r1, #1
 800ea94:	201c      	movs	r0, #28
 800ea96:	f002 faaf 	bl	8010ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ea9a:	201c      	movs	r0, #28
 800ea9c:	f002 fadc 	bl	8011058 <HAL_NVIC_EnableIRQ>
 800eaa0:	e7cf      	b.n	800ea42 <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800eaa2:	4a5e      	ldr	r2, [pc, #376]	; (800ec1c <HAL_UART_MspInit+0x20c>)
 800eaa4:	69d1      	ldr	r1, [r2, #28]
 800eaa6:	2080      	movs	r0, #128	; 0x80
 800eaa8:	02c0      	lsls	r0, r0, #11
 800eaaa:	4301      	orrs	r1, r0
 800eaac:	61d1      	str	r1, [r2, #28]
 800eaae:	69d3      	ldr	r3, [r2, #28]
 800eab0:	4003      	ands	r3, r0
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800eab6:	2380      	movs	r3, #128	; 0x80
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eabc:	2402      	movs	r4, #2
 800eabe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eac0:	2701      	movs	r7, #1
 800eac2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eac4:	2603      	movs	r6, #3
 800eac6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800eac8:	2504      	movs	r5, #4
 800eaca:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800eacc:	a905      	add	r1, sp, #20
 800eace:	4854      	ldr	r0, [pc, #336]	; (800ec20 <HAL_UART_MspInit+0x210>)
 800ead0:	f003 fa0a 	bl	8011ee8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800ead4:	2380      	movs	r3, #128	; 0x80
 800ead6:	011b      	lsls	r3, r3, #4
 800ead8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eada:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eadc:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eade:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800eae0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800eae2:	a905      	add	r1, sp, #20
 800eae4:	484e      	ldr	r0, [pc, #312]	; (800ec20 <HAL_UART_MspInit+0x210>)
 800eae6:	f003 f9ff 	bl	8011ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800eaea:	2200      	movs	r2, #0
 800eaec:	2101      	movs	r1, #1
 800eaee:	201d      	movs	r0, #29
 800eaf0:	f002 fa82 	bl	8010ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800eaf4:	201d      	movs	r0, #29
 800eaf6:	f002 faaf 	bl	8011058 <HAL_NVIC_EnableIRQ>
 800eafa:	e7a2      	b.n	800ea42 <HAL_UART_MspInit+0x32>
    __USART4_CLK_ENABLE();
 800eafc:	4a47      	ldr	r2, [pc, #284]	; (800ec1c <HAL_UART_MspInit+0x20c>)
 800eafe:	69d1      	ldr	r1, [r2, #28]
 800eb00:	2080      	movs	r0, #128	; 0x80
 800eb02:	0300      	lsls	r0, r0, #12
 800eb04:	4301      	orrs	r1, r0
 800eb06:	61d1      	str	r1, [r2, #28]
 800eb08:	69d3      	ldr	r3, [r2, #28]
 800eb0a:	4003      	ands	r3, r0
 800eb0c:	9302      	str	r3, [sp, #8]
 800eb0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800eb10:	2401      	movs	r4, #1
 800eb12:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb14:	2502      	movs	r5, #2
 800eb16:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb18:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eb1a:	2603      	movs	r6, #3
 800eb1c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800eb1e:	2704      	movs	r7, #4
 800eb20:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800eb22:	a905      	add	r1, sp, #20
 800eb24:	2090      	movs	r0, #144	; 0x90
 800eb26:	05c0      	lsls	r0, r0, #23
 800eb28:	f003 f9de 	bl	8011ee8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800eb2c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb2e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb30:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eb32:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800eb34:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800eb36:	a905      	add	r1, sp, #20
 800eb38:	2090      	movs	r0, #144	; 0x90
 800eb3a:	05c0      	lsls	r0, r0, #23
 800eb3c:	f003 f9d4 	bl	8011ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800eb40:	2200      	movs	r2, #0
 800eb42:	2101      	movs	r1, #1
 800eb44:	201d      	movs	r0, #29
 800eb46:	f002 fa57 	bl	8010ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800eb4a:	201d      	movs	r0, #29
 800eb4c:	f002 fa84 	bl	8011058 <HAL_NVIC_EnableIRQ>
 800eb50:	e777      	b.n	800ea42 <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800eb52:	4a32      	ldr	r2, [pc, #200]	; (800ec1c <HAL_UART_MspInit+0x20c>)
 800eb54:	69d1      	ldr	r1, [r2, #28]
 800eb56:	2080      	movs	r0, #128	; 0x80
 800eb58:	0340      	lsls	r0, r0, #13
 800eb5a:	4301      	orrs	r1, r0
 800eb5c:	61d1      	str	r1, [r2, #28]
 800eb5e:	69d3      	ldr	r3, [r2, #28]
 800eb60:	4003      	ands	r3, r0
 800eb62:	9303      	str	r3, [sp, #12]
 800eb64:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800eb66:	2308      	movs	r3, #8
 800eb68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb6a:	2402      	movs	r4, #2
 800eb6c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb6e:	2701      	movs	r7, #1
 800eb70:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eb72:	2603      	movs	r6, #3
 800eb74:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800eb76:	2504      	movs	r5, #4
 800eb78:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800eb7a:	a905      	add	r1, sp, #20
 800eb7c:	4828      	ldr	r0, [pc, #160]	; (800ec20 <HAL_UART_MspInit+0x210>)
 800eb7e:	f003 f9b3 	bl	8011ee8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800eb82:	2310      	movs	r3, #16
 800eb84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb86:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb88:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800eb8a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800eb8c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800eb8e:	a905      	add	r1, sp, #20
 800eb90:	4823      	ldr	r0, [pc, #140]	; (800ec20 <HAL_UART_MspInit+0x210>)
 800eb92:	f003 f9a9 	bl	8011ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800eb96:	2200      	movs	r2, #0
 800eb98:	2101      	movs	r1, #1
 800eb9a:	201d      	movs	r0, #29
 800eb9c:	f002 fa2c 	bl	8010ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800eba0:	201d      	movs	r0, #29
 800eba2:	f002 fa59 	bl	8011058 <HAL_NVIC_EnableIRQ>
 800eba6:	e74c      	b.n	800ea42 <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800eba8:	4b1c      	ldr	r3, [pc, #112]	; (800ec1c <HAL_UART_MspInit+0x20c>)
 800ebaa:	699a      	ldr	r2, [r3, #24]
 800ebac:	2420      	movs	r4, #32
 800ebae:	4322      	orrs	r2, r4
 800ebb0:	619a      	str	r2, [r3, #24]
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	4023      	ands	r3, r4
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800ebba:	2310      	movs	r3, #16
 800ebbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebbe:	3b0e      	subs	r3, #14
 800ebc0:	4699      	mov	r9, r3
 800ebc2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ebc4:	2501      	movs	r5, #1
 800ebc6:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ebc8:	2703      	movs	r7, #3
 800ebca:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800ebcc:	2605      	movs	r6, #5
 800ebce:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800ebd0:	a905      	add	r1, sp, #20
 800ebd2:	2090      	movs	r0, #144	; 0x90
 800ebd4:	05c0      	lsls	r0, r0, #23
 800ebd6:	f003 f987 	bl	8011ee8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800ebda:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebdc:	464b      	mov	r3, r9
 800ebde:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ebe0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ebe2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800ebe4:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800ebe6:	a905      	add	r1, sp, #20
 800ebe8:	2090      	movs	r0, #144	; 0x90
 800ebea:	05c0      	lsls	r0, r0, #23
 800ebec:	f003 f97c 	bl	8011ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	2101      	movs	r1, #1
 800ebf4:	201d      	movs	r0, #29
 800ebf6:	f002 f9ff 	bl	8010ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ebfa:	201d      	movs	r0, #29
 800ebfc:	f002 fa2c 	bl	8011058 <HAL_NVIC_EnableIRQ>
}
 800ec00:	e71f      	b.n	800ea42 <HAL_UART_MspInit+0x32>
 800ec02:	46c0      	nop			; (mov r8, r8)
 800ec04:	40013800 	.word	0x40013800
 800ec08:	40004400 	.word	0x40004400
 800ec0c:	40004800 	.word	0x40004800
 800ec10:	40004c00 	.word	0x40004c00
 800ec14:	40005000 	.word	0x40005000
 800ec18:	40011400 	.word	0x40011400
 800ec1c:	40021000 	.word	0x40021000
 800ec20:	48000400 	.word	0x48000400

0800ec24 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800ec24:	2805      	cmp	r0, #5
 800ec26:	d80b      	bhi.n	800ec40 <GetUart+0x1c>
 800ec28:	0080      	lsls	r0, r0, #2
 800ec2a:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <GetUart+0x24>)
 800ec2c:	581b      	ldr	r3, [r3, r0]
 800ec2e:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			return P1uart;	
 800ec30:	4806      	ldr	r0, [pc, #24]	; (800ec4c <GetUart+0x28>)
 800ec32:	e008      	b.n	800ec46 <GetUart+0x22>
		case P2 :
			return P2uart;
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800ec34:	4806      	ldr	r0, [pc, #24]	; (800ec50 <GetUart+0x2c>)
 800ec36:	e006      	b.n	800ec46 <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800ec38:	4806      	ldr	r0, [pc, #24]	; (800ec54 <GetUart+0x30>)
 800ec3a:	e004      	b.n	800ec46 <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800ec3c:	4806      	ldr	r0, [pc, #24]	; (800ec58 <GetUart+0x34>)
 800ec3e:	e002      	b.n	800ec46 <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800ec40:	2000      	movs	r0, #0
 800ec42:	e000      	b.n	800ec46 <GetUart+0x22>
			return P2uart;
 800ec44:	4805      	ldr	r0, [pc, #20]	; (800ec5c <GetUart+0x38>)
	}		
}
 800ec46:	4770      	bx	lr
 800ec48:	0801b9b0 	.word	0x0801b9b0
 800ec4c:	20006c60 	.word	0x20006c60
 800ec50:	20006bf0 	.word	0x20006bf0
 800ec54:	20006a94 	.word	0x20006a94
 800ec58:	20006b08 	.word	0x20006b08
 800ec5c:	20006cd4 	.word	0x20006cd4

0800ec60 <writePxMutex>:
{
 800ec60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec62:	b083      	sub	sp, #12
 800ec64:	0005      	movs	r5, r0
 800ec66:	9101      	str	r1, [sp, #4]
 800ec68:	0017      	movs	r7, r2
 800ec6a:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800ec6c:	f7ff ffda 	bl	800ec24 <GetUart>
 800ec70:	1e04      	subs	r4, r0, #0
 800ec72:	d01c      	beq.n	800ecae <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ec74:	00ab      	lsls	r3, r5, #2
 800ec76:	4a10      	ldr	r2, [pc, #64]	; (800ecb8 <writePxMutex+0x58>)
 800ec78:	5898      	ldr	r0, [r3, r2]
 800ec7a:	0031      	movs	r1, r6
 800ec7c:	f000 f942 	bl	800ef04 <osSemaphoreWait>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d101      	bne.n	800ec88 <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800ec84:	2601      	movs	r6, #1
 800ec86:	e008      	b.n	800ec9a <writePxMutex+0x3a>
 800ec88:	2601      	movs	r6, #1
 800ec8a:	e011      	b.n	800ecb0 <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800ec8c:	9b08      	ldr	r3, [sp, #32]
 800ec8e:	003a      	movs	r2, r7
 800ec90:	9901      	ldr	r1, [sp, #4]
 800ec92:	0020      	movs	r0, r4
 800ec94:	f004 fd0e 	bl	80136b4 <HAL_UART_Transmit>
 800ec98:	0006      	movs	r6, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800ec9a:	2e00      	cmp	r6, #0
 800ec9c:	d001      	beq.n	800eca2 <writePxMutex+0x42>
 800ec9e:	2e03      	cmp	r6, #3
 800eca0:	d1f4      	bne.n	800ec8c <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800eca2:	00ad      	lsls	r5, r5, #2
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <writePxMutex+0x58>)
 800eca6:	58e8      	ldr	r0, [r5, r3]
 800eca8:	f000 f962 	bl	800ef70 <osSemaphoreRelease>
 800ecac:	e000      	b.n	800ecb0 <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800ecae:	2601      	movs	r6, #1
}
 800ecb0:	0030      	movs	r0, r6
 800ecb2:	b003      	add	sp, #12
 800ecb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb6:	46c0      	nop			; (mov r8, r8)
 800ecb8:	20006a54 	.word	0x20006a54

0800ecbc <writePxITMutex>:
{
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	0004      	movs	r4, r0
 800ecc2:	9101      	str	r1, [sp, #4]
 800ecc4:	0017      	movs	r7, r2
 800ecc6:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800ecc8:	f7ff ffac 	bl	800ec24 <GetUart>
 800eccc:	1e06      	subs	r6, r0, #0
 800ecce:	d00f      	beq.n	800ecf0 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ecd0:	00a4      	lsls	r4, r4, #2
 800ecd2:	4b09      	ldr	r3, [pc, #36]	; (800ecf8 <writePxITMutex+0x3c>)
 800ecd4:	58e0      	ldr	r0, [r4, r3]
 800ecd6:	0029      	movs	r1, r5
 800ecd8:	f000 f914 	bl	800ef04 <osSemaphoreWait>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d001      	beq.n	800ece4 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ece0:	2001      	movs	r0, #1
 800ece2:	e006      	b.n	800ecf2 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800ece4:	003a      	movs	r2, r7
 800ece6:	9901      	ldr	r1, [sp, #4]
 800ece8:	0030      	movs	r0, r6
 800ecea:	f004 f94a 	bl	8012f82 <HAL_UART_Transmit_IT>
 800ecee:	e000      	b.n	800ecf2 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ecf0:	2001      	movs	r0, #1
}
 800ecf2:	b003      	add	sp, #12
 800ecf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf6:	46c0      	nop			; (mov r8, r8)
 800ecf8:	20006a54 	.word	0x20006a54

0800ecfc <writePxDMAMutex>:
{
 800ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	0004      	movs	r4, r0
 800ed02:	000f      	movs	r7, r1
 800ed04:	9201      	str	r2, [sp, #4]
 800ed06:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800ed08:	f7ff ff8c 	bl	800ec24 <GetUart>
 800ed0c:	1e05      	subs	r5, r0, #0
	if (hUart != NULL) {	
 800ed0e:	d012      	beq.n	800ed36 <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ed10:	00a4      	lsls	r4, r4, #2
 800ed12:	4b0a      	ldr	r3, [pc, #40]	; (800ed3c <writePxDMAMutex+0x40>)
 800ed14:	58e0      	ldr	r0, [r4, r3]
 800ed16:	0031      	movs	r1, r6
 800ed18:	f000 f8f4 	bl	800ef04 <osSemaphoreWait>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d001      	beq.n	800ed24 <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ed20:	2001      	movs	r0, #1
 800ed22:	e009      	b.n	800ed38 <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800ed24:	0028      	movs	r0, r5
 800ed26:	f7ff f989 	bl	800e03c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800ed2a:	9a01      	ldr	r2, [sp, #4]
 800ed2c:	0039      	movs	r1, r7
 800ed2e:	0028      	movs	r0, r5
 800ed30:	f004 f9d6 	bl	80130e0 <HAL_UART_Transmit_DMA>
 800ed34:	e000      	b.n	800ed38 <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ed36:	2001      	movs	r0, #1
}
 800ed38:	b003      	add	sp, #12
 800ed3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3c:	20006a54 	.word	0x20006a54

0800ed40 <UpdateBaudrate>:
{
 800ed40:	b510      	push	{r4, lr}
 800ed42:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800ed44:	f7ff ff6e 	bl	800ec24 <GetUart>
	huart->Init.BaudRate = baudrate;
 800ed48:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800ed4a:	f004 fd5d 	bl	8013808 <HAL_UART_Init>
}
 800ed4e:	2000      	movs	r0, #0
 800ed50:	bd10      	pop	{r4, pc}
	...

0800ed54 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800ed58:	d003      	beq.n	800ed62 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800ed5a:	2901      	cmp	r1, #1
 800ed5c:	d002      	beq.n	800ed64 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800ed5e:	2900      	cmp	r1, #0
 800ed60:	d016      	beq.n	800ed90 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800ed62:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800ed64:	f7fc fb7c 	bl	800b460 <GetPort>
 800ed68:	3801      	subs	r0, #1
 800ed6a:	2180      	movs	r1, #128	; 0x80
 800ed6c:	0209      	lsls	r1, r1, #8
 800ed6e:	000d      	movs	r5, r1
 800ed70:	4105      	asrs	r5, r0
 800ed72:	4b12      	ldr	r3, [pc, #72]	; (800edbc <SwapUartPins+0x68>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	4811      	ldr	r0, [pc, #68]	; (800edc0 <SwapUartPins+0x6c>)
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	5a1a      	ldrh	r2, [r3, r0]
 800ed7e:	432a      	orrs	r2, r5
 800ed80:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ed82:	2308      	movs	r3, #8
 800ed84:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ed86:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800ed88:	0020      	movs	r0, r4
 800ed8a:	f004 fd3d 	bl	8013808 <HAL_UART_Init>
 800ed8e:	e7e8      	b.n	800ed62 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ed90:	f7fc fb66 	bl	800b460 <GetPort>
 800ed94:	3801      	subs	r0, #1
 800ed96:	2180      	movs	r1, #128	; 0x80
 800ed98:	0209      	lsls	r1, r1, #8
 800ed9a:	4101      	asrs	r1, r0
 800ed9c:	4b07      	ldr	r3, [pc, #28]	; (800edbc <SwapUartPins+0x68>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	3b01      	subs	r3, #1
 800eda2:	4807      	ldr	r0, [pc, #28]	; (800edc0 <SwapUartPins+0x6c>)
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	5a1a      	ldrh	r2, [r3, r0]
 800eda8:	438a      	bics	r2, r1
 800edaa:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800edac:	2308      	movs	r3, #8
 800edae:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800edb4:	0020      	movs	r0, r4
 800edb6:	f004 fd27 	bl	8013808 <HAL_UART_Init>
}
 800edba:	e7d2      	b.n	800ed62 <SwapUartPins+0xe>
 800edbc:	20000070 	.word	0x20000070
 800edc0:	20006e08 	.word	0x20006e08

0800edc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800edc4:	4816      	ldr	r0, [pc, #88]	; (800ee20 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800edc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800edc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800edca:	e003      	b.n	800edd4 <LoopCopyDataInit>

0800edcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800edcc:	4b15      	ldr	r3, [pc, #84]	; (800ee24 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800edce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800edd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800edd2:	3104      	adds	r1, #4

0800edd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800edd4:	4814      	ldr	r0, [pc, #80]	; (800ee28 <LoopForever+0xc>)
  ldr r3, =_edata
 800edd6:	4b15      	ldr	r3, [pc, #84]	; (800ee2c <LoopForever+0x10>)
  adds r2, r0, r1
 800edd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800edda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800eddc:	d3f6      	bcc.n	800edcc <CopyDataInit>
  ldr r2, =_sbss
 800edde:	4a14      	ldr	r2, [pc, #80]	; (800ee30 <LoopForever+0x14>)
  b LoopFillZerobss
 800ede0:	e002      	b.n	800ede8 <LoopFillZerobss>

0800ede2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ede2:	2300      	movs	r3, #0
  str  r3, [r2]
 800ede4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ede6:	3204      	adds	r2, #4

0800ede8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ede8:	4b12      	ldr	r3, [pc, #72]	; (800ee34 <LoopForever+0x18>)
  cmp r2, r3
 800edea:	429a      	cmp	r2, r3
  bcc FillZerobss
 800edec:	d3f9      	bcc.n	800ede2 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800edee:	4812      	ldr	r0, [pc, #72]	; (800ee38 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800edf0:	4912      	ldr	r1, [pc, #72]	; (800ee3c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800edf2:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800edf4:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800edf6:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800edf8:	d005      	beq.n	800ee06 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800edfa:	f000 f82b 	bl	800ee54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800edfe:	f004 fe79 	bl	8013af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ee02:	f004 fe58 	bl	8013ab6 <main>

0800ee06 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ee06:	480e      	ldr	r0, [pc, #56]	; (800ee40 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ee08:	490e      	ldr	r1, [pc, #56]	; (800ee44 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ee0a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ee0c:	480e      	ldr	r0, [pc, #56]	; (800ee48 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800ee0e:	490d      	ldr	r1, [pc, #52]	; (800ee44 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ee10:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ee12:	480e      	ldr	r0, [pc, #56]	; (800ee4c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800ee14:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800ee16:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800ee18:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800ee1a:	4700      	bx	r0

0800ee1c <LoopForever>:


LoopForever:
    b LoopForever
 800ee1c:	e7fe      	b.n	800ee1c <LoopForever>
 800ee1e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800ee20:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800ee24:	0801be68 	.word	0x0801be68
  ldr r0, =_sdata
 800ee28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800ee2c:	20000ad8 	.word	0x20000ad8
  ldr r2, =_sbss
 800ee30:	20000ad8 	.word	0x20000ad8
  ldr r3, = _ebss
 800ee34:	20006e80 	.word	0x20006e80
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ee38:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800ee3c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ee40:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ee44:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ee48:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ee4c:	1fffd800 	.word	0x1fffd800

0800ee50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ee50:	e7fe      	b.n	800ee50 <ADC1_COMP_IRQHandler>
	...

0800ee54 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ee54:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <SystemInit+0x48>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	2101      	movs	r1, #1
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800ee5e:	685a      	ldr	r2, [r3, #4]
 800ee60:	480f      	ldr	r0, [pc, #60]	; (800eea0 <SystemInit+0x4c>)
 800ee62:	4002      	ands	r2, r0
 800ee64:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	480e      	ldr	r0, [pc, #56]	; (800eea4 <SystemInit+0x50>)
 800ee6a:	4002      	ands	r2, r0
 800ee6c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	480d      	ldr	r0, [pc, #52]	; (800eea8 <SystemInit+0x54>)
 800ee72:	4002      	ands	r2, r0
 800ee74:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	480c      	ldr	r0, [pc, #48]	; (800eeac <SystemInit+0x58>)
 800ee7a:	4002      	ands	r2, r0
 800ee7c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800ee7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee80:	200f      	movs	r0, #15
 800ee82:	4382      	bics	r2, r0
 800ee84:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800ee86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee88:	4809      	ldr	r0, [pc, #36]	; (800eeb0 <SystemInit+0x5c>)
 800ee8a:	4002      	ands	r2, r0
 800ee8c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800ee8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee90:	438a      	bics	r2, r1
 800ee92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ee94:	2200      	movs	r2, #0
 800ee96:	609a      	str	r2, [r3, #8]

}
 800ee98:	4770      	bx	lr
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	40021000 	.word	0x40021000
 800eea0:	08ffb80c 	.word	0x08ffb80c
 800eea4:	fef6ffff 	.word	0xfef6ffff
 800eea8:	fffbffff 	.word	0xfffbffff
 800eeac:	ffc0ffff 	.word	0xffc0ffff
 800eeb0:	fff0feac 	.word	0xfff0feac

0800eeb4 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeb4:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800eeb8:	1e43      	subs	r3, r0, #1
 800eeba:	4198      	sbcs	r0, r3
}
 800eebc:	4770      	bx	lr

0800eebe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eebe:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800eec0:	f000 ff86 	bl	800fdd0 <vTaskStartScheduler>
  
  return osOK;
}
 800eec4:	2000      	movs	r0, #0
 800eec6:	bd10      	pop	{r4, pc}

0800eec8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eec8:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d100      	bne.n	800eed0 <osDelay+0x8>
 800eece:	3001      	adds	r0, #1
 800eed0:	f001 f8ba 	bl	8010048 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eed4:	2000      	movs	r0, #0
 800eed6:	bd10      	pop	{r4, pc}

0800eed8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800eed8:	b510      	push	{r4, lr}
 800eeda:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800eedc:	2901      	cmp	r1, #1
 800eede:	d005      	beq.n	800eeec <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800eee0:	2100      	movs	r1, #0
 800eee2:	f000 fb13 	bl	800f50c <xQueueCreateCountingSemaphore>
 800eee6:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800eee8:	0020      	movs	r0, r4
 800eeea:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800eeec:	2203      	movs	r2, #3
 800eeee:	2100      	movs	r1, #0
 800eef0:	f000 fae5 	bl	800f4be <xQueueGenericCreate>
 800eef4:	1e04      	subs	r4, r0, #0
 800eef6:	d0f7      	beq.n	800eee8 <osSemaphoreCreate+0x10>
 800eef8:	2300      	movs	r3, #0
 800eefa:	2200      	movs	r2, #0
 800eefc:	2100      	movs	r1, #0
 800eefe:	f000 fb1b 	bl	800f538 <xQueueGenericSend>
 800ef02:	e7f1      	b.n	800eee8 <osSemaphoreCreate+0x10>

0800ef04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ef04:	b530      	push	{r4, r5, lr}
 800ef06:	b083      	sub	sp, #12
 800ef08:	0005      	movs	r5, r0
 800ef0a:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d025      	beq.n	800ef60 <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800ef14:	1c4b      	adds	r3, r1, #1
 800ef16:	d013      	beq.n	800ef40 <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ef18:	f7ff ffcc 	bl	800eeb4 <inHandlerMode>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d012      	beq.n	800ef46 <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef20:	aa01      	add	r2, sp, #4
 800ef22:	2100      	movs	r1, #0
 800ef24:	0028      	movs	r0, r5
 800ef26:	f000 fcc2 	bl	800f8ae <xQueueReceiveFromISR>
 800ef2a:	2801      	cmp	r0, #1
 800ef2c:	d11a      	bne.n	800ef64 <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef2e:	9b01      	ldr	r3, [sp, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d019      	beq.n	800ef68 <osSemaphoreWait+0x64>
 800ef34:	4b0d      	ldr	r3, [pc, #52]	; (800ef6c <osSemaphoreWait+0x68>)
 800ef36:	2280      	movs	r2, #128	; 0x80
 800ef38:	0552      	lsls	r2, r2, #21
 800ef3a:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e00b      	b.n	800ef58 <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800ef40:	2401      	movs	r4, #1
 800ef42:	4264      	negs	r4, r4
 800ef44:	e7e8      	b.n	800ef18 <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ef46:	2300      	movs	r3, #0
 800ef48:	0022      	movs	r2, r4
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	0028      	movs	r0, r5
 800ef4e:	f000 fc0b 	bl	800f768 <xQueueGenericReceive>
 800ef52:	2801      	cmp	r0, #1
 800ef54:	d102      	bne.n	800ef5c <osSemaphoreWait+0x58>
  return osOK;
 800ef56:	2000      	movs	r0, #0
}
 800ef58:	b003      	add	sp, #12
 800ef5a:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800ef5c:	20ff      	movs	r0, #255	; 0xff
 800ef5e:	e7fb      	b.n	800ef58 <osSemaphoreWait+0x54>
    return osErrorParameter;
 800ef60:	2080      	movs	r0, #128	; 0x80
 800ef62:	e7f9      	b.n	800ef58 <osSemaphoreWait+0x54>
      return osErrorOS;
 800ef64:	20ff      	movs	r0, #255	; 0xff
 800ef66:	e7f7      	b.n	800ef58 <osSemaphoreWait+0x54>
  return osOK;
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e7f5      	b.n	800ef58 <osSemaphoreWait+0x54>
 800ef6c:	e000ed04 	.word	0xe000ed04

0800ef70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ef70:	b510      	push	{r4, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800ef7a:	f7ff ff9b 	bl	800eeb4 <inHandlerMode>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d00e      	beq.n	800efa0 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef82:	a901      	add	r1, sp, #4
 800ef84:	0020      	movs	r0, r4
 800ef86:	f000 fbaf 	bl	800f6e8 <xQueueGiveFromISR>
 800ef8a:	2801      	cmp	r0, #1
 800ef8c:	d113      	bne.n	800efb6 <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d012      	beq.n	800efba <osSemaphoreRelease+0x4a>
 800ef94:	4b0b      	ldr	r3, [pc, #44]	; (800efc4 <osSemaphoreRelease+0x54>)
 800ef96:	2280      	movs	r2, #128	; 0x80
 800ef98:	0552      	lsls	r2, r2, #21
 800ef9a:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	e008      	b.n	800efb2 <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800efa0:	2300      	movs	r3, #0
 800efa2:	2200      	movs	r2, #0
 800efa4:	2100      	movs	r1, #0
 800efa6:	0020      	movs	r0, r4
 800efa8:	f000 fac6 	bl	800f538 <xQueueGenericSend>
 800efac:	2801      	cmp	r0, #1
 800efae:	d106      	bne.n	800efbe <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800efb0:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800efb2:	b002      	add	sp, #8
 800efb4:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800efb6:	20ff      	movs	r0, #255	; 0xff
 800efb8:	e7fb      	b.n	800efb2 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800efba:	2000      	movs	r0, #0
 800efbc:	e7f9      	b.n	800efb2 <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800efbe:	20ff      	movs	r0, #255	; 0xff
 800efc0:	e7f7      	b.n	800efb2 <osSemaphoreRelease+0x42>
 800efc2:	46c0      	nop			; (mov r8, r8)
 800efc4:	e000ed04 	.word	0xe000ed04

0800efc8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800efc8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800efca:	f001 fa2b 	bl	8010424 <xTaskGetSchedulerState>
 800efce:	2801      	cmp	r0, #1
 800efd0:	d001      	beq.n	800efd6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800efd2:	f001 feb5 	bl	8010d40 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800efd6:	bd10      	pop	{r4, pc}

0800efd8 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800efd8:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800efda:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800efdc:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800efde:	e005      	b.n	800efec <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800efe0:	2901      	cmp	r1, #1
 800efe2:	d002      	beq.n	800efea <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800efe4:	3001      	adds	r0, #1
 800efe6:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800efe8:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800efea:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800efec:	2200      	movs	r2, #0
 800efee:	569a      	ldrsb	r2, [r3, r2]
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	d003      	beq.n	800effc <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800eff4:	2a20      	cmp	r2, #32
 800eff6:	d0f3      	beq.n	800efe0 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800eff8:	2100      	movs	r1, #0
 800effa:	e7f6      	b.n	800efea <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800effc:	2901      	cmp	r1, #1
 800effe:	d000      	beq.n	800f002 <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800f000:	4770      	bx	lr
		cParameters--;
 800f002:	3801      	subs	r0, #1
 800f004:	b240      	sxtb	r0, r0
 800f006:	e7fb      	b.n	800f000 <prvGetNumberOfParameters+0x28>

0800f008 <FreeRTOS_CLIRegisterCommand>:
{
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800f00c:	d101      	bne.n	800f012 <FreeRTOS_CLIRegisterCommand+0xa>
 800f00e:	b672      	cpsid	i
 800f010:	e7fe      	b.n	800f010 <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800f012:	2008      	movs	r0, #8
 800f014:	f001 ff02 	bl	8010e1c <pvPortMalloc>
 800f018:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800f01a:	d101      	bne.n	800f020 <FreeRTOS_CLIRegisterCommand+0x18>
 800f01c:	b672      	cpsid	i
 800f01e:	e7fe      	b.n	800f01e <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 800f020:	f001 fe48 	bl	8010cb4 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800f024:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800f02a:	4b04      	ldr	r3, [pc, #16]	; (800f03c <FreeRTOS_CLIRegisterCommand+0x34>)
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800f030:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800f032:	f001 fe4b 	bl	8010ccc <vPortExitCritical>
}
 800f036:	2001      	movs	r0, #1
 800f038:	bd70      	pop	{r4, r5, r6, pc}
 800f03a:	46c0      	nop			; (mov r8, r8)
 800f03c:	20000114 	.word	0x20000114

0800f040 <FreeRTOS_CLIProcessCommand>:
{
 800f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f042:	b083      	sub	sp, #12
 800f044:	0005      	movs	r5, r0
 800f046:	9100      	str	r1, [sp, #0]
 800f048:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800f04a:	4b2c      	ldr	r3, [pc, #176]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d016      	beq.n	800f080 <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800f052:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800f054:	4b29      	ldr	r3, [pc, #164]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <FreeRTOS_CLIProcessCommand+0x20>
 800f05c:	2c00      	cmp	r4, #0
 800f05e:	d03d      	beq.n	800f0dc <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 800f060:	2b00      	cmp	r3, #0
 800f062:	d044      	beq.n	800f0ee <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	002a      	movs	r2, r5
 800f06a:	9901      	ldr	r1, [sp, #4]
 800f06c:	9800      	ldr	r0, [sp, #0]
 800f06e:	4798      	blx	r3
 800f070:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800f072:	d102      	bne.n	800f07a <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800f074:	4b21      	ldr	r3, [pc, #132]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f076:	2200      	movs	r2, #0
 800f078:	601a      	str	r2, [r3, #0]
}
 800f07a:	0020      	movs	r0, r4
 800f07c:	b003      	add	sp, #12
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f080:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f082:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <FreeRTOS_CLIProcessCommand+0xc0>)
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	e009      	b.n	800f09c <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800f088:	0002      	movs	r2, r0
 800f08a:	0021      	movs	r1, r4
 800f08c:	0028      	movs	r0, r5
 800f08e:	f005 f9fb 	bl	8014488 <strncmp>
 800f092:	2800      	cmp	r0, #0
 800f094:	d011      	beq.n	800f0ba <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	4b18      	ldr	r3, [pc, #96]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	4b17      	ldr	r3, [pc, #92]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f09e:	681f      	ldr	r7, [r3, #0]
 800f0a0:	2f00      	cmp	r7, #0
 800f0a2:	d019      	beq.n	800f0d8 <FreeRTOS_CLIProcessCommand+0x98>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800f0a4:	683e      	ldr	r6, [r7, #0]
 800f0a6:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800f0a8:	0020      	movs	r0, r4
 800f0aa:	f7f1 f835 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f0ae:	562b      	ldrsb	r3, [r5, r0]
 800f0b0:	2b20      	cmp	r3, #32
 800f0b2:	d0e9      	beq.n	800f088 <FreeRTOS_CLIProcessCommand+0x48>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ee      	bne.n	800f096 <FreeRTOS_CLIProcessCommand+0x56>
 800f0b8:	e7e6      	b.n	800f088 <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800f0ba:	240c      	movs	r4, #12
 800f0bc:	5734      	ldrsb	r4, [r6, r4]
 800f0be:	2c00      	cmp	r4, #0
 800f0c0:	da01      	bge.n	800f0c6 <FreeRTOS_CLIProcessCommand+0x86>
portBASE_TYPE xReturn = pdTRUE;
 800f0c2:	2401      	movs	r4, #1
 800f0c4:	e7c6      	b.n	800f054 <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800f0c6:	0028      	movs	r0, r5
 800f0c8:	f7ff ff86 	bl	800efd8 <prvGetNumberOfParameters>
 800f0cc:	4284      	cmp	r4, r0
 800f0ce:	d001      	beq.n	800f0d4 <FreeRTOS_CLIProcessCommand+0x94>
							xReturn = pdFALSE;
 800f0d0:	2400      	movs	r4, #0
 800f0d2:	e7bf      	b.n	800f054 <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800f0d4:	2401      	movs	r4, #1
 800f0d6:	e7bd      	b.n	800f054 <FreeRTOS_CLIProcessCommand+0x14>
 800f0d8:	2401      	movs	r4, #1
 800f0da:	e7bb      	b.n	800f054 <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f0dc:	9a01      	ldr	r2, [sp, #4]
 800f0de:	4909      	ldr	r1, [pc, #36]	; (800f104 <FreeRTOS_CLIProcessCommand+0xc4>)
 800f0e0:	9800      	ldr	r0, [sp, #0]
 800f0e2:	f005 f9e2 	bl	80144aa <strncpy>
		pxCommand = NULL;
 800f0e6:	4b05      	ldr	r3, [pc, #20]	; (800f0fc <FreeRTOS_CLIProcessCommand+0xbc>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	e7c5      	b.n	800f07a <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f0ee:	9a01      	ldr	r2, [sp, #4]
 800f0f0:	4905      	ldr	r1, [pc, #20]	; (800f108 <FreeRTOS_CLIProcessCommand+0xc8>)
 800f0f2:	9800      	ldr	r0, [sp, #0]
 800f0f4:	f005 f9d9 	bl	80144aa <strncpy>
		xReturn = pdFALSE;
 800f0f8:	2400      	movs	r4, #0
	return xReturn;
 800f0fa:	e7be      	b.n	800f07a <FreeRTOS_CLIProcessCommand+0x3a>
 800f0fc:	20001d60 	.word	0x20001d60
 800f100:	20000118 	.word	0x20000118
 800f104:	0801b9c8 	.word	0x0801b9c8
 800f108:	0801ba20 	.word	0x0801ba20

0800f10c <FreeRTOS_CLIGetOutputBuffer>:
}
 800f10c:	4800      	ldr	r0, [pc, #0]	; (800f110 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800f10e:	4770      	bx	lr
 800f110:	20001af8 	.word	0x20001af8

0800f114 <FreeRTOS_CLIGetParameter>:
{
 800f114:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800f116:	2300      	movs	r3, #0
 800f118:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800f11a:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800f11c:	e011      	b.n	800f142 <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800f11e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f120:	2300      	movs	r3, #0
 800f122:	56c3      	ldrsb	r3, [r0, r3]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d003      	beq.n	800f130 <FreeRTOS_CLIGetParameter+0x1c>
 800f128:	2b20      	cmp	r3, #32
 800f12a:	d1f8      	bne.n	800f11e <FreeRTOS_CLIGetParameter+0xa>
 800f12c:	e000      	b.n	800f130 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800f12e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800f130:	2300      	movs	r3, #0
 800f132:	56c3      	ldrsb	r3, [r0, r3]
 800f134:	2b20      	cmp	r3, #32
 800f136:	d0fa      	beq.n	800f12e <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d017      	beq.n	800f16c <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800f13c:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800f13e:	42a1      	cmp	r1, r4
 800f140:	d012      	beq.n	800f168 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800f142:	428c      	cmp	r4, r1
 800f144:	d3ec      	bcc.n	800f120 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800f146:	2000      	movs	r0, #0
}
 800f148:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	3301      	adds	r3, #1
 800f14e:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800f150:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f152:	2300      	movs	r3, #0
 800f154:	56cb      	ldrsb	r3, [r1, r3]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <FreeRTOS_CLIGetParameter+0x4a>
 800f15a:	2b20      	cmp	r3, #32
 800f15c:	d1f5      	bne.n	800f14a <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800f15e:	6813      	ldr	r3, [r2, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1f1      	bne.n	800f148 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800f164:	2000      	movs	r0, #0
	return pcReturn;
 800f166:	e7ef      	b.n	800f148 <FreeRTOS_CLIGetParameter+0x34>
 800f168:	0001      	movs	r1, r0
 800f16a:	e7f2      	b.n	800f152 <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7eb      	b.n	800f148 <FreeRTOS_CLIGetParameter+0x34>

0800f170 <prvHelpCommand>:
{
 800f170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f172:	b083      	sub	sp, #12
 800f174:	0005      	movs	r5, r0
 800f176:	000e      	movs	r6, r1
 800f178:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800f17e:	aa01      	add	r2, sp, #4
 800f180:	2101      	movs	r1, #1
 800f182:	f7ff ffc7 	bl	800f114 <FreeRTOS_CLIGetParameter>
 800f186:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800f188:	d022      	beq.n	800f1d0 <prvHelpCommand+0x60>
 800f18a:	2206      	movs	r2, #6
 800f18c:	4931      	ldr	r1, [pc, #196]	; (800f254 <prvHelpCommand+0xe4>)
 800f18e:	f005 f97b 	bl	8014488 <strncmp>
 800f192:	2800      	cmp	r0, #0
 800f194:	d11c      	bne.n	800f1d0 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800f196:	4b30      	ldr	r3, [pc, #192]	; (800f258 <prvHelpCommand+0xe8>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	2b07      	cmp	r3, #7
 800f19c:	d00f      	beq.n	800f1be <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800f19e:	4a2e      	ldr	r2, [pc, #184]	; (800f258 <prvHelpCommand+0xe8>)
 800f1a0:	7813      	ldrb	r3, [r2, #0]
 800f1a2:	1c5c      	adds	r4, r3, #1
 800f1a4:	b2e4      	uxtb	r4, r4
 800f1a6:	7014      	strb	r4, [r2, #0]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4a2c      	ldr	r2, [pc, #176]	; (800f25c <prvHelpCommand+0xec>)
 800f1ac:	5899      	ldr	r1, [r3, r2]
 800f1ae:	0032      	movs	r2, r6
 800f1b0:	0028      	movs	r0, r5
 800f1b2:	f005 f97a 	bl	80144aa <strncpy>
		if( str == NumOfParamsHelpStrings )
 800f1b6:	2c07      	cmp	r4, #7
 800f1b8:	d005      	beq.n	800f1c6 <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800f1ba:	2701      	movs	r7, #1
 800f1bc:	e00a      	b.n	800f1d4 <prvHelpCommand+0x64>
			str = 0;
 800f1be:	4b26      	ldr	r3, [pc, #152]	; (800f258 <prvHelpCommand+0xe8>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	e7eb      	b.n	800f19e <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800f1c6:	4b24      	ldr	r3, [pc, #144]	; (800f258 <prvHelpCommand+0xe8>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	701a      	strb	r2, [r3, #0]
 800f1cc:	2700      	movs	r7, #0
 800f1ce:	e001      	b.n	800f1d4 <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800f1d0:	2c00      	cmp	r4, #0
 800f1d2:	d002      	beq.n	800f1da <prvHelpCommand+0x6a>
}
 800f1d4:	0038      	movs	r0, r7
 800f1d6:	b003      	add	sp, #12
 800f1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800f1da:	4b21      	ldr	r3, [pc, #132]	; (800f260 <prvHelpCommand+0xf0>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d025      	beq.n	800f22e <prvHelpCommand+0xbe>
		if (counter > numOfBosCommands) {
 800f1e2:	4b20      	ldr	r3, [pc, #128]	; (800f264 <prvHelpCommand+0xf4>)
 800f1e4:	781a      	ldrb	r2, [r3, #0]
 800f1e6:	4b20      	ldr	r3, [pc, #128]	; (800f268 <prvHelpCommand+0xf8>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d926      	bls.n	800f23c <prvHelpCommand+0xcc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800f1ee:	4b1c      	ldr	r3, [pc, #112]	; (800f260 <prvHelpCommand+0xf0>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6859      	ldr	r1, [r3, #4]
 800f1f6:	0032      	movs	r2, r6
 800f1f8:	3a08      	subs	r2, #8
 800f1fa:	0028      	movs	r0, r5
 800f1fc:	3008      	adds	r0, #8
 800f1fe:	f005 f954 	bl	80144aa <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800f202:	1c68      	adds	r0, r5, #1
 800f204:	4919      	ldr	r1, [pc, #100]	; (800f26c <prvHelpCommand+0xfc>)
 800f206:	f005 f937 	bl	8014478 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800f20a:	2328      	movs	r3, #40	; 0x28
 800f20c:	702b      	strb	r3, [r5, #0]
 800f20e:	3301      	adds	r3, #1
 800f210:	71ab      	strb	r3, [r5, #6]
 800f212:	3b09      	subs	r3, #9
 800f214:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800f216:	4b12      	ldr	r3, [pc, #72]	; (800f260 <prvHelpCommand+0xf0>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	6852      	ldr	r2, [r2, #4]
 800f21c:	601a      	str	r2, [r3, #0]
		counter++;
 800f21e:	4911      	ldr	r1, [pc, #68]	; (800f264 <prvHelpCommand+0xf4>)
 800f220:	780b      	ldrb	r3, [r1, #0]
 800f222:	3301      	adds	r3, #1
 800f224:	700b      	strb	r3, [r1, #0]
		if( pxCommand == NULL )
 800f226:	2a00      	cmp	r2, #0
 800f228:	d011      	beq.n	800f24e <prvHelpCommand+0xde>
			xReturn = pdTRUE;
 800f22a:	2701      	movs	r7, #1
	return xReturn;
 800f22c:	e7d2      	b.n	800f1d4 <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 800f22e:	4b0c      	ldr	r3, [pc, #48]	; (800f260 <prvHelpCommand+0xf0>)
 800f230:	4a0f      	ldr	r2, [pc, #60]	; (800f270 <prvHelpCommand+0x100>)
 800f232:	601a      	str	r2, [r3, #0]
			counter = 1;
 800f234:	4b0b      	ldr	r3, [pc, #44]	; (800f264 <prvHelpCommand+0xf4>)
 800f236:	2201      	movs	r2, #1
 800f238:	701a      	strb	r2, [r3, #0]
 800f23a:	e7d2      	b.n	800f1e2 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800f23c:	4b08      	ldr	r3, [pc, #32]	; (800f260 <prvHelpCommand+0xf0>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	6859      	ldr	r1, [r3, #4]
 800f244:	0032      	movs	r2, r6
 800f246:	0028      	movs	r0, r5
 800f248:	f005 f92f 	bl	80144aa <strncpy>
 800f24c:	e7e3      	b.n	800f216 <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 800f24e:	2700      	movs	r7, #0
 800f250:	e7c0      	b.n	800f1d4 <prvHelpCommand+0x64>
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	0801956c 	.word	0x0801956c
 800f258:	20001d68 	.word	0x20001d68
 800f25c:	20000074 	.word	0x20000074
 800f260:	20001d64 	.word	0x20001d64
 800f264:	20001d5c 	.word	0x20001d5c
 800f268:	20006958 	.word	0x20006958
 800f26c:	08018c84 	.word	0x08018c84
 800f270:	20000118 	.word	0x20000118

0800f274 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f274:	0003      	movs	r3, r0
 800f276:	3308      	adds	r3, #8
 800f278:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f27a:	2201      	movs	r2, #1
 800f27c:	4252      	negs	r2, r2
 800f27e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f280:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f282:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f284:	2300      	movs	r3, #0
 800f286:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f288:	4770      	bx	lr

0800f28a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f28e:	4770      	bx	lr

0800f290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f290:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f292:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f294:	689a      	ldr	r2, [r3, #8]
 800f296:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f298:	689a      	ldr	r2, [r3, #8]
 800f29a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f29c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f29e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f2a0:	6803      	ldr	r3, [r0, #0]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	6003      	str	r3, [r0, #0]
}
 800f2a6:	4770      	bx	lr

0800f2a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2a8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f2aa:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f2ac:	1c63      	adds	r3, r4, #1
 800f2ae:	d002      	beq.n	800f2b6 <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2b0:	0002      	movs	r2, r0
 800f2b2:	3208      	adds	r2, #8
 800f2b4:	e002      	b.n	800f2bc <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800f2b6:	6902      	ldr	r2, [r0, #16]
 800f2b8:	e004      	b.n	800f2c4 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2ba:	001a      	movs	r2, r3
 800f2bc:	6853      	ldr	r3, [r2, #4]
 800f2be:	681d      	ldr	r5, [r3, #0]
 800f2c0:	42a5      	cmp	r5, r4
 800f2c2:	d9fa      	bls.n	800f2ba <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f2c4:	6853      	ldr	r3, [r2, #4]
 800f2c6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2c8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2ca:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2cc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f2ce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f2d0:	6803      	ldr	r3, [r0, #0]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	6003      	str	r3, [r0, #0]
}
 800f2d6:	bd30      	pop	{r4, r5, pc}

0800f2d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f2d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2da:	6842      	ldr	r2, [r0, #4]
 800f2dc:	6881      	ldr	r1, [r0, #8]
 800f2de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2e0:	6882      	ldr	r2, [r0, #8]
 800f2e2:	6841      	ldr	r1, [r0, #4]
 800f2e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	4282      	cmp	r2, r0
 800f2ea:	d005      	beq.n	800f2f8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	1e50      	subs	r0, r2, #1
 800f2f4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800f2f6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2f8:	6882      	ldr	r2, [r0, #8]
 800f2fa:	605a      	str	r2, [r3, #4]
 800f2fc:	e7f6      	b.n	800f2ec <uxListRemove+0x14>

0800f2fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f2fe:	b510      	push	{r4, lr}
 800f300:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f302:	f001 fcd7 	bl	8010cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d004      	beq.n	800f318 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800f30e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800f310:	f001 fcdc 	bl	8010ccc <vPortExitCritical>

	return xReturn;
}
 800f314:	0020      	movs	r0, r4
 800f316:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800f318:	2401      	movs	r4, #1
 800f31a:	e7f9      	b.n	800f310 <prvIsQueueFull+0x12>

0800f31c <prvIsQueueEmpty>:
{
 800f31c:	b510      	push	{r4, lr}
 800f31e:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800f320:	f001 fcc8 	bl	8010cb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f326:	2b00      	cmp	r3, #0
 800f328:	d004      	beq.n	800f334 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800f32a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f32c:	f001 fcce 	bl	8010ccc <vPortExitCritical>
}
 800f330:	0020      	movs	r0, r4
 800f332:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800f334:	2401      	movs	r4, #1
 800f336:	e7f9      	b.n	800f32c <prvIsQueueEmpty+0x10>

0800f338 <prvCopyDataToQueue>:
{
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	0004      	movs	r4, r0
 800f33c:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f33e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f340:	2a00      	cmp	r2, #0
 800f342:	d10d      	bne.n	800f360 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f344:	6803      	ldr	r3, [r0, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d004      	beq.n	800f354 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800f34a:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800f34c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f34e:	3301      	adds	r3, #1
 800f350:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f352:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f354:	6840      	ldr	r0, [r0, #4]
 800f356:	f001 f8b5 	bl	80104c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	6063      	str	r3, [r4, #4]
 800f35e:	e7f5      	b.n	800f34c <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800f360:	2d00      	cmp	r5, #0
 800f362:	d10e      	bne.n	800f382 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f364:	6880      	ldr	r0, [r0, #8]
 800f366:	f004 fe48 	bl	8013ffa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f36a:	68a3      	ldr	r3, [r4, #8]
 800f36c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f36e:	4694      	mov	ip, r2
 800f370:	4463      	add	r3, ip
 800f372:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f374:	6862      	ldr	r2, [r4, #4]
 800f376:	4293      	cmp	r3, r2
 800f378:	d31e      	bcc.n	800f3b8 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800f37e:	2000      	movs	r0, #0
 800f380:	e7e4      	b.n	800f34c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f382:	68c0      	ldr	r0, [r0, #12]
 800f384:	f004 fe39 	bl	8013ffa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f38a:	425a      	negs	r2, r3
 800f38c:	68e3      	ldr	r3, [r4, #12]
 800f38e:	189b      	adds	r3, r3, r2
 800f390:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f392:	6821      	ldr	r1, [r4, #0]
 800f394:	428b      	cmp	r3, r1
 800f396:	d203      	bcs.n	800f3a0 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f398:	6863      	ldr	r3, [r4, #4]
 800f39a:	469c      	mov	ip, r3
 800f39c:	4462      	add	r2, ip
 800f39e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f3a0:	2d02      	cmp	r5, #2
 800f3a2:	d001      	beq.n	800f3a8 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e7d1      	b.n	800f34c <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d006      	beq.n	800f3bc <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800f3ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e7c9      	b.n	800f34c <prvCopyDataToQueue+0x14>
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	e7c7      	b.n	800f34c <prvCopyDataToQueue+0x14>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	e7c5      	b.n	800f34c <prvCopyDataToQueue+0x14>

0800f3c0 <prvCopyDataFromQueue>:
{
 800f3c0:	b510      	push	{r4, lr}
 800f3c2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f3c6:	2a00      	cmp	r2, #0
 800f3c8:	d00b      	beq.n	800f3e2 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f3ca:	68c3      	ldr	r3, [r0, #12]
 800f3cc:	189b      	adds	r3, r3, r2
 800f3ce:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3d0:	6841      	ldr	r1, [r0, #4]
 800f3d2:	428b      	cmp	r3, r1
 800f3d4:	d301      	bcc.n	800f3da <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f3d6:	6803      	ldr	r3, [r0, #0]
 800f3d8:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f3da:	68c1      	ldr	r1, [r0, #12]
 800f3dc:	0020      	movs	r0, r4
 800f3de:	f004 fe0c 	bl	8013ffa <memcpy>
}
 800f3e2:	bd10      	pop	{r4, pc}

0800f3e4 <prvUnlockQueue>:
{
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800f3e8:	f001 fc64 	bl	8010cb4 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f3ec:	e004      	b.n	800f3f8 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800f3ee:	f001 f813 	bl	8010418 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800f3f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f3f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	dd09      	ble.n	800f412 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f400:	2b00      	cmp	r3, #0
 800f402:	d006      	beq.n	800f412 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f404:	0020      	movs	r0, r4
 800f406:	3024      	adds	r0, #36	; 0x24
 800f408:	f000 ff80 	bl	801030c <xTaskRemoveFromEventList>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d0f0      	beq.n	800f3f2 <prvUnlockQueue+0xe>
 800f410:	e7ed      	b.n	800f3ee <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800f412:	2301      	movs	r3, #1
 800f414:	425b      	negs	r3, r3
 800f416:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800f418:	f001 fc58 	bl	8010ccc <vPortExitCritical>
	taskENTER_CRITICAL();
 800f41c:	f001 fc4a 	bl	8010cb4 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f420:	e004      	b.n	800f42c <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800f422:	f000 fff9 	bl	8010418 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800f426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f428:	3b01      	subs	r3, #1
 800f42a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f42c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f42e:	2b00      	cmp	r3, #0
 800f430:	dd09      	ble.n	800f446 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f432:	6923      	ldr	r3, [r4, #16]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f438:	0020      	movs	r0, r4
 800f43a:	3010      	adds	r0, #16
 800f43c:	f000 ff66 	bl	801030c <xTaskRemoveFromEventList>
 800f440:	2800      	cmp	r0, #0
 800f442:	d0f0      	beq.n	800f426 <prvUnlockQueue+0x42>
 800f444:	e7ed      	b.n	800f422 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800f446:	2301      	movs	r3, #1
 800f448:	425b      	negs	r3, r3
 800f44a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800f44c:	f001 fc3e 	bl	8010ccc <vPortExitCritical>
}
 800f450:	bd10      	pop	{r4, pc}

0800f452 <xQueueGenericReset>:
{
 800f452:	b570      	push	{r4, r5, r6, lr}
 800f454:	0004      	movs	r4, r0
 800f456:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800f458:	2800      	cmp	r0, #0
 800f45a:	d101      	bne.n	800f460 <xQueueGenericReset+0xe>
 800f45c:	b672      	cpsid	i
 800f45e:	e7fe      	b.n	800f45e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800f460:	f001 fc28 	bl	8010cb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f464:	6822      	ldr	r2, [r4, #0]
 800f466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f468:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f46a:	0001      	movs	r1, r0
 800f46c:	4359      	muls	r1, r3
 800f46e:	1851      	adds	r1, r2, r1
 800f470:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f472:	2100      	movs	r1, #0
 800f474:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f476:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f478:	3b01      	subs	r3, #1
 800f47a:	4343      	muls	r3, r0
 800f47c:	18d3      	adds	r3, r2, r3
 800f47e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f480:	2301      	movs	r3, #1
 800f482:	425b      	negs	r3, r3
 800f484:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f486:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f488:	2d00      	cmp	r5, #0
 800f48a:	d10f      	bne.n	800f4ac <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f48c:	6923      	ldr	r3, [r4, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d103      	bne.n	800f49a <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 800f492:	f001 fc1b 	bl	8010ccc <vPortExitCritical>
}
 800f496:	2001      	movs	r0, #1
 800f498:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f49a:	0020      	movs	r0, r4
 800f49c:	3010      	adds	r0, #16
 800f49e:	f000 ff35 	bl	801030c <xTaskRemoveFromEventList>
 800f4a2:	2801      	cmp	r0, #1
 800f4a4:	d1f5      	bne.n	800f492 <xQueueGenericReset+0x40>
					queueYIELD_IF_USING_PREEMPTION();
 800f4a6:	f001 fbf9 	bl	8010c9c <vPortYield>
 800f4aa:	e7f2      	b.n	800f492 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f4ac:	0020      	movs	r0, r4
 800f4ae:	3010      	adds	r0, #16
 800f4b0:	f7ff fee0 	bl	800f274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f4b4:	0020      	movs	r0, r4
 800f4b6:	3024      	adds	r0, #36	; 0x24
 800f4b8:	f7ff fedc 	bl	800f274 <vListInitialise>
 800f4bc:	e7e9      	b.n	800f492 <xQueueGenericReset+0x40>

0800f4be <xQueueGenericCreate>:
{
 800f4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c0:	0006      	movs	r6, r0
 800f4c2:	000d      	movs	r5, r1
 800f4c4:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d101      	bne.n	800f4ce <xQueueGenericCreate+0x10>
 800f4ca:	b672      	cpsid	i
 800f4cc:	e7fe      	b.n	800f4cc <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f4ce:	2900      	cmp	r1, #0
 800f4d0:	d003      	beq.n	800f4da <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4d2:	0008      	movs	r0, r1
 800f4d4:	4370      	muls	r0, r6
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	e000      	b.n	800f4dc <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = ( size_t ) 0;
 800f4da:	2000      	movs	r0, #0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f4dc:	3054      	adds	r0, #84	; 0x54
 800f4de:	f001 fc9d 	bl	8010e1c <pvPortMalloc>
 800f4e2:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f4e4:	d005      	beq.n	800f4f2 <xQueueGenericCreate+0x34>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	d005      	beq.n	800f4f6 <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f4ea:	0003      	movs	r3, r0
 800f4ec:	3354      	adds	r3, #84	; 0x54
 800f4ee:	6003      	str	r3, [r0, #0]
 800f4f0:	e002      	b.n	800f4f8 <xQueueGenericCreate+0x3a>
	configASSERT( xReturn );
 800f4f2:	b672      	cpsid	i
 800f4f4:	e7fe      	b.n	800f4f4 <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4f6:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f4f8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f4fa:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f4fc:	2101      	movs	r1, #1
 800f4fe:	0020      	movs	r0, r4
 800f500:	f7ff ffa7 	bl	800f452 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f504:	2350      	movs	r3, #80	; 0x50
 800f506:	54e7      	strb	r7, [r4, r3]
}
 800f508:	0020      	movs	r0, r4
 800f50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f50c <xQueueCreateCountingSemaphore>:
	{
 800f50c:	b510      	push	{r4, lr}
 800f50e:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f510:	2800      	cmp	r0, #0
 800f512:	d101      	bne.n	800f518 <xQueueCreateCountingSemaphore+0xc>
 800f514:	b672      	cpsid	i
 800f516:	e7fe      	b.n	800f516 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f518:	4288      	cmp	r0, r1
 800f51a:	d201      	bcs.n	800f520 <xQueueCreateCountingSemaphore+0x14>
 800f51c:	b672      	cpsid	i
 800f51e:	e7fe      	b.n	800f51e <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f520:	2202      	movs	r2, #2
 800f522:	2100      	movs	r1, #0
 800f524:	f7ff ffcb 	bl	800f4be <xQueueGenericCreate>
		if( xHandle != NULL )
 800f528:	2800      	cmp	r0, #0
 800f52a:	d000      	beq.n	800f52e <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f52c:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 800f52e:	2800      	cmp	r0, #0
 800f530:	d101      	bne.n	800f536 <xQueueCreateCountingSemaphore+0x2a>
 800f532:	b672      	cpsid	i
 800f534:	e7fe      	b.n	800f534 <xQueueCreateCountingSemaphore+0x28>
	}
 800f536:	bd10      	pop	{r4, pc}

0800f538 <xQueueGenericSend>:
{
 800f538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	0004      	movs	r4, r0
 800f53e:	000f      	movs	r7, r1
 800f540:	9201      	str	r2, [sp, #4]
 800f542:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f544:	2800      	cmp	r0, #0
 800f546:	d006      	beq.n	800f556 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f548:	2900      	cmp	r1, #0
 800f54a:	d106      	bne.n	800f55a <xQueueGenericSend+0x22>
 800f54c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d003      	beq.n	800f55a <xQueueGenericSend+0x22>
 800f552:	b672      	cpsid	i
 800f554:	e7fe      	b.n	800f554 <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 800f556:	b672      	cpsid	i
 800f558:	e7fe      	b.n	800f558 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f55a:	2d02      	cmp	r5, #2
 800f55c:	d104      	bne.n	800f568 <xQueueGenericSend+0x30>
 800f55e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f560:	2b01      	cmp	r3, #1
 800f562:	d001      	beq.n	800f568 <xQueueGenericSend+0x30>
 800f564:	b672      	cpsid	i
 800f566:	e7fe      	b.n	800f566 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f568:	f000 ff5c 	bl	8010424 <xTaskGetSchedulerState>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	d104      	bne.n	800f57a <xQueueGenericSend+0x42>
 800f570:	9b01      	ldr	r3, [sp, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d003      	beq.n	800f57e <xQueueGenericSend+0x46>
 800f576:	b672      	cpsid	i
 800f578:	e7fe      	b.n	800f578 <xQueueGenericSend+0x40>
 800f57a:	2600      	movs	r6, #0
 800f57c:	e02f      	b.n	800f5de <xQueueGenericSend+0xa6>
 800f57e:	2600      	movs	r6, #0
 800f580:	e02d      	b.n	800f5de <xQueueGenericSend+0xa6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f582:	002a      	movs	r2, r5
 800f584:	0039      	movs	r1, r7
 800f586:	0020      	movs	r0, r4
 800f588:	f7ff fed6 	bl	800f338 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d104      	bne.n	800f59c <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 800f592:	2800      	cmp	r0, #0
 800f594:	d00a      	beq.n	800f5ac <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800f596:	f001 fb81 	bl	8010c9c <vPortYield>
 800f59a:	e007      	b.n	800f5ac <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f59c:	0020      	movs	r0, r4
 800f59e:	3024      	adds	r0, #36	; 0x24
 800f5a0:	f000 feb4 	bl	801030c <xTaskRemoveFromEventList>
 800f5a4:	2801      	cmp	r0, #1
 800f5a6:	d101      	bne.n	800f5ac <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 800f5a8:	f001 fb78 	bl	8010c9c <vPortYield>
				taskEXIT_CRITICAL();
 800f5ac:	f001 fb8e 	bl	8010ccc <vPortExitCritical>
				return pdPASS;
 800f5b0:	2001      	movs	r0, #1
}
 800f5b2:	b005      	add	sp, #20
 800f5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800f5b6:	f001 fb89 	bl	8010ccc <vPortExitCritical>
					return errQUEUE_FULL;
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	e7f9      	b.n	800f5b2 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 800f5be:	a802      	add	r0, sp, #8
 800f5c0:	f000 fee6 	bl	8010390 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f5c4:	3601      	adds	r6, #1
 800f5c6:	e017      	b.n	800f5f8 <xQueueGenericSend+0xc0>
		prvLockQueue( pxQueue );
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6463      	str	r3, [r4, #68]	; 0x44
 800f5cc:	e01d      	b.n	800f60a <xQueueGenericSend+0xd2>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5d2:	e01d      	b.n	800f610 <xQueueGenericSend+0xd8>
				prvUnlockQueue( pxQueue );
 800f5d4:	0020      	movs	r0, r4
 800f5d6:	f7ff ff05 	bl	800f3e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5da:	f000 fcc3 	bl	800ff64 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800f5de:	f001 fb69 	bl	8010cb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d3cb      	bcc.n	800f582 <xQueueGenericSend+0x4a>
 800f5ea:	2d02      	cmp	r5, #2
 800f5ec:	d0c9      	beq.n	800f582 <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5ee:	9b01      	ldr	r3, [sp, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d0e0      	beq.n	800f5b6 <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 800f5f4:	2e00      	cmp	r6, #0
 800f5f6:	d0e2      	beq.n	800f5be <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 800f5f8:	f001 fb68 	bl	8010ccc <vPortExitCritical>
		vTaskSuspendAll();
 800f5fc:	f000 fc14 	bl	800fe28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f600:	f001 fb58 	bl	8010cb4 <vPortEnterCritical>
 800f604:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f606:	3301      	adds	r3, #1
 800f608:	d0de      	beq.n	800f5c8 <xQueueGenericSend+0x90>
 800f60a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f60c:	3301      	adds	r3, #1
 800f60e:	d0de      	beq.n	800f5ce <xQueueGenericSend+0x96>
 800f610:	f001 fb5c 	bl	8010ccc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f614:	a901      	add	r1, sp, #4
 800f616:	a802      	add	r0, sp, #8
 800f618:	f000 feca 	bl	80103b0 <xTaskCheckForTimeOut>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d113      	bne.n	800f648 <xQueueGenericSend+0x110>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f620:	0020      	movs	r0, r4
 800f622:	f7ff fe6c 	bl	800f2fe <prvIsQueueFull>
 800f626:	2800      	cmp	r0, #0
 800f628:	d0d4      	beq.n	800f5d4 <xQueueGenericSend+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f62a:	0020      	movs	r0, r4
 800f62c:	3010      	adds	r0, #16
 800f62e:	9901      	ldr	r1, [sp, #4]
 800f630:	f000 fe2e 	bl	8010290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f634:	0020      	movs	r0, r4
 800f636:	f7ff fed5 	bl	800f3e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f63a:	f000 fc93 	bl	800ff64 <xTaskResumeAll>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d1cd      	bne.n	800f5de <xQueueGenericSend+0xa6>
					portYIELD_WITHIN_API();
 800f642:	f001 fb2b 	bl	8010c9c <vPortYield>
 800f646:	e7ca      	b.n	800f5de <xQueueGenericSend+0xa6>
			prvUnlockQueue( pxQueue );
 800f648:	0020      	movs	r0, r4
 800f64a:	f7ff fecb 	bl	800f3e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f64e:	f000 fc89 	bl	800ff64 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f652:	2000      	movs	r0, #0
 800f654:	e7ad      	b.n	800f5b2 <xQueueGenericSend+0x7a>

0800f656 <xQueueGenericSendFromISR>:
{
 800f656:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f658:	b083      	sub	sp, #12
 800f65a:	0004      	movs	r4, r0
 800f65c:	000f      	movs	r7, r1
 800f65e:	0015      	movs	r5, r2
 800f660:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800f662:	2800      	cmp	r0, #0
 800f664:	d006      	beq.n	800f674 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f666:	2900      	cmp	r1, #0
 800f668:	d106      	bne.n	800f678 <xQueueGenericSendFromISR+0x22>
 800f66a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d003      	beq.n	800f678 <xQueueGenericSendFromISR+0x22>
 800f670:	b672      	cpsid	i
 800f672:	e7fe      	b.n	800f672 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f674:	b672      	cpsid	i
 800f676:	e7fe      	b.n	800f676 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f678:	2e02      	cmp	r6, #2
 800f67a:	d104      	bne.n	800f686 <xQueueGenericSendFromISR+0x30>
 800f67c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d001      	beq.n	800f686 <xQueueGenericSendFromISR+0x30>
 800f682:	b672      	cpsid	i
 800f684:	e7fe      	b.n	800f684 <xQueueGenericSendFromISR+0x2e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f686:	f001 fb31 	bl	8010cec <ulSetInterruptMaskFromISR>
 800f68a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f68c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f68e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f690:	4293      	cmp	r3, r2
 800f692:	d303      	bcc.n	800f69c <xQueueGenericSendFromISR+0x46>
 800f694:	2e02      	cmp	r6, #2
 800f696:	d001      	beq.n	800f69c <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 800f698:	2400      	movs	r4, #0
 800f69a:	e00b      	b.n	800f6b4 <xQueueGenericSendFromISR+0x5e>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f69c:	0032      	movs	r2, r6
 800f69e:	0039      	movs	r1, r7
 800f6a0:	0020      	movs	r0, r4
 800f6a2:	f7ff fe49 	bl	800f338 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f6a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	d009      	beq.n	800f6c0 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
 800f6ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f6b2:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f6b4:	9801      	ldr	r0, [sp, #4]
 800f6b6:	f001 fb1e 	bl	8010cf6 <vClearInterruptMaskFromISR>
}
 800f6ba:	0020      	movs	r0, r4
 800f6bc:	b003      	add	sp, #12
 800f6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <xQueueGenericSendFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6c6:	0020      	movs	r0, r4
 800f6c8:	3024      	adds	r0, #36	; 0x24
 800f6ca:	f000 fe1f 	bl	801030c <xTaskRemoveFromEventList>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d006      	beq.n	800f6e0 <xQueueGenericSendFromISR+0x8a>
							if( pxHigherPriorityTaskWoken != NULL )
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	d006      	beq.n	800f6e4 <xQueueGenericSendFromISR+0x8e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f6d6:	2401      	movs	r4, #1
 800f6d8:	602c      	str	r4, [r5, #0]
 800f6da:	e7eb      	b.n	800f6b4 <xQueueGenericSendFromISR+0x5e>
			xReturn = pdPASS;
 800f6dc:	2401      	movs	r4, #1
 800f6de:	e7e9      	b.n	800f6b4 <xQueueGenericSendFromISR+0x5e>
 800f6e0:	2401      	movs	r4, #1
 800f6e2:	e7e7      	b.n	800f6b4 <xQueueGenericSendFromISR+0x5e>
 800f6e4:	2401      	movs	r4, #1
 800f6e6:	e7e5      	b.n	800f6b4 <xQueueGenericSendFromISR+0x5e>

0800f6e8 <xQueueGiveFromISR>:
{
 800f6e8:	b570      	push	{r4, r5, r6, lr}
 800f6ea:	0004      	movs	r4, r0
 800f6ec:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d004      	beq.n	800f6fc <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f6f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <xQueueGiveFromISR+0x18>
 800f6f8:	b672      	cpsid	i
 800f6fa:	e7fe      	b.n	800f6fa <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f6fc:	b672      	cpsid	i
 800f6fe:	e7fe      	b.n	800f6fe <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f700:	6803      	ldr	r3, [r0, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d01e      	beq.n	800f744 <xQueueGiveFromISR+0x5c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f706:	f001 faf1 	bl	8010cec <ulSetInterruptMaskFromISR>
 800f70a:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f70c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f70e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f710:	4293      	cmp	r3, r2
 800f712:	d221      	bcs.n	800f758 <xQueueGiveFromISR+0x70>
			++( pxQueue->uxMessagesWaiting );
 800f714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f716:	3301      	adds	r3, #1
 800f718:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f71a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f71c:	3301      	adds	r3, #1
 800f71e:	d116      	bne.n	800f74e <xQueueGiveFromISR+0x66>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f722:	2b00      	cmp	r3, #0
 800f724:	d01a      	beq.n	800f75c <xQueueGiveFromISR+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f726:	0020      	movs	r0, r4
 800f728:	3024      	adds	r0, #36	; 0x24
 800f72a:	f000 fdef 	bl	801030c <xTaskRemoveFromEventList>
 800f72e:	2800      	cmp	r0, #0
 800f730:	d016      	beq.n	800f760 <xQueueGiveFromISR+0x78>
							if( pxHigherPriorityTaskWoken != NULL )
 800f732:	2e00      	cmp	r6, #0
 800f734:	d016      	beq.n	800f764 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f736:	2401      	movs	r4, #1
 800f738:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f73a:	0028      	movs	r0, r5
 800f73c:	f001 fadb 	bl	8010cf6 <vClearInterruptMaskFromISR>
}
 800f740:	0020      	movs	r0, r4
 800f742:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f744:	6843      	ldr	r3, [r0, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d0dd      	beq.n	800f706 <xQueueGiveFromISR+0x1e>
 800f74a:	b672      	cpsid	i
 800f74c:	e7fe      	b.n	800f74c <xQueueGiveFromISR+0x64>
				++( pxQueue->xTxLock );
 800f74e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f750:	3301      	adds	r3, #1
 800f752:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f754:	2401      	movs	r4, #1
 800f756:	e7f0      	b.n	800f73a <xQueueGiveFromISR+0x52>
			xReturn = errQUEUE_FULL;
 800f758:	2400      	movs	r4, #0
 800f75a:	e7ee      	b.n	800f73a <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 800f75c:	2401      	movs	r4, #1
 800f75e:	e7ec      	b.n	800f73a <xQueueGiveFromISR+0x52>
 800f760:	2401      	movs	r4, #1
 800f762:	e7ea      	b.n	800f73a <xQueueGiveFromISR+0x52>
 800f764:	2401      	movs	r4, #1
 800f766:	e7e8      	b.n	800f73a <xQueueGiveFromISR+0x52>

0800f768 <xQueueGenericReceive>:
{
 800f768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f76a:	b085      	sub	sp, #20
 800f76c:	0004      	movs	r4, r0
 800f76e:	000e      	movs	r6, r1
 800f770:	9201      	str	r2, [sp, #4]
 800f772:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f774:	2800      	cmp	r0, #0
 800f776:	d006      	beq.n	800f786 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f778:	2900      	cmp	r1, #0
 800f77a:	d106      	bne.n	800f78a <xQueueGenericReceive+0x22>
 800f77c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d003      	beq.n	800f78a <xQueueGenericReceive+0x22>
 800f782:	b672      	cpsid	i
 800f784:	e7fe      	b.n	800f784 <xQueueGenericReceive+0x1c>
	configASSERT( pxQueue );
 800f786:	b672      	cpsid	i
 800f788:	e7fe      	b.n	800f788 <xQueueGenericReceive+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f78a:	f000 fe4b 	bl	8010424 <xTaskGetSchedulerState>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d104      	bne.n	800f79c <xQueueGenericReceive+0x34>
 800f792:	9b01      	ldr	r3, [sp, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d003      	beq.n	800f7a0 <xQueueGenericReceive+0x38>
 800f798:	b672      	cpsid	i
 800f79a:	e7fe      	b.n	800f79a <xQueueGenericReceive+0x32>
 800f79c:	2500      	movs	r5, #0
 800f79e:	e04a      	b.n	800f836 <xQueueGenericReceive+0xce>
 800f7a0:	2500      	movs	r5, #0
 800f7a2:	e048      	b.n	800f836 <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f7a4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7a6:	0031      	movs	r1, r6
 800f7a8:	0020      	movs	r0, r4
 800f7aa:	f7ff fe09 	bl	800f3c0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f7ae:	2f00      	cmp	r7, #0
 800f7b0:	d118      	bne.n	800f7e4 <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 800f7b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d102      	bne.n	800f7c4 <xQueueGenericReceive+0x5c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f7be:	f000 ff6b 	bl	8010698 <pvTaskIncrementMutexHeldCount>
 800f7c2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d007      	beq.n	800f7da <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f7ca:	0020      	movs	r0, r4
 800f7cc:	3010      	adds	r0, #16
 800f7ce:	f000 fd9d 	bl	801030c <xTaskRemoveFromEventList>
 800f7d2:	2801      	cmp	r0, #1
 800f7d4:	d101      	bne.n	800f7da <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 800f7d6:	f001 fa61 	bl	8010c9c <vPortYield>
				taskEXIT_CRITICAL();
 800f7da:	f001 fa77 	bl	8010ccc <vPortExitCritical>
				return pdPASS;
 800f7de:	2001      	movs	r0, #1
}
 800f7e0:	b005      	add	sp, #20
 800f7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f7e4:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d0f6      	beq.n	800f7da <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7ec:	0020      	movs	r0, r4
 800f7ee:	3024      	adds	r0, #36	; 0x24
 800f7f0:	f000 fd8c 	bl	801030c <xTaskRemoveFromEventList>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d0f0      	beq.n	800f7da <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 800f7f8:	f001 fa50 	bl	8010c9c <vPortYield>
 800f7fc:	e7ed      	b.n	800f7da <xQueueGenericReceive+0x72>
					taskEXIT_CRITICAL();
 800f7fe:	f001 fa65 	bl	8010ccc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f802:	2000      	movs	r0, #0
 800f804:	e7ec      	b.n	800f7e0 <xQueueGenericReceive+0x78>
					vTaskSetTimeOutState( &xTimeOut );
 800f806:	a802      	add	r0, sp, #8
 800f808:	f000 fdc2 	bl	8010390 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f80c:	3501      	adds	r5, #1
 800f80e:	e01c      	b.n	800f84a <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 800f810:	2300      	movs	r3, #0
 800f812:	6463      	str	r3, [r4, #68]	; 0x44
 800f814:	e022      	b.n	800f85c <xQueueGenericReceive+0xf4>
 800f816:	2300      	movs	r3, #0
 800f818:	64a3      	str	r3, [r4, #72]	; 0x48
 800f81a:	e022      	b.n	800f862 <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 800f81c:	f001 fa4a 	bl	8010cb4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f820:	6860      	ldr	r0, [r4, #4]
 800f822:	f000 fe11 	bl	8010448 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f826:	f001 fa51 	bl	8010ccc <vPortExitCritical>
 800f82a:	e02a      	b.n	800f882 <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 800f82c:	0020      	movs	r0, r4
 800f82e:	f7ff fdd9 	bl	800f3e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f832:	f000 fb97 	bl	800ff64 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800f836:	f001 fa3d 	bl	8010cb4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1b1      	bne.n	800f7a4 <xQueueGenericReceive+0x3c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f840:	9b01      	ldr	r3, [sp, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d0db      	beq.n	800f7fe <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 800f846:	2d00      	cmp	r5, #0
 800f848:	d0dd      	beq.n	800f806 <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 800f84a:	f001 fa3f 	bl	8010ccc <vPortExitCritical>
		vTaskSuspendAll();
 800f84e:	f000 faeb 	bl	800fe28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f852:	f001 fa2f 	bl	8010cb4 <vPortEnterCritical>
 800f856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f858:	3301      	adds	r3, #1
 800f85a:	d0d9      	beq.n	800f810 <xQueueGenericReceive+0xa8>
 800f85c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f85e:	3301      	adds	r3, #1
 800f860:	d0d9      	beq.n	800f816 <xQueueGenericReceive+0xae>
 800f862:	f001 fa33 	bl	8010ccc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f866:	a901      	add	r1, sp, #4
 800f868:	a802      	add	r0, sp, #8
 800f86a:	f000 fda1 	bl	80103b0 <xTaskCheckForTimeOut>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d116      	bne.n	800f8a0 <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f872:	0020      	movs	r0, r4
 800f874:	f7ff fd52 	bl	800f31c <prvIsQueueEmpty>
 800f878:	2800      	cmp	r0, #0
 800f87a:	d0d7      	beq.n	800f82c <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f87c:	6823      	ldr	r3, [r4, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0cc      	beq.n	800f81c <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f882:	0020      	movs	r0, r4
 800f884:	3024      	adds	r0, #36	; 0x24
 800f886:	9901      	ldr	r1, [sp, #4]
 800f888:	f000 fd02 	bl	8010290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f88c:	0020      	movs	r0, r4
 800f88e:	f7ff fda9 	bl	800f3e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f892:	f000 fb67 	bl	800ff64 <xTaskResumeAll>
 800f896:	2800      	cmp	r0, #0
 800f898:	d1cd      	bne.n	800f836 <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 800f89a:	f001 f9ff 	bl	8010c9c <vPortYield>
 800f89e:	e7ca      	b.n	800f836 <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 800f8a0:	0020      	movs	r0, r4
 800f8a2:	f7ff fd9f 	bl	800f3e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8a6:	f000 fb5d 	bl	800ff64 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	e798      	b.n	800f7e0 <xQueueGenericReceive+0x78>

0800f8ae <xQueueReceiveFromISR>:
{
 800f8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b0:	0004      	movs	r4, r0
 800f8b2:	000f      	movs	r7, r1
 800f8b4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d006      	beq.n	800f8c8 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ba:	2900      	cmp	r1, #0
 800f8bc:	d106      	bne.n	800f8cc <xQueueReceiveFromISR+0x1e>
 800f8be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <xQueueReceiveFromISR+0x1e>
 800f8c4:	b672      	cpsid	i
 800f8c6:	e7fe      	b.n	800f8c6 <xQueueReceiveFromISR+0x18>
	configASSERT( pxQueue );
 800f8c8:	b672      	cpsid	i
 800f8ca:	e7fe      	b.n	800f8ca <xQueueReceiveFromISR+0x1c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8cc:	f001 fa0e 	bl	8010cec <ulSetInterruptMaskFromISR>
 800f8d0:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d01c      	beq.n	800f912 <xQueueReceiveFromISR+0x64>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8d8:	0039      	movs	r1, r7
 800f8da:	0020      	movs	r0, r4
 800f8dc:	f7ff fd70 	bl	800f3c0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f8e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f8e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	d004      	beq.n	800f8f6 <xQueueReceiveFromISR+0x48>
				++( pxQueue->xRxLock );
 800f8ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f8f2:	2401      	movs	r4, #1
 800f8f4:	e00e      	b.n	800f914 <xQueueReceiveFromISR+0x66>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8f6:	6923      	ldr	r3, [r4, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d010      	beq.n	800f91e <xQueueReceiveFromISR+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8fc:	0020      	movs	r0, r4
 800f8fe:	3010      	adds	r0, #16
 800f900:	f000 fd04 	bl	801030c <xTaskRemoveFromEventList>
 800f904:	2800      	cmp	r0, #0
 800f906:	d00c      	beq.n	800f922 <xQueueReceiveFromISR+0x74>
						if( pxHigherPriorityTaskWoken != NULL )
 800f908:	2e00      	cmp	r6, #0
 800f90a:	d00c      	beq.n	800f926 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f90c:	2401      	movs	r4, #1
 800f90e:	6034      	str	r4, [r6, #0]
 800f910:	e000      	b.n	800f914 <xQueueReceiveFromISR+0x66>
			xReturn = pdFAIL;
 800f912:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f914:	0028      	movs	r0, r5
 800f916:	f001 f9ee 	bl	8010cf6 <vClearInterruptMaskFromISR>
}
 800f91a:	0020      	movs	r0, r4
 800f91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f91e:	2401      	movs	r4, #1
 800f920:	e7f8      	b.n	800f914 <xQueueReceiveFromISR+0x66>
 800f922:	2401      	movs	r4, #1
 800f924:	e7f6      	b.n	800f914 <xQueueReceiveFromISR+0x66>
 800f926:	2401      	movs	r4, #1
 800f928:	e7f4      	b.n	800f914 <xQueueReceiveFromISR+0x66>
	...

0800f92c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f92c:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f92e:	2300      	movs	r3, #0
 800f930:	2b07      	cmp	r3, #7
 800f932:	d80a      	bhi.n	800f94a <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f934:	00da      	lsls	r2, r3, #3
 800f936:	4c05      	ldr	r4, [pc, #20]	; (800f94c <vQueueAddToRegistry+0x20>)
 800f938:	5912      	ldr	r2, [r2, r4]
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	d001      	beq.n	800f942 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f93e:	3301      	adds	r3, #1
 800f940:	e7f6      	b.n	800f930 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f946:	18e3      	adds	r3, r4, r3
 800f948:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f94a:	bd10      	pop	{r4, pc}
 800f94c:	20006e0c 	.word	0x20006e0c

0800f950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f950:	b570      	push	{r4, r5, r6, lr}
 800f952:	0004      	movs	r4, r0
 800f954:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f956:	f001 f9ad 	bl	8010cb4 <vPortEnterCritical>
 800f95a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f95c:	3301      	adds	r3, #1
 800f95e:	d00b      	beq.n	800f978 <vQueueWaitForMessageRestricted+0x28>
 800f960:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f962:	3301      	adds	r3, #1
 800f964:	d00b      	beq.n	800f97e <vQueueWaitForMessageRestricted+0x2e>
 800f966:	f001 f9b1 	bl	8010ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f96a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d009      	beq.n	800f984 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f970:	0020      	movs	r0, r4
 800f972:	f7ff fd37 	bl	800f3e4 <prvUnlockQueue>
	}
 800f976:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f978:	2300      	movs	r3, #0
 800f97a:	6463      	str	r3, [r4, #68]	; 0x44
 800f97c:	e7f0      	b.n	800f960 <vQueueWaitForMessageRestricted+0x10>
 800f97e:	2300      	movs	r3, #0
 800f980:	64a3      	str	r3, [r4, #72]	; 0x48
 800f982:	e7f0      	b.n	800f966 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f984:	0020      	movs	r0, r4
 800f986:	3024      	adds	r0, #36	; 0x24
 800f988:	0029      	movs	r1, r5
 800f98a:	f000 fca5 	bl	80102d8 <vTaskPlaceOnEventListRestricted>
 800f98e:	e7ef      	b.n	800f970 <vQueueWaitForMessageRestricted+0x20>

0800f990 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800f990:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f992:	e001      	b.n	800f998 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f994:	3001      	adds	r0, #1
			ulCount++;
 800f996:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f998:	7802      	ldrb	r2, [r0, #0]
 800f99a:	2aa5      	cmp	r2, #165	; 0xa5
 800f99c:	d0fa      	beq.n	800f994 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f99e:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f9a0:	b298      	uxth	r0, r3
	}
 800f9a2:	4770      	bx	lr

0800f9a4 <prvListTaskWithinSingleList>:
	{
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	46de      	mov	lr, fp
 800f9a8:	4657      	mov	r7, sl
 800f9aa:	464e      	mov	r6, r9
 800f9ac:	4645      	mov	r5, r8
 800f9ae:	b5e0      	push	{r5, r6, r7, lr}
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	000e      	movs	r6, r1
 800f9b4:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f9b6:	680f      	ldr	r7, [r1, #0]
 800f9b8:	2f00      	cmp	r7, #0
 800f9ba:	d039      	beq.n	800fa30 <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f9bc:	684b      	ldr	r3, [r1, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	604b      	str	r3, [r1, #4]
 800f9c2:	2208      	movs	r2, #8
 800f9c4:	4691      	mov	r9, r2
 800f9c6:	4489      	add	r9, r1
 800f9c8:	454b      	cmp	r3, r9
 800f9ca:	d004      	beq.n	800f9d6 <prvListTaskWithinSingleList+0x32>
 800f9cc:	6873      	ldr	r3, [r6, #4]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800f9d2:	2700      	movs	r7, #0
 800f9d4:	e010      	b.n	800f9f8 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	604b      	str	r3, [r1, #4]
 800f9da:	e7f7      	b.n	800f9cc <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	6073      	str	r3, [r6, #4]
 800f9e0:	e00f      	b.n	800fa02 <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f9e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f9e4:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f9e6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f9e8:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f9ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f9ec:	f7ff ffd0 	bl	800f990 <prvTaskCheckFreeStackSpace>
 800f9f0:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800f9f2:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800f9f4:	45ab      	cmp	fp, r5
 800f9f6:	d01b      	beq.n	800fa30 <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f9f8:	6873      	ldr	r3, [r6, #4]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	6073      	str	r3, [r6, #4]
 800f9fe:	4599      	cmp	r9, r3
 800fa00:	d0ec      	beq.n	800f9dc <prvListTaskWithinSingleList+0x38>
 800fa02:	6873      	ldr	r3, [r6, #4]
 800fa04:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800fa06:	017c      	lsls	r4, r7, #5
 800fa08:	4454      	add	r4, sl
 800fa0a:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800fa0c:	002b      	movs	r3, r5
 800fa0e:	3334      	adds	r3, #52	; 0x34
 800fa10:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800fa12:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fa14:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800fa16:	4643      	mov	r3, r8
 800fa18:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800fa1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fa1c:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800fa1e:	4643      	mov	r3, r8
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d1de      	bne.n	800f9e2 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800fa24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d0db      	beq.n	800f9e2 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800fa2a:	2302      	movs	r3, #2
 800fa2c:	7323      	strb	r3, [r4, #12]
 800fa2e:	e7d8      	b.n	800f9e2 <prvListTaskWithinSingleList+0x3e>
	}
 800fa30:	0038      	movs	r0, r7
 800fa32:	bc3c      	pop	{r2, r3, r4, r5}
 800fa34:	4690      	mov	r8, r2
 800fa36:	4699      	mov	r9, r3
 800fa38:	46a2      	mov	sl, r4
 800fa3a:	46ab      	mov	fp, r5
 800fa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa40 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa40:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <prvResetNextTaskUnblockTime+0x24>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d007      	beq.n	800fa5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fa4a:	4b06      	ldr	r3, [pc, #24]	; (800fa64 <prvResetNextTaskUnblockTime+0x24>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800fa52:	685a      	ldr	r2, [r3, #4]
 800fa54:	4b04      	ldr	r3, [pc, #16]	; (800fa68 <prvResetNextTaskUnblockTime+0x28>)
 800fa56:	601a      	str	r2, [r3, #0]
	}
}
 800fa58:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa5a:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <prvResetNextTaskUnblockTime+0x28>)
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	4252      	negs	r2, r2
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	e7f9      	b.n	800fa58 <prvResetNextTaskUnblockTime+0x18>
 800fa64:	20001d70 	.word	0x20001d70
 800fa68:	20000120 	.word	0x20000120

0800fa6c <prvDeleteTCB>:
	{
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800fa70:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fa72:	f001 fa4b 	bl	8010f0c <vPortFree>
		vPortFree( pxTCB );
 800fa76:	0020      	movs	r0, r4
 800fa78:	f001 fa48 	bl	8010f0c <vPortFree>
	}
 800fa7c:	bd10      	pop	{r4, pc}

0800fa7e <prvAllocateTCBAndStack>:
{
 800fa7e:	b570      	push	{r4, r5, r6, lr}
 800fa80:	0006      	movs	r6, r0
 800fa82:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa84:	d103      	bne.n	800fa8e <prvAllocateTCBAndStack+0x10>
 800fa86:	0080      	lsls	r0, r0, #2
 800fa88:	f001 f9c8 	bl	8010e1c <pvPortMalloc>
 800fa8c:	0005      	movs	r5, r0
		if( pxStack != NULL )
 800fa8e:	2d00      	cmp	r5, #0
 800fa90:	d012      	beq.n	800fab8 <prvAllocateTCBAndStack+0x3a>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800fa92:	2060      	movs	r0, #96	; 0x60
 800fa94:	f001 f9c2 	bl	8010e1c <pvPortMalloc>
 800fa98:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800fa9a:	d009      	beq.n	800fab0 <prvAllocateTCBAndStack+0x32>
				pxNewTCB->pxStack = pxStack;
 800fa9c:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800fa9e:	2c00      	cmp	r4, #0
 800faa0:	d004      	beq.n	800faac <prvAllocateTCBAndStack+0x2e>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800faa2:	00b2      	lsls	r2, r6, #2
 800faa4:	21a5      	movs	r1, #165	; 0xa5
 800faa6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800faa8:	f004 fab0 	bl	801400c <memset>
}
 800faac:	0020      	movs	r0, r4
 800faae:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 800fab0:	0028      	movs	r0, r5
 800fab2:	f001 fa2b 	bl	8010f0c <vPortFree>
 800fab6:	e7f2      	b.n	800fa9e <prvAllocateTCBAndStack+0x20>
			pxNewTCB = NULL;
 800fab8:	2400      	movs	r4, #0
	return pxNewTCB;
 800faba:	e7f7      	b.n	800faac <prvAllocateTCBAndStack+0x2e>

0800fabc <prvInitialiseTCBVariables>:
{
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	0004      	movs	r4, r0
 800fac0:	0015      	movs	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fac2:	2300      	movs	r3, #0
 800fac4:	2b0c      	cmp	r3, #12
 800fac6:	d91a      	bls.n	800fafe <prvInitialiseTCBVariables+0x42>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fac8:	2340      	movs	r3, #64	; 0x40
 800faca:	2200      	movs	r2, #0
 800facc:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800face:	2d06      	cmp	r5, #6
 800fad0:	d900      	bls.n	800fad4 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fad2:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800fad4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800fad6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800fad8:	2600      	movs	r6, #0
 800fada:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800fadc:	1d20      	adds	r0, r4, #4
 800fade:	f7ff fbd4 	bl	800f28a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800fae2:	0020      	movs	r0, r4
 800fae4:	3018      	adds	r0, #24
 800fae6:	f7ff fbd0 	bl	800f28a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800faea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800faec:	2307      	movs	r3, #7
 800faee:	1b5d      	subs	r5, r3, r5
 800faf0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800faf2:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800faf4:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800faf6:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800faf8:	3355      	adds	r3, #85	; 0x55
 800fafa:	54e6      	strb	r6, [r4, r3]
}
 800fafc:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800fafe:	18c8      	adds	r0, r1, r3
 800fb00:	7806      	ldrb	r6, [r0, #0]
 800fb02:	18e2      	adds	r2, r4, r3
 800fb04:	3234      	adds	r2, #52	; 0x34
 800fb06:	7016      	strb	r6, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800fb08:	7802      	ldrb	r2, [r0, #0]
 800fb0a:	2a00      	cmp	r2, #0
 800fb0c:	d0dc      	beq.n	800fac8 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb0e:	3301      	adds	r3, #1
 800fb10:	e7d8      	b.n	800fac4 <prvInitialiseTCBVariables+0x8>
	...

0800fb14 <prvInitialiseTaskLists>:
{
 800fb14:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb16:	2400      	movs	r4, #0
 800fb18:	2c06      	cmp	r4, #6
 800fb1a:	d915      	bls.n	800fb48 <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 800fb1c:	4d0e      	ldr	r5, [pc, #56]	; (800fb58 <prvInitialiseTaskLists+0x44>)
 800fb1e:	0028      	movs	r0, r5
 800fb20:	f7ff fba8 	bl	800f274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb24:	4c0d      	ldr	r4, [pc, #52]	; (800fb5c <prvInitialiseTaskLists+0x48>)
 800fb26:	0020      	movs	r0, r4
 800fb28:	f7ff fba4 	bl	800f274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb2c:	480c      	ldr	r0, [pc, #48]	; (800fb60 <prvInitialiseTaskLists+0x4c>)
 800fb2e:	f7ff fba1 	bl	800f274 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800fb32:	480c      	ldr	r0, [pc, #48]	; (800fb64 <prvInitialiseTaskLists+0x50>)
 800fb34:	f7ff fb9e 	bl	800f274 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800fb38:	480b      	ldr	r0, [pc, #44]	; (800fb68 <prvInitialiseTaskLists+0x54>)
 800fb3a:	f7ff fb9b 	bl	800f274 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb3e:	4b0b      	ldr	r3, [pc, #44]	; (800fb6c <prvInitialiseTaskLists+0x58>)
 800fb40:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb42:	4b0b      	ldr	r3, [pc, #44]	; (800fb70 <prvInitialiseTaskLists+0x5c>)
 800fb44:	601c      	str	r4, [r3, #0]
}
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb48:	2014      	movs	r0, #20
 800fb4a:	4360      	muls	r0, r4
 800fb4c:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <prvInitialiseTaskLists+0x60>)
 800fb4e:	18c0      	adds	r0, r0, r3
 800fb50:	f7ff fb90 	bl	800f274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb54:	3401      	adds	r4, #1
 800fb56:	e7df      	b.n	800fb18 <prvInitialiseTaskLists+0x4>
 800fb58:	20001e20 	.word	0x20001e20
 800fb5c:	20001e34 	.word	0x20001e34
 800fb60:	20001e4c 	.word	0x20001e4c
 800fb64:	20001e78 	.word	0x20001e78
 800fb68:	20001e64 	.word	0x20001e64
 800fb6c:	20001d70 	.word	0x20001d70
 800fb70:	20001d74 	.word	0x20001d74
 800fb74:	20001d78 	.word	0x20001d78

0800fb78 <prvAddCurrentTaskToDelayedList>:
{
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <prvAddCurrentTaskToDelayedList+0x40>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800fb82:	4b0e      	ldr	r3, [pc, #56]	; (800fbbc <prvAddCurrentTaskToDelayedList+0x44>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4283      	cmp	r3, r0
 800fb88:	d80d      	bhi.n	800fba6 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fb8a:	4b0d      	ldr	r3, [pc, #52]	; (800fbc0 <prvAddCurrentTaskToDelayedList+0x48>)
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	4b0a      	ldr	r3, [pc, #40]	; (800fbb8 <prvAddCurrentTaskToDelayedList+0x40>)
 800fb90:	6819      	ldr	r1, [r3, #0]
 800fb92:	3104      	adds	r1, #4
 800fb94:	f7ff fb88 	bl	800f2a8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800fb98:	4b0a      	ldr	r3, [pc, #40]	; (800fbc4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	42a3      	cmp	r3, r4
 800fb9e:	d909      	bls.n	800fbb4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800fba0:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800fba2:	601c      	str	r4, [r3, #0]
}
 800fba4:	e006      	b.n	800fbb4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fba6:	4b08      	ldr	r3, [pc, #32]	; (800fbc8 <prvAddCurrentTaskToDelayedList+0x50>)
 800fba8:	6818      	ldr	r0, [r3, #0]
 800fbaa:	4b03      	ldr	r3, [pc, #12]	; (800fbb8 <prvAddCurrentTaskToDelayedList+0x40>)
 800fbac:	6819      	ldr	r1, [r3, #0]
 800fbae:	3104      	adds	r1, #4
 800fbb0:	f7ff fb7a 	bl	800f2a8 <vListInsert>
}
 800fbb4:	bd10      	pop	{r4, pc}
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	20001d6c 	.word	0x20001d6c
 800fbbc:	20001e8c 	.word	0x20001e8c
 800fbc0:	20001d70 	.word	0x20001d70
 800fbc4:	20000120 	.word	0x20000120
 800fbc8:	20001d74 	.word	0x20001d74

0800fbcc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800fbcc:	b510      	push	{r4, lr}
 800fbce:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800fbd0:	f004 fc52 	bl	8014478 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fbd4:	0020      	movs	r0, r4
 800fbd6:	f7f0 fa9f 	bl	8000118 <strlen>
 800fbda:	e002      	b.n	800fbe2 <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 800fbdc:	2320      	movs	r3, #32
 800fbde:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	280b      	cmp	r0, #11
 800fbe4:	ddfa      	ble.n	800fbdc <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800fbe6:	1820      	adds	r0, r4, r0
 800fbe8:	2300      	movs	r3, #0
 800fbea:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800fbec:	bd10      	pop	{r4, pc}
	...

0800fbf0 <xTaskGenericCreate>:
{
 800fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbf2:	46ce      	mov	lr, r9
 800fbf4:	b500      	push	{lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	0006      	movs	r6, r0
 800fbfa:	9102      	str	r1, [sp, #8]
 800fbfc:	0015      	movs	r5, r2
 800fbfe:	9303      	str	r3, [sp, #12]
 800fc00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d101      	bne.n	800fc0a <xTaskGenericCreate+0x1a>
 800fc06:	b672      	cpsid	i
 800fc08:	e7fe      	b.n	800fc08 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800fc0a:	2c06      	cmp	r4, #6
 800fc0c:	d901      	bls.n	800fc12 <xTaskGenericCreate+0x22>
 800fc0e:	b672      	cpsid	i
 800fc10:	e7fe      	b.n	800fc10 <xTaskGenericCreate+0x20>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800fc12:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc14:	0010      	movs	r0, r2
 800fc16:	f7ff ff32 	bl	800fa7e <prvAllocateTCBAndStack>
 800fc1a:	1e07      	subs	r7, r0, #0
	if( pxNewTCB != NULL )
 800fc1c:	d05a      	beq.n	800fcd4 <xTaskGenericCreate+0xe4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800fc1e:	4b31      	ldr	r3, [pc, #196]	; (800fce4 <xTaskGenericCreate+0xf4>)
 800fc20:	18eb      	adds	r3, r5, r3
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fc26:	4694      	mov	ip, r2
 800fc28:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fc2a:	2207      	movs	r2, #7
 800fc2c:	4393      	bics	r3, r2
 800fc2e:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800fc30:	9500      	str	r5, [sp, #0]
 800fc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc34:	0022      	movs	r2, r4
 800fc36:	9902      	ldr	r1, [sp, #8]
 800fc38:	f7ff ff40 	bl	800fabc <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc3c:	9a03      	ldr	r2, [sp, #12]
 800fc3e:	0031      	movs	r1, r6
 800fc40:	4648      	mov	r0, r9
 800fc42:	f000 ffff 	bl	8010c44 <pxPortInitialiseStack>
 800fc46:	6038      	str	r0, [r7, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800fc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d000      	beq.n	800fc50 <xTaskGenericCreate+0x60>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc4e:	601f      	str	r7, [r3, #0]
		taskENTER_CRITICAL();
 800fc50:	f001 f830 	bl	8010cb4 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800fc54:	4a24      	ldr	r2, [pc, #144]	; (800fce8 <xTaskGenericCreate+0xf8>)
 800fc56:	6813      	ldr	r3, [r2, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800fc5c:	4b23      	ldr	r3, [pc, #140]	; (800fcec <xTaskGenericCreate+0xfc>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d12b      	bne.n	800fcbc <xTaskGenericCreate+0xcc>
				pxCurrentTCB =  pxNewTCB;
 800fc64:	4b21      	ldr	r3, [pc, #132]	; (800fcec <xTaskGenericCreate+0xfc>)
 800fc66:	601f      	str	r7, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc68:	6813      	ldr	r3, [r2, #0]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d101      	bne.n	800fc72 <xTaskGenericCreate+0x82>
					prvInitialiseTaskLists();
 800fc6e:	f7ff ff51 	bl	800fb14 <prvInitialiseTaskLists>
			uxTaskNumber++;
 800fc72:	4a1f      	ldr	r2, [pc, #124]	; (800fcf0 <xTaskGenericCreate+0x100>)
 800fc74:	6813      	ldr	r3, [r2, #0]
 800fc76:	3301      	adds	r3, #1
 800fc78:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fc7a:	647b      	str	r3, [r7, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	4a1d      	ldr	r2, [pc, #116]	; (800fcf4 <xTaskGenericCreate+0x104>)
 800fc80:	6812      	ldr	r2, [r2, #0]
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d901      	bls.n	800fc8a <xTaskGenericCreate+0x9a>
 800fc86:	4a1b      	ldr	r2, [pc, #108]	; (800fcf4 <xTaskGenericCreate+0x104>)
 800fc88:	6013      	str	r3, [r2, #0]
 800fc8a:	1d39      	adds	r1, r7, #4
 800fc8c:	2014      	movs	r0, #20
 800fc8e:	4358      	muls	r0, r3
 800fc90:	4b19      	ldr	r3, [pc, #100]	; (800fcf8 <xTaskGenericCreate+0x108>)
 800fc92:	18c0      	adds	r0, r0, r3
 800fc94:	f7ff fafc 	bl	800f290 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800fc98:	f001 f818 	bl	8010ccc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800fc9c:	4b17      	ldr	r3, [pc, #92]	; (800fcfc <xTaskGenericCreate+0x10c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d01a      	beq.n	800fcda <xTaskGenericCreate+0xea>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800fca4:	4b11      	ldr	r3, [pc, #68]	; (800fcec <xTaskGenericCreate+0xfc>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcaa:	42a3      	cmp	r3, r4
 800fcac:	d217      	bcs.n	800fcde <xTaskGenericCreate+0xee>
				taskYIELD_IF_USING_PREEMPTION();
 800fcae:	f000 fff5 	bl	8010c9c <vPortYield>
			xReturn = pdPASS;
 800fcb2:	2001      	movs	r0, #1
}
 800fcb4:	b004      	add	sp, #16
 800fcb6:	bc04      	pop	{r2}
 800fcb8:	4691      	mov	r9, r2
 800fcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
 800fcbc:	4b0f      	ldr	r3, [pc, #60]	; (800fcfc <xTaskGenericCreate+0x10c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1d6      	bne.n	800fc72 <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800fcc4:	4b09      	ldr	r3, [pc, #36]	; (800fcec <xTaskGenericCreate+0xfc>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcca:	42a3      	cmp	r3, r4
 800fccc:	d8d1      	bhi.n	800fc72 <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 800fcce:	4b07      	ldr	r3, [pc, #28]	; (800fcec <xTaskGenericCreate+0xfc>)
 800fcd0:	601f      	str	r7, [r3, #0]
 800fcd2:	e7ce      	b.n	800fc72 <xTaskGenericCreate+0x82>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	4240      	negs	r0, r0
 800fcd8:	e7ec      	b.n	800fcb4 <xTaskGenericCreate+0xc4>
			xReturn = pdPASS;
 800fcda:	2001      	movs	r0, #1
 800fcdc:	e7ea      	b.n	800fcb4 <xTaskGenericCreate+0xc4>
 800fcde:	2001      	movs	r0, #1
	return xReturn;
 800fce0:	e7e8      	b.n	800fcb4 <xTaskGenericCreate+0xc4>
 800fce2:	46c0      	nop			; (mov r8, r8)
 800fce4:	3fffffff 	.word	0x3fffffff
 800fce8:	20001e08 	.word	0x20001e08
 800fcec:	20001d6c 	.word	0x20001d6c
 800fcf0:	20001e14 	.word	0x20001e14
 800fcf4:	20001e1c 	.word	0x20001e1c
 800fcf8:	20001d78 	.word	0x20001d78
 800fcfc:	20001e60 	.word	0x20001e60

0800fd00 <uxTaskPriorityGet>:
	{
 800fd00:	b510      	push	{r4, lr}
 800fd02:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800fd04:	f000 ffd6 	bl	8010cb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800fd08:	2c00      	cmp	r4, #0
 800fd0a:	d004      	beq.n	800fd16 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800fd0c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800fd0e:	f000 ffdd 	bl	8010ccc <vPortExitCritical>
	}
 800fd12:	0020      	movs	r0, r4
 800fd14:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800fd16:	4b01      	ldr	r3, [pc, #4]	; (800fd1c <uxTaskPriorityGet+0x1c>)
 800fd18:	681c      	ldr	r4, [r3, #0]
 800fd1a:	e7f7      	b.n	800fd0c <uxTaskPriorityGet+0xc>
 800fd1c:	20001d6c 	.word	0x20001d6c

0800fd20 <vTaskPrioritySet>:
	{
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	0004      	movs	r4, r0
 800fd24:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800fd26:	2906      	cmp	r1, #6
 800fd28:	d901      	bls.n	800fd2e <vTaskPrioritySet+0xe>
 800fd2a:	b672      	cpsid	i
 800fd2c:	e7fe      	b.n	800fd2c <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800fd2e:	f000 ffc1 	bl	8010cb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800fd32:	2c00      	cmp	r4, #0
 800fd34:	d101      	bne.n	800fd3a <vTaskPrioritySet+0x1a>
 800fd36:	4b23      	ldr	r3, [pc, #140]	; (800fdc4 <vTaskPrioritySet+0xa4>)
 800fd38:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800fd3a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800fd3c:	4295      	cmp	r5, r2
 800fd3e:	d032      	beq.n	800fda6 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800fd40:	d934      	bls.n	800fdac <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800fd42:	4b20      	ldr	r3, [pc, #128]	; (800fdc4 <vTaskPrioritySet+0xa4>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	42a3      	cmp	r3, r4
 800fd48:	d036      	beq.n	800fdb8 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800fd4a:	4b1e      	ldr	r3, [pc, #120]	; (800fdc4 <vTaskPrioritySet+0xa4>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd50:	42ab      	cmp	r3, r5
 800fd52:	d933      	bls.n	800fdbc <vTaskPrioritySet+0x9c>
	BaseType_t xYieldRequired = pdFALSE;
 800fd54:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fd56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800fd58:	428a      	cmp	r2, r1
 800fd5a:	d100      	bne.n	800fd5e <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800fd5c:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800fd5e:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd60:	69a3      	ldr	r3, [r4, #24]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	db02      	blt.n	800fd6c <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd66:	2207      	movs	r2, #7
 800fd68:	1b55      	subs	r5, r2, r5
 800fd6a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fd6c:	2314      	movs	r3, #20
 800fd6e:	434b      	muls	r3, r1
 800fd70:	4a15      	ldr	r2, [pc, #84]	; (800fdc8 <vTaskPrioritySet+0xa8>)
 800fd72:	189b      	adds	r3, r3, r2
 800fd74:	6962      	ldr	r2, [r4, #20]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d111      	bne.n	800fd9e <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fd7a:	1d25      	adds	r5, r4, #4
 800fd7c:	0028      	movs	r0, r5
 800fd7e:	f7ff faab 	bl	800f2d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd84:	4a11      	ldr	r2, [pc, #68]	; (800fdcc <vTaskPrioritySet+0xac>)
 800fd86:	6812      	ldr	r2, [r2, #0]
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d901      	bls.n	800fd90 <vTaskPrioritySet+0x70>
 800fd8c:	4a0f      	ldr	r2, [pc, #60]	; (800fdcc <vTaskPrioritySet+0xac>)
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	2014      	movs	r0, #20
 800fd92:	4358      	muls	r0, r3
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <vTaskPrioritySet+0xa8>)
 800fd96:	18c0      	adds	r0, r0, r3
 800fd98:	0029      	movs	r1, r5
 800fd9a:	f7ff fa79 	bl	800f290 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800fd9e:	2e01      	cmp	r6, #1
 800fda0:	d101      	bne.n	800fda6 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800fda2:	f000 ff7b 	bl	8010c9c <vPortYield>
		taskEXIT_CRITICAL();
 800fda6:	f000 ff91 	bl	8010ccc <vPortExitCritical>
	}
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800fdac:	4b05      	ldr	r3, [pc, #20]	; (800fdc4 <vTaskPrioritySet+0xa4>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	42a3      	cmp	r3, r4
 800fdb2:	d005      	beq.n	800fdc0 <vTaskPrioritySet+0xa0>
	BaseType_t xYieldRequired = pdFALSE;
 800fdb4:	2600      	movs	r6, #0
 800fdb6:	e7ce      	b.n	800fd56 <vTaskPrioritySet+0x36>
 800fdb8:	2600      	movs	r6, #0
 800fdba:	e7cc      	b.n	800fd56 <vTaskPrioritySet+0x36>
							xYieldRequired = pdTRUE;
 800fdbc:	2601      	movs	r6, #1
 800fdbe:	e7ca      	b.n	800fd56 <vTaskPrioritySet+0x36>
					xYieldRequired = pdTRUE;
 800fdc0:	2601      	movs	r6, #1
 800fdc2:	e7c8      	b.n	800fd56 <vTaskPrioritySet+0x36>
 800fdc4:	20001d6c 	.word	0x20001d6c
 800fdc8:	20001d78 	.word	0x20001d78
 800fdcc:	20001e1c 	.word	0x20001e1c

0800fdd0 <vTaskStartScheduler>:
{
 800fdd0:	b500      	push	{lr}
 800fdd2:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	9302      	str	r3, [sp, #8]
 800fdda:	9301      	str	r3, [sp, #4]
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	22a0      	movs	r2, #160	; 0xa0
 800fde0:	490d      	ldr	r1, [pc, #52]	; (800fe18 <vTaskStartScheduler+0x48>)
 800fde2:	480e      	ldr	r0, [pc, #56]	; (800fe1c <vTaskStartScheduler+0x4c>)
 800fde4:	f7ff ff04 	bl	800fbf0 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800fde8:	2801      	cmp	r0, #1
 800fdea:	d005      	beq.n	800fdf8 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 800fdec:	2801      	cmp	r0, #1
 800fdee:	d006      	beq.n	800fdfe <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d10f      	bne.n	800fe14 <vTaskStartScheduler+0x44>
 800fdf4:	b672      	cpsid	i
 800fdf6:	e7fe      	b.n	800fdf6 <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 800fdf8:	f000 fd6c 	bl	80108d4 <xTimerCreateTimerTask>
 800fdfc:	e7f6      	b.n	800fdec <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800fdfe:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800fe00:	4b07      	ldr	r3, [pc, #28]	; (800fe20 <vTaskStartScheduler+0x50>)
 800fe02:	2201      	movs	r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fe06:	4b07      	ldr	r3, [pc, #28]	; (800fe24 <vTaskStartScheduler+0x54>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fe0c:	f7f8 f99e 	bl	800814c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800fe10:	f000 ff2a 	bl	8010c68 <xPortStartScheduler>
}
 800fe14:	b005      	add	sp, #20
 800fe16:	bd00      	pop	{pc}
 800fe18:	0801bb40 	.word	0x0801bb40
 800fe1c:	080100e5 	.word	0x080100e5
 800fe20:	20001e60 	.word	0x20001e60
 800fe24:	20001e8c 	.word	0x20001e8c

0800fe28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fe28:	4a02      	ldr	r2, [pc, #8]	; (800fe34 <vTaskSuspendAll+0xc>)
 800fe2a:	6813      	ldr	r3, [r2, #0]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	6013      	str	r3, [r2, #0]
}
 800fe30:	4770      	bx	lr
 800fe32:	46c0      	nop			; (mov r8, r8)
 800fe34:	20001e10 	.word	0x20001e10

0800fe38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fe38:	4b01      	ldr	r3, [pc, #4]	; (800fe40 <xTaskGetTickCount+0x8>)
 800fe3a:	6818      	ldr	r0, [r3, #0]
}
 800fe3c:	4770      	bx	lr
 800fe3e:	46c0      	nop			; (mov r8, r8)
 800fe40:	20001e8c 	.word	0x20001e8c

0800fe44 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800fe44:	4b01      	ldr	r3, [pc, #4]	; (800fe4c <xTaskGetTickCountFromISR+0x8>)
 800fe46:	6818      	ldr	r0, [r3, #0]
}
 800fe48:	4770      	bx	lr
 800fe4a:	46c0      	nop			; (mov r8, r8)
 800fe4c:	20001e8c 	.word	0x20001e8c

0800fe50 <xTaskIncrementTick>:
{
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe52:	4b39      	ldr	r3, [pc, #228]	; (800ff38 <xTaskIncrementTick+0xe8>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d162      	bne.n	800ff20 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800fe5a:	4b38      	ldr	r3, [pc, #224]	; (800ff3c <xTaskIncrementTick+0xec>)
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	3201      	adds	r2, #1
 800fe60:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800fe62:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800fe64:	2f00      	cmp	r7, #0
 800fe66:	d112      	bne.n	800fe8e <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 800fe68:	4b35      	ldr	r3, [pc, #212]	; (800ff40 <xTaskIncrementTick+0xf0>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <xTaskIncrementTick+0x26>
 800fe72:	b672      	cpsid	i
 800fe74:	e7fe      	b.n	800fe74 <xTaskIncrementTick+0x24>
 800fe76:	4a32      	ldr	r2, [pc, #200]	; (800ff40 <xTaskIncrementTick+0xf0>)
 800fe78:	6811      	ldr	r1, [r2, #0]
 800fe7a:	4b32      	ldr	r3, [pc, #200]	; (800ff44 <xTaskIncrementTick+0xf4>)
 800fe7c:	6818      	ldr	r0, [r3, #0]
 800fe7e:	6010      	str	r0, [r2, #0]
 800fe80:	6019      	str	r1, [r3, #0]
 800fe82:	4a31      	ldr	r2, [pc, #196]	; (800ff48 <xTaskIncrementTick+0xf8>)
 800fe84:	6813      	ldr	r3, [r2, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	6013      	str	r3, [r2, #0]
 800fe8a:	f7ff fdd9 	bl	800fa40 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800fe8e:	4b2f      	ldr	r3, [pc, #188]	; (800ff4c <xTaskIncrementTick+0xfc>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	42bb      	cmp	r3, r7
 800fe94:	d93a      	bls.n	800ff0c <xTaskIncrementTick+0xbc>
BaseType_t xSwitchRequired = pdFALSE;
 800fe96:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe98:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <xTaskIncrementTick+0x100>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe9e:	0093      	lsls	r3, r2, #2
 800fea0:	189b      	adds	r3, r3, r2
 800fea2:	009a      	lsls	r2, r3, #2
 800fea4:	4b2b      	ldr	r3, [pc, #172]	; (800ff54 <xTaskIncrementTick+0x104>)
 800fea6:	58d3      	ldr	r3, [r2, r3]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d93e      	bls.n	800ff2a <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800feac:	2401      	movs	r4, #1
 800feae:	e03c      	b.n	800ff2a <xTaskIncrementTick+0xda>
								xSwitchRequired = pdTRUE;
 800feb0:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feb2:	4b23      	ldr	r3, [pc, #140]	; (800ff40 <xTaskIncrementTick+0xf0>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d029      	beq.n	800ff10 <xTaskIncrementTick+0xc0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800febc:	4b20      	ldr	r3, [pc, #128]	; (800ff40 <xTaskIncrementTick+0xf0>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800fec4:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800fec6:	429f      	cmp	r7, r3
 800fec8:	d327      	bcc.n	800ff1a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800feca:	1d2e      	adds	r6, r5, #4
 800fecc:	0030      	movs	r0, r6
 800fece:	f7ff fa03 	bl	800f2d8 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fed2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d003      	beq.n	800fee0 <xTaskIncrementTick+0x90>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fed8:	0028      	movs	r0, r5
 800feda:	3018      	adds	r0, #24
 800fedc:	f7ff f9fc 	bl	800f2d8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fee0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fee2:	4b1d      	ldr	r3, [pc, #116]	; (800ff58 <xTaskIncrementTick+0x108>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d901      	bls.n	800feee <xTaskIncrementTick+0x9e>
 800feea:	4b1b      	ldr	r3, [pc, #108]	; (800ff58 <xTaskIncrementTick+0x108>)
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	0093      	lsls	r3, r2, #2
 800fef0:	189b      	adds	r3, r3, r2
 800fef2:	0098      	lsls	r0, r3, #2
 800fef4:	4b17      	ldr	r3, [pc, #92]	; (800ff54 <xTaskIncrementTick+0x104>)
 800fef6:	18c0      	adds	r0, r0, r3
 800fef8:	0031      	movs	r1, r6
 800fefa:	f7ff f9c9 	bl	800f290 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fefe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ff00:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <xTaskIncrementTick+0x100>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d2d2      	bcs.n	800feb0 <xTaskIncrementTick+0x60>
 800ff0a:	e7d2      	b.n	800feb2 <xTaskIncrementTick+0x62>
BaseType_t xSwitchRequired = pdFALSE;
 800ff0c:	2400      	movs	r4, #0
 800ff0e:	e7d0      	b.n	800feb2 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = portMAX_DELAY;
 800ff10:	4b0e      	ldr	r3, [pc, #56]	; (800ff4c <xTaskIncrementTick+0xfc>)
 800ff12:	2201      	movs	r2, #1
 800ff14:	4252      	negs	r2, r2
 800ff16:	601a      	str	r2, [r3, #0]
						break;
 800ff18:	e7be      	b.n	800fe98 <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 800ff1a:	4a0c      	ldr	r2, [pc, #48]	; (800ff4c <xTaskIncrementTick+0xfc>)
 800ff1c:	6013      	str	r3, [r2, #0]
							break;
 800ff1e:	e7bb      	b.n	800fe98 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800ff20:	4a0e      	ldr	r2, [pc, #56]	; (800ff5c <xTaskIncrementTick+0x10c>)
 800ff22:	6813      	ldr	r3, [r2, #0]
 800ff24:	3301      	adds	r3, #1
 800ff26:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ff28:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800ff2a:	4b0d      	ldr	r3, [pc, #52]	; (800ff60 <xTaskIncrementTick+0x110>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d000      	beq.n	800ff34 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800ff32:	2401      	movs	r4, #1
}
 800ff34:	0020      	movs	r0, r4
 800ff36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff38:	20001e10 	.word	0x20001e10
 800ff3c:	20001e8c 	.word	0x20001e8c
 800ff40:	20001d70 	.word	0x20001d70
 800ff44:	20001d74 	.word	0x20001d74
 800ff48:	20001e48 	.word	0x20001e48
 800ff4c:	20000120 	.word	0x20000120
 800ff50:	20001d6c 	.word	0x20001d6c
 800ff54:	20001d78 	.word	0x20001d78
 800ff58:	20001e1c 	.word	0x20001e1c
 800ff5c:	20001e0c 	.word	0x20001e0c
 800ff60:	20001e90 	.word	0x20001e90

0800ff64 <xTaskResumeAll>:
{
 800ff64:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 800ff66:	4b30      	ldr	r3, [pc, #192]	; (8010028 <xTaskResumeAll+0xc4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <xTaskResumeAll+0xe>
 800ff6e:	b672      	cpsid	i
 800ff70:	e7fe      	b.n	800ff70 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800ff72:	f000 fe9f 	bl	8010cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ff76:	4b2c      	ldr	r3, [pc, #176]	; (8010028 <xTaskResumeAll+0xc4>)
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	3a01      	subs	r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d14d      	bne.n	8010020 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff84:	4b29      	ldr	r3, [pc, #164]	; (801002c <xTaskResumeAll+0xc8>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d112      	bne.n	800ffb2 <xTaskResumeAll+0x4e>
BaseType_t xAlreadyYielded = pdFALSE;
 800ff8c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ff8e:	f000 fe9d 	bl	8010ccc <vPortExitCritical>
}
 800ff92:	0020      	movs	r0, r4
 800ff94:	bd70      	pop	{r4, r5, r6, pc}
					prvAddTaskToReadyList( pxTCB );
 800ff96:	0093      	lsls	r3, r2, #2
 800ff98:	189b      	adds	r3, r3, r2
 800ff9a:	0098      	lsls	r0, r3, #2
 800ff9c:	4b24      	ldr	r3, [pc, #144]	; (8010030 <xTaskResumeAll+0xcc>)
 800ff9e:	18c0      	adds	r0, r0, r3
 800ffa0:	0029      	movs	r1, r5
 800ffa2:	f7ff f975 	bl	800f290 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ffa8:	4b22      	ldr	r3, [pc, #136]	; (8010034 <xTaskResumeAll+0xd0>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d216      	bcs.n	800ffe0 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffb2:	4b21      	ldr	r3, [pc, #132]	; (8010038 <xTaskResumeAll+0xd4>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d016      	beq.n	800ffe8 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ffba:	4b1f      	ldr	r3, [pc, #124]	; (8010038 <xTaskResumeAll+0xd4>)
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffc0:	0020      	movs	r0, r4
 800ffc2:	3018      	adds	r0, #24
 800ffc4:	f7ff f988 	bl	800f2d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ffc8:	1d25      	adds	r5, r4, #4
 800ffca:	0028      	movs	r0, r5
 800ffcc:	f7ff f984 	bl	800f2d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ffd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ffd2:	4b1a      	ldr	r3, [pc, #104]	; (801003c <xTaskResumeAll+0xd8>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d9dd      	bls.n	800ff96 <xTaskResumeAll+0x32>
 800ffda:	4b18      	ldr	r3, [pc, #96]	; (801003c <xTaskResumeAll+0xd8>)
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	e7da      	b.n	800ff96 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800ffe0:	4b17      	ldr	r3, [pc, #92]	; (8010040 <xTaskResumeAll+0xdc>)
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e7e4      	b.n	800ffb2 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800ffe8:	4b16      	ldr	r3, [pc, #88]	; (8010044 <xTaskResumeAll+0xe0>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d112      	bne.n	8010016 <xTaskResumeAll+0xb2>
				if( xYieldPending == pdTRUE )
 800fff0:	4b13      	ldr	r3, [pc, #76]	; (8010040 <xTaskResumeAll+0xdc>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d115      	bne.n	8010024 <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 800fff8:	f000 fe50 	bl	8010c9c <vPortYield>
						xAlreadyYielded = pdTRUE;
 800fffc:	2401      	movs	r4, #1
 800fffe:	e7c6      	b.n	800ff8e <xTaskResumeAll+0x2a>
						if( xTaskIncrementTick() != pdFALSE )
 8010000:	f7ff ff26 	bl	800fe50 <xTaskIncrementTick>
 8010004:	2800      	cmp	r0, #0
 8010006:	d002      	beq.n	801000e <xTaskResumeAll+0xaa>
							xYieldPending = pdTRUE;
 8010008:	4b0d      	ldr	r3, [pc, #52]	; (8010040 <xTaskResumeAll+0xdc>)
 801000a:	2201      	movs	r2, #1
 801000c:	601a      	str	r2, [r3, #0]
						--uxPendedTicks;
 801000e:	4a0d      	ldr	r2, [pc, #52]	; (8010044 <xTaskResumeAll+0xe0>)
 8010010:	6813      	ldr	r3, [r2, #0]
 8010012:	3b01      	subs	r3, #1
 8010014:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010016:	4b0b      	ldr	r3, [pc, #44]	; (8010044 <xTaskResumeAll+0xe0>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1f0      	bne.n	8010000 <xTaskResumeAll+0x9c>
 801001e:	e7e7      	b.n	800fff0 <xTaskResumeAll+0x8c>
BaseType_t xAlreadyYielded = pdFALSE;
 8010020:	2400      	movs	r4, #0
 8010022:	e7b4      	b.n	800ff8e <xTaskResumeAll+0x2a>
 8010024:	2400      	movs	r4, #0
 8010026:	e7b2      	b.n	800ff8e <xTaskResumeAll+0x2a>
 8010028:	20001e10 	.word	0x20001e10
 801002c:	20001e08 	.word	0x20001e08
 8010030:	20001d78 	.word	0x20001d78
 8010034:	20001d6c 	.word	0x20001d6c
 8010038:	20001e4c 	.word	0x20001e4c
 801003c:	20001e1c 	.word	0x20001e1c
 8010040:	20001e90 	.word	0x20001e90
 8010044:	20001e0c 	.word	0x20001e0c

08010048 <vTaskDelay>:
	{
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 801004c:	d016      	beq.n	801007c <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 801004e:	4b0d      	ldr	r3, [pc, #52]	; (8010084 <vTaskDelay+0x3c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <vTaskDelay+0x12>
 8010056:	b672      	cpsid	i
 8010058:	e7fe      	b.n	8010058 <vTaskDelay+0x10>
			vTaskSuspendAll();
 801005a:	f7ff fee5 	bl	800fe28 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 801005e:	4b0a      	ldr	r3, [pc, #40]	; (8010088 <vTaskDelay+0x40>)
 8010060:	681c      	ldr	r4, [r3, #0]
 8010062:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010064:	4b09      	ldr	r3, [pc, #36]	; (801008c <vTaskDelay+0x44>)
 8010066:	6818      	ldr	r0, [r3, #0]
 8010068:	3004      	adds	r0, #4
 801006a:	f7ff f935 	bl	800f2d8 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 801006e:	0020      	movs	r0, r4
 8010070:	f7ff fd82 	bl	800fb78 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010074:	f7ff ff76 	bl	800ff64 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010078:	2800      	cmp	r0, #0
 801007a:	d101      	bne.n	8010080 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 801007c:	f000 fe0e 	bl	8010c9c <vPortYield>
	}
 8010080:	bd70      	pop	{r4, r5, r6, pc}
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	20001e10 	.word	0x20001e10
 8010088:	20001e8c 	.word	0x20001e8c
 801008c:	20001d6c 	.word	0x20001d6c

08010090 <prvCheckTasksWaitingTermination>:
{
 8010090:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010092:	4b11      	ldr	r3, [pc, #68]	; (80100d8 <prvCheckTasksWaitingTermination+0x48>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d01d      	beq.n	80100d6 <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 801009a:	f7ff fec5 	bl	800fe28 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 801009e:	4b0f      	ldr	r3, [pc, #60]	; (80100dc <prvCheckTasksWaitingTermination+0x4c>)
 80100a0:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 80100a2:	f7ff ff5f 	bl	800ff64 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	d0f3      	beq.n	8010092 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 80100aa:	f000 fe03 	bl	8010cb4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80100ae:	4b0b      	ldr	r3, [pc, #44]	; (80100dc <prvCheckTasksWaitingTermination+0x4c>)
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80100b4:	1d20      	adds	r0, r4, #4
 80100b6:	f7ff f90f 	bl	800f2d8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80100ba:	4a09      	ldr	r2, [pc, #36]	; (80100e0 <prvCheckTasksWaitingTermination+0x50>)
 80100bc:	6813      	ldr	r3, [r2, #0]
 80100be:	3b01      	subs	r3, #1
 80100c0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80100c2:	4a05      	ldr	r2, [pc, #20]	; (80100d8 <prvCheckTasksWaitingTermination+0x48>)
 80100c4:	6813      	ldr	r3, [r2, #0]
 80100c6:	3b01      	subs	r3, #1
 80100c8:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80100ca:	f000 fdff 	bl	8010ccc <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80100ce:	0020      	movs	r0, r4
 80100d0:	f7ff fccc 	bl	800fa6c <prvDeleteTCB>
 80100d4:	e7dd      	b.n	8010092 <prvCheckTasksWaitingTermination+0x2>
}
 80100d6:	bd10      	pop	{r4, pc}
 80100d8:	20001e18 	.word	0x20001e18
 80100dc:	20001e78 	.word	0x20001e78
 80100e0:	20001e08 	.word	0x20001e08

080100e4 <prvIdleTask>:
{
 80100e4:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 80100e6:	f7ff ffd3 	bl	8010090 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100ea:	4b03      	ldr	r3, [pc, #12]	; (80100f8 <prvIdleTask+0x14>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d9f9      	bls.n	80100e6 <prvIdleTask+0x2>
				taskYIELD();
 80100f2:	f000 fdd3 	bl	8010c9c <vPortYield>
 80100f6:	e7f6      	b.n	80100e6 <prvIdleTask+0x2>
 80100f8:	20001d78 	.word	0x20001d78

080100fc <uxTaskGetSystemState>:
	{
 80100fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100fe:	0007      	movs	r7, r0
 8010100:	000c      	movs	r4, r1
 8010102:	0016      	movs	r6, r2
		vTaskSuspendAll();
 8010104:	f7ff fe90 	bl	800fe28 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8010108:	4b1e      	ldr	r3, [pc, #120]	; (8010184 <uxTaskGetSystemState+0x88>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	42a3      	cmp	r3, r4
 801010e:	d833      	bhi.n	8010178 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010110:	2507      	movs	r5, #7
 8010112:	2400      	movs	r4, #0
					uxQueue--;
 8010114:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8010116:	0160      	lsls	r0, r4, #5
 8010118:	00ab      	lsls	r3, r5, #2
 801011a:	195b      	adds	r3, r3, r5
 801011c:	0099      	lsls	r1, r3, #2
 801011e:	4b1a      	ldr	r3, [pc, #104]	; (8010188 <uxTaskGetSystemState+0x8c>)
 8010120:	18c9      	adds	r1, r1, r3
 8010122:	1838      	adds	r0, r7, r0
 8010124:	2201      	movs	r2, #1
 8010126:	f7ff fc3d 	bl	800f9a4 <prvListTaskWithinSingleList>
 801012a:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801012c:	2d00      	cmp	r5, #0
 801012e:	d1f1      	bne.n	8010114 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8010130:	0160      	lsls	r0, r4, #5
 8010132:	4b16      	ldr	r3, [pc, #88]	; (801018c <uxTaskGetSystemState+0x90>)
 8010134:	6819      	ldr	r1, [r3, #0]
 8010136:	1838      	adds	r0, r7, r0
 8010138:	2202      	movs	r2, #2
 801013a:	f7ff fc33 	bl	800f9a4 <prvListTaskWithinSingleList>
 801013e:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8010140:	0160      	lsls	r0, r4, #5
 8010142:	4b13      	ldr	r3, [pc, #76]	; (8010190 <uxTaskGetSystemState+0x94>)
 8010144:	6819      	ldr	r1, [r3, #0]
 8010146:	1838      	adds	r0, r7, r0
 8010148:	2202      	movs	r2, #2
 801014a:	f7ff fc2b 	bl	800f9a4 <prvListTaskWithinSingleList>
 801014e:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010150:	0160      	lsls	r0, r4, #5
 8010152:	1838      	adds	r0, r7, r0
 8010154:	2204      	movs	r2, #4
 8010156:	490f      	ldr	r1, [pc, #60]	; (8010194 <uxTaskGetSystemState+0x98>)
 8010158:	f7ff fc24 	bl	800f9a4 <prvListTaskWithinSingleList>
 801015c:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 801015e:	0160      	lsls	r0, r4, #5
 8010160:	1838      	adds	r0, r7, r0
 8010162:	2203      	movs	r2, #3
 8010164:	490c      	ldr	r1, [pc, #48]	; (8010198 <uxTaskGetSystemState+0x9c>)
 8010166:	f7ff fc1d 	bl	800f9a4 <prvListTaskWithinSingleList>
 801016a:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 801016c:	2e00      	cmp	r6, #0
 801016e:	d004      	beq.n	801017a <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010170:	f7f7 fffc 	bl	800816c <ulMainGetRunTimeCounterValue>
 8010174:	6030      	str	r0, [r6, #0]
 8010176:	e000      	b.n	801017a <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010178:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 801017a:	f7ff fef3 	bl	800ff64 <xTaskResumeAll>
	}
 801017e:	0020      	movs	r0, r4
 8010180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010182:	46c0      	nop			; (mov r8, r8)
 8010184:	20001e08 	.word	0x20001e08
 8010188:	20001d78 	.word	0x20001d78
 801018c:	20001d70 	.word	0x20001d70
 8010190:	20001d74 	.word	0x20001d74
 8010194:	20001e78 	.word	0x20001e78
 8010198:	20001e64 	.word	0x20001e64

0801019c <vTaskSwitchContext>:
{
 801019c:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801019e:	4b35      	ldr	r3, [pc, #212]	; (8010274 <vTaskSwitchContext+0xd8>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d003      	beq.n	80101ae <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80101a6:	4b34      	ldr	r3, [pc, #208]	; (8010278 <vTaskSwitchContext+0xdc>)
 80101a8:	2201      	movs	r2, #1
 80101aa:	601a      	str	r2, [r3, #0]
}
 80101ac:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 80101ae:	4b32      	ldr	r3, [pc, #200]	; (8010278 <vTaskSwitchContext+0xdc>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80101b4:	f7f7 ffda 	bl	800816c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80101b8:	4b30      	ldr	r3, [pc, #192]	; (801027c <vTaskSwitchContext+0xe0>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4298      	cmp	r0, r3
 80101be:	d906      	bls.n	80101ce <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80101c0:	4a2f      	ldr	r2, [pc, #188]	; (8010280 <vTaskSwitchContext+0xe4>)
 80101c2:	6812      	ldr	r2, [r2, #0]
 80101c4:	1ac3      	subs	r3, r0, r3
 80101c6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80101c8:	468c      	mov	ip, r1
 80101ca:	4463      	add	r3, ip
 80101cc:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80101ce:	4b2b      	ldr	r3, [pc, #172]	; (801027c <vTaskSwitchContext+0xe0>)
 80101d0:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80101d2:	4b2b      	ldr	r3, [pc, #172]	; (8010280 <vTaskSwitchContext+0xe4>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	6812      	ldr	r2, [r2, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101dc:	429a      	cmp	r2, r3
 80101de:	d805      	bhi.n	80101ec <vTaskSwitchContext+0x50>
 80101e0:	4b27      	ldr	r3, [pc, #156]	; (8010280 <vTaskSwitchContext+0xe4>)
 80101e2:	6818      	ldr	r0, [r3, #0]
 80101e4:	6819      	ldr	r1, [r3, #0]
 80101e6:	3134      	adds	r1, #52	; 0x34
 80101e8:	f7fe f9ba 	bl	800e560 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80101ec:	4b24      	ldr	r3, [pc, #144]	; (8010280 <vTaskSwitchContext+0xe4>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80101f2:	2214      	movs	r2, #20
 80101f4:	4923      	ldr	r1, [pc, #140]	; (8010284 <vTaskSwitchContext+0xe8>)
 80101f6:	f003 fef1 	bl	8013fdc <memcmp>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d005      	beq.n	801020a <vTaskSwitchContext+0x6e>
 80101fe:	4b20      	ldr	r3, [pc, #128]	; (8010280 <vTaskSwitchContext+0xe4>)
 8010200:	6818      	ldr	r0, [r3, #0]
 8010202:	6819      	ldr	r1, [r3, #0]
 8010204:	3134      	adds	r1, #52	; 0x34
 8010206:	f7fe f9ab 	bl	800e560 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801020a:	4b1f      	ldr	r3, [pc, #124]	; (8010288 <vTaskSwitchContext+0xec>)
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	0093      	lsls	r3, r2, #2
 8010210:	189b      	adds	r3, r3, r2
 8010212:	009a      	lsls	r2, r3, #2
 8010214:	4b1d      	ldr	r3, [pc, #116]	; (801028c <vTaskSwitchContext+0xf0>)
 8010216:	58d3      	ldr	r3, [r2, r3]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10a      	bne.n	8010232 <vTaskSwitchContext+0x96>
 801021c:	4b1a      	ldr	r3, [pc, #104]	; (8010288 <vTaskSwitchContext+0xec>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d004      	beq.n	801022e <vTaskSwitchContext+0x92>
 8010224:	4a18      	ldr	r2, [pc, #96]	; (8010288 <vTaskSwitchContext+0xec>)
 8010226:	6813      	ldr	r3, [r2, #0]
 8010228:	3b01      	subs	r3, #1
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	e7ed      	b.n	801020a <vTaskSwitchContext+0x6e>
 801022e:	b672      	cpsid	i
 8010230:	e7fe      	b.n	8010230 <vTaskSwitchContext+0x94>
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <vTaskSwitchContext+0xec>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4d15      	ldr	r5, [pc, #84]	; (801028c <vTaskSwitchContext+0xf0>)
 8010238:	0099      	lsls	r1, r3, #2
 801023a:	18ca      	adds	r2, r1, r3
 801023c:	0090      	lsls	r0, r2, #2
 801023e:	1828      	adds	r0, r5, r0
 8010240:	6842      	ldr	r2, [r0, #4]
 8010242:	6854      	ldr	r4, [r2, #4]
 8010244:	6044      	str	r4, [r0, #4]
 8010246:	18c9      	adds	r1, r1, r3
 8010248:	008a      	lsls	r2, r1, #2
 801024a:	3208      	adds	r2, #8
 801024c:	1952      	adds	r2, r2, r5
 801024e:	4294      	cmp	r4, r2
 8010250:	d009      	beq.n	8010266 <vTaskSwitchContext+0xca>
 8010252:	009a      	lsls	r2, r3, #2
 8010254:	18d3      	adds	r3, r2, r3
 8010256:	009a      	lsls	r2, r3, #2
 8010258:	4b0c      	ldr	r3, [pc, #48]	; (801028c <vTaskSwitchContext+0xf0>)
 801025a:	189b      	adds	r3, r3, r2
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	68da      	ldr	r2, [r3, #12]
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <vTaskSwitchContext+0xe4>)
 8010262:	601a      	str	r2, [r3, #0]
}
 8010264:	e7a2      	b.n	80101ac <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010266:	6860      	ldr	r0, [r4, #4]
 8010268:	2114      	movs	r1, #20
 801026a:	4359      	muls	r1, r3
 801026c:	186a      	adds	r2, r5, r1
 801026e:	6050      	str	r0, [r2, #4]
 8010270:	e7ef      	b.n	8010252 <vTaskSwitchContext+0xb6>
 8010272:	46c0      	nop			; (mov r8, r8)
 8010274:	20001e10 	.word	0x20001e10
 8010278:	20001e90 	.word	0x20001e90
 801027c:	20001e04 	.word	0x20001e04
 8010280:	20001d6c 	.word	0x20001d6c
 8010284:	0801bb04 	.word	0x0801bb04
 8010288:	20001e1c 	.word	0x20001e1c
 801028c:	20001d78 	.word	0x20001d78

08010290 <vTaskPlaceOnEventList>:
{
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8010294:	2800      	cmp	r0, #0
 8010296:	d101      	bne.n	801029c <vTaskPlaceOnEventList+0xc>
 8010298:	b672      	cpsid	i
 801029a:	e7fe      	b.n	801029a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801029c:	4d0b      	ldr	r5, [pc, #44]	; (80102cc <vTaskPlaceOnEventList+0x3c>)
 801029e:	6829      	ldr	r1, [r5, #0]
 80102a0:	3118      	adds	r1, #24
 80102a2:	f7ff f801 	bl	800f2a8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80102a6:	6828      	ldr	r0, [r5, #0]
 80102a8:	3004      	adds	r0, #4
 80102aa:	f7ff f815 	bl	800f2d8 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 80102ae:	1c63      	adds	r3, r4, #1
 80102b0:	d005      	beq.n	80102be <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 80102b2:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <vTaskPlaceOnEventList+0x40>)
 80102b4:	6818      	ldr	r0, [r3, #0]
 80102b6:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80102b8:	f7ff fc5e 	bl	800fb78 <prvAddCurrentTaskToDelayedList>
}
 80102bc:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80102be:	4b03      	ldr	r3, [pc, #12]	; (80102cc <vTaskPlaceOnEventList+0x3c>)
 80102c0:	6819      	ldr	r1, [r3, #0]
 80102c2:	3104      	adds	r1, #4
 80102c4:	4803      	ldr	r0, [pc, #12]	; (80102d4 <vTaskPlaceOnEventList+0x44>)
 80102c6:	f7fe ffe3 	bl	800f290 <vListInsertEnd>
 80102ca:	e7f7      	b.n	80102bc <vTaskPlaceOnEventList+0x2c>
 80102cc:	20001d6c 	.word	0x20001d6c
 80102d0:	20001e8c 	.word	0x20001e8c
 80102d4:	20001e64 	.word	0x20001e64

080102d8 <vTaskPlaceOnEventListRestricted>:
	{
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 80102dc:	2800      	cmp	r0, #0
 80102de:	d101      	bne.n	80102e4 <vTaskPlaceOnEventListRestricted+0xc>
 80102e0:	b672      	cpsid	i
 80102e2:	e7fe      	b.n	80102e2 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102e4:	4c07      	ldr	r4, [pc, #28]	; (8010304 <vTaskPlaceOnEventListRestricted+0x2c>)
 80102e6:	6821      	ldr	r1, [r4, #0]
 80102e8:	3118      	adds	r1, #24
 80102ea:	f7fe ffd1 	bl	800f290 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80102ee:	6820      	ldr	r0, [r4, #0]
 80102f0:	3004      	adds	r0, #4
 80102f2:	f7fe fff1 	bl	800f2d8 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 80102f6:	4b04      	ldr	r3, [pc, #16]	; (8010308 <vTaskPlaceOnEventListRestricted+0x30>)
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80102fc:	f7ff fc3c 	bl	800fb78 <prvAddCurrentTaskToDelayedList>
	}
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	46c0      	nop			; (mov r8, r8)
 8010304:	20001d6c 	.word	0x20001d6c
 8010308:	20001e8c 	.word	0x20001e8c

0801030c <xTaskRemoveFromEventList>:
{
 801030c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801030e:	68c3      	ldr	r3, [r0, #12]
 8010310:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010312:	2c00      	cmp	r4, #0
 8010314:	d101      	bne.n	801031a <xTaskRemoveFromEventList+0xe>
 8010316:	b672      	cpsid	i
 8010318:	e7fe      	b.n	8010318 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801031a:	0025      	movs	r5, r4
 801031c:	3518      	adds	r5, #24
 801031e:	0028      	movs	r0, r5
 8010320:	f7fe ffda 	bl	800f2d8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010324:	4b14      	ldr	r3, [pc, #80]	; (8010378 <xTaskRemoveFromEventList+0x6c>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d11d      	bne.n	8010368 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 801032c:	1d25      	adds	r5, r4, #4
 801032e:	0028      	movs	r0, r5
 8010330:	f7fe ffd2 	bl	800f2d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010334:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010336:	4b11      	ldr	r3, [pc, #68]	; (801037c <xTaskRemoveFromEventList+0x70>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	429a      	cmp	r2, r3
 801033c:	d901      	bls.n	8010342 <xTaskRemoveFromEventList+0x36>
 801033e:	4b0f      	ldr	r3, [pc, #60]	; (801037c <xTaskRemoveFromEventList+0x70>)
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	0093      	lsls	r3, r2, #2
 8010344:	189b      	adds	r3, r3, r2
 8010346:	0098      	lsls	r0, r3, #2
 8010348:	4b0d      	ldr	r3, [pc, #52]	; (8010380 <xTaskRemoveFromEventList+0x74>)
 801034a:	18c0      	adds	r0, r0, r3
 801034c:	0029      	movs	r1, r5
 801034e:	f7fe ff9f 	bl	800f290 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010354:	4b0b      	ldr	r3, [pc, #44]	; (8010384 <xTaskRemoveFromEventList+0x78>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035a:	429a      	cmp	r2, r3
 801035c:	d909      	bls.n	8010372 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 801035e:	4b0a      	ldr	r3, [pc, #40]	; (8010388 <xTaskRemoveFromEventList+0x7c>)
 8010360:	2201      	movs	r2, #1
 8010362:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8010364:	2001      	movs	r0, #1
}
 8010366:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010368:	0029      	movs	r1, r5
 801036a:	4808      	ldr	r0, [pc, #32]	; (801038c <xTaskRemoveFromEventList+0x80>)
 801036c:	f7fe ff90 	bl	800f290 <vListInsertEnd>
 8010370:	e7ef      	b.n	8010352 <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 8010372:	2000      	movs	r0, #0
	return xReturn;
 8010374:	e7f7      	b.n	8010366 <xTaskRemoveFromEventList+0x5a>
 8010376:	46c0      	nop			; (mov r8, r8)
 8010378:	20001e10 	.word	0x20001e10
 801037c:	20001e1c 	.word	0x20001e1c
 8010380:	20001d78 	.word	0x20001d78
 8010384:	20001d6c 	.word	0x20001d6c
 8010388:	20001e90 	.word	0x20001e90
 801038c:	20001e4c 	.word	0x20001e4c

08010390 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8010390:	2800      	cmp	r0, #0
 8010392:	d006      	beq.n	80103a2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <vTaskSetTimeOutState+0x18>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801039a:	4b04      	ldr	r3, [pc, #16]	; (80103ac <vTaskSetTimeOutState+0x1c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	6043      	str	r3, [r0, #4]
}
 80103a0:	4770      	bx	lr
	configASSERT( pxTimeOut );
 80103a2:	b672      	cpsid	i
 80103a4:	e7fe      	b.n	80103a4 <vTaskSetTimeOutState+0x14>
 80103a6:	46c0      	nop			; (mov r8, r8)
 80103a8:	20001e48 	.word	0x20001e48
 80103ac:	20001e8c 	.word	0x20001e8c

080103b0 <xTaskCheckForTimeOut>:
{
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	0004      	movs	r4, r0
 80103b4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d003      	beq.n	80103c2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80103ba:	2900      	cmp	r1, #0
 80103bc:	d103      	bne.n	80103c6 <xTaskCheckForTimeOut+0x16>
 80103be:	b672      	cpsid	i
 80103c0:	e7fe      	b.n	80103c0 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 80103c2:	b672      	cpsid	i
 80103c4:	e7fe      	b.n	80103c4 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 80103c6:	f000 fc75 	bl	8010cb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80103ca:	4b11      	ldr	r3, [pc, #68]	; (8010410 <xTaskCheckForTimeOut+0x60>)
 80103cc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80103ce:	682b      	ldr	r3, [r5, #0]
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	d018      	beq.n	8010406 <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80103d4:	4a0f      	ldr	r2, [pc, #60]	; (8010414 <xTaskCheckForTimeOut+0x64>)
 80103d6:	6812      	ldr	r2, [r2, #0]
 80103d8:	6820      	ldr	r0, [r4, #0]
 80103da:	4290      	cmp	r0, r2
 80103dc:	d002      	beq.n	80103e4 <xTaskCheckForTimeOut+0x34>
 80103de:	6862      	ldr	r2, [r4, #4]
 80103e0:	428a      	cmp	r2, r1
 80103e2:	d912      	bls.n	801040a <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80103e4:	6862      	ldr	r2, [r4, #4]
 80103e6:	1a88      	subs	r0, r1, r2
 80103e8:	4283      	cmp	r3, r0
 80103ea:	d804      	bhi.n	80103f6 <xTaskCheckForTimeOut+0x46>
			xReturn = pdTRUE;
 80103ec:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80103ee:	f000 fc6d 	bl	8010ccc <vPortExitCritical>
}
 80103f2:	0020      	movs	r0, r4
 80103f4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80103f6:	1a52      	subs	r2, r2, r1
 80103f8:	189b      	adds	r3, r3, r2
 80103fa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80103fc:	0020      	movs	r0, r4
 80103fe:	f7ff ffc7 	bl	8010390 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8010402:	2400      	movs	r4, #0
 8010404:	e7f3      	b.n	80103ee <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
 8010406:	2400      	movs	r4, #0
 8010408:	e7f1      	b.n	80103ee <xTaskCheckForTimeOut+0x3e>
			xReturn = pdTRUE;
 801040a:	2401      	movs	r4, #1
 801040c:	e7ef      	b.n	80103ee <xTaskCheckForTimeOut+0x3e>
 801040e:	46c0      	nop			; (mov r8, r8)
 8010410:	20001e8c 	.word	0x20001e8c
 8010414:	20001e48 	.word	0x20001e48

08010418 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010418:	4b01      	ldr	r3, [pc, #4]	; (8010420 <vTaskMissedYield+0x8>)
 801041a:	2201      	movs	r2, #1
 801041c:	601a      	str	r2, [r3, #0]
}
 801041e:	4770      	bx	lr
 8010420:	20001e90 	.word	0x20001e90

08010424 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010424:	4b06      	ldr	r3, [pc, #24]	; (8010440 <xTaskGetSchedulerState+0x1c>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801042c:	4b05      	ldr	r3, [pc, #20]	; (8010444 <xTaskGetSchedulerState+0x20>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d001      	beq.n	8010438 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8010434:	2000      	movs	r0, #0
		return xReturn;
 8010436:	e002      	b.n	801043e <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 8010438:	2002      	movs	r0, #2
 801043a:	e000      	b.n	801043e <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 801043c:	2001      	movs	r0, #1
	}
 801043e:	4770      	bx	lr
 8010440:	20001e60 	.word	0x20001e60
 8010444:	20001e10 	.word	0x20001e10

08010448 <vTaskPriorityInherit>:
	{
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 801044c:	d01a      	beq.n	8010484 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801044e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010450:	4a19      	ldr	r2, [pc, #100]	; (80104b8 <vTaskPriorityInherit+0x70>)
 8010452:	6812      	ldr	r2, [r2, #0]
 8010454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010456:	4293      	cmp	r3, r2
 8010458:	d214      	bcs.n	8010484 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801045a:	6982      	ldr	r2, [r0, #24]
 801045c:	2a00      	cmp	r2, #0
 801045e:	db05      	blt.n	801046c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010460:	4a15      	ldr	r2, [pc, #84]	; (80104b8 <vTaskPriorityInherit+0x70>)
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010466:	2207      	movs	r2, #7
 8010468:	1a52      	subs	r2, r2, r1
 801046a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 801046c:	009a      	lsls	r2, r3, #2
 801046e:	18d3      	adds	r3, r2, r3
 8010470:	009a      	lsls	r2, r3, #2
 8010472:	4b12      	ldr	r3, [pc, #72]	; (80104bc <vTaskPriorityInherit+0x74>)
 8010474:	18d2      	adds	r2, r2, r3
 8010476:	6963      	ldr	r3, [r4, #20]
 8010478:	4293      	cmp	r3, r2
 801047a:	d004      	beq.n	8010486 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801047c:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <vTaskPriorityInherit+0x70>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010482:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8010484:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010486:	1d25      	adds	r5, r4, #4
 8010488:	0028      	movs	r0, r5
 801048a:	f7fe ff25 	bl	800f2d8 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801048e:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <vTaskPriorityInherit+0x70>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010494:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8010496:	4a0a      	ldr	r2, [pc, #40]	; (80104c0 <vTaskPriorityInherit+0x78>)
 8010498:	6812      	ldr	r2, [r2, #0]
 801049a:	4293      	cmp	r3, r2
 801049c:	d808      	bhi.n	80104b0 <vTaskPriorityInherit+0x68>
 801049e:	009a      	lsls	r2, r3, #2
 80104a0:	18d3      	adds	r3, r2, r3
 80104a2:	0098      	lsls	r0, r3, #2
 80104a4:	4b05      	ldr	r3, [pc, #20]	; (80104bc <vTaskPriorityInherit+0x74>)
 80104a6:	18c0      	adds	r0, r0, r3
 80104a8:	0029      	movs	r1, r5
 80104aa:	f7fe fef1 	bl	800f290 <vListInsertEnd>
	}
 80104ae:	e7e9      	b.n	8010484 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 80104b0:	4a03      	ldr	r2, [pc, #12]	; (80104c0 <vTaskPriorityInherit+0x78>)
 80104b2:	6013      	str	r3, [r2, #0]
 80104b4:	e7f3      	b.n	801049e <vTaskPriorityInherit+0x56>
 80104b6:	46c0      	nop			; (mov r8, r8)
 80104b8:	20001d6c 	.word	0x20001d6c
 80104bc:	20001d78 	.word	0x20001d78
 80104c0:	20001e1c 	.word	0x20001e1c

080104c4 <xTaskPriorityDisinherit>:
	{
 80104c4:	b570      	push	{r4, r5, r6, lr}
 80104c6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80104c8:	d02a      	beq.n	8010520 <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 80104ca:	4b18      	ldr	r3, [pc, #96]	; (801052c <xTaskPriorityDisinherit+0x68>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4283      	cmp	r3, r0
 80104d0:	d001      	beq.n	80104d6 <xTaskPriorityDisinherit+0x12>
 80104d2:	b672      	cpsid	i
 80104d4:	e7fe      	b.n	80104d4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80104d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d101      	bne.n	80104e0 <xTaskPriorityDisinherit+0x1c>
 80104dc:	b672      	cpsid	i
 80104de:	e7fe      	b.n	80104de <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 80104e0:	3b01      	subs	r3, #1
 80104e2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80104e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80104e8:	428a      	cmp	r2, r1
 80104ea:	d01b      	beq.n	8010524 <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d11b      	bne.n	8010528 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80104f0:	1d05      	adds	r5, r0, #4
 80104f2:	0028      	movs	r0, r5
 80104f4:	f7fe fef0 	bl	800f2d8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80104fa:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104fc:	2207      	movs	r2, #7
 80104fe:	1ad2      	subs	r2, r2, r3
 8010500:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010502:	4a0b      	ldr	r2, [pc, #44]	; (8010530 <xTaskPriorityDisinherit+0x6c>)
 8010504:	6812      	ldr	r2, [r2, #0]
 8010506:	4293      	cmp	r3, r2
 8010508:	d901      	bls.n	801050e <xTaskPriorityDisinherit+0x4a>
 801050a:	4a09      	ldr	r2, [pc, #36]	; (8010530 <xTaskPriorityDisinherit+0x6c>)
 801050c:	6013      	str	r3, [r2, #0]
 801050e:	2014      	movs	r0, #20
 8010510:	4358      	muls	r0, r3
 8010512:	4b08      	ldr	r3, [pc, #32]	; (8010534 <xTaskPriorityDisinherit+0x70>)
 8010514:	18c0      	adds	r0, r0, r3
 8010516:	0029      	movs	r1, r5
 8010518:	f7fe feba 	bl	800f290 <vListInsertEnd>
					xReturn = pdTRUE;
 801051c:	2001      	movs	r0, #1
 801051e:	e000      	b.n	8010522 <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 8010520:	2000      	movs	r0, #0
	}
 8010522:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8010524:	2000      	movs	r0, #0
 8010526:	e7fc      	b.n	8010522 <xTaskPriorityDisinherit+0x5e>
 8010528:	2000      	movs	r0, #0
		return xReturn;
 801052a:	e7fa      	b.n	8010522 <xTaskPriorityDisinherit+0x5e>
 801052c:	20001d6c 	.word	0x20001d6c
 8010530:	20001e1c 	.word	0x20001e1c
 8010534:	20001d78 	.word	0x20001d78

08010538 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010538:	b570      	push	{r4, r5, r6, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801053e:	2300      	movs	r3, #0
 8010540:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010542:	4b28      	ldr	r3, [pc, #160]	; (80105e4 <vTaskList+0xac>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010548:	6818      	ldr	r0, [r3, #0]
 801054a:	0140      	lsls	r0, r0, #5
 801054c:	f000 fc66 	bl	8010e1c <pvPortMalloc>
 8010550:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 8010552:	d045      	beq.n	80105e0 <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010554:	9903      	ldr	r1, [sp, #12]
 8010556:	2200      	movs	r2, #0
 8010558:	f7ff fdd0 	bl	80100fc <uxTaskGetSystemState>
 801055c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801055e:	2300      	movs	r3, #0
 8010560:	9302      	str	r3, [sp, #8]
 8010562:	e023      	b.n	80105ac <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010564:	2b01      	cmp	r3, #1
 8010566:	d134      	bne.n	80105d2 <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 8010568:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801056a:	9b02      	ldr	r3, [sp, #8]
 801056c:	015b      	lsls	r3, r3, #5
 801056e:	18f3      	adds	r3, r6, r3
 8010570:	6859      	ldr	r1, [r3, #4]
 8010572:	0020      	movs	r0, r4
 8010574:	f7ff fb2a 	bl	800fbcc <prvWriteNameToBuffer>
 8010578:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 801057a:	9b02      	ldr	r3, [sp, #8]
 801057c:	015b      	lsls	r3, r3, #5
 801057e:	18f3      	adds	r3, r6, r3
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	9a02      	ldr	r2, [sp, #8]
 8010584:	0152      	lsls	r2, r2, #5
 8010586:	18b2      	adds	r2, r6, r2
 8010588:	8b91      	ldrh	r1, [r2, #28]
 801058a:	9a02      	ldr	r2, [sp, #8]
 801058c:	0152      	lsls	r2, r2, #5
 801058e:	18b2      	adds	r2, r6, r2
 8010590:	6892      	ldr	r2, [r2, #8]
 8010592:	9201      	str	r2, [sp, #4]
 8010594:	9100      	str	r1, [sp, #0]
 8010596:	002a      	movs	r2, r5
 8010598:	4913      	ldr	r1, [pc, #76]	; (80105e8 <vTaskList+0xb0>)
 801059a:	f003 ff31 	bl	8014400 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 801059e:	0020      	movs	r0, r4
 80105a0:	f7ef fdba 	bl	8000118 <strlen>
 80105a4:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 80105a6:	9b02      	ldr	r3, [sp, #8]
 80105a8:	3301      	adds	r3, #1
 80105aa:	9302      	str	r3, [sp, #8]
 80105ac:	9a02      	ldr	r2, [sp, #8]
 80105ae:	9b03      	ldr	r3, [sp, #12]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d212      	bcs.n	80105da <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80105b4:	9b02      	ldr	r3, [sp, #8]
 80105b6:	015b      	lsls	r3, r3, #5
 80105b8:	18f3      	adds	r3, r6, r3
 80105ba:	7b1b      	ldrb	r3, [r3, #12]
 80105bc:	2b02      	cmp	r3, #2
 80105be:	d00a      	beq.n	80105d6 <vTaskList+0x9e>
 80105c0:	d9d0      	bls.n	8010564 <vTaskList+0x2c>
 80105c2:	2b03      	cmp	r3, #3
 80105c4:	d003      	beq.n	80105ce <vTaskList+0x96>
 80105c6:	2b04      	cmp	r3, #4
 80105c8:	d103      	bne.n	80105d2 <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80105ca:	2544      	movs	r5, #68	; 0x44
										break;
 80105cc:	e7cd      	b.n	801056a <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80105ce:	2553      	movs	r5, #83	; 0x53
										break;
 80105d0:	e7cb      	b.n	801056a <vTaskList+0x32>
										cStatus = 0x00;
 80105d2:	2500      	movs	r5, #0
										break;
 80105d4:	e7c9      	b.n	801056a <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80105d6:	2542      	movs	r5, #66	; 0x42
 80105d8:	e7c7      	b.n	801056a <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80105da:	0030      	movs	r0, r6
 80105dc:	f000 fc96 	bl	8010f0c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105e0:	b004      	add	sp, #16
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	20001e08 	.word	0x20001e08
 80105e8:	0801bb30 	.word	0x0801bb30

080105ec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80105f2:	2300      	movs	r3, #0
 80105f4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80105f6:	4b25      	ldr	r3, [pc, #148]	; (801068c <vTaskGetRunTimeStats+0xa0>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80105fc:	6818      	ldr	r0, [r3, #0]
 80105fe:	0140      	lsls	r0, r0, #5
 8010600:	f000 fc0c 	bl	8010e1c <pvPortMalloc>
 8010604:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 8010606:	d03e      	beq.n	8010686 <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010608:	9903      	ldr	r1, [sp, #12]
 801060a:	aa01      	add	r2, sp, #4
 801060c:	f7ff fd76 	bl	80100fc <uxTaskGetSystemState>
 8010610:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8010612:	2164      	movs	r1, #100	; 0x64
 8010614:	9801      	ldr	r0, [sp, #4]
 8010616:	f7ef fd9b 	bl	8000150 <__udivsi3>
 801061a:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 801061c:	2800      	cmp	r0, #0
 801061e:	d02f      	beq.n	8010680 <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8010620:	2300      	movs	r3, #0
 8010622:	9302      	str	r3, [sp, #8]
 8010624:	e00d      	b.n	8010642 <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010626:	9b02      	ldr	r3, [sp, #8]
 8010628:	015b      	lsls	r3, r3, #5
 801062a:	18f3      	adds	r3, r6, r3
 801062c:	699a      	ldr	r2, [r3, #24]
 801062e:	4918      	ldr	r1, [pc, #96]	; (8010690 <vTaskGetRunTimeStats+0xa4>)
 8010630:	f003 fee6 	bl	8014400 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 8010634:	0020      	movs	r0, r4
 8010636:	f7ef fd6f 	bl	8000118 <strlen>
 801063a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 801063c:	9b02      	ldr	r3, [sp, #8]
 801063e:	3301      	adds	r3, #1
 8010640:	9302      	str	r3, [sp, #8]
 8010642:	9a02      	ldr	r2, [sp, #8]
 8010644:	9b03      	ldr	r3, [sp, #12]
 8010646:	429a      	cmp	r2, r3
 8010648:	d21a      	bcs.n	8010680 <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 801064a:	9b02      	ldr	r3, [sp, #8]
 801064c:	015b      	lsls	r3, r3, #5
 801064e:	18f3      	adds	r3, r6, r3
 8010650:	6998      	ldr	r0, [r3, #24]
 8010652:	9901      	ldr	r1, [sp, #4]
 8010654:	f7ef fd7c 	bl	8000150 <__udivsi3>
 8010658:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	015b      	lsls	r3, r3, #5
 801065e:	18f3      	adds	r3, r6, r3
 8010660:	6859      	ldr	r1, [r3, #4]
 8010662:	0020      	movs	r0, r4
 8010664:	f7ff fab2 	bl	800fbcc <prvWriteNameToBuffer>
 8010668:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801066a:	2d00      	cmp	r5, #0
 801066c:	d0db      	beq.n	8010626 <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801066e:	9b02      	ldr	r3, [sp, #8]
 8010670:	015b      	lsls	r3, r3, #5
 8010672:	18f3      	adds	r3, r6, r3
 8010674:	699a      	ldr	r2, [r3, #24]
 8010676:	002b      	movs	r3, r5
 8010678:	4906      	ldr	r1, [pc, #24]	; (8010694 <vTaskGetRunTimeStats+0xa8>)
 801067a:	f003 fec1 	bl	8014400 <sprintf>
 801067e:	e7d9      	b.n	8010634 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010680:	0030      	movs	r0, r6
 8010682:	f000 fc43 	bl	8010f0c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010686:	b004      	add	sp, #16
 8010688:	bd70      	pop	{r4, r5, r6, pc}
 801068a:	46c0      	nop			; (mov r8, r8)
 801068c:	20001e08 	.word	0x20001e08
 8010690:	0801bb24 	.word	0x0801bb24
 8010694:	0801bb18 	.word	0x0801bb18

08010698 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010698:	4b05      	ldr	r3, [pc, #20]	; (80106b0 <pvTaskIncrementMutexHeldCount+0x18>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80106a0:	4b03      	ldr	r3, [pc, #12]	; (80106b0 <pvTaskIncrementMutexHeldCount+0x18>)
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80106a6:	3301      	adds	r3, #1
 80106a8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80106aa:	4b01      	ldr	r3, [pc, #4]	; (80106b0 <pvTaskIncrementMutexHeldCount+0x18>)
 80106ac:	6818      	ldr	r0, [r3, #0]
	}
 80106ae:	4770      	bx	lr
 80106b0:	20001d6c 	.word	0x20001d6c

080106b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	0005      	movs	r5, r0
 80106b8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80106ba:	f000 fafb 	bl	8010cb4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80106be:	4b20      	ldr	r3, [pc, #128]	; (8010740 <ulTaskNotifyTake+0x8c>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d106      	bne.n	80106d6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80106c8:	4b1d      	ldr	r3, [pc, #116]	; (8010740 <ulTaskNotifyTake+0x8c>)
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	235c      	movs	r3, #92	; 0x5c
 80106ce:	2101      	movs	r1, #1
 80106d0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80106d2:	2c00      	cmp	r4, #0
 80106d4:	d118      	bne.n	8010708 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80106d6:	f000 faf9 	bl	8010ccc <vPortExitCritical>

		taskENTER_CRITICAL();
 80106da:	f000 faeb 	bl	8010cb4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80106de:	4b18      	ldr	r3, [pc, #96]	; (8010740 <ulTaskNotifyTake+0x8c>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80106e4:	2c00      	cmp	r4, #0
 80106e6:	d006      	beq.n	80106f6 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80106e8:	2d00      	cmp	r5, #0
 80106ea:	d123      	bne.n	8010734 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80106ec:	4b14      	ldr	r3, [pc, #80]	; (8010740 <ulTaskNotifyTake+0x8c>)
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80106f2:	3b01      	subs	r3, #1
 80106f4:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80106f6:	4b12      	ldr	r3, [pc, #72]	; (8010740 <ulTaskNotifyTake+0x8c>)
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	235c      	movs	r3, #92	; 0x5c
 80106fc:	2100      	movs	r1, #0
 80106fe:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8010700:	f000 fae4 	bl	8010ccc <vPortExitCritical>

		return ulReturn;
	}
 8010704:	0020      	movs	r0, r4
 8010706:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010708:	4b0d      	ldr	r3, [pc, #52]	; (8010740 <ulTaskNotifyTake+0x8c>)
 801070a:	6818      	ldr	r0, [r3, #0]
 801070c:	3004      	adds	r0, #4
 801070e:	f7fe fde3 	bl	800f2d8 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010712:	1c63      	adds	r3, r4, #1
 8010714:	d007      	beq.n	8010726 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 8010716:	4b0b      	ldr	r3, [pc, #44]	; (8010744 <ulTaskNotifyTake+0x90>)
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 801071c:	f7ff fa2c 	bl	800fb78 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010720:	f000 fabc 	bl	8010c9c <vPortYield>
 8010724:	e7d7      	b.n	80106d6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010726:	4b06      	ldr	r3, [pc, #24]	; (8010740 <ulTaskNotifyTake+0x8c>)
 8010728:	6819      	ldr	r1, [r3, #0]
 801072a:	3104      	adds	r1, #4
 801072c:	4806      	ldr	r0, [pc, #24]	; (8010748 <ulTaskNotifyTake+0x94>)
 801072e:	f7fe fdaf 	bl	800f290 <vListInsertEnd>
 8010732:	e7f5      	b.n	8010720 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010734:	4b02      	ldr	r3, [pc, #8]	; (8010740 <ulTaskNotifyTake+0x8c>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2200      	movs	r2, #0
 801073a:	659a      	str	r2, [r3, #88]	; 0x58
 801073c:	e7db      	b.n	80106f6 <ulTaskNotifyTake+0x42>
 801073e:	46c0      	nop			; (mov r8, r8)
 8010740:	20001d6c 	.word	0x20001d6c
 8010744:	20001e8c 	.word	0x20001e8c
 8010748:	20001e64 	.word	0x20001e64

0801074c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074e:	0004      	movs	r4, r0
 8010750:	000e      	movs	r6, r1
 8010752:	0015      	movs	r5, r2
 8010754:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8010756:	2800      	cmp	r0, #0
 8010758:	d101      	bne.n	801075e <xTaskGenericNotify+0x12>
 801075a:	b672      	cpsid	i
 801075c:	e7fe      	b.n	801075c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 801075e:	f000 faa9 	bl	8010cb4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010762:	2f00      	cmp	r7, #0
 8010764:	d001      	beq.n	801076a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010768:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 801076a:	225c      	movs	r2, #92	; 0x5c
 801076c:	5ca3      	ldrb	r3, [r4, r2]
 801076e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010770:	2102      	movs	r1, #2
 8010772:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 8010774:	2d02      	cmp	r5, #2
 8010776:	d017      	beq.n	80107a8 <xTaskGenericNotify+0x5c>
 8010778:	d908      	bls.n	801078c <xTaskGenericNotify+0x40>
 801077a:	2d03      	cmp	r5, #3
 801077c:	d019      	beq.n	80107b2 <xTaskGenericNotify+0x66>
 801077e:	2d04      	cmp	r5, #4
 8010780:	d106      	bne.n	8010790 <xTaskGenericNotify+0x44>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8010782:	2b02      	cmp	r3, #2
 8010784:	d018      	beq.n	80107b8 <xTaskGenericNotify+0x6c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010786:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 8010788:	2501      	movs	r5, #1
 801078a:	e007      	b.n	801079c <xTaskGenericNotify+0x50>
			switch( eAction )
 801078c:	2d01      	cmp	r5, #1
 801078e:	d001      	beq.n	8010794 <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 8010790:	2501      	movs	r5, #1
 8010792:	e003      	b.n	801079c <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 8010794:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010796:	4316      	orrs	r6, r2
 8010798:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 801079a:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 801079c:	2b01      	cmp	r3, #1
 801079e:	d00d      	beq.n	80107bc <xTaskGenericNotify+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80107a0:	f000 fa94 	bl	8010ccc <vPortExitCritical>

		return xReturn;
	}
 80107a4:	0028      	movs	r0, r5
 80107a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80107a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80107aa:	3201      	adds	r2, #1
 80107ac:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80107ae:	2501      	movs	r5, #1
					break;
 80107b0:	e7f4      	b.n	801079c <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 80107b2:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80107b4:	2501      	movs	r5, #1
					break;
 80107b6:	e7f1      	b.n	801079c <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 80107b8:	2500      	movs	r5, #0
 80107ba:	e7ef      	b.n	801079c <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80107bc:	1d26      	adds	r6, r4, #4
 80107be:	0030      	movs	r0, r6
 80107c0:	f7fe fd8a 	bl	800f2d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80107c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107c6:	4a0d      	ldr	r2, [pc, #52]	; (80107fc <xTaskGenericNotify+0xb0>)
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d901      	bls.n	80107d2 <xTaskGenericNotify+0x86>
 80107ce:	4a0b      	ldr	r2, [pc, #44]	; (80107fc <xTaskGenericNotify+0xb0>)
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	2014      	movs	r0, #20
 80107d4:	4358      	muls	r0, r3
 80107d6:	4b0a      	ldr	r3, [pc, #40]	; (8010800 <xTaskGenericNotify+0xb4>)
 80107d8:	18c0      	adds	r0, r0, r3
 80107da:	0031      	movs	r1, r6
 80107dc:	f7fe fd58 	bl	800f290 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80107e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d001      	beq.n	80107ea <xTaskGenericNotify+0x9e>
 80107e6:	b672      	cpsid	i
 80107e8:	e7fe      	b.n	80107e8 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107ec:	4b05      	ldr	r3, [pc, #20]	; (8010804 <xTaskGenericNotify+0xb8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d9d4      	bls.n	80107a0 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 80107f6:	f000 fa51 	bl	8010c9c <vPortYield>
 80107fa:	e7d1      	b.n	80107a0 <xTaskGenericNotify+0x54>
 80107fc:	20001e1c 	.word	0x20001e1c
 8010800:	20001d78 	.word	0x20001d78
 8010804:	20001d6c 	.word	0x20001d6c

08010808 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010808:	4b06      	ldr	r3, [pc, #24]	; (8010824 <prvGetNextExpireTime+0x1c>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	6813      	ldr	r3, [r2, #0]
 801080e:	4259      	negs	r1, r3
 8010810:	414b      	adcs	r3, r1
 8010812:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010814:	2b00      	cmp	r3, #0
 8010816:	d102      	bne.n	801081e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010818:	68d3      	ldr	r3, [r2, #12]
 801081a:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 801081c:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 801081e:	2000      	movs	r0, #0
	return xNextExpireTime;
 8010820:	e7fc      	b.n	801081c <prvGetNextExpireTime+0x14>
 8010822:	46c0      	nop			; (mov r8, r8)
 8010824:	20001e94 	.word	0x20001e94

08010828 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010828:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801082a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801082c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801082e:	4291      	cmp	r1, r2
 8010830:	d80c      	bhi.n	801084c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010832:	1ad2      	subs	r2, r2, r3
 8010834:	6983      	ldr	r3, [r0, #24]
 8010836:	429a      	cmp	r2, r3
 8010838:	d301      	bcc.n	801083e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801083a:	2001      	movs	r0, #1
 801083c:	e010      	b.n	8010860 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801083e:	1d01      	adds	r1, r0, #4
 8010840:	4b09      	ldr	r3, [pc, #36]	; (8010868 <prvInsertTimerInActiveList+0x40>)
 8010842:	6818      	ldr	r0, [r3, #0]
 8010844:	f7fe fd30 	bl	800f2a8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010848:	2000      	movs	r0, #0
 801084a:	e009      	b.n	8010860 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801084c:	429a      	cmp	r2, r3
 801084e:	d201      	bcs.n	8010854 <prvInsertTimerInActiveList+0x2c>
 8010850:	4299      	cmp	r1, r3
 8010852:	d206      	bcs.n	8010862 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010854:	1d01      	adds	r1, r0, #4
 8010856:	4b05      	ldr	r3, [pc, #20]	; (801086c <prvInsertTimerInActiveList+0x44>)
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	f7fe fd25 	bl	800f2a8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801085e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8010860:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 8010862:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010864:	e7fc      	b.n	8010860 <prvInsertTimerInActiveList+0x38>
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	20001e98 	.word	0x20001e98
 801086c:	20001e94 	.word	0x20001e94

08010870 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010870:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010872:	f000 fa1f 	bl	8010cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010876:	4b11      	ldr	r3, [pc, #68]	; (80108bc <prvCheckForValidListAndQueue+0x4c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d002      	beq.n	8010884 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801087e:	f000 fa25 	bl	8010ccc <vPortExitCritical>
}
 8010882:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010884:	4d0e      	ldr	r5, [pc, #56]	; (80108c0 <prvCheckForValidListAndQueue+0x50>)
 8010886:	0028      	movs	r0, r5
 8010888:	f7fe fcf4 	bl	800f274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801088c:	4c0d      	ldr	r4, [pc, #52]	; (80108c4 <prvCheckForValidListAndQueue+0x54>)
 801088e:	0020      	movs	r0, r4
 8010890:	f7fe fcf0 	bl	800f274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010894:	4b0c      	ldr	r3, [pc, #48]	; (80108c8 <prvCheckForValidListAndQueue+0x58>)
 8010896:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010898:	4b0c      	ldr	r3, [pc, #48]	; (80108cc <prvCheckForValidListAndQueue+0x5c>)
 801089a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801089c:	2200      	movs	r2, #0
 801089e:	2110      	movs	r1, #16
 80108a0:	2004      	movs	r0, #4
 80108a2:	f7fe fe0c 	bl	800f4be <xQueueGenericCreate>
 80108a6:	4b05      	ldr	r3, [pc, #20]	; (80108bc <prvCheckForValidListAndQueue+0x4c>)
 80108a8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d101      	bne.n	80108b2 <prvCheckForValidListAndQueue+0x42>
 80108ae:	b672      	cpsid	i
 80108b0:	e7fe      	b.n	80108b0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80108b2:	4907      	ldr	r1, [pc, #28]	; (80108d0 <prvCheckForValidListAndQueue+0x60>)
 80108b4:	f7ff f83a 	bl	800f92c <vQueueAddToRegistry>
 80108b8:	e7e1      	b.n	801087e <prvCheckForValidListAndQueue+0xe>
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	20001ec8 	.word	0x20001ec8
 80108c0:	20001e9c 	.word	0x20001e9c
 80108c4:	20001eb0 	.word	0x20001eb0
 80108c8:	20001e94 	.word	0x20001e94
 80108cc:	20001e98 	.word	0x20001e98
 80108d0:	0801bb70 	.word	0x0801bb70

080108d4 <xTimerCreateTimerTask>:
{
 80108d4:	b500      	push	{lr}
 80108d6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80108d8:	f7ff ffca 	bl	8010870 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80108dc:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <xTimerCreateTimerTask+0x34>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00d      	beq.n	8010900 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80108e4:	2300      	movs	r3, #0
 80108e6:	9303      	str	r3, [sp, #12]
 80108e8:	9302      	str	r3, [sp, #8]
 80108ea:	9301      	str	r3, [sp, #4]
 80108ec:	3303      	adds	r3, #3
 80108ee:	9300      	str	r3, [sp, #0]
 80108f0:	2300      	movs	r3, #0
 80108f2:	22a0      	movs	r2, #160	; 0xa0
 80108f4:	4905      	ldr	r1, [pc, #20]	; (801090c <xTimerCreateTimerTask+0x38>)
 80108f6:	4806      	ldr	r0, [pc, #24]	; (8010910 <xTimerCreateTimerTask+0x3c>)
 80108f8:	f7ff f97a 	bl	800fbf0 <xTaskGenericCreate>
	configASSERT( xReturn );
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d101      	bne.n	8010904 <xTimerCreateTimerTask+0x30>
 8010900:	b672      	cpsid	i
 8010902:	e7fe      	b.n	8010902 <xTimerCreateTimerTask+0x2e>
}
 8010904:	b005      	add	sp, #20
 8010906:	bd00      	pop	{pc}
 8010908:	20001ec8 	.word	0x20001ec8
 801090c:	0801bb78 	.word	0x0801bb78
 8010910:	08010bb9 	.word	0x08010bb9

08010914 <xTimerCreate>:
{
 8010914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010916:	46c6      	mov	lr, r8
 8010918:	b500      	push	{lr}
 801091a:	4680      	mov	r8, r0
 801091c:	000d      	movs	r5, r1
 801091e:	0017      	movs	r7, r2
 8010920:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8010922:	2900      	cmp	r1, #0
 8010924:	d014      	beq.n	8010950 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8010926:	202c      	movs	r0, #44	; 0x2c
 8010928:	f000 fa78 	bl	8010e1c <pvPortMalloc>
 801092c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 801092e:	d00b      	beq.n	8010948 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010930:	f7ff ff9e 	bl	8010870 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010934:	4643      	mov	r3, r8
 8010936:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010938:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 801093a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 801093c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801093e:	9b06      	ldr	r3, [sp, #24]
 8010940:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010942:	1d20      	adds	r0, r4, #4
 8010944:	f7fe fca1 	bl	800f28a <vListInitialiseItem>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010948:	2d00      	cmp	r5, #0
 801094a:	d103      	bne.n	8010954 <xTimerCreate+0x40>
 801094c:	b672      	cpsid	i
 801094e:	e7fe      	b.n	801094e <xTimerCreate+0x3a>
		pxNewTimer = NULL;
 8010950:	2400      	movs	r4, #0
 8010952:	e7f9      	b.n	8010948 <xTimerCreate+0x34>
}
 8010954:	0020      	movs	r0, r4
 8010956:	bc04      	pop	{r2}
 8010958:	4690      	mov	r8, r2
 801095a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801095c <xTimerGenericCommand>:
{
 801095c:	b530      	push	{r4, r5, lr}
 801095e:	b085      	sub	sp, #20
 8010960:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8010962:	4b13      	ldr	r3, [pc, #76]	; (80109b0 <xTimerGenericCommand+0x54>)
 8010964:	681c      	ldr	r4, [r3, #0]
 8010966:	2c00      	cmp	r4, #0
 8010968:	d020      	beq.n	80109ac <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 801096a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801096c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801096e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010970:	2905      	cmp	r1, #5
 8010972:	dc13      	bgt.n	801099c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010974:	f7ff fd56 	bl	8010424 <xTaskGetSchedulerState>
 8010978:	2802      	cmp	r0, #2
 801097a:	d007      	beq.n	801098c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801097c:	4b0c      	ldr	r3, [pc, #48]	; (80109b0 <xTimerGenericCommand+0x54>)
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	2300      	movs	r3, #0
 8010982:	2200      	movs	r2, #0
 8010984:	4669      	mov	r1, sp
 8010986:	f7fe fdd7 	bl	800f538 <xQueueGenericSend>
 801098a:	e00d      	b.n	80109a8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801098c:	4b08      	ldr	r3, [pc, #32]	; (80109b0 <xTimerGenericCommand+0x54>)
 801098e:	6818      	ldr	r0, [r3, #0]
 8010990:	2300      	movs	r3, #0
 8010992:	9a08      	ldr	r2, [sp, #32]
 8010994:	4669      	mov	r1, sp
 8010996:	f7fe fdcf 	bl	800f538 <xQueueGenericSend>
 801099a:	e005      	b.n	80109a8 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801099c:	2300      	movs	r3, #0
 801099e:	002a      	movs	r2, r5
 80109a0:	4669      	mov	r1, sp
 80109a2:	0020      	movs	r0, r4
 80109a4:	f7fe fe57 	bl	800f656 <xQueueGenericSendFromISR>
}
 80109a8:	b005      	add	sp, #20
 80109aa:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80109ac:	2000      	movs	r0, #0
	return xReturn;
 80109ae:	e7fb      	b.n	80109a8 <xTimerGenericCommand+0x4c>
 80109b0:	20001ec8 	.word	0x20001ec8

080109b4 <prvSwitchTimerLists>:
{
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109b8:	4b17      	ldr	r3, [pc, #92]	; (8010a18 <prvSwitchTimerLists+0x64>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	2a00      	cmp	r2, #0
 80109c0:	d023      	beq.n	8010a0a <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109c6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109c8:	1d25      	adds	r5, r4, #4
 80109ca:	0028      	movs	r0, r5
 80109cc:	f7fe fc84 	bl	800f2d8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109d0:	0020      	movs	r0, r4
 80109d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80109d6:	69e3      	ldr	r3, [r4, #28]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d1ed      	bne.n	80109b8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109dc:	69a3      	ldr	r3, [r4, #24]
 80109de:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 80109e0:	429e      	cmp	r6, r3
 80109e2:	d207      	bcs.n	80109f4 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109e4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109e6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109e8:	4b0b      	ldr	r3, [pc, #44]	; (8010a18 <prvSwitchTimerLists+0x64>)
 80109ea:	6818      	ldr	r0, [r3, #0]
 80109ec:	0029      	movs	r1, r5
 80109ee:	f7fe fc5b 	bl	800f2a8 <vListInsert>
 80109f2:	e7e1      	b.n	80109b8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109f4:	2300      	movs	r3, #0
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	0032      	movs	r2, r6
 80109fa:	2100      	movs	r1, #0
 80109fc:	0020      	movs	r0, r4
 80109fe:	f7ff ffad 	bl	801095c <xTimerGenericCommand>
				configASSERT( xResult );
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d1d8      	bne.n	80109b8 <prvSwitchTimerLists+0x4>
 8010a06:	b672      	cpsid	i
 8010a08:	e7fe      	b.n	8010a08 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 8010a0a:	4a04      	ldr	r2, [pc, #16]	; (8010a1c <prvSwitchTimerLists+0x68>)
 8010a0c:	4902      	ldr	r1, [pc, #8]	; (8010a18 <prvSwitchTimerLists+0x64>)
 8010a0e:	6810      	ldr	r0, [r2, #0]
 8010a10:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8010a12:	6013      	str	r3, [r2, #0]
}
 8010a14:	b002      	add	sp, #8
 8010a16:	bd70      	pop	{r4, r5, r6, pc}
 8010a18:	20001e94 	.word	0x20001e94
 8010a1c:	20001e98 	.word	0x20001e98

08010a20 <prvSampleTimeNow>:
{
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 8010a24:	f7ff fa08 	bl	800fe38 <xTaskGetTickCount>
 8010a28:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010a2a:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <prvSampleTimeNow+0x28>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4283      	cmp	r3, r0
 8010a30:	d805      	bhi.n	8010a3e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8010a32:	2300      	movs	r3, #0
 8010a34:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8010a36:	4b04      	ldr	r3, [pc, #16]	; (8010a48 <prvSampleTimeNow+0x28>)
 8010a38:	601c      	str	r4, [r3, #0]
}
 8010a3a:	0020      	movs	r0, r4
 8010a3c:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 8010a3e:	f7ff ffb9 	bl	80109b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010a42:	2301      	movs	r3, #1
 8010a44:	602b      	str	r3, [r5, #0]
 8010a46:	e7f6      	b.n	8010a36 <prvSampleTimeNow+0x16>
 8010a48:	20001ec4 	.word	0x20001ec4

08010a4c <prvProcessExpiredTimer>:
{
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	0005      	movs	r5, r0
 8010a52:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a54:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <prvProcessExpiredTimer+0x50>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a5c:	1d20      	adds	r0, r4, #4
 8010a5e:	f7fe fc3b 	bl	800f2d8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010a62:	69e3      	ldr	r3, [r4, #28]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d004      	beq.n	8010a72 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a6a:	0020      	movs	r0, r4
 8010a6c:	4798      	blx	r3
}
 8010a6e:	b002      	add	sp, #8
 8010a70:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8010a72:	69a3      	ldr	r3, [r4, #24]
 8010a74:	1959      	adds	r1, r3, r5
 8010a76:	002b      	movs	r3, r5
 8010a78:	0032      	movs	r2, r6
 8010a7a:	0020      	movs	r0, r4
 8010a7c:	f7ff fed4 	bl	8010828 <prvInsertTimerInActiveList>
 8010a80:	2801      	cmp	r0, #1
 8010a82:	d1f1      	bne.n	8010a68 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a84:	2300      	movs	r3, #0
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	002a      	movs	r2, r5
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	0020      	movs	r0, r4
 8010a8e:	f7ff ff65 	bl	801095c <xTimerGenericCommand>
			configASSERT( xResult );
 8010a92:	2800      	cmp	r0, #0
 8010a94:	d1e8      	bne.n	8010a68 <prvProcessExpiredTimer+0x1c>
 8010a96:	b672      	cpsid	i
 8010a98:	e7fe      	b.n	8010a98 <prvProcessExpiredTimer+0x4c>
 8010a9a:	46c0      	nop			; (mov r8, r8)
 8010a9c:	20001e94 	.word	0x20001e94

08010aa0 <prvProcessTimerOrBlockTask>:
{
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	0004      	movs	r4, r0
 8010aa6:	000e      	movs	r6, r1
	vTaskSuspendAll();
 8010aa8:	f7ff f9be 	bl	800fe28 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010aac:	a801      	add	r0, sp, #4
 8010aae:	f7ff ffb7 	bl	8010a20 <prvSampleTimeNow>
 8010ab2:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010ab4:	9b01      	ldr	r3, [sp, #4]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d118      	bne.n	8010aec <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010aba:	2e00      	cmp	r6, #0
 8010abc:	d101      	bne.n	8010ac2 <prvProcessTimerOrBlockTask+0x22>
 8010abe:	42a0      	cmp	r0, r4
 8010ac0:	d20a      	bcs.n	8010ad8 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010ac2:	1b61      	subs	r1, r4, r5
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	; (8010af4 <prvProcessTimerOrBlockTask+0x54>)
 8010ac6:	6818      	ldr	r0, [r3, #0]
 8010ac8:	f7fe ff42 	bl	800f950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010acc:	f7ff fa4a 	bl	800ff64 <xTaskResumeAll>
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d008      	beq.n	8010ae6 <prvProcessTimerOrBlockTask+0x46>
}
 8010ad4:	b002      	add	sp, #8
 8010ad6:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 8010ad8:	f7ff fa44 	bl	800ff64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010adc:	0029      	movs	r1, r5
 8010ade:	0020      	movs	r0, r4
 8010ae0:	f7ff ffb4 	bl	8010a4c <prvProcessExpiredTimer>
 8010ae4:	e7f6      	b.n	8010ad4 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 8010ae6:	f000 f8d9 	bl	8010c9c <vPortYield>
 8010aea:	e7f3      	b.n	8010ad4 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 8010aec:	f7ff fa3a 	bl	800ff64 <xTaskResumeAll>
}
 8010af0:	e7f0      	b.n	8010ad4 <prvProcessTimerOrBlockTask+0x34>
 8010af2:	46c0      	nop			; (mov r8, r8)
 8010af4:	20001ec8 	.word	0x20001ec8

08010af8 <prvProcessReceivedCommands>:
{
 8010af8:	b510      	push	{r4, lr}
 8010afa:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010afc:	e002      	b.n	8010b04 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010afe:	9b04      	ldr	r3, [sp, #16]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	da10      	bge.n	8010b26 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b04:	4b2a      	ldr	r3, [pc, #168]	; (8010bb0 <prvProcessReceivedCommands+0xb8>)
 8010b06:	6818      	ldr	r0, [r3, #0]
 8010b08:	2300      	movs	r3, #0
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	a904      	add	r1, sp, #16
 8010b0e:	f7fe fe2b 	bl	800f768 <xQueueGenericReceive>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	d04a      	beq.n	8010bac <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010b16:	9b04      	ldr	r3, [sp, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	daf0      	bge.n	8010afe <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010b1c:	9b05      	ldr	r3, [sp, #20]
 8010b1e:	9907      	ldr	r1, [sp, #28]
 8010b20:	9806      	ldr	r0, [sp, #24]
 8010b22:	4798      	blx	r3
 8010b24:	e7eb      	b.n	8010afe <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010b26:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010b28:	6963      	ldr	r3, [r4, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b2e:	1d20      	adds	r0, r4, #4
 8010b30:	f7fe fbd2 	bl	800f2d8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b34:	a803      	add	r0, sp, #12
 8010b36:	f7ff ff73 	bl	8010a20 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010b3a:	9b04      	ldr	r3, [sp, #16]
 8010b3c:	2b09      	cmp	r3, #9
 8010b3e:	d8e1      	bhi.n	8010b04 <prvProcessReceivedCommands+0xc>
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	491c      	ldr	r1, [pc, #112]	; (8010bb4 <prvProcessReceivedCommands+0xbc>)
 8010b44:	58cb      	ldr	r3, [r1, r3]
 8010b46:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8010b48:	9b05      	ldr	r3, [sp, #20]
 8010b4a:	69a2      	ldr	r2, [r4, #24]
 8010b4c:	4694      	mov	ip, r2
 8010b4e:	4463      	add	r3, ip
 8010b50:	0019      	movs	r1, r3
 8010b52:	9b05      	ldr	r3, [sp, #20]
 8010b54:	0002      	movs	r2, r0
 8010b56:	0020      	movs	r0, r4
 8010b58:	f7ff fe66 	bl	8010828 <prvInsertTimerInActiveList>
 8010b5c:	2801      	cmp	r0, #1
 8010b5e:	d1d1      	bne.n	8010b04 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b60:	0020      	movs	r0, r4
 8010b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b64:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010b66:	69e3      	ldr	r3, [r4, #28]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d1cb      	bne.n	8010b04 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b6c:	9b05      	ldr	r3, [sp, #20]
 8010b6e:	69a1      	ldr	r1, [r4, #24]
 8010b70:	468c      	mov	ip, r1
 8010b72:	4463      	add	r3, ip
 8010b74:	001a      	movs	r2, r3
 8010b76:	2300      	movs	r3, #0
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	0020      	movs	r0, r4
 8010b7e:	f7ff feed 	bl	801095c <xTimerGenericCommand>
							configASSERT( xResult );
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d1be      	bne.n	8010b04 <prvProcessReceivedCommands+0xc>
 8010b86:	b672      	cpsid	i
 8010b88:	e7fe      	b.n	8010b88 <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b8a:	9905      	ldr	r1, [sp, #20]
 8010b8c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b8e:	2900      	cmp	r1, #0
 8010b90:	d006      	beq.n	8010ba0 <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b92:	1809      	adds	r1, r1, r0
 8010b94:	0003      	movs	r3, r0
 8010b96:	0002      	movs	r2, r0
 8010b98:	0020      	movs	r0, r4
 8010b9a:	f7ff fe45 	bl	8010828 <prvInsertTimerInActiveList>
					break;
 8010b9e:	e7b1      	b.n	8010b04 <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ba0:	b672      	cpsid	i
 8010ba2:	e7fe      	b.n	8010ba2 <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 8010ba4:	0020      	movs	r0, r4
 8010ba6:	f000 f9b1 	bl	8010f0c <vPortFree>
					break;
 8010baa:	e7ab      	b.n	8010b04 <prvProcessReceivedCommands+0xc>
}
 8010bac:	b008      	add	sp, #32
 8010bae:	bd10      	pop	{r4, pc}
 8010bb0:	20001ec8 	.word	0x20001ec8
 8010bb4:	0801bb48 	.word	0x0801bb48

08010bb8 <prvTimerTask>:
{
 8010bb8:	b500      	push	{lr}
 8010bba:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bbc:	a801      	add	r0, sp, #4
 8010bbe:	f7ff fe23 	bl	8010808 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010bc2:	9901      	ldr	r1, [sp, #4]
 8010bc4:	f7ff ff6c 	bl	8010aa0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8010bc8:	f7ff ff96 	bl	8010af8 <prvProcessReceivedCommands>
 8010bcc:	e7f6      	b.n	8010bbc <prvTimerTask+0x4>

08010bce <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010bce:	b510      	push	{r4, lr}
 8010bd0:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010bd2:	d101      	bne.n	8010bd8 <pvTimerGetTimerID+0xa>
 8010bd4:	b672      	cpsid	i
 8010bd6:	e7fe      	b.n	8010bd6 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8010bd8:	f000 f86c 	bl	8010cb4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010bdc:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010bde:	f000 f875 	bl	8010ccc <vPortExitCritical>

	return pvReturn;
}
 8010be2:	0020      	movs	r0, r4
 8010be4:	bd10      	pop	{r4, pc}
	...

08010be8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010be8:	4b03      	ldr	r3, [pc, #12]	; (8010bf8 <prvTaskExitError+0x10>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3301      	adds	r3, #1
 8010bee:	d001      	beq.n	8010bf4 <prvTaskExitError+0xc>
 8010bf0:	b672      	cpsid	i
 8010bf2:	e7fe      	b.n	8010bf2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010bf4:	b672      	cpsid	i
 8010bf6:	e7fe      	b.n	8010bf6 <prvTaskExitError+0xe>
 8010bf8:	20000124 	.word	0x20000124

08010bfc <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010bfc:	4a06      	ldr	r2, [pc, #24]	; (8010c18 <pxCurrentTCBConst2>)
 8010bfe:	6813      	ldr	r3, [r2, #0]
 8010c00:	6818      	ldr	r0, [r3, #0]
 8010c02:	3020      	adds	r0, #32
 8010c04:	f380 8809 	msr	PSP, r0
 8010c08:	2002      	movs	r0, #2
 8010c0a:	f380 8814 	msr	CONTROL, r0
 8010c0e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010c10:	46ae      	mov	lr, r5
 8010c12:	b662      	cpsie	i
 8010c14:	bd00      	pop	{pc}
 8010c16:	46c0      	nop			; (mov r8, r8)

08010c18 <pxCurrentTCBConst2>:
 8010c18:	20001d6c 	.word	0x20001d6c

08010c1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8010c1c:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c1e:	4b06      	ldr	r3, [pc, #24]	; (8010c38 <prvSetupTimerInterrupt+0x1c>)
 8010c20:	6818      	ldr	r0, [r3, #0]
 8010c22:	21fa      	movs	r1, #250	; 0xfa
 8010c24:	0089      	lsls	r1, r1, #2
 8010c26:	f7ef fa93 	bl	8000150 <__udivsi3>
 8010c2a:	3801      	subs	r0, #1
 8010c2c:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <prvSetupTimerInterrupt+0x20>)
 8010c2e:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010c30:	4b03      	ldr	r3, [pc, #12]	; (8010c40 <prvSetupTimerInterrupt+0x24>)
 8010c32:	2207      	movs	r2, #7
 8010c34:	601a      	str	r2, [r3, #0]
}
 8010c36:	bd10      	pop	{r4, pc}
 8010c38:	20000110 	.word	0x20000110
 8010c3c:	e000e014 	.word	0xe000e014
 8010c40:	e000e010 	.word	0xe000e010

08010c44 <pxPortInitialiseStack>:
{
 8010c44:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c46:	1f03      	subs	r3, r0, #4
 8010c48:	2480      	movs	r4, #128	; 0x80
 8010c4a:	0464      	lsls	r4, r4, #17
 8010c4c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010c4e:	3b04      	subs	r3, #4
 8010c50:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c52:	3b04      	subs	r3, #4
 8010c54:	4902      	ldr	r1, [pc, #8]	; (8010c60 <pxPortInitialiseStack+0x1c>)
 8010c56:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c58:	3b14      	subs	r3, #20
 8010c5a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010c5c:	3840      	subs	r0, #64	; 0x40
}
 8010c5e:	bd10      	pop	{r4, pc}
 8010c60:	08010be9 	.word	0x08010be9

08010c64 <SVC_Handler>:
}
 8010c64:	4770      	bx	lr
	...

08010c68 <xPortStartScheduler>:
{
 8010c68:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010c6a:	4b0a      	ldr	r3, [pc, #40]	; (8010c94 <xPortStartScheduler+0x2c>)
 8010c6c:	6819      	ldr	r1, [r3, #0]
 8010c6e:	22ff      	movs	r2, #255	; 0xff
 8010c70:	0412      	lsls	r2, r2, #16
 8010c72:	430a      	orrs	r2, r1
 8010c74:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010c76:	6819      	ldr	r1, [r3, #0]
 8010c78:	22ff      	movs	r2, #255	; 0xff
 8010c7a:	0612      	lsls	r2, r2, #24
 8010c7c:	430a      	orrs	r2, r1
 8010c7e:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8010c80:	f7ff ffcc 	bl	8010c1c <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010c84:	4b04      	ldr	r3, [pc, #16]	; (8010c98 <xPortStartScheduler+0x30>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010c8a:	f7ff ffb7 	bl	8010bfc <vPortStartFirstTask>
	prvTaskExitError();
 8010c8e:	f7ff ffab 	bl	8010be8 <prvTaskExitError>
 8010c92:	46c0      	nop			; (mov r8, r8)
 8010c94:	e000ed20 	.word	0xe000ed20
 8010c98:	20000124 	.word	0x20000124

08010c9c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010c9c:	4b04      	ldr	r3, [pc, #16]	; (8010cb0 <vPortYield+0x14>)
 8010c9e:	2280      	movs	r2, #128	; 0x80
 8010ca0:	0552      	lsls	r2, r2, #21
 8010ca2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010ca4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010ca8:	f3bf 8f6f 	isb	sy
}
 8010cac:	4770      	bx	lr
 8010cae:	46c0      	nop			; (mov r8, r8)
 8010cb0:	e000ed04 	.word	0xe000ed04

08010cb4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010cb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8010cb6:	4a04      	ldr	r2, [pc, #16]	; (8010cc8 <vPortEnterCritical+0x14>)
 8010cb8:	6813      	ldr	r3, [r2, #0]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010cbe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010cc2:	f3bf 8f6f 	isb	sy
}
 8010cc6:	4770      	bx	lr
 8010cc8:	20000124 	.word	0x20000124

08010ccc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010ccc:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <vPortExitCritical+0x1c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <vPortExitCritical+0xc>
 8010cd4:	b672      	cpsid	i
 8010cd6:	e7fe      	b.n	8010cd6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	4a03      	ldr	r2, [pc, #12]	; (8010ce8 <vPortExitCritical+0x1c>)
 8010cdc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d100      	bne.n	8010ce4 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8010ce2:	b662      	cpsie	i
}
 8010ce4:	4770      	bx	lr
 8010ce6:	46c0      	nop			; (mov r8, r8)
 8010ce8:	20000124 	.word	0x20000124

08010cec <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010cec:	f3ef 8010 	mrs	r0, PRIMASK
 8010cf0:	b672      	cpsid	i
 8010cf2:	4770      	bx	lr
}
 8010cf4:	2000      	movs	r0, #0

08010cf6 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010cf6:	f380 8810 	msr	PRIMASK, r0
 8010cfa:	4770      	bx	lr

08010cfc <PendSV_Handler>:
	__asm volatile
 8010cfc:	f3ef 8009 	mrs	r0, PSP
 8010d00:	4b0e      	ldr	r3, [pc, #56]	; (8010d3c <pxCurrentTCBConst>)
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	3820      	subs	r0, #32
 8010d06:	6010      	str	r0, [r2, #0]
 8010d08:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010d0a:	4644      	mov	r4, r8
 8010d0c:	464d      	mov	r5, r9
 8010d0e:	4656      	mov	r6, sl
 8010d10:	465f      	mov	r7, fp
 8010d12:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010d14:	b508      	push	{r3, lr}
 8010d16:	b672      	cpsid	i
 8010d18:	f7ff fa40 	bl	801019c <vTaskSwitchContext>
 8010d1c:	b662      	cpsie	i
 8010d1e:	bc0c      	pop	{r2, r3}
 8010d20:	6811      	ldr	r1, [r2, #0]
 8010d22:	6808      	ldr	r0, [r1, #0]
 8010d24:	3010      	adds	r0, #16
 8010d26:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010d28:	46a0      	mov	r8, r4
 8010d2a:	46a9      	mov	r9, r5
 8010d2c:	46b2      	mov	sl, r6
 8010d2e:	46bb      	mov	fp, r7
 8010d30:	f380 8809 	msr	PSP, r0
 8010d34:	3820      	subs	r0, #32
 8010d36:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010d38:	4718      	bx	r3
 8010d3a:	46c0      	nop			; (mov r8, r8)

08010d3c <pxCurrentTCBConst>:
 8010d3c:	20001d6c 	.word	0x20001d6c

08010d40 <xPortSysTickHandler>:
{
 8010d40:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d42:	f7ff ffd3 	bl	8010cec <ulSetInterruptMaskFromISR>
 8010d46:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010d48:	f7ff f882 	bl	800fe50 <xTaskIncrementTick>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d003      	beq.n	8010d58 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010d50:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <xPortSysTickHandler+0x20>)
 8010d52:	2280      	movs	r2, #128	; 0x80
 8010d54:	0552      	lsls	r2, r2, #21
 8010d56:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010d58:	0020      	movs	r0, r4
 8010d5a:	f7ff ffcc 	bl	8010cf6 <vClearInterruptMaskFromISR>
}
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	e000ed04 	.word	0xe000ed04

08010d64 <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8010d64:	4a11      	ldr	r2, [pc, #68]	; (8010dac <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d66:	0753      	lsls	r3, r2, #29
 8010d68:	d01e      	beq.n	8010da8 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d6a:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010d6c:	2307      	movs	r3, #7
 8010d6e:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010d70:	4b0f      	ldr	r3, [pc, #60]	; (8010db0 <prvHeapInit+0x4c>)
 8010d72:	1a5b      	subs	r3, r3, r1
 8010d74:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010d76:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d78:	480e      	ldr	r0, [pc, #56]	; (8010db4 <prvHeapInit+0x50>)
 8010d7a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d80:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010d82:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010d84:	2007      	movs	r0, #7
 8010d86:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8010d88:	480b      	ldr	r0, [pc, #44]	; (8010db8 <prvHeapInit+0x54>)
 8010d8a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8010d8c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d8e:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010d90:	1a99      	subs	r1, r3, r2
 8010d92:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d94:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <prvHeapInit+0x58>)
 8010d98:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d9a:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <prvHeapInit+0x5c>)
 8010d9c:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d9e:	4b09      	ldr	r3, [pc, #36]	; (8010dc4 <prvHeapInit+0x60>)
 8010da0:	2280      	movs	r2, #128	; 0x80
 8010da2:	0612      	lsls	r2, r2, #24
 8010da4:	601a      	str	r2, [r3, #0]
}
 8010da6:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010da8:	4b01      	ldr	r3, [pc, #4]	; (8010db0 <prvHeapInit+0x4c>)
 8010daa:	e7e5      	b.n	8010d78 <prvHeapInit+0x14>
 8010dac:	20001ed0 	.word	0x20001ed0
 8010db0:	00004a38 	.word	0x00004a38
 8010db4:	20006914 	.word	0x20006914
 8010db8:	20001ecc 	.word	0x20001ecc
 8010dbc:	20006910 	.word	0x20006910
 8010dc0:	2000690c 	.word	0x2000690c
 8010dc4:	20006908 	.word	0x20006908

08010dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010dc8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010dca:	4b12      	ldr	r3, [pc, #72]	; (8010e14 <prvInsertBlockIntoFreeList+0x4c>)
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	4282      	cmp	r2, r0
 8010dd0:	d319      	bcc.n	8010e06 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010dd2:	6859      	ldr	r1, [r3, #4]
 8010dd4:	185c      	adds	r4, r3, r1
 8010dd6:	4284      	cmp	r4, r0
 8010dd8:	d103      	bne.n	8010de2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010dda:	6840      	ldr	r0, [r0, #4]
 8010ddc:	1809      	adds	r1, r1, r0
 8010dde:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010de0:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010de2:	6841      	ldr	r1, [r0, #4]
 8010de4:	1844      	adds	r4, r0, r1
 8010de6:	42a2      	cmp	r2, r4
 8010de8:	d111      	bne.n	8010e0e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010dea:	4c0b      	ldr	r4, [pc, #44]	; (8010e18 <prvInsertBlockIntoFreeList+0x50>)
 8010dec:	6824      	ldr	r4, [r4, #0]
 8010dee:	42a2      	cmp	r2, r4
 8010df0:	d00b      	beq.n	8010e0a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010df2:	6852      	ldr	r2, [r2, #4]
 8010df4:	1889      	adds	r1, r1, r2
 8010df6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	6812      	ldr	r2, [r2, #0]
 8010dfc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010dfe:	4298      	cmp	r0, r3
 8010e00:	d000      	beq.n	8010e04 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e02:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e04:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e06:	0013      	movs	r3, r2
 8010e08:	e7e0      	b.n	8010dcc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e0a:	6004      	str	r4, [r0, #0]
 8010e0c:	e7f7      	b.n	8010dfe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e0e:	6002      	str	r2, [r0, #0]
 8010e10:	e7f5      	b.n	8010dfe <prvInsertBlockIntoFreeList+0x36>
 8010e12:	46c0      	nop			; (mov r8, r8)
 8010e14:	20006914 	.word	0x20006914
 8010e18:	20001ecc 	.word	0x20001ecc

08010e1c <pvPortMalloc>:
{
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010e20:	f7ff f802 	bl	800fe28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010e24:	4b34      	ldr	r3, [pc, #208]	; (8010ef8 <pvPortMalloc+0xdc>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00c      	beq.n	8010e46 <pvPortMalloc+0x2a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e2c:	4b33      	ldr	r3, [pc, #204]	; (8010efc <pvPortMalloc+0xe0>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4223      	tst	r3, r4
 8010e32:	d00b      	beq.n	8010e4c <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 8010e34:	f7ff f896 	bl	800ff64 <xTaskResumeAll>
void *pvReturn = NULL;
 8010e38:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8010e3a:	f7fd fb93 	bl	800e564 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e3e:	0773      	lsls	r3, r6, #29
 8010e40:	d058      	beq.n	8010ef4 <pvPortMalloc+0xd8>
 8010e42:	b672      	cpsid	i
 8010e44:	e7fe      	b.n	8010e44 <pvPortMalloc+0x28>
			prvHeapInit();
 8010e46:	f7ff ff8d 	bl	8010d64 <prvHeapInit>
 8010e4a:	e7ef      	b.n	8010e2c <pvPortMalloc+0x10>
			if( xWantedSize > 0 )
 8010e4c:	2c00      	cmp	r4, #0
 8010e4e:	d009      	beq.n	8010e64 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8010e50:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e52:	0763      	lsls	r3, r4, #29
 8010e54:	d006      	beq.n	8010e64 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e56:	2307      	movs	r3, #7
 8010e58:	439c      	bics	r4, r3
 8010e5a:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e5c:	421c      	tst	r4, r3
 8010e5e:	d001      	beq.n	8010e64 <pvPortMalloc+0x48>
 8010e60:	b672      	cpsid	i
 8010e62:	e7fe      	b.n	8010e62 <pvPortMalloc+0x46>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e64:	2c00      	cmp	r4, #0
 8010e66:	d006      	beq.n	8010e76 <pvPortMalloc+0x5a>
 8010e68:	4b25      	ldr	r3, [pc, #148]	; (8010f00 <pvPortMalloc+0xe4>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	42a3      	cmp	r3, r4
 8010e6e:	d306      	bcc.n	8010e7e <pvPortMalloc+0x62>
				pxBlock = xStart.pxNextFreeBlock;
 8010e70:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <pvPortMalloc+0xe8>)
 8010e72:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e74:	e009      	b.n	8010e8a <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8010e76:	f7ff f875 	bl	800ff64 <xTaskResumeAll>
void *pvReturn = NULL;
 8010e7a:	2600      	movs	r6, #0
 8010e7c:	e7dd      	b.n	8010e3a <pvPortMalloc+0x1e>
	( void ) xTaskResumeAll();
 8010e7e:	f7ff f871 	bl	800ff64 <xTaskResumeAll>
void *pvReturn = NULL;
 8010e82:	2600      	movs	r6, #0
 8010e84:	e7d9      	b.n	8010e3a <pvPortMalloc+0x1e>
					pxPreviousBlock = pxBlock;
 8010e86:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e88:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e8a:	686a      	ldr	r2, [r5, #4]
 8010e8c:	42a2      	cmp	r2, r4
 8010e8e:	d202      	bcs.n	8010e96 <pvPortMalloc+0x7a>
 8010e90:	682a      	ldr	r2, [r5, #0]
 8010e92:	2a00      	cmp	r2, #0
 8010e94:	d1f7      	bne.n	8010e86 <pvPortMalloc+0x6a>
				if( pxBlock != pxEnd )
 8010e96:	4a18      	ldr	r2, [pc, #96]	; (8010ef8 <pvPortMalloc+0xdc>)
 8010e98:	6812      	ldr	r2, [r2, #0]
 8010e9a:	42aa      	cmp	r2, r5
 8010e9c:	d00c      	beq.n	8010eb8 <pvPortMalloc+0x9c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e9e:	681e      	ldr	r6, [r3, #0]
 8010ea0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ea2:	682a      	ldr	r2, [r5, #0]
 8010ea4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ea6:	686b      	ldr	r3, [r5, #4]
 8010ea8:	1b1b      	subs	r3, r3, r4
 8010eaa:	2b10      	cmp	r3, #16
 8010eac:	d90c      	bls.n	8010ec8 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010eae:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010eb0:	0742      	lsls	r2, r0, #29
 8010eb2:	d005      	beq.n	8010ec0 <pvPortMalloc+0xa4>
 8010eb4:	b672      	cpsid	i
 8010eb6:	e7fe      	b.n	8010eb6 <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
 8010eb8:	f7ff f854 	bl	800ff64 <xTaskResumeAll>
void *pvReturn = NULL;
 8010ebc:	2600      	movs	r6, #0
 8010ebe:	e7bc      	b.n	8010e3a <pvPortMalloc+0x1e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ec0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ec2:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010ec4:	f7ff ff80 	bl	8010dc8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ec8:	686a      	ldr	r2, [r5, #4]
 8010eca:	490d      	ldr	r1, [pc, #52]	; (8010f00 <pvPortMalloc+0xe4>)
 8010ecc:	680b      	ldr	r3, [r1, #0]
 8010ece:	1a9b      	subs	r3, r3, r2
 8010ed0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ed2:	490d      	ldr	r1, [pc, #52]	; (8010f08 <pvPortMalloc+0xec>)
 8010ed4:	6809      	ldr	r1, [r1, #0]
 8010ed6:	428b      	cmp	r3, r1
 8010ed8:	d201      	bcs.n	8010ede <pvPortMalloc+0xc2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010eda:	490b      	ldr	r1, [pc, #44]	; (8010f08 <pvPortMalloc+0xec>)
 8010edc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010ede:	4b07      	ldr	r3, [pc, #28]	; (8010efc <pvPortMalloc+0xe0>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8010eea:	f7ff f83b 	bl	800ff64 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010eee:	2e00      	cmp	r6, #0
 8010ef0:	d1a5      	bne.n	8010e3e <pvPortMalloc+0x22>
 8010ef2:	e7a2      	b.n	8010e3a <pvPortMalloc+0x1e>
}
 8010ef4:	0030      	movs	r0, r6
 8010ef6:	bd70      	pop	{r4, r5, r6, pc}
 8010ef8:	20001ecc 	.word	0x20001ecc
 8010efc:	20006908 	.word	0x20006908
 8010f00:	2000690c 	.word	0x2000690c
 8010f04:	20006914 	.word	0x20006914
 8010f08:	20006910 	.word	0x20006910

08010f0c <vPortFree>:
{
 8010f0c:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d020      	beq.n	8010f54 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8010f12:	0005      	movs	r5, r0
 8010f14:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f16:	686b      	ldr	r3, [r5, #4]
 8010f18:	4a0f      	ldr	r2, [pc, #60]	; (8010f58 <vPortFree+0x4c>)
 8010f1a:	6812      	ldr	r2, [r2, #0]
 8010f1c:	421a      	tst	r2, r3
 8010f1e:	d101      	bne.n	8010f24 <vPortFree+0x18>
 8010f20:	b672      	cpsid	i
 8010f22:	e7fe      	b.n	8010f22 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f24:	0001      	movs	r1, r0
 8010f26:	3908      	subs	r1, #8
 8010f28:	6809      	ldr	r1, [r1, #0]
 8010f2a:	2900      	cmp	r1, #0
 8010f2c:	d001      	beq.n	8010f32 <vPortFree+0x26>
 8010f2e:	b672      	cpsid	i
 8010f30:	e7fe      	b.n	8010f30 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f32:	3808      	subs	r0, #8
 8010f34:	0004      	movs	r4, r0
 8010f36:	4393      	bics	r3, r2
 8010f38:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010f3a:	f7fe ff75 	bl	800fe28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f3e:	6863      	ldr	r3, [r4, #4]
 8010f40:	4a06      	ldr	r2, [pc, #24]	; (8010f5c <vPortFree+0x50>)
 8010f42:	6811      	ldr	r1, [r2, #0]
 8010f44:	468c      	mov	ip, r1
 8010f46:	4463      	add	r3, ip
 8010f48:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f4a:	0028      	movs	r0, r5
 8010f4c:	f7ff ff3c 	bl	8010dc8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010f50:	f7ff f808 	bl	800ff64 <xTaskResumeAll>
}
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	46c0      	nop			; (mov r8, r8)
 8010f58:	20006908 	.word	0x20006908
 8010f5c:	2000690c 	.word	0x2000690c

08010f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010f60:	b510      	push	{r4, lr}
 8010f62:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010f64:	f001 fcb8 	bl	80128d8 <HAL_RCC_GetHCLKFreq>
 8010f68:	21fa      	movs	r1, #250	; 0xfa
 8010f6a:	0089      	lsls	r1, r1, #2
 8010f6c:	f7ef f8f0 	bl	8000150 <__udivsi3>
 8010f70:	f000 f886 	bl	8011080 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010f74:	2001      	movs	r0, #1
 8010f76:	2200      	movs	r2, #0
 8010f78:	0021      	movs	r1, r4
 8010f7a:	4240      	negs	r0, r0
 8010f7c:	f000 f83c 	bl	8010ff8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010f80:	2000      	movs	r0, #0
 8010f82:	bd10      	pop	{r4, pc}

08010f84 <HAL_Init>:
{
 8010f84:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010f86:	4a06      	ldr	r2, [pc, #24]	; (8010fa0 <HAL_Init+0x1c>)
 8010f88:	6813      	ldr	r3, [r2, #0]
 8010f8a:	2110      	movs	r1, #16
 8010f8c:	430b      	orrs	r3, r1
 8010f8e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010f90:	2000      	movs	r0, #0
 8010f92:	f7ff ffe5 	bl	8010f60 <HAL_InitTick>
  HAL_MspInit();
 8010f96:	f001 f880 	bl	801209a <HAL_MspInit>
}
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	bd10      	pop	{r4, pc}
 8010f9e:	46c0      	nop			; (mov r8, r8)
 8010fa0:	40022000 	.word	0x40022000

08010fa4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010fa4:	4a02      	ldr	r2, [pc, #8]	; (8010fb0 <HAL_IncTick+0xc>)
 8010fa6:	6813      	ldr	r3, [r2, #0]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	6013      	str	r3, [r2, #0]
}
 8010fac:	4770      	bx	lr
 8010fae:	46c0      	nop			; (mov r8, r8)
 8010fb0:	2000691c 	.word	0x2000691c

08010fb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010fb4:	4b01      	ldr	r3, [pc, #4]	; (8010fbc <HAL_GetTick+0x8>)
 8010fb6:	6818      	ldr	r0, [r3, #0]
}
 8010fb8:	4770      	bx	lr
 8010fba:	46c0      	nop			; (mov r8, r8)
 8010fbc:	2000691c 	.word	0x2000691c

08010fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010fc6:	f7ff fff5 	bl	8010fb4 <HAL_GetTick>
 8010fca:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010fcc:	f7ff fff2 	bl	8010fb4 <HAL_GetTick>
 8010fd0:	1b00      	subs	r0, r0, r4
 8010fd2:	9b01      	ldr	r3, [sp, #4]
 8010fd4:	4298      	cmp	r0, r3
 8010fd6:	d3f9      	bcc.n	8010fcc <HAL_Delay+0xc>
  {
  }
}
 8010fd8:	b002      	add	sp, #8
 8010fda:	bd10      	pop	{r4, pc}

08010fdc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010fdc:	4b01      	ldr	r3, [pc, #4]	; (8010fe4 <HAL_GetREVID+0x8>)
 8010fde:	6818      	ldr	r0, [r3, #0]
 8010fe0:	0c00      	lsrs	r0, r0, #16
}
 8010fe2:	4770      	bx	lr
 8010fe4:	40015800 	.word	0x40015800

08010fe8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010fe8:	4b02      	ldr	r3, [pc, #8]	; (8010ff4 <HAL_GetDEVID+0xc>)
 8010fea:	6818      	ldr	r0, [r3, #0]
 8010fec:	0500      	lsls	r0, r0, #20
 8010fee:	0d00      	lsrs	r0, r0, #20
}
 8010ff0:	4770      	bx	lr
 8010ff2:	46c0      	nop			; (mov r8, r8)
 8010ff4:	40015800 	.word	0x40015800

08010ff8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010ff8:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	db11      	blt.n	8011022 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ffe:	0884      	lsrs	r4, r0, #2
 8011000:	4d13      	ldr	r5, [pc, #76]	; (8011050 <HAL_NVIC_SetPriority+0x58>)
 8011002:	34c0      	adds	r4, #192	; 0xc0
 8011004:	00a4      	lsls	r4, r4, #2
 8011006:	5962      	ldr	r2, [r4, r5]
 8011008:	2303      	movs	r3, #3
 801100a:	4018      	ands	r0, r3
 801100c:	00c0      	lsls	r0, r0, #3
 801100e:	33fc      	adds	r3, #252	; 0xfc
 8011010:	001e      	movs	r6, r3
 8011012:	4086      	lsls	r6, r0
 8011014:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011016:	0189      	lsls	r1, r1, #6
 8011018:	400b      	ands	r3, r1
 801101a:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801101c:	4313      	orrs	r3, r2
 801101e:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8011020:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011022:	b2c0      	uxtb	r0, r0
 8011024:	220f      	movs	r2, #15
 8011026:	4002      	ands	r2, r0
 8011028:	3a08      	subs	r2, #8
 801102a:	0892      	lsrs	r2, r2, #2
 801102c:	3206      	adds	r2, #6
 801102e:	0092      	lsls	r2, r2, #2
 8011030:	4b08      	ldr	r3, [pc, #32]	; (8011054 <HAL_NVIC_SetPriority+0x5c>)
 8011032:	18d3      	adds	r3, r2, r3
 8011034:	685d      	ldr	r5, [r3, #4]
 8011036:	2403      	movs	r4, #3
 8011038:	4020      	ands	r0, r4
 801103a:	00c0      	lsls	r0, r0, #3
 801103c:	22ff      	movs	r2, #255	; 0xff
 801103e:	0014      	movs	r4, r2
 8011040:	4084      	lsls	r4, r0
 8011042:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011044:	0189      	lsls	r1, r1, #6
 8011046:	400a      	ands	r2, r1
 8011048:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801104a:	432a      	orrs	r2, r5
 801104c:	605a      	str	r2, [r3, #4]
 801104e:	e7e7      	b.n	8011020 <HAL_NVIC_SetPriority+0x28>
 8011050:	e000e100 	.word	0xe000e100
 8011054:	e000ed00 	.word	0xe000ed00

08011058 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8011058:	231f      	movs	r3, #31
 801105a:	4018      	ands	r0, r3
 801105c:	3b1e      	subs	r3, #30
 801105e:	4083      	lsls	r3, r0
 8011060:	4a01      	ldr	r2, [pc, #4]	; (8011068 <HAL_NVIC_EnableIRQ+0x10>)
 8011062:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8011064:	4770      	bx	lr
 8011066:	46c0      	nop			; (mov r8, r8)
 8011068:	e000e100 	.word	0xe000e100

0801106c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801106c:	231f      	movs	r3, #31
 801106e:	4018      	ands	r0, r3
 8011070:	3b1e      	subs	r3, #30
 8011072:	4083      	lsls	r3, r0
 8011074:	4901      	ldr	r1, [pc, #4]	; (801107c <HAL_NVIC_DisableIRQ+0x10>)
 8011076:	2280      	movs	r2, #128	; 0x80
 8011078:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801107a:	4770      	bx	lr
 801107c:	e000e100 	.word	0xe000e100

08011080 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8011080:	3801      	subs	r0, #1
 8011082:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <HAL_SYSTICK_Config+0x2c>)
 8011084:	4298      	cmp	r0, r3
 8011086:	d80f      	bhi.n	80110a8 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011088:	4a09      	ldr	r2, [pc, #36]	; (80110b0 <HAL_SYSTICK_Config+0x30>)
 801108a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801108c:	4809      	ldr	r0, [pc, #36]	; (80110b4 <HAL_SYSTICK_Config+0x34>)
 801108e:	6a03      	ldr	r3, [r0, #32]
 8011090:	021b      	lsls	r3, r3, #8
 8011092:	0a1b      	lsrs	r3, r3, #8
 8011094:	21c0      	movs	r1, #192	; 0xc0
 8011096:	0609      	lsls	r1, r1, #24
 8011098:	430b      	orrs	r3, r1
 801109a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801109c:	2300      	movs	r3, #0
 801109e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80110a0:	3307      	adds	r3, #7
 80110a2:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80110a4:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80110a6:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80110a8:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80110aa:	e7fc      	b.n	80110a6 <HAL_SYSTICK_Config+0x26>
 80110ac:	00ffffff 	.word	0x00ffffff
 80110b0:	e000e010 	.word	0xe000e010
 80110b4:	e000ed00 	.word	0xe000ed00

080110b8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80110b8:	2804      	cmp	r0, #4
 80110ba:	d005      	beq.n	80110c8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80110bc:	4a05      	ldr	r2, [pc, #20]	; (80110d4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80110be:	6813      	ldr	r3, [r2, #0]
 80110c0:	2104      	movs	r1, #4
 80110c2:	438b      	bics	r3, r1
 80110c4:	6013      	str	r3, [r2, #0]
  }
}
 80110c6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80110c8:	4a02      	ldr	r2, [pc, #8]	; (80110d4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80110ca:	6813      	ldr	r3, [r2, #0]
 80110cc:	2104      	movs	r1, #4
 80110ce:	430b      	orrs	r3, r1
 80110d0:	6013      	str	r3, [r2, #0]
 80110d2:	e7f8      	b.n	80110c6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80110d4:	e000e010 	.word	0xe000e010

080110d8 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80110d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80110da:	2500      	movs	r5, #0
 80110dc:	e00e      	b.n	80110fc <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80110de:	00ac      	lsls	r4, r5, #2
 80110e0:	5d0b      	ldrb	r3, [r1, r4]
 80110e2:	061b      	lsls	r3, r3, #24
 80110e4:	190c      	adds	r4, r1, r4
 80110e6:	7866      	ldrb	r6, [r4, #1]
 80110e8:	0436      	lsls	r6, r6, #16
 80110ea:	4333      	orrs	r3, r6
 80110ec:	78a6      	ldrb	r6, [r4, #2]
 80110ee:	0236      	lsls	r6, r6, #8
 80110f0:	4333      	orrs	r3, r6
 80110f2:	78e6      	ldrb	r6, [r4, #3]
 80110f4:	6804      	ldr	r4, [r0, #0]
 80110f6:	4333      	orrs	r3, r6
 80110f8:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 80110fa:	3501      	adds	r5, #1
 80110fc:	0893      	lsrs	r3, r2, #2
 80110fe:	42ab      	cmp	r3, r5
 8011100:	d8ed      	bhi.n	80110de <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8011102:	2303      	movs	r3, #3
 8011104:	401a      	ands	r2, r3
 8011106:	d005      	beq.n	8011114 <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 8011108:	2a01      	cmp	r2, #1
 801110a:	d006      	beq.n	801111a <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 801110c:	2a02      	cmp	r2, #2
 801110e:	d009      	beq.n	8011124 <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 8011110:	2a03      	cmp	r2, #3
 8011112:	d010      	beq.n	8011136 <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011114:	6803      	ldr	r3, [r0, #0]
 8011116:	6818      	ldr	r0, [r3, #0]
}
 8011118:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 801111a:	00ab      	lsls	r3, r5, #2
 801111c:	5ccb      	ldrb	r3, [r1, r3]
 801111e:	6804      	ldr	r4, [r0, #0]
 8011120:	7023      	strb	r3, [r4, #0]
 8011122:	e7f3      	b.n	801110c <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8011124:	00ab      	lsls	r3, r5, #2
 8011126:	5ccc      	ldrb	r4, [r1, r3]
 8011128:	0224      	lsls	r4, r4, #8
 801112a:	18cb      	adds	r3, r1, r3
 801112c:	785b      	ldrb	r3, [r3, #1]
 801112e:	4323      	orrs	r3, r4
 8011130:	6804      	ldr	r4, [r0, #0]
 8011132:	8023      	strh	r3, [r4, #0]
 8011134:	e7ec      	b.n	8011110 <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8011136:	00ad      	lsls	r5, r5, #2
 8011138:	5d4a      	ldrb	r2, [r1, r5]
 801113a:	0212      	lsls	r2, r2, #8
 801113c:	194d      	adds	r5, r1, r5
 801113e:	786b      	ldrb	r3, [r5, #1]
 8011140:	4313      	orrs	r3, r2
 8011142:	6802      	ldr	r2, [r0, #0]
 8011144:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8011146:	78ab      	ldrb	r3, [r5, #2]
 8011148:	6802      	ldr	r2, [r0, #0]
 801114a:	7013      	strb	r3, [r2, #0]
 801114c:	e7e2      	b.n	8011114 <CRC_Handle_8+0x3c>

0801114e <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801114e:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8011150:	2500      	movs	r5, #0
 8011152:	e008      	b.n	8011166 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8011154:	00ac      	lsls	r4, r5, #2
 8011156:	5b0b      	ldrh	r3, [r1, r4]
 8011158:	041b      	lsls	r3, r3, #16
 801115a:	190c      	adds	r4, r1, r4
 801115c:	8866      	ldrh	r6, [r4, #2]
 801115e:	6804      	ldr	r4, [r0, #0]
 8011160:	4333      	orrs	r3, r6
 8011162:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8011164:	3501      	adds	r5, #1
 8011166:	0853      	lsrs	r3, r2, #1
 8011168:	42ab      	cmp	r3, r5
 801116a:	d8f3      	bhi.n	8011154 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 801116c:	07d3      	lsls	r3, r2, #31
 801116e:	d503      	bpl.n	8011178 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8011170:	00ad      	lsls	r5, r5, #2
 8011172:	5a6b      	ldrh	r3, [r5, r1]
 8011174:	6802      	ldr	r2, [r0, #0]
 8011176:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011178:	6803      	ldr	r3, [r0, #0]
 801117a:	6818      	ldr	r0, [r3, #0]
}
 801117c:	bd70      	pop	{r4, r5, r6, pc}

0801117e <HAL_CRC_Init>:
{
 801117e:	b510      	push	{r4, lr}
 8011180:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8011182:	d029      	beq.n	80111d8 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8011184:	7f43      	ldrb	r3, [r0, #29]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d01e      	beq.n	80111c8 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801118a:	2302      	movs	r3, #2
 801118c:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801118e:	0020      	movs	r0, r4
 8011190:	f000 f8a8 	bl	80112e4 <HAL_CRCEx_Init>
 8011194:	2800      	cmp	r0, #0
 8011196:	d121      	bne.n	80111dc <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011198:	7963      	ldrb	r3, [r4, #5]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d118      	bne.n	80111d0 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	2201      	movs	r2, #1
 80111a2:	4252      	negs	r2, r2
 80111a4:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80111a6:	6822      	ldr	r2, [r4, #0]
 80111a8:	6893      	ldr	r3, [r2, #8]
 80111aa:	2160      	movs	r1, #96	; 0x60
 80111ac:	438b      	bics	r3, r1
 80111ae:	6961      	ldr	r1, [r4, #20]
 80111b0:	430b      	orrs	r3, r1
 80111b2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80111b4:	6822      	ldr	r2, [r4, #0]
 80111b6:	6893      	ldr	r3, [r2, #8]
 80111b8:	2180      	movs	r1, #128	; 0x80
 80111ba:	438b      	bics	r3, r1
 80111bc:	69a1      	ldr	r1, [r4, #24]
 80111be:	430b      	orrs	r3, r1
 80111c0:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80111c2:	2301      	movs	r3, #1
 80111c4:	7763      	strb	r3, [r4, #29]
}
 80111c6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80111c8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80111ca:	f7fc ff6d 	bl	800e0a8 <HAL_CRC_MspInit>
 80111ce:	e7dc      	b.n	801118a <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	6922      	ldr	r2, [r4, #16]
 80111d4:	611a      	str	r2, [r3, #16]
 80111d6:	e7e6      	b.n	80111a6 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80111d8:	2001      	movs	r0, #1
 80111da:	e7f4      	b.n	80111c6 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80111dc:	2001      	movs	r0, #1
 80111de:	e7f2      	b.n	80111c6 <HAL_CRC_Init+0x48>

080111e0 <HAL_CRC_Accumulate>:
{
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80111e4:	7f03      	ldrb	r3, [r0, #28]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d022      	beq.n	8011230 <HAL_CRC_Accumulate+0x50>
 80111ea:	2301      	movs	r3, #1
 80111ec:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80111ee:	3301      	adds	r3, #1
 80111f0:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80111f2:	6a03      	ldr	r3, [r0, #32]
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d018      	beq.n	801122a <HAL_CRC_Accumulate+0x4a>
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d011      	beq.n	8011220 <HAL_CRC_Accumulate+0x40>
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d011      	beq.n	8011224 <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8011200:	2000      	movs	r0, #0
 8011202:	e008      	b.n	8011216 <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 8011204:	6820      	ldr	r0, [r4, #0]
 8011206:	009d      	lsls	r5, r3, #2
 8011208:	586d      	ldr	r5, [r5, r1]
 801120a:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801120c:	3301      	adds	r3, #1
 801120e:	4293      	cmp	r3, r2
 8011210:	d3f8      	bcc.n	8011204 <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8011216:	2301      	movs	r3, #1
 8011218:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801121a:	2300      	movs	r3, #0
 801121c:	7723      	strb	r3, [r4, #28]
}
 801121e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011220:	2300      	movs	r3, #0
 8011222:	e7f4      	b.n	801120e <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011224:	f7ff ff58 	bl	80110d8 <CRC_Handle_8>
      break;
 8011228:	e7f5      	b.n	8011216 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801122a:	f7ff ff90 	bl	801114e <CRC_Handle_16>
      break;
 801122e:	e7f2      	b.n	8011216 <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 8011230:	2002      	movs	r0, #2
 8011232:	e7f4      	b.n	801121e <HAL_CRC_Accumulate+0x3e>

08011234 <HAL_CRC_Calculate>:
{
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8011238:	7f03      	ldrb	r3, [r0, #28]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d028      	beq.n	8011290 <HAL_CRC_Calculate+0x5c>
 801123e:	2501      	movs	r5, #1
 8011240:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011242:	2302      	movs	r3, #2
 8011244:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	6883      	ldr	r3, [r0, #8]
 801124a:	432b      	orrs	r3, r5
 801124c:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801124e:	6a23      	ldr	r3, [r4, #32]
 8011250:	2b02      	cmp	r3, #2
 8011252:	d019      	beq.n	8011288 <HAL_CRC_Calculate+0x54>
 8011254:	2b03      	cmp	r3, #3
 8011256:	d011      	beq.n	801127c <HAL_CRC_Calculate+0x48>
 8011258:	2b01      	cmp	r3, #1
 801125a:	d011      	beq.n	8011280 <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801125c:	2000      	movs	r0, #0
 801125e:	e008      	b.n	8011272 <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	009d      	lsls	r5, r3, #2
 8011264:	586d      	ldr	r5, [r5, r1]
 8011266:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8011268:	3301      	adds	r3, #1
 801126a:	4293      	cmp	r3, r2
 801126c:	d3f8      	bcc.n	8011260 <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8011272:	2301      	movs	r3, #1
 8011274:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011276:	2300      	movs	r3, #0
 8011278:	7723      	strb	r3, [r4, #28]
}
 801127a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801127c:	2300      	movs	r3, #0
 801127e:	e7f4      	b.n	801126a <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011280:	0020      	movs	r0, r4
 8011282:	f7ff ff29 	bl	80110d8 <CRC_Handle_8>
      break;
 8011286:	e7f4      	b.n	8011272 <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011288:	0020      	movs	r0, r4
 801128a:	f7ff ff60 	bl	801114e <CRC_Handle_16>
      break;
 801128e:	e7f0      	b.n	8011272 <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 8011290:	2002      	movs	r0, #2
 8011292:	e7f2      	b.n	801127a <HAL_CRC_Calculate+0x46>

08011294 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011294:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011296:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011298:	e000      	b.n	801129c <HAL_CRCEx_Polynomial_Set+0x8>
 801129a:	001c      	movs	r4, r3
 801129c:	2301      	movs	r3, #1
 801129e:	40a3      	lsls	r3, r4
 80112a0:	4219      	tst	r1, r3
 80112a2:	d103      	bne.n	80112ac <HAL_CRCEx_Polynomial_Set+0x18>
 80112a4:	1e63      	subs	r3, r4, #1
 80112a6:	2c00      	cmp	r4, #0
 80112a8:	d1f7      	bne.n	801129a <HAL_CRCEx_Polynomial_Set+0x6>
 80112aa:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 80112ac:	2a10      	cmp	r2, #16
 80112ae:	d011      	beq.n	80112d4 <HAL_CRCEx_Polynomial_Set+0x40>
 80112b0:	2a18      	cmp	r2, #24
 80112b2:	d00b      	beq.n	80112cc <HAL_CRCEx_Polynomial_Set+0x38>
 80112b4:	2a08      	cmp	r2, #8
 80112b6:	d011      	beq.n	80112dc <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80112b8:	6803      	ldr	r3, [r0, #0]
 80112ba:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80112bc:	6801      	ldr	r1, [r0, #0]
 80112be:	688b      	ldr	r3, [r1, #8]
 80112c0:	2018      	movs	r0, #24
 80112c2:	4383      	bics	r3, r0
 80112c4:	431a      	orrs	r2, r3
 80112c6:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80112c8:	2000      	movs	r0, #0
}
 80112ca:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80112cc:	2c06      	cmp	r4, #6
 80112ce:	d9f3      	bls.n	80112b8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80112d0:	2001      	movs	r0, #1
 80112d2:	e7fa      	b.n	80112ca <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 80112d4:	2c07      	cmp	r4, #7
 80112d6:	d9ef      	bls.n	80112b8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80112d8:	2001      	movs	r0, #1
 80112da:	e7f6      	b.n	80112ca <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 80112dc:	2c0f      	cmp	r4, #15
 80112de:	d9eb      	bls.n	80112b8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80112e0:	2001      	movs	r0, #1
 80112e2:	e7f2      	b.n	80112ca <HAL_CRCEx_Polynomial_Set+0x36>

080112e4 <HAL_CRCEx_Init>:
{
 80112e4:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80112e6:	7903      	ldrb	r3, [r0, #4]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80112ec:	6803      	ldr	r3, [r0, #0]
 80112ee:	4a08      	ldr	r2, [pc, #32]	; (8011310 <HAL_CRCEx_Init+0x2c>)
 80112f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80112f2:	6802      	ldr	r2, [r0, #0]
 80112f4:	6893      	ldr	r3, [r2, #8]
 80112f6:	2118      	movs	r1, #24
 80112f8:	438b      	bics	r3, r1
 80112fa:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 80112fc:	2000      	movs	r0, #0
}
 80112fe:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8011300:	68c2      	ldr	r2, [r0, #12]
 8011302:	6881      	ldr	r1, [r0, #8]
 8011304:	f7ff ffc6 	bl	8011294 <HAL_CRCEx_Polynomial_Set>
 8011308:	2800      	cmp	r0, #0
 801130a:	d0f8      	beq.n	80112fe <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 801130c:	2001      	movs	r0, #1
 801130e:	e7f6      	b.n	80112fe <HAL_CRCEx_Init+0x1a>
 8011310:	04c11db7 	.word	0x04c11db7

08011314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8011314:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011316:	6804      	ldr	r4, [r0, #0]
 8011318:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801131a:	6843      	ldr	r3, [r0, #4]
 801131c:	2b10      	cmp	r3, #16
 801131e:	d004      	beq.n	801132a <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011320:	6803      	ldr	r3, [r0, #0]
 8011322:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8011324:	6803      	ldr	r3, [r0, #0]
 8011326:	60da      	str	r2, [r3, #12]
  }
}
 8011328:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 801132a:	6803      	ldr	r3, [r0, #0]
 801132c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801132e:	6803      	ldr	r3, [r0, #0]
 8011330:	60d9      	str	r1, [r3, #12]
 8011332:	e7f9      	b.n	8011328 <DMA_SetConfig+0x14>

08011334 <HAL_DMA_Init>:
{ 
 8011334:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8011336:	2800      	cmp	r0, #0
 8011338:	d022      	beq.n	8011380 <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 801133a:	2321      	movs	r3, #33	; 0x21
 801133c:	5cc3      	ldrb	r3, [r0, r3]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d102      	bne.n	8011348 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 8011342:	3320      	adds	r3, #32
 8011344:	2200      	movs	r2, #0
 8011346:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8011348:	2121      	movs	r1, #33	; 0x21
 801134a:	2302      	movs	r3, #2
 801134c:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 801134e:	6804      	ldr	r4, [r0, #0]
 8011350:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8011352:	4a0c      	ldr	r2, [pc, #48]	; (8011384 <HAL_DMA_Init+0x50>)
 8011354:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8011356:	6843      	ldr	r3, [r0, #4]
 8011358:	6885      	ldr	r5, [r0, #8]
 801135a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801135c:	68c5      	ldr	r5, [r0, #12]
 801135e:	432b      	orrs	r3, r5
 8011360:	6905      	ldr	r5, [r0, #16]
 8011362:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011364:	6945      	ldr	r5, [r0, #20]
 8011366:	432b      	orrs	r3, r5
 8011368:	6985      	ldr	r5, [r0, #24]
 801136a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801136c:	69c5      	ldr	r5, [r0, #28]
 801136e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011370:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8011372:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011374:	2300      	movs	r3, #0
 8011376:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8011378:	3301      	adds	r3, #1
 801137a:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 801137c:	2000      	movs	r0, #0
}  
 801137e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011380:	2001      	movs	r0, #1
 8011382:	e7fc      	b.n	801137e <HAL_DMA_Init+0x4a>
 8011384:	ffffc00f 	.word	0xffffc00f

08011388 <HAL_DMA_Start_IT>:
{
 8011388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 801138c:	2020      	movs	r0, #32
 801138e:	5c20      	ldrb	r0, [r4, r0]
 8011390:	2801      	cmp	r0, #1
 8011392:	d020      	beq.n	80113d6 <HAL_DMA_Start_IT+0x4e>
 8011394:	2501      	movs	r5, #1
 8011396:	2020      	movs	r0, #32
 8011398:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 801139a:	2602      	movs	r6, #2
 801139c:	3001      	adds	r0, #1
 801139e:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 80113a0:	6827      	ldr	r7, [r4, #0]
 80113a2:	6838      	ldr	r0, [r7, #0]
 80113a4:	43a8      	bics	r0, r5
 80113a6:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80113a8:	0020      	movs	r0, r4
 80113aa:	f7ff ffb3 	bl	8011314 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80113ae:	6822      	ldr	r2, [r4, #0]
 80113b0:	6813      	ldr	r3, [r2, #0]
 80113b2:	4333      	orrs	r3, r6
 80113b4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	6813      	ldr	r3, [r2, #0]
 80113ba:	2104      	movs	r1, #4
 80113bc:	430b      	orrs	r3, r1
 80113be:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80113c0:	6822      	ldr	r2, [r4, #0]
 80113c2:	6813      	ldr	r3, [r2, #0]
 80113c4:	3104      	adds	r1, #4
 80113c6:	430b      	orrs	r3, r1
 80113c8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80113ca:	6822      	ldr	r2, [r4, #0]
 80113cc:	6813      	ldr	r3, [r2, #0]
 80113ce:	432b      	orrs	r3, r5
 80113d0:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80113d2:	2000      	movs	r0, #0
} 
 80113d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80113d6:	2002      	movs	r0, #2
 80113d8:	e7fc      	b.n	80113d4 <HAL_DMA_Start_IT+0x4c>

080113da <HAL_DMA_Abort>:
{
 80113da:	b570      	push	{r4, r5, r6, lr}
 80113dc:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80113de:	6802      	ldr	r2, [r0, #0]
 80113e0:	6813      	ldr	r3, [r2, #0]
 80113e2:	2101      	movs	r1, #1
 80113e4:	438b      	bics	r3, r1
 80113e6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80113e8:	f7ff fde4 	bl	8010fb4 <HAL_GetTick>
 80113ec:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	07db      	lsls	r3, r3, #31
 80113f4:	d511      	bpl.n	801141a <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80113f6:	f7ff fddd 	bl	8010fb4 <HAL_GetTick>
 80113fa:	1b40      	subs	r0, r0, r5
 80113fc:	23fa      	movs	r3, #250	; 0xfa
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4298      	cmp	r0, r3
 8011402:	d9f4      	bls.n	80113ee <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8011404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011406:	2220      	movs	r2, #32
 8011408:	4313      	orrs	r3, r2
 801140a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801140c:	2321      	movs	r3, #33	; 0x21
 801140e:	2103      	movs	r1, #3
 8011410:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011412:	2300      	movs	r3, #0
 8011414:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8011416:	2003      	movs	r0, #3
 8011418:	e006      	b.n	8011428 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 801141a:	2321      	movs	r3, #33	; 0x21
 801141c:	2201      	movs	r2, #1
 801141e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8011420:	3b01      	subs	r3, #1
 8011422:	2200      	movs	r2, #0
 8011424:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8011426:	2000      	movs	r0, #0
}
 8011428:	bd70      	pop	{r4, r5, r6, pc}
	...

0801142c <HAL_DMA_IRQHandler>:
{        
 801142c:	b510      	push	{r4, lr}
 801142e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011430:	6802      	ldr	r2, [r0, #0]
 8011432:	4bb6      	ldr	r3, [pc, #728]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 8011434:	429a      	cmp	r2, r3
 8011436:	d800      	bhi.n	801143a <HAL_DMA_IRQHandler+0xe>
 8011438:	e083      	b.n	8011542 <HAL_DMA_IRQHandler+0x116>
 801143a:	4bb5      	ldr	r3, [pc, #724]	; (8011710 <HAL_DMA_IRQHandler+0x2e4>)
 801143c:	6819      	ldr	r1, [r3, #0]
 801143e:	4bb5      	ldr	r3, [pc, #724]	; (8011714 <HAL_DMA_IRQHandler+0x2e8>)
 8011440:	429a      	cmp	r2, r3
 8011442:	d023      	beq.n	801148c <HAL_DMA_IRQHandler+0x60>
 8011444:	4bb4      	ldr	r3, [pc, #720]	; (8011718 <HAL_DMA_IRQHandler+0x2ec>)
 8011446:	429a      	cmp	r2, r3
 8011448:	d063      	beq.n	8011512 <HAL_DMA_IRQHandler+0xe6>
 801144a:	4bb4      	ldr	r3, [pc, #720]	; (801171c <HAL_DMA_IRQHandler+0x2f0>)
 801144c:	429a      	cmp	r2, r3
 801144e:	d062      	beq.n	8011516 <HAL_DMA_IRQHandler+0xea>
 8011450:	4bb3      	ldr	r3, [pc, #716]	; (8011720 <HAL_DMA_IRQHandler+0x2f4>)
 8011452:	429a      	cmp	r2, r3
 8011454:	d062      	beq.n	801151c <HAL_DMA_IRQHandler+0xf0>
 8011456:	4bb3      	ldr	r3, [pc, #716]	; (8011724 <HAL_DMA_IRQHandler+0x2f8>)
 8011458:	429a      	cmp	r2, r3
 801145a:	d062      	beq.n	8011522 <HAL_DMA_IRQHandler+0xf6>
 801145c:	4bb2      	ldr	r3, [pc, #712]	; (8011728 <HAL_DMA_IRQHandler+0x2fc>)
 801145e:	429a      	cmp	r2, r3
 8011460:	d062      	beq.n	8011528 <HAL_DMA_IRQHandler+0xfc>
 8011462:	4baa      	ldr	r3, [pc, #680]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 8011464:	429a      	cmp	r2, r3
 8011466:	d062      	beq.n	801152e <HAL_DMA_IRQHandler+0x102>
 8011468:	4bb0      	ldr	r3, [pc, #704]	; (801172c <HAL_DMA_IRQHandler+0x300>)
 801146a:	429a      	cmp	r2, r3
 801146c:	d062      	beq.n	8011534 <HAL_DMA_IRQHandler+0x108>
 801146e:	4bb0      	ldr	r3, [pc, #704]	; (8011730 <HAL_DMA_IRQHandler+0x304>)
 8011470:	429a      	cmp	r2, r3
 8011472:	d061      	beq.n	8011538 <HAL_DMA_IRQHandler+0x10c>
 8011474:	4baf      	ldr	r3, [pc, #700]	; (8011734 <HAL_DMA_IRQHandler+0x308>)
 8011476:	429a      	cmp	r2, r3
 8011478:	d060      	beq.n	801153c <HAL_DMA_IRQHandler+0x110>
 801147a:	4baf      	ldr	r3, [pc, #700]	; (8011738 <HAL_DMA_IRQHandler+0x30c>)
 801147c:	429a      	cmp	r2, r3
 801147e:	d002      	beq.n	8011486 <HAL_DMA_IRQHandler+0x5a>
 8011480:	2380      	movs	r3, #128	; 0x80
 8011482:	031b      	lsls	r3, r3, #12
 8011484:	e003      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011486:	2380      	movs	r3, #128	; 0x80
 8011488:	021b      	lsls	r3, r3, #8
 801148a:	e000      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 801148c:	2308      	movs	r3, #8
 801148e:	400b      	ands	r3, r1
 8011490:	1e59      	subs	r1, r3, #1
 8011492:	418b      	sbcs	r3, r1
 8011494:	b2db      	uxtb	r3, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	d100      	bne.n	801149c <HAL_DMA_IRQHandler+0x70>
 801149a:	e0ae      	b.n	80115fa <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801149c:	6813      	ldr	r3, [r2, #0]
 801149e:	071b      	lsls	r3, r3, #28
 80114a0:	d400      	bmi.n	80114a4 <HAL_DMA_IRQHandler+0x78>
 80114a2:	e0aa      	b.n	80115fa <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80114a4:	6813      	ldr	r3, [r2, #0]
 80114a6:	2108      	movs	r1, #8
 80114a8:	438b      	bics	r3, r1
 80114aa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80114ac:	6823      	ldr	r3, [r4, #0]
 80114ae:	4a97      	ldr	r2, [pc, #604]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d800      	bhi.n	80114b6 <HAL_DMA_IRQHandler+0x8a>
 80114b4:	e0ee      	b.n	8011694 <HAL_DMA_IRQHandler+0x268>
 80114b6:	4a97      	ldr	r2, [pc, #604]	; (8011714 <HAL_DMA_IRQHandler+0x2e8>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d100      	bne.n	80114be <HAL_DMA_IRQHandler+0x92>
 80114bc:	e08b      	b.n	80115d6 <HAL_DMA_IRQHandler+0x1aa>
 80114be:	4a96      	ldr	r2, [pc, #600]	; (8011718 <HAL_DMA_IRQHandler+0x2ec>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d100      	bne.n	80114c6 <HAL_DMA_IRQHandler+0x9a>
 80114c4:	e0ce      	b.n	8011664 <HAL_DMA_IRQHandler+0x238>
 80114c6:	4a95      	ldr	r2, [pc, #596]	; (801171c <HAL_DMA_IRQHandler+0x2f0>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d100      	bne.n	80114ce <HAL_DMA_IRQHandler+0xa2>
 80114cc:	e0cc      	b.n	8011668 <HAL_DMA_IRQHandler+0x23c>
 80114ce:	4a94      	ldr	r2, [pc, #592]	; (8011720 <HAL_DMA_IRQHandler+0x2f4>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d100      	bne.n	80114d6 <HAL_DMA_IRQHandler+0xaa>
 80114d4:	e0cb      	b.n	801166e <HAL_DMA_IRQHandler+0x242>
 80114d6:	4a93      	ldr	r2, [pc, #588]	; (8011724 <HAL_DMA_IRQHandler+0x2f8>)
 80114d8:	4293      	cmp	r3, r2
 80114da:	d100      	bne.n	80114de <HAL_DMA_IRQHandler+0xb2>
 80114dc:	e0ca      	b.n	8011674 <HAL_DMA_IRQHandler+0x248>
 80114de:	4a92      	ldr	r2, [pc, #584]	; (8011728 <HAL_DMA_IRQHandler+0x2fc>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d100      	bne.n	80114e6 <HAL_DMA_IRQHandler+0xba>
 80114e4:	e0c9      	b.n	801167a <HAL_DMA_IRQHandler+0x24e>
 80114e6:	4a89      	ldr	r2, [pc, #548]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d100      	bne.n	80114ee <HAL_DMA_IRQHandler+0xc2>
 80114ec:	e0c8      	b.n	8011680 <HAL_DMA_IRQHandler+0x254>
 80114ee:	4a8f      	ldr	r2, [pc, #572]	; (801172c <HAL_DMA_IRQHandler+0x300>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d100      	bne.n	80114f6 <HAL_DMA_IRQHandler+0xca>
 80114f4:	e0c7      	b.n	8011686 <HAL_DMA_IRQHandler+0x25a>
 80114f6:	4a8e      	ldr	r2, [pc, #568]	; (8011730 <HAL_DMA_IRQHandler+0x304>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d100      	bne.n	80114fe <HAL_DMA_IRQHandler+0xd2>
 80114fc:	e0c5      	b.n	801168a <HAL_DMA_IRQHandler+0x25e>
 80114fe:	4a8d      	ldr	r2, [pc, #564]	; (8011734 <HAL_DMA_IRQHandler+0x308>)
 8011500:	4293      	cmp	r3, r2
 8011502:	d100      	bne.n	8011506 <HAL_DMA_IRQHandler+0xda>
 8011504:	e0c3      	b.n	801168e <HAL_DMA_IRQHandler+0x262>
 8011506:	4a8c      	ldr	r2, [pc, #560]	; (8011738 <HAL_DMA_IRQHandler+0x30c>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d061      	beq.n	80115d0 <HAL_DMA_IRQHandler+0x1a4>
 801150c:	2280      	movs	r2, #128	; 0x80
 801150e:	0312      	lsls	r2, r2, #12
 8011510:	e062      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011512:	2380      	movs	r3, #128	; 0x80
 8011514:	e7bb      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011516:	2380      	movs	r3, #128	; 0x80
 8011518:	011b      	lsls	r3, r3, #4
 801151a:	e7b8      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 801151c:	2380      	movs	r3, #128	; 0x80
 801151e:	021b      	lsls	r3, r3, #8
 8011520:	e7b5      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011522:	2380      	movs	r3, #128	; 0x80
 8011524:	031b      	lsls	r3, r3, #12
 8011526:	e7b2      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011528:	2380      	movs	r3, #128	; 0x80
 801152a:	041b      	lsls	r3, r3, #16
 801152c:	e7af      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 801152e:	2380      	movs	r3, #128	; 0x80
 8011530:	051b      	lsls	r3, r3, #20
 8011532:	e7ac      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011534:	2308      	movs	r3, #8
 8011536:	e7aa      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011538:	2380      	movs	r3, #128	; 0x80
 801153a:	e7a8      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 801153c:	2380      	movs	r3, #128	; 0x80
 801153e:	011b      	lsls	r3, r3, #4
 8011540:	e7a5      	b.n	801148e <HAL_DMA_IRQHandler+0x62>
 8011542:	4b7e      	ldr	r3, [pc, #504]	; (801173c <HAL_DMA_IRQHandler+0x310>)
 8011544:	6819      	ldr	r1, [r3, #0]
 8011546:	4b73      	ldr	r3, [pc, #460]	; (8011714 <HAL_DMA_IRQHandler+0x2e8>)
 8011548:	429a      	cmp	r2, r3
 801154a:	d023      	beq.n	8011594 <HAL_DMA_IRQHandler+0x168>
 801154c:	4b72      	ldr	r3, [pc, #456]	; (8011718 <HAL_DMA_IRQHandler+0x2ec>)
 801154e:	429a      	cmp	r2, r3
 8011550:	d026      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x174>
 8011552:	4b72      	ldr	r3, [pc, #456]	; (801171c <HAL_DMA_IRQHandler+0x2f0>)
 8011554:	429a      	cmp	r2, r3
 8011556:	d025      	beq.n	80115a4 <HAL_DMA_IRQHandler+0x178>
 8011558:	4b71      	ldr	r3, [pc, #452]	; (8011720 <HAL_DMA_IRQHandler+0x2f4>)
 801155a:	429a      	cmp	r2, r3
 801155c:	d025      	beq.n	80115aa <HAL_DMA_IRQHandler+0x17e>
 801155e:	4b71      	ldr	r3, [pc, #452]	; (8011724 <HAL_DMA_IRQHandler+0x2f8>)
 8011560:	429a      	cmp	r2, r3
 8011562:	d025      	beq.n	80115b0 <HAL_DMA_IRQHandler+0x184>
 8011564:	4b70      	ldr	r3, [pc, #448]	; (8011728 <HAL_DMA_IRQHandler+0x2fc>)
 8011566:	429a      	cmp	r2, r3
 8011568:	d025      	beq.n	80115b6 <HAL_DMA_IRQHandler+0x18a>
 801156a:	4b68      	ldr	r3, [pc, #416]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 801156c:	429a      	cmp	r2, r3
 801156e:	d025      	beq.n	80115bc <HAL_DMA_IRQHandler+0x190>
 8011570:	4b6e      	ldr	r3, [pc, #440]	; (801172c <HAL_DMA_IRQHandler+0x300>)
 8011572:	429a      	cmp	r2, r3
 8011574:	d025      	beq.n	80115c2 <HAL_DMA_IRQHandler+0x196>
 8011576:	4b6e      	ldr	r3, [pc, #440]	; (8011730 <HAL_DMA_IRQHandler+0x304>)
 8011578:	429a      	cmp	r2, r3
 801157a:	d024      	beq.n	80115c6 <HAL_DMA_IRQHandler+0x19a>
 801157c:	4b6d      	ldr	r3, [pc, #436]	; (8011734 <HAL_DMA_IRQHandler+0x308>)
 801157e:	429a      	cmp	r2, r3
 8011580:	d023      	beq.n	80115ca <HAL_DMA_IRQHandler+0x19e>
 8011582:	4b6d      	ldr	r3, [pc, #436]	; (8011738 <HAL_DMA_IRQHandler+0x30c>)
 8011584:	429a      	cmp	r2, r3
 8011586:	d002      	beq.n	801158e <HAL_DMA_IRQHandler+0x162>
 8011588:	2380      	movs	r3, #128	; 0x80
 801158a:	031b      	lsls	r3, r3, #12
 801158c:	e003      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 801158e:	2380      	movs	r3, #128	; 0x80
 8011590:	021b      	lsls	r3, r3, #8
 8011592:	e000      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 8011594:	2308      	movs	r3, #8
 8011596:	400b      	ands	r3, r1
 8011598:	1e59      	subs	r1, r3, #1
 801159a:	418b      	sbcs	r3, r1
 801159c:	b2db      	uxtb	r3, r3
 801159e:	e77a      	b.n	8011496 <HAL_DMA_IRQHandler+0x6a>
 80115a0:	2380      	movs	r3, #128	; 0x80
 80115a2:	e7f8      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115a4:	2380      	movs	r3, #128	; 0x80
 80115a6:	011b      	lsls	r3, r3, #4
 80115a8:	e7f5      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115aa:	2380      	movs	r3, #128	; 0x80
 80115ac:	021b      	lsls	r3, r3, #8
 80115ae:	e7f2      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115b0:	2380      	movs	r3, #128	; 0x80
 80115b2:	031b      	lsls	r3, r3, #12
 80115b4:	e7ef      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115b6:	2380      	movs	r3, #128	; 0x80
 80115b8:	041b      	lsls	r3, r3, #16
 80115ba:	e7ec      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115bc:	2380      	movs	r3, #128	; 0x80
 80115be:	051b      	lsls	r3, r3, #20
 80115c0:	e7e9      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115c2:	2308      	movs	r3, #8
 80115c4:	e7e7      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115c6:	2380      	movs	r3, #128	; 0x80
 80115c8:	e7e5      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
 80115ca:	2380      	movs	r3, #128	; 0x80
 80115cc:	011b      	lsls	r3, r3, #4
 80115ce:	e7e2      	b.n	8011596 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80115d0:	2280      	movs	r2, #128	; 0x80
 80115d2:	0212      	lsls	r2, r2, #8
 80115d4:	e000      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 80115d6:	2208      	movs	r2, #8
 80115d8:	4b4d      	ldr	r3, [pc, #308]	; (8011710 <HAL_DMA_IRQHandler+0x2e4>)
 80115da:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80115dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115de:	2201      	movs	r2, #1
 80115e0:	4313      	orrs	r3, r2
 80115e2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80115e4:	2321      	movs	r3, #33	; 0x21
 80115e6:	3203      	adds	r2, #3
 80115e8:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80115ea:	3b01      	subs	r3, #1
 80115ec:	2200      	movs	r2, #0
 80115ee:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80115f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 80115f6:	0020      	movs	r0, r4
 80115f8:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80115fa:	6822      	ldr	r2, [r4, #0]
 80115fc:	4b43      	ldr	r3, [pc, #268]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 80115fe:	429a      	cmp	r2, r3
 8011600:	d800      	bhi.n	8011604 <HAL_DMA_IRQHandler+0x1d8>
 8011602:	e105      	b.n	8011810 <HAL_DMA_IRQHandler+0x3e4>
 8011604:	4b42      	ldr	r3, [pc, #264]	; (8011710 <HAL_DMA_IRQHandler+0x2e4>)
 8011606:	6819      	ldr	r1, [r3, #0]
 8011608:	4b42      	ldr	r3, [pc, #264]	; (8011714 <HAL_DMA_IRQHandler+0x2e8>)
 801160a:	429a      	cmp	r2, r3
 801160c:	d100      	bne.n	8011610 <HAL_DMA_IRQHandler+0x1e4>
 801160e:	e0a1      	b.n	8011754 <HAL_DMA_IRQHandler+0x328>
 8011610:	4b41      	ldr	r3, [pc, #260]	; (8011718 <HAL_DMA_IRQHandler+0x2ec>)
 8011612:	429a      	cmp	r2, r3
 8011614:	d100      	bne.n	8011618 <HAL_DMA_IRQHandler+0x1ec>
 8011616:	e0e3      	b.n	80117e0 <HAL_DMA_IRQHandler+0x3b4>
 8011618:	4b40      	ldr	r3, [pc, #256]	; (801171c <HAL_DMA_IRQHandler+0x2f0>)
 801161a:	429a      	cmp	r2, r3
 801161c:	d100      	bne.n	8011620 <HAL_DMA_IRQHandler+0x1f4>
 801161e:	e0e1      	b.n	80117e4 <HAL_DMA_IRQHandler+0x3b8>
 8011620:	4b3f      	ldr	r3, [pc, #252]	; (8011720 <HAL_DMA_IRQHandler+0x2f4>)
 8011622:	429a      	cmp	r2, r3
 8011624:	d100      	bne.n	8011628 <HAL_DMA_IRQHandler+0x1fc>
 8011626:	e0e0      	b.n	80117ea <HAL_DMA_IRQHandler+0x3be>
 8011628:	4b3e      	ldr	r3, [pc, #248]	; (8011724 <HAL_DMA_IRQHandler+0x2f8>)
 801162a:	429a      	cmp	r2, r3
 801162c:	d100      	bne.n	8011630 <HAL_DMA_IRQHandler+0x204>
 801162e:	e0df      	b.n	80117f0 <HAL_DMA_IRQHandler+0x3c4>
 8011630:	4b3d      	ldr	r3, [pc, #244]	; (8011728 <HAL_DMA_IRQHandler+0x2fc>)
 8011632:	429a      	cmp	r2, r3
 8011634:	d100      	bne.n	8011638 <HAL_DMA_IRQHandler+0x20c>
 8011636:	e0de      	b.n	80117f6 <HAL_DMA_IRQHandler+0x3ca>
 8011638:	4b34      	ldr	r3, [pc, #208]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 801163a:	429a      	cmp	r2, r3
 801163c:	d100      	bne.n	8011640 <HAL_DMA_IRQHandler+0x214>
 801163e:	e0dd      	b.n	80117fc <HAL_DMA_IRQHandler+0x3d0>
 8011640:	4b3a      	ldr	r3, [pc, #232]	; (801172c <HAL_DMA_IRQHandler+0x300>)
 8011642:	429a      	cmp	r2, r3
 8011644:	d100      	bne.n	8011648 <HAL_DMA_IRQHandler+0x21c>
 8011646:	e0dc      	b.n	8011802 <HAL_DMA_IRQHandler+0x3d6>
 8011648:	4b39      	ldr	r3, [pc, #228]	; (8011730 <HAL_DMA_IRQHandler+0x304>)
 801164a:	429a      	cmp	r2, r3
 801164c:	d100      	bne.n	8011650 <HAL_DMA_IRQHandler+0x224>
 801164e:	e0da      	b.n	8011806 <HAL_DMA_IRQHandler+0x3da>
 8011650:	4b38      	ldr	r3, [pc, #224]	; (8011734 <HAL_DMA_IRQHandler+0x308>)
 8011652:	429a      	cmp	r2, r3
 8011654:	d100      	bne.n	8011658 <HAL_DMA_IRQHandler+0x22c>
 8011656:	e0d8      	b.n	801180a <HAL_DMA_IRQHandler+0x3de>
 8011658:	4b37      	ldr	r3, [pc, #220]	; (8011738 <HAL_DMA_IRQHandler+0x30c>)
 801165a:	429a      	cmp	r2, r3
 801165c:	d077      	beq.n	801174e <HAL_DMA_IRQHandler+0x322>
 801165e:	2380      	movs	r3, #128	; 0x80
 8011660:	02db      	lsls	r3, r3, #11
 8011662:	e078      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011664:	2280      	movs	r2, #128	; 0x80
 8011666:	e7b7      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 8011668:	2280      	movs	r2, #128	; 0x80
 801166a:	0112      	lsls	r2, r2, #4
 801166c:	e7b4      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 801166e:	2280      	movs	r2, #128	; 0x80
 8011670:	0212      	lsls	r2, r2, #8
 8011672:	e7b1      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 8011674:	2280      	movs	r2, #128	; 0x80
 8011676:	0312      	lsls	r2, r2, #12
 8011678:	e7ae      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 801167a:	2280      	movs	r2, #128	; 0x80
 801167c:	0412      	lsls	r2, r2, #16
 801167e:	e7ab      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 8011680:	2280      	movs	r2, #128	; 0x80
 8011682:	0512      	lsls	r2, r2, #20
 8011684:	e7a8      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 8011686:	2208      	movs	r2, #8
 8011688:	e7a6      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 801168a:	2280      	movs	r2, #128	; 0x80
 801168c:	e7a4      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 801168e:	2280      	movs	r2, #128	; 0x80
 8011690:	0112      	lsls	r2, r2, #4
 8011692:	e7a1      	b.n	80115d8 <HAL_DMA_IRQHandler+0x1ac>
 8011694:	4a1f      	ldr	r2, [pc, #124]	; (8011714 <HAL_DMA_IRQHandler+0x2e8>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d023      	beq.n	80116e2 <HAL_DMA_IRQHandler+0x2b6>
 801169a:	4a1f      	ldr	r2, [pc, #124]	; (8011718 <HAL_DMA_IRQHandler+0x2ec>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d024      	beq.n	80116ea <HAL_DMA_IRQHandler+0x2be>
 80116a0:	4a1e      	ldr	r2, [pc, #120]	; (801171c <HAL_DMA_IRQHandler+0x2f0>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d023      	beq.n	80116ee <HAL_DMA_IRQHandler+0x2c2>
 80116a6:	4a1e      	ldr	r2, [pc, #120]	; (8011720 <HAL_DMA_IRQHandler+0x2f4>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d023      	beq.n	80116f4 <HAL_DMA_IRQHandler+0x2c8>
 80116ac:	4a1d      	ldr	r2, [pc, #116]	; (8011724 <HAL_DMA_IRQHandler+0x2f8>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d023      	beq.n	80116fa <HAL_DMA_IRQHandler+0x2ce>
 80116b2:	4a1d      	ldr	r2, [pc, #116]	; (8011728 <HAL_DMA_IRQHandler+0x2fc>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d023      	beq.n	8011700 <HAL_DMA_IRQHandler+0x2d4>
 80116b8:	4a14      	ldr	r2, [pc, #80]	; (801170c <HAL_DMA_IRQHandler+0x2e0>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d023      	beq.n	8011706 <HAL_DMA_IRQHandler+0x2da>
 80116be:	4a1b      	ldr	r2, [pc, #108]	; (801172c <HAL_DMA_IRQHandler+0x300>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d03d      	beq.n	8011740 <HAL_DMA_IRQHandler+0x314>
 80116c4:	4a1a      	ldr	r2, [pc, #104]	; (8011730 <HAL_DMA_IRQHandler+0x304>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d03c      	beq.n	8011744 <HAL_DMA_IRQHandler+0x318>
 80116ca:	4a1a      	ldr	r2, [pc, #104]	; (8011734 <HAL_DMA_IRQHandler+0x308>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d03b      	beq.n	8011748 <HAL_DMA_IRQHandler+0x31c>
 80116d0:	4a19      	ldr	r2, [pc, #100]	; (8011738 <HAL_DMA_IRQHandler+0x30c>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d002      	beq.n	80116dc <HAL_DMA_IRQHandler+0x2b0>
 80116d6:	2280      	movs	r2, #128	; 0x80
 80116d8:	0312      	lsls	r2, r2, #12
 80116da:	e003      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 80116dc:	2280      	movs	r2, #128	; 0x80
 80116de:	0212      	lsls	r2, r2, #8
 80116e0:	e000      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 80116e2:	2208      	movs	r2, #8
 80116e4:	4b15      	ldr	r3, [pc, #84]	; (801173c <HAL_DMA_IRQHandler+0x310>)
 80116e6:	605a      	str	r2, [r3, #4]
 80116e8:	e778      	b.n	80115dc <HAL_DMA_IRQHandler+0x1b0>
 80116ea:	2280      	movs	r2, #128	; 0x80
 80116ec:	e7fa      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 80116ee:	2280      	movs	r2, #128	; 0x80
 80116f0:	0112      	lsls	r2, r2, #4
 80116f2:	e7f7      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 80116f4:	2280      	movs	r2, #128	; 0x80
 80116f6:	0212      	lsls	r2, r2, #8
 80116f8:	e7f4      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 80116fa:	2280      	movs	r2, #128	; 0x80
 80116fc:	0312      	lsls	r2, r2, #12
 80116fe:	e7f1      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 8011700:	2280      	movs	r2, #128	; 0x80
 8011702:	0412      	lsls	r2, r2, #16
 8011704:	e7ee      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 8011706:	2280      	movs	r2, #128	; 0x80
 8011708:	0512      	lsls	r2, r2, #20
 801170a:	e7eb      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 801170c:	40020080 	.word	0x40020080
 8011710:	40020400 	.word	0x40020400
 8011714:	40020008 	.word	0x40020008
 8011718:	4002001c 	.word	0x4002001c
 801171c:	40020030 	.word	0x40020030
 8011720:	40020044 	.word	0x40020044
 8011724:	40020058 	.word	0x40020058
 8011728:	4002006c 	.word	0x4002006c
 801172c:	40020408 	.word	0x40020408
 8011730:	4002041c 	.word	0x4002041c
 8011734:	40020430 	.word	0x40020430
 8011738:	40020444 	.word	0x40020444
 801173c:	40020000 	.word	0x40020000
 8011740:	2208      	movs	r2, #8
 8011742:	e7cf      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 8011744:	2280      	movs	r2, #128	; 0x80
 8011746:	e7cd      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
 8011748:	2280      	movs	r2, #128	; 0x80
 801174a:	0112      	lsls	r2, r2, #4
 801174c:	e7ca      	b.n	80116e4 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801174e:	2380      	movs	r3, #128	; 0x80
 8011750:	01db      	lsls	r3, r3, #7
 8011752:	e000      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 8011754:	2304      	movs	r3, #4
 8011756:	400b      	ands	r3, r1
 8011758:	1e59      	subs	r1, r3, #1
 801175a:	418b      	sbcs	r3, r1
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d100      	bne.n	8011764 <HAL_DMA_IRQHandler+0x338>
 8011762:	e0aa      	b.n	80118ba <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011764:	6813      	ldr	r3, [r2, #0]
 8011766:	075b      	lsls	r3, r3, #29
 8011768:	d400      	bmi.n	801176c <HAL_DMA_IRQHandler+0x340>
 801176a:	e0a6      	b.n	80118ba <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801176c:	6813      	ldr	r3, [r2, #0]
 801176e:	069b      	lsls	r3, r3, #26
 8011770:	d403      	bmi.n	801177a <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011772:	6813      	ldr	r3, [r2, #0]
 8011774:	2104      	movs	r1, #4
 8011776:	438b      	bics	r3, r1
 8011778:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	4a98      	ldr	r2, [pc, #608]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d800      	bhi.n	8011784 <HAL_DMA_IRQHandler+0x358>
 8011782:	e0e7      	b.n	8011954 <HAL_DMA_IRQHandler+0x528>
 8011784:	4a97      	ldr	r2, [pc, #604]	; (80119e4 <HAL_DMA_IRQHandler+0x5b8>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d100      	bne.n	801178c <HAL_DMA_IRQHandler+0x360>
 801178a:	e08b      	b.n	80118a4 <HAL_DMA_IRQHandler+0x478>
 801178c:	4a96      	ldr	r2, [pc, #600]	; (80119e8 <HAL_DMA_IRQHandler+0x5bc>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d100      	bne.n	8011794 <HAL_DMA_IRQHandler+0x368>
 8011792:	e0c7      	b.n	8011924 <HAL_DMA_IRQHandler+0x4f8>
 8011794:	4a95      	ldr	r2, [pc, #596]	; (80119ec <HAL_DMA_IRQHandler+0x5c0>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d100      	bne.n	801179c <HAL_DMA_IRQHandler+0x370>
 801179a:	e0c5      	b.n	8011928 <HAL_DMA_IRQHandler+0x4fc>
 801179c:	4a94      	ldr	r2, [pc, #592]	; (80119f0 <HAL_DMA_IRQHandler+0x5c4>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d100      	bne.n	80117a4 <HAL_DMA_IRQHandler+0x378>
 80117a2:	e0c4      	b.n	801192e <HAL_DMA_IRQHandler+0x502>
 80117a4:	4a93      	ldr	r2, [pc, #588]	; (80119f4 <HAL_DMA_IRQHandler+0x5c8>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d100      	bne.n	80117ac <HAL_DMA_IRQHandler+0x380>
 80117aa:	e0c3      	b.n	8011934 <HAL_DMA_IRQHandler+0x508>
 80117ac:	4a92      	ldr	r2, [pc, #584]	; (80119f8 <HAL_DMA_IRQHandler+0x5cc>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d100      	bne.n	80117b4 <HAL_DMA_IRQHandler+0x388>
 80117b2:	e0c2      	b.n	801193a <HAL_DMA_IRQHandler+0x50e>
 80117b4:	4a8a      	ldr	r2, [pc, #552]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d100      	bne.n	80117bc <HAL_DMA_IRQHandler+0x390>
 80117ba:	e0c1      	b.n	8011940 <HAL_DMA_IRQHandler+0x514>
 80117bc:	4a8f      	ldr	r2, [pc, #572]	; (80119fc <HAL_DMA_IRQHandler+0x5d0>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d100      	bne.n	80117c4 <HAL_DMA_IRQHandler+0x398>
 80117c2:	e0c0      	b.n	8011946 <HAL_DMA_IRQHandler+0x51a>
 80117c4:	4a8e      	ldr	r2, [pc, #568]	; (8011a00 <HAL_DMA_IRQHandler+0x5d4>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d100      	bne.n	80117cc <HAL_DMA_IRQHandler+0x3a0>
 80117ca:	e0be      	b.n	801194a <HAL_DMA_IRQHandler+0x51e>
 80117cc:	4a8d      	ldr	r2, [pc, #564]	; (8011a04 <HAL_DMA_IRQHandler+0x5d8>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d100      	bne.n	80117d4 <HAL_DMA_IRQHandler+0x3a8>
 80117d2:	e0bc      	b.n	801194e <HAL_DMA_IRQHandler+0x522>
 80117d4:	4a8c      	ldr	r2, [pc, #560]	; (8011a08 <HAL_DMA_IRQHandler+0x5dc>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d061      	beq.n	801189e <HAL_DMA_IRQHandler+0x472>
 80117da:	2280      	movs	r2, #128	; 0x80
 80117dc:	02d2      	lsls	r2, r2, #11
 80117de:	e062      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80117e0:	2340      	movs	r3, #64	; 0x40
 80117e2:	e7b8      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 80117e4:	2380      	movs	r3, #128	; 0x80
 80117e6:	00db      	lsls	r3, r3, #3
 80117e8:	e7b5      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 80117ea:	2380      	movs	r3, #128	; 0x80
 80117ec:	01db      	lsls	r3, r3, #7
 80117ee:	e7b2      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 80117f0:	2380      	movs	r3, #128	; 0x80
 80117f2:	02db      	lsls	r3, r3, #11
 80117f4:	e7af      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 80117f6:	2380      	movs	r3, #128	; 0x80
 80117f8:	03db      	lsls	r3, r3, #15
 80117fa:	e7ac      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 80117fc:	2380      	movs	r3, #128	; 0x80
 80117fe:	04db      	lsls	r3, r3, #19
 8011800:	e7a9      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 8011802:	2304      	movs	r3, #4
 8011804:	e7a7      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 8011806:	2340      	movs	r3, #64	; 0x40
 8011808:	e7a5      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 801180a:	2380      	movs	r3, #128	; 0x80
 801180c:	00db      	lsls	r3, r3, #3
 801180e:	e7a2      	b.n	8011756 <HAL_DMA_IRQHandler+0x32a>
 8011810:	4b7e      	ldr	r3, [pc, #504]	; (8011a0c <HAL_DMA_IRQHandler+0x5e0>)
 8011812:	6819      	ldr	r1, [r3, #0]
 8011814:	4b73      	ldr	r3, [pc, #460]	; (80119e4 <HAL_DMA_IRQHandler+0x5b8>)
 8011816:	429a      	cmp	r2, r3
 8011818:	d023      	beq.n	8011862 <HAL_DMA_IRQHandler+0x436>
 801181a:	4b73      	ldr	r3, [pc, #460]	; (80119e8 <HAL_DMA_IRQHandler+0x5bc>)
 801181c:	429a      	cmp	r2, r3
 801181e:	d026      	beq.n	801186e <HAL_DMA_IRQHandler+0x442>
 8011820:	4b72      	ldr	r3, [pc, #456]	; (80119ec <HAL_DMA_IRQHandler+0x5c0>)
 8011822:	429a      	cmp	r2, r3
 8011824:	d025      	beq.n	8011872 <HAL_DMA_IRQHandler+0x446>
 8011826:	4b72      	ldr	r3, [pc, #456]	; (80119f0 <HAL_DMA_IRQHandler+0x5c4>)
 8011828:	429a      	cmp	r2, r3
 801182a:	d025      	beq.n	8011878 <HAL_DMA_IRQHandler+0x44c>
 801182c:	4b71      	ldr	r3, [pc, #452]	; (80119f4 <HAL_DMA_IRQHandler+0x5c8>)
 801182e:	429a      	cmp	r2, r3
 8011830:	d025      	beq.n	801187e <HAL_DMA_IRQHandler+0x452>
 8011832:	4b71      	ldr	r3, [pc, #452]	; (80119f8 <HAL_DMA_IRQHandler+0x5cc>)
 8011834:	429a      	cmp	r2, r3
 8011836:	d025      	beq.n	8011884 <HAL_DMA_IRQHandler+0x458>
 8011838:	4b69      	ldr	r3, [pc, #420]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 801183a:	429a      	cmp	r2, r3
 801183c:	d025      	beq.n	801188a <HAL_DMA_IRQHandler+0x45e>
 801183e:	4b6f      	ldr	r3, [pc, #444]	; (80119fc <HAL_DMA_IRQHandler+0x5d0>)
 8011840:	429a      	cmp	r2, r3
 8011842:	d025      	beq.n	8011890 <HAL_DMA_IRQHandler+0x464>
 8011844:	4b6e      	ldr	r3, [pc, #440]	; (8011a00 <HAL_DMA_IRQHandler+0x5d4>)
 8011846:	429a      	cmp	r2, r3
 8011848:	d024      	beq.n	8011894 <HAL_DMA_IRQHandler+0x468>
 801184a:	4b6e      	ldr	r3, [pc, #440]	; (8011a04 <HAL_DMA_IRQHandler+0x5d8>)
 801184c:	429a      	cmp	r2, r3
 801184e:	d023      	beq.n	8011898 <HAL_DMA_IRQHandler+0x46c>
 8011850:	4b6d      	ldr	r3, [pc, #436]	; (8011a08 <HAL_DMA_IRQHandler+0x5dc>)
 8011852:	429a      	cmp	r2, r3
 8011854:	d002      	beq.n	801185c <HAL_DMA_IRQHandler+0x430>
 8011856:	2380      	movs	r3, #128	; 0x80
 8011858:	02db      	lsls	r3, r3, #11
 801185a:	e003      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 801185c:	2380      	movs	r3, #128	; 0x80
 801185e:	01db      	lsls	r3, r3, #7
 8011860:	e000      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011862:	2304      	movs	r3, #4
 8011864:	400b      	ands	r3, r1
 8011866:	1e59      	subs	r1, r3, #1
 8011868:	418b      	sbcs	r3, r1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	e777      	b.n	801175e <HAL_DMA_IRQHandler+0x332>
 801186e:	2340      	movs	r3, #64	; 0x40
 8011870:	e7f8      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011872:	2380      	movs	r3, #128	; 0x80
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	e7f5      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011878:	2380      	movs	r3, #128	; 0x80
 801187a:	01db      	lsls	r3, r3, #7
 801187c:	e7f2      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 801187e:	2380      	movs	r3, #128	; 0x80
 8011880:	02db      	lsls	r3, r3, #11
 8011882:	e7ef      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011884:	2380      	movs	r3, #128	; 0x80
 8011886:	03db      	lsls	r3, r3, #15
 8011888:	e7ec      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 801188a:	2380      	movs	r3, #128	; 0x80
 801188c:	04db      	lsls	r3, r3, #19
 801188e:	e7e9      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011890:	2304      	movs	r3, #4
 8011892:	e7e7      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011894:	2340      	movs	r3, #64	; 0x40
 8011896:	e7e5      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
 8011898:	2380      	movs	r3, #128	; 0x80
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	e7e2      	b.n	8011864 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801189e:	2280      	movs	r2, #128	; 0x80
 80118a0:	01d2      	lsls	r2, r2, #7
 80118a2:	e000      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 80118a4:	2204      	movs	r2, #4
 80118a6:	4b5a      	ldr	r3, [pc, #360]	; (8011a10 <HAL_DMA_IRQHandler+0x5e4>)
 80118a8:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80118aa:	2321      	movs	r3, #33	; 0x21
 80118ac:	2211      	movs	r2, #17
 80118ae:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80118b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 80118b6:	0020      	movs	r0, r4
 80118b8:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80118ba:	6822      	ldr	r2, [r4, #0]
 80118bc:	4b48      	ldr	r3, [pc, #288]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 80118be:	429a      	cmp	r2, r3
 80118c0:	d800      	bhi.n	80118c4 <HAL_DMA_IRQHandler+0x498>
 80118c2:	e105      	b.n	8011ad0 <HAL_DMA_IRQHandler+0x6a4>
 80118c4:	4b52      	ldr	r3, [pc, #328]	; (8011a10 <HAL_DMA_IRQHandler+0x5e4>)
 80118c6:	6819      	ldr	r1, [r3, #0]
 80118c8:	4b46      	ldr	r3, [pc, #280]	; (80119e4 <HAL_DMA_IRQHandler+0x5b8>)
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d100      	bne.n	80118d0 <HAL_DMA_IRQHandler+0x4a4>
 80118ce:	e0a1      	b.n	8011a14 <HAL_DMA_IRQHandler+0x5e8>
 80118d0:	4b45      	ldr	r3, [pc, #276]	; (80119e8 <HAL_DMA_IRQHandler+0x5bc>)
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d100      	bne.n	80118d8 <HAL_DMA_IRQHandler+0x4ac>
 80118d6:	e0e3      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x674>
 80118d8:	4b44      	ldr	r3, [pc, #272]	; (80119ec <HAL_DMA_IRQHandler+0x5c0>)
 80118da:	429a      	cmp	r2, r3
 80118dc:	d100      	bne.n	80118e0 <HAL_DMA_IRQHandler+0x4b4>
 80118de:	e0e1      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x678>
 80118e0:	4b43      	ldr	r3, [pc, #268]	; (80119f0 <HAL_DMA_IRQHandler+0x5c4>)
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d100      	bne.n	80118e8 <HAL_DMA_IRQHandler+0x4bc>
 80118e6:	e0e0      	b.n	8011aaa <HAL_DMA_IRQHandler+0x67e>
 80118e8:	4b42      	ldr	r3, [pc, #264]	; (80119f4 <HAL_DMA_IRQHandler+0x5c8>)
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d100      	bne.n	80118f0 <HAL_DMA_IRQHandler+0x4c4>
 80118ee:	e0df      	b.n	8011ab0 <HAL_DMA_IRQHandler+0x684>
 80118f0:	4b41      	ldr	r3, [pc, #260]	; (80119f8 <HAL_DMA_IRQHandler+0x5cc>)
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d100      	bne.n	80118f8 <HAL_DMA_IRQHandler+0x4cc>
 80118f6:	e0de      	b.n	8011ab6 <HAL_DMA_IRQHandler+0x68a>
 80118f8:	4b39      	ldr	r3, [pc, #228]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d100      	bne.n	8011900 <HAL_DMA_IRQHandler+0x4d4>
 80118fe:	e0dd      	b.n	8011abc <HAL_DMA_IRQHandler+0x690>
 8011900:	4b3e      	ldr	r3, [pc, #248]	; (80119fc <HAL_DMA_IRQHandler+0x5d0>)
 8011902:	429a      	cmp	r2, r3
 8011904:	d100      	bne.n	8011908 <HAL_DMA_IRQHandler+0x4dc>
 8011906:	e0dc      	b.n	8011ac2 <HAL_DMA_IRQHandler+0x696>
 8011908:	4b3d      	ldr	r3, [pc, #244]	; (8011a00 <HAL_DMA_IRQHandler+0x5d4>)
 801190a:	429a      	cmp	r2, r3
 801190c:	d100      	bne.n	8011910 <HAL_DMA_IRQHandler+0x4e4>
 801190e:	e0da      	b.n	8011ac6 <HAL_DMA_IRQHandler+0x69a>
 8011910:	4b3c      	ldr	r3, [pc, #240]	; (8011a04 <HAL_DMA_IRQHandler+0x5d8>)
 8011912:	429a      	cmp	r2, r3
 8011914:	d100      	bne.n	8011918 <HAL_DMA_IRQHandler+0x4ec>
 8011916:	e0d8      	b.n	8011aca <HAL_DMA_IRQHandler+0x69e>
 8011918:	4b3b      	ldr	r3, [pc, #236]	; (8011a08 <HAL_DMA_IRQHandler+0x5dc>)
 801191a:	429a      	cmp	r2, r3
 801191c:	d05d      	beq.n	80119da <HAL_DMA_IRQHandler+0x5ae>
 801191e:	2380      	movs	r3, #128	; 0x80
 8011920:	029b      	lsls	r3, r3, #10
 8011922:	e078      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011924:	2240      	movs	r2, #64	; 0x40
 8011926:	e7be      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 8011928:	2280      	movs	r2, #128	; 0x80
 801192a:	00d2      	lsls	r2, r2, #3
 801192c:	e7bb      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 801192e:	2280      	movs	r2, #128	; 0x80
 8011930:	01d2      	lsls	r2, r2, #7
 8011932:	e7b8      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 8011934:	2280      	movs	r2, #128	; 0x80
 8011936:	02d2      	lsls	r2, r2, #11
 8011938:	e7b5      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 801193a:	2280      	movs	r2, #128	; 0x80
 801193c:	03d2      	lsls	r2, r2, #15
 801193e:	e7b2      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 8011940:	2280      	movs	r2, #128	; 0x80
 8011942:	04d2      	lsls	r2, r2, #19
 8011944:	e7af      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 8011946:	2204      	movs	r2, #4
 8011948:	e7ad      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 801194a:	2240      	movs	r2, #64	; 0x40
 801194c:	e7ab      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 801194e:	2280      	movs	r2, #128	; 0x80
 8011950:	00d2      	lsls	r2, r2, #3
 8011952:	e7a8      	b.n	80118a6 <HAL_DMA_IRQHandler+0x47a>
 8011954:	4a23      	ldr	r2, [pc, #140]	; (80119e4 <HAL_DMA_IRQHandler+0x5b8>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d023      	beq.n	80119a2 <HAL_DMA_IRQHandler+0x576>
 801195a:	4a23      	ldr	r2, [pc, #140]	; (80119e8 <HAL_DMA_IRQHandler+0x5bc>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d024      	beq.n	80119aa <HAL_DMA_IRQHandler+0x57e>
 8011960:	4a22      	ldr	r2, [pc, #136]	; (80119ec <HAL_DMA_IRQHandler+0x5c0>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d023      	beq.n	80119ae <HAL_DMA_IRQHandler+0x582>
 8011966:	4a22      	ldr	r2, [pc, #136]	; (80119f0 <HAL_DMA_IRQHandler+0x5c4>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d023      	beq.n	80119b4 <HAL_DMA_IRQHandler+0x588>
 801196c:	4a21      	ldr	r2, [pc, #132]	; (80119f4 <HAL_DMA_IRQHandler+0x5c8>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d023      	beq.n	80119ba <HAL_DMA_IRQHandler+0x58e>
 8011972:	4a21      	ldr	r2, [pc, #132]	; (80119f8 <HAL_DMA_IRQHandler+0x5cc>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d023      	beq.n	80119c0 <HAL_DMA_IRQHandler+0x594>
 8011978:	4a19      	ldr	r2, [pc, #100]	; (80119e0 <HAL_DMA_IRQHandler+0x5b4>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d023      	beq.n	80119c6 <HAL_DMA_IRQHandler+0x59a>
 801197e:	4a1f      	ldr	r2, [pc, #124]	; (80119fc <HAL_DMA_IRQHandler+0x5d0>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d023      	beq.n	80119cc <HAL_DMA_IRQHandler+0x5a0>
 8011984:	4a1e      	ldr	r2, [pc, #120]	; (8011a00 <HAL_DMA_IRQHandler+0x5d4>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d022      	beq.n	80119d0 <HAL_DMA_IRQHandler+0x5a4>
 801198a:	4a1e      	ldr	r2, [pc, #120]	; (8011a04 <HAL_DMA_IRQHandler+0x5d8>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d021      	beq.n	80119d4 <HAL_DMA_IRQHandler+0x5a8>
 8011990:	4a1d      	ldr	r2, [pc, #116]	; (8011a08 <HAL_DMA_IRQHandler+0x5dc>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d002      	beq.n	801199c <HAL_DMA_IRQHandler+0x570>
 8011996:	2280      	movs	r2, #128	; 0x80
 8011998:	02d2      	lsls	r2, r2, #11
 801199a:	e003      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 801199c:	2280      	movs	r2, #128	; 0x80
 801199e:	01d2      	lsls	r2, r2, #7
 80119a0:	e000      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119a2:	2204      	movs	r2, #4
 80119a4:	4b19      	ldr	r3, [pc, #100]	; (8011a0c <HAL_DMA_IRQHandler+0x5e0>)
 80119a6:	605a      	str	r2, [r3, #4]
 80119a8:	e77f      	b.n	80118aa <HAL_DMA_IRQHandler+0x47e>
 80119aa:	2240      	movs	r2, #64	; 0x40
 80119ac:	e7fa      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119ae:	2280      	movs	r2, #128	; 0x80
 80119b0:	00d2      	lsls	r2, r2, #3
 80119b2:	e7f7      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119b4:	2280      	movs	r2, #128	; 0x80
 80119b6:	01d2      	lsls	r2, r2, #7
 80119b8:	e7f4      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119ba:	2280      	movs	r2, #128	; 0x80
 80119bc:	02d2      	lsls	r2, r2, #11
 80119be:	e7f1      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119c0:	2280      	movs	r2, #128	; 0x80
 80119c2:	03d2      	lsls	r2, r2, #15
 80119c4:	e7ee      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119c6:	2280      	movs	r2, #128	; 0x80
 80119c8:	04d2      	lsls	r2, r2, #19
 80119ca:	e7eb      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119cc:	2204      	movs	r2, #4
 80119ce:	e7e9      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119d0:	2240      	movs	r2, #64	; 0x40
 80119d2:	e7e7      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
 80119d4:	2280      	movs	r2, #128	; 0x80
 80119d6:	00d2      	lsls	r2, r2, #3
 80119d8:	e7e4      	b.n	80119a4 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119da:	2380      	movs	r3, #128	; 0x80
 80119dc:	019b      	lsls	r3, r3, #6
 80119de:	e01a      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 80119e0:	40020080 	.word	0x40020080
 80119e4:	40020008 	.word	0x40020008
 80119e8:	4002001c 	.word	0x4002001c
 80119ec:	40020030 	.word	0x40020030
 80119f0:	40020044 	.word	0x40020044
 80119f4:	40020058 	.word	0x40020058
 80119f8:	4002006c 	.word	0x4002006c
 80119fc:	40020408 	.word	0x40020408
 8011a00:	4002041c 	.word	0x4002041c
 8011a04:	40020430 	.word	0x40020430
 8011a08:	40020444 	.word	0x40020444
 8011a0c:	40020000 	.word	0x40020000
 8011a10:	40020400 	.word	0x40020400
 8011a14:	2302      	movs	r3, #2
 8011a16:	400b      	ands	r3, r1
 8011a18:	1e59      	subs	r1, r3, #1
 8011a1a:	418b      	sbcs	r3, r1
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d100      	bne.n	8011a24 <HAL_DMA_IRQHandler+0x5f8>
 8011a22:	e0af      	b.n	8011b84 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011a24:	6813      	ldr	r3, [r2, #0]
 8011a26:	079b      	lsls	r3, r3, #30
 8011a28:	d400      	bmi.n	8011a2c <HAL_DMA_IRQHandler+0x600>
 8011a2a:	e0ab      	b.n	8011b84 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011a2c:	6813      	ldr	r3, [r2, #0]
 8011a2e:	069b      	lsls	r3, r3, #26
 8011a30:	d403      	bmi.n	8011a3a <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011a32:	6813      	ldr	r3, [r2, #0]
 8011a34:	2102      	movs	r1, #2
 8011a36:	438b      	bics	r3, r1
 8011a38:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	4a7f      	ldr	r2, [pc, #508]	; (8011c3c <HAL_DMA_IRQHandler+0x810>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d800      	bhi.n	8011a44 <HAL_DMA_IRQHandler+0x618>
 8011a42:	e0b8      	b.n	8011bb6 <HAL_DMA_IRQHandler+0x78a>
 8011a44:	4a7e      	ldr	r2, [pc, #504]	; (8011c40 <HAL_DMA_IRQHandler+0x814>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d100      	bne.n	8011a4c <HAL_DMA_IRQHandler+0x620>
 8011a4a:	e08b      	b.n	8011b64 <HAL_DMA_IRQHandler+0x738>
 8011a4c:	4a7d      	ldr	r2, [pc, #500]	; (8011c44 <HAL_DMA_IRQHandler+0x818>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d100      	bne.n	8011a54 <HAL_DMA_IRQHandler+0x628>
 8011a52:	e098      	b.n	8011b86 <HAL_DMA_IRQHandler+0x75a>
 8011a54:	4a7c      	ldr	r2, [pc, #496]	; (8011c48 <HAL_DMA_IRQHandler+0x81c>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d100      	bne.n	8011a5c <HAL_DMA_IRQHandler+0x630>
 8011a5a:	e096      	b.n	8011b8a <HAL_DMA_IRQHandler+0x75e>
 8011a5c:	4a7b      	ldr	r2, [pc, #492]	; (8011c4c <HAL_DMA_IRQHandler+0x820>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d100      	bne.n	8011a64 <HAL_DMA_IRQHandler+0x638>
 8011a62:	e095      	b.n	8011b90 <HAL_DMA_IRQHandler+0x764>
 8011a64:	4a7a      	ldr	r2, [pc, #488]	; (8011c50 <HAL_DMA_IRQHandler+0x824>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d100      	bne.n	8011a6c <HAL_DMA_IRQHandler+0x640>
 8011a6a:	e094      	b.n	8011b96 <HAL_DMA_IRQHandler+0x76a>
 8011a6c:	4a79      	ldr	r2, [pc, #484]	; (8011c54 <HAL_DMA_IRQHandler+0x828>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d100      	bne.n	8011a74 <HAL_DMA_IRQHandler+0x648>
 8011a72:	e093      	b.n	8011b9c <HAL_DMA_IRQHandler+0x770>
 8011a74:	4a71      	ldr	r2, [pc, #452]	; (8011c3c <HAL_DMA_IRQHandler+0x810>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d100      	bne.n	8011a7c <HAL_DMA_IRQHandler+0x650>
 8011a7a:	e092      	b.n	8011ba2 <HAL_DMA_IRQHandler+0x776>
 8011a7c:	4a76      	ldr	r2, [pc, #472]	; (8011c58 <HAL_DMA_IRQHandler+0x82c>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d100      	bne.n	8011a84 <HAL_DMA_IRQHandler+0x658>
 8011a82:	e091      	b.n	8011ba8 <HAL_DMA_IRQHandler+0x77c>
 8011a84:	4a75      	ldr	r2, [pc, #468]	; (8011c5c <HAL_DMA_IRQHandler+0x830>)
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d100      	bne.n	8011a8c <HAL_DMA_IRQHandler+0x660>
 8011a8a:	e08f      	b.n	8011bac <HAL_DMA_IRQHandler+0x780>
 8011a8c:	4a74      	ldr	r2, [pc, #464]	; (8011c60 <HAL_DMA_IRQHandler+0x834>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d100      	bne.n	8011a94 <HAL_DMA_IRQHandler+0x668>
 8011a92:	e08d      	b.n	8011bb0 <HAL_DMA_IRQHandler+0x784>
 8011a94:	4a73      	ldr	r2, [pc, #460]	; (8011c64 <HAL_DMA_IRQHandler+0x838>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d061      	beq.n	8011b5e <HAL_DMA_IRQHandler+0x732>
 8011a9a:	2280      	movs	r2, #128	; 0x80
 8011a9c:	0292      	lsls	r2, r2, #10
 8011a9e:	e062      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011aa0:	2320      	movs	r3, #32
 8011aa2:	e7b8      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011aa4:	2380      	movs	r3, #128	; 0x80
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	e7b5      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011aaa:	2380      	movs	r3, #128	; 0x80
 8011aac:	019b      	lsls	r3, r3, #6
 8011aae:	e7b2      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011ab0:	2380      	movs	r3, #128	; 0x80
 8011ab2:	029b      	lsls	r3, r3, #10
 8011ab4:	e7af      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011ab6:	2380      	movs	r3, #128	; 0x80
 8011ab8:	039b      	lsls	r3, r3, #14
 8011aba:	e7ac      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011abc:	2380      	movs	r3, #128	; 0x80
 8011abe:	049b      	lsls	r3, r3, #18
 8011ac0:	e7a9      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011ac2:	2302      	movs	r3, #2
 8011ac4:	e7a7      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011ac6:	2320      	movs	r3, #32
 8011ac8:	e7a5      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011aca:	2380      	movs	r3, #128	; 0x80
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	e7a2      	b.n	8011a16 <HAL_DMA_IRQHandler+0x5ea>
 8011ad0:	4b65      	ldr	r3, [pc, #404]	; (8011c68 <HAL_DMA_IRQHandler+0x83c>)
 8011ad2:	6819      	ldr	r1, [r3, #0]
 8011ad4:	4b5a      	ldr	r3, [pc, #360]	; (8011c40 <HAL_DMA_IRQHandler+0x814>)
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d023      	beq.n	8011b22 <HAL_DMA_IRQHandler+0x6f6>
 8011ada:	4b5a      	ldr	r3, [pc, #360]	; (8011c44 <HAL_DMA_IRQHandler+0x818>)
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d026      	beq.n	8011b2e <HAL_DMA_IRQHandler+0x702>
 8011ae0:	4b59      	ldr	r3, [pc, #356]	; (8011c48 <HAL_DMA_IRQHandler+0x81c>)
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d025      	beq.n	8011b32 <HAL_DMA_IRQHandler+0x706>
 8011ae6:	4b59      	ldr	r3, [pc, #356]	; (8011c4c <HAL_DMA_IRQHandler+0x820>)
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d025      	beq.n	8011b38 <HAL_DMA_IRQHandler+0x70c>
 8011aec:	4b58      	ldr	r3, [pc, #352]	; (8011c50 <HAL_DMA_IRQHandler+0x824>)
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d025      	beq.n	8011b3e <HAL_DMA_IRQHandler+0x712>
 8011af2:	4b58      	ldr	r3, [pc, #352]	; (8011c54 <HAL_DMA_IRQHandler+0x828>)
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d025      	beq.n	8011b44 <HAL_DMA_IRQHandler+0x718>
 8011af8:	4b50      	ldr	r3, [pc, #320]	; (8011c3c <HAL_DMA_IRQHandler+0x810>)
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d025      	beq.n	8011b4a <HAL_DMA_IRQHandler+0x71e>
 8011afe:	4b56      	ldr	r3, [pc, #344]	; (8011c58 <HAL_DMA_IRQHandler+0x82c>)
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d025      	beq.n	8011b50 <HAL_DMA_IRQHandler+0x724>
 8011b04:	4b55      	ldr	r3, [pc, #340]	; (8011c5c <HAL_DMA_IRQHandler+0x830>)
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d024      	beq.n	8011b54 <HAL_DMA_IRQHandler+0x728>
 8011b0a:	4b55      	ldr	r3, [pc, #340]	; (8011c60 <HAL_DMA_IRQHandler+0x834>)
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d023      	beq.n	8011b58 <HAL_DMA_IRQHandler+0x72c>
 8011b10:	4b54      	ldr	r3, [pc, #336]	; (8011c64 <HAL_DMA_IRQHandler+0x838>)
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d002      	beq.n	8011b1c <HAL_DMA_IRQHandler+0x6f0>
 8011b16:	2380      	movs	r3, #128	; 0x80
 8011b18:	029b      	lsls	r3, r3, #10
 8011b1a:	e003      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b1c:	2380      	movs	r3, #128	; 0x80
 8011b1e:	019b      	lsls	r3, r3, #6
 8011b20:	e000      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b22:	2302      	movs	r3, #2
 8011b24:	400b      	ands	r3, r1
 8011b26:	1e59      	subs	r1, r3, #1
 8011b28:	418b      	sbcs	r3, r1
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	e777      	b.n	8011a1e <HAL_DMA_IRQHandler+0x5f2>
 8011b2e:	2320      	movs	r3, #32
 8011b30:	e7f8      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b32:	2380      	movs	r3, #128	; 0x80
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	e7f5      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b38:	2380      	movs	r3, #128	; 0x80
 8011b3a:	019b      	lsls	r3, r3, #6
 8011b3c:	e7f2      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b3e:	2380      	movs	r3, #128	; 0x80
 8011b40:	029b      	lsls	r3, r3, #10
 8011b42:	e7ef      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b44:	2380      	movs	r3, #128	; 0x80
 8011b46:	039b      	lsls	r3, r3, #14
 8011b48:	e7ec      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b4a:	2380      	movs	r3, #128	; 0x80
 8011b4c:	049b      	lsls	r3, r3, #18
 8011b4e:	e7e9      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b50:	2302      	movs	r3, #2
 8011b52:	e7e7      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b54:	2320      	movs	r3, #32
 8011b56:	e7e5      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
 8011b58:	2380      	movs	r3, #128	; 0x80
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	e7e2      	b.n	8011b24 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011b5e:	2280      	movs	r2, #128	; 0x80
 8011b60:	0192      	lsls	r2, r2, #6
 8011b62:	e000      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011b64:	2202      	movs	r2, #2
 8011b66:	4b41      	ldr	r3, [pc, #260]	; (8011c6c <HAL_DMA_IRQHandler+0x840>)
 8011b68:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b6c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011b6e:	2321      	movs	r3, #33	; 0x21
 8011b70:	2201      	movs	r2, #1
 8011b72:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011b74:	3b01      	subs	r3, #1
 8011b76:	2200      	movs	r2, #0
 8011b78:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d001      	beq.n	8011b84 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8011b80:	0020      	movs	r0, r4
 8011b82:	4798      	blx	r3
}  
 8011b84:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011b86:	2220      	movs	r2, #32
 8011b88:	e7ed      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011b8a:	2280      	movs	r2, #128	; 0x80
 8011b8c:	0092      	lsls	r2, r2, #2
 8011b8e:	e7ea      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011b90:	2280      	movs	r2, #128	; 0x80
 8011b92:	0192      	lsls	r2, r2, #6
 8011b94:	e7e7      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011b96:	2280      	movs	r2, #128	; 0x80
 8011b98:	0292      	lsls	r2, r2, #10
 8011b9a:	e7e4      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011b9c:	2280      	movs	r2, #128	; 0x80
 8011b9e:	0392      	lsls	r2, r2, #14
 8011ba0:	e7e1      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011ba2:	2280      	movs	r2, #128	; 0x80
 8011ba4:	0492      	lsls	r2, r2, #18
 8011ba6:	e7de      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011ba8:	2202      	movs	r2, #2
 8011baa:	e7dc      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011bac:	2220      	movs	r2, #32
 8011bae:	e7da      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011bb0:	2280      	movs	r2, #128	; 0x80
 8011bb2:	0092      	lsls	r2, r2, #2
 8011bb4:	e7d7      	b.n	8011b66 <HAL_DMA_IRQHandler+0x73a>
 8011bb6:	4a22      	ldr	r2, [pc, #136]	; (8011c40 <HAL_DMA_IRQHandler+0x814>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d023      	beq.n	8011c04 <HAL_DMA_IRQHandler+0x7d8>
 8011bbc:	4a21      	ldr	r2, [pc, #132]	; (8011c44 <HAL_DMA_IRQHandler+0x818>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d024      	beq.n	8011c0c <HAL_DMA_IRQHandler+0x7e0>
 8011bc2:	4a21      	ldr	r2, [pc, #132]	; (8011c48 <HAL_DMA_IRQHandler+0x81c>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d023      	beq.n	8011c10 <HAL_DMA_IRQHandler+0x7e4>
 8011bc8:	4a20      	ldr	r2, [pc, #128]	; (8011c4c <HAL_DMA_IRQHandler+0x820>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d023      	beq.n	8011c16 <HAL_DMA_IRQHandler+0x7ea>
 8011bce:	4a20      	ldr	r2, [pc, #128]	; (8011c50 <HAL_DMA_IRQHandler+0x824>)
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d023      	beq.n	8011c1c <HAL_DMA_IRQHandler+0x7f0>
 8011bd4:	4a1f      	ldr	r2, [pc, #124]	; (8011c54 <HAL_DMA_IRQHandler+0x828>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d023      	beq.n	8011c22 <HAL_DMA_IRQHandler+0x7f6>
 8011bda:	4a18      	ldr	r2, [pc, #96]	; (8011c3c <HAL_DMA_IRQHandler+0x810>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d023      	beq.n	8011c28 <HAL_DMA_IRQHandler+0x7fc>
 8011be0:	4a1d      	ldr	r2, [pc, #116]	; (8011c58 <HAL_DMA_IRQHandler+0x82c>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d023      	beq.n	8011c2e <HAL_DMA_IRQHandler+0x802>
 8011be6:	4a1d      	ldr	r2, [pc, #116]	; (8011c5c <HAL_DMA_IRQHandler+0x830>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d022      	beq.n	8011c32 <HAL_DMA_IRQHandler+0x806>
 8011bec:	4a1c      	ldr	r2, [pc, #112]	; (8011c60 <HAL_DMA_IRQHandler+0x834>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d021      	beq.n	8011c36 <HAL_DMA_IRQHandler+0x80a>
 8011bf2:	4a1c      	ldr	r2, [pc, #112]	; (8011c64 <HAL_DMA_IRQHandler+0x838>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d002      	beq.n	8011bfe <HAL_DMA_IRQHandler+0x7d2>
 8011bf8:	2280      	movs	r2, #128	; 0x80
 8011bfa:	0292      	lsls	r2, r2, #10
 8011bfc:	e003      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011bfe:	2280      	movs	r2, #128	; 0x80
 8011c00:	0192      	lsls	r2, r2, #6
 8011c02:	e000      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c04:	2202      	movs	r2, #2
 8011c06:	4b18      	ldr	r3, [pc, #96]	; (8011c68 <HAL_DMA_IRQHandler+0x83c>)
 8011c08:	605a      	str	r2, [r3, #4]
 8011c0a:	e7ae      	b.n	8011b6a <HAL_DMA_IRQHandler+0x73e>
 8011c0c:	2220      	movs	r2, #32
 8011c0e:	e7fa      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c10:	2280      	movs	r2, #128	; 0x80
 8011c12:	0092      	lsls	r2, r2, #2
 8011c14:	e7f7      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c16:	2280      	movs	r2, #128	; 0x80
 8011c18:	0192      	lsls	r2, r2, #6
 8011c1a:	e7f4      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c1c:	2280      	movs	r2, #128	; 0x80
 8011c1e:	0292      	lsls	r2, r2, #10
 8011c20:	e7f1      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c22:	2280      	movs	r2, #128	; 0x80
 8011c24:	0392      	lsls	r2, r2, #14
 8011c26:	e7ee      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c28:	2280      	movs	r2, #128	; 0x80
 8011c2a:	0492      	lsls	r2, r2, #18
 8011c2c:	e7eb      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c2e:	2202      	movs	r2, #2
 8011c30:	e7e9      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c32:	2220      	movs	r2, #32
 8011c34:	e7e7      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c36:	2280      	movs	r2, #128	; 0x80
 8011c38:	0092      	lsls	r2, r2, #2
 8011c3a:	e7e4      	b.n	8011c06 <HAL_DMA_IRQHandler+0x7da>
 8011c3c:	40020080 	.word	0x40020080
 8011c40:	40020008 	.word	0x40020008
 8011c44:	4002001c 	.word	0x4002001c
 8011c48:	40020030 	.word	0x40020030
 8011c4c:	40020044 	.word	0x40020044
 8011c50:	40020058 	.word	0x40020058
 8011c54:	4002006c 	.word	0x4002006c
 8011c58:	40020408 	.word	0x40020408
 8011c5c:	4002041c 	.word	0x4002041c
 8011c60:	40020430 	.word	0x40020430
 8011c64:	40020444 	.word	0x40020444
 8011c68:	40020000 	.word	0x40020000
 8011c6c:	40020400 	.word	0x40020400

08011c70 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011c70:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011c72:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <FLASH_Program_HalfWord+0x18>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011c78:	4a04      	ldr	r2, [pc, #16]	; (8011c8c <FLASH_Program_HalfWord+0x1c>)
 8011c7a:	6913      	ldr	r3, [r2, #16]
 8011c7c:	2401      	movs	r4, #1
 8011c7e:	4323      	orrs	r3, r4
 8011c80:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8011c82:	8001      	strh	r1, [r0, #0]
}
 8011c84:	bd10      	pop	{r4, pc}
 8011c86:	46c0      	nop			; (mov r8, r8)
 8011c88:	20006e50 	.word	0x20006e50
 8011c8c:	40022000 	.word	0x40022000

08011c90 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011c90:	4b0a      	ldr	r3, [pc, #40]	; (8011cbc <FLASH_SetErrorCode+0x2c>)
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	06db      	lsls	r3, r3, #27
 8011c96:	d504      	bpl.n	8011ca2 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011c98:	4a09      	ldr	r2, [pc, #36]	; (8011cc0 <FLASH_SetErrorCode+0x30>)
 8011c9a:	69d3      	ldr	r3, [r2, #28]
 8011c9c:	2102      	movs	r1, #2
 8011c9e:	430b      	orrs	r3, r1
 8011ca0:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011ca2:	4b06      	ldr	r3, [pc, #24]	; (8011cbc <FLASH_SetErrorCode+0x2c>)
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	075b      	lsls	r3, r3, #29
 8011ca8:	d504      	bpl.n	8011cb4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011caa:	4a05      	ldr	r2, [pc, #20]	; (8011cc0 <FLASH_SetErrorCode+0x30>)
 8011cac:	69d3      	ldr	r3, [r2, #28]
 8011cae:	2101      	movs	r1, #1
 8011cb0:	430b      	orrs	r3, r1
 8011cb2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011cb4:	4b01      	ldr	r3, [pc, #4]	; (8011cbc <FLASH_SetErrorCode+0x2c>)
 8011cb6:	2214      	movs	r2, #20
 8011cb8:	60da      	str	r2, [r3, #12]
}  
 8011cba:	4770      	bx	lr
 8011cbc:	40022000 	.word	0x40022000
 8011cc0:	20006e50 	.word	0x20006e50

08011cc4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011cc4:	4b06      	ldr	r3, [pc, #24]	; (8011ce0 <HAL_FLASH_Unlock+0x1c>)
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	061b      	lsls	r3, r3, #24
 8011cca:	d506      	bpl.n	8011cda <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ccc:	4b04      	ldr	r3, [pc, #16]	; (8011ce0 <HAL_FLASH_Unlock+0x1c>)
 8011cce:	4a05      	ldr	r2, [pc, #20]	; (8011ce4 <HAL_FLASH_Unlock+0x20>)
 8011cd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011cd2:	4a05      	ldr	r2, [pc, #20]	; (8011ce8 <HAL_FLASH_Unlock+0x24>)
 8011cd4:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011cd6:	2000      	movs	r0, #0
}
 8011cd8:	4770      	bx	lr
    return HAL_ERROR;
 8011cda:	2001      	movs	r0, #1
 8011cdc:	e7fc      	b.n	8011cd8 <HAL_FLASH_Unlock+0x14>
 8011cde:	46c0      	nop			; (mov r8, r8)
 8011ce0:	40022000 	.word	0x40022000
 8011ce4:	45670123 	.word	0x45670123
 8011ce8:	cdef89ab 	.word	0xcdef89ab

08011cec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011cec:	4a03      	ldr	r2, [pc, #12]	; (8011cfc <HAL_FLASH_Lock+0x10>)
 8011cee:	6913      	ldr	r3, [r2, #16]
 8011cf0:	2180      	movs	r1, #128	; 0x80
 8011cf2:	430b      	orrs	r3, r1
 8011cf4:	6113      	str	r3, [r2, #16]
}
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	4770      	bx	lr
 8011cfa:	46c0      	nop			; (mov r8, r8)
 8011cfc:	40022000 	.word	0x40022000

08011d00 <FLASH_WaitForLastOperation>:
{
 8011d00:	b570      	push	{r4, r5, r6, lr}
 8011d02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011d04:	f7ff f956 	bl	8010fb4 <HAL_GetTick>
 8011d08:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011d0a:	4b13      	ldr	r3, [pc, #76]	; (8011d58 <FLASH_WaitForLastOperation+0x58>)
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	07db      	lsls	r3, r3, #31
 8011d10:	d50a      	bpl.n	8011d28 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8011d12:	1c63      	adds	r3, r4, #1
 8011d14:	d0f9      	beq.n	8011d0a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011d16:	2c00      	cmp	r4, #0
 8011d18:	d019      	beq.n	8011d4e <FLASH_WaitForLastOperation+0x4e>
 8011d1a:	f7ff f94b 	bl	8010fb4 <HAL_GetTick>
 8011d1e:	1b40      	subs	r0, r0, r5
 8011d20:	42a0      	cmp	r0, r4
 8011d22:	d9f2      	bls.n	8011d0a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8011d24:	2003      	movs	r0, #3
 8011d26:	e011      	b.n	8011d4c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011d28:	4b0b      	ldr	r3, [pc, #44]	; (8011d58 <FLASH_WaitForLastOperation+0x58>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	069b      	lsls	r3, r3, #26
 8011d2e:	d502      	bpl.n	8011d36 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011d30:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <FLASH_WaitForLastOperation+0x58>)
 8011d32:	2220      	movs	r2, #32
 8011d34:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011d36:	4b08      	ldr	r3, [pc, #32]	; (8011d58 <FLASH_WaitForLastOperation+0x58>)
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	06db      	lsls	r3, r3, #27
 8011d3c:	d403      	bmi.n	8011d46 <FLASH_WaitForLastOperation+0x46>
 8011d3e:	4b06      	ldr	r3, [pc, #24]	; (8011d58 <FLASH_WaitForLastOperation+0x58>)
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	075b      	lsls	r3, r3, #29
 8011d44:	d505      	bpl.n	8011d52 <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8011d46:	f7ff ffa3 	bl	8011c90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011d4a:	2001      	movs	r0, #1
}
 8011d4c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8011d4e:	2003      	movs	r0, #3
 8011d50:	e7fc      	b.n	8011d4c <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8011d52:	2000      	movs	r0, #0
 8011d54:	e7fa      	b.n	8011d4c <FLASH_WaitForLastOperation+0x4c>
 8011d56:	46c0      	nop			; (mov r8, r8)
 8011d58:	40022000 	.word	0x40022000

08011d5c <HAL_FLASH_Program>:
{
 8011d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d5e:	46c6      	mov	lr, r8
 8011d60:	b500      	push	{lr}
 8011d62:	0004      	movs	r4, r0
 8011d64:	000d      	movs	r5, r1
 8011d66:	4690      	mov	r8, r2
 8011d68:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8011d6a:	4b21      	ldr	r3, [pc, #132]	; (8011df0 <HAL_FLASH_Program+0x94>)
 8011d6c:	7e1b      	ldrb	r3, [r3, #24]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d03b      	beq.n	8011dea <HAL_FLASH_Program+0x8e>
 8011d72:	4b1f      	ldr	r3, [pc, #124]	; (8011df0 <HAL_FLASH_Program+0x94>)
 8011d74:	2201      	movs	r2, #1
 8011d76:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011d78:	481e      	ldr	r0, [pc, #120]	; (8011df4 <HAL_FLASH_Program+0x98>)
 8011d7a:	f7ff ffc1 	bl	8011d00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d12d      	bne.n	8011dde <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011d82:	2c01      	cmp	r4, #1
 8011d84:	d006      	beq.n	8011d94 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011d86:	2c02      	cmp	r4, #2
 8011d88:	d002      	beq.n	8011d90 <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 8011d8a:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 8011d8c:	2400      	movs	r4, #0
 8011d8e:	e01b      	b.n	8011dc8 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 8011d90:	2702      	movs	r7, #2
 8011d92:	e7fb      	b.n	8011d8c <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8011d94:	2701      	movs	r7, #1
 8011d96:	e7f9      	b.n	8011d8c <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011d98:	2220      	movs	r2, #32
 8011d9a:	1ad2      	subs	r2, r2, r3
 8011d9c:	0031      	movs	r1, r6
 8011d9e:	4091      	lsls	r1, r2
 8011da0:	000a      	movs	r2, r1
 8011da2:	4641      	mov	r1, r8
 8011da4:	40d9      	lsrs	r1, r3
 8011da6:	4311      	orrs	r1, r2
 8011da8:	b289      	uxth	r1, r1
 8011daa:	1940      	adds	r0, r0, r5
 8011dac:	f7ff ff60 	bl	8011c70 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011db0:	4810      	ldr	r0, [pc, #64]	; (8011df4 <HAL_FLASH_Program+0x98>)
 8011db2:	f7ff ffa5 	bl	8011d00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011db6:	4a10      	ldr	r2, [pc, #64]	; (8011df8 <HAL_FLASH_Program+0x9c>)
 8011db8:	6913      	ldr	r3, [r2, #16]
 8011dba:	2101      	movs	r1, #1
 8011dbc:	438b      	bics	r3, r1
 8011dbe:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d10c      	bne.n	8011dde <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 8011dc4:	3401      	adds	r4, #1
 8011dc6:	b2e4      	uxtb	r4, r4
 8011dc8:	42bc      	cmp	r4, r7
 8011dca:	d208      	bcs.n	8011dde <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011dcc:	0060      	lsls	r0, r4, #1
 8011dce:	0123      	lsls	r3, r4, #4
 8011dd0:	2220      	movs	r2, #32
 8011dd2:	4252      	negs	r2, r2
 8011dd4:	189a      	adds	r2, r3, r2
 8011dd6:	d4df      	bmi.n	8011d98 <HAL_FLASH_Program+0x3c>
 8011dd8:	0031      	movs	r1, r6
 8011dda:	40d1      	lsrs	r1, r2
 8011ddc:	e7e4      	b.n	8011da8 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 8011dde:	4b04      	ldr	r3, [pc, #16]	; (8011df0 <HAL_FLASH_Program+0x94>)
 8011de0:	2200      	movs	r2, #0
 8011de2:	761a      	strb	r2, [r3, #24]
}
 8011de4:	bc04      	pop	{r2}
 8011de6:	4690      	mov	r8, r2
 8011de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011dea:	2002      	movs	r0, #2
 8011dec:	e7fa      	b.n	8011de4 <HAL_FLASH_Program+0x88>
 8011dee:	46c0      	nop			; (mov r8, r8)
 8011df0:	20006e50 	.word	0x20006e50
 8011df4:	0000c350 	.word	0x0000c350
 8011df8:	40022000 	.word	0x40022000

08011dfc <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011dfc:	4b06      	ldr	r3, [pc, #24]	; (8011e18 <FLASH_MassErase+0x1c>)
 8011dfe:	2200      	movs	r2, #0
 8011e00:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011e02:	4b06      	ldr	r3, [pc, #24]	; (8011e1c <FLASH_MassErase+0x20>)
 8011e04:	691a      	ldr	r2, [r3, #16]
 8011e06:	2104      	movs	r1, #4
 8011e08:	430a      	orrs	r2, r1
 8011e0a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011e0c:	691a      	ldr	r2, [r3, #16]
 8011e0e:	313c      	adds	r1, #60	; 0x3c
 8011e10:	430a      	orrs	r2, r1
 8011e12:	611a      	str	r2, [r3, #16]
}
 8011e14:	4770      	bx	lr
 8011e16:	46c0      	nop			; (mov r8, r8)
 8011e18:	20006e50 	.word	0x20006e50
 8011e1c:	40022000 	.word	0x40022000

08011e20 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011e20:	4b06      	ldr	r3, [pc, #24]	; (8011e3c <FLASH_PageErase+0x1c>)
 8011e22:	2200      	movs	r2, #0
 8011e24:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <FLASH_PageErase+0x20>)
 8011e28:	691a      	ldr	r2, [r3, #16]
 8011e2a:	2102      	movs	r1, #2
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011e30:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011e32:	691a      	ldr	r2, [r3, #16]
 8011e34:	313e      	adds	r1, #62	; 0x3e
 8011e36:	430a      	orrs	r2, r1
 8011e38:	611a      	str	r2, [r3, #16]
}
 8011e3a:	4770      	bx	lr
 8011e3c:	20006e50 	.word	0x20006e50
 8011e40:	40022000 	.word	0x40022000

08011e44 <HAL_FLASHEx_Erase>:
{
 8011e44:	b570      	push	{r4, r5, r6, lr}
 8011e46:	0005      	movs	r5, r0
 8011e48:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8011e4a:	4b24      	ldr	r3, [pc, #144]	; (8011edc <HAL_FLASHEx_Erase+0x98>)
 8011e4c:	7e1b      	ldrb	r3, [r3, #24]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d041      	beq.n	8011ed6 <HAL_FLASHEx_Erase+0x92>
 8011e52:	4b22      	ldr	r3, [pc, #136]	; (8011edc <HAL_FLASHEx_Erase+0x98>)
 8011e54:	2201      	movs	r2, #1
 8011e56:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	d022      	beq.n	8011ea4 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011e5e:	4820      	ldr	r0, [pc, #128]	; (8011ee0 <HAL_FLASHEx_Erase+0x9c>)
 8011e60:	f7ff ff4e 	bl	8011d00 <FLASH_WaitForLastOperation>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d131      	bne.n	8011ecc <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	425b      	negs	r3, r3
 8011e6c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8011e6e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e70:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011e72:	68ab      	ldr	r3, [r5, #8]
 8011e74:	02db      	lsls	r3, r3, #11
 8011e76:	686a      	ldr	r2, [r5, #4]
 8011e78:	4694      	mov	ip, r2
 8011e7a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d926      	bls.n	8011ece <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8011e80:	0020      	movs	r0, r4
 8011e82:	f7ff ffcd 	bl	8011e20 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e86:	4816      	ldr	r0, [pc, #88]	; (8011ee0 <HAL_FLASHEx_Erase+0x9c>)
 8011e88:	f7ff ff3a 	bl	8011d00 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011e8c:	4a15      	ldr	r2, [pc, #84]	; (8011ee4 <HAL_FLASHEx_Erase+0xa0>)
 8011e8e:	6913      	ldr	r3, [r2, #16]
 8011e90:	2102      	movs	r1, #2
 8011e92:	438b      	bics	r3, r1
 8011e94:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d116      	bne.n	8011ec8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8011e9a:	2380      	movs	r3, #128	; 0x80
 8011e9c:	011b      	lsls	r3, r3, #4
 8011e9e:	469c      	mov	ip, r3
 8011ea0:	4464      	add	r4, ip
 8011ea2:	e7e6      	b.n	8011e72 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ea4:	480e      	ldr	r0, [pc, #56]	; (8011ee0 <HAL_FLASHEx_Erase+0x9c>)
 8011ea6:	f7ff ff2b 	bl	8011d00 <FLASH_WaitForLastOperation>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d001      	beq.n	8011eb2 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011eae:	2001      	movs	r0, #1
 8011eb0:	e00d      	b.n	8011ece <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8011eb2:	f7ff ffa3 	bl	8011dfc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011eb6:	480a      	ldr	r0, [pc, #40]	; (8011ee0 <HAL_FLASHEx_Erase+0x9c>)
 8011eb8:	f7ff ff22 	bl	8011d00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011ebc:	4a09      	ldr	r2, [pc, #36]	; (8011ee4 <HAL_FLASHEx_Erase+0xa0>)
 8011ebe:	6913      	ldr	r3, [r2, #16]
 8011ec0:	2104      	movs	r1, #4
 8011ec2:	438b      	bics	r3, r1
 8011ec4:	6113      	str	r3, [r2, #16]
 8011ec6:	e002      	b.n	8011ece <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8011ec8:	6034      	str	r4, [r6, #0]
            break;
 8011eca:	e000      	b.n	8011ece <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011ecc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8011ece:	4b03      	ldr	r3, [pc, #12]	; (8011edc <HAL_FLASHEx_Erase+0x98>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	761a      	strb	r2, [r3, #24]
}
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8011ed6:	2002      	movs	r0, #2
 8011ed8:	e7fc      	b.n	8011ed4 <HAL_FLASHEx_Erase+0x90>
 8011eda:	46c0      	nop			; (mov r8, r8)
 8011edc:	20006e50 	.word	0x20006e50
 8011ee0:	0000c350 	.word	0x0000c350
 8011ee4:	40022000 	.word	0x40022000

08011ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eea:	46c6      	mov	lr, r8
 8011eec:	b500      	push	{lr}
 8011eee:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 8011ef0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011ef2:	e033      	b.n	8011f5c <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011ef4:	2604      	movs	r6, #4
 8011ef6:	e000      	b.n	8011efa <HAL_GPIO_Init+0x12>
 8011ef8:	2600      	movs	r6, #0
 8011efa:	40ae      	lsls	r6, r5
 8011efc:	0035      	movs	r5, r6
 8011efe:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011f00:	3402      	adds	r4, #2
 8011f02:	00a4      	lsls	r4, r4, #2
 8011f04:	4e55      	ldr	r6, [pc, #340]	; (801205c <HAL_GPIO_Init+0x174>)
 8011f06:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011f08:	4c55      	ldr	r4, [pc, #340]	; (8012060 <HAL_GPIO_Init+0x178>)
 8011f0a:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011f0c:	43d4      	mvns	r4, r2
 8011f0e:	002e      	movs	r6, r5
 8011f10:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011f12:	684f      	ldr	r7, [r1, #4]
 8011f14:	03ff      	lsls	r7, r7, #15
 8011f16:	d501      	bpl.n	8011f1c <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8011f18:	4315      	orrs	r5, r2
 8011f1a:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8011f1c:	4d50      	ldr	r5, [pc, #320]	; (8012060 <HAL_GPIO_Init+0x178>)
 8011f1e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8011f20:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011f22:	002e      	movs	r6, r5
 8011f24:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011f26:	684f      	ldr	r7, [r1, #4]
 8011f28:	03bf      	lsls	r7, r7, #14
 8011f2a:	d501      	bpl.n	8011f30 <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8011f2c:	4315      	orrs	r5, r2
 8011f2e:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8011f30:	4d4b      	ldr	r5, [pc, #300]	; (8012060 <HAL_GPIO_Init+0x178>)
 8011f32:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011f34:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011f36:	002e      	movs	r6, r5
 8011f38:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011f3a:	684f      	ldr	r7, [r1, #4]
 8011f3c:	02ff      	lsls	r7, r7, #11
 8011f3e:	d501      	bpl.n	8011f44 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 8011f40:	4315      	orrs	r5, r2
 8011f42:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8011f44:	4d46      	ldr	r5, [pc, #280]	; (8012060 <HAL_GPIO_Init+0x178>)
 8011f46:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8011f48:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011f4a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011f4c:	684e      	ldr	r6, [r1, #4]
 8011f4e:	02b6      	lsls	r6, r6, #10
 8011f50:	d501      	bpl.n	8011f56 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 8011f52:	432a      	orrs	r2, r5
 8011f54:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8011f56:	4a42      	ldr	r2, [pc, #264]	; (8012060 <HAL_GPIO_Init+0x178>)
 8011f58:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8011f5a:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011f5c:	680a      	ldr	r2, [r1, #0]
 8011f5e:	0014      	movs	r4, r2
 8011f60:	40dc      	lsrs	r4, r3
 8011f62:	d076      	beq.n	8012052 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011f64:	2401      	movs	r4, #1
 8011f66:	409c      	lsls	r4, r3
 8011f68:	4022      	ands	r2, r4
    if(iocurrent)
 8011f6a:	d0f6      	beq.n	8011f5a <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011f6c:	684c      	ldr	r4, [r1, #4]
 8011f6e:	2c02      	cmp	r4, #2
 8011f70:	d001      	beq.n	8011f76 <HAL_GPIO_Init+0x8e>
 8011f72:	2c12      	cmp	r4, #18
 8011f74:	d10e      	bne.n	8011f94 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8011f76:	08dc      	lsrs	r4, r3, #3
 8011f78:	3408      	adds	r4, #8
 8011f7a:	00a4      	lsls	r4, r4, #2
 8011f7c:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011f7e:	2507      	movs	r5, #7
 8011f80:	401d      	ands	r5, r3
 8011f82:	00ad      	lsls	r5, r5, #2
 8011f84:	270f      	movs	r7, #15
 8011f86:	40af      	lsls	r7, r5
 8011f88:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011f8a:	690f      	ldr	r7, [r1, #16]
 8011f8c:	40af      	lsls	r7, r5
 8011f8e:	003d      	movs	r5, r7
 8011f90:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 8011f92:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 8011f94:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011f96:	005e      	lsls	r6, r3, #1
 8011f98:	2403      	movs	r4, #3
 8011f9a:	0025      	movs	r5, r4
 8011f9c:	40b5      	lsls	r5, r6
 8011f9e:	43ed      	mvns	r5, r5
 8011fa0:	46a8      	mov	r8, r5
 8011fa2:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011fa4:	684d      	ldr	r5, [r1, #4]
 8011fa6:	402c      	ands	r4, r5
 8011fa8:	40b4      	lsls	r4, r6
 8011faa:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8011fac:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011fae:	684c      	ldr	r4, [r1, #4]
 8011fb0:	1e67      	subs	r7, r4, #1
 8011fb2:	2f01      	cmp	r7, #1
 8011fb4:	d903      	bls.n	8011fbe <HAL_GPIO_Init+0xd6>
 8011fb6:	2c11      	cmp	r4, #17
 8011fb8:	d001      	beq.n	8011fbe <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011fba:	2c12      	cmp	r4, #18
 8011fbc:	d111      	bne.n	8011fe2 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 8011fbe:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011fc0:	4644      	mov	r4, r8
 8011fc2:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011fc4:	68cc      	ldr	r4, [r1, #12]
 8011fc6:	40b4      	lsls	r4, r6
 8011fc8:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8011fca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011fcc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011fce:	2401      	movs	r4, #1
 8011fd0:	0025      	movs	r5, r4
 8011fd2:	409d      	lsls	r5, r3
 8011fd4:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011fd6:	684d      	ldr	r5, [r1, #4]
 8011fd8:	092d      	lsrs	r5, r5, #4
 8011fda:	402c      	ands	r4, r5
 8011fdc:	409c      	lsls	r4, r3
 8011fde:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8011fe0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011fe2:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011fe4:	4645      	mov	r5, r8
 8011fe6:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011fe8:	688d      	ldr	r5, [r1, #8]
 8011fea:	40b5      	lsls	r5, r6
 8011fec:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011fee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011ff0:	684c      	ldr	r4, [r1, #4]
 8011ff2:	00e4      	lsls	r4, r4, #3
 8011ff4:	d5b1      	bpl.n	8011f5a <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011ff6:	4d1b      	ldr	r5, [pc, #108]	; (8012064 <HAL_GPIO_Init+0x17c>)
 8011ff8:	69ae      	ldr	r6, [r5, #24]
 8011ffa:	2401      	movs	r4, #1
 8011ffc:	4326      	orrs	r6, r4
 8011ffe:	61ae      	str	r6, [r5, #24]
 8012000:	69ad      	ldr	r5, [r5, #24]
 8012002:	402c      	ands	r4, r5
 8012004:	9401      	str	r4, [sp, #4]
 8012006:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8012008:	089c      	lsrs	r4, r3, #2
 801200a:	1ca5      	adds	r5, r4, #2
 801200c:	00ad      	lsls	r5, r5, #2
 801200e:	4e13      	ldr	r6, [pc, #76]	; (801205c <HAL_GPIO_Init+0x174>)
 8012010:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012012:	2603      	movs	r6, #3
 8012014:	401e      	ands	r6, r3
 8012016:	00b5      	lsls	r5, r6, #2
 8012018:	260f      	movs	r6, #15
 801201a:	40ae      	lsls	r6, r5
 801201c:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801201e:	2690      	movs	r6, #144	; 0x90
 8012020:	05f6      	lsls	r6, r6, #23
 8012022:	42b0      	cmp	r0, r6
 8012024:	d100      	bne.n	8012028 <HAL_GPIO_Init+0x140>
 8012026:	e767      	b.n	8011ef8 <HAL_GPIO_Init+0x10>
 8012028:	4e0f      	ldr	r6, [pc, #60]	; (8012068 <HAL_GPIO_Init+0x180>)
 801202a:	42b0      	cmp	r0, r6
 801202c:	d00b      	beq.n	8012046 <HAL_GPIO_Init+0x15e>
 801202e:	4e0f      	ldr	r6, [pc, #60]	; (801206c <HAL_GPIO_Init+0x184>)
 8012030:	42b0      	cmp	r0, r6
 8012032:	d00a      	beq.n	801204a <HAL_GPIO_Init+0x162>
 8012034:	4e0e      	ldr	r6, [pc, #56]	; (8012070 <HAL_GPIO_Init+0x188>)
 8012036:	42b0      	cmp	r0, r6
 8012038:	d009      	beq.n	801204e <HAL_GPIO_Init+0x166>
 801203a:	4e0e      	ldr	r6, [pc, #56]	; (8012074 <HAL_GPIO_Init+0x18c>)
 801203c:	42b0      	cmp	r0, r6
 801203e:	d100      	bne.n	8012042 <HAL_GPIO_Init+0x15a>
 8012040:	e758      	b.n	8011ef4 <HAL_GPIO_Init+0xc>
 8012042:	2605      	movs	r6, #5
 8012044:	e759      	b.n	8011efa <HAL_GPIO_Init+0x12>
 8012046:	2601      	movs	r6, #1
 8012048:	e757      	b.n	8011efa <HAL_GPIO_Init+0x12>
 801204a:	2602      	movs	r6, #2
 801204c:	e755      	b.n	8011efa <HAL_GPIO_Init+0x12>
 801204e:	2603      	movs	r6, #3
 8012050:	e753      	b.n	8011efa <HAL_GPIO_Init+0x12>
  } 
}
 8012052:	b002      	add	sp, #8
 8012054:	bc04      	pop	{r2}
 8012056:	4690      	mov	r8, r2
 8012058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801205a:	46c0      	nop			; (mov r8, r8)
 801205c:	40010000 	.word	0x40010000
 8012060:	40010400 	.word	0x40010400
 8012064:	40021000 	.word	0x40021000
 8012068:	48000400 	.word	0x48000400
 801206c:	48000800 	.word	0x48000800
 8012070:	48000c00 	.word	0x48000c00
 8012074:	48001000 	.word	0x48001000

08012078 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012078:	6903      	ldr	r3, [r0, #16]
 801207a:	420b      	tst	r3, r1
 801207c:	d101      	bne.n	8012082 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801207e:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8012080:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8012082:	2001      	movs	r0, #1
 8012084:	e7fc      	b.n	8012080 <HAL_GPIO_ReadPin+0x8>

08012086 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012086:	2a00      	cmp	r2, #0
 8012088:	d101      	bne.n	801208e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801208a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801208c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801208e:	6181      	str	r1, [r0, #24]
 8012090:	e7fc      	b.n	801208c <HAL_GPIO_WritePin+0x6>

08012092 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012092:	6943      	ldr	r3, [r0, #20]
 8012094:	4059      	eors	r1, r3
 8012096:	6141      	str	r1, [r0, #20]
}
 8012098:	4770      	bx	lr

0801209a <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 801209a:	4770      	bx	lr

0801209c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801209c:	4a03      	ldr	r2, [pc, #12]	; (80120ac <HAL_PWR_EnableBkUpAccess+0x10>)
 801209e:	6811      	ldr	r1, [r2, #0]
 80120a0:	2380      	movs	r3, #128	; 0x80
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	430b      	orrs	r3, r1
 80120a6:	6013      	str	r3, [r2, #0]
}
 80120a8:	4770      	bx	lr
 80120aa:	46c0      	nop			; (mov r8, r8)
 80120ac:	40007000 	.word	0x40007000

080120b0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80120b0:	b530      	push	{r4, r5, lr}
 80120b2:	b083      	sub	sp, #12
 80120b4:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80120b6:	6803      	ldr	r3, [r0, #0]
 80120b8:	07db      	lsls	r3, r3, #31
 80120ba:	d534      	bpl.n	8012126 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80120bc:	4bc1      	ldr	r3, [pc, #772]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80120be:	685a      	ldr	r2, [r3, #4]
 80120c0:	230c      	movs	r3, #12
 80120c2:	4013      	ands	r3, r2
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	d026      	beq.n	8012116 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80120c8:	4bbe      	ldr	r3, [pc, #760]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80120ca:	685a      	ldr	r2, [r3, #4]
 80120cc:	230c      	movs	r3, #12
 80120ce:	4013      	ands	r3, r2
 80120d0:	2b08      	cmp	r3, #8
 80120d2:	d108      	bne.n	80120e6 <HAL_RCC_OscConfig+0x36>
 80120d4:	4bbb      	ldr	r3, [pc, #748]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	22c0      	movs	r2, #192	; 0xc0
 80120da:	0252      	lsls	r2, r2, #9
 80120dc:	4013      	ands	r3, r2
 80120de:	2280      	movs	r2, #128	; 0x80
 80120e0:	0252      	lsls	r2, r2, #9
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d017      	beq.n	8012116 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80120e6:	4bb7      	ldr	r3, [pc, #732]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	49b7      	ldr	r1, [pc, #732]	; (80123c8 <HAL_RCC_OscConfig+0x318>)
 80120ec:	400a      	ands	r2, r1
 80120ee:	601a      	str	r2, [r3, #0]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	49b6      	ldr	r1, [pc, #728]	; (80123cc <HAL_RCC_OscConfig+0x31c>)
 80120f4:	400a      	ands	r2, r1
 80120f6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120f8:	f7fe ff5c 	bl	8010fb4 <HAL_GetTick>
 80120fc:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120fe:	4bb1      	ldr	r3, [pc, #708]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	039b      	lsls	r3, r3, #14
 8012104:	d536      	bpl.n	8012174 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012106:	f7fe ff55 	bl	8010fb4 <HAL_GetTick>
 801210a:	1b40      	subs	r0, r0, r5
 801210c:	2864      	cmp	r0, #100	; 0x64
 801210e:	d9f6      	bls.n	80120fe <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8012110:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8012112:	b003      	add	sp, #12
 8012114:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012116:	4bab      	ldr	r3, [pc, #684]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	039b      	lsls	r3, r3, #14
 801211c:	d503      	bpl.n	8012126 <HAL_RCC_OscConfig+0x76>
 801211e:	6863      	ldr	r3, [r4, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d100      	bne.n	8012126 <HAL_RCC_OscConfig+0x76>
 8012124:	e258      	b.n	80125d8 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012126:	6823      	ldr	r3, [r4, #0]
 8012128:	079b      	lsls	r3, r3, #30
 801212a:	d400      	bmi.n	801212e <HAL_RCC_OscConfig+0x7e>
 801212c:	e088      	b.n	8012240 <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801212e:	4ba5      	ldr	r3, [pc, #660]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	220c      	movs	r2, #12
 8012134:	421a      	tst	r2, r3
 8012136:	d072      	beq.n	801221e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012138:	4ba2      	ldr	r3, [pc, #648]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801213a:	685a      	ldr	r2, [r3, #4]
 801213c:	230c      	movs	r3, #12
 801213e:	4013      	ands	r3, r2
 8012140:	2b08      	cmp	r3, #8
 8012142:	d063      	beq.n	801220c <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012144:	68e3      	ldr	r3, [r4, #12]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d100      	bne.n	801214c <HAL_RCC_OscConfig+0x9c>
 801214a:	e09b      	b.n	8012284 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 801214c:	4a9d      	ldr	r2, [pc, #628]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801214e:	6813      	ldr	r3, [r2, #0]
 8012150:	2101      	movs	r1, #1
 8012152:	430b      	orrs	r3, r1
 8012154:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012156:	f7fe ff2d 	bl	8010fb4 <HAL_GetTick>
 801215a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801215c:	4b99      	ldr	r3, [pc, #612]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	079b      	lsls	r3, r3, #30
 8012162:	d500      	bpl.n	8012166 <HAL_RCC_OscConfig+0xb6>
 8012164:	e085      	b.n	8012272 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012166:	f7fe ff25 	bl	8010fb4 <HAL_GetTick>
 801216a:	1b40      	subs	r0, r0, r5
 801216c:	2864      	cmp	r0, #100	; 0x64
 801216e:	d9f5      	bls.n	801215c <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 8012170:	2003      	movs	r0, #3
 8012172:	e7ce      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012174:	6863      	ldr	r3, [r4, #4]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d00b      	beq.n	8012192 <HAL_RCC_OscConfig+0xe2>
 801217a:	2b00      	cmp	r3, #0
 801217c:	d120      	bne.n	80121c0 <HAL_RCC_OscConfig+0x110>
 801217e:	4b91      	ldr	r3, [pc, #580]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	4991      	ldr	r1, [pc, #580]	; (80123c8 <HAL_RCC_OscConfig+0x318>)
 8012184:	400a      	ands	r2, r1
 8012186:	601a      	str	r2, [r3, #0]
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	4990      	ldr	r1, [pc, #576]	; (80123cc <HAL_RCC_OscConfig+0x31c>)
 801218c:	400a      	ands	r2, r1
 801218e:	601a      	str	r2, [r3, #0]
 8012190:	e005      	b.n	801219e <HAL_RCC_OscConfig+0xee>
 8012192:	4a8c      	ldr	r2, [pc, #560]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012194:	6811      	ldr	r1, [r2, #0]
 8012196:	2380      	movs	r3, #128	; 0x80
 8012198:	025b      	lsls	r3, r3, #9
 801219a:	430b      	orrs	r3, r1
 801219c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801219e:	6863      	ldr	r3, [r4, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d025      	beq.n	80121f0 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 80121a4:	f7fe ff06 	bl	8010fb4 <HAL_GetTick>
 80121a8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121aa:	4b86      	ldr	r3, [pc, #536]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	039b      	lsls	r3, r3, #14
 80121b0:	d4b9      	bmi.n	8012126 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80121b2:	f7fe feff 	bl	8010fb4 <HAL_GetTick>
 80121b6:	1b40      	subs	r0, r0, r5
 80121b8:	2864      	cmp	r0, #100	; 0x64
 80121ba:	d9f6      	bls.n	80121aa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80121bc:	2003      	movs	r0, #3
 80121be:	e7a8      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80121c0:	2b05      	cmp	r3, #5
 80121c2:	d009      	beq.n	80121d8 <HAL_RCC_OscConfig+0x128>
 80121c4:	4b7f      	ldr	r3, [pc, #508]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	497f      	ldr	r1, [pc, #508]	; (80123c8 <HAL_RCC_OscConfig+0x318>)
 80121ca:	400a      	ands	r2, r1
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	497e      	ldr	r1, [pc, #504]	; (80123cc <HAL_RCC_OscConfig+0x31c>)
 80121d2:	400a      	ands	r2, r1
 80121d4:	601a      	str	r2, [r3, #0]
 80121d6:	e7e2      	b.n	801219e <HAL_RCC_OscConfig+0xee>
 80121d8:	4b7a      	ldr	r3, [pc, #488]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80121da:	6819      	ldr	r1, [r3, #0]
 80121dc:	2280      	movs	r2, #128	; 0x80
 80121de:	02d2      	lsls	r2, r2, #11
 80121e0:	430a      	orrs	r2, r1
 80121e2:	601a      	str	r2, [r3, #0]
 80121e4:	6819      	ldr	r1, [r3, #0]
 80121e6:	2280      	movs	r2, #128	; 0x80
 80121e8:	0252      	lsls	r2, r2, #9
 80121ea:	430a      	orrs	r2, r1
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	e7d6      	b.n	801219e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80121f0:	f7fe fee0 	bl	8010fb4 <HAL_GetTick>
 80121f4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80121f6:	4b73      	ldr	r3, [pc, #460]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	039b      	lsls	r3, r3, #14
 80121fc:	d593      	bpl.n	8012126 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80121fe:	f7fe fed9 	bl	8010fb4 <HAL_GetTick>
 8012202:	1b40      	subs	r0, r0, r5
 8012204:	2864      	cmp	r0, #100	; 0x64
 8012206:	d9f6      	bls.n	80121f6 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8012208:	2003      	movs	r0, #3
 801220a:	e782      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801220c:	4b6d      	ldr	r3, [pc, #436]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	22c0      	movs	r2, #192	; 0xc0
 8012212:	0252      	lsls	r2, r2, #9
 8012214:	4013      	ands	r3, r2
 8012216:	2280      	movs	r2, #128	; 0x80
 8012218:	0212      	lsls	r2, r2, #8
 801221a:	4293      	cmp	r3, r2
 801221c:	d192      	bne.n	8012144 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801221e:	4b69      	ldr	r3, [pc, #420]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	079b      	lsls	r3, r3, #30
 8012224:	d504      	bpl.n	8012230 <HAL_RCC_OscConfig+0x180>
 8012226:	68e3      	ldr	r3, [r4, #12]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d001      	beq.n	8012230 <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 801222c:	2001      	movs	r0, #1
 801222e:	e770      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012230:	4964      	ldr	r1, [pc, #400]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012232:	680b      	ldr	r3, [r1, #0]
 8012234:	22f8      	movs	r2, #248	; 0xf8
 8012236:	4393      	bics	r3, r2
 8012238:	6922      	ldr	r2, [r4, #16]
 801223a:	00d2      	lsls	r2, r2, #3
 801223c:	4313      	orrs	r3, r2
 801223e:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012240:	6823      	ldr	r3, [r4, #0]
 8012242:	071b      	lsls	r3, r3, #28
 8012244:	d544      	bpl.n	80122d0 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012246:	6a23      	ldr	r3, [r4, #32]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d02e      	beq.n	80122aa <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 801224c:	4a5d      	ldr	r2, [pc, #372]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801224e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012250:	2101      	movs	r1, #1
 8012252:	430b      	orrs	r3, r1
 8012254:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012256:	f7fe fead 	bl	8010fb4 <HAL_GetTick>
 801225a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801225c:	4b59      	ldr	r3, [pc, #356]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012260:	079b      	lsls	r3, r3, #30
 8012262:	d435      	bmi.n	80122d0 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012264:	f7fe fea6 	bl	8010fb4 <HAL_GetTick>
 8012268:	1b40      	subs	r0, r0, r5
 801226a:	2864      	cmp	r0, #100	; 0x64
 801226c:	d9f6      	bls.n	801225c <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 801226e:	2003      	movs	r0, #3
 8012270:	e74f      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012272:	4954      	ldr	r1, [pc, #336]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012274:	680b      	ldr	r3, [r1, #0]
 8012276:	22f8      	movs	r2, #248	; 0xf8
 8012278:	4393      	bics	r3, r2
 801227a:	6922      	ldr	r2, [r4, #16]
 801227c:	00d2      	lsls	r2, r2, #3
 801227e:	4313      	orrs	r3, r2
 8012280:	600b      	str	r3, [r1, #0]
 8012282:	e7dd      	b.n	8012240 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 8012284:	4a4f      	ldr	r2, [pc, #316]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012286:	6813      	ldr	r3, [r2, #0]
 8012288:	2101      	movs	r1, #1
 801228a:	438b      	bics	r3, r1
 801228c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801228e:	f7fe fe91 	bl	8010fb4 <HAL_GetTick>
 8012292:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012294:	4b4b      	ldr	r3, [pc, #300]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	079b      	lsls	r3, r3, #30
 801229a:	d5d1      	bpl.n	8012240 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801229c:	f7fe fe8a 	bl	8010fb4 <HAL_GetTick>
 80122a0:	1b40      	subs	r0, r0, r5
 80122a2:	2864      	cmp	r0, #100	; 0x64
 80122a4:	d9f6      	bls.n	8012294 <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 80122a6:	2003      	movs	r0, #3
 80122a8:	e733      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 80122aa:	4a46      	ldr	r2, [pc, #280]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80122ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80122ae:	2101      	movs	r1, #1
 80122b0:	438b      	bics	r3, r1
 80122b2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80122b4:	f7fe fe7e 	bl	8010fb4 <HAL_GetTick>
 80122b8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80122ba:	4b42      	ldr	r3, [pc, #264]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80122bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122be:	079b      	lsls	r3, r3, #30
 80122c0:	d506      	bpl.n	80122d0 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80122c2:	f7fe fe77 	bl	8010fb4 <HAL_GetTick>
 80122c6:	1b40      	subs	r0, r0, r5
 80122c8:	2864      	cmp	r0, #100	; 0x64
 80122ca:	d9f6      	bls.n	80122ba <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 80122cc:	2003      	movs	r0, #3
 80122ce:	e720      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	075b      	lsls	r3, r3, #29
 80122d4:	d440      	bmi.n	8012358 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	06db      	lsls	r3, r3, #27
 80122da:	d512      	bpl.n	8012302 <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80122dc:	6963      	ldr	r3, [r4, #20]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d100      	bne.n	80122e4 <HAL_RCC_OscConfig+0x234>
 80122e2:	e0c6      	b.n	8012472 <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80122e4:	3305      	adds	r3, #5
 80122e6:	d000      	beq.n	80122ea <HAL_RCC_OscConfig+0x23a>
 80122e8:	e0e3      	b.n	80124b2 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 80122ea:	4a36      	ldr	r2, [pc, #216]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80122ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80122ee:	2104      	movs	r1, #4
 80122f0:	438b      	bics	r3, r1
 80122f2:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80122f4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80122f6:	31f4      	adds	r1, #244	; 0xf4
 80122f8:	438b      	bics	r3, r1
 80122fa:	69a1      	ldr	r1, [r4, #24]
 80122fc:	00c9      	lsls	r1, r1, #3
 80122fe:	430b      	orrs	r3, r1
 8012300:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012302:	6823      	ldr	r3, [r4, #0]
 8012304:	069b      	lsls	r3, r3, #26
 8012306:	d400      	bmi.n	801230a <HAL_RCC_OscConfig+0x25a>
 8012308:	e10f      	b.n	801252a <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801230a:	4b2e      	ldr	r3, [pc, #184]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	230c      	movs	r3, #12
 8012310:	4013      	ands	r3, r2
 8012312:	2b0c      	cmp	r3, #12
 8012314:	d100      	bne.n	8012318 <HAL_RCC_OscConfig+0x268>
 8012316:	e0ec      	b.n	80124f2 <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012318:	4b2a      	ldr	r3, [pc, #168]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	230c      	movs	r3, #12
 801231e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012320:	2b08      	cmp	r3, #8
 8012322:	d100      	bne.n	8012326 <HAL_RCC_OscConfig+0x276>
 8012324:	e0dd      	b.n	80124e2 <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012326:	69e3      	ldr	r3, [r4, #28]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d100      	bne.n	801232e <HAL_RCC_OscConfig+0x27e>
 801232c:	e0ea      	b.n	8012504 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 801232e:	4a25      	ldr	r2, [pc, #148]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012330:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012332:	2380      	movs	r3, #128	; 0x80
 8012334:	025b      	lsls	r3, r3, #9
 8012336:	430b      	orrs	r3, r1
 8012338:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801233a:	f7fe fe3b 	bl	8010fb4 <HAL_GetTick>
 801233e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012340:	4b20      	ldr	r3, [pc, #128]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012344:	03db      	lsls	r3, r3, #15
 8012346:	d500      	bpl.n	801234a <HAL_RCC_OscConfig+0x29a>
 8012348:	e0ef      	b.n	801252a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801234a:	f7fe fe33 	bl	8010fb4 <HAL_GetTick>
 801234e:	1b40      	subs	r0, r0, r5
 8012350:	2864      	cmp	r0, #100	; 0x64
 8012352:	d9f5      	bls.n	8012340 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 8012354:	2003      	movs	r0, #3
 8012356:	e6dc      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012358:	4a1a      	ldr	r2, [pc, #104]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 801235a:	69d1      	ldr	r1, [r2, #28]
 801235c:	2080      	movs	r0, #128	; 0x80
 801235e:	0540      	lsls	r0, r0, #21
 8012360:	4301      	orrs	r1, r0
 8012362:	61d1      	str	r1, [r2, #28]
 8012364:	69d3      	ldr	r3, [r2, #28]
 8012366:	4003      	ands	r3, r0
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801236c:	4a18      	ldr	r2, [pc, #96]	; (80123d0 <HAL_RCC_OscConfig+0x320>)
 801236e:	6811      	ldr	r1, [r2, #0]
 8012370:	2380      	movs	r3, #128	; 0x80
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	430b      	orrs	r3, r1
 8012376:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012378:	f7fe fe1c 	bl	8010fb4 <HAL_GetTick>
 801237c:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801237e:	4b14      	ldr	r3, [pc, #80]	; (80123d0 <HAL_RCC_OscConfig+0x320>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	05db      	lsls	r3, r3, #23
 8012384:	d406      	bmi.n	8012394 <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012386:	f7fe fe15 	bl	8010fb4 <HAL_GetTick>
 801238a:	1b40      	subs	r0, r0, r5
 801238c:	2864      	cmp	r0, #100	; 0x64
 801238e:	d9f6      	bls.n	801237e <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 8012390:	2003      	movs	r0, #3
 8012392:	e6be      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012394:	4b0b      	ldr	r3, [pc, #44]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 8012396:	6a1a      	ldr	r2, [r3, #32]
 8012398:	2101      	movs	r1, #1
 801239a:	438a      	bics	r2, r1
 801239c:	621a      	str	r2, [r3, #32]
 801239e:	6a1a      	ldr	r2, [r3, #32]
 80123a0:	3103      	adds	r1, #3
 80123a2:	438a      	bics	r2, r1
 80123a4:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80123a6:	f7fe fe05 	bl	8010fb4 <HAL_GetTick>
 80123aa:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80123ac:	4b05      	ldr	r3, [pc, #20]	; (80123c4 <HAL_RCC_OscConfig+0x314>)
 80123ae:	6a1b      	ldr	r3, [r3, #32]
 80123b0:	079b      	lsls	r3, r3, #30
 80123b2:	d511      	bpl.n	80123d8 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123b4:	f7fe fdfe 	bl	8010fb4 <HAL_GetTick>
 80123b8:	1b40      	subs	r0, r0, r5
 80123ba:	4b06      	ldr	r3, [pc, #24]	; (80123d4 <HAL_RCC_OscConfig+0x324>)
 80123bc:	4298      	cmp	r0, r3
 80123be:	d9f5      	bls.n	80123ac <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 80123c0:	2003      	movs	r0, #3
 80123c2:	e6a6      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
 80123c4:	40021000 	.word	0x40021000
 80123c8:	fffeffff 	.word	0xfffeffff
 80123cc:	fffbffff 	.word	0xfffbffff
 80123d0:	40007000 	.word	0x40007000
 80123d4:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123d8:	68a3      	ldr	r3, [r4, #8]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d00b      	beq.n	80123f6 <HAL_RCC_OscConfig+0x346>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d121      	bne.n	8012426 <HAL_RCC_OscConfig+0x376>
 80123e2:	4b80      	ldr	r3, [pc, #512]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80123e4:	6a1a      	ldr	r2, [r3, #32]
 80123e6:	2101      	movs	r1, #1
 80123e8:	438a      	bics	r2, r1
 80123ea:	621a      	str	r2, [r3, #32]
 80123ec:	6a1a      	ldr	r2, [r3, #32]
 80123ee:	3103      	adds	r1, #3
 80123f0:	438a      	bics	r2, r1
 80123f2:	621a      	str	r2, [r3, #32]
 80123f4:	e004      	b.n	8012400 <HAL_RCC_OscConfig+0x350>
 80123f6:	4a7b      	ldr	r2, [pc, #492]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80123f8:	6a13      	ldr	r3, [r2, #32]
 80123fa:	2101      	movs	r1, #1
 80123fc:	430b      	orrs	r3, r1
 80123fe:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012400:	68a3      	ldr	r3, [r4, #8]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d025      	beq.n	8012452 <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8012406:	f7fe fdd5 	bl	8010fb4 <HAL_GetTick>
 801240a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801240c:	4b75      	ldr	r3, [pc, #468]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 801240e:	6a1b      	ldr	r3, [r3, #32]
 8012410:	079b      	lsls	r3, r3, #30
 8012412:	d500      	bpl.n	8012416 <HAL_RCC_OscConfig+0x366>
 8012414:	e75f      	b.n	80122d6 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012416:	f7fe fdcd 	bl	8010fb4 <HAL_GetTick>
 801241a:	1b40      	subs	r0, r0, r5
 801241c:	4b72      	ldr	r3, [pc, #456]	; (80125e8 <HAL_RCC_OscConfig+0x538>)
 801241e:	4298      	cmp	r0, r3
 8012420:	d9f4      	bls.n	801240c <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8012422:	2003      	movs	r0, #3
 8012424:	e675      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012426:	2b05      	cmp	r3, #5
 8012428:	d009      	beq.n	801243e <HAL_RCC_OscConfig+0x38e>
 801242a:	4b6e      	ldr	r3, [pc, #440]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 801242c:	6a1a      	ldr	r2, [r3, #32]
 801242e:	2101      	movs	r1, #1
 8012430:	438a      	bics	r2, r1
 8012432:	621a      	str	r2, [r3, #32]
 8012434:	6a1a      	ldr	r2, [r3, #32]
 8012436:	3103      	adds	r1, #3
 8012438:	438a      	bics	r2, r1
 801243a:	621a      	str	r2, [r3, #32]
 801243c:	e7e0      	b.n	8012400 <HAL_RCC_OscConfig+0x350>
 801243e:	4b69      	ldr	r3, [pc, #420]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012440:	6a1a      	ldr	r2, [r3, #32]
 8012442:	2104      	movs	r1, #4
 8012444:	430a      	orrs	r2, r1
 8012446:	621a      	str	r2, [r3, #32]
 8012448:	6a1a      	ldr	r2, [r3, #32]
 801244a:	3903      	subs	r1, #3
 801244c:	430a      	orrs	r2, r1
 801244e:	621a      	str	r2, [r3, #32]
 8012450:	e7d6      	b.n	8012400 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8012452:	f7fe fdaf 	bl	8010fb4 <HAL_GetTick>
 8012456:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012458:	4b62      	ldr	r3, [pc, #392]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 801245a:	6a1b      	ldr	r3, [r3, #32]
 801245c:	079b      	lsls	r3, r3, #30
 801245e:	d400      	bmi.n	8012462 <HAL_RCC_OscConfig+0x3b2>
 8012460:	e739      	b.n	80122d6 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012462:	f7fe fda7 	bl	8010fb4 <HAL_GetTick>
 8012466:	1b40      	subs	r0, r0, r5
 8012468:	4b5f      	ldr	r3, [pc, #380]	; (80125e8 <HAL_RCC_OscConfig+0x538>)
 801246a:	4298      	cmp	r0, r3
 801246c:	d9f4      	bls.n	8012458 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 801246e:	2003      	movs	r0, #3
 8012470:	e64f      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012472:	4b5c      	ldr	r3, [pc, #368]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012476:	2104      	movs	r1, #4
 8012478:	430a      	orrs	r2, r1
 801247a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801247e:	3903      	subs	r1, #3
 8012480:	430a      	orrs	r2, r1
 8012482:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012484:	f7fe fd96 	bl	8010fb4 <HAL_GetTick>
 8012488:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801248a:	4b56      	ldr	r3, [pc, #344]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 801248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248e:	079b      	lsls	r3, r3, #30
 8012490:	d406      	bmi.n	80124a0 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012492:	f7fe fd8f 	bl	8010fb4 <HAL_GetTick>
 8012496:	1b40      	subs	r0, r0, r5
 8012498:	2864      	cmp	r0, #100	; 0x64
 801249a:	d9f6      	bls.n	801248a <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 801249c:	2003      	movs	r0, #3
 801249e:	e638      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80124a0:	4950      	ldr	r1, [pc, #320]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80124a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80124a4:	22f8      	movs	r2, #248	; 0xf8
 80124a6:	4393      	bics	r3, r2
 80124a8:	69a2      	ldr	r2, [r4, #24]
 80124aa:	00d2      	lsls	r2, r2, #3
 80124ac:	4313      	orrs	r3, r2
 80124ae:	634b      	str	r3, [r1, #52]	; 0x34
 80124b0:	e727      	b.n	8012302 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 80124b2:	4b4c      	ldr	r3, [pc, #304]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80124b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124b6:	2104      	movs	r1, #4
 80124b8:	430a      	orrs	r2, r1
 80124ba:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80124bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124be:	3903      	subs	r1, #3
 80124c0:	438a      	bics	r2, r1
 80124c2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80124c4:	f7fe fd76 	bl	8010fb4 <HAL_GetTick>
 80124c8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80124ca:	4b46      	ldr	r3, [pc, #280]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80124cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ce:	079b      	lsls	r3, r3, #30
 80124d0:	d400      	bmi.n	80124d4 <HAL_RCC_OscConfig+0x424>
 80124d2:	e716      	b.n	8012302 <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80124d4:	f7fe fd6e 	bl	8010fb4 <HAL_GetTick>
 80124d8:	1b40      	subs	r0, r0, r5
 80124da:	2864      	cmp	r0, #100	; 0x64
 80124dc:	d9f5      	bls.n	80124ca <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 80124de:	2003      	movs	r0, #3
 80124e0:	e617      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80124e2:	4b40      	ldr	r3, [pc, #256]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	22c0      	movs	r2, #192	; 0xc0
 80124e8:	0252      	lsls	r2, r2, #9
 80124ea:	4013      	ands	r3, r2
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d000      	beq.n	80124f2 <HAL_RCC_OscConfig+0x442>
 80124f0:	e719      	b.n	8012326 <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80124f2:	4b3c      	ldr	r3, [pc, #240]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80124f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f6:	03db      	lsls	r3, r3, #15
 80124f8:	d517      	bpl.n	801252a <HAL_RCC_OscConfig+0x47a>
 80124fa:	69e3      	ldr	r3, [r4, #28]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d014      	beq.n	801252a <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8012500:	2001      	movs	r0, #1
 8012502:	e606      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8012504:	4a37      	ldr	r2, [pc, #220]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012506:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012508:	4938      	ldr	r1, [pc, #224]	; (80125ec <HAL_RCC_OscConfig+0x53c>)
 801250a:	400b      	ands	r3, r1
 801250c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801250e:	f7fe fd51 	bl	8010fb4 <HAL_GetTick>
 8012512:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012514:	4b33      	ldr	r3, [pc, #204]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012518:	03db      	lsls	r3, r3, #15
 801251a:	d506      	bpl.n	801252a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801251c:	f7fe fd4a 	bl	8010fb4 <HAL_GetTick>
 8012520:	1b40      	subs	r0, r0, r5
 8012522:	2864      	cmp	r0, #100	; 0x64
 8012524:	d9f6      	bls.n	8012514 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8012526:	2003      	movs	r0, #3
 8012528:	e5f3      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801252a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801252c:	2b00      	cmp	r3, #0
 801252e:	d055      	beq.n	80125dc <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012530:	4a2c      	ldr	r2, [pc, #176]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012532:	6851      	ldr	r1, [r2, #4]
 8012534:	220c      	movs	r2, #12
 8012536:	400a      	ands	r2, r1
 8012538:	2a08      	cmp	r2, #8
 801253a:	d051      	beq.n	80125e0 <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801253c:	2b02      	cmp	r3, #2
 801253e:	d012      	beq.n	8012566 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8012540:	4a28      	ldr	r2, [pc, #160]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012542:	6813      	ldr	r3, [r2, #0]
 8012544:	492a      	ldr	r1, [pc, #168]	; (80125f0 <HAL_RCC_OscConfig+0x540>)
 8012546:	400b      	ands	r3, r1
 8012548:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801254a:	f7fe fd33 	bl	8010fb4 <HAL_GetTick>
 801254e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012550:	4b24      	ldr	r3, [pc, #144]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	019b      	lsls	r3, r3, #6
 8012556:	d53d      	bpl.n	80125d4 <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012558:	f7fe fd2c 	bl	8010fb4 <HAL_GetTick>
 801255c:	1b00      	subs	r0, r0, r4
 801255e:	2864      	cmp	r0, #100	; 0x64
 8012560:	d9f6      	bls.n	8012550 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8012562:	2003      	movs	r0, #3
 8012564:	e5d5      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8012566:	4a1f      	ldr	r2, [pc, #124]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012568:	6813      	ldr	r3, [r2, #0]
 801256a:	4921      	ldr	r1, [pc, #132]	; (80125f0 <HAL_RCC_OscConfig+0x540>)
 801256c:	400b      	ands	r3, r1
 801256e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012570:	f7fe fd20 	bl	8010fb4 <HAL_GetTick>
 8012574:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012576:	4b1b      	ldr	r3, [pc, #108]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	019b      	lsls	r3, r3, #6
 801257c:	d506      	bpl.n	801258c <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801257e:	f7fe fd19 	bl	8010fb4 <HAL_GetTick>
 8012582:	1b40      	subs	r0, r0, r5
 8012584:	2864      	cmp	r0, #100	; 0x64
 8012586:	d9f6      	bls.n	8012576 <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 8012588:	2003      	movs	r0, #3
 801258a:	e5c2      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801258c:	4b15      	ldr	r3, [pc, #84]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 801258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012590:	210f      	movs	r1, #15
 8012592:	438a      	bics	r2, r1
 8012594:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012596:	430a      	orrs	r2, r1
 8012598:	62da      	str	r2, [r3, #44]	; 0x2c
 801259a:	685a      	ldr	r2, [r3, #4]
 801259c:	4915      	ldr	r1, [pc, #84]	; (80125f4 <HAL_RCC_OscConfig+0x544>)
 801259e:	400a      	ands	r2, r1
 80125a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80125a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80125a4:	4301      	orrs	r1, r0
 80125a6:	430a      	orrs	r2, r1
 80125a8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80125aa:	6819      	ldr	r1, [r3, #0]
 80125ac:	2280      	movs	r2, #128	; 0x80
 80125ae:	0452      	lsls	r2, r2, #17
 80125b0:	430a      	orrs	r2, r1
 80125b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80125b4:	f7fe fcfe 	bl	8010fb4 <HAL_GetTick>
 80125b8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80125ba:	4b0a      	ldr	r3, [pc, #40]	; (80125e4 <HAL_RCC_OscConfig+0x534>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	019b      	lsls	r3, r3, #6
 80125c0:	d406      	bmi.n	80125d0 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80125c2:	f7fe fcf7 	bl	8010fb4 <HAL_GetTick>
 80125c6:	1b00      	subs	r0, r0, r4
 80125c8:	2864      	cmp	r0, #100	; 0x64
 80125ca:	d9f6      	bls.n	80125ba <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 80125cc:	2003      	movs	r0, #3
 80125ce:	e5a0      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 80125d0:	2000      	movs	r0, #0
 80125d2:	e59e      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
 80125d4:	2000      	movs	r0, #0
 80125d6:	e59c      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 80125d8:	2001      	movs	r0, #1
 80125da:	e59a      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 80125dc:	2000      	movs	r0, #0
 80125de:	e598      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 80125e0:	2001      	movs	r0, #1
 80125e2:	e596      	b.n	8012112 <HAL_RCC_OscConfig+0x62>
 80125e4:	40021000 	.word	0x40021000
 80125e8:	00001388 	.word	0x00001388
 80125ec:	fffeffff 	.word	0xfffeffff
 80125f0:	feffffff 	.word	0xfeffffff
 80125f4:	ffc27fff 	.word	0xffc27fff

080125f8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	0005      	movs	r5, r0
 80125fc:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80125fe:	4b8d      	ldr	r3, [pc, #564]	; (8012834 <HAL_RCC_ClockConfig+0x23c>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	2301      	movs	r3, #1
 8012604:	4013      	ands	r3, r2
 8012606:	428b      	cmp	r3, r1
 8012608:	d300      	bcc.n	801260c <HAL_RCC_ClockConfig+0x14>
 801260a:	e082      	b.n	8012712 <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801260c:	4989      	ldr	r1, [pc, #548]	; (8012834 <HAL_RCC_ClockConfig+0x23c>)
 801260e:	680b      	ldr	r3, [r1, #0]
 8012610:	2201      	movs	r2, #1
 8012612:	4393      	bics	r3, r2
 8012614:	4323      	orrs	r3, r4
 8012616:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012618:	680b      	ldr	r3, [r1, #0]
 801261a:	401a      	ands	r2, r3
 801261c:	42a2      	cmp	r2, r4
 801261e:	d001      	beq.n	8012624 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8012620:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012622:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012624:	6803      	ldr	r3, [r0, #0]
 8012626:	079b      	lsls	r3, r3, #30
 8012628:	d506      	bpl.n	8012638 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801262a:	4a83      	ldr	r2, [pc, #524]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 801262c:	6853      	ldr	r3, [r2, #4]
 801262e:	21f0      	movs	r1, #240	; 0xf0
 8012630:	438b      	bics	r3, r1
 8012632:	6881      	ldr	r1, [r0, #8]
 8012634:	430b      	orrs	r3, r1
 8012636:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012638:	682b      	ldr	r3, [r5, #0]
 801263a:	07db      	lsls	r3, r3, #31
 801263c:	d400      	bmi.n	8012640 <HAL_RCC_ClockConfig+0x48>
 801263e:	e0e5      	b.n	801280c <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012640:	686b      	ldr	r3, [r5, #4]
 8012642:	2b01      	cmp	r3, #1
 8012644:	d009      	beq.n	801265a <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012646:	2b02      	cmp	r3, #2
 8012648:	d02a      	beq.n	80126a0 <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801264a:	2b03      	cmp	r3, #3
 801264c:	d02e      	beq.n	80126ac <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801264e:	4a7a      	ldr	r2, [pc, #488]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012650:	6812      	ldr	r2, [r2, #0]
 8012652:	0792      	lsls	r2, r2, #30
 8012654:	d406      	bmi.n	8012664 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8012656:	2001      	movs	r0, #1
 8012658:	e7e3      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801265a:	4a77      	ldr	r2, [pc, #476]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 801265c:	6812      	ldr	r2, [r2, #0]
 801265e:	0392      	lsls	r2, r2, #14
 8012660:	d400      	bmi.n	8012664 <HAL_RCC_ClockConfig+0x6c>
 8012662:	e0e2      	b.n	801282a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012664:	4974      	ldr	r1, [pc, #464]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012666:	684a      	ldr	r2, [r1, #4]
 8012668:	2003      	movs	r0, #3
 801266a:	4382      	bics	r2, r0
 801266c:	4313      	orrs	r3, r2
 801266e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012670:	f7fe fca0 	bl	8010fb4 <HAL_GetTick>
 8012674:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012676:	686b      	ldr	r3, [r5, #4]
 8012678:	2b01      	cmp	r3, #1
 801267a:	d01d      	beq.n	80126b8 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801267c:	2b02      	cmp	r3, #2
 801267e:	d02a      	beq.n	80126d6 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012680:	2b03      	cmp	r3, #3
 8012682:	d037      	beq.n	80126f4 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012684:	4b6c      	ldr	r3, [pc, #432]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	220c      	movs	r2, #12
 801268a:	421a      	tst	r2, r3
 801268c:	d100      	bne.n	8012690 <HAL_RCC_ClockConfig+0x98>
 801268e:	e0bd      	b.n	801280c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012690:	f7fe fc90 	bl	8010fb4 <HAL_GetTick>
 8012694:	1b00      	subs	r0, r0, r4
 8012696:	4b69      	ldr	r3, [pc, #420]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 8012698:	4298      	cmp	r0, r3
 801269a:	d9f3      	bls.n	8012684 <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 801269c:	2003      	movs	r0, #3
 801269e:	e7c0      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126a0:	4a65      	ldr	r2, [pc, #404]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80126a2:	6812      	ldr	r2, [r2, #0]
 80126a4:	0192      	lsls	r2, r2, #6
 80126a6:	d4dd      	bmi.n	8012664 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80126a8:	2001      	movs	r0, #1
 80126aa:	e7ba      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126ac:	4a62      	ldr	r2, [pc, #392]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80126ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80126b0:	03d2      	lsls	r2, r2, #15
 80126b2:	d4d7      	bmi.n	8012664 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80126b4:	2001      	movs	r0, #1
 80126b6:	e7b4      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126b8:	4b5f      	ldr	r3, [pc, #380]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80126ba:	685a      	ldr	r2, [r3, #4]
 80126bc:	230c      	movs	r3, #12
 80126be:	4013      	ands	r3, r2
 80126c0:	2b04      	cmp	r3, #4
 80126c2:	d100      	bne.n	80126c6 <HAL_RCC_ClockConfig+0xce>
 80126c4:	e0a2      	b.n	801280c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126c6:	f7fe fc75 	bl	8010fb4 <HAL_GetTick>
 80126ca:	1b00      	subs	r0, r0, r4
 80126cc:	4b5b      	ldr	r3, [pc, #364]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 80126ce:	4298      	cmp	r0, r3
 80126d0:	d9f2      	bls.n	80126b8 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 80126d2:	2003      	movs	r0, #3
 80126d4:	e7a5      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80126d6:	4b58      	ldr	r3, [pc, #352]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80126d8:	685a      	ldr	r2, [r3, #4]
 80126da:	230c      	movs	r3, #12
 80126dc:	4013      	ands	r3, r2
 80126de:	2b08      	cmp	r3, #8
 80126e0:	d100      	bne.n	80126e4 <HAL_RCC_ClockConfig+0xec>
 80126e2:	e093      	b.n	801280c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126e4:	f7fe fc66 	bl	8010fb4 <HAL_GetTick>
 80126e8:	1b00      	subs	r0, r0, r4
 80126ea:	4b54      	ldr	r3, [pc, #336]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 80126ec:	4298      	cmp	r0, r3
 80126ee:	d9f2      	bls.n	80126d6 <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 80126f0:	2003      	movs	r0, #3
 80126f2:	e796      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80126f4:	4b50      	ldr	r3, [pc, #320]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	230c      	movs	r3, #12
 80126fa:	4013      	ands	r3, r2
 80126fc:	2b0c      	cmp	r3, #12
 80126fe:	d100      	bne.n	8012702 <HAL_RCC_ClockConfig+0x10a>
 8012700:	e084      	b.n	801280c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012702:	f7fe fc57 	bl	8010fb4 <HAL_GetTick>
 8012706:	1b00      	subs	r0, r0, r4
 8012708:	4b4c      	ldr	r3, [pc, #304]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 801270a:	4298      	cmp	r0, r3
 801270c:	d9f2      	bls.n	80126f4 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 801270e:	2003      	movs	r0, #3
 8012710:	e787      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012712:	6803      	ldr	r3, [r0, #0]
 8012714:	079b      	lsls	r3, r3, #30
 8012716:	d506      	bpl.n	8012726 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012718:	4a47      	ldr	r2, [pc, #284]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 801271a:	6853      	ldr	r3, [r2, #4]
 801271c:	21f0      	movs	r1, #240	; 0xf0
 801271e:	438b      	bics	r3, r1
 8012720:	6881      	ldr	r1, [r0, #8]
 8012722:	430b      	orrs	r3, r1
 8012724:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012726:	682b      	ldr	r3, [r5, #0]
 8012728:	07db      	lsls	r3, r3, #31
 801272a:	d563      	bpl.n	80127f4 <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801272c:	686b      	ldr	r3, [r5, #4]
 801272e:	2b01      	cmp	r3, #1
 8012730:	d009      	beq.n	8012746 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012732:	2b02      	cmp	r3, #2
 8012734:	d028      	beq.n	8012788 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012736:	2b03      	cmp	r3, #3
 8012738:	d02c      	beq.n	8012794 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801273a:	4a3f      	ldr	r2, [pc, #252]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 801273c:	6812      	ldr	r2, [r2, #0]
 801273e:	0792      	lsls	r2, r2, #30
 8012740:	d405      	bmi.n	801274e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8012742:	2001      	movs	r0, #1
 8012744:	e76d      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012746:	4a3c      	ldr	r2, [pc, #240]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012748:	6812      	ldr	r2, [r2, #0]
 801274a:	0392      	lsls	r2, r2, #14
 801274c:	d56f      	bpl.n	801282e <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801274e:	493a      	ldr	r1, [pc, #232]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012750:	684a      	ldr	r2, [r1, #4]
 8012752:	2003      	movs	r0, #3
 8012754:	4382      	bics	r2, r0
 8012756:	4313      	orrs	r3, r2
 8012758:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801275a:	f7fe fc2b 	bl	8010fb4 <HAL_GetTick>
 801275e:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012760:	686b      	ldr	r3, [r5, #4]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d01c      	beq.n	80127a0 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012766:	2b02      	cmp	r3, #2
 8012768:	d028      	beq.n	80127bc <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801276a:	2b03      	cmp	r3, #3
 801276c:	d034      	beq.n	80127d8 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801276e:	4b32      	ldr	r3, [pc, #200]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	220c      	movs	r2, #12
 8012774:	421a      	tst	r2, r3
 8012776:	d03d      	beq.n	80127f4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012778:	f7fe fc1c 	bl	8010fb4 <HAL_GetTick>
 801277c:	1b80      	subs	r0, r0, r6
 801277e:	4b2f      	ldr	r3, [pc, #188]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 8012780:	4298      	cmp	r0, r3
 8012782:	d9f4      	bls.n	801276e <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8012784:	2003      	movs	r0, #3
 8012786:	e74c      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012788:	4a2b      	ldr	r2, [pc, #172]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 801278a:	6812      	ldr	r2, [r2, #0]
 801278c:	0192      	lsls	r2, r2, #6
 801278e:	d4de      	bmi.n	801274e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8012790:	2001      	movs	r0, #1
 8012792:	e746      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012794:	4a28      	ldr	r2, [pc, #160]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012798:	03d2      	lsls	r2, r2, #15
 801279a:	d4d8      	bmi.n	801274e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 801279c:	2001      	movs	r0, #1
 801279e:	e740      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80127a0:	4b25      	ldr	r3, [pc, #148]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80127a2:	685a      	ldr	r2, [r3, #4]
 80127a4:	230c      	movs	r3, #12
 80127a6:	4013      	ands	r3, r2
 80127a8:	2b04      	cmp	r3, #4
 80127aa:	d023      	beq.n	80127f4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127ac:	f7fe fc02 	bl	8010fb4 <HAL_GetTick>
 80127b0:	1b80      	subs	r0, r0, r6
 80127b2:	4b22      	ldr	r3, [pc, #136]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 80127b4:	4298      	cmp	r0, r3
 80127b6:	d9f3      	bls.n	80127a0 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 80127b8:	2003      	movs	r0, #3
 80127ba:	e732      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80127bc:	4b1e      	ldr	r3, [pc, #120]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80127be:	685a      	ldr	r2, [r3, #4]
 80127c0:	230c      	movs	r3, #12
 80127c2:	4013      	ands	r3, r2
 80127c4:	2b08      	cmp	r3, #8
 80127c6:	d015      	beq.n	80127f4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127c8:	f7fe fbf4 	bl	8010fb4 <HAL_GetTick>
 80127cc:	1b80      	subs	r0, r0, r6
 80127ce:	4b1b      	ldr	r3, [pc, #108]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 80127d0:	4298      	cmp	r0, r3
 80127d2:	d9f3      	bls.n	80127bc <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 80127d4:	2003      	movs	r0, #3
 80127d6:	e724      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80127d8:	4b17      	ldr	r3, [pc, #92]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	230c      	movs	r3, #12
 80127de:	4013      	ands	r3, r2
 80127e0:	2b0c      	cmp	r3, #12
 80127e2:	d007      	beq.n	80127f4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127e4:	f7fe fbe6 	bl	8010fb4 <HAL_GetTick>
 80127e8:	1b80      	subs	r0, r0, r6
 80127ea:	4b14      	ldr	r3, [pc, #80]	; (801283c <HAL_RCC_ClockConfig+0x244>)
 80127ec:	4298      	cmp	r0, r3
 80127ee:	d9f3      	bls.n	80127d8 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 80127f0:	2003      	movs	r0, #3
 80127f2:	e716      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80127f4:	490f      	ldr	r1, [pc, #60]	; (8012834 <HAL_RCC_ClockConfig+0x23c>)
 80127f6:	680b      	ldr	r3, [r1, #0]
 80127f8:	2201      	movs	r2, #1
 80127fa:	4393      	bics	r3, r2
 80127fc:	4323      	orrs	r3, r4
 80127fe:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012800:	680b      	ldr	r3, [r1, #0]
 8012802:	401a      	ands	r2, r3
 8012804:	42a2      	cmp	r2, r4
 8012806:	d001      	beq.n	801280c <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8012808:	2001      	movs	r0, #1
 801280a:	e70a      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801280c:	682b      	ldr	r3, [r5, #0]
 801280e:	075b      	lsls	r3, r3, #29
 8012810:	d506      	bpl.n	8012820 <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012812:	4a09      	ldr	r2, [pc, #36]	; (8012838 <HAL_RCC_ClockConfig+0x240>)
 8012814:	6853      	ldr	r3, [r2, #4]
 8012816:	490a      	ldr	r1, [pc, #40]	; (8012840 <HAL_RCC_ClockConfig+0x248>)
 8012818:	400b      	ands	r3, r1
 801281a:	68e9      	ldr	r1, [r5, #12]
 801281c:	430b      	orrs	r3, r1
 801281e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012820:	2000      	movs	r0, #0
 8012822:	f7fe fb9d 	bl	8010f60 <HAL_InitTick>
  return HAL_OK;
 8012826:	2000      	movs	r0, #0
 8012828:	e6fb      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 801282a:	2001      	movs	r0, #1
 801282c:	e6f9      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 801282e:	2001      	movs	r0, #1
 8012830:	e6f7      	b.n	8012622 <HAL_RCC_ClockConfig+0x2a>
 8012832:	46c0      	nop			; (mov r8, r8)
 8012834:	40022000 	.word	0x40022000
 8012838:	40021000 	.word	0x40021000
 801283c:	00001388 	.word	0x00001388
 8012840:	fffff8ff 	.word	0xfffff8ff

08012844 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012844:	b530      	push	{r4, r5, lr}
 8012846:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012848:	aa04      	add	r2, sp, #16
 801284a:	4b1f      	ldr	r3, [pc, #124]	; (80128c8 <HAL_RCC_GetSysClockFreq+0x84>)
 801284c:	0018      	movs	r0, r3
 801284e:	c832      	ldmia	r0!, {r1, r4, r5}
 8012850:	c232      	stmia	r2!, {r1, r4, r5}
 8012852:	0011      	movs	r1, r2
 8012854:	6802      	ldr	r2, [r0, #0]
 8012856:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012858:	466a      	mov	r2, sp
 801285a:	3310      	adds	r3, #16
 801285c:	cb13      	ldmia	r3!, {r0, r1, r4}
 801285e:	c213      	stmia	r2!, {r0, r1, r4}
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012864:	4b19      	ldr	r3, [pc, #100]	; (80128cc <HAL_RCC_GetSysClockFreq+0x88>)
 8012866:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012868:	230c      	movs	r3, #12
 801286a:	4013      	ands	r3, r2
 801286c:	2b08      	cmp	r3, #8
 801286e:	d004      	beq.n	801287a <HAL_RCC_GetSysClockFreq+0x36>
 8012870:	2b0c      	cmp	r3, #12
 8012872:	d026      	beq.n	80128c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012874:	4816      	ldr	r0, [pc, #88]	; (80128d0 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012876:	b009      	add	sp, #36	; 0x24
 8012878:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801287a:	0c91      	lsrs	r1, r2, #18
 801287c:	230f      	movs	r3, #15
 801287e:	4019      	ands	r1, r3
 8012880:	a804      	add	r0, sp, #16
 8012882:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012884:	4911      	ldr	r1, [pc, #68]	; (80128cc <HAL_RCC_GetSysClockFreq+0x88>)
 8012886:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012888:	400b      	ands	r3, r1
 801288a:	4669      	mov	r1, sp
 801288c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801288e:	23c0      	movs	r3, #192	; 0xc0
 8012890:	025b      	lsls	r3, r3, #9
 8012892:	401a      	ands	r2, r3
 8012894:	2380      	movs	r3, #128	; 0x80
 8012896:	025b      	lsls	r3, r3, #9
 8012898:	429a      	cmp	r2, r3
 801289a:	d008      	beq.n	80128ae <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801289c:	23c0      	movs	r3, #192	; 0xc0
 801289e:	025b      	lsls	r3, r3, #9
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d009      	beq.n	80128b8 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80128a4:	480a      	ldr	r0, [pc, #40]	; (80128d0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80128a6:	f7ed fc53 	bl	8000150 <__udivsi3>
 80128aa:	4360      	muls	r0, r4
 80128ac:	e7e3      	b.n	8012876 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80128ae:	4808      	ldr	r0, [pc, #32]	; (80128d0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80128b0:	f7ed fc4e 	bl	8000150 <__udivsi3>
 80128b4:	4360      	muls	r0, r4
 80128b6:	e7de      	b.n	8012876 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80128b8:	4806      	ldr	r0, [pc, #24]	; (80128d4 <HAL_RCC_GetSysClockFreq+0x90>)
 80128ba:	f7ed fc49 	bl	8000150 <__udivsi3>
 80128be:	4360      	muls	r0, r4
 80128c0:	e7d9      	b.n	8012876 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 80128c2:	4804      	ldr	r0, [pc, #16]	; (80128d4 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80128c4:	e7d7      	b.n	8012876 <HAL_RCC_GetSysClockFreq+0x32>
 80128c6:	46c0      	nop			; (mov r8, r8)
 80128c8:	08018814 	.word	0x08018814
 80128cc:	40021000 	.word	0x40021000
 80128d0:	007a1200 	.word	0x007a1200
 80128d4:	02dc6c00 	.word	0x02dc6c00

080128d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80128d8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80128da:	f7ff ffb3 	bl	8012844 <HAL_RCC_GetSysClockFreq>
 80128de:	4b05      	ldr	r3, [pc, #20]	; (80128f4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	0912      	lsrs	r2, r2, #4
 80128e4:	230f      	movs	r3, #15
 80128e6:	4013      	ands	r3, r2
 80128e8:	4a03      	ldr	r2, [pc, #12]	; (80128f8 <HAL_RCC_GetHCLKFreq+0x20>)
 80128ea:	5cd3      	ldrb	r3, [r2, r3]
 80128ec:	40d8      	lsrs	r0, r3
 80128ee:	4b03      	ldr	r3, [pc, #12]	; (80128fc <HAL_RCC_GetHCLKFreq+0x24>)
 80128f0:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80128f2:	bd10      	pop	{r4, pc}
 80128f4:	40021000 	.word	0x40021000
 80128f8:	0801bb80 	.word	0x0801bb80
 80128fc:	20000110 	.word	0x20000110

08012900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012900:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012902:	f7ff ffe9 	bl	80128d8 <HAL_RCC_GetHCLKFreq>
 8012906:	4b04      	ldr	r3, [pc, #16]	; (8012918 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	0a12      	lsrs	r2, r2, #8
 801290c:	2307      	movs	r3, #7
 801290e:	4013      	ands	r3, r2
 8012910:	4a02      	ldr	r2, [pc, #8]	; (801291c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012912:	5cd3      	ldrb	r3, [r2, r3]
 8012914:	40d8      	lsrs	r0, r3
}    
 8012916:	bd10      	pop	{r4, pc}
 8012918:	40021000 	.word	0x40021000
 801291c:	0801bb80 	.word	0x0801bb80

08012920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012920:	b530      	push	{r4, r5, lr}
 8012922:	b083      	sub	sp, #12
 8012924:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012926:	6803      	ldr	r3, [r0, #0]
 8012928:	03db      	lsls	r3, r3, #15
 801292a:	d507      	bpl.n	801293c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801292c:	4b41      	ldr	r3, [pc, #260]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801292e:	6a1b      	ldr	r3, [r3, #32]
 8012930:	6842      	ldr	r2, [r0, #4]
 8012932:	4053      	eors	r3, r2
 8012934:	22c0      	movs	r2, #192	; 0xc0
 8012936:	0092      	lsls	r2, r2, #2
 8012938:	4213      	tst	r3, r2
 801293a:	d134      	bne.n	80129a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	07db      	lsls	r3, r3, #31
 8012940:	d506      	bpl.n	8012950 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012942:	4a3c      	ldr	r2, [pc, #240]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012944:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012946:	2103      	movs	r1, #3
 8012948:	438b      	bics	r3, r1
 801294a:	68a1      	ldr	r1, [r4, #8]
 801294c:	430b      	orrs	r3, r1
 801294e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	079b      	lsls	r3, r3, #30
 8012954:	d506      	bpl.n	8012964 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012956:	4a37      	ldr	r2, [pc, #220]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012958:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801295a:	4937      	ldr	r1, [pc, #220]	; (8012a38 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 801295c:	400b      	ands	r3, r1
 801295e:	68e1      	ldr	r1, [r4, #12]
 8012960:	430b      	orrs	r3, r1
 8012962:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012964:	6823      	ldr	r3, [r4, #0]
 8012966:	035b      	lsls	r3, r3, #13
 8012968:	d506      	bpl.n	8012978 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801296a:	4a32      	ldr	r2, [pc, #200]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801296c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801296e:	4933      	ldr	r1, [pc, #204]	; (8012a3c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8012970:	400b      	ands	r3, r1
 8012972:	6921      	ldr	r1, [r4, #16]
 8012974:	430b      	orrs	r3, r1
 8012976:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	069b      	lsls	r3, r3, #26
 801297c:	d506      	bpl.n	801298c <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801297e:	4a2d      	ldr	r2, [pc, #180]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012980:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012982:	2110      	movs	r1, #16
 8012984:	438b      	bics	r3, r1
 8012986:	6961      	ldr	r1, [r4, #20]
 8012988:	430b      	orrs	r3, r1
 801298a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801298c:	6823      	ldr	r3, [r4, #0]
 801298e:	055b      	lsls	r3, r3, #21
 8012990:	d54e      	bpl.n	8012a30 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012992:	4a28      	ldr	r2, [pc, #160]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012996:	2140      	movs	r1, #64	; 0x40
 8012998:	438b      	bics	r3, r1
 801299a:	69a1      	ldr	r1, [r4, #24]
 801299c:	430b      	orrs	r3, r1
 801299e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80129a0:	2000      	movs	r0, #0
}
 80129a2:	b003      	add	sp, #12
 80129a4:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80129a6:	4a23      	ldr	r2, [pc, #140]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80129a8:	69d1      	ldr	r1, [r2, #28]
 80129aa:	2080      	movs	r0, #128	; 0x80
 80129ac:	0540      	lsls	r0, r0, #21
 80129ae:	4301      	orrs	r1, r0
 80129b0:	61d1      	str	r1, [r2, #28]
 80129b2:	69d3      	ldr	r3, [r2, #28]
 80129b4:	4003      	ands	r3, r0
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80129ba:	4a21      	ldr	r2, [pc, #132]	; (8012a40 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129bc:	6811      	ldr	r1, [r2, #0]
 80129be:	2380      	movs	r3, #128	; 0x80
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	430b      	orrs	r3, r1
 80129c4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80129c6:	f7fe faf5 	bl	8010fb4 <HAL_GetTick>
 80129ca:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80129cc:	4b1c      	ldr	r3, [pc, #112]	; (8012a40 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	05db      	lsls	r3, r3, #23
 80129d2:	d406      	bmi.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80129d4:	f7fe faee 	bl	8010fb4 <HAL_GetTick>
 80129d8:	1b40      	subs	r0, r0, r5
 80129da:	2864      	cmp	r0, #100	; 0x64
 80129dc:	d9f6      	bls.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 80129de:	2003      	movs	r0, #3
 80129e0:	e7df      	b.n	80129a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80129e2:	4b14      	ldr	r3, [pc, #80]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80129e4:	6a18      	ldr	r0, [r3, #32]
 80129e6:	4a17      	ldr	r2, [pc, #92]	; (8012a44 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80129e8:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80129ea:	6a1d      	ldr	r5, [r3, #32]
 80129ec:	2180      	movs	r1, #128	; 0x80
 80129ee:	0249      	lsls	r1, r1, #9
 80129f0:	4329      	orrs	r1, r5
 80129f2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80129f4:	6a19      	ldr	r1, [r3, #32]
 80129f6:	4d14      	ldr	r5, [pc, #80]	; (8012a48 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80129f8:	4029      	ands	r1, r5
 80129fa:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 80129fc:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80129fe:	0783      	lsls	r3, r0, #30
 8012a00:	d407      	bmi.n	8012a12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012a02:	4a0c      	ldr	r2, [pc, #48]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012a04:	6a13      	ldr	r3, [r2, #32]
 8012a06:	490f      	ldr	r1, [pc, #60]	; (8012a44 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012a08:	400b      	ands	r3, r1
 8012a0a:	6861      	ldr	r1, [r4, #4]
 8012a0c:	430b      	orrs	r3, r1
 8012a0e:	6213      	str	r3, [r2, #32]
 8012a10:	e794      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8012a12:	f7fe facf 	bl	8010fb4 <HAL_GetTick>
 8012a16:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a18:	4b06      	ldr	r3, [pc, #24]	; (8012a34 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012a1a:	6a1b      	ldr	r3, [r3, #32]
 8012a1c:	079b      	lsls	r3, r3, #30
 8012a1e:	d4f0      	bmi.n	8012a02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012a20:	f7fe fac8 	bl	8010fb4 <HAL_GetTick>
 8012a24:	1b40      	subs	r0, r0, r5
 8012a26:	4b09      	ldr	r3, [pc, #36]	; (8012a4c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012a28:	4298      	cmp	r0, r3
 8012a2a:	d9f5      	bls.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8012a2c:	2003      	movs	r0, #3
 8012a2e:	e7b8      	b.n	80129a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012a30:	2000      	movs	r0, #0
 8012a32:	e7b6      	b.n	80129a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8012a34:	40021000 	.word	0x40021000
 8012a38:	fffcffff 	.word	0xfffcffff
 8012a3c:	fff3ffff 	.word	0xfff3ffff
 8012a40:	40007000 	.word	0x40007000
 8012a44:	fffffcff 	.word	0xfffffcff
 8012a48:	fffeffff 	.word	0xfffeffff
 8012a4c:	00001388 	.word	0x00001388

08012a50 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012a50:	4770      	bx	lr

08012a52 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012a52:	b570      	push	{r4, r5, r6, lr}
 8012a54:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012a56:	6802      	ldr	r2, [r0, #0]
 8012a58:	68d3      	ldr	r3, [r2, #12]
 8012a5a:	21a0      	movs	r1, #160	; 0xa0
 8012a5c:	438b      	bics	r3, r1
 8012a5e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012a60:	f7fe faa8 	bl	8010fb4 <HAL_GetTick>
 8012a64:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	069b      	lsls	r3, r3, #26
 8012a6c:	d408      	bmi.n	8012a80 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012a6e:	f7fe faa1 	bl	8010fb4 <HAL_GetTick>
 8012a72:	1b40      	subs	r0, r0, r5
 8012a74:	23fa      	movs	r3, #250	; 0xfa
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	4298      	cmp	r0, r3
 8012a7a:	d9f4      	bls.n	8012a66 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8012a7c:	2003      	movs	r0, #3
 8012a7e:	e000      	b.n	8012a82 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8012a80:	2000      	movs	r0, #0
}
 8012a82:	bd70      	pop	{r4, r5, r6, pc}

08012a84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a88:	6803      	ldr	r3, [r0, #0]
 8012a8a:	68da      	ldr	r2, [r3, #12]
 8012a8c:	0652      	lsls	r2, r2, #25
 8012a8e:	d501      	bpl.n	8012a94 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012a90:	2000      	movs	r0, #0
}
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012a94:	2201      	movs	r2, #1
 8012a96:	4252      	negs	r2, r2
 8012a98:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012a9a:	f7fe fa8b 	bl	8010fb4 <HAL_GetTick>
 8012a9e:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	065b      	lsls	r3, r3, #25
 8012aa6:	d408      	bmi.n	8012aba <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012aa8:	f7fe fa84 	bl	8010fb4 <HAL_GetTick>
 8012aac:	1b40      	subs	r0, r0, r5
 8012aae:	23fa      	movs	r3, #250	; 0xfa
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	4298      	cmp	r0, r3
 8012ab4:	d9f4      	bls.n	8012aa0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8012ab6:	2003      	movs	r0, #3
 8012ab8:	e7eb      	b.n	8012a92 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012aba:	2000      	movs	r0, #0
 8012abc:	e7e9      	b.n	8012a92 <RTC_EnterInitMode+0xe>
	...

08012ac0 <HAL_RTC_Init>:
{
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012ac4:	d046      	beq.n	8012b54 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012ac6:	7f43      	ldrb	r3, [r0, #29]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d038      	beq.n	8012b3e <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012acc:	2302      	movs	r3, #2
 8012ace:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	22ca      	movs	r2, #202	; 0xca
 8012ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8012ad6:	6823      	ldr	r3, [r4, #0]
 8012ad8:	3a77      	subs	r2, #119	; 0x77
 8012ada:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012adc:	0020      	movs	r0, r4
 8012ade:	f7ff ffd1 	bl	8012a84 <RTC_EnterInitMode>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d12f      	bne.n	8012b46 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012ae6:	6822      	ldr	r2, [r4, #0]
 8012ae8:	6893      	ldr	r3, [r2, #8]
 8012aea:	491b      	ldr	r1, [pc, #108]	; (8012b58 <HAL_RTC_Init+0x98>)
 8012aec:	400b      	ands	r3, r1
 8012aee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012af0:	6821      	ldr	r1, [r4, #0]
 8012af2:	688a      	ldr	r2, [r1, #8]
 8012af4:	6863      	ldr	r3, [r4, #4]
 8012af6:	6925      	ldr	r5, [r4, #16]
 8012af8:	432b      	orrs	r3, r5
 8012afa:	6965      	ldr	r5, [r4, #20]
 8012afc:	432b      	orrs	r3, r5
 8012afe:	4313      	orrs	r3, r2
 8012b00:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	68e2      	ldr	r2, [r4, #12]
 8012b06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012b08:	6821      	ldr	r1, [r4, #0]
 8012b0a:	690b      	ldr	r3, [r1, #16]
 8012b0c:	68a2      	ldr	r2, [r4, #8]
 8012b0e:	0412      	lsls	r2, r2, #16
 8012b10:	4313      	orrs	r3, r2
 8012b12:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012b14:	6822      	ldr	r2, [r4, #0]
 8012b16:	68d3      	ldr	r3, [r2, #12]
 8012b18:	2180      	movs	r1, #128	; 0x80
 8012b1a:	438b      	bics	r3, r1
 8012b1c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012b1e:	6822      	ldr	r2, [r4, #0]
 8012b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b22:	490e      	ldr	r1, [pc, #56]	; (8012b5c <HAL_RTC_Init+0x9c>)
 8012b24:	400b      	ands	r3, r1
 8012b26:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012b28:	6822      	ldr	r2, [r4, #0]
 8012b2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b2c:	69a1      	ldr	r1, [r4, #24]
 8012b2e:	430b      	orrs	r3, r1
 8012b30:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	22ff      	movs	r2, #255	; 0xff
 8012b36:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	7763      	strb	r3, [r4, #29]
}
 8012b3c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012b3e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012b40:	f7ff ff86 	bl	8012a50 <HAL_RTC_MspInit>
 8012b44:	e7c2      	b.n	8012acc <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	22ff      	movs	r2, #255	; 0xff
 8012b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012b4c:	2304      	movs	r3, #4
 8012b4e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012b50:	2001      	movs	r0, #1
 8012b52:	e7f3      	b.n	8012b3c <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012b54:	2001      	movs	r0, #1
 8012b56:	e7f1      	b.n	8012b3c <HAL_RTC_Init+0x7c>
 8012b58:	ff8fffbf 	.word	0xff8fffbf
 8012b5c:	fffbffff 	.word	0xfffbffff

08012b60 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012b60:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8012b62:	e002      	b.n	8012b6a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8012b64:	3301      	adds	r3, #1
    Value -= 10;
 8012b66:	380a      	subs	r0, #10
 8012b68:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012b6a:	2809      	cmp	r0, #9
 8012b6c:	d8fa      	bhi.n	8012b64 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012b6e:	011b      	lsls	r3, r3, #4
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	4318      	orrs	r0, r3
}
 8012b74:	4770      	bx	lr
	...

08012b78 <HAL_RTC_SetTime>:
{
 8012b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b7a:	0004      	movs	r4, r0
 8012b7c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012b7e:	7f03      	ldrb	r3, [r0, #28]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d100      	bne.n	8012b86 <HAL_RTC_SetTime+0xe>
 8012b84:	e070      	b.n	8012c68 <HAL_RTC_SetTime+0xf0>
 8012b86:	2301      	movs	r3, #1
 8012b88:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012b8e:	2a00      	cmp	r2, #0
 8012b90:	d141      	bne.n	8012c16 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	689b      	ldr	r3, [r3, #8]
 8012b96:	065b      	lsls	r3, r3, #25
 8012b98:	d401      	bmi.n	8012b9e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b9e:	7830      	ldrb	r0, [r6, #0]
 8012ba0:	f7ff ffde 	bl	8012b60 <RTC_ByteToBcd2>
 8012ba4:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012ba6:	7870      	ldrb	r0, [r6, #1]
 8012ba8:	f7ff ffda 	bl	8012b60 <RTC_ByteToBcd2>
 8012bac:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012bae:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012bb0:	78b0      	ldrb	r0, [r6, #2]
 8012bb2:	f7ff ffd5 	bl	8012b60 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012bb6:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012bb8:	7a30      	ldrb	r0, [r6, #8]
 8012bba:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012bbc:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	22ca      	movs	r2, #202	; 0xca
 8012bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	3a77      	subs	r2, #119	; 0x77
 8012bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012bca:	0020      	movs	r0, r4
 8012bcc:	f7ff ff5a 	bl	8012a84 <RTC_EnterInitMode>
 8012bd0:	1e07      	subs	r7, r0, #0
 8012bd2:	d131      	bne.n	8012c38 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	4825      	ldr	r0, [pc, #148]	; (8012c6c <HAL_RTC_SetTime+0xf4>)
 8012bd8:	4005      	ands	r5, r0
 8012bda:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012bdc:	6822      	ldr	r2, [r4, #0]
 8012bde:	6893      	ldr	r3, [r2, #8]
 8012be0:	4923      	ldr	r1, [pc, #140]	; (8012c70 <HAL_RTC_SetTime+0xf8>)
 8012be2:	400b      	ands	r3, r1
 8012be4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012be6:	6821      	ldr	r1, [r4, #0]
 8012be8:	688b      	ldr	r3, [r1, #8]
 8012bea:	68f2      	ldr	r2, [r6, #12]
 8012bec:	6930      	ldr	r0, [r6, #16]
 8012bee:	4302      	orrs	r2, r0
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012bf4:	6822      	ldr	r2, [r4, #0]
 8012bf6:	68d3      	ldr	r3, [r2, #12]
 8012bf8:	2180      	movs	r1, #128	; 0x80
 8012bfa:	438b      	bics	r3, r1
 8012bfc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012bfe:	6823      	ldr	r3, [r4, #0]
 8012c00:	689b      	ldr	r3, [r3, #8]
 8012c02:	069b      	lsls	r3, r3, #26
 8012c04:	d522      	bpl.n	8012c4c <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	22ff      	movs	r2, #255	; 0xff
 8012c0a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012c10:	2300      	movs	r3, #0
 8012c12:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012c14:	e018      	b.n	8012c48 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012c16:	6803      	ldr	r3, [r0, #0]
 8012c18:	689b      	ldr	r3, [r3, #8]
 8012c1a:	065b      	lsls	r3, r3, #25
 8012c1c:	d401      	bmi.n	8012c22 <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c22:	7835      	ldrb	r5, [r6, #0]
 8012c24:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012c26:	7870      	ldrb	r0, [r6, #1]
 8012c28:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c2a:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012c2c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012c2e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012c30:	7a30      	ldrb	r0, [r6, #8]
 8012c32:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c34:	4305      	orrs	r5, r0
 8012c36:	e7c2      	b.n	8012bbe <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012c38:	6823      	ldr	r3, [r4, #0]
 8012c3a:	22ff      	movs	r2, #255	; 0xff
 8012c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012c3e:	2304      	movs	r3, #4
 8012c40:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012c42:	2300      	movs	r3, #0
 8012c44:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012c46:	2701      	movs	r7, #1
}
 8012c48:	0038      	movs	r0, r7
 8012c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012c4c:	0020      	movs	r0, r4
 8012c4e:	f7ff ff00 	bl	8012a52 <HAL_RTC_WaitForSynchro>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d0d7      	beq.n	8012c06 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012c56:	6823      	ldr	r3, [r4, #0]
 8012c58:	22ff      	movs	r2, #255	; 0xff
 8012c5a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c5c:	2304      	movs	r3, #4
 8012c5e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012c60:	2300      	movs	r3, #0
 8012c62:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012c64:	2701      	movs	r7, #1
 8012c66:	e7ef      	b.n	8012c48 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8012c68:	2702      	movs	r7, #2
 8012c6a:	e7ed      	b.n	8012c48 <HAL_RTC_SetTime+0xd0>
 8012c6c:	007f7f7f 	.word	0x007f7f7f
 8012c70:	fffbffff 	.word	0xfffbffff

08012c74 <HAL_RTC_SetDate>:
{
 8012c74:	b570      	push	{r4, r5, r6, lr}
 8012c76:	0004      	movs	r4, r0
 8012c78:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012c7a:	7f03      	ldrb	r3, [r0, #28]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d061      	beq.n	8012d44 <HAL_RTC_SetDate+0xd0>
 8012c80:	2301      	movs	r3, #1
 8012c82:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012c84:	3301      	adds	r3, #1
 8012c86:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012c88:	2a00      	cmp	r2, #0
 8012c8a:	d106      	bne.n	8012c9a <HAL_RTC_SetDate+0x26>
 8012c8c:	784b      	ldrb	r3, [r1, #1]
 8012c8e:	06d9      	lsls	r1, r3, #27
 8012c90:	d503      	bpl.n	8012c9a <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012c92:	2110      	movs	r1, #16
 8012c94:	438b      	bics	r3, r1
 8012c96:	330a      	adds	r3, #10
 8012c98:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8012c9a:	2a00      	cmp	r2, #0
 8012c9c:	d12f      	bne.n	8012cfe <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c9e:	78f0      	ldrb	r0, [r6, #3]
 8012ca0:	f7ff ff5e 	bl	8012b60 <RTC_ByteToBcd2>
 8012ca4:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012ca6:	7870      	ldrb	r0, [r6, #1]
 8012ca8:	f7ff ff5a 	bl	8012b60 <RTC_ByteToBcd2>
 8012cac:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012cae:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012cb0:	78b0      	ldrb	r0, [r6, #2]
 8012cb2:	f7ff ff55 	bl	8012b60 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012cb6:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8012cb8:	7830      	ldrb	r0, [r6, #0]
 8012cba:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012cbc:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	22ca      	movs	r2, #202	; 0xca
 8012cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	3a77      	subs	r2, #119	; 0x77
 8012cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012cca:	0020      	movs	r0, r4
 8012ccc:	f7ff feda 	bl	8012a84 <RTC_EnterInitMode>
 8012cd0:	1e06      	subs	r6, r0, #0
 8012cd2:	d11f      	bne.n	8012d14 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	481c      	ldr	r0, [pc, #112]	; (8012d48 <HAL_RTC_SetDate+0xd4>)
 8012cd8:	4005      	ands	r5, r0
 8012cda:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012cdc:	6822      	ldr	r2, [r4, #0]
 8012cde:	68d3      	ldr	r3, [r2, #12]
 8012ce0:	2180      	movs	r1, #128	; 0x80
 8012ce2:	438b      	bics	r3, r1
 8012ce4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012ce6:	6823      	ldr	r3, [r4, #0]
 8012ce8:	689b      	ldr	r3, [r3, #8]
 8012cea:	069b      	lsls	r3, r3, #26
 8012cec:	d51c      	bpl.n	8012d28 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012cee:	6823      	ldr	r3, [r4, #0]
 8012cf0:	22ff      	movs	r2, #255	; 0xff
 8012cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012cfc:	e012      	b.n	8012d24 <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8012cfe:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8012d00:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d02:	78f5      	ldrb	r5, [r6, #3]
 8012d04:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012d06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d08:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012d0a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012d0c:	7830      	ldrb	r0, [r6, #0]
 8012d0e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d10:	4305      	orrs	r5, r0
 8012d12:	e7d4      	b.n	8012cbe <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	22ff      	movs	r2, #255	; 0xff
 8012d18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012d1a:	2304      	movs	r3, #4
 8012d1c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012d1e:	2300      	movs	r3, #0
 8012d20:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012d22:	2601      	movs	r6, #1
}
 8012d24:	0030      	movs	r0, r6
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012d28:	0020      	movs	r0, r4
 8012d2a:	f7ff fe92 	bl	8012a52 <HAL_RTC_WaitForSynchro>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d0dd      	beq.n	8012cee <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	22ff      	movs	r2, #255	; 0xff
 8012d36:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012d38:	2304      	movs	r3, #4
 8012d3a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012d40:	2601      	movs	r6, #1
 8012d42:	e7ef      	b.n	8012d24 <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 8012d44:	2602      	movs	r6, #2
 8012d46:	e7ed      	b.n	8012d24 <HAL_RTC_SetDate+0xb0>
 8012d48:	00ffff3f 	.word	0x00ffff3f

08012d4c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012d4c:	0902      	lsrs	r2, r0, #4
 8012d4e:	0093      	lsls	r3, r2, #2
 8012d50:	189b      	adds	r3, r3, r2
 8012d52:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012d54:	230f      	movs	r3, #15
 8012d56:	4018      	ands	r0, r3
 8012d58:	1880      	adds	r0, r0, r2
 8012d5a:	b2c0      	uxtb	r0, r0
}
 8012d5c:	4770      	bx	lr
	...

08012d60 <HAL_RTC_GetTime>:
{
 8012d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d62:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012d64:	6803      	ldr	r3, [r0, #0]
 8012d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d68:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012d6a:	6803      	ldr	r3, [r0, #0]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	490f      	ldr	r1, [pc, #60]	; (8012dac <HAL_RTC_GetTime+0x4c>)
 8012d70:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012d72:	0c1d      	lsrs	r5, r3, #16
 8012d74:	203f      	movs	r0, #63	; 0x3f
 8012d76:	4028      	ands	r0, r5
 8012d78:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012d7a:	0a1e      	lsrs	r6, r3, #8
 8012d7c:	277f      	movs	r7, #127	; 0x7f
 8012d7e:	403e      	ands	r6, r7
 8012d80:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012d82:	401f      	ands	r7, r3
 8012d84:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012d86:	2140      	movs	r1, #64	; 0x40
 8012d88:	4029      	ands	r1, r5
 8012d8a:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012d8c:	2a00      	cmp	r2, #0
 8012d8e:	d10a      	bne.n	8012da6 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012d90:	f7ff ffdc 	bl	8012d4c <RTC_Bcd2ToByte>
 8012d94:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012d96:	0030      	movs	r0, r6
 8012d98:	f7ff ffd8 	bl	8012d4c <RTC_Bcd2ToByte>
 8012d9c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012d9e:	0038      	movs	r0, r7
 8012da0:	f7ff ffd4 	bl	8012d4c <RTC_Bcd2ToByte>
 8012da4:	70a0      	strb	r0, [r4, #2]
}
 8012da6:	2000      	movs	r0, #0
 8012da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012daa:	46c0      	nop			; (mov r8, r8)
 8012dac:	007f7f7f 	.word	0x007f7f7f

08012db0 <HAL_RTC_GetDate>:
{
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012db4:	6803      	ldr	r3, [r0, #0]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	490e      	ldr	r1, [pc, #56]	; (8012df4 <HAL_RTC_GetDate+0x44>)
 8012dba:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012dbc:	0c18      	lsrs	r0, r3, #16
 8012dbe:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012dc0:	0a19      	lsrs	r1, r3, #8
 8012dc2:	261f      	movs	r6, #31
 8012dc4:	400e      	ands	r6, r1
 8012dc6:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012dc8:	253f      	movs	r5, #63	; 0x3f
 8012dca:	401d      	ands	r5, r3
 8012dcc:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012dce:	0b5b      	lsrs	r3, r3, #13
 8012dd0:	2107      	movs	r1, #7
 8012dd2:	400b      	ands	r3, r1
 8012dd4:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012dd6:	2a00      	cmp	r2, #0
 8012dd8:	d10a      	bne.n	8012df0 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012dda:	f7ff ffb7 	bl	8012d4c <RTC_Bcd2ToByte>
 8012dde:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012de0:	0030      	movs	r0, r6
 8012de2:	f7ff ffb3 	bl	8012d4c <RTC_Bcd2ToByte>
 8012de6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012de8:	0028      	movs	r0, r5
 8012dea:	f7ff ffaf 	bl	8012d4c <RTC_Bcd2ToByte>
 8012dee:	70a0      	strb	r0, [r4, #2]
}
 8012df0:	2000      	movs	r0, #0
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	00ffff3f 	.word	0x00ffff3f

08012df8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012df8:	6803      	ldr	r3, [r0, #0]
 8012dfa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012dfc:	0089      	lsls	r1, r1, #2
 8012dfe:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012e00:	600a      	str	r2, [r1, #0]
}
 8012e02:	4770      	bx	lr

08012e04 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012e04:	6803      	ldr	r3, [r0, #0]
 8012e06:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012e08:	0089      	lsls	r1, r1, #2
 8012e0a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012e0c:	6808      	ldr	r0, [r1, #0]
}
 8012e0e:	4770      	bx	lr

08012e10 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012e10:	4770      	bx	lr

08012e12 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012e12:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012e14:	2239      	movs	r2, #57	; 0x39
 8012e16:	2302      	movs	r3, #2
 8012e18:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012e1a:	6804      	ldr	r4, [r0, #0]
 8012e1c:	6823      	ldr	r3, [r4, #0]
 8012e1e:	2101      	movs	r1, #1
 8012e20:	430b      	orrs	r3, r1
 8012e22:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012e24:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012e26:	2000      	movs	r0, #0
 8012e28:	bd10      	pop	{r4, pc}
	...

08012e2c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012e2c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e2e:	4a1f      	ldr	r2, [pc, #124]	; (8012eac <TIM_Base_SetConfig+0x80>)
 8012e30:	4290      	cmp	r0, r2
 8012e32:	d006      	beq.n	8012e42 <TIM_Base_SetConfig+0x16>
 8012e34:	2280      	movs	r2, #128	; 0x80
 8012e36:	05d2      	lsls	r2, r2, #23
 8012e38:	4290      	cmp	r0, r2
 8012e3a:	d002      	beq.n	8012e42 <TIM_Base_SetConfig+0x16>
 8012e3c:	4a1c      	ldr	r2, [pc, #112]	; (8012eb0 <TIM_Base_SetConfig+0x84>)
 8012e3e:	4290      	cmp	r0, r2
 8012e40:	d103      	bne.n	8012e4a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e42:	2270      	movs	r2, #112	; 0x70
 8012e44:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012e46:	684a      	ldr	r2, [r1, #4]
 8012e48:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012e4a:	4a18      	ldr	r2, [pc, #96]	; (8012eac <TIM_Base_SetConfig+0x80>)
 8012e4c:	4290      	cmp	r0, r2
 8012e4e:	d012      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e50:	2280      	movs	r2, #128	; 0x80
 8012e52:	05d2      	lsls	r2, r2, #23
 8012e54:	4290      	cmp	r0, r2
 8012e56:	d00e      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e58:	4a15      	ldr	r2, [pc, #84]	; (8012eb0 <TIM_Base_SetConfig+0x84>)
 8012e5a:	4290      	cmp	r0, r2
 8012e5c:	d00b      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e5e:	4a15      	ldr	r2, [pc, #84]	; (8012eb4 <TIM_Base_SetConfig+0x88>)
 8012e60:	4290      	cmp	r0, r2
 8012e62:	d008      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e64:	4a14      	ldr	r2, [pc, #80]	; (8012eb8 <TIM_Base_SetConfig+0x8c>)
 8012e66:	4290      	cmp	r0, r2
 8012e68:	d005      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e6a:	4a14      	ldr	r2, [pc, #80]	; (8012ebc <TIM_Base_SetConfig+0x90>)
 8012e6c:	4290      	cmp	r0, r2
 8012e6e:	d002      	beq.n	8012e76 <TIM_Base_SetConfig+0x4a>
 8012e70:	4a13      	ldr	r2, [pc, #76]	; (8012ec0 <TIM_Base_SetConfig+0x94>)
 8012e72:	4290      	cmp	r0, r2
 8012e74:	d103      	bne.n	8012e7e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e76:	4a13      	ldr	r2, [pc, #76]	; (8012ec4 <TIM_Base_SetConfig+0x98>)
 8012e78:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e7a:	68ca      	ldr	r2, [r1, #12]
 8012e7c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8012e7e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e80:	688b      	ldr	r3, [r1, #8]
 8012e82:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e84:	680b      	ldr	r3, [r1, #0]
 8012e86:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012e88:	4b08      	ldr	r3, [pc, #32]	; (8012eac <TIM_Base_SetConfig+0x80>)
 8012e8a:	4298      	cmp	r0, r3
 8012e8c:	d008      	beq.n	8012ea0 <TIM_Base_SetConfig+0x74>
 8012e8e:	4b0a      	ldr	r3, [pc, #40]	; (8012eb8 <TIM_Base_SetConfig+0x8c>)
 8012e90:	4298      	cmp	r0, r3
 8012e92:	d005      	beq.n	8012ea0 <TIM_Base_SetConfig+0x74>
 8012e94:	4b09      	ldr	r3, [pc, #36]	; (8012ebc <TIM_Base_SetConfig+0x90>)
 8012e96:	4298      	cmp	r0, r3
 8012e98:	d002      	beq.n	8012ea0 <TIM_Base_SetConfig+0x74>
 8012e9a:	4b09      	ldr	r3, [pc, #36]	; (8012ec0 <TIM_Base_SetConfig+0x94>)
 8012e9c:	4298      	cmp	r0, r3
 8012e9e:	d101      	bne.n	8012ea4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012ea0:	690b      	ldr	r3, [r1, #16]
 8012ea2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	6143      	str	r3, [r0, #20]
}
 8012ea8:	4770      	bx	lr
 8012eaa:	46c0      	nop			; (mov r8, r8)
 8012eac:	40012c00 	.word	0x40012c00
 8012eb0:	40000400 	.word	0x40000400
 8012eb4:	40002000 	.word	0x40002000
 8012eb8:	40014000 	.word	0x40014000
 8012ebc:	40014400 	.word	0x40014400
 8012ec0:	40014800 	.word	0x40014800
 8012ec4:	fffffcff 	.word	0xfffffcff

08012ec8 <HAL_TIM_Base_Init>:
{
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012ecc:	d014      	beq.n	8012ef8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012ece:	2339      	movs	r3, #57	; 0x39
 8012ed0:	5cc3      	ldrb	r3, [r0, r3]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d00a      	beq.n	8012eec <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012ed6:	2539      	movs	r5, #57	; 0x39
 8012ed8:	2302      	movs	r3, #2
 8012eda:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012edc:	1d21      	adds	r1, r4, #4
 8012ede:	6820      	ldr	r0, [r4, #0]
 8012ee0:	f7ff ffa4 	bl	8012e2c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012ee8:	2000      	movs	r0, #0
}
 8012eea:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012eec:	3338      	adds	r3, #56	; 0x38
 8012eee:	2200      	movs	r2, #0
 8012ef0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012ef2:	f7ff ff8d 	bl	8012e10 <HAL_TIM_Base_MspInit>
 8012ef6:	e7ee      	b.n	8012ed6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012ef8:	2001      	movs	r0, #1
 8012efa:	e7f6      	b.n	8012eea <HAL_TIM_Base_Init+0x22>

08012efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012efe:	2338      	movs	r3, #56	; 0x38
 8012f00:	5cc3      	ldrb	r3, [r0, r3]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d01e      	beq.n	8012f44 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012f06:	2238      	movs	r2, #56	; 0x38
 8012f08:	2501      	movs	r5, #1
 8012f0a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012f0c:	2439      	movs	r4, #57	; 0x39
 8012f0e:	2302      	movs	r3, #2
 8012f10:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012f12:	6806      	ldr	r6, [r0, #0]
 8012f14:	6873      	ldr	r3, [r6, #4]
 8012f16:	2770      	movs	r7, #112	; 0x70
 8012f18:	43bb      	bics	r3, r7
 8012f1a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012f1c:	6806      	ldr	r6, [r0, #0]
 8012f1e:	6873      	ldr	r3, [r6, #4]
 8012f20:	680f      	ldr	r7, [r1, #0]
 8012f22:	433b      	orrs	r3, r7
 8012f24:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012f26:	6806      	ldr	r6, [r0, #0]
 8012f28:	68b3      	ldr	r3, [r6, #8]
 8012f2a:	2780      	movs	r7, #128	; 0x80
 8012f2c:	43bb      	bics	r3, r7
 8012f2e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012f30:	6806      	ldr	r6, [r0, #0]
 8012f32:	68b3      	ldr	r3, [r6, #8]
 8012f34:	6849      	ldr	r1, [r1, #4]
 8012f36:	430b      	orrs	r3, r1
 8012f38:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012f3a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012f40:	2000      	movs	r0, #0
}
 8012f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012f44:	2002      	movs	r0, #2
 8012f46:	e7fc      	b.n	8012f42 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012f48 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012f48:	4770      	bx	lr

08012f4a <HAL_UART_DeInit>:
{
 8012f4a:	b570      	push	{r4, r5, r6, lr}
 8012f4c:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012f4e:	d016      	beq.n	8012f7e <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012f50:	2669      	movs	r6, #105	; 0x69
 8012f52:	2302      	movs	r3, #2
 8012f54:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012f56:	6802      	ldr	r2, [r0, #0]
 8012f58:	6813      	ldr	r3, [r2, #0]
 8012f5a:	2101      	movs	r1, #1
 8012f5c:	438b      	bics	r3, r1
 8012f5e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012f60:	6803      	ldr	r3, [r0, #0]
 8012f62:	2500      	movs	r5, #0
 8012f64:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012f66:	6803      	ldr	r3, [r0, #0]
 8012f68:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012f6a:	6803      	ldr	r3, [r0, #0]
 8012f6c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012f6e:	f7ff ffeb 	bl	8012f48 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f72:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012f74:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012f76:	2368      	movs	r3, #104	; 0x68
 8012f78:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012f7a:	2000      	movs	r0, #0
}
 8012f7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012f7e:	2001      	movs	r0, #1
 8012f80:	e7fc      	b.n	8012f7c <HAL_UART_DeInit+0x32>

08012f82 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f82:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f84:	2369      	movs	r3, #105	; 0x69
 8012f86:	5cc3      	ldrb	r3, [r0, r3]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d003      	beq.n	8012f94 <HAL_UART_Transmit_IT+0x12>
 8012f8c:	2369      	movs	r3, #105	; 0x69
 8012f8e:	5cc3      	ldrb	r3, [r0, r3]
 8012f90:	2b22      	cmp	r3, #34	; 0x22
 8012f92:	d12b      	bne.n	8012fec <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8012f94:	2900      	cmp	r1, #0
 8012f96:	d02b      	beq.n	8012ff0 <HAL_UART_Transmit_IT+0x6e>
 8012f98:	2a00      	cmp	r2, #0
 8012f9a:	d02b      	beq.n	8012ff4 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012f9c:	2368      	movs	r3, #104	; 0x68
 8012f9e:	5cc3      	ldrb	r3, [r0, r3]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d029      	beq.n	8012ff8 <HAL_UART_Transmit_IT+0x76>
 8012fa4:	2368      	movs	r3, #104	; 0x68
 8012fa6:	2401      	movs	r4, #1
 8012fa8:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8012faa:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012fac:	3b18      	subs	r3, #24
 8012fae:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012fb0:	3302      	adds	r3, #2
 8012fb2:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012fb8:	3369      	adds	r3, #105	; 0x69
 8012fba:	5cc3      	ldrb	r3, [r0, r3]
 8012fbc:	2b22      	cmp	r3, #34	; 0x22
 8012fbe:	d011      	beq.n	8012fe4 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012fc0:	2369      	movs	r3, #105	; 0x69
 8012fc2:	2212      	movs	r2, #18
 8012fc4:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012fc6:	6802      	ldr	r2, [r0, #0]
 8012fc8:	6893      	ldr	r3, [r2, #8]
 8012fca:	2101      	movs	r1, #1
 8012fcc:	430b      	orrs	r3, r1
 8012fce:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012fd0:	2368      	movs	r3, #104	; 0x68
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012fd6:	6802      	ldr	r2, [r0, #0]
 8012fd8:	6813      	ldr	r3, [r2, #0]
 8012fda:	317f      	adds	r1, #127	; 0x7f
 8012fdc:	430b      	orrs	r3, r1
 8012fde:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012fe0:	2000      	movs	r0, #0
 8012fe2:	e004      	b.n	8012fee <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012fe4:	3347      	adds	r3, #71	; 0x47
 8012fe6:	2232      	movs	r2, #50	; 0x32
 8012fe8:	54c2      	strb	r2, [r0, r3]
 8012fea:	e7ec      	b.n	8012fc6 <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 8012fec:	2002      	movs	r0, #2
  }
}
 8012fee:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8012ff0:	2001      	movs	r0, #1
 8012ff2:	e7fc      	b.n	8012fee <HAL_UART_Transmit_IT+0x6c>
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	e7fa      	b.n	8012fee <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8012ff8:	2002      	movs	r0, #2
 8012ffa:	e7f8      	b.n	8012fee <HAL_UART_Transmit_IT+0x6c>

08012ffc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ffc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012ffe:	2369      	movs	r3, #105	; 0x69
 8013000:	5cc3      	ldrb	r3, [r0, r3]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d003      	beq.n	801300e <HAL_UART_Receive_IT+0x12>
 8013006:	2369      	movs	r3, #105	; 0x69
 8013008:	5cc3      	ldrb	r3, [r0, r3]
 801300a:	2b12      	cmp	r3, #18
 801300c:	d15d      	bne.n	80130ca <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801300e:	2900      	cmp	r1, #0
 8013010:	d05d      	beq.n	80130ce <HAL_UART_Receive_IT+0xd2>
 8013012:	2a00      	cmp	r2, #0
 8013014:	d05d      	beq.n	80130d2 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013016:	2368      	movs	r3, #104	; 0x68
 8013018:	5cc3      	ldrb	r3, [r0, r3]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d05b      	beq.n	80130d6 <HAL_UART_Receive_IT+0xda>
 801301e:	2368      	movs	r3, #104	; 0x68
 8013020:	2401      	movs	r4, #1
 8013022:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8013024:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8013026:	3b10      	subs	r3, #16
 8013028:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801302a:	3302      	adds	r3, #2
 801302c:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801302e:	6883      	ldr	r3, [r0, #8]
 8013030:	2280      	movs	r2, #128	; 0x80
 8013032:	0152      	lsls	r2, r2, #5
 8013034:	4293      	cmp	r3, r2
 8013036:	d008      	beq.n	801304a <HAL_UART_Receive_IT+0x4e>
 8013038:	2b00      	cmp	r3, #0
 801303a:	d115      	bne.n	8013068 <HAL_UART_Receive_IT+0x6c>
 801303c:	6903      	ldr	r3, [r0, #16]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d10e      	bne.n	8013060 <HAL_UART_Receive_IT+0x64>
 8013042:	335c      	adds	r3, #92	; 0x5c
 8013044:	22ff      	movs	r2, #255	; 0xff
 8013046:	52c2      	strh	r2, [r0, r3]
 8013048:	e012      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
 801304a:	6903      	ldr	r3, [r0, #16]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d103      	bne.n	8013058 <HAL_UART_Receive_IT+0x5c>
 8013050:	335c      	adds	r3, #92	; 0x5c
 8013052:	4a22      	ldr	r2, [pc, #136]	; (80130dc <HAL_UART_Receive_IT+0xe0>)
 8013054:	52c2      	strh	r2, [r0, r3]
 8013056:	e00b      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
 8013058:	235c      	movs	r3, #92	; 0x5c
 801305a:	22ff      	movs	r2, #255	; 0xff
 801305c:	52c2      	strh	r2, [r0, r3]
 801305e:	e007      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
 8013060:	235c      	movs	r3, #92	; 0x5c
 8013062:	227f      	movs	r2, #127	; 0x7f
 8013064:	52c2      	strh	r2, [r0, r3]
 8013066:	e003      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
 8013068:	2280      	movs	r2, #128	; 0x80
 801306a:	0552      	lsls	r2, r2, #21
 801306c:	4293      	cmp	r3, r2
 801306e:	d01d      	beq.n	80130ac <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013070:	2300      	movs	r3, #0
 8013072:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013074:	3369      	adds	r3, #105	; 0x69
 8013076:	5cc3      	ldrb	r3, [r0, r3]
 8013078:	2b12      	cmp	r3, #18
 801307a:	d022      	beq.n	80130c2 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 801307c:	2369      	movs	r3, #105	; 0x69
 801307e:	2222      	movs	r2, #34	; 0x22
 8013080:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013082:	6802      	ldr	r2, [r0, #0]
 8013084:	6811      	ldr	r1, [r2, #0]
 8013086:	2380      	movs	r3, #128	; 0x80
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	430b      	orrs	r3, r1
 801308c:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801308e:	6802      	ldr	r2, [r0, #0]
 8013090:	6893      	ldr	r3, [r2, #8]
 8013092:	2101      	movs	r1, #1
 8013094:	430b      	orrs	r3, r1
 8013096:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013098:	2368      	movs	r3, #104	; 0x68
 801309a:	2200      	movs	r2, #0
 801309c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801309e:	6802      	ldr	r2, [r0, #0]
 80130a0:	6813      	ldr	r3, [r2, #0]
 80130a2:	311f      	adds	r1, #31
 80130a4:	430b      	orrs	r3, r1
 80130a6:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80130a8:	2000      	movs	r0, #0
 80130aa:	e00f      	b.n	80130cc <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 80130ac:	6903      	ldr	r3, [r0, #16]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d103      	bne.n	80130ba <HAL_UART_Receive_IT+0xbe>
 80130b2:	335c      	adds	r3, #92	; 0x5c
 80130b4:	227f      	movs	r2, #127	; 0x7f
 80130b6:	52c2      	strh	r2, [r0, r3]
 80130b8:	e7da      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
 80130ba:	235c      	movs	r3, #92	; 0x5c
 80130bc:	223f      	movs	r2, #63	; 0x3f
 80130be:	52c2      	strh	r2, [r0, r3]
 80130c0:	e7d6      	b.n	8013070 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80130c2:	3357      	adds	r3, #87	; 0x57
 80130c4:	2232      	movs	r2, #50	; 0x32
 80130c6:	54c2      	strb	r2, [r0, r3]
 80130c8:	e7db      	b.n	8013082 <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 80130ca:	2002      	movs	r0, #2
  }
}
 80130cc:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80130ce:	2001      	movs	r0, #1
 80130d0:	e7fc      	b.n	80130cc <HAL_UART_Receive_IT+0xd0>
 80130d2:	2001      	movs	r0, #1
 80130d4:	e7fa      	b.n	80130cc <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 80130d6:	2002      	movs	r0, #2
 80130d8:	e7f8      	b.n	80130cc <HAL_UART_Receive_IT+0xd0>
 80130da:	46c0      	nop			; (mov r8, r8)
 80130dc:	000001ff 	.word	0x000001ff

080130e0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80130e0:	b510      	push	{r4, lr}
 80130e2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80130e4:	2369      	movs	r3, #105	; 0x69
 80130e6:	5cc3      	ldrb	r3, [r0, r3]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d003      	beq.n	80130f4 <HAL_UART_Transmit_DMA+0x14>
 80130ec:	2369      	movs	r3, #105	; 0x69
 80130ee:	5cc3      	ldrb	r3, [r0, r3]
 80130f0:	2b22      	cmp	r3, #34	; 0x22
 80130f2:	d139      	bne.n	8013168 <HAL_UART_Transmit_DMA+0x88>
  {
    if((pData == NULL ) || (Size == 0))
 80130f4:	2900      	cmp	r1, #0
 80130f6:	d039      	beq.n	801316c <HAL_UART_Transmit_DMA+0x8c>
 80130f8:	2a00      	cmp	r2, #0
 80130fa:	d039      	beq.n	8013170 <HAL_UART_Transmit_DMA+0x90>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80130fc:	2368      	movs	r3, #104	; 0x68
 80130fe:	5ce3      	ldrb	r3, [r4, r3]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d037      	beq.n	8013174 <HAL_UART_Transmit_DMA+0x94>
 8013104:	2368      	movs	r3, #104	; 0x68
 8013106:	2001      	movs	r0, #1
 8013108:	54e0      	strb	r0, [r4, r3]

    huart->pTxBuffPtr = pData;
 801310a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801310c:	3b18      	subs	r3, #24
 801310e:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013110:	3302      	adds	r3, #2
 8013112:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013114:	2300      	movs	r3, #0
 8013116:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013118:	3369      	adds	r3, #105	; 0x69
 801311a:	5ce3      	ldrb	r3, [r4, r3]
 801311c:	2b22      	cmp	r3, #34	; 0x22
 801311e:	d01f      	beq.n	8013160 <HAL_UART_Transmit_DMA+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013120:	2369      	movs	r3, #105	; 0x69
 8013122:	2012      	movs	r0, #18
 8013124:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013126:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013128:	4813      	ldr	r0, [pc, #76]	; (8013178 <HAL_UART_Transmit_DMA+0x98>)
 801312a:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801312c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801312e:	4813      	ldr	r0, [pc, #76]	; (801317c <HAL_UART_Transmit_DMA+0x9c>)
 8013130:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013132:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013134:	4812      	ldr	r0, [pc, #72]	; (8013180 <HAL_UART_Transmit_DMA+0xa0>)
 8013136:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8013138:	6820      	ldr	r0, [r4, #0]
 801313a:	3028      	adds	r0, #40	; 0x28
 801313c:	0013      	movs	r3, r2
 801313e:	0002      	movs	r2, r0
 8013140:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013142:	f7fe f921 	bl	8011388 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	2240      	movs	r2, #64	; 0x40
 801314a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801314c:	6822      	ldr	r2, [r4, #0]
 801314e:	6893      	ldr	r3, [r2, #8]
 8013150:	2180      	movs	r1, #128	; 0x80
 8013152:	430b      	orrs	r3, r1
 8013154:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013156:	2368      	movs	r3, #104	; 0x68
 8013158:	2200      	movs	r2, #0
 801315a:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 801315c:	2000      	movs	r0, #0
 801315e:	e004      	b.n	801316a <HAL_UART_Transmit_DMA+0x8a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013160:	3347      	adds	r3, #71	; 0x47
 8013162:	3031      	adds	r0, #49	; 0x31
 8013164:	54e0      	strb	r0, [r4, r3]
 8013166:	e7de      	b.n	8013126 <HAL_UART_Transmit_DMA+0x46>
  }
  else
  {
    return HAL_BUSY;
 8013168:	2002      	movs	r0, #2
  }
}
 801316a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801316c:	2001      	movs	r0, #1
 801316e:	e7fc      	b.n	801316a <HAL_UART_Transmit_DMA+0x8a>
 8013170:	2001      	movs	r0, #1
 8013172:	e7fa      	b.n	801316a <HAL_UART_Transmit_DMA+0x8a>
    __HAL_LOCK(huart);
 8013174:	2002      	movs	r0, #2
 8013176:	e7f8      	b.n	801316a <HAL_UART_Transmit_DMA+0x8a>
 8013178:	08013221 	.word	0x08013221
 801317c:	08013253 	.word	0x08013253
 8013180:	080132a3 	.word	0x080132a3

08013184 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013184:	b510      	push	{r4, lr}
 8013186:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013188:	2069      	movs	r0, #105	; 0x69
 801318a:	5c20      	ldrb	r0, [r4, r0]
 801318c:	2801      	cmp	r0, #1
 801318e:	d003      	beq.n	8013198 <HAL_UART_Receive_DMA+0x14>
 8013190:	2369      	movs	r3, #105	; 0x69
 8013192:	5ce3      	ldrb	r3, [r4, r3]
 8013194:	2b12      	cmp	r3, #18
 8013196:	d135      	bne.n	8013204 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8013198:	2900      	cmp	r1, #0
 801319a:	d035      	beq.n	8013208 <HAL_UART_Receive_DMA+0x84>
 801319c:	2a00      	cmp	r2, #0
 801319e:	d035      	beq.n	801320c <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80131a0:	2368      	movs	r3, #104	; 0x68
 80131a2:	5ce3      	ldrb	r3, [r4, r3]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d033      	beq.n	8013210 <HAL_UART_Receive_DMA+0x8c>
 80131a8:	2368      	movs	r3, #104	; 0x68
 80131aa:	2001      	movs	r0, #1
 80131ac:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 80131ae:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80131b0:	3b10      	subs	r3, #16
 80131b2:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131b4:	2300      	movs	r3, #0
 80131b6:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80131b8:	3369      	adds	r3, #105	; 0x69
 80131ba:	5ce3      	ldrb	r3, [r4, r3]
 80131bc:	2b12      	cmp	r3, #18
 80131be:	d01d      	beq.n	80131fc <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80131c0:	2369      	movs	r3, #105	; 0x69
 80131c2:	2022      	movs	r0, #34	; 0x22
 80131c4:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80131c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131c8:	4812      	ldr	r0, [pc, #72]	; (8013214 <HAL_UART_Receive_DMA+0x90>)
 80131ca:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80131cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131ce:	4812      	ldr	r0, [pc, #72]	; (8013218 <HAL_UART_Receive_DMA+0x94>)
 80131d0:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80131d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131d4:	4811      	ldr	r0, [pc, #68]	; (801321c <HAL_UART_Receive_DMA+0x98>)
 80131d6:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80131d8:	6820      	ldr	r0, [r4, #0]
 80131da:	3024      	adds	r0, #36	; 0x24
 80131dc:	0013      	movs	r3, r2
 80131de:	000a      	movs	r2, r1
 80131e0:	0001      	movs	r1, r0
 80131e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80131e4:	f7fe f8d0 	bl	8011388 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80131e8:	6822      	ldr	r2, [r4, #0]
 80131ea:	6893      	ldr	r3, [r2, #8]
 80131ec:	2140      	movs	r1, #64	; 0x40
 80131ee:	430b      	orrs	r3, r1
 80131f0:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 80131f2:	2368      	movs	r3, #104	; 0x68
 80131f4:	2200      	movs	r2, #0
 80131f6:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80131f8:	2000      	movs	r0, #0
 80131fa:	e004      	b.n	8013206 <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80131fc:	3357      	adds	r3, #87	; 0x57
 80131fe:	3031      	adds	r0, #49	; 0x31
 8013200:	54e0      	strb	r0, [r4, r3]
 8013202:	e7e0      	b.n	80131c6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8013204:	2002      	movs	r0, #2
  }
}
 8013206:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8013208:	2001      	movs	r0, #1
 801320a:	e7fc      	b.n	8013206 <HAL_UART_Receive_DMA+0x82>
 801320c:	2001      	movs	r0, #1
 801320e:	e7fa      	b.n	8013206 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8013210:	2002      	movs	r0, #2
 8013212:	e7f8      	b.n	8013206 <HAL_UART_Receive_DMA+0x82>
 8013214:	0801325d 	.word	0x0801325d
 8013218:	08013299 	.word	0x08013299
 801321c:	080132a3 	.word	0x080132a3

08013220 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013220:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013222:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013224:	6802      	ldr	r2, [r0, #0]
 8013226:	6812      	ldr	r2, [r2, #0]
 8013228:	0692      	lsls	r2, r2, #26
 801322a:	d40d      	bmi.n	8013248 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 801322c:	2252      	movs	r2, #82	; 0x52
 801322e:	2100      	movs	r1, #0
 8013230:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8013232:	6819      	ldr	r1, [r3, #0]
 8013234:	688a      	ldr	r2, [r1, #8]
 8013236:	2080      	movs	r0, #128	; 0x80
 8013238:	4382      	bics	r2, r0
 801323a:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	6813      	ldr	r3, [r2, #0]
 8013240:	2140      	movs	r1, #64	; 0x40
 8013242:	430b      	orrs	r3, r1
 8013244:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013246:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013248:	0018      	movs	r0, r3
 801324a:	f7fb f917 	bl	800e47c <HAL_UART_TxCpltCallback>
}
 801324e:	e7fa      	b.n	8013246 <UART_DMATransmitCplt+0x26>

08013250 <HAL_UART_TxHalfCpltCallback>:
}
 8013250:	4770      	bx	lr

08013252 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013252:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8013254:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 8013256:	f7ff fffb 	bl	8013250 <HAL_UART_TxHalfCpltCallback>
}
 801325a:	bd10      	pop	{r4, pc}

0801325c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801325c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801325e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013260:	6802      	ldr	r2, [r0, #0]
 8013262:	6812      	ldr	r2, [r2, #0]
 8013264:	0692      	lsls	r2, r2, #26
 8013266:	d40e      	bmi.n	8013286 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013268:	225a      	movs	r2, #90	; 0x5a
 801326a:	2100      	movs	r1, #0
 801326c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801326e:	6819      	ldr	r1, [r3, #0]
 8013270:	688a      	ldr	r2, [r1, #8]
 8013272:	2040      	movs	r0, #64	; 0x40
 8013274:	4382      	bics	r2, r0
 8013276:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013278:	2269      	movs	r2, #105	; 0x69
 801327a:	5c9a      	ldrb	r2, [r3, r2]
 801327c:	2a32      	cmp	r2, #50	; 0x32
 801327e:	d006      	beq.n	801328e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013280:	2269      	movs	r2, #105	; 0x69
 8013282:	2101      	movs	r1, #1
 8013284:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013286:	0018      	movs	r0, r3
 8013288:	f7fb f934 	bl	800e4f4 <HAL_UART_RxCpltCallback>
}
 801328c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801328e:	3237      	adds	r2, #55	; 0x37
 8013290:	2112      	movs	r1, #18
 8013292:	5499      	strb	r1, [r3, r2]
 8013294:	e7f7      	b.n	8013286 <UART_DMAReceiveCplt+0x2a>

08013296 <HAL_UART_RxHalfCpltCallback>:
}
 8013296:	4770      	bx	lr

08013298 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013298:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 801329a:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 801329c:	f7ff fffb 	bl	8013296 <HAL_UART_RxHalfCpltCallback>
}
 80132a0:	bd10      	pop	{r4, pc}

080132a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80132a2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80132a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80132a6:	2300      	movs	r3, #0
 80132a8:	225a      	movs	r2, #90	; 0x5a
 80132aa:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80132ac:	3a08      	subs	r2, #8
 80132ae:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80132b0:	3369      	adds	r3, #105	; 0x69
 80132b2:	3a51      	subs	r2, #81	; 0x51
 80132b4:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80132b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80132b8:	320f      	adds	r2, #15
 80132ba:	4313      	orrs	r3, r2
 80132bc:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80132be:	f7fb f8f5 	bl	800e4ac <HAL_UART_ErrorCallback>
}
 80132c2:	bd10      	pop	{r4, pc}

080132c4 <UART_SetConfig>:
{
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80132c8:	6883      	ldr	r3, [r0, #8]
 80132ca:	6902      	ldr	r2, [r0, #16]
 80132cc:	4313      	orrs	r3, r2
 80132ce:	6942      	ldr	r2, [r0, #20]
 80132d0:	4313      	orrs	r3, r2
 80132d2:	69c2      	ldr	r2, [r0, #28]
 80132d4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80132d6:	6801      	ldr	r1, [r0, #0]
 80132d8:	680a      	ldr	r2, [r1, #0]
 80132da:	487c      	ldr	r0, [pc, #496]	; (80134cc <UART_SetConfig+0x208>)
 80132dc:	4002      	ands	r2, r0
 80132de:	4313      	orrs	r3, r2
 80132e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80132e2:	6822      	ldr	r2, [r4, #0]
 80132e4:	6853      	ldr	r3, [r2, #4]
 80132e6:	497a      	ldr	r1, [pc, #488]	; (80134d0 <UART_SetConfig+0x20c>)
 80132e8:	400b      	ands	r3, r1
 80132ea:	68e1      	ldr	r1, [r4, #12]
 80132ec:	430b      	orrs	r3, r1
 80132ee:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80132f0:	69a2      	ldr	r2, [r4, #24]
 80132f2:	6a23      	ldr	r3, [r4, #32]
 80132f4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80132f6:	6821      	ldr	r1, [r4, #0]
 80132f8:	688b      	ldr	r3, [r1, #8]
 80132fa:	4876      	ldr	r0, [pc, #472]	; (80134d4 <UART_SetConfig+0x210>)
 80132fc:	4003      	ands	r3, r0
 80132fe:	4313      	orrs	r3, r2
 8013300:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013302:	6825      	ldr	r5, [r4, #0]
 8013304:	4b74      	ldr	r3, [pc, #464]	; (80134d8 <UART_SetConfig+0x214>)
 8013306:	429d      	cmp	r5, r3
 8013308:	d016      	beq.n	8013338 <UART_SetConfig+0x74>
 801330a:	4b74      	ldr	r3, [pc, #464]	; (80134dc <UART_SetConfig+0x218>)
 801330c:	429d      	cmp	r5, r3
 801330e:	d027      	beq.n	8013360 <UART_SetConfig+0x9c>
 8013310:	4b73      	ldr	r3, [pc, #460]	; (80134e0 <UART_SetConfig+0x21c>)
 8013312:	429d      	cmp	r5, r3
 8013314:	d042      	beq.n	801339c <UART_SetConfig+0xd8>
 8013316:	4b73      	ldr	r3, [pc, #460]	; (80134e4 <UART_SetConfig+0x220>)
 8013318:	429d      	cmp	r5, r3
 801331a:	d061      	beq.n	80133e0 <UART_SetConfig+0x11c>
 801331c:	4b72      	ldr	r3, [pc, #456]	; (80134e8 <UART_SetConfig+0x224>)
 801331e:	429d      	cmp	r5, r3
 8013320:	d075      	beq.n	801340e <UART_SetConfig+0x14a>
 8013322:	4b72      	ldr	r3, [pc, #456]	; (80134ec <UART_SetConfig+0x228>)
 8013324:	429d      	cmp	r5, r3
 8013326:	d074      	beq.n	8013412 <UART_SetConfig+0x14e>
 8013328:	4b71      	ldr	r3, [pc, #452]	; (80134f0 <UART_SetConfig+0x22c>)
 801332a:	429d      	cmp	r5, r3
 801332c:	d073      	beq.n	8013416 <UART_SetConfig+0x152>
 801332e:	4b71      	ldr	r3, [pc, #452]	; (80134f4 <UART_SetConfig+0x230>)
 8013330:	429d      	cmp	r5, r3
 8013332:	d051      	beq.n	80133d8 <UART_SetConfig+0x114>
 8013334:	2310      	movs	r3, #16
 8013336:	e054      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013338:	4b6f      	ldr	r3, [pc, #444]	; (80134f8 <UART_SetConfig+0x234>)
 801333a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801333c:	2303      	movs	r3, #3
 801333e:	4013      	ands	r3, r2
 8013340:	2b01      	cmp	r3, #1
 8013342:	d009      	beq.n	8013358 <UART_SetConfig+0x94>
 8013344:	2b00      	cmp	r3, #0
 8013346:	d005      	beq.n	8013354 <UART_SetConfig+0x90>
 8013348:	2b02      	cmp	r3, #2
 801334a:	d007      	beq.n	801335c <UART_SetConfig+0x98>
 801334c:	2b03      	cmp	r3, #3
 801334e:	d045      	beq.n	80133dc <UART_SetConfig+0x118>
 8013350:	2310      	movs	r3, #16
 8013352:	e046      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013354:	2300      	movs	r3, #0
 8013356:	e044      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013358:	2304      	movs	r3, #4
 801335a:	e042      	b.n	80133e2 <UART_SetConfig+0x11e>
 801335c:	2308      	movs	r3, #8
 801335e:	e040      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013360:	4b65      	ldr	r3, [pc, #404]	; (80134f8 <UART_SetConfig+0x234>)
 8013362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013364:	22c0      	movs	r2, #192	; 0xc0
 8013366:	0292      	lsls	r2, r2, #10
 8013368:	4013      	ands	r3, r2
 801336a:	2280      	movs	r2, #128	; 0x80
 801336c:	0252      	lsls	r2, r2, #9
 801336e:	4293      	cmp	r3, r2
 8013370:	d00e      	beq.n	8013390 <UART_SetConfig+0xcc>
 8013372:	d909      	bls.n	8013388 <UART_SetConfig+0xc4>
 8013374:	2280      	movs	r2, #128	; 0x80
 8013376:	0292      	lsls	r2, r2, #10
 8013378:	4293      	cmp	r3, r2
 801337a:	d00b      	beq.n	8013394 <UART_SetConfig+0xd0>
 801337c:	22c0      	movs	r2, #192	; 0xc0
 801337e:	0292      	lsls	r2, r2, #10
 8013380:	4293      	cmp	r3, r2
 8013382:	d109      	bne.n	8013398 <UART_SetConfig+0xd4>
 8013384:	2302      	movs	r3, #2
 8013386:	e02c      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013388:	2b00      	cmp	r3, #0
 801338a:	d105      	bne.n	8013398 <UART_SetConfig+0xd4>
 801338c:	2300      	movs	r3, #0
 801338e:	e028      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013390:	2304      	movs	r3, #4
 8013392:	e026      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013394:	2308      	movs	r3, #8
 8013396:	e024      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013398:	2310      	movs	r3, #16
 801339a:	e022      	b.n	80133e2 <UART_SetConfig+0x11e>
 801339c:	4b56      	ldr	r3, [pc, #344]	; (80134f8 <UART_SetConfig+0x234>)
 801339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a0:	22c0      	movs	r2, #192	; 0xc0
 80133a2:	0312      	lsls	r2, r2, #12
 80133a4:	4013      	ands	r3, r2
 80133a6:	2280      	movs	r2, #128	; 0x80
 80133a8:	02d2      	lsls	r2, r2, #11
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d00e      	beq.n	80133cc <UART_SetConfig+0x108>
 80133ae:	d909      	bls.n	80133c4 <UART_SetConfig+0x100>
 80133b0:	2280      	movs	r2, #128	; 0x80
 80133b2:	0312      	lsls	r2, r2, #12
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d00b      	beq.n	80133d0 <UART_SetConfig+0x10c>
 80133b8:	22c0      	movs	r2, #192	; 0xc0
 80133ba:	0312      	lsls	r2, r2, #12
 80133bc:	4293      	cmp	r3, r2
 80133be:	d109      	bne.n	80133d4 <UART_SetConfig+0x110>
 80133c0:	2302      	movs	r3, #2
 80133c2:	e00e      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d105      	bne.n	80133d4 <UART_SetConfig+0x110>
 80133c8:	2300      	movs	r3, #0
 80133ca:	e00a      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133cc:	2304      	movs	r3, #4
 80133ce:	e008      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133d0:	2308      	movs	r3, #8
 80133d2:	e006      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133d4:	2310      	movs	r3, #16
 80133d6:	e004      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133d8:	2300      	movs	r3, #0
 80133da:	e002      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133dc:	2302      	movs	r3, #2
 80133de:	e000      	b.n	80133e2 <UART_SetConfig+0x11e>
 80133e0:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133e2:	2280      	movs	r2, #128	; 0x80
 80133e4:	0212      	lsls	r2, r2, #8
 80133e6:	69e1      	ldr	r1, [r4, #28]
 80133e8:	4291      	cmp	r1, r2
 80133ea:	d016      	beq.n	801341a <UART_SetConfig+0x156>
    switch (clocksource)
 80133ec:	2b02      	cmp	r3, #2
 80133ee:	d057      	beq.n	80134a0 <UART_SetConfig+0x1dc>
 80133f0:	d949      	bls.n	8013486 <UART_SetConfig+0x1c2>
 80133f2:	2b04      	cmp	r3, #4
 80133f4:	d05d      	beq.n	80134b2 <UART_SetConfig+0x1ee>
 80133f6:	2b08      	cmp	r3, #8
 80133f8:	d166      	bne.n	80134c8 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80133fa:	6861      	ldr	r1, [r4, #4]
 80133fc:	2080      	movs	r0, #128	; 0x80
 80133fe:	0200      	lsls	r0, r0, #8
 8013400:	f7ec fea6 	bl	8000150 <__udivsi3>
 8013404:	0400      	lsls	r0, r0, #16
 8013406:	0c00      	lsrs	r0, r0, #16
 8013408:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801340a:	2000      	movs	r0, #0
        break;
 801340c:	e027      	b.n	801345e <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801340e:	2300      	movs	r3, #0
 8013410:	e7e7      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013412:	2300      	movs	r3, #0
 8013414:	e7e5      	b.n	80133e2 <UART_SetConfig+0x11e>
 8013416:	2300      	movs	r3, #0
 8013418:	e7e3      	b.n	80133e2 <UART_SetConfig+0x11e>
    switch (clocksource)
 801341a:	2b02      	cmp	r3, #2
 801341c:	d020      	beq.n	8013460 <UART_SetConfig+0x19c>
 801341e:	d90b      	bls.n	8013438 <UART_SetConfig+0x174>
 8013420:	2b04      	cmp	r3, #4
 8013422:	d024      	beq.n	801346e <UART_SetConfig+0x1aa>
 8013424:	2b08      	cmp	r3, #8
 8013426:	d12b      	bne.n	8013480 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013428:	6861      	ldr	r1, [r4, #4]
 801342a:	2080      	movs	r0, #128	; 0x80
 801342c:	0240      	lsls	r0, r0, #9
 801342e:	f7ec fe8f 	bl	8000150 <__udivsi3>
 8013432:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013434:	2000      	movs	r0, #0
        break;
 8013436:	e009      	b.n	801344c <UART_SetConfig+0x188>
    switch (clocksource)
 8013438:	2b00      	cmp	r3, #0
 801343a:	d121      	bne.n	8013480 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801343c:	f7ff fa60 	bl	8012900 <HAL_RCC_GetPCLK1Freq>
 8013440:	0040      	lsls	r0, r0, #1
 8013442:	6861      	ldr	r1, [r4, #4]
 8013444:	f7ec fe84 	bl	8000150 <__udivsi3>
 8013448:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801344a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 801344c:	220f      	movs	r2, #15
 801344e:	0019      	movs	r1, r3
 8013450:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013452:	105b      	asrs	r3, r3, #1
 8013454:	3a08      	subs	r2, #8
 8013456:	4013      	ands	r3, r2
 8013458:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 801345a:	6822      	ldr	r2, [r4, #0]
 801345c:	60d3      	str	r3, [r2, #12]
}
 801345e:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013460:	6861      	ldr	r1, [r4, #4]
 8013462:	4826      	ldr	r0, [pc, #152]	; (80134fc <UART_SetConfig+0x238>)
 8013464:	f7ec fe74 	bl	8000150 <__udivsi3>
 8013468:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801346a:	2000      	movs	r0, #0
        break;
 801346c:	e7ee      	b.n	801344c <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801346e:	f7ff f9e9 	bl	8012844 <HAL_RCC_GetSysClockFreq>
 8013472:	0040      	lsls	r0, r0, #1
 8013474:	6861      	ldr	r1, [r4, #4]
 8013476:	f7ec fe6b 	bl	8000150 <__udivsi3>
 801347a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801347c:	2000      	movs	r0, #0
        break;
 801347e:	e7e5      	b.n	801344c <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 8013480:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013482:	2300      	movs	r3, #0
 8013484:	e7e2      	b.n	801344c <UART_SetConfig+0x188>
    switch (clocksource)
 8013486:	2b00      	cmp	r3, #0
 8013488:	d11e      	bne.n	80134c8 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801348a:	f7ff fa39 	bl	8012900 <HAL_RCC_GetPCLK1Freq>
 801348e:	6861      	ldr	r1, [r4, #4]
 8013490:	f7ec fe5e 	bl	8000150 <__udivsi3>
 8013494:	6823      	ldr	r3, [r4, #0]
 8013496:	0400      	lsls	r0, r0, #16
 8013498:	0c00      	lsrs	r0, r0, #16
 801349a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801349c:	2000      	movs	r0, #0
        break;
 801349e:	e7de      	b.n	801345e <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80134a0:	6861      	ldr	r1, [r4, #4]
 80134a2:	4817      	ldr	r0, [pc, #92]	; (8013500 <UART_SetConfig+0x23c>)
 80134a4:	f7ec fe54 	bl	8000150 <__udivsi3>
 80134a8:	0400      	lsls	r0, r0, #16
 80134aa:	0c00      	lsrs	r0, r0, #16
 80134ac:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80134ae:	2000      	movs	r0, #0
        break;
 80134b0:	e7d5      	b.n	801345e <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80134b2:	f7ff f9c7 	bl	8012844 <HAL_RCC_GetSysClockFreq>
 80134b6:	6861      	ldr	r1, [r4, #4]
 80134b8:	f7ec fe4a 	bl	8000150 <__udivsi3>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	0400      	lsls	r0, r0, #16
 80134c0:	0c00      	lsrs	r0, r0, #16
 80134c2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80134c4:	2000      	movs	r0, #0
        break;
 80134c6:	e7ca      	b.n	801345e <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 80134c8:	2001      	movs	r0, #1
 80134ca:	e7c8      	b.n	801345e <UART_SetConfig+0x19a>
 80134cc:	efff69f3 	.word	0xefff69f3
 80134d0:	ffffcfff 	.word	0xffffcfff
 80134d4:	fffff4ff 	.word	0xfffff4ff
 80134d8:	40013800 	.word	0x40013800
 80134dc:	40004400 	.word	0x40004400
 80134e0:	40004800 	.word	0x40004800
 80134e4:	40004c00 	.word	0x40004c00
 80134e8:	40005000 	.word	0x40005000
 80134ec:	40011400 	.word	0x40011400
 80134f0:	40011800 	.word	0x40011800
 80134f4:	40011c00 	.word	0x40011c00
 80134f8:	40021000 	.word	0x40021000
 80134fc:	00f42400 	.word	0x00f42400
 8013500:	007a1200 	.word	0x007a1200

08013504 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013504:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013506:	07db      	lsls	r3, r3, #31
 8013508:	d506      	bpl.n	8013518 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801350a:	6802      	ldr	r2, [r0, #0]
 801350c:	6853      	ldr	r3, [r2, #4]
 801350e:	492c      	ldr	r1, [pc, #176]	; (80135c0 <UART_AdvFeatureConfig+0xbc>)
 8013510:	400b      	ands	r3, r1
 8013512:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013514:	430b      	orrs	r3, r1
 8013516:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013518:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801351a:	079b      	lsls	r3, r3, #30
 801351c:	d506      	bpl.n	801352c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801351e:	6802      	ldr	r2, [r0, #0]
 8013520:	6853      	ldr	r3, [r2, #4]
 8013522:	4928      	ldr	r1, [pc, #160]	; (80135c4 <UART_AdvFeatureConfig+0xc0>)
 8013524:	400b      	ands	r3, r1
 8013526:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013528:	430b      	orrs	r3, r1
 801352a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801352c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801352e:	075b      	lsls	r3, r3, #29
 8013530:	d506      	bpl.n	8013540 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013532:	6802      	ldr	r2, [r0, #0]
 8013534:	6853      	ldr	r3, [r2, #4]
 8013536:	4924      	ldr	r1, [pc, #144]	; (80135c8 <UART_AdvFeatureConfig+0xc4>)
 8013538:	400b      	ands	r3, r1
 801353a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801353c:	430b      	orrs	r3, r1
 801353e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013540:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013542:	071b      	lsls	r3, r3, #28
 8013544:	d506      	bpl.n	8013554 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013546:	6802      	ldr	r2, [r0, #0]
 8013548:	6853      	ldr	r3, [r2, #4]
 801354a:	4920      	ldr	r1, [pc, #128]	; (80135cc <UART_AdvFeatureConfig+0xc8>)
 801354c:	400b      	ands	r3, r1
 801354e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013550:	430b      	orrs	r3, r1
 8013552:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013554:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013556:	06db      	lsls	r3, r3, #27
 8013558:	d506      	bpl.n	8013568 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801355a:	6802      	ldr	r2, [r0, #0]
 801355c:	6893      	ldr	r3, [r2, #8]
 801355e:	491c      	ldr	r1, [pc, #112]	; (80135d0 <UART_AdvFeatureConfig+0xcc>)
 8013560:	400b      	ands	r3, r1
 8013562:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013564:	430b      	orrs	r3, r1
 8013566:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013568:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801356a:	069b      	lsls	r3, r3, #26
 801356c:	d506      	bpl.n	801357c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801356e:	6802      	ldr	r2, [r0, #0]
 8013570:	6893      	ldr	r3, [r2, #8]
 8013572:	4918      	ldr	r1, [pc, #96]	; (80135d4 <UART_AdvFeatureConfig+0xd0>)
 8013574:	400b      	ands	r3, r1
 8013576:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013578:	430b      	orrs	r3, r1
 801357a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801357c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801357e:	065b      	lsls	r3, r3, #25
 8013580:	d50b      	bpl.n	801359a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013582:	6802      	ldr	r2, [r0, #0]
 8013584:	6853      	ldr	r3, [r2, #4]
 8013586:	4914      	ldr	r1, [pc, #80]	; (80135d8 <UART_AdvFeatureConfig+0xd4>)
 8013588:	400b      	ands	r3, r1
 801358a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801358c:	430b      	orrs	r3, r1
 801358e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013590:	2380      	movs	r3, #128	; 0x80
 8013592:	035b      	lsls	r3, r3, #13
 8013594:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013596:	429a      	cmp	r2, r3
 8013598:	d00a      	beq.n	80135b0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801359a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801359c:	061b      	lsls	r3, r3, #24
 801359e:	d506      	bpl.n	80135ae <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135a0:	6802      	ldr	r2, [r0, #0]
 80135a2:	6853      	ldr	r3, [r2, #4]
 80135a4:	490d      	ldr	r1, [pc, #52]	; (80135dc <UART_AdvFeatureConfig+0xd8>)
 80135a6:	400b      	ands	r3, r1
 80135a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80135aa:	430b      	orrs	r3, r1
 80135ac:	6053      	str	r3, [r2, #4]
}
 80135ae:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135b0:	6802      	ldr	r2, [r0, #0]
 80135b2:	6853      	ldr	r3, [r2, #4]
 80135b4:	490a      	ldr	r1, [pc, #40]	; (80135e0 <UART_AdvFeatureConfig+0xdc>)
 80135b6:	400b      	ands	r3, r1
 80135b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80135ba:	430b      	orrs	r3, r1
 80135bc:	6053      	str	r3, [r2, #4]
 80135be:	e7ec      	b.n	801359a <UART_AdvFeatureConfig+0x96>
 80135c0:	fffdffff 	.word	0xfffdffff
 80135c4:	fffeffff 	.word	0xfffeffff
 80135c8:	fffbffff 	.word	0xfffbffff
 80135cc:	ffff7fff 	.word	0xffff7fff
 80135d0:	ffffefff 	.word	0xffffefff
 80135d4:	ffffdfff 	.word	0xffffdfff
 80135d8:	ffefffff 	.word	0xffefffff
 80135dc:	fff7ffff 	.word	0xfff7ffff
 80135e0:	ff9fffff 	.word	0xff9fffff

080135e4 <UART_WaitOnFlagUntilTimeout>:
{
 80135e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135e6:	46c6      	mov	lr, r8
 80135e8:	b500      	push	{lr}
 80135ea:	0006      	movs	r6, r0
 80135ec:	000c      	movs	r4, r1
 80135ee:	0017      	movs	r7, r2
 80135f0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80135f2:	f7fd fcdf 	bl	8010fb4 <HAL_GetTick>
 80135f6:	4680      	mov	r8, r0
  if(Status == RESET)
 80135f8:	2f00      	cmp	r7, #0
 80135fa:	d029      	beq.n	8013650 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80135fc:	6833      	ldr	r3, [r6, #0]
 80135fe:	69db      	ldr	r3, [r3, #28]
 8013600:	4023      	ands	r3, r4
 8013602:	42a3      	cmp	r3, r4
 8013604:	d152      	bne.n	80136ac <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013606:	1c6b      	adds	r3, r5, #1
 8013608:	d0f8      	beq.n	80135fc <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801360a:	2d00      	cmp	r5, #0
 801360c:	d005      	beq.n	801361a <UART_WaitOnFlagUntilTimeout+0x36>
 801360e:	f7fd fcd1 	bl	8010fb4 <HAL_GetTick>
 8013612:	4643      	mov	r3, r8
 8013614:	1ac0      	subs	r0, r0, r3
 8013616:	42a8      	cmp	r0, r5
 8013618:	d9f0      	bls.n	80135fc <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801361a:	6832      	ldr	r2, [r6, #0]
 801361c:	6813      	ldr	r3, [r2, #0]
 801361e:	2180      	movs	r1, #128	; 0x80
 8013620:	438b      	bics	r3, r1
 8013622:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013624:	6832      	ldr	r2, [r6, #0]
 8013626:	6813      	ldr	r3, [r2, #0]
 8013628:	3960      	subs	r1, #96	; 0x60
 801362a:	438b      	bics	r3, r1
 801362c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801362e:	6832      	ldr	r2, [r6, #0]
 8013630:	6813      	ldr	r3, [r2, #0]
 8013632:	491f      	ldr	r1, [pc, #124]	; (80136b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013634:	400b      	ands	r3, r1
 8013636:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013638:	6831      	ldr	r1, [r6, #0]
 801363a:	688b      	ldr	r3, [r1, #8]
 801363c:	2201      	movs	r2, #1
 801363e:	4393      	bics	r3, r2
 8013640:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013642:	2369      	movs	r3, #105	; 0x69
 8013644:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013646:	3b01      	subs	r3, #1
 8013648:	2200      	movs	r2, #0
 801364a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801364c:	2003      	movs	r0, #3
 801364e:	e02a      	b.n	80136a6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013650:	6833      	ldr	r3, [r6, #0]
 8013652:	69db      	ldr	r3, [r3, #28]
 8013654:	4023      	ands	r3, r4
 8013656:	42a3      	cmp	r3, r4
 8013658:	d024      	beq.n	80136a4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801365a:	1c6b      	adds	r3, r5, #1
 801365c:	d0f8      	beq.n	8013650 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801365e:	2d00      	cmp	r5, #0
 8013660:	d005      	beq.n	801366e <UART_WaitOnFlagUntilTimeout+0x8a>
 8013662:	f7fd fca7 	bl	8010fb4 <HAL_GetTick>
 8013666:	4643      	mov	r3, r8
 8013668:	1ac0      	subs	r0, r0, r3
 801366a:	42a8      	cmp	r0, r5
 801366c:	d9f0      	bls.n	8013650 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801366e:	6832      	ldr	r2, [r6, #0]
 8013670:	6813      	ldr	r3, [r2, #0]
 8013672:	2180      	movs	r1, #128	; 0x80
 8013674:	438b      	bics	r3, r1
 8013676:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013678:	6832      	ldr	r2, [r6, #0]
 801367a:	6813      	ldr	r3, [r2, #0]
 801367c:	3960      	subs	r1, #96	; 0x60
 801367e:	438b      	bics	r3, r1
 8013680:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013682:	6832      	ldr	r2, [r6, #0]
 8013684:	6813      	ldr	r3, [r2, #0]
 8013686:	490a      	ldr	r1, [pc, #40]	; (80136b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013688:	400b      	ands	r3, r1
 801368a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801368c:	6831      	ldr	r1, [r6, #0]
 801368e:	688b      	ldr	r3, [r1, #8]
 8013690:	2201      	movs	r2, #1
 8013692:	4393      	bics	r3, r2
 8013694:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013696:	2369      	movs	r3, #105	; 0x69
 8013698:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801369a:	3b01      	subs	r3, #1
 801369c:	2200      	movs	r2, #0
 801369e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80136a0:	2003      	movs	r0, #3
 80136a2:	e000      	b.n	80136a6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80136a4:	2000      	movs	r0, #0
}
 80136a6:	bc04      	pop	{r2}
 80136a8:	4690      	mov	r8, r2
 80136aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80136ac:	2000      	movs	r0, #0
 80136ae:	e7fa      	b.n	80136a6 <UART_WaitOnFlagUntilTimeout+0xc2>
 80136b0:	fffffeff 	.word	0xfffffeff

080136b4 <HAL_UART_Transmit>:
{
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	0004      	movs	r4, r0
 80136b8:	000e      	movs	r6, r1
 80136ba:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136bc:	2369      	movs	r3, #105	; 0x69
 80136be:	5cc3      	ldrb	r3, [r0, r3]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d003      	beq.n	80136cc <HAL_UART_Transmit+0x18>
 80136c4:	2369      	movs	r3, #105	; 0x69
 80136c6:	5cc3      	ldrb	r3, [r0, r3]
 80136c8:	2b22      	cmp	r3, #34	; 0x22
 80136ca:	d155      	bne.n	8013778 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80136cc:	2e00      	cmp	r6, #0
 80136ce:	d055      	beq.n	801377c <HAL_UART_Transmit+0xc8>
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	d055      	beq.n	8013780 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80136d4:	2368      	movs	r3, #104	; 0x68
 80136d6:	5ce3      	ldrb	r3, [r4, r3]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d053      	beq.n	8013784 <HAL_UART_Transmit+0xd0>
 80136dc:	2368      	movs	r3, #104	; 0x68
 80136de:	2101      	movs	r1, #1
 80136e0:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136e2:	2300      	movs	r3, #0
 80136e4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80136e6:	3369      	adds	r3, #105	; 0x69
 80136e8:	5ce3      	ldrb	r3, [r4, r3]
 80136ea:	2b22      	cmp	r3, #34	; 0x22
 80136ec:	d007      	beq.n	80136fe <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80136ee:	2369      	movs	r3, #105	; 0x69
 80136f0:	2112      	movs	r1, #18
 80136f2:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80136f4:	2350      	movs	r3, #80	; 0x50
 80136f6:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80136f8:	3302      	adds	r3, #2
 80136fa:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 80136fc:	e007      	b.n	801370e <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80136fe:	3347      	adds	r3, #71	; 0x47
 8013700:	3131      	adds	r1, #49	; 0x31
 8013702:	54e1      	strb	r1, [r4, r3]
 8013704:	e7f6      	b.n	80136f4 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013706:	7833      	ldrb	r3, [r6, #0]
 8013708:	6822      	ldr	r2, [r4, #0]
 801370a:	8513      	strh	r3, [r2, #40]	; 0x28
 801370c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801370e:	2352      	movs	r3, #82	; 0x52
 8013710:	5ae3      	ldrh	r3, [r4, r3]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d019      	beq.n	801374a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013716:	3b01      	subs	r3, #1
 8013718:	2252      	movs	r2, #82	; 0x52
 801371a:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 801371c:	002b      	movs	r3, r5
 801371e:	2200      	movs	r2, #0
 8013720:	2180      	movs	r1, #128	; 0x80
 8013722:	0020      	movs	r0, r4
 8013724:	f7ff ff5e 	bl	80135e4 <UART_WaitOnFlagUntilTimeout>
 8013728:	2800      	cmp	r0, #0
 801372a:	d12d      	bne.n	8013788 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801372c:	2380      	movs	r3, #128	; 0x80
 801372e:	015b      	lsls	r3, r3, #5
 8013730:	68a2      	ldr	r2, [r4, #8]
 8013732:	429a      	cmp	r2, r3
 8013734:	d1e7      	bne.n	8013706 <HAL_UART_Transmit+0x52>
 8013736:	6923      	ldr	r3, [r4, #16]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d1e4      	bne.n	8013706 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801373c:	8833      	ldrh	r3, [r6, #0]
 801373e:	05db      	lsls	r3, r3, #23
 8013740:	0ddb      	lsrs	r3, r3, #23
 8013742:	6822      	ldr	r2, [r4, #0]
 8013744:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013746:	3602      	adds	r6, #2
 8013748:	e7e1      	b.n	801370e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801374a:	002b      	movs	r3, r5
 801374c:	2200      	movs	r2, #0
 801374e:	2140      	movs	r1, #64	; 0x40
 8013750:	0020      	movs	r0, r4
 8013752:	f7ff ff47 	bl	80135e4 <UART_WaitOnFlagUntilTimeout>
 8013756:	2800      	cmp	r0, #0
 8013758:	d118      	bne.n	801378c <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801375a:	2369      	movs	r3, #105	; 0x69
 801375c:	5ce3      	ldrb	r3, [r4, r3]
 801375e:	2b32      	cmp	r3, #50	; 0x32
 8013760:	d006      	beq.n	8013770 <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 8013762:	2369      	movs	r3, #105	; 0x69
 8013764:	2201      	movs	r2, #1
 8013766:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013768:	2368      	movs	r3, #104	; 0x68
 801376a:	2200      	movs	r2, #0
 801376c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801376e:	e004      	b.n	801377a <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013770:	3337      	adds	r3, #55	; 0x37
 8013772:	2222      	movs	r2, #34	; 0x22
 8013774:	54e2      	strb	r2, [r4, r3]
 8013776:	e7f7      	b.n	8013768 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8013778:	2002      	movs	r0, #2
}
 801377a:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 801377c:	2001      	movs	r0, #1
 801377e:	e7fc      	b.n	801377a <HAL_UART_Transmit+0xc6>
 8013780:	2001      	movs	r0, #1
 8013782:	e7fa      	b.n	801377a <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8013784:	2002      	movs	r0, #2
 8013786:	e7f8      	b.n	801377a <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8013788:	2003      	movs	r0, #3
 801378a:	e7f6      	b.n	801377a <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 801378c:	2003      	movs	r0, #3
 801378e:	e7f4      	b.n	801377a <HAL_UART_Transmit+0xc6>

08013790 <UART_CheckIdleState>:
{
 8013790:	b510      	push	{r4, lr}
 8013792:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013794:	2300      	movs	r3, #0
 8013796:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013798:	6803      	ldr	r3, [r0, #0]
 801379a:	4a18      	ldr	r2, [pc, #96]	; (80137fc <UART_CheckIdleState+0x6c>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d005      	beq.n	80137ac <UART_CheckIdleState+0x1c>
 80137a0:	4a17      	ldr	r2, [pc, #92]	; (8013800 <UART_CheckIdleState+0x70>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d002      	beq.n	80137ac <UART_CheckIdleState+0x1c>
 80137a6:	4a17      	ldr	r2, [pc, #92]	; (8013804 <UART_CheckIdleState+0x74>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d106      	bne.n	80137ba <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	071b      	lsls	r3, r3, #28
 80137b0:	d40b      	bmi.n	80137ca <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80137b2:	6823      	ldr	r3, [r4, #0]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	075b      	lsls	r3, r3, #29
 80137b8:	d413      	bmi.n	80137e2 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80137ba:	2369      	movs	r3, #105	; 0x69
 80137bc:	2201      	movs	r2, #1
 80137be:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80137c0:	3b01      	subs	r3, #1
 80137c2:	2200      	movs	r2, #0
 80137c4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80137c6:	2000      	movs	r0, #0
}
 80137c8:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137ca:	23fa      	movs	r3, #250	; 0xfa
 80137cc:	2180      	movs	r1, #128	; 0x80
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	2200      	movs	r2, #0
 80137d2:	0389      	lsls	r1, r1, #14
 80137d4:	0020      	movs	r0, r4
 80137d6:	f7ff ff05 	bl	80135e4 <UART_WaitOnFlagUntilTimeout>
 80137da:	2800      	cmp	r0, #0
 80137dc:	d0e9      	beq.n	80137b2 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80137de:	2003      	movs	r0, #3
 80137e0:	e7f2      	b.n	80137c8 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80137e2:	23fa      	movs	r3, #250	; 0xfa
 80137e4:	2180      	movs	r1, #128	; 0x80
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	2200      	movs	r2, #0
 80137ea:	03c9      	lsls	r1, r1, #15
 80137ec:	0020      	movs	r0, r4
 80137ee:	f7ff fef9 	bl	80135e4 <UART_WaitOnFlagUntilTimeout>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d0e1      	beq.n	80137ba <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80137f6:	2003      	movs	r0, #3
 80137f8:	e7e6      	b.n	80137c8 <UART_CheckIdleState+0x38>
 80137fa:	46c0      	nop			; (mov r8, r8)
 80137fc:	40013800 	.word	0x40013800
 8013800:	40004400 	.word	0x40004400
 8013804:	40004800 	.word	0x40004800

08013808 <HAL_UART_Init>:
{
 8013808:	b510      	push	{r4, lr}
 801380a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801380c:	d030      	beq.n	8013870 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801380e:	2369      	movs	r3, #105	; 0x69
 8013810:	5cc3      	ldrb	r3, [r0, r3]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d022      	beq.n	801385c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013816:	2369      	movs	r3, #105	; 0x69
 8013818:	2202      	movs	r2, #2
 801381a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 801381c:	6822      	ldr	r2, [r4, #0]
 801381e:	6813      	ldr	r3, [r2, #0]
 8013820:	2101      	movs	r1, #1
 8013822:	438b      	bics	r3, r1
 8013824:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013826:	0020      	movs	r0, r4
 8013828:	f7ff fd4c 	bl	80132c4 <UART_SetConfig>
 801382c:	2801      	cmp	r0, #1
 801382e:	d014      	beq.n	801385a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013832:	2b00      	cmp	r3, #0
 8013834:	d118      	bne.n	8013868 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013836:	6822      	ldr	r2, [r4, #0]
 8013838:	6853      	ldr	r3, [r2, #4]
 801383a:	490e      	ldr	r1, [pc, #56]	; (8013874 <HAL_UART_Init+0x6c>)
 801383c:	400b      	ands	r3, r1
 801383e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013840:	6822      	ldr	r2, [r4, #0]
 8013842:	6893      	ldr	r3, [r2, #8]
 8013844:	212a      	movs	r1, #42	; 0x2a
 8013846:	438b      	bics	r3, r1
 8013848:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801384a:	6822      	ldr	r2, [r4, #0]
 801384c:	6813      	ldr	r3, [r2, #0]
 801384e:	3929      	subs	r1, #41	; 0x29
 8013850:	430b      	orrs	r3, r1
 8013852:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013854:	0020      	movs	r0, r4
 8013856:	f7ff ff9b 	bl	8013790 <UART_CheckIdleState>
}
 801385a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801385c:	3368      	adds	r3, #104	; 0x68
 801385e:	2200      	movs	r2, #0
 8013860:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013862:	f7fb f8d5 	bl	800ea10 <HAL_UART_MspInit>
 8013866:	e7d6      	b.n	8013816 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013868:	0020      	movs	r0, r4
 801386a:	f7ff fe4b 	bl	8013504 <UART_AdvFeatureConfig>
 801386e:	e7e2      	b.n	8013836 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013870:	2001      	movs	r0, #1
 8013872:	e7f2      	b.n	801385a <HAL_UART_Init+0x52>
 8013874:	ffffb7ff 	.word	0xffffb7ff

08013878 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013878:	2369      	movs	r3, #105	; 0x69
 801387a:	5cc3      	ldrb	r3, [r0, r3]
 801387c:	2b12      	cmp	r3, #18
 801387e:	d003      	beq.n	8013888 <UART_Transmit_IT+0x10>
 8013880:	2369      	movs	r3, #105	; 0x69
 8013882:	5cc3      	ldrb	r3, [r0, r3]
 8013884:	2b32      	cmp	r3, #50	; 0x32
 8013886:	d12d      	bne.n	80138e4 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013888:	2352      	movs	r3, #82	; 0x52
 801388a:	5ac3      	ldrh	r3, [r0, r3]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d010      	beq.n	80138b2 <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013890:	2380      	movs	r3, #128	; 0x80
 8013892:	015b      	lsls	r3, r3, #5
 8013894:	6882      	ldr	r2, [r0, #8]
 8013896:	429a      	cmp	r2, r3
 8013898:	d017      	beq.n	80138ca <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801389a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801389c:	1c5a      	adds	r2, r3, #1
 801389e:	64c2      	str	r2, [r0, #76]	; 0x4c
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	6802      	ldr	r2, [r0, #0]
 80138a4:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 80138a6:	2252      	movs	r2, #82	; 0x52
 80138a8:	5a83      	ldrh	r3, [r0, r2]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80138ae:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80138b0:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80138b2:	6802      	ldr	r2, [r0, #0]
 80138b4:	6813      	ldr	r3, [r2, #0]
 80138b6:	2180      	movs	r1, #128	; 0x80
 80138b8:	438b      	bics	r3, r1
 80138ba:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80138bc:	6802      	ldr	r2, [r0, #0]
 80138be:	6813      	ldr	r3, [r2, #0]
 80138c0:	3940      	subs	r1, #64	; 0x40
 80138c2:	430b      	orrs	r3, r1
 80138c4:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80138c6:	2000      	movs	r0, #0
 80138c8:	e7f2      	b.n	80138b0 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138ca:	6903      	ldr	r3, [r0, #16]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1e4      	bne.n	801389a <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80138d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	05db      	lsls	r3, r3, #23
 80138d6:	0ddb      	lsrs	r3, r3, #23
 80138d8:	6802      	ldr	r2, [r0, #0]
 80138da:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80138dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80138de:	3302      	adds	r3, #2
 80138e0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80138e2:	e7e0      	b.n	80138a6 <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 80138e4:	2002      	movs	r0, #2
 80138e6:	e7e3      	b.n	80138b0 <UART_Transmit_IT+0x38>

080138e8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80138e8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80138ea:	6802      	ldr	r2, [r0, #0]
 80138ec:	6813      	ldr	r3, [r2, #0]
 80138ee:	2140      	movs	r1, #64	; 0x40
 80138f0:	438b      	bics	r3, r1
 80138f2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80138f4:	2369      	movs	r3, #105	; 0x69
 80138f6:	5cc3      	ldrb	r3, [r0, r3]
 80138f8:	2b32      	cmp	r3, #50	; 0x32
 80138fa:	d00a      	beq.n	8013912 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80138fc:	6801      	ldr	r1, [r0, #0]
 80138fe:	688b      	ldr	r3, [r1, #8]
 8013900:	2201      	movs	r2, #1
 8013902:	4393      	bics	r3, r2
 8013904:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013906:	2369      	movs	r3, #105	; 0x69
 8013908:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 801390a:	f7fa fdb7 	bl	800e47c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801390e:	2000      	movs	r0, #0
 8013910:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013912:	3337      	adds	r3, #55	; 0x37
 8013914:	2222      	movs	r2, #34	; 0x22
 8013916:	54c2      	strb	r2, [r0, r3]
 8013918:	e7f7      	b.n	801390a <UART_EndTransmit_IT+0x22>
	...

0801391c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801391c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 801391e:	235c      	movs	r3, #92	; 0x5c
 8013920:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013922:	2269      	movs	r2, #105	; 0x69
 8013924:	5c82      	ldrb	r2, [r0, r2]
 8013926:	2a22      	cmp	r2, #34	; 0x22
 8013928:	d003      	beq.n	8013932 <UART_Receive_IT+0x16>
 801392a:	2269      	movs	r2, #105	; 0x69
 801392c:	5c82      	ldrb	r2, [r0, r2]
 801392e:	2a32      	cmp	r2, #50	; 0x32
 8013930:	d13c      	bne.n	80139ac <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013932:	2280      	movs	r2, #128	; 0x80
 8013934:	0152      	lsls	r2, r2, #5
 8013936:	6881      	ldr	r1, [r0, #8]
 8013938:	4291      	cmp	r1, r2
 801393a:	d027      	beq.n	801398c <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801393c:	6802      	ldr	r2, [r0, #0]
 801393e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013940:	b2db      	uxtb	r3, r3
 8013942:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8013944:	1c4c      	adds	r4, r1, #1
 8013946:	6544      	str	r4, [r0, #84]	; 0x54
 8013948:	4013      	ands	r3, r2
 801394a:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 801394c:	225a      	movs	r2, #90	; 0x5a
 801394e:	5a83      	ldrh	r3, [r0, r2]
 8013950:	3b01      	subs	r3, #1
 8013952:	b29b      	uxth	r3, r3
 8013954:	5283      	strh	r3, [r0, r2]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d12a      	bne.n	80139b0 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801395a:	6802      	ldr	r2, [r0, #0]
 801395c:	6813      	ldr	r3, [r2, #0]
 801395e:	2120      	movs	r1, #32
 8013960:	438b      	bics	r3, r1
 8013962:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013964:	2369      	movs	r3, #105	; 0x69
 8013966:	5cc3      	ldrb	r3, [r0, r3]
 8013968:	2b32      	cmp	r3, #50	; 0x32
 801396a:	d01b      	beq.n	80139a4 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801396c:	6802      	ldr	r2, [r0, #0]
 801396e:	6813      	ldr	r3, [r2, #0]
 8013970:	4910      	ldr	r1, [pc, #64]	; (80139b4 <UART_Receive_IT+0x98>)
 8013972:	400b      	ands	r3, r1
 8013974:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013976:	6801      	ldr	r1, [r0, #0]
 8013978:	688b      	ldr	r3, [r1, #8]
 801397a:	2201      	movs	r2, #1
 801397c:	4393      	bics	r3, r2
 801397e:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8013980:	2369      	movs	r3, #105	; 0x69
 8013982:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8013984:	f7fa fdb6 	bl	800e4f4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8013988:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801398a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801398c:	6902      	ldr	r2, [r0, #16]
 801398e:	2a00      	cmp	r2, #0
 8013990:	d1d4      	bne.n	801393c <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013992:	6802      	ldr	r2, [r0, #0]
 8013994:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013996:	4013      	ands	r3, r2
 8013998:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801399a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 801399c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801399e:	3302      	adds	r3, #2
 80139a0:	6543      	str	r3, [r0, #84]	; 0x54
 80139a2:	e7d3      	b.n	801394c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80139a4:	3337      	adds	r3, #55	; 0x37
 80139a6:	2212      	movs	r2, #18
 80139a8:	54c2      	strb	r2, [r0, r3]
 80139aa:	e7eb      	b.n	8013984 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80139ac:	2002      	movs	r0, #2
 80139ae:	e7ec      	b.n	801398a <UART_Receive_IT+0x6e>
    return HAL_OK;
 80139b0:	2000      	movs	r0, #0
 80139b2:	e7ea      	b.n	801398a <UART_Receive_IT+0x6e>
 80139b4:	fffffeff 	.word	0xfffffeff

080139b8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80139b8:	4770      	bx	lr

080139ba <HAL_UART_IRQHandler>:
{
 80139ba:	b510      	push	{r4, lr}
 80139bc:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80139be:	6803      	ldr	r3, [r0, #0]
 80139c0:	69da      	ldr	r2, [r3, #28]
 80139c2:	07d2      	lsls	r2, r2, #31
 80139c4:	d509      	bpl.n	80139da <HAL_UART_IRQHandler+0x20>
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	05d2      	lsls	r2, r2, #23
 80139ca:	d506      	bpl.n	80139da <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80139cc:	2201      	movs	r2, #1
 80139ce:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80139d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80139d2:	4313      	orrs	r3, r2
 80139d4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80139d6:	2369      	movs	r3, #105	; 0x69
 80139d8:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	69da      	ldr	r2, [r3, #28]
 80139de:	0792      	lsls	r2, r2, #30
 80139e0:	d50b      	bpl.n	80139fa <HAL_UART_IRQHandler+0x40>
 80139e2:	689a      	ldr	r2, [r3, #8]
 80139e4:	07d2      	lsls	r2, r2, #31
 80139e6:	d508      	bpl.n	80139fa <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80139e8:	2202      	movs	r2, #2
 80139ea:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80139ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80139ee:	3202      	adds	r2, #2
 80139f0:	4313      	orrs	r3, r2
 80139f2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80139f4:	2369      	movs	r3, #105	; 0x69
 80139f6:	3a03      	subs	r2, #3
 80139f8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80139fa:	6823      	ldr	r3, [r4, #0]
 80139fc:	69da      	ldr	r2, [r3, #28]
 80139fe:	0752      	lsls	r2, r2, #29
 8013a00:	d50b      	bpl.n	8013a1a <HAL_UART_IRQHandler+0x60>
 8013a02:	689a      	ldr	r2, [r3, #8]
 8013a04:	07d2      	lsls	r2, r2, #31
 8013a06:	d508      	bpl.n	8013a1a <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013a08:	2204      	movs	r2, #4
 8013a0a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a0e:	3a02      	subs	r2, #2
 8013a10:	4313      	orrs	r3, r2
 8013a12:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a14:	2369      	movs	r3, #105	; 0x69
 8013a16:	3a01      	subs	r2, #1
 8013a18:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	69da      	ldr	r2, [r3, #28]
 8013a1e:	0712      	lsls	r2, r2, #28
 8013a20:	d50a      	bpl.n	8013a38 <HAL_UART_IRQHandler+0x7e>
 8013a22:	689a      	ldr	r2, [r3, #8]
 8013a24:	07d2      	lsls	r2, r2, #31
 8013a26:	d507      	bpl.n	8013a38 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013a28:	2208      	movs	r2, #8
 8013a2a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013a2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a32:	2369      	movs	r3, #105	; 0x69
 8013a34:	3a07      	subs	r2, #7
 8013a36:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013a38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d11c      	bne.n	8013a78 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	69da      	ldr	r2, [r3, #28]
 8013a42:	02d2      	lsls	r2, r2, #11
 8013a44:	d502      	bpl.n	8013a4c <HAL_UART_IRQHandler+0x92>
 8013a46:	689a      	ldr	r2, [r3, #8]
 8013a48:	0252      	lsls	r2, r2, #9
 8013a4a:	d419      	bmi.n	8013a80 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013a4c:	6823      	ldr	r3, [r4, #0]
 8013a4e:	69da      	ldr	r2, [r3, #28]
 8013a50:	0692      	lsls	r2, r2, #26
 8013a52:	d502      	bpl.n	8013a5a <HAL_UART_IRQHandler+0xa0>
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	069b      	lsls	r3, r3, #26
 8013a58:	d41c      	bmi.n	8013a94 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013a5a:	6823      	ldr	r3, [r4, #0]
 8013a5c:	69da      	ldr	r2, [r3, #28]
 8013a5e:	0612      	lsls	r2, r2, #24
 8013a60:	d502      	bpl.n	8013a68 <HAL_UART_IRQHandler+0xae>
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	061b      	lsls	r3, r3, #24
 8013a66:	d41e      	bmi.n	8013aa6 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013a68:	6823      	ldr	r3, [r4, #0]
 8013a6a:	69da      	ldr	r2, [r3, #28]
 8013a6c:	0652      	lsls	r2, r2, #25
 8013a6e:	d502      	bpl.n	8013a76 <HAL_UART_IRQHandler+0xbc>
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	065b      	lsls	r3, r3, #25
 8013a74:	d41b      	bmi.n	8013aae <HAL_UART_IRQHandler+0xf4>
}
 8013a76:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013a78:	0020      	movs	r0, r4
 8013a7a:	f7fa fd17 	bl	800e4ac <HAL_UART_ErrorCallback>
 8013a7e:	e7de      	b.n	8013a3e <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013a80:	2280      	movs	r2, #128	; 0x80
 8013a82:	0352      	lsls	r2, r2, #13
 8013a84:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013a86:	2369      	movs	r3, #105	; 0x69
 8013a88:	2201      	movs	r2, #1
 8013a8a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013a8c:	0020      	movs	r0, r4
 8013a8e:	f7ff ff93 	bl	80139b8 <HAL_UARTEx_WakeupCallback>
 8013a92:	e7db      	b.n	8013a4c <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013a94:	0020      	movs	r0, r4
 8013a96:	f7ff ff41 	bl	801391c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a9a:	6822      	ldr	r2, [r4, #0]
 8013a9c:	6993      	ldr	r3, [r2, #24]
 8013a9e:	2108      	movs	r1, #8
 8013aa0:	430b      	orrs	r3, r1
 8013aa2:	6193      	str	r3, [r2, #24]
 8013aa4:	e7d9      	b.n	8013a5a <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013aa6:	0020      	movs	r0, r4
 8013aa8:	f7ff fee6 	bl	8013878 <UART_Transmit_IT>
 8013aac:	e7dc      	b.n	8013a68 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013aae:	0020      	movs	r0, r4
 8013ab0:	f7ff ff1a 	bl	80138e8 <UART_EndTransmit_IT>
}
 8013ab4:	e7df      	b.n	8013a76 <HAL_UART_IRQHandler+0xbc>

08013ab6 <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8013ab6:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013ab8:	f7fd fa64 	bl	8010f84 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8013abc:	f7f7 fad6 	bl	800b06c <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 8013ac0:	f7f0 f90c 	bl	8003cdc <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013ac4:	f7f4 fa62 	bl	8007f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013ac8:	f7fb f9f9 	bl	800eebe <osKernelStart>
 8013acc:	e7fe      	b.n	8013acc <main+0x16>

08013ace <UserTask>:

/*-----------------------------------------------------------*/

/* UserTask function */
void UserTask(void * argument)
{
 8013ace:	e7fe      	b.n	8013ace <UserTask>

08013ad0 <atof>:
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	f001 fb3e 	bl	8015154 <strtod>
 8013ad8:	bd10      	pop	{r4, pc}

08013ada <atoi>:
 8013ada:	b510      	push	{r4, lr}
 8013adc:	220a      	movs	r2, #10
 8013ade:	2100      	movs	r1, #0
 8013ae0:	f001 fc04 	bl	80152ec <strtol>
 8013ae4:	bd10      	pop	{r4, pc}

08013ae6 <atol>:
 8013ae6:	b510      	push	{r4, lr}
 8013ae8:	220a      	movs	r2, #10
 8013aea:	2100      	movs	r1, #0
 8013aec:	f001 fbfe 	bl	80152ec <strtol>
 8013af0:	bd10      	pop	{r4, pc}
	...

08013af4 <__libc_init_array>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	2600      	movs	r6, #0
 8013af8:	4d0c      	ldr	r5, [pc, #48]	; (8013b2c <__libc_init_array+0x38>)
 8013afa:	4c0d      	ldr	r4, [pc, #52]	; (8013b30 <__libc_init_array+0x3c>)
 8013afc:	1b64      	subs	r4, r4, r5
 8013afe:	10a4      	asrs	r4, r4, #2
 8013b00:	42a6      	cmp	r6, r4
 8013b02:	d109      	bne.n	8013b18 <__libc_init_array+0x24>
 8013b04:	2600      	movs	r6, #0
 8013b06:	f004 fe6d 	bl	80187e4 <_init>
 8013b0a:	4d0a      	ldr	r5, [pc, #40]	; (8013b34 <__libc_init_array+0x40>)
 8013b0c:	4c0a      	ldr	r4, [pc, #40]	; (8013b38 <__libc_init_array+0x44>)
 8013b0e:	1b64      	subs	r4, r4, r5
 8013b10:	10a4      	asrs	r4, r4, #2
 8013b12:	42a6      	cmp	r6, r4
 8013b14:	d105      	bne.n	8013b22 <__libc_init_array+0x2e>
 8013b16:	bd70      	pop	{r4, r5, r6, pc}
 8013b18:	00b3      	lsls	r3, r6, #2
 8013b1a:	58eb      	ldr	r3, [r5, r3]
 8013b1c:	4798      	blx	r3
 8013b1e:	3601      	adds	r6, #1
 8013b20:	e7ee      	b.n	8013b00 <__libc_init_array+0xc>
 8013b22:	00b3      	lsls	r3, r6, #2
 8013b24:	58eb      	ldr	r3, [r5, r3]
 8013b26:	4798      	blx	r3
 8013b28:	3601      	adds	r6, #1
 8013b2a:	e7f2      	b.n	8013b12 <__libc_init_array+0x1e>
 8013b2c:	0801be5c 	.word	0x0801be5c
 8013b30:	0801be5c 	.word	0x0801be5c
 8013b34:	0801be5c 	.word	0x0801be5c
 8013b38:	0801be64 	.word	0x0801be64

08013b3c <__locale_ctype_ptr_l>:
 8013b3c:	30ec      	adds	r0, #236	; 0xec
 8013b3e:	6800      	ldr	r0, [r0, #0]
 8013b40:	4770      	bx	lr
	...

08013b44 <__locale_ctype_ptr>:
 8013b44:	4b04      	ldr	r3, [pc, #16]	; (8013b58 <__locale_ctype_ptr+0x14>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d100      	bne.n	8013b50 <__locale_ctype_ptr+0xc>
 8013b4e:	4b03      	ldr	r3, [pc, #12]	; (8013b5c <__locale_ctype_ptr+0x18>)
 8013b50:	33ec      	adds	r3, #236	; 0xec
 8013b52:	6818      	ldr	r0, [r3, #0]
 8013b54:	4770      	bx	lr
 8013b56:	46c0      	nop			; (mov r8, r8)
 8013b58:	20000128 	.word	0x20000128
 8013b5c:	20000558 	.word	0x20000558

08013b60 <malloc>:
 8013b60:	b510      	push	{r4, lr}
 8013b62:	4b03      	ldr	r3, [pc, #12]	; (8013b70 <malloc+0x10>)
 8013b64:	0001      	movs	r1, r0
 8013b66:	6818      	ldr	r0, [r3, #0]
 8013b68:	f000 f80e 	bl	8013b88 <_malloc_r>
 8013b6c:	bd10      	pop	{r4, pc}
 8013b6e:	46c0      	nop			; (mov r8, r8)
 8013b70:	20000128 	.word	0x20000128

08013b74 <free>:
 8013b74:	b510      	push	{r4, lr}
 8013b76:	4b03      	ldr	r3, [pc, #12]	; (8013b84 <free+0x10>)
 8013b78:	0001      	movs	r1, r0
 8013b7a:	6818      	ldr	r0, [r3, #0]
 8013b7c:	f003 fd10 	bl	80175a0 <_free_r>
 8013b80:	bd10      	pop	{r4, pc}
 8013b82:	46c0      	nop			; (mov r8, r8)
 8013b84:	20000128 	.word	0x20000128

08013b88 <_malloc_r>:
 8013b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b8a:	000d      	movs	r5, r1
 8013b8c:	b085      	sub	sp, #20
 8013b8e:	350b      	adds	r5, #11
 8013b90:	9001      	str	r0, [sp, #4]
 8013b92:	2d16      	cmp	r5, #22
 8013b94:	d908      	bls.n	8013ba8 <_malloc_r+0x20>
 8013b96:	2307      	movs	r3, #7
 8013b98:	439d      	bics	r5, r3
 8013b9a:	d506      	bpl.n	8013baa <_malloc_r+0x22>
 8013b9c:	230c      	movs	r3, #12
 8013b9e:	9a01      	ldr	r2, [sp, #4]
 8013ba0:	6013      	str	r3, [r2, #0]
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	b005      	add	sp, #20
 8013ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ba8:	2510      	movs	r5, #16
 8013baa:	428d      	cmp	r5, r1
 8013bac:	d3f6      	bcc.n	8013b9c <_malloc_r+0x14>
 8013bae:	9801      	ldr	r0, [sp, #4]
 8013bb0:	f000 fa34 	bl	801401c <__malloc_lock>
 8013bb4:	23f8      	movs	r3, #248	; 0xf8
 8013bb6:	33ff      	adds	r3, #255	; 0xff
 8013bb8:	4ac4      	ldr	r2, [pc, #784]	; (8013ecc <_malloc_r+0x344>)
 8013bba:	429d      	cmp	r5, r3
 8013bbc:	d820      	bhi.n	8013c00 <_malloc_r+0x78>
 8013bbe:	0029      	movs	r1, r5
 8013bc0:	3108      	adds	r1, #8
 8013bc2:	1851      	adds	r1, r2, r1
 8013bc4:	0008      	movs	r0, r1
 8013bc6:	684c      	ldr	r4, [r1, #4]
 8013bc8:	3808      	subs	r0, #8
 8013bca:	08eb      	lsrs	r3, r5, #3
 8013bcc:	4284      	cmp	r4, r0
 8013bce:	d104      	bne.n	8013bda <_malloc_r+0x52>
 8013bd0:	68cc      	ldr	r4, [r1, #12]
 8013bd2:	3302      	adds	r3, #2
 8013bd4:	469c      	mov	ip, r3
 8013bd6:	42a1      	cmp	r1, r4
 8013bd8:	d02a      	beq.n	8013c30 <_malloc_r+0xa8>
 8013bda:	2303      	movs	r3, #3
 8013bdc:	6862      	ldr	r2, [r4, #4]
 8013bde:	68a1      	ldr	r1, [r4, #8]
 8013be0:	439a      	bics	r2, r3
 8013be2:	0013      	movs	r3, r2
 8013be4:	68e2      	ldr	r2, [r4, #12]
 8013be6:	18e3      	adds	r3, r4, r3
 8013be8:	60ca      	str	r2, [r1, #12]
 8013bea:	6091      	str	r1, [r2, #8]
 8013bec:	2201      	movs	r2, #1
 8013bee:	6859      	ldr	r1, [r3, #4]
 8013bf0:	430a      	orrs	r2, r1
 8013bf2:	605a      	str	r2, [r3, #4]
 8013bf4:	9801      	ldr	r0, [sp, #4]
 8013bf6:	f000 fa19 	bl	801402c <__malloc_unlock>
 8013bfa:	0020      	movs	r0, r4
 8013bfc:	3008      	adds	r0, #8
 8013bfe:	e7d1      	b.n	8013ba4 <_malloc_r+0x1c>
 8013c00:	0a69      	lsrs	r1, r5, #9
 8013c02:	233f      	movs	r3, #63	; 0x3f
 8013c04:	2900      	cmp	r1, #0
 8013c06:	d003      	beq.n	8013c10 <_malloc_r+0x88>
 8013c08:	2904      	cmp	r1, #4
 8013c0a:	d828      	bhi.n	8013c5e <_malloc_r+0xd6>
 8013c0c:	09ab      	lsrs	r3, r5, #6
 8013c0e:	3338      	adds	r3, #56	; 0x38
 8013c10:	2103      	movs	r1, #3
 8013c12:	468c      	mov	ip, r1
 8013c14:	00d8      	lsls	r0, r3, #3
 8013c16:	1880      	adds	r0, r0, r2
 8013c18:	68c4      	ldr	r4, [r0, #12]
 8013c1a:	4284      	cmp	r4, r0
 8013c1c:	d006      	beq.n	8013c2c <_malloc_r+0xa4>
 8013c1e:	4666      	mov	r6, ip
 8013c20:	6861      	ldr	r1, [r4, #4]
 8013c22:	43b1      	bics	r1, r6
 8013c24:	1b4f      	subs	r7, r1, r5
 8013c26:	2f0f      	cmp	r7, #15
 8013c28:	dd31      	ble.n	8013c8e <_malloc_r+0x106>
 8013c2a:	3b01      	subs	r3, #1
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	469c      	mov	ip, r3
 8013c30:	6914      	ldr	r4, [r2, #16]
 8013c32:	49a7      	ldr	r1, [pc, #668]	; (8013ed0 <_malloc_r+0x348>)
 8013c34:	428c      	cmp	r4, r1
 8013c36:	d055      	beq.n	8013ce4 <_malloc_r+0x15c>
 8013c38:	2303      	movs	r3, #3
 8013c3a:	6860      	ldr	r0, [r4, #4]
 8013c3c:	4398      	bics	r0, r3
 8013c3e:	0003      	movs	r3, r0
 8013c40:	1b46      	subs	r6, r0, r5
 8013c42:	2e0f      	cmp	r6, #15
 8013c44:	dd31      	ble.n	8013caa <_malloc_r+0x122>
 8013c46:	2701      	movs	r7, #1
 8013c48:	1960      	adds	r0, r4, r5
 8013c4a:	433d      	orrs	r5, r7
 8013c4c:	4337      	orrs	r7, r6
 8013c4e:	6065      	str	r5, [r4, #4]
 8013c50:	6150      	str	r0, [r2, #20]
 8013c52:	6110      	str	r0, [r2, #16]
 8013c54:	60c1      	str	r1, [r0, #12]
 8013c56:	6081      	str	r1, [r0, #8]
 8013c58:	6047      	str	r7, [r0, #4]
 8013c5a:	50e6      	str	r6, [r4, r3]
 8013c5c:	e7ca      	b.n	8013bf4 <_malloc_r+0x6c>
 8013c5e:	2914      	cmp	r1, #20
 8013c60:	d802      	bhi.n	8013c68 <_malloc_r+0xe0>
 8013c62:	000b      	movs	r3, r1
 8013c64:	335b      	adds	r3, #91	; 0x5b
 8013c66:	e7d3      	b.n	8013c10 <_malloc_r+0x88>
 8013c68:	2954      	cmp	r1, #84	; 0x54
 8013c6a:	d802      	bhi.n	8013c72 <_malloc_r+0xea>
 8013c6c:	0b2b      	lsrs	r3, r5, #12
 8013c6e:	336e      	adds	r3, #110	; 0x6e
 8013c70:	e7ce      	b.n	8013c10 <_malloc_r+0x88>
 8013c72:	23aa      	movs	r3, #170	; 0xaa
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	4299      	cmp	r1, r3
 8013c78:	d802      	bhi.n	8013c80 <_malloc_r+0xf8>
 8013c7a:	0beb      	lsrs	r3, r5, #15
 8013c7c:	3377      	adds	r3, #119	; 0x77
 8013c7e:	e7c7      	b.n	8013c10 <_malloc_r+0x88>
 8013c80:	4894      	ldr	r0, [pc, #592]	; (8013ed4 <_malloc_r+0x34c>)
 8013c82:	237e      	movs	r3, #126	; 0x7e
 8013c84:	4281      	cmp	r1, r0
 8013c86:	d8c3      	bhi.n	8013c10 <_malloc_r+0x88>
 8013c88:	0cab      	lsrs	r3, r5, #18
 8013c8a:	337c      	adds	r3, #124	; 0x7c
 8013c8c:	e7c0      	b.n	8013c10 <_malloc_r+0x88>
 8013c8e:	68e6      	ldr	r6, [r4, #12]
 8013c90:	2f00      	cmp	r7, #0
 8013c92:	db08      	blt.n	8013ca6 <_malloc_r+0x11e>
 8013c94:	68a3      	ldr	r3, [r4, #8]
 8013c96:	1861      	adds	r1, r4, r1
 8013c98:	60de      	str	r6, [r3, #12]
 8013c9a:	60b3      	str	r3, [r6, #8]
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	684a      	ldr	r2, [r1, #4]
 8013ca0:	4313      	orrs	r3, r2
 8013ca2:	604b      	str	r3, [r1, #4]
 8013ca4:	e7a6      	b.n	8013bf4 <_malloc_r+0x6c>
 8013ca6:	0034      	movs	r4, r6
 8013ca8:	e7b7      	b.n	8013c1a <_malloc_r+0x92>
 8013caa:	6151      	str	r1, [r2, #20]
 8013cac:	6111      	str	r1, [r2, #16]
 8013cae:	2e00      	cmp	r6, #0
 8013cb0:	db05      	blt.n	8013cbe <_malloc_r+0x136>
 8013cb2:	2101      	movs	r1, #1
 8013cb4:	1823      	adds	r3, r4, r0
 8013cb6:	685a      	ldr	r2, [r3, #4]
 8013cb8:	4311      	orrs	r1, r2
 8013cba:	6059      	str	r1, [r3, #4]
 8013cbc:	e79a      	b.n	8013bf4 <_malloc_r+0x6c>
 8013cbe:	4986      	ldr	r1, [pc, #536]	; (8013ed8 <_malloc_r+0x350>)
 8013cc0:	6857      	ldr	r7, [r2, #4]
 8013cc2:	4288      	cmp	r0, r1
 8013cc4:	d900      	bls.n	8013cc8 <_malloc_r+0x140>
 8013cc6:	e090      	b.n	8013dea <_malloc_r+0x262>
 8013cc8:	08c3      	lsrs	r3, r0, #3
 8013cca:	39ff      	subs	r1, #255	; 0xff
 8013ccc:	1098      	asrs	r0, r3, #2
 8013cce:	39ff      	subs	r1, #255	; 0xff
 8013cd0:	4081      	lsls	r1, r0
 8013cd2:	00db      	lsls	r3, r3, #3
 8013cd4:	4339      	orrs	r1, r7
 8013cd6:	6051      	str	r1, [r2, #4]
 8013cd8:	189a      	adds	r2, r3, r2
 8013cda:	6893      	ldr	r3, [r2, #8]
 8013cdc:	60e2      	str	r2, [r4, #12]
 8013cde:	60a3      	str	r3, [r4, #8]
 8013ce0:	6094      	str	r4, [r2, #8]
 8013ce2:	60dc      	str	r4, [r3, #12]
 8013ce4:	4663      	mov	r3, ip
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	4978      	ldr	r1, [pc, #480]	; (8013ecc <_malloc_r+0x344>)
 8013cea:	109b      	asrs	r3, r3, #2
 8013cec:	6848      	ldr	r0, [r1, #4]
 8013cee:	409a      	lsls	r2, r3
 8013cf0:	4290      	cmp	r0, r2
 8013cf2:	d32d      	bcc.n	8013d50 <_malloc_r+0x1c8>
 8013cf4:	4202      	tst	r2, r0
 8013cf6:	d109      	bne.n	8013d0c <_malloc_r+0x184>
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	4664      	mov	r4, ip
 8013cfc:	439c      	bics	r4, r3
 8013cfe:	0023      	movs	r3, r4
 8013d00:	3304      	adds	r3, #4
 8013d02:	469c      	mov	ip, r3
 8013d04:	0052      	lsls	r2, r2, #1
 8013d06:	4202      	tst	r2, r0
 8013d08:	d100      	bne.n	8013d0c <_malloc_r+0x184>
 8013d0a:	e0a4      	b.n	8013e56 <_malloc_r+0x2ce>
 8013d0c:	4663      	mov	r3, ip
 8013d0e:	00db      	lsls	r3, r3, #3
 8013d10:	18cb      	adds	r3, r1, r3
 8013d12:	9303      	str	r3, [sp, #12]
 8013d14:	001f      	movs	r7, r3
 8013d16:	4663      	mov	r3, ip
 8013d18:	9302      	str	r3, [sp, #8]
 8013d1a:	68fc      	ldr	r4, [r7, #12]
 8013d1c:	42bc      	cmp	r4, r7
 8013d1e:	d000      	beq.n	8013d22 <_malloc_r+0x19a>
 8013d20:	e09c      	b.n	8013e5c <_malloc_r+0x2d4>
 8013d22:	2003      	movs	r0, #3
 8013d24:	9b02      	ldr	r3, [sp, #8]
 8013d26:	3708      	adds	r7, #8
 8013d28:	3301      	adds	r3, #1
 8013d2a:	9302      	str	r3, [sp, #8]
 8013d2c:	4203      	tst	r3, r0
 8013d2e:	d1f4      	bne.n	8013d1a <_malloc_r+0x192>
 8013d30:	4663      	mov	r3, ip
 8013d32:	2003      	movs	r0, #3
 8013d34:	4203      	tst	r3, r0
 8013d36:	d000      	beq.n	8013d3a <_malloc_r+0x1b2>
 8013d38:	e0b3      	b.n	8013ea2 <_malloc_r+0x31a>
 8013d3a:	684b      	ldr	r3, [r1, #4]
 8013d3c:	4393      	bics	r3, r2
 8013d3e:	604b      	str	r3, [r1, #4]
 8013d40:	4b62      	ldr	r3, [pc, #392]	; (8013ecc <_malloc_r+0x344>)
 8013d42:	0052      	lsls	r2, r2, #1
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d302      	bcc.n	8013d50 <_malloc_r+0x1c8>
 8013d4a:	2a00      	cmp	r2, #0
 8013d4c:	d000      	beq.n	8013d50 <_malloc_r+0x1c8>
 8013d4e:	e0b9      	b.n	8013ec4 <_malloc_r+0x33c>
 8013d50:	2303      	movs	r3, #3
 8013d52:	688f      	ldr	r7, [r1, #8]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	439a      	bics	r2, r3
 8013d58:	9202      	str	r2, [sp, #8]
 8013d5a:	42aa      	cmp	r2, r5
 8013d5c:	d303      	bcc.n	8013d66 <_malloc_r+0x1de>
 8013d5e:	1b52      	subs	r2, r2, r5
 8013d60:	2a0f      	cmp	r2, #15
 8013d62:	dd00      	ble.n	8013d66 <_malloc_r+0x1de>
 8013d64:	e116      	b.n	8013f94 <_malloc_r+0x40c>
 8013d66:	4b5d      	ldr	r3, [pc, #372]	; (8013edc <_malloc_r+0x354>)
 8013d68:	2008      	movs	r0, #8
 8013d6a:	681e      	ldr	r6, [r3, #0]
 8013d6c:	f002 fd26 	bl	80167bc <sysconf>
 8013d70:	4b5b      	ldr	r3, [pc, #364]	; (8013ee0 <_malloc_r+0x358>)
 8013d72:	3610      	adds	r6, #16
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	1976      	adds	r6, r6, r5
 8013d78:	9003      	str	r0, [sp, #12]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	d003      	beq.n	8013d86 <_malloc_r+0x1fe>
 8013d7e:	3e01      	subs	r6, #1
 8013d80:	1836      	adds	r6, r6, r0
 8013d82:	4243      	negs	r3, r0
 8013d84:	401e      	ands	r6, r3
 8013d86:	0031      	movs	r1, r6
 8013d88:	9801      	ldr	r0, [sp, #4]
 8013d8a:	f000 fb27 	bl	80143dc <_sbrk_r>
 8013d8e:	0004      	movs	r4, r0
 8013d90:	1c43      	adds	r3, r0, #1
 8013d92:	d100      	bne.n	8013d96 <_malloc_r+0x20e>
 8013d94:	e0d6      	b.n	8013f44 <_malloc_r+0x3bc>
 8013d96:	9b02      	ldr	r3, [sp, #8]
 8013d98:	18fb      	adds	r3, r7, r3
 8013d9a:	4283      	cmp	r3, r0
 8013d9c:	d903      	bls.n	8013da6 <_malloc_r+0x21e>
 8013d9e:	4a4b      	ldr	r2, [pc, #300]	; (8013ecc <_malloc_r+0x344>)
 8013da0:	4297      	cmp	r7, r2
 8013da2:	d000      	beq.n	8013da6 <_malloc_r+0x21e>
 8013da4:	e0ce      	b.n	8013f44 <_malloc_r+0x3bc>
 8013da6:	494f      	ldr	r1, [pc, #316]	; (8013ee4 <_malloc_r+0x35c>)
 8013da8:	680a      	ldr	r2, [r1, #0]
 8013daa:	18b2      	adds	r2, r6, r2
 8013dac:	600a      	str	r2, [r1, #0]
 8013dae:	9903      	ldr	r1, [sp, #12]
 8013db0:	4694      	mov	ip, r2
 8013db2:	1e48      	subs	r0, r1, #1
 8013db4:	42a3      	cmp	r3, r4
 8013db6:	d000      	beq.n	8013dba <_malloc_r+0x232>
 8013db8:	e09a      	b.n	8013ef0 <_malloc_r+0x368>
 8013dba:	4203      	tst	r3, r0
 8013dbc:	d000      	beq.n	8013dc0 <_malloc_r+0x238>
 8013dbe:	e097      	b.n	8013ef0 <_malloc_r+0x368>
 8013dc0:	9a02      	ldr	r2, [sp, #8]
 8013dc2:	4b42      	ldr	r3, [pc, #264]	; (8013ecc <_malloc_r+0x344>)
 8013dc4:	1992      	adds	r2, r2, r6
 8013dc6:	2601      	movs	r6, #1
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	4316      	orrs	r6, r2
 8013dcc:	605e      	str	r6, [r3, #4]
 8013dce:	4b45      	ldr	r3, [pc, #276]	; (8013ee4 <_malloc_r+0x35c>)
 8013dd0:	4a45      	ldr	r2, [pc, #276]	; (8013ee8 <_malloc_r+0x360>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	6811      	ldr	r1, [r2, #0]
 8013dd6:	428b      	cmp	r3, r1
 8013dd8:	d900      	bls.n	8013ddc <_malloc_r+0x254>
 8013dda:	6013      	str	r3, [r2, #0]
 8013ddc:	4a43      	ldr	r2, [pc, #268]	; (8013eec <_malloc_r+0x364>)
 8013dde:	6811      	ldr	r1, [r2, #0]
 8013de0:	428b      	cmp	r3, r1
 8013de2:	d800      	bhi.n	8013de6 <_malloc_r+0x25e>
 8013de4:	e0ae      	b.n	8013f44 <_malloc_r+0x3bc>
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	e0ac      	b.n	8013f44 <_malloc_r+0x3bc>
 8013dea:	0a40      	lsrs	r0, r0, #9
 8013dec:	2804      	cmp	r0, #4
 8013dee:	d810      	bhi.n	8013e12 <_malloc_r+0x28a>
 8013df0:	0999      	lsrs	r1, r3, #6
 8013df2:	3138      	adds	r1, #56	; 0x38
 8013df4:	00ce      	lsls	r6, r1, #3
 8013df6:	18b6      	adds	r6, r6, r2
 8013df8:	68b0      	ldr	r0, [r6, #8]
 8013dfa:	4286      	cmp	r6, r0
 8013dfc:	d124      	bne.n	8013e48 <_malloc_r+0x2c0>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	1089      	asrs	r1, r1, #2
 8013e02:	408b      	lsls	r3, r1
 8013e04:	433b      	orrs	r3, r7
 8013e06:	6053      	str	r3, [r2, #4]
 8013e08:	60e6      	str	r6, [r4, #12]
 8013e0a:	60a0      	str	r0, [r4, #8]
 8013e0c:	60b4      	str	r4, [r6, #8]
 8013e0e:	60c4      	str	r4, [r0, #12]
 8013e10:	e768      	b.n	8013ce4 <_malloc_r+0x15c>
 8013e12:	2814      	cmp	r0, #20
 8013e14:	d802      	bhi.n	8013e1c <_malloc_r+0x294>
 8013e16:	0001      	movs	r1, r0
 8013e18:	315b      	adds	r1, #91	; 0x5b
 8013e1a:	e7eb      	b.n	8013df4 <_malloc_r+0x26c>
 8013e1c:	2854      	cmp	r0, #84	; 0x54
 8013e1e:	d802      	bhi.n	8013e26 <_malloc_r+0x29e>
 8013e20:	0b19      	lsrs	r1, r3, #12
 8013e22:	316e      	adds	r1, #110	; 0x6e
 8013e24:	e7e6      	b.n	8013df4 <_malloc_r+0x26c>
 8013e26:	21aa      	movs	r1, #170	; 0xaa
 8013e28:	0049      	lsls	r1, r1, #1
 8013e2a:	4288      	cmp	r0, r1
 8013e2c:	d802      	bhi.n	8013e34 <_malloc_r+0x2ac>
 8013e2e:	0bd9      	lsrs	r1, r3, #15
 8013e30:	3177      	adds	r1, #119	; 0x77
 8013e32:	e7df      	b.n	8013df4 <_malloc_r+0x26c>
 8013e34:	4e27      	ldr	r6, [pc, #156]	; (8013ed4 <_malloc_r+0x34c>)
 8013e36:	217e      	movs	r1, #126	; 0x7e
 8013e38:	42b0      	cmp	r0, r6
 8013e3a:	d8db      	bhi.n	8013df4 <_malloc_r+0x26c>
 8013e3c:	0c99      	lsrs	r1, r3, #18
 8013e3e:	317c      	adds	r1, #124	; 0x7c
 8013e40:	e7d8      	b.n	8013df4 <_malloc_r+0x26c>
 8013e42:	6880      	ldr	r0, [r0, #8]
 8013e44:	4286      	cmp	r6, r0
 8013e46:	d004      	beq.n	8013e52 <_malloc_r+0x2ca>
 8013e48:	2103      	movs	r1, #3
 8013e4a:	6842      	ldr	r2, [r0, #4]
 8013e4c:	438a      	bics	r2, r1
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d8f7      	bhi.n	8013e42 <_malloc_r+0x2ba>
 8013e52:	68c6      	ldr	r6, [r0, #12]
 8013e54:	e7d8      	b.n	8013e08 <_malloc_r+0x280>
 8013e56:	2304      	movs	r3, #4
 8013e58:	449c      	add	ip, r3
 8013e5a:	e753      	b.n	8013d04 <_malloc_r+0x17c>
 8013e5c:	2003      	movs	r0, #3
 8013e5e:	6863      	ldr	r3, [r4, #4]
 8013e60:	4383      	bics	r3, r0
 8013e62:	1b5e      	subs	r6, r3, r5
 8013e64:	68e0      	ldr	r0, [r4, #12]
 8013e66:	2e0f      	cmp	r6, #15
 8013e68:	dd0e      	ble.n	8013e88 <_malloc_r+0x300>
 8013e6a:	2701      	movs	r7, #1
 8013e6c:	1962      	adds	r2, r4, r5
 8013e6e:	433d      	orrs	r5, r7
 8013e70:	6065      	str	r5, [r4, #4]
 8013e72:	68a5      	ldr	r5, [r4, #8]
 8013e74:	4337      	orrs	r7, r6
 8013e76:	60e8      	str	r0, [r5, #12]
 8013e78:	6085      	str	r5, [r0, #8]
 8013e7a:	614a      	str	r2, [r1, #20]
 8013e7c:	610a      	str	r2, [r1, #16]
 8013e7e:	4914      	ldr	r1, [pc, #80]	; (8013ed0 <_malloc_r+0x348>)
 8013e80:	6057      	str	r7, [r2, #4]
 8013e82:	60d1      	str	r1, [r2, #12]
 8013e84:	6091      	str	r1, [r2, #8]
 8013e86:	e6e8      	b.n	8013c5a <_malloc_r+0xd2>
 8013e88:	2e00      	cmp	r6, #0
 8013e8a:	db08      	blt.n	8013e9e <_malloc_r+0x316>
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	18e3      	adds	r3, r4, r3
 8013e90:	6859      	ldr	r1, [r3, #4]
 8013e92:	430a      	orrs	r2, r1
 8013e94:	605a      	str	r2, [r3, #4]
 8013e96:	68a3      	ldr	r3, [r4, #8]
 8013e98:	60d8      	str	r0, [r3, #12]
 8013e9a:	6083      	str	r3, [r0, #8]
 8013e9c:	e6aa      	b.n	8013bf4 <_malloc_r+0x6c>
 8013e9e:	0004      	movs	r4, r0
 8013ea0:	e73c      	b.n	8013d1c <_malloc_r+0x194>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	425b      	negs	r3, r3
 8013ea6:	449c      	add	ip, r3
 8013ea8:	9b03      	ldr	r3, [sp, #12]
 8013eaa:	6818      	ldr	r0, [r3, #0]
 8013eac:	3b08      	subs	r3, #8
 8013eae:	9003      	str	r0, [sp, #12]
 8013eb0:	4298      	cmp	r0, r3
 8013eb2:	d100      	bne.n	8013eb6 <_malloc_r+0x32e>
 8013eb4:	e73c      	b.n	8013d30 <_malloc_r+0x1a8>
 8013eb6:	e743      	b.n	8013d40 <_malloc_r+0x1b8>
 8013eb8:	2004      	movs	r0, #4
 8013eba:	0052      	lsls	r2, r2, #1
 8013ebc:	4484      	add	ip, r0
 8013ebe:	421a      	tst	r2, r3
 8013ec0:	d0fa      	beq.n	8013eb8 <_malloc_r+0x330>
 8013ec2:	e723      	b.n	8013d0c <_malloc_r+0x184>
 8013ec4:	9802      	ldr	r0, [sp, #8]
 8013ec6:	4684      	mov	ip, r0
 8013ec8:	e7f9      	b.n	8013ebe <_malloc_r+0x336>
 8013eca:	46c0      	nop			; (mov r8, r8)
 8013ecc:	200006c4 	.word	0x200006c4
 8013ed0:	200006cc 	.word	0x200006cc
 8013ed4:	00000554 	.word	0x00000554
 8013ed8:	000001ff 	.word	0x000001ff
 8013edc:	20006950 	.word	0x20006950
 8013ee0:	20000acc 	.word	0x20000acc
 8013ee4:	20006920 	.word	0x20006920
 8013ee8:	20006948 	.word	0x20006948
 8013eec:	2000694c 	.word	0x2000694c
 8013ef0:	492e      	ldr	r1, [pc, #184]	; (8013fac <_malloc_r+0x424>)
 8013ef2:	680a      	ldr	r2, [r1, #0]
 8013ef4:	3201      	adds	r2, #1
 8013ef6:	d133      	bne.n	8013f60 <_malloc_r+0x3d8>
 8013ef8:	600c      	str	r4, [r1, #0]
 8013efa:	2307      	movs	r3, #7
 8013efc:	4023      	ands	r3, r4
 8013efe:	d002      	beq.n	8013f06 <_malloc_r+0x37e>
 8013f00:	2208      	movs	r2, #8
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	18e4      	adds	r4, r4, r3
 8013f06:	9a03      	ldr	r2, [sp, #12]
 8013f08:	19a6      	adds	r6, r4, r6
 8013f0a:	18d3      	adds	r3, r2, r3
 8013f0c:	4006      	ands	r6, r0
 8013f0e:	1b9e      	subs	r6, r3, r6
 8013f10:	0031      	movs	r1, r6
 8013f12:	9801      	ldr	r0, [sp, #4]
 8013f14:	f000 fa62 	bl	80143dc <_sbrk_r>
 8013f18:	1c43      	adds	r3, r0, #1
 8013f1a:	d101      	bne.n	8013f20 <_malloc_r+0x398>
 8013f1c:	0020      	movs	r0, r4
 8013f1e:	2600      	movs	r6, #0
 8013f20:	4a23      	ldr	r2, [pc, #140]	; (8013fb0 <_malloc_r+0x428>)
 8013f22:	1b00      	subs	r0, r0, r4
 8013f24:	6813      	ldr	r3, [r2, #0]
 8013f26:	199b      	adds	r3, r3, r6
 8013f28:	6013      	str	r3, [r2, #0]
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	4a21      	ldr	r2, [pc, #132]	; (8013fb4 <_malloc_r+0x42c>)
 8013f2e:	1986      	adds	r6, r0, r6
 8013f30:	431e      	orrs	r6, r3
 8013f32:	6094      	str	r4, [r2, #8]
 8013f34:	6066      	str	r6, [r4, #4]
 8013f36:	4297      	cmp	r7, r2
 8013f38:	d100      	bne.n	8013f3c <_malloc_r+0x3b4>
 8013f3a:	e748      	b.n	8013dce <_malloc_r+0x246>
 8013f3c:	9a02      	ldr	r2, [sp, #8]
 8013f3e:	2a0f      	cmp	r2, #15
 8013f40:	d813      	bhi.n	8013f6a <_malloc_r+0x3e2>
 8013f42:	6063      	str	r3, [r4, #4]
 8013f44:	2203      	movs	r2, #3
 8013f46:	4b1b      	ldr	r3, [pc, #108]	; (8013fb4 <_malloc_r+0x42c>)
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	4393      	bics	r3, r2
 8013f4e:	1b5a      	subs	r2, r3, r5
 8013f50:	42ab      	cmp	r3, r5
 8013f52:	d301      	bcc.n	8013f58 <_malloc_r+0x3d0>
 8013f54:	2a0f      	cmp	r2, #15
 8013f56:	dc1d      	bgt.n	8013f94 <_malloc_r+0x40c>
 8013f58:	9801      	ldr	r0, [sp, #4]
 8013f5a:	f000 f867 	bl	801402c <__malloc_unlock>
 8013f5e:	e620      	b.n	8013ba2 <_malloc_r+0x1a>
 8013f60:	1ae3      	subs	r3, r4, r3
 8013f62:	4a13      	ldr	r2, [pc, #76]	; (8013fb0 <_malloc_r+0x428>)
 8013f64:	4463      	add	r3, ip
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	e7c7      	b.n	8013efa <_malloc_r+0x372>
 8013f6a:	2207      	movs	r2, #7
 8013f6c:	9e02      	ldr	r6, [sp, #8]
 8013f6e:	3e0c      	subs	r6, #12
 8013f70:	4396      	bics	r6, r2
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	4013      	ands	r3, r2
 8013f76:	2205      	movs	r2, #5
 8013f78:	4333      	orrs	r3, r6
 8013f7a:	607b      	str	r3, [r7, #4]
 8013f7c:	19bb      	adds	r3, r7, r6
 8013f7e:	605a      	str	r2, [r3, #4]
 8013f80:	609a      	str	r2, [r3, #8]
 8013f82:	2e0f      	cmp	r6, #15
 8013f84:	d800      	bhi.n	8013f88 <_malloc_r+0x400>
 8013f86:	e722      	b.n	8013dce <_malloc_r+0x246>
 8013f88:	0039      	movs	r1, r7
 8013f8a:	9801      	ldr	r0, [sp, #4]
 8013f8c:	3108      	adds	r1, #8
 8013f8e:	f003 fb07 	bl	80175a0 <_free_r>
 8013f92:	e71c      	b.n	8013dce <_malloc_r+0x246>
 8013f94:	2301      	movs	r3, #1
 8013f96:	0018      	movs	r0, r3
 8013f98:	4906      	ldr	r1, [pc, #24]	; (8013fb4 <_malloc_r+0x42c>)
 8013f9a:	4328      	orrs	r0, r5
 8013f9c:	688c      	ldr	r4, [r1, #8]
 8013f9e:	4313      	orrs	r3, r2
 8013fa0:	1965      	adds	r5, r4, r5
 8013fa2:	6060      	str	r0, [r4, #4]
 8013fa4:	608d      	str	r5, [r1, #8]
 8013fa6:	606b      	str	r3, [r5, #4]
 8013fa8:	e624      	b.n	8013bf4 <_malloc_r+0x6c>
 8013faa:	46c0      	nop			; (mov r8, r8)
 8013fac:	20000acc 	.word	0x20000acc
 8013fb0:	20006920 	.word	0x20006920
 8013fb4:	200006c4 	.word	0x200006c4

08013fb8 <__ascii_mbtowc>:
 8013fb8:	b082      	sub	sp, #8
 8013fba:	2900      	cmp	r1, #0
 8013fbc:	d100      	bne.n	8013fc0 <__ascii_mbtowc+0x8>
 8013fbe:	a901      	add	r1, sp, #4
 8013fc0:	1e10      	subs	r0, r2, #0
 8013fc2:	d006      	beq.n	8013fd2 <__ascii_mbtowc+0x1a>
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d006      	beq.n	8013fd6 <__ascii_mbtowc+0x1e>
 8013fc8:	7813      	ldrb	r3, [r2, #0]
 8013fca:	600b      	str	r3, [r1, #0]
 8013fcc:	7810      	ldrb	r0, [r2, #0]
 8013fce:	1e43      	subs	r3, r0, #1
 8013fd0:	4198      	sbcs	r0, r3
 8013fd2:	b002      	add	sp, #8
 8013fd4:	4770      	bx	lr
 8013fd6:	2002      	movs	r0, #2
 8013fd8:	4240      	negs	r0, r0
 8013fda:	e7fa      	b.n	8013fd2 <__ascii_mbtowc+0x1a>

08013fdc <memcmp>:
 8013fdc:	b530      	push	{r4, r5, lr}
 8013fde:	2400      	movs	r4, #0
 8013fe0:	42a2      	cmp	r2, r4
 8013fe2:	d101      	bne.n	8013fe8 <memcmp+0xc>
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	e005      	b.n	8013ff4 <memcmp+0x18>
 8013fe8:	5d03      	ldrb	r3, [r0, r4]
 8013fea:	1c65      	adds	r5, r4, #1
 8013fec:	5d0c      	ldrb	r4, [r1, r4]
 8013fee:	42a3      	cmp	r3, r4
 8013ff0:	d001      	beq.n	8013ff6 <memcmp+0x1a>
 8013ff2:	1b18      	subs	r0, r3, r4
 8013ff4:	bd30      	pop	{r4, r5, pc}
 8013ff6:	002c      	movs	r4, r5
 8013ff8:	e7f2      	b.n	8013fe0 <memcmp+0x4>

08013ffa <memcpy>:
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	b510      	push	{r4, lr}
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d100      	bne.n	8014004 <memcpy+0xa>
 8014002:	bd10      	pop	{r4, pc}
 8014004:	5ccc      	ldrb	r4, [r1, r3]
 8014006:	54c4      	strb	r4, [r0, r3]
 8014008:	3301      	adds	r3, #1
 801400a:	e7f8      	b.n	8013ffe <memcpy+0x4>

0801400c <memset>:
 801400c:	0003      	movs	r3, r0
 801400e:	1812      	adds	r2, r2, r0
 8014010:	4293      	cmp	r3, r2
 8014012:	d100      	bne.n	8014016 <memset+0xa>
 8014014:	4770      	bx	lr
 8014016:	7019      	strb	r1, [r3, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	e7f9      	b.n	8014010 <memset+0x4>

0801401c <__malloc_lock>:
 801401c:	b510      	push	{r4, lr}
 801401e:	4802      	ldr	r0, [pc, #8]	; (8014028 <__malloc_lock+0xc>)
 8014020:	f003 feb2 	bl	8017d88 <__retarget_lock_acquire_recursive>
 8014024:	bd10      	pop	{r4, pc}
 8014026:	46c0      	nop			; (mov r8, r8)
 8014028:	20006e74 	.word	0x20006e74

0801402c <__malloc_unlock>:
 801402c:	b510      	push	{r4, lr}
 801402e:	4802      	ldr	r0, [pc, #8]	; (8014038 <__malloc_unlock+0xc>)
 8014030:	f003 feab 	bl	8017d8a <__retarget_lock_release_recursive>
 8014034:	bd10      	pop	{r4, pc}
 8014036:	46c0      	nop			; (mov r8, r8)
 8014038:	20006e74 	.word	0x20006e74

0801403c <rand>:
 801403c:	4b09      	ldr	r3, [pc, #36]	; (8014064 <rand+0x28>)
 801403e:	b510      	push	{r4, lr}
 8014040:	681c      	ldr	r4, [r3, #0]
 8014042:	4a09      	ldr	r2, [pc, #36]	; (8014068 <rand+0x2c>)
 8014044:	34a8      	adds	r4, #168	; 0xa8
 8014046:	6820      	ldr	r0, [r4, #0]
 8014048:	6861      	ldr	r1, [r4, #4]
 801404a:	4b08      	ldr	r3, [pc, #32]	; (801406c <rand+0x30>)
 801404c:	f7ec fa98 	bl	8000580 <__aeabi_lmul>
 8014050:	2201      	movs	r2, #1
 8014052:	2300      	movs	r3, #0
 8014054:	1880      	adds	r0, r0, r2
 8014056:	4159      	adcs	r1, r3
 8014058:	6020      	str	r0, [r4, #0]
 801405a:	6061      	str	r1, [r4, #4]
 801405c:	0048      	lsls	r0, r1, #1
 801405e:	0840      	lsrs	r0, r0, #1
 8014060:	bd10      	pop	{r4, pc}
 8014062:	46c0      	nop			; (mov r8, r8)
 8014064:	20000128 	.word	0x20000128
 8014068:	4c957f2d 	.word	0x4c957f2d
 801406c:	5851f42d 	.word	0x5851f42d

08014070 <realloc>:
 8014070:	b510      	push	{r4, lr}
 8014072:	4b03      	ldr	r3, [pc, #12]	; (8014080 <realloc+0x10>)
 8014074:	000a      	movs	r2, r1
 8014076:	0001      	movs	r1, r0
 8014078:	6818      	ldr	r0, [r3, #0]
 801407a:	f000 f803 	bl	8014084 <_realloc_r>
 801407e:	bd10      	pop	{r4, pc}
 8014080:	20000128 	.word	0x20000128

08014084 <_realloc_r>:
 8014084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014086:	b087      	sub	sp, #28
 8014088:	9003      	str	r0, [sp, #12]
 801408a:	1e0c      	subs	r4, r1, #0
 801408c:	9205      	str	r2, [sp, #20]
 801408e:	d106      	bne.n	801409e <_realloc_r+0x1a>
 8014090:	0011      	movs	r1, r2
 8014092:	f7ff fd79 	bl	8013b88 <_malloc_r>
 8014096:	0007      	movs	r7, r0
 8014098:	0038      	movs	r0, r7
 801409a:	b007      	add	sp, #28
 801409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801409e:	9803      	ldr	r0, [sp, #12]
 80140a0:	f7ff ffbc 	bl	801401c <__malloc_lock>
 80140a4:	0023      	movs	r3, r4
 80140a6:	3b08      	subs	r3, #8
 80140a8:	685f      	ldr	r7, [r3, #4]
 80140aa:	9302      	str	r3, [sp, #8]
 80140ac:	003a      	movs	r2, r7
 80140ae:	2303      	movs	r3, #3
 80140b0:	9e05      	ldr	r6, [sp, #20]
 80140b2:	439a      	bics	r2, r3
 80140b4:	360b      	adds	r6, #11
 80140b6:	9204      	str	r2, [sp, #16]
 80140b8:	2e16      	cmp	r6, #22
 80140ba:	d908      	bls.n	80140ce <_realloc_r+0x4a>
 80140bc:	3304      	adds	r3, #4
 80140be:	439e      	bics	r6, r3
 80140c0:	9601      	str	r6, [sp, #4]
 80140c2:	d506      	bpl.n	80140d2 <_realloc_r+0x4e>
 80140c4:	230c      	movs	r3, #12
 80140c6:	9a03      	ldr	r2, [sp, #12]
 80140c8:	2700      	movs	r7, #0
 80140ca:	6013      	str	r3, [r2, #0]
 80140cc:	e7e4      	b.n	8014098 <_realloc_r+0x14>
 80140ce:	2310      	movs	r3, #16
 80140d0:	9301      	str	r3, [sp, #4]
 80140d2:	9b01      	ldr	r3, [sp, #4]
 80140d4:	9a05      	ldr	r2, [sp, #20]
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d3f4      	bcc.n	80140c4 <_realloc_r+0x40>
 80140da:	9b01      	ldr	r3, [sp, #4]
 80140dc:	9a04      	ldr	r2, [sp, #16]
 80140de:	4293      	cmp	r3, r2
 80140e0:	dc00      	bgt.n	80140e4 <_realloc_r+0x60>
 80140e2:	e16f      	b.n	80143c4 <_realloc_r+0x340>
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	48bc      	ldr	r0, [pc, #752]	; (80143d8 <_realloc_r+0x354>)
 80140e8:	189b      	adds	r3, r3, r2
 80140ea:	6882      	ldr	r2, [r0, #8]
 80140ec:	4694      	mov	ip, r2
 80140ee:	685a      	ldr	r2, [r3, #4]
 80140f0:	459c      	cmp	ip, r3
 80140f2:	d006      	beq.n	8014102 <_realloc_r+0x7e>
 80140f4:	2501      	movs	r5, #1
 80140f6:	0011      	movs	r1, r2
 80140f8:	43a9      	bics	r1, r5
 80140fa:	1859      	adds	r1, r3, r1
 80140fc:	6849      	ldr	r1, [r1, #4]
 80140fe:	4229      	tst	r1, r5
 8014100:	d146      	bne.n	8014190 <_realloc_r+0x10c>
 8014102:	2103      	movs	r1, #3
 8014104:	438a      	bics	r2, r1
 8014106:	9904      	ldr	r1, [sp, #16]
 8014108:	188e      	adds	r6, r1, r2
 801410a:	9901      	ldr	r1, [sp, #4]
 801410c:	459c      	cmp	ip, r3
 801410e:	d117      	bne.n	8014140 <_realloc_r+0xbc>
 8014110:	3110      	adds	r1, #16
 8014112:	42b1      	cmp	r1, r6
 8014114:	dc3e      	bgt.n	8014194 <_realloc_r+0x110>
 8014116:	9901      	ldr	r1, [sp, #4]
 8014118:	9b02      	ldr	r3, [sp, #8]
 801411a:	468c      	mov	ip, r1
 801411c:	4463      	add	r3, ip
 801411e:	6083      	str	r3, [r0, #8]
 8014120:	001a      	movs	r2, r3
 8014122:	1a73      	subs	r3, r6, r1
 8014124:	2601      	movs	r6, #1
 8014126:	4333      	orrs	r3, r6
 8014128:	6053      	str	r3, [r2, #4]
 801412a:	0023      	movs	r3, r4
 801412c:	3b08      	subs	r3, #8
 801412e:	685a      	ldr	r2, [r3, #4]
 8014130:	9803      	ldr	r0, [sp, #12]
 8014132:	4016      	ands	r6, r2
 8014134:	430e      	orrs	r6, r1
 8014136:	605e      	str	r6, [r3, #4]
 8014138:	f7ff ff78 	bl	801402c <__malloc_unlock>
 801413c:	0027      	movs	r7, r4
 801413e:	e7ab      	b.n	8014098 <_realloc_r+0x14>
 8014140:	42b1      	cmp	r1, r6
 8014142:	dc27      	bgt.n	8014194 <_realloc_r+0x110>
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	689b      	ldr	r3, [r3, #8]
 8014148:	60da      	str	r2, [r3, #12]
 801414a:	6093      	str	r3, [r2, #8]
 801414c:	9b01      	ldr	r3, [sp, #4]
 801414e:	9a02      	ldr	r2, [sp, #8]
 8014150:	1af4      	subs	r4, r6, r3
 8014152:	9b02      	ldr	r3, [sp, #8]
 8014154:	1992      	adds	r2, r2, r6
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	9304      	str	r3, [sp, #16]
 801415a:	2301      	movs	r3, #1
 801415c:	9804      	ldr	r0, [sp, #16]
 801415e:	4018      	ands	r0, r3
 8014160:	2c0f      	cmp	r4, #15
 8014162:	d800      	bhi.n	8014166 <_realloc_r+0xe2>
 8014164:	e130      	b.n	80143c8 <_realloc_r+0x344>
 8014166:	9d01      	ldr	r5, [sp, #4]
 8014168:	9902      	ldr	r1, [sp, #8]
 801416a:	4328      	orrs	r0, r5
 801416c:	1949      	adds	r1, r1, r5
 801416e:	9d02      	ldr	r5, [sp, #8]
 8014170:	431c      	orrs	r4, r3
 8014172:	6068      	str	r0, [r5, #4]
 8014174:	604c      	str	r4, [r1, #4]
 8014176:	6850      	ldr	r0, [r2, #4]
 8014178:	3108      	adds	r1, #8
 801417a:	4303      	orrs	r3, r0
 801417c:	6053      	str	r3, [r2, #4]
 801417e:	9803      	ldr	r0, [sp, #12]
 8014180:	f003 fa0e 	bl	80175a0 <_free_r>
 8014184:	9803      	ldr	r0, [sp, #12]
 8014186:	f7ff ff51 	bl	801402c <__malloc_unlock>
 801418a:	9f02      	ldr	r7, [sp, #8]
 801418c:	3708      	adds	r7, #8
 801418e:	e783      	b.n	8014098 <_realloc_r+0x14>
 8014190:	2200      	movs	r2, #0
 8014192:	0013      	movs	r3, r2
 8014194:	07f9      	lsls	r1, r7, #31
 8014196:	d500      	bpl.n	801419a <_realloc_r+0x116>
 8014198:	e0c6      	b.n	8014328 <_realloc_r+0x2a4>
 801419a:	0021      	movs	r1, r4
 801419c:	3908      	subs	r1, #8
 801419e:	680d      	ldr	r5, [r1, #0]
 80141a0:	9902      	ldr	r1, [sp, #8]
 80141a2:	1b4d      	subs	r5, r1, r5
 80141a4:	2103      	movs	r1, #3
 80141a6:	686f      	ldr	r7, [r5, #4]
 80141a8:	438f      	bics	r7, r1
 80141aa:	9904      	ldr	r1, [sp, #16]
 80141ac:	187f      	adds	r7, r7, r1
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d100      	bne.n	80141b4 <_realloc_r+0x130>
 80141b2:	e084      	b.n	80142be <_realloc_r+0x23a>
 80141b4:	19d6      	adds	r6, r2, r7
 80141b6:	459c      	cmp	ip, r3
 80141b8:	d148      	bne.n	801424c <_realloc_r+0x1c8>
 80141ba:	9b01      	ldr	r3, [sp, #4]
 80141bc:	3310      	adds	r3, #16
 80141be:	42b3      	cmp	r3, r6
 80141c0:	dc7d      	bgt.n	80142be <_realloc_r+0x23a>
 80141c2:	68aa      	ldr	r2, [r5, #8]
 80141c4:	68eb      	ldr	r3, [r5, #12]
 80141c6:	002f      	movs	r7, r5
 80141c8:	60d3      	str	r3, [r2, #12]
 80141ca:	609a      	str	r2, [r3, #8]
 80141cc:	000a      	movs	r2, r1
 80141ce:	3a04      	subs	r2, #4
 80141d0:	3708      	adds	r7, #8
 80141d2:	2a24      	cmp	r2, #36	; 0x24
 80141d4:	d835      	bhi.n	8014242 <_realloc_r+0x1be>
 80141d6:	003b      	movs	r3, r7
 80141d8:	2a13      	cmp	r2, #19
 80141da:	d908      	bls.n	80141ee <_realloc_r+0x16a>
 80141dc:	6823      	ldr	r3, [r4, #0]
 80141de:	60ab      	str	r3, [r5, #8]
 80141e0:	6863      	ldr	r3, [r4, #4]
 80141e2:	60eb      	str	r3, [r5, #12]
 80141e4:	2a1b      	cmp	r2, #27
 80141e6:	d81a      	bhi.n	801421e <_realloc_r+0x19a>
 80141e8:	002b      	movs	r3, r5
 80141ea:	3408      	adds	r4, #8
 80141ec:	3310      	adds	r3, #16
 80141ee:	6822      	ldr	r2, [r4, #0]
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	6862      	ldr	r2, [r4, #4]
 80141f4:	605a      	str	r2, [r3, #4]
 80141f6:	68a2      	ldr	r2, [r4, #8]
 80141f8:	609a      	str	r2, [r3, #8]
 80141fa:	9b01      	ldr	r3, [sp, #4]
 80141fc:	18ea      	adds	r2, r5, r3
 80141fe:	4b76      	ldr	r3, [pc, #472]	; (80143d8 <_realloc_r+0x354>)
 8014200:	609a      	str	r2, [r3, #8]
 8014202:	9b01      	ldr	r3, [sp, #4]
 8014204:	1af3      	subs	r3, r6, r3
 8014206:	2601      	movs	r6, #1
 8014208:	4333      	orrs	r3, r6
 801420a:	6053      	str	r3, [r2, #4]
 801420c:	686b      	ldr	r3, [r5, #4]
 801420e:	401e      	ands	r6, r3
 8014210:	9b01      	ldr	r3, [sp, #4]
 8014212:	431e      	orrs	r6, r3
 8014214:	606e      	str	r6, [r5, #4]
 8014216:	9803      	ldr	r0, [sp, #12]
 8014218:	f7ff ff08 	bl	801402c <__malloc_unlock>
 801421c:	e73c      	b.n	8014098 <_realloc_r+0x14>
 801421e:	68a3      	ldr	r3, [r4, #8]
 8014220:	612b      	str	r3, [r5, #16]
 8014222:	68e3      	ldr	r3, [r4, #12]
 8014224:	616b      	str	r3, [r5, #20]
 8014226:	2a24      	cmp	r2, #36	; 0x24
 8014228:	d003      	beq.n	8014232 <_realloc_r+0x1ae>
 801422a:	002b      	movs	r3, r5
 801422c:	3410      	adds	r4, #16
 801422e:	3318      	adds	r3, #24
 8014230:	e7dd      	b.n	80141ee <_realloc_r+0x16a>
 8014232:	6923      	ldr	r3, [r4, #16]
 8014234:	61ab      	str	r3, [r5, #24]
 8014236:	002b      	movs	r3, r5
 8014238:	6962      	ldr	r2, [r4, #20]
 801423a:	3320      	adds	r3, #32
 801423c:	61ea      	str	r2, [r5, #28]
 801423e:	3418      	adds	r4, #24
 8014240:	e7d5      	b.n	80141ee <_realloc_r+0x16a>
 8014242:	0021      	movs	r1, r4
 8014244:	0038      	movs	r0, r7
 8014246:	f003 fdac 	bl	8017da2 <memmove>
 801424a:	e7d6      	b.n	80141fa <_realloc_r+0x176>
 801424c:	9a01      	ldr	r2, [sp, #4]
 801424e:	42b2      	cmp	r2, r6
 8014250:	dc35      	bgt.n	80142be <_realloc_r+0x23a>
 8014252:	0028      	movs	r0, r5
 8014254:	68da      	ldr	r2, [r3, #12]
 8014256:	689b      	ldr	r3, [r3, #8]
 8014258:	3008      	adds	r0, #8
 801425a:	60da      	str	r2, [r3, #12]
 801425c:	6093      	str	r3, [r2, #8]
 801425e:	68aa      	ldr	r2, [r5, #8]
 8014260:	68eb      	ldr	r3, [r5, #12]
 8014262:	60d3      	str	r3, [r2, #12]
 8014264:	609a      	str	r2, [r3, #8]
 8014266:	9a04      	ldr	r2, [sp, #16]
 8014268:	3a04      	subs	r2, #4
 801426a:	2a24      	cmp	r2, #36	; 0x24
 801426c:	d823      	bhi.n	80142b6 <_realloc_r+0x232>
 801426e:	2a13      	cmp	r2, #19
 8014270:	d907      	bls.n	8014282 <_realloc_r+0x1fe>
 8014272:	6823      	ldr	r3, [r4, #0]
 8014274:	60ab      	str	r3, [r5, #8]
 8014276:	6863      	ldr	r3, [r4, #4]
 8014278:	60eb      	str	r3, [r5, #12]
 801427a:	2a1b      	cmp	r2, #27
 801427c:	d809      	bhi.n	8014292 <_realloc_r+0x20e>
 801427e:	3408      	adds	r4, #8
 8014280:	3008      	adds	r0, #8
 8014282:	6823      	ldr	r3, [r4, #0]
 8014284:	6003      	str	r3, [r0, #0]
 8014286:	6863      	ldr	r3, [r4, #4]
 8014288:	6043      	str	r3, [r0, #4]
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	6083      	str	r3, [r0, #8]
 801428e:	9502      	str	r5, [sp, #8]
 8014290:	e75c      	b.n	801414c <_realloc_r+0xc8>
 8014292:	68a3      	ldr	r3, [r4, #8]
 8014294:	612b      	str	r3, [r5, #16]
 8014296:	68e3      	ldr	r3, [r4, #12]
 8014298:	616b      	str	r3, [r5, #20]
 801429a:	2a24      	cmp	r2, #36	; 0x24
 801429c:	d003      	beq.n	80142a6 <_realloc_r+0x222>
 801429e:	0028      	movs	r0, r5
 80142a0:	3410      	adds	r4, #16
 80142a2:	3018      	adds	r0, #24
 80142a4:	e7ed      	b.n	8014282 <_realloc_r+0x1fe>
 80142a6:	0028      	movs	r0, r5
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	3020      	adds	r0, #32
 80142ac:	61ab      	str	r3, [r5, #24]
 80142ae:	6963      	ldr	r3, [r4, #20]
 80142b0:	3418      	adds	r4, #24
 80142b2:	61eb      	str	r3, [r5, #28]
 80142b4:	e7e5      	b.n	8014282 <_realloc_r+0x1fe>
 80142b6:	0021      	movs	r1, r4
 80142b8:	f003 fd73 	bl	8017da2 <memmove>
 80142bc:	e7e7      	b.n	801428e <_realloc_r+0x20a>
 80142be:	9b01      	ldr	r3, [sp, #4]
 80142c0:	42bb      	cmp	r3, r7
 80142c2:	dc31      	bgt.n	8014328 <_realloc_r+0x2a4>
 80142c4:	0028      	movs	r0, r5
 80142c6:	68aa      	ldr	r2, [r5, #8]
 80142c8:	68eb      	ldr	r3, [r5, #12]
 80142ca:	3008      	adds	r0, #8
 80142cc:	60d3      	str	r3, [r2, #12]
 80142ce:	609a      	str	r2, [r3, #8]
 80142d0:	9a04      	ldr	r2, [sp, #16]
 80142d2:	3a04      	subs	r2, #4
 80142d4:	2a24      	cmp	r2, #36	; 0x24
 80142d6:	d823      	bhi.n	8014320 <_realloc_r+0x29c>
 80142d8:	2a13      	cmp	r2, #19
 80142da:	d907      	bls.n	80142ec <_realloc_r+0x268>
 80142dc:	6823      	ldr	r3, [r4, #0]
 80142de:	60ab      	str	r3, [r5, #8]
 80142e0:	6863      	ldr	r3, [r4, #4]
 80142e2:	60eb      	str	r3, [r5, #12]
 80142e4:	2a1b      	cmp	r2, #27
 80142e6:	d809      	bhi.n	80142fc <_realloc_r+0x278>
 80142e8:	3408      	adds	r4, #8
 80142ea:	3008      	adds	r0, #8
 80142ec:	6823      	ldr	r3, [r4, #0]
 80142ee:	6003      	str	r3, [r0, #0]
 80142f0:	6863      	ldr	r3, [r4, #4]
 80142f2:	6043      	str	r3, [r0, #4]
 80142f4:	68a3      	ldr	r3, [r4, #8]
 80142f6:	6083      	str	r3, [r0, #8]
 80142f8:	003e      	movs	r6, r7
 80142fa:	e7c8      	b.n	801428e <_realloc_r+0x20a>
 80142fc:	68a3      	ldr	r3, [r4, #8]
 80142fe:	612b      	str	r3, [r5, #16]
 8014300:	68e3      	ldr	r3, [r4, #12]
 8014302:	616b      	str	r3, [r5, #20]
 8014304:	2a24      	cmp	r2, #36	; 0x24
 8014306:	d003      	beq.n	8014310 <_realloc_r+0x28c>
 8014308:	0028      	movs	r0, r5
 801430a:	3410      	adds	r4, #16
 801430c:	3018      	adds	r0, #24
 801430e:	e7ed      	b.n	80142ec <_realloc_r+0x268>
 8014310:	0028      	movs	r0, r5
 8014312:	6923      	ldr	r3, [r4, #16]
 8014314:	3020      	adds	r0, #32
 8014316:	61ab      	str	r3, [r5, #24]
 8014318:	6963      	ldr	r3, [r4, #20]
 801431a:	3418      	adds	r4, #24
 801431c:	61eb      	str	r3, [r5, #28]
 801431e:	e7e5      	b.n	80142ec <_realloc_r+0x268>
 8014320:	0021      	movs	r1, r4
 8014322:	f003 fd3e 	bl	8017da2 <memmove>
 8014326:	e7e7      	b.n	80142f8 <_realloc_r+0x274>
 8014328:	9905      	ldr	r1, [sp, #20]
 801432a:	9803      	ldr	r0, [sp, #12]
 801432c:	f7ff fc2c 	bl	8013b88 <_malloc_r>
 8014330:	1e07      	subs	r7, r0, #0
 8014332:	d100      	bne.n	8014336 <_realloc_r+0x2b2>
 8014334:	e76f      	b.n	8014216 <_realloc_r+0x192>
 8014336:	0023      	movs	r3, r4
 8014338:	2201      	movs	r2, #1
 801433a:	3b08      	subs	r3, #8
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	4393      	bics	r3, r2
 8014340:	9a02      	ldr	r2, [sp, #8]
 8014342:	18d3      	adds	r3, r2, r3
 8014344:	0002      	movs	r2, r0
 8014346:	3a08      	subs	r2, #8
 8014348:	4293      	cmp	r3, r2
 801434a:	d105      	bne.n	8014358 <_realloc_r+0x2d4>
 801434c:	685e      	ldr	r6, [r3, #4]
 801434e:	2303      	movs	r3, #3
 8014350:	439e      	bics	r6, r3
 8014352:	9b04      	ldr	r3, [sp, #16]
 8014354:	18f6      	adds	r6, r6, r3
 8014356:	e6f9      	b.n	801414c <_realloc_r+0xc8>
 8014358:	9a04      	ldr	r2, [sp, #16]
 801435a:	3a04      	subs	r2, #4
 801435c:	2a24      	cmp	r2, #36	; 0x24
 801435e:	d82d      	bhi.n	80143bc <_realloc_r+0x338>
 8014360:	2a13      	cmp	r2, #19
 8014362:	d928      	bls.n	80143b6 <_realloc_r+0x332>
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	6003      	str	r3, [r0, #0]
 8014368:	6863      	ldr	r3, [r4, #4]
 801436a:	6043      	str	r3, [r0, #4]
 801436c:	2a1b      	cmp	r2, #27
 801436e:	d80e      	bhi.n	801438e <_realloc_r+0x30a>
 8014370:	0022      	movs	r2, r4
 8014372:	0003      	movs	r3, r0
 8014374:	3208      	adds	r2, #8
 8014376:	3308      	adds	r3, #8
 8014378:	6811      	ldr	r1, [r2, #0]
 801437a:	6019      	str	r1, [r3, #0]
 801437c:	6851      	ldr	r1, [r2, #4]
 801437e:	6059      	str	r1, [r3, #4]
 8014380:	6892      	ldr	r2, [r2, #8]
 8014382:	609a      	str	r2, [r3, #8]
 8014384:	0021      	movs	r1, r4
 8014386:	9803      	ldr	r0, [sp, #12]
 8014388:	f003 f90a 	bl	80175a0 <_free_r>
 801438c:	e743      	b.n	8014216 <_realloc_r+0x192>
 801438e:	68a3      	ldr	r3, [r4, #8]
 8014390:	6083      	str	r3, [r0, #8]
 8014392:	68e3      	ldr	r3, [r4, #12]
 8014394:	60c3      	str	r3, [r0, #12]
 8014396:	2a24      	cmp	r2, #36	; 0x24
 8014398:	d004      	beq.n	80143a4 <_realloc_r+0x320>
 801439a:	0022      	movs	r2, r4
 801439c:	0003      	movs	r3, r0
 801439e:	3210      	adds	r2, #16
 80143a0:	3310      	adds	r3, #16
 80143a2:	e7e9      	b.n	8014378 <_realloc_r+0x2f4>
 80143a4:	6923      	ldr	r3, [r4, #16]
 80143a6:	0022      	movs	r2, r4
 80143a8:	6103      	str	r3, [r0, #16]
 80143aa:	0003      	movs	r3, r0
 80143ac:	6961      	ldr	r1, [r4, #20]
 80143ae:	3218      	adds	r2, #24
 80143b0:	3318      	adds	r3, #24
 80143b2:	6141      	str	r1, [r0, #20]
 80143b4:	e7e0      	b.n	8014378 <_realloc_r+0x2f4>
 80143b6:	0003      	movs	r3, r0
 80143b8:	0022      	movs	r2, r4
 80143ba:	e7dd      	b.n	8014378 <_realloc_r+0x2f4>
 80143bc:	0021      	movs	r1, r4
 80143be:	f003 fcf0 	bl	8017da2 <memmove>
 80143c2:	e7df      	b.n	8014384 <_realloc_r+0x300>
 80143c4:	9e04      	ldr	r6, [sp, #16]
 80143c6:	e6c1      	b.n	801414c <_realloc_r+0xc8>
 80143c8:	9902      	ldr	r1, [sp, #8]
 80143ca:	4306      	orrs	r6, r0
 80143cc:	604e      	str	r6, [r1, #4]
 80143ce:	6851      	ldr	r1, [r2, #4]
 80143d0:	430b      	orrs	r3, r1
 80143d2:	6053      	str	r3, [r2, #4]
 80143d4:	e6d6      	b.n	8014184 <_realloc_r+0x100>
 80143d6:	46c0      	nop			; (mov r8, r8)
 80143d8:	200006c4 	.word	0x200006c4

080143dc <_sbrk_r>:
 80143dc:	2300      	movs	r3, #0
 80143de:	b570      	push	{r4, r5, r6, lr}
 80143e0:	4c06      	ldr	r4, [pc, #24]	; (80143fc <_sbrk_r+0x20>)
 80143e2:	0005      	movs	r5, r0
 80143e4:	0008      	movs	r0, r1
 80143e6:	6023      	str	r3, [r4, #0]
 80143e8:	f004 f9ec 	bl	80187c4 <_sbrk>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d103      	bne.n	80143f8 <_sbrk_r+0x1c>
 80143f0:	6823      	ldr	r3, [r4, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d000      	beq.n	80143f8 <_sbrk_r+0x1c>
 80143f6:	602b      	str	r3, [r5, #0]
 80143f8:	bd70      	pop	{r4, r5, r6, pc}
 80143fa:	46c0      	nop			; (mov r8, r8)
 80143fc:	20006e7c 	.word	0x20006e7c

08014400 <sprintf>:
 8014400:	b40e      	push	{r1, r2, r3}
 8014402:	b500      	push	{lr}
 8014404:	490b      	ldr	r1, [pc, #44]	; (8014434 <sprintf+0x34>)
 8014406:	b09c      	sub	sp, #112	; 0x70
 8014408:	ab1d      	add	r3, sp, #116	; 0x74
 801440a:	9002      	str	r0, [sp, #8]
 801440c:	9006      	str	r0, [sp, #24]
 801440e:	9107      	str	r1, [sp, #28]
 8014410:	9104      	str	r1, [sp, #16]
 8014412:	4809      	ldr	r0, [pc, #36]	; (8014438 <sprintf+0x38>)
 8014414:	4909      	ldr	r1, [pc, #36]	; (801443c <sprintf+0x3c>)
 8014416:	cb04      	ldmia	r3!, {r2}
 8014418:	9105      	str	r1, [sp, #20]
 801441a:	6800      	ldr	r0, [r0, #0]
 801441c:	a902      	add	r1, sp, #8
 801441e:	9301      	str	r3, [sp, #4]
 8014420:	f000 ff78 	bl	8015314 <_svfprintf_r>
 8014424:	2300      	movs	r3, #0
 8014426:	9a02      	ldr	r2, [sp, #8]
 8014428:	7013      	strb	r3, [r2, #0]
 801442a:	b01c      	add	sp, #112	; 0x70
 801442c:	bc08      	pop	{r3}
 801442e:	b003      	add	sp, #12
 8014430:	4718      	bx	r3
 8014432:	46c0      	nop			; (mov r8, r8)
 8014434:	7fffffff 	.word	0x7fffffff
 8014438:	20000128 	.word	0x20000128
 801443c:	ffff0208 	.word	0xffff0208

08014440 <strcat>:
 8014440:	0002      	movs	r2, r0
 8014442:	b510      	push	{r4, lr}
 8014444:	7813      	ldrb	r3, [r2, #0]
 8014446:	1c54      	adds	r4, r2, #1
 8014448:	2b00      	cmp	r3, #0
 801444a:	d105      	bne.n	8014458 <strcat+0x18>
 801444c:	5ccc      	ldrb	r4, [r1, r3]
 801444e:	54d4      	strb	r4, [r2, r3]
 8014450:	3301      	adds	r3, #1
 8014452:	2c00      	cmp	r4, #0
 8014454:	d1fa      	bne.n	801444c <strcat+0xc>
 8014456:	bd10      	pop	{r4, pc}
 8014458:	0022      	movs	r2, r4
 801445a:	e7f3      	b.n	8014444 <strcat+0x4>

0801445c <strchr>:
 801445c:	b2c9      	uxtb	r1, r1
 801445e:	7803      	ldrb	r3, [r0, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d004      	beq.n	801446e <strchr+0x12>
 8014464:	428b      	cmp	r3, r1
 8014466:	d100      	bne.n	801446a <strchr+0xe>
 8014468:	4770      	bx	lr
 801446a:	3001      	adds	r0, #1
 801446c:	e7f7      	b.n	801445e <strchr+0x2>
 801446e:	424b      	negs	r3, r1
 8014470:	4159      	adcs	r1, r3
 8014472:	4249      	negs	r1, r1
 8014474:	4008      	ands	r0, r1
 8014476:	e7f7      	b.n	8014468 <strchr+0xc>

08014478 <strcpy>:
 8014478:	0003      	movs	r3, r0
 801447a:	780a      	ldrb	r2, [r1, #0]
 801447c:	3101      	adds	r1, #1
 801447e:	701a      	strb	r2, [r3, #0]
 8014480:	3301      	adds	r3, #1
 8014482:	2a00      	cmp	r2, #0
 8014484:	d1f9      	bne.n	801447a <strcpy+0x2>
 8014486:	4770      	bx	lr

08014488 <strncmp>:
 8014488:	2300      	movs	r3, #0
 801448a:	b530      	push	{r4, r5, lr}
 801448c:	429a      	cmp	r2, r3
 801448e:	d00a      	beq.n	80144a6 <strncmp+0x1e>
 8014490:	3a01      	subs	r2, #1
 8014492:	5cc4      	ldrb	r4, [r0, r3]
 8014494:	5ccd      	ldrb	r5, [r1, r3]
 8014496:	42ac      	cmp	r4, r5
 8014498:	d104      	bne.n	80144a4 <strncmp+0x1c>
 801449a:	4293      	cmp	r3, r2
 801449c:	d002      	beq.n	80144a4 <strncmp+0x1c>
 801449e:	3301      	adds	r3, #1
 80144a0:	2c00      	cmp	r4, #0
 80144a2:	d1f6      	bne.n	8014492 <strncmp+0xa>
 80144a4:	1b63      	subs	r3, r4, r5
 80144a6:	0018      	movs	r0, r3
 80144a8:	bd30      	pop	{r4, r5, pc}

080144aa <strncpy>:
 80144aa:	b530      	push	{r4, r5, lr}
 80144ac:	0005      	movs	r5, r0
 80144ae:	2a00      	cmp	r2, #0
 80144b0:	d100      	bne.n	80144b4 <strncpy+0xa>
 80144b2:	bd30      	pop	{r4, r5, pc}
 80144b4:	780c      	ldrb	r4, [r1, #0]
 80144b6:	3a01      	subs	r2, #1
 80144b8:	1c6b      	adds	r3, r5, #1
 80144ba:	702c      	strb	r4, [r5, #0]
 80144bc:	3101      	adds	r1, #1
 80144be:	2c00      	cmp	r4, #0
 80144c0:	d105      	bne.n	80144ce <strncpy+0x24>
 80144c2:	189a      	adds	r2, r3, r2
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d0f4      	beq.n	80144b2 <strncpy+0x8>
 80144c8:	701c      	strb	r4, [r3, #0]
 80144ca:	3301      	adds	r3, #1
 80144cc:	e7fa      	b.n	80144c4 <strncpy+0x1a>
 80144ce:	001d      	movs	r5, r3
 80144d0:	e7ed      	b.n	80144ae <strncpy+0x4>
	...

080144d4 <sulp>:
 80144d4:	b570      	push	{r4, r5, r6, lr}
 80144d6:	0016      	movs	r6, r2
 80144d8:	000d      	movs	r5, r1
 80144da:	f003 ff17 	bl	801830c <__ulp>
 80144de:	2e00      	cmp	r6, #0
 80144e0:	d00d      	beq.n	80144fe <sulp+0x2a>
 80144e2:	236b      	movs	r3, #107	; 0x6b
 80144e4:	006a      	lsls	r2, r5, #1
 80144e6:	0d52      	lsrs	r2, r2, #21
 80144e8:	1a9b      	subs	r3, r3, r2
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	dd07      	ble.n	80144fe <sulp+0x2a>
 80144ee:	2400      	movs	r4, #0
 80144f0:	4a03      	ldr	r2, [pc, #12]	; (8014500 <sulp+0x2c>)
 80144f2:	051b      	lsls	r3, r3, #20
 80144f4:	189d      	adds	r5, r3, r2
 80144f6:	002b      	movs	r3, r5
 80144f8:	0022      	movs	r2, r4
 80144fa:	f7ed ff9b 	bl	8002434 <__aeabi_dmul>
 80144fe:	bd70      	pop	{r4, r5, r6, pc}
 8014500:	3ff00000 	.word	0x3ff00000

08014504 <_strtod_l>:
 8014504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014506:	b0a7      	sub	sp, #156	; 0x9c
 8014508:	9307      	str	r3, [sp, #28]
 801450a:	2300      	movs	r3, #0
 801450c:	9004      	str	r0, [sp, #16]
 801450e:	9807      	ldr	r0, [sp, #28]
 8014510:	9322      	str	r3, [sp, #136]	; 0x88
 8014512:	9106      	str	r1, [sp, #24]
 8014514:	921d      	str	r2, [sp, #116]	; 0x74
 8014516:	f003 fc28 	bl	8017d6a <__localeconv_l>
 801451a:	0005      	movs	r5, r0
 801451c:	6800      	ldr	r0, [r0, #0]
 801451e:	f7eb fdfb 	bl	8000118 <strlen>
 8014522:	2600      	movs	r6, #0
 8014524:	2700      	movs	r7, #0
 8014526:	9b06      	ldr	r3, [sp, #24]
 8014528:	9005      	str	r0, [sp, #20]
 801452a:	9321      	str	r3, [sp, #132]	; 0x84
 801452c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801452e:	781a      	ldrb	r2, [r3, #0]
 8014530:	2a0d      	cmp	r2, #13
 8014532:	d839      	bhi.n	80145a8 <_strtod_l+0xa4>
 8014534:	2a09      	cmp	r2, #9
 8014536:	d23d      	bcs.n	80145b4 <_strtod_l+0xb0>
 8014538:	2a00      	cmp	r2, #0
 801453a:	d044      	beq.n	80145c6 <_strtod_l+0xc2>
 801453c:	2300      	movs	r3, #0
 801453e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014540:	2200      	movs	r2, #0
 8014542:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014544:	920c      	str	r2, [sp, #48]	; 0x30
 8014546:	7823      	ldrb	r3, [r4, #0]
 8014548:	2b30      	cmp	r3, #48	; 0x30
 801454a:	d000      	beq.n	801454e <_strtod_l+0x4a>
 801454c:	e07e      	b.n	801464c <_strtod_l+0x148>
 801454e:	7863      	ldrb	r3, [r4, #1]
 8014550:	2b58      	cmp	r3, #88	; 0x58
 8014552:	d002      	beq.n	801455a <_strtod_l+0x56>
 8014554:	2b78      	cmp	r3, #120	; 0x78
 8014556:	d000      	beq.n	801455a <_strtod_l+0x56>
 8014558:	e06e      	b.n	8014638 <_strtod_l+0x134>
 801455a:	9b07      	ldr	r3, [sp, #28]
 801455c:	4a96      	ldr	r2, [pc, #600]	; (80147b8 <_strtod_l+0x2b4>)
 801455e:	9302      	str	r3, [sp, #8]
 8014560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014562:	a921      	add	r1, sp, #132	; 0x84
 8014564:	9301      	str	r3, [sp, #4]
 8014566:	ab22      	add	r3, sp, #136	; 0x88
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	9804      	ldr	r0, [sp, #16]
 801456c:	ab23      	add	r3, sp, #140	; 0x8c
 801456e:	f003 f914 	bl	801779a <__gethex>
 8014572:	2507      	movs	r5, #7
 8014574:	9005      	str	r0, [sp, #20]
 8014576:	4005      	ands	r5, r0
 8014578:	d005      	beq.n	8014586 <_strtod_l+0x82>
 801457a:	2d06      	cmp	r5, #6
 801457c:	d12f      	bne.n	80145de <_strtod_l+0xda>
 801457e:	2300      	movs	r3, #0
 8014580:	3401      	adds	r4, #1
 8014582:	9421      	str	r4, [sp, #132]	; 0x84
 8014584:	9313      	str	r3, [sp, #76]	; 0x4c
 8014586:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014588:	2b00      	cmp	r3, #0
 801458a:	d002      	beq.n	8014592 <_strtod_l+0x8e>
 801458c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801458e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014590:	601a      	str	r2, [r3, #0]
 8014592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014594:	2b00      	cmp	r3, #0
 8014596:	d01d      	beq.n	80145d4 <_strtod_l+0xd0>
 8014598:	2380      	movs	r3, #128	; 0x80
 801459a:	0032      	movs	r2, r6
 801459c:	061b      	lsls	r3, r3, #24
 801459e:	18fb      	adds	r3, r7, r3
 80145a0:	0010      	movs	r0, r2
 80145a2:	0019      	movs	r1, r3
 80145a4:	b027      	add	sp, #156	; 0x9c
 80145a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145a8:	2a2b      	cmp	r2, #43	; 0x2b
 80145aa:	d016      	beq.n	80145da <_strtod_l+0xd6>
 80145ac:	2a2d      	cmp	r2, #45	; 0x2d
 80145ae:	d003      	beq.n	80145b8 <_strtod_l+0xb4>
 80145b0:	2a20      	cmp	r2, #32
 80145b2:	d1c3      	bne.n	801453c <_strtod_l+0x38>
 80145b4:	3301      	adds	r3, #1
 80145b6:	e7b8      	b.n	801452a <_strtod_l+0x26>
 80145b8:	2201      	movs	r2, #1
 80145ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80145bc:	1c5a      	adds	r2, r3, #1
 80145be:	9221      	str	r2, [sp, #132]	; 0x84
 80145c0:	785b      	ldrb	r3, [r3, #1]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1bc      	bne.n	8014540 <_strtod_l+0x3c>
 80145c6:	9b06      	ldr	r3, [sp, #24]
 80145c8:	9321      	str	r3, [sp, #132]	; 0x84
 80145ca:	2300      	movs	r3, #0
 80145cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80145ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d1db      	bne.n	801458c <_strtod_l+0x88>
 80145d4:	0032      	movs	r2, r6
 80145d6:	003b      	movs	r3, r7
 80145d8:	e7e2      	b.n	80145a0 <_strtod_l+0x9c>
 80145da:	2200      	movs	r2, #0
 80145dc:	e7ed      	b.n	80145ba <_strtod_l+0xb6>
 80145de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80145e0:	2a00      	cmp	r2, #0
 80145e2:	d007      	beq.n	80145f4 <_strtod_l+0xf0>
 80145e4:	2135      	movs	r1, #53	; 0x35
 80145e6:	a824      	add	r0, sp, #144	; 0x90
 80145e8:	f003 ff7d 	bl	80184e6 <__copybits>
 80145ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 80145ee:	9804      	ldr	r0, [sp, #16]
 80145f0:	f003 fc12 	bl	8017e18 <_Bfree>
 80145f4:	1e68      	subs	r0, r5, #1
 80145f6:	2804      	cmp	r0, #4
 80145f8:	d806      	bhi.n	8014608 <_strtod_l+0x104>
 80145fa:	f7eb fd95 	bl	8000128 <__gnu_thumb1_case_uqi>
 80145fe:	030c      	.short	0x030c
 8014600:	1917      	.short	0x1917
 8014602:	0c          	.byte	0x0c
 8014603:	00          	.byte	0x00
 8014604:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014606:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014608:	9b05      	ldr	r3, [sp, #20]
 801460a:	071b      	lsls	r3, r3, #28
 801460c:	d5bb      	bpl.n	8014586 <_strtod_l+0x82>
 801460e:	2380      	movs	r3, #128	; 0x80
 8014610:	061b      	lsls	r3, r3, #24
 8014612:	431f      	orrs	r7, r3
 8014614:	e7b7      	b.n	8014586 <_strtod_l+0x82>
 8014616:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014618:	4a68      	ldr	r2, [pc, #416]	; (80147bc <_strtod_l+0x2b8>)
 801461a:	4969      	ldr	r1, [pc, #420]	; (80147c0 <_strtod_l+0x2bc>)
 801461c:	401a      	ands	r2, r3
 801461e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014620:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014622:	185b      	adds	r3, r3, r1
 8014624:	051b      	lsls	r3, r3, #20
 8014626:	431a      	orrs	r2, r3
 8014628:	0017      	movs	r7, r2
 801462a:	e7ed      	b.n	8014608 <_strtod_l+0x104>
 801462c:	4f65      	ldr	r7, [pc, #404]	; (80147c4 <_strtod_l+0x2c0>)
 801462e:	e7eb      	b.n	8014608 <_strtod_l+0x104>
 8014630:	2601      	movs	r6, #1
 8014632:	4f65      	ldr	r7, [pc, #404]	; (80147c8 <_strtod_l+0x2c4>)
 8014634:	4276      	negs	r6, r6
 8014636:	e7e7      	b.n	8014608 <_strtod_l+0x104>
 8014638:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801463a:	1c5a      	adds	r2, r3, #1
 801463c:	9221      	str	r2, [sp, #132]	; 0x84
 801463e:	785b      	ldrb	r3, [r3, #1]
 8014640:	2b30      	cmp	r3, #48	; 0x30
 8014642:	d0f9      	beq.n	8014638 <_strtod_l+0x134>
 8014644:	2b00      	cmp	r3, #0
 8014646:	d09e      	beq.n	8014586 <_strtod_l+0x82>
 8014648:	2301      	movs	r3, #1
 801464a:	930c      	str	r3, [sp, #48]	; 0x30
 801464c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801464e:	220a      	movs	r2, #10
 8014650:	9312      	str	r3, [sp, #72]	; 0x48
 8014652:	2300      	movs	r3, #0
 8014654:	930b      	str	r3, [sp, #44]	; 0x2c
 8014656:	9308      	str	r3, [sp, #32]
 8014658:	930a      	str	r3, [sp, #40]	; 0x28
 801465a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801465c:	7804      	ldrb	r4, [r0, #0]
 801465e:	0023      	movs	r3, r4
 8014660:	3b30      	subs	r3, #48	; 0x30
 8014662:	b2d9      	uxtb	r1, r3
 8014664:	2909      	cmp	r1, #9
 8014666:	d934      	bls.n	80146d2 <_strtod_l+0x1ce>
 8014668:	9a05      	ldr	r2, [sp, #20]
 801466a:	6829      	ldr	r1, [r5, #0]
 801466c:	f7ff ff0c 	bl	8014488 <strncmp>
 8014670:	2800      	cmp	r0, #0
 8014672:	d040      	beq.n	80146f6 <_strtod_l+0x1f2>
 8014674:	2000      	movs	r0, #0
 8014676:	0023      	movs	r3, r4
 8014678:	4684      	mov	ip, r0
 801467a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801467c:	9007      	str	r0, [sp, #28]
 801467e:	9205      	str	r2, [sp, #20]
 8014680:	2220      	movs	r2, #32
 8014682:	0019      	movs	r1, r3
 8014684:	4391      	bics	r1, r2
 8014686:	000a      	movs	r2, r1
 8014688:	2100      	movs	r1, #0
 801468a:	2a45      	cmp	r2, #69	; 0x45
 801468c:	d000      	beq.n	8014690 <_strtod_l+0x18c>
 801468e:	e0bf      	b.n	8014810 <_strtod_l+0x30c>
 8014690:	9b05      	ldr	r3, [sp, #20]
 8014692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014694:	4303      	orrs	r3, r0
 8014696:	4313      	orrs	r3, r2
 8014698:	428b      	cmp	r3, r1
 801469a:	d094      	beq.n	80145c6 <_strtod_l+0xc2>
 801469c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801469e:	9306      	str	r3, [sp, #24]
 80146a0:	3301      	adds	r3, #1
 80146a2:	9321      	str	r3, [sp, #132]	; 0x84
 80146a4:	9b06      	ldr	r3, [sp, #24]
 80146a6:	785b      	ldrb	r3, [r3, #1]
 80146a8:	2b2b      	cmp	r3, #43	; 0x2b
 80146aa:	d100      	bne.n	80146ae <_strtod_l+0x1aa>
 80146ac:	e082      	b.n	80147b4 <_strtod_l+0x2b0>
 80146ae:	000c      	movs	r4, r1
 80146b0:	2b2d      	cmp	r3, #45	; 0x2d
 80146b2:	d105      	bne.n	80146c0 <_strtod_l+0x1bc>
 80146b4:	2401      	movs	r4, #1
 80146b6:	9b06      	ldr	r3, [sp, #24]
 80146b8:	3302      	adds	r3, #2
 80146ba:	9321      	str	r3, [sp, #132]	; 0x84
 80146bc:	9b06      	ldr	r3, [sp, #24]
 80146be:	789b      	ldrb	r3, [r3, #2]
 80146c0:	001a      	movs	r2, r3
 80146c2:	3a30      	subs	r2, #48	; 0x30
 80146c4:	2a09      	cmp	r2, #9
 80146c6:	d800      	bhi.n	80146ca <_strtod_l+0x1c6>
 80146c8:	e084      	b.n	80147d4 <_strtod_l+0x2d0>
 80146ca:	9a06      	ldr	r2, [sp, #24]
 80146cc:	2100      	movs	r1, #0
 80146ce:	9221      	str	r2, [sp, #132]	; 0x84
 80146d0:	e09e      	b.n	8014810 <_strtod_l+0x30c>
 80146d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146d4:	2908      	cmp	r1, #8
 80146d6:	dc09      	bgt.n	80146ec <_strtod_l+0x1e8>
 80146d8:	9908      	ldr	r1, [sp, #32]
 80146da:	4351      	muls	r1, r2
 80146dc:	18cb      	adds	r3, r1, r3
 80146de:	9308      	str	r3, [sp, #32]
 80146e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146e2:	3001      	adds	r0, #1
 80146e4:	3301      	adds	r3, #1
 80146e6:	930a      	str	r3, [sp, #40]	; 0x28
 80146e8:	9021      	str	r0, [sp, #132]	; 0x84
 80146ea:	e7b6      	b.n	801465a <_strtod_l+0x156>
 80146ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146ee:	4351      	muls	r1, r2
 80146f0:	18cb      	adds	r3, r1, r3
 80146f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80146f4:	e7f4      	b.n	80146e0 <_strtod_l+0x1dc>
 80146f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146f8:	9b05      	ldr	r3, [sp, #20]
 80146fa:	4694      	mov	ip, r2
 80146fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146fe:	4463      	add	r3, ip
 8014700:	9321      	str	r3, [sp, #132]	; 0x84
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2a00      	cmp	r2, #0
 8014706:	d036      	beq.n	8014776 <_strtod_l+0x272>
 8014708:	4684      	mov	ip, r0
 801470a:	9205      	str	r2, [sp, #20]
 801470c:	001a      	movs	r2, r3
 801470e:	3a30      	subs	r2, #48	; 0x30
 8014710:	2a09      	cmp	r2, #9
 8014712:	d912      	bls.n	801473a <_strtod_l+0x236>
 8014714:	2201      	movs	r2, #1
 8014716:	9207      	str	r2, [sp, #28]
 8014718:	e7b2      	b.n	8014680 <_strtod_l+0x17c>
 801471a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801471c:	3001      	adds	r0, #1
 801471e:	1c5a      	adds	r2, r3, #1
 8014720:	9221      	str	r2, [sp, #132]	; 0x84
 8014722:	785b      	ldrb	r3, [r3, #1]
 8014724:	2b30      	cmp	r3, #48	; 0x30
 8014726:	d0f8      	beq.n	801471a <_strtod_l+0x216>
 8014728:	001a      	movs	r2, r3
 801472a:	3a31      	subs	r2, #49	; 0x31
 801472c:	2a08      	cmp	r2, #8
 801472e:	d83c      	bhi.n	80147aa <_strtod_l+0x2a6>
 8014730:	4684      	mov	ip, r0
 8014732:	2000      	movs	r0, #0
 8014734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014736:	9005      	str	r0, [sp, #20]
 8014738:	9212      	str	r2, [sp, #72]	; 0x48
 801473a:	3b30      	subs	r3, #48	; 0x30
 801473c:	1c42      	adds	r2, r0, #1
 801473e:	2b00      	cmp	r3, #0
 8014740:	d013      	beq.n	801476a <_strtod_l+0x266>
 8014742:	210a      	movs	r1, #10
 8014744:	4494      	add	ip, r2
 8014746:	9a05      	ldr	r2, [sp, #20]
 8014748:	1885      	adds	r5, r0, r2
 801474a:	42aa      	cmp	r2, r5
 801474c:	d115      	bne.n	801477a <_strtod_l+0x276>
 801474e:	9905      	ldr	r1, [sp, #20]
 8014750:	9a05      	ldr	r2, [sp, #20]
 8014752:	3101      	adds	r1, #1
 8014754:	1809      	adds	r1, r1, r0
 8014756:	1812      	adds	r2, r2, r0
 8014758:	9105      	str	r1, [sp, #20]
 801475a:	2a08      	cmp	r2, #8
 801475c:	dc1b      	bgt.n	8014796 <_strtod_l+0x292>
 801475e:	220a      	movs	r2, #10
 8014760:	9908      	ldr	r1, [sp, #32]
 8014762:	434a      	muls	r2, r1
 8014764:	189b      	adds	r3, r3, r2
 8014766:	2200      	movs	r2, #0
 8014768:	9308      	str	r3, [sp, #32]
 801476a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801476c:	0010      	movs	r0, r2
 801476e:	1c59      	adds	r1, r3, #1
 8014770:	9121      	str	r1, [sp, #132]	; 0x84
 8014772:	785b      	ldrb	r3, [r3, #1]
 8014774:	e7ca      	b.n	801470c <_strtod_l+0x208>
 8014776:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014778:	e7d4      	b.n	8014724 <_strtod_l+0x220>
 801477a:	1c54      	adds	r4, r2, #1
 801477c:	2a08      	cmp	r2, #8
 801477e:	dc04      	bgt.n	801478a <_strtod_l+0x286>
 8014780:	9a08      	ldr	r2, [sp, #32]
 8014782:	434a      	muls	r2, r1
 8014784:	9208      	str	r2, [sp, #32]
 8014786:	0022      	movs	r2, r4
 8014788:	e7df      	b.n	801474a <_strtod_l+0x246>
 801478a:	2c10      	cmp	r4, #16
 801478c:	dcfb      	bgt.n	8014786 <_strtod_l+0x282>
 801478e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014790:	434a      	muls	r2, r1
 8014792:	920b      	str	r2, [sp, #44]	; 0x2c
 8014794:	e7f7      	b.n	8014786 <_strtod_l+0x282>
 8014796:	9905      	ldr	r1, [sp, #20]
 8014798:	2200      	movs	r2, #0
 801479a:	2910      	cmp	r1, #16
 801479c:	dce5      	bgt.n	801476a <_strtod_l+0x266>
 801479e:	210a      	movs	r1, #10
 80147a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80147a2:	4341      	muls	r1, r0
 80147a4:	185b      	adds	r3, r3, r1
 80147a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80147a8:	e7df      	b.n	801476a <_strtod_l+0x266>
 80147aa:	2200      	movs	r2, #0
 80147ac:	4694      	mov	ip, r2
 80147ae:	9205      	str	r2, [sp, #20]
 80147b0:	3201      	adds	r2, #1
 80147b2:	e7b0      	b.n	8014716 <_strtod_l+0x212>
 80147b4:	000c      	movs	r4, r1
 80147b6:	e77e      	b.n	80146b6 <_strtod_l+0x1b2>
 80147b8:	0801bba0 	.word	0x0801bba0
 80147bc:	ffefffff 	.word	0xffefffff
 80147c0:	00000433 	.word	0x00000433
 80147c4:	7ff00000 	.word	0x7ff00000
 80147c8:	7fffffff 	.word	0x7fffffff
 80147cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ce:	1c5a      	adds	r2, r3, #1
 80147d0:	9221      	str	r2, [sp, #132]	; 0x84
 80147d2:	785b      	ldrb	r3, [r3, #1]
 80147d4:	2b30      	cmp	r3, #48	; 0x30
 80147d6:	d0f9      	beq.n	80147cc <_strtod_l+0x2c8>
 80147d8:	001a      	movs	r2, r3
 80147da:	3a31      	subs	r2, #49	; 0x31
 80147dc:	2100      	movs	r1, #0
 80147de:	2a08      	cmp	r2, #8
 80147e0:	d816      	bhi.n	8014810 <_strtod_l+0x30c>
 80147e2:	3b30      	subs	r3, #48	; 0x30
 80147e4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80147e6:	930e      	str	r3, [sp, #56]	; 0x38
 80147e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ea:	1c59      	adds	r1, r3, #1
 80147ec:	9121      	str	r1, [sp, #132]	; 0x84
 80147ee:	785b      	ldrb	r3, [r3, #1]
 80147f0:	001a      	movs	r2, r3
 80147f2:	3a30      	subs	r2, #48	; 0x30
 80147f4:	2a09      	cmp	r2, #9
 80147f6:	d932      	bls.n	801485e <_strtod_l+0x35a>
 80147f8:	1b4a      	subs	r2, r1, r5
 80147fa:	4dad      	ldr	r5, [pc, #692]	; (8014ab0 <_strtod_l+0x5ac>)
 80147fc:	0029      	movs	r1, r5
 80147fe:	2a08      	cmp	r2, #8
 8014800:	dc03      	bgt.n	801480a <_strtod_l+0x306>
 8014802:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014804:	42a9      	cmp	r1, r5
 8014806:	dd00      	ble.n	801480a <_strtod_l+0x306>
 8014808:	0029      	movs	r1, r5
 801480a:	2c00      	cmp	r4, #0
 801480c:	d000      	beq.n	8014810 <_strtod_l+0x30c>
 801480e:	4249      	negs	r1, r1
 8014810:	9a05      	ldr	r2, [sp, #20]
 8014812:	2a00      	cmp	r2, #0
 8014814:	d149      	bne.n	80148aa <_strtod_l+0x3a6>
 8014816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014818:	4310      	orrs	r0, r2
 801481a:	d000      	beq.n	801481e <_strtod_l+0x31a>
 801481c:	e6b3      	b.n	8014586 <_strtod_l+0x82>
 801481e:	9a07      	ldr	r2, [sp, #28]
 8014820:	2a00      	cmp	r2, #0
 8014822:	d000      	beq.n	8014826 <_strtod_l+0x322>
 8014824:	e6cf      	b.n	80145c6 <_strtod_l+0xc2>
 8014826:	2b4e      	cmp	r3, #78	; 0x4e
 8014828:	d025      	beq.n	8014876 <_strtod_l+0x372>
 801482a:	dc1f      	bgt.n	801486c <_strtod_l+0x368>
 801482c:	2b49      	cmp	r3, #73	; 0x49
 801482e:	d000      	beq.n	8014832 <_strtod_l+0x32e>
 8014830:	e6c9      	b.n	80145c6 <_strtod_l+0xc2>
 8014832:	49a0      	ldr	r1, [pc, #640]	; (8014ab4 <_strtod_l+0x5b0>)
 8014834:	a821      	add	r0, sp, #132	; 0x84
 8014836:	f003 f9ed 	bl	8017c14 <__match>
 801483a:	2800      	cmp	r0, #0
 801483c:	d100      	bne.n	8014840 <_strtod_l+0x33c>
 801483e:	e6c2      	b.n	80145c6 <_strtod_l+0xc2>
 8014840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014842:	499d      	ldr	r1, [pc, #628]	; (8014ab8 <_strtod_l+0x5b4>)
 8014844:	3b01      	subs	r3, #1
 8014846:	a821      	add	r0, sp, #132	; 0x84
 8014848:	9321      	str	r3, [sp, #132]	; 0x84
 801484a:	f003 f9e3 	bl	8017c14 <__match>
 801484e:	2800      	cmp	r0, #0
 8014850:	d102      	bne.n	8014858 <_strtod_l+0x354>
 8014852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014854:	3301      	adds	r3, #1
 8014856:	9321      	str	r3, [sp, #132]	; 0x84
 8014858:	4f98      	ldr	r7, [pc, #608]	; (8014abc <_strtod_l+0x5b8>)
 801485a:	2600      	movs	r6, #0
 801485c:	e693      	b.n	8014586 <_strtod_l+0x82>
 801485e:	220a      	movs	r2, #10
 8014860:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014862:	434a      	muls	r2, r1
 8014864:	18d2      	adds	r2, r2, r3
 8014866:	3a30      	subs	r2, #48	; 0x30
 8014868:	920e      	str	r2, [sp, #56]	; 0x38
 801486a:	e7bd      	b.n	80147e8 <_strtod_l+0x2e4>
 801486c:	2b69      	cmp	r3, #105	; 0x69
 801486e:	d0e0      	beq.n	8014832 <_strtod_l+0x32e>
 8014870:	2b6e      	cmp	r3, #110	; 0x6e
 8014872:	d000      	beq.n	8014876 <_strtod_l+0x372>
 8014874:	e6a7      	b.n	80145c6 <_strtod_l+0xc2>
 8014876:	4992      	ldr	r1, [pc, #584]	; (8014ac0 <_strtod_l+0x5bc>)
 8014878:	a821      	add	r0, sp, #132	; 0x84
 801487a:	f003 f9cb 	bl	8017c14 <__match>
 801487e:	2800      	cmp	r0, #0
 8014880:	d100      	bne.n	8014884 <_strtod_l+0x380>
 8014882:	e6a0      	b.n	80145c6 <_strtod_l+0xc2>
 8014884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b28      	cmp	r3, #40	; 0x28
 801488a:	d10c      	bne.n	80148a6 <_strtod_l+0x3a2>
 801488c:	aa24      	add	r2, sp, #144	; 0x90
 801488e:	498d      	ldr	r1, [pc, #564]	; (8014ac4 <_strtod_l+0x5c0>)
 8014890:	a821      	add	r0, sp, #132	; 0x84
 8014892:	f003 f9d3 	bl	8017c3c <__hexnan>
 8014896:	2805      	cmp	r0, #5
 8014898:	d105      	bne.n	80148a6 <_strtod_l+0x3a2>
 801489a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801489c:	4a87      	ldr	r2, [pc, #540]	; (8014abc <_strtod_l+0x5b8>)
 801489e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80148a0:	431a      	orrs	r2, r3
 80148a2:	0017      	movs	r7, r2
 80148a4:	e66f      	b.n	8014586 <_strtod_l+0x82>
 80148a6:	4f88      	ldr	r7, [pc, #544]	; (8014ac8 <_strtod_l+0x5c4>)
 80148a8:	e7d7      	b.n	801485a <_strtod_l+0x356>
 80148aa:	4663      	mov	r3, ip
 80148ac:	1acb      	subs	r3, r1, r3
 80148ae:	9307      	str	r3, [sp, #28]
 80148b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d101      	bne.n	80148ba <_strtod_l+0x3b6>
 80148b6:	9b05      	ldr	r3, [sp, #20]
 80148b8:	930a      	str	r3, [sp, #40]	; 0x28
 80148ba:	9c05      	ldr	r4, [sp, #20]
 80148bc:	2c10      	cmp	r4, #16
 80148be:	dd00      	ble.n	80148c2 <_strtod_l+0x3be>
 80148c0:	2410      	movs	r4, #16
 80148c2:	9808      	ldr	r0, [sp, #32]
 80148c4:	f7ee fbfc 	bl	80030c0 <__aeabi_ui2d>
 80148c8:	9b05      	ldr	r3, [sp, #20]
 80148ca:	0006      	movs	r6, r0
 80148cc:	000f      	movs	r7, r1
 80148ce:	2b09      	cmp	r3, #9
 80148d0:	dc15      	bgt.n	80148fe <_strtod_l+0x3fa>
 80148d2:	9b07      	ldr	r3, [sp, #28]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d100      	bne.n	80148da <_strtod_l+0x3d6>
 80148d8:	e655      	b.n	8014586 <_strtod_l+0x82>
 80148da:	9b07      	ldr	r3, [sp, #28]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	dc00      	bgt.n	80148e2 <_strtod_l+0x3de>
 80148e0:	e07d      	b.n	80149de <_strtod_l+0x4da>
 80148e2:	2b16      	cmp	r3, #22
 80148e4:	dc62      	bgt.n	80149ac <_strtod_l+0x4a8>
 80148e6:	00dc      	lsls	r4, r3, #3
 80148e8:	4b78      	ldr	r3, [pc, #480]	; (8014acc <_strtod_l+0x5c8>)
 80148ea:	0032      	movs	r2, r6
 80148ec:	1919      	adds	r1, r3, r4
 80148ee:	003b      	movs	r3, r7
 80148f0:	6808      	ldr	r0, [r1, #0]
 80148f2:	6849      	ldr	r1, [r1, #4]
 80148f4:	f7ed fd9e 	bl	8002434 <__aeabi_dmul>
 80148f8:	0006      	movs	r6, r0
 80148fa:	000f      	movs	r7, r1
 80148fc:	e643      	b.n	8014586 <_strtod_l+0x82>
 80148fe:	0022      	movs	r2, r4
 8014900:	4b72      	ldr	r3, [pc, #456]	; (8014acc <_strtod_l+0x5c8>)
 8014902:	3a09      	subs	r2, #9
 8014904:	00d2      	lsls	r2, r2, #3
 8014906:	189b      	adds	r3, r3, r2
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	f7ed fd92 	bl	8002434 <__aeabi_dmul>
 8014910:	0006      	movs	r6, r0
 8014912:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014914:	000f      	movs	r7, r1
 8014916:	f7ee fbd3 	bl	80030c0 <__aeabi_ui2d>
 801491a:	000b      	movs	r3, r1
 801491c:	0002      	movs	r2, r0
 801491e:	0039      	movs	r1, r7
 8014920:	0030      	movs	r0, r6
 8014922:	f7ec fe61 	bl	80015e8 <__aeabi_dadd>
 8014926:	9b05      	ldr	r3, [sp, #20]
 8014928:	0006      	movs	r6, r0
 801492a:	000f      	movs	r7, r1
 801492c:	2b0f      	cmp	r3, #15
 801492e:	ddd0      	ble.n	80148d2 <_strtod_l+0x3ce>
 8014930:	9b05      	ldr	r3, [sp, #20]
 8014932:	1b1c      	subs	r4, r3, r4
 8014934:	9b07      	ldr	r3, [sp, #28]
 8014936:	18e4      	adds	r4, r4, r3
 8014938:	2c00      	cmp	r4, #0
 801493a:	dc00      	bgt.n	801493e <_strtod_l+0x43a>
 801493c:	e094      	b.n	8014a68 <_strtod_l+0x564>
 801493e:	230f      	movs	r3, #15
 8014940:	4023      	ands	r3, r4
 8014942:	d00a      	beq.n	801495a <_strtod_l+0x456>
 8014944:	4961      	ldr	r1, [pc, #388]	; (8014acc <_strtod_l+0x5c8>)
 8014946:	00db      	lsls	r3, r3, #3
 8014948:	18c9      	adds	r1, r1, r3
 801494a:	0032      	movs	r2, r6
 801494c:	6808      	ldr	r0, [r1, #0]
 801494e:	6849      	ldr	r1, [r1, #4]
 8014950:	003b      	movs	r3, r7
 8014952:	f7ed fd6f 	bl	8002434 <__aeabi_dmul>
 8014956:	0006      	movs	r6, r0
 8014958:	000f      	movs	r7, r1
 801495a:	230f      	movs	r3, #15
 801495c:	439c      	bics	r4, r3
 801495e:	d06e      	beq.n	8014a3e <_strtod_l+0x53a>
 8014960:	3326      	adds	r3, #38	; 0x26
 8014962:	33ff      	adds	r3, #255	; 0xff
 8014964:	429c      	cmp	r4, r3
 8014966:	dd48      	ble.n	80149fa <_strtod_l+0x4f6>
 8014968:	2400      	movs	r4, #0
 801496a:	9405      	str	r4, [sp, #20]
 801496c:	940b      	str	r4, [sp, #44]	; 0x2c
 801496e:	940a      	str	r4, [sp, #40]	; 0x28
 8014970:	2322      	movs	r3, #34	; 0x22
 8014972:	2600      	movs	r6, #0
 8014974:	9a04      	ldr	r2, [sp, #16]
 8014976:	4f51      	ldr	r7, [pc, #324]	; (8014abc <_strtod_l+0x5b8>)
 8014978:	6013      	str	r3, [r2, #0]
 801497a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801497c:	42b3      	cmp	r3, r6
 801497e:	d100      	bne.n	8014982 <_strtod_l+0x47e>
 8014980:	e601      	b.n	8014586 <_strtod_l+0x82>
 8014982:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014984:	9804      	ldr	r0, [sp, #16]
 8014986:	f003 fa47 	bl	8017e18 <_Bfree>
 801498a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801498c:	9804      	ldr	r0, [sp, #16]
 801498e:	f003 fa43 	bl	8017e18 <_Bfree>
 8014992:	9905      	ldr	r1, [sp, #20]
 8014994:	9804      	ldr	r0, [sp, #16]
 8014996:	f003 fa3f 	bl	8017e18 <_Bfree>
 801499a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801499c:	9804      	ldr	r0, [sp, #16]
 801499e:	f003 fa3b 	bl	8017e18 <_Bfree>
 80149a2:	0021      	movs	r1, r4
 80149a4:	9804      	ldr	r0, [sp, #16]
 80149a6:	f003 fa37 	bl	8017e18 <_Bfree>
 80149aa:	e5ec      	b.n	8014586 <_strtod_l+0x82>
 80149ac:	2325      	movs	r3, #37	; 0x25
 80149ae:	9a05      	ldr	r2, [sp, #20]
 80149b0:	1a9b      	subs	r3, r3, r2
 80149b2:	9a07      	ldr	r2, [sp, #28]
 80149b4:	4293      	cmp	r3, r2
 80149b6:	dbbb      	blt.n	8014930 <_strtod_l+0x42c>
 80149b8:	230f      	movs	r3, #15
 80149ba:	9a05      	ldr	r2, [sp, #20]
 80149bc:	4c43      	ldr	r4, [pc, #268]	; (8014acc <_strtod_l+0x5c8>)
 80149be:	1a9d      	subs	r5, r3, r2
 80149c0:	00e9      	lsls	r1, r5, #3
 80149c2:	1861      	adds	r1, r4, r1
 80149c4:	0032      	movs	r2, r6
 80149c6:	6808      	ldr	r0, [r1, #0]
 80149c8:	6849      	ldr	r1, [r1, #4]
 80149ca:	003b      	movs	r3, r7
 80149cc:	f7ed fd32 	bl	8002434 <__aeabi_dmul>
 80149d0:	9b07      	ldr	r3, [sp, #28]
 80149d2:	1b5e      	subs	r6, r3, r5
 80149d4:	00f6      	lsls	r6, r6, #3
 80149d6:	19a6      	adds	r6, r4, r6
 80149d8:	6832      	ldr	r2, [r6, #0]
 80149da:	6873      	ldr	r3, [r6, #4]
 80149dc:	e78a      	b.n	80148f4 <_strtod_l+0x3f0>
 80149de:	9b07      	ldr	r3, [sp, #28]
 80149e0:	3316      	adds	r3, #22
 80149e2:	dba5      	blt.n	8014930 <_strtod_l+0x42c>
 80149e4:	9b07      	ldr	r3, [sp, #28]
 80149e6:	0030      	movs	r0, r6
 80149e8:	00da      	lsls	r2, r3, #3
 80149ea:	4b38      	ldr	r3, [pc, #224]	; (8014acc <_strtod_l+0x5c8>)
 80149ec:	0039      	movs	r1, r7
 80149ee:	1a9b      	subs	r3, r3, r2
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	f7ed f914 	bl	8001c20 <__aeabi_ddiv>
 80149f8:	e77e      	b.n	80148f8 <_strtod_l+0x3f4>
 80149fa:	2300      	movs	r3, #0
 80149fc:	0030      	movs	r0, r6
 80149fe:	0039      	movs	r1, r7
 8014a00:	001d      	movs	r5, r3
 8014a02:	1124      	asrs	r4, r4, #4
 8014a04:	2c01      	cmp	r4, #1
 8014a06:	dc1d      	bgt.n	8014a44 <_strtod_l+0x540>
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d001      	beq.n	8014a10 <_strtod_l+0x50c>
 8014a0c:	0006      	movs	r6, r0
 8014a0e:	000f      	movs	r7, r1
 8014a10:	4b2f      	ldr	r3, [pc, #188]	; (8014ad0 <_strtod_l+0x5cc>)
 8014a12:	00ed      	lsls	r5, r5, #3
 8014a14:	18ff      	adds	r7, r7, r3
 8014a16:	4b2f      	ldr	r3, [pc, #188]	; (8014ad4 <_strtod_l+0x5d0>)
 8014a18:	0032      	movs	r2, r6
 8014a1a:	195d      	adds	r5, r3, r5
 8014a1c:	6828      	ldr	r0, [r5, #0]
 8014a1e:	6869      	ldr	r1, [r5, #4]
 8014a20:	003b      	movs	r3, r7
 8014a22:	f7ed fd07 	bl	8002434 <__aeabi_dmul>
 8014a26:	4b25      	ldr	r3, [pc, #148]	; (8014abc <_strtod_l+0x5b8>)
 8014a28:	4a2b      	ldr	r2, [pc, #172]	; (8014ad8 <_strtod_l+0x5d4>)
 8014a2a:	0006      	movs	r6, r0
 8014a2c:	400b      	ands	r3, r1
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d89a      	bhi.n	8014968 <_strtod_l+0x464>
 8014a32:	4a2a      	ldr	r2, [pc, #168]	; (8014adc <_strtod_l+0x5d8>)
 8014a34:	4293      	cmp	r3, r2
 8014a36:	d913      	bls.n	8014a60 <_strtod_l+0x55c>
 8014a38:	2601      	movs	r6, #1
 8014a3a:	4f29      	ldr	r7, [pc, #164]	; (8014ae0 <_strtod_l+0x5dc>)
 8014a3c:	4276      	negs	r6, r6
 8014a3e:	2300      	movs	r3, #0
 8014a40:	9306      	str	r3, [sp, #24]
 8014a42:	e07b      	b.n	8014b3c <_strtod_l+0x638>
 8014a44:	2201      	movs	r2, #1
 8014a46:	4214      	tst	r4, r2
 8014a48:	d007      	beq.n	8014a5a <_strtod_l+0x556>
 8014a4a:	4a22      	ldr	r2, [pc, #136]	; (8014ad4 <_strtod_l+0x5d0>)
 8014a4c:	00eb      	lsls	r3, r5, #3
 8014a4e:	189b      	adds	r3, r3, r2
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	f7ed fcee 	bl	8002434 <__aeabi_dmul>
 8014a58:	2301      	movs	r3, #1
 8014a5a:	3501      	adds	r5, #1
 8014a5c:	1064      	asrs	r4, r4, #1
 8014a5e:	e7d1      	b.n	8014a04 <_strtod_l+0x500>
 8014a60:	23d4      	movs	r3, #212	; 0xd4
 8014a62:	049b      	lsls	r3, r3, #18
 8014a64:	18cf      	adds	r7, r1, r3
 8014a66:	e7ea      	b.n	8014a3e <_strtod_l+0x53a>
 8014a68:	2c00      	cmp	r4, #0
 8014a6a:	d0e8      	beq.n	8014a3e <_strtod_l+0x53a>
 8014a6c:	230f      	movs	r3, #15
 8014a6e:	4264      	negs	r4, r4
 8014a70:	4023      	ands	r3, r4
 8014a72:	d00a      	beq.n	8014a8a <_strtod_l+0x586>
 8014a74:	4a15      	ldr	r2, [pc, #84]	; (8014acc <_strtod_l+0x5c8>)
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	18d3      	adds	r3, r2, r3
 8014a7a:	0030      	movs	r0, r6
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	0039      	movs	r1, r7
 8014a82:	f7ed f8cd 	bl	8001c20 <__aeabi_ddiv>
 8014a86:	0006      	movs	r6, r0
 8014a88:	000f      	movs	r7, r1
 8014a8a:	1124      	asrs	r4, r4, #4
 8014a8c:	d0d7      	beq.n	8014a3e <_strtod_l+0x53a>
 8014a8e:	2c1f      	cmp	r4, #31
 8014a90:	dd28      	ble.n	8014ae4 <_strtod_l+0x5e0>
 8014a92:	2400      	movs	r4, #0
 8014a94:	9405      	str	r4, [sp, #20]
 8014a96:	940b      	str	r4, [sp, #44]	; 0x2c
 8014a98:	940a      	str	r4, [sp, #40]	; 0x28
 8014a9a:	2322      	movs	r3, #34	; 0x22
 8014a9c:	9a04      	ldr	r2, [sp, #16]
 8014a9e:	2600      	movs	r6, #0
 8014aa0:	6013      	str	r3, [r2, #0]
 8014aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aa4:	2700      	movs	r7, #0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d000      	beq.n	8014aac <_strtod_l+0x5a8>
 8014aaa:	e76a      	b.n	8014982 <_strtod_l+0x47e>
 8014aac:	e56b      	b.n	8014586 <_strtod_l+0x82>
 8014aae:	46c0      	nop			; (mov r8, r8)
 8014ab0:	00004e1f 	.word	0x00004e1f
 8014ab4:	0801bbf5 	.word	0x0801bbf5
 8014ab8:	0801bd48 	.word	0x0801bd48
 8014abc:	7ff00000 	.word	0x7ff00000
 8014ac0:	0801bbfd 	.word	0x0801bbfd
 8014ac4:	0801bbb4 	.word	0x0801bbb4
 8014ac8:	fff80000 	.word	0xfff80000
 8014acc:	0801bd80 	.word	0x0801bd80
 8014ad0:	fcb00000 	.word	0xfcb00000
 8014ad4:	0801bd58 	.word	0x0801bd58
 8014ad8:	7ca00000 	.word	0x7ca00000
 8014adc:	7c900000 	.word	0x7c900000
 8014ae0:	7fefffff 	.word	0x7fefffff
 8014ae4:	2310      	movs	r3, #16
 8014ae6:	4023      	ands	r3, r4
 8014ae8:	9306      	str	r3, [sp, #24]
 8014aea:	d001      	beq.n	8014af0 <_strtod_l+0x5ec>
 8014aec:	236a      	movs	r3, #106	; 0x6a
 8014aee:	9306      	str	r3, [sp, #24]
 8014af0:	2300      	movs	r3, #0
 8014af2:	0030      	movs	r0, r6
 8014af4:	0039      	movs	r1, r7
 8014af6:	001d      	movs	r5, r3
 8014af8:	2c00      	cmp	r4, #0
 8014afa:	dd00      	ble.n	8014afe <_strtod_l+0x5fa>
 8014afc:	e10e      	b.n	8014d1c <_strtod_l+0x818>
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d001      	beq.n	8014b06 <_strtod_l+0x602>
 8014b02:	0006      	movs	r6, r0
 8014b04:	000f      	movs	r7, r1
 8014b06:	9b06      	ldr	r3, [sp, #24]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d00f      	beq.n	8014b2c <_strtod_l+0x628>
 8014b0c:	236b      	movs	r3, #107	; 0x6b
 8014b0e:	0079      	lsls	r1, r7, #1
 8014b10:	0d49      	lsrs	r1, r1, #21
 8014b12:	003a      	movs	r2, r7
 8014b14:	1a5b      	subs	r3, r3, r1
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	dd08      	ble.n	8014b2c <_strtod_l+0x628>
 8014b1a:	2b1f      	cmp	r3, #31
 8014b1c:	dc00      	bgt.n	8014b20 <_strtod_l+0x61c>
 8014b1e:	e112      	b.n	8014d46 <_strtod_l+0x842>
 8014b20:	2600      	movs	r6, #0
 8014b22:	2b34      	cmp	r3, #52	; 0x34
 8014b24:	dc00      	bgt.n	8014b28 <_strtod_l+0x624>
 8014b26:	e107      	b.n	8014d38 <_strtod_l+0x834>
 8014b28:	27dc      	movs	r7, #220	; 0xdc
 8014b2a:	04bf      	lsls	r7, r7, #18
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	2300      	movs	r3, #0
 8014b30:	0030      	movs	r0, r6
 8014b32:	0039      	movs	r1, r7
 8014b34:	f7eb fc92 	bl	800045c <__aeabi_dcmpeq>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d1aa      	bne.n	8014a92 <_strtod_l+0x58e>
 8014b3c:	9b08      	ldr	r3, [sp, #32]
 8014b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014b44:	9b05      	ldr	r3, [sp, #20]
 8014b46:	9804      	ldr	r0, [sp, #16]
 8014b48:	f003 f9ae 	bl	8017ea8 <__s2b>
 8014b4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d100      	bne.n	8014b54 <_strtod_l+0x650>
 8014b52:	e709      	b.n	8014968 <_strtod_l+0x464>
 8014b54:	9b07      	ldr	r3, [sp, #28]
 8014b56:	9a07      	ldr	r2, [sp, #28]
 8014b58:	17db      	asrs	r3, r3, #31
 8014b5a:	4252      	negs	r2, r2
 8014b5c:	4013      	ands	r3, r2
 8014b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8014b60:	9b07      	ldr	r3, [sp, #28]
 8014b62:	2400      	movs	r4, #0
 8014b64:	43db      	mvns	r3, r3
 8014b66:	9a07      	ldr	r2, [sp, #28]
 8014b68:	17db      	asrs	r3, r3, #31
 8014b6a:	401a      	ands	r2, r3
 8014b6c:	921c      	str	r2, [sp, #112]	; 0x70
 8014b6e:	9405      	str	r4, [sp, #20]
 8014b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b72:	9804      	ldr	r0, [sp, #16]
 8014b74:	6859      	ldr	r1, [r3, #4]
 8014b76:	f003 f927 	bl	8017dc8 <_Balloc>
 8014b7a:	900a      	str	r0, [sp, #40]	; 0x28
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	d100      	bne.n	8014b82 <_strtod_l+0x67e>
 8014b80:	e6f6      	b.n	8014970 <_strtod_l+0x46c>
 8014b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	310c      	adds	r1, #12
 8014b8a:	1c9a      	adds	r2, r3, #2
 8014b8c:	0092      	lsls	r2, r2, #2
 8014b8e:	300c      	adds	r0, #12
 8014b90:	9308      	str	r3, [sp, #32]
 8014b92:	f7ff fa32 	bl	8013ffa <memcpy>
 8014b96:	ab24      	add	r3, sp, #144	; 0x90
 8014b98:	9301      	str	r3, [sp, #4]
 8014b9a:	ab23      	add	r3, sp, #140	; 0x8c
 8014b9c:	9300      	str	r3, [sp, #0]
 8014b9e:	0032      	movs	r2, r6
 8014ba0:	003b      	movs	r3, r7
 8014ba2:	9804      	ldr	r0, [sp, #16]
 8014ba4:	960e      	str	r6, [sp, #56]	; 0x38
 8014ba6:	970f      	str	r7, [sp, #60]	; 0x3c
 8014ba8:	f003 fc22 	bl	80183f0 <__d2b>
 8014bac:	9022      	str	r0, [sp, #136]	; 0x88
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	d100      	bne.n	8014bb4 <_strtod_l+0x6b0>
 8014bb2:	e6dd      	b.n	8014970 <_strtod_l+0x46c>
 8014bb4:	2101      	movs	r1, #1
 8014bb6:	9804      	ldr	r0, [sp, #16]
 8014bb8:	f003 f9fd 	bl	8017fb6 <__i2b>
 8014bbc:	9005      	str	r0, [sp, #20]
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d100      	bne.n	8014bc4 <_strtod_l+0x6c0>
 8014bc2:	e6d5      	b.n	8014970 <_strtod_l+0x46c>
 8014bc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	da00      	bge.n	8014bcc <_strtod_l+0x6c8>
 8014bca:	e0c1      	b.n	8014d50 <_strtod_l+0x84c>
 8014bcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014bce:	189d      	adds	r5, r3, r2
 8014bd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014bd2:	4694      	mov	ip, r2
 8014bd4:	9906      	ldr	r1, [sp, #24]
 8014bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014bd8:	1a5b      	subs	r3, r3, r1
 8014bda:	2136      	movs	r1, #54	; 0x36
 8014bdc:	189b      	adds	r3, r3, r2
 8014bde:	1a8a      	subs	r2, r1, r2
 8014be0:	49b2      	ldr	r1, [pc, #712]	; (8014eac <_strtod_l+0x9a8>)
 8014be2:	3b01      	subs	r3, #1
 8014be4:	2001      	movs	r0, #1
 8014be6:	428b      	cmp	r3, r1
 8014be8:	db00      	blt.n	8014bec <_strtod_l+0x6e8>
 8014bea:	e0bd      	b.n	8014d68 <_strtod_l+0x864>
 8014bec:	1ac9      	subs	r1, r1, r3
 8014bee:	1a52      	subs	r2, r2, r1
 8014bf0:	291f      	cmp	r1, #31
 8014bf2:	dd00      	ble.n	8014bf6 <_strtod_l+0x6f2>
 8014bf4:	e0b1      	b.n	8014d5a <_strtod_l+0x856>
 8014bf6:	4088      	lsls	r0, r1
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	9014      	str	r0, [sp, #80]	; 0x50
 8014bfc:	9310      	str	r3, [sp, #64]	; 0x40
 8014bfe:	18ab      	adds	r3, r5, r2
 8014c00:	9308      	str	r3, [sp, #32]
 8014c02:	0013      	movs	r3, r2
 8014c04:	9a06      	ldr	r2, [sp, #24]
 8014c06:	4463      	add	r3, ip
 8014c08:	18d3      	adds	r3, r2, r3
 8014c0a:	9a08      	ldr	r2, [sp, #32]
 8014c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8014c0e:	002b      	movs	r3, r5
 8014c10:	4295      	cmp	r5, r2
 8014c12:	dd00      	ble.n	8014c16 <_strtod_l+0x712>
 8014c14:	0013      	movs	r3, r2
 8014c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c18:	4293      	cmp	r3, r2
 8014c1a:	dd00      	ble.n	8014c1e <_strtod_l+0x71a>
 8014c1c:	0013      	movs	r3, r2
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	dd06      	ble.n	8014c30 <_strtod_l+0x72c>
 8014c22:	9a08      	ldr	r2, [sp, #32]
 8014c24:	1aed      	subs	r5, r5, r3
 8014c26:	1ad2      	subs	r2, r2, r3
 8014c28:	9208      	str	r2, [sp, #32]
 8014c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c2c:	1ad2      	subs	r2, r2, r3
 8014c2e:	920c      	str	r2, [sp, #48]	; 0x30
 8014c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d017      	beq.n	8014c66 <_strtod_l+0x762>
 8014c36:	001a      	movs	r2, r3
 8014c38:	9905      	ldr	r1, [sp, #20]
 8014c3a:	9804      	ldr	r0, [sp, #16]
 8014c3c:	f003 fa54 	bl	80180e8 <__pow5mult>
 8014c40:	9005      	str	r0, [sp, #20]
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d100      	bne.n	8014c48 <_strtod_l+0x744>
 8014c46:	e693      	b.n	8014970 <_strtod_l+0x46c>
 8014c48:	0001      	movs	r1, r0
 8014c4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c4c:	9804      	ldr	r0, [sp, #16]
 8014c4e:	f003 f9bb 	bl	8017fc8 <__multiply>
 8014c52:	9012      	str	r0, [sp, #72]	; 0x48
 8014c54:	2800      	cmp	r0, #0
 8014c56:	d100      	bne.n	8014c5a <_strtod_l+0x756>
 8014c58:	e68a      	b.n	8014970 <_strtod_l+0x46c>
 8014c5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c5c:	9804      	ldr	r0, [sp, #16]
 8014c5e:	f003 f8db 	bl	8017e18 <_Bfree>
 8014c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c64:	9322      	str	r3, [sp, #136]	; 0x88
 8014c66:	9b08      	ldr	r3, [sp, #32]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	dd00      	ble.n	8014c6e <_strtod_l+0x76a>
 8014c6c:	e07f      	b.n	8014d6e <_strtod_l+0x86a>
 8014c6e:	9b07      	ldr	r3, [sp, #28]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	dd08      	ble.n	8014c86 <_strtod_l+0x782>
 8014c74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c78:	9804      	ldr	r0, [sp, #16]
 8014c7a:	f003 fa35 	bl	80180e8 <__pow5mult>
 8014c7e:	900a      	str	r0, [sp, #40]	; 0x28
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d100      	bne.n	8014c86 <_strtod_l+0x782>
 8014c84:	e674      	b.n	8014970 <_strtod_l+0x46c>
 8014c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	dd08      	ble.n	8014c9e <_strtod_l+0x79a>
 8014c8c:	001a      	movs	r2, r3
 8014c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c90:	9804      	ldr	r0, [sp, #16]
 8014c92:	f003 fa6b 	bl	801816c <__lshift>
 8014c96:	900a      	str	r0, [sp, #40]	; 0x28
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d100      	bne.n	8014c9e <_strtod_l+0x79a>
 8014c9c:	e668      	b.n	8014970 <_strtod_l+0x46c>
 8014c9e:	2d00      	cmp	r5, #0
 8014ca0:	dd08      	ble.n	8014cb4 <_strtod_l+0x7b0>
 8014ca2:	002a      	movs	r2, r5
 8014ca4:	9905      	ldr	r1, [sp, #20]
 8014ca6:	9804      	ldr	r0, [sp, #16]
 8014ca8:	f003 fa60 	bl	801816c <__lshift>
 8014cac:	9005      	str	r0, [sp, #20]
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	d100      	bne.n	8014cb4 <_strtod_l+0x7b0>
 8014cb2:	e65d      	b.n	8014970 <_strtod_l+0x46c>
 8014cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cb6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cb8:	9804      	ldr	r0, [sp, #16]
 8014cba:	f003 fac3 	bl	8018244 <__mdiff>
 8014cbe:	1e04      	subs	r4, r0, #0
 8014cc0:	d100      	bne.n	8014cc4 <_strtod_l+0x7c0>
 8014cc2:	e655      	b.n	8014970 <_strtod_l+0x46c>
 8014cc4:	2500      	movs	r5, #0
 8014cc6:	68c3      	ldr	r3, [r0, #12]
 8014cc8:	9905      	ldr	r1, [sp, #20]
 8014cca:	60c5      	str	r5, [r0, #12]
 8014ccc:	9312      	str	r3, [sp, #72]	; 0x48
 8014cce:	f003 fa9f 	bl	8018210 <__mcmp>
 8014cd2:	42a8      	cmp	r0, r5
 8014cd4:	da55      	bge.n	8014d82 <_strtod_l+0x87e>
 8014cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cd8:	42ab      	cmp	r3, r5
 8014cda:	d11b      	bne.n	8014d14 <_strtod_l+0x810>
 8014cdc:	42ae      	cmp	r6, r5
 8014cde:	d119      	bne.n	8014d14 <_strtod_l+0x810>
 8014ce0:	033b      	lsls	r3, r7, #12
 8014ce2:	42ab      	cmp	r3, r5
 8014ce4:	d116      	bne.n	8014d14 <_strtod_l+0x810>
 8014ce6:	22d6      	movs	r2, #214	; 0xd6
 8014ce8:	4b71      	ldr	r3, [pc, #452]	; (8014eb0 <_strtod_l+0x9ac>)
 8014cea:	04d2      	lsls	r2, r2, #19
 8014cec:	403b      	ands	r3, r7
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d910      	bls.n	8014d14 <_strtod_l+0x810>
 8014cf2:	6963      	ldr	r3, [r4, #20]
 8014cf4:	42ab      	cmp	r3, r5
 8014cf6:	d102      	bne.n	8014cfe <_strtod_l+0x7fa>
 8014cf8:	6923      	ldr	r3, [r4, #16]
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	dd0a      	ble.n	8014d14 <_strtod_l+0x810>
 8014cfe:	0021      	movs	r1, r4
 8014d00:	2201      	movs	r2, #1
 8014d02:	9804      	ldr	r0, [sp, #16]
 8014d04:	f003 fa32 	bl	801816c <__lshift>
 8014d08:	9905      	ldr	r1, [sp, #20]
 8014d0a:	0004      	movs	r4, r0
 8014d0c:	f003 fa80 	bl	8018210 <__mcmp>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	dc6b      	bgt.n	8014dec <_strtod_l+0x8e8>
 8014d14:	9b06      	ldr	r3, [sp, #24]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d178      	bne.n	8014e0c <_strtod_l+0x908>
 8014d1a:	e632      	b.n	8014982 <_strtod_l+0x47e>
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	4214      	tst	r4, r2
 8014d20:	d007      	beq.n	8014d32 <_strtod_l+0x82e>
 8014d22:	4a64      	ldr	r2, [pc, #400]	; (8014eb4 <_strtod_l+0x9b0>)
 8014d24:	00eb      	lsls	r3, r5, #3
 8014d26:	18d3      	adds	r3, r2, r3
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	f7ed fb82 	bl	8002434 <__aeabi_dmul>
 8014d30:	2301      	movs	r3, #1
 8014d32:	3501      	adds	r5, #1
 8014d34:	1064      	asrs	r4, r4, #1
 8014d36:	e6df      	b.n	8014af8 <_strtod_l+0x5f4>
 8014d38:	2101      	movs	r1, #1
 8014d3a:	3b20      	subs	r3, #32
 8014d3c:	4249      	negs	r1, r1
 8014d3e:	4099      	lsls	r1, r3
 8014d40:	400a      	ands	r2, r1
 8014d42:	0017      	movs	r7, r2
 8014d44:	e6f2      	b.n	8014b2c <_strtod_l+0x628>
 8014d46:	2201      	movs	r2, #1
 8014d48:	4252      	negs	r2, r2
 8014d4a:	409a      	lsls	r2, r3
 8014d4c:	4016      	ands	r6, r2
 8014d4e:	e6ed      	b.n	8014b2c <_strtod_l+0x628>
 8014d50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d52:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014d54:	1ad2      	subs	r2, r2, r3
 8014d56:	4694      	mov	ip, r2
 8014d58:	e73c      	b.n	8014bd4 <_strtod_l+0x6d0>
 8014d5a:	4957      	ldr	r1, [pc, #348]	; (8014eb8 <_strtod_l+0x9b4>)
 8014d5c:	1acb      	subs	r3, r1, r3
 8014d5e:	0001      	movs	r1, r0
 8014d60:	4099      	lsls	r1, r3
 8014d62:	9110      	str	r1, [sp, #64]	; 0x40
 8014d64:	9014      	str	r0, [sp, #80]	; 0x50
 8014d66:	e74a      	b.n	8014bfe <_strtod_l+0x6fa>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8014d6c:	e7fa      	b.n	8014d64 <_strtod_l+0x860>
 8014d6e:	9a08      	ldr	r2, [sp, #32]
 8014d70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014d72:	9804      	ldr	r0, [sp, #16]
 8014d74:	f003 f9fa 	bl	801816c <__lshift>
 8014d78:	9022      	str	r0, [sp, #136]	; 0x88
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	d000      	beq.n	8014d80 <_strtod_l+0x87c>
 8014d7e:	e776      	b.n	8014c6e <_strtod_l+0x76a>
 8014d80:	e5f6      	b.n	8014970 <_strtod_l+0x46c>
 8014d82:	970c      	str	r7, [sp, #48]	; 0x30
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d000      	beq.n	8014d8a <_strtod_l+0x886>
 8014d88:	e0a0      	b.n	8014ecc <_strtod_l+0x9c8>
 8014d8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d8c:	033b      	lsls	r3, r7, #12
 8014d8e:	0b1b      	lsrs	r3, r3, #12
 8014d90:	2a00      	cmp	r2, #0
 8014d92:	d027      	beq.n	8014de4 <_strtod_l+0x8e0>
 8014d94:	4a49      	ldr	r2, [pc, #292]	; (8014ebc <_strtod_l+0x9b8>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d157      	bne.n	8014e4a <_strtod_l+0x946>
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	9b06      	ldr	r3, [sp, #24]
 8014d9e:	4252      	negs	r2, r2
 8014da0:	0031      	movs	r1, r6
 8014da2:	0010      	movs	r0, r2
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d00b      	beq.n	8014dc0 <_strtod_l+0x8bc>
 8014da8:	25d4      	movs	r5, #212	; 0xd4
 8014daa:	4b41      	ldr	r3, [pc, #260]	; (8014eb0 <_strtod_l+0x9ac>)
 8014dac:	04ed      	lsls	r5, r5, #19
 8014dae:	403b      	ands	r3, r7
 8014db0:	0010      	movs	r0, r2
 8014db2:	42ab      	cmp	r3, r5
 8014db4:	d804      	bhi.n	8014dc0 <_strtod_l+0x8bc>
 8014db6:	306c      	adds	r0, #108	; 0x6c
 8014db8:	0d1b      	lsrs	r3, r3, #20
 8014dba:	1ac3      	subs	r3, r0, r3
 8014dbc:	409a      	lsls	r2, r3
 8014dbe:	0010      	movs	r0, r2
 8014dc0:	4281      	cmp	r1, r0
 8014dc2:	d142      	bne.n	8014e4a <_strtod_l+0x946>
 8014dc4:	4b3e      	ldr	r3, [pc, #248]	; (8014ec0 <_strtod_l+0x9bc>)
 8014dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d102      	bne.n	8014dd2 <_strtod_l+0x8ce>
 8014dcc:	1c4b      	adds	r3, r1, #1
 8014dce:	d100      	bne.n	8014dd2 <_strtod_l+0x8ce>
 8014dd0:	e5ce      	b.n	8014970 <_strtod_l+0x46c>
 8014dd2:	4b37      	ldr	r3, [pc, #220]	; (8014eb0 <_strtod_l+0x9ac>)
 8014dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dd6:	2600      	movs	r6, #0
 8014dd8:	401a      	ands	r2, r3
 8014dda:	0013      	movs	r3, r2
 8014ddc:	2280      	movs	r2, #128	; 0x80
 8014dde:	0352      	lsls	r2, r2, #13
 8014de0:	189f      	adds	r7, r3, r2
 8014de2:	e797      	b.n	8014d14 <_strtod_l+0x810>
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d130      	bne.n	8014e4a <_strtod_l+0x946>
 8014de8:	2e00      	cmp	r6, #0
 8014dea:	d12e      	bne.n	8014e4a <_strtod_l+0x946>
 8014dec:	9906      	ldr	r1, [sp, #24]
 8014dee:	003b      	movs	r3, r7
 8014df0:	4a2f      	ldr	r2, [pc, #188]	; (8014eb0 <_strtod_l+0x9ac>)
 8014df2:	2900      	cmp	r1, #0
 8014df4:	d020      	beq.n	8014e38 <_strtod_l+0x934>
 8014df6:	0011      	movs	r1, r2
 8014df8:	20d6      	movs	r0, #214	; 0xd6
 8014dfa:	4039      	ands	r1, r7
 8014dfc:	04c0      	lsls	r0, r0, #19
 8014dfe:	4281      	cmp	r1, r0
 8014e00:	dc1a      	bgt.n	8014e38 <_strtod_l+0x934>
 8014e02:	23dc      	movs	r3, #220	; 0xdc
 8014e04:	049b      	lsls	r3, r3, #18
 8014e06:	4299      	cmp	r1, r3
 8014e08:	dc00      	bgt.n	8014e0c <_strtod_l+0x908>
 8014e0a:	e646      	b.n	8014a9a <_strtod_l+0x596>
 8014e0c:	4b2d      	ldr	r3, [pc, #180]	; (8014ec4 <_strtod_l+0x9c0>)
 8014e0e:	0030      	movs	r0, r6
 8014e10:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e12:	2300      	movs	r3, #0
 8014e14:	931a      	str	r3, [sp, #104]	; 0x68
 8014e16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e1a:	0039      	movs	r1, r7
 8014e1c:	f7ed fb0a 	bl	8002434 <__aeabi_dmul>
 8014e20:	0006      	movs	r6, r0
 8014e22:	000f      	movs	r7, r1
 8014e24:	1e0b      	subs	r3, r1, #0
 8014e26:	d000      	beq.n	8014e2a <_strtod_l+0x926>
 8014e28:	e5ab      	b.n	8014982 <_strtod_l+0x47e>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d000      	beq.n	8014e30 <_strtod_l+0x92c>
 8014e2e:	e5a8      	b.n	8014982 <_strtod_l+0x47e>
 8014e30:	9a04      	ldr	r2, [sp, #16]
 8014e32:	3322      	adds	r3, #34	; 0x22
 8014e34:	6013      	str	r3, [r2, #0]
 8014e36:	e5a4      	b.n	8014982 <_strtod_l+0x47e>
 8014e38:	2601      	movs	r6, #1
 8014e3a:	4013      	ands	r3, r2
 8014e3c:	4a22      	ldr	r2, [pc, #136]	; (8014ec8 <_strtod_l+0x9c4>)
 8014e3e:	4276      	negs	r6, r6
 8014e40:	189b      	adds	r3, r3, r2
 8014e42:	4a1e      	ldr	r2, [pc, #120]	; (8014ebc <_strtod_l+0x9b8>)
 8014e44:	431a      	orrs	r2, r3
 8014e46:	0017      	movs	r7, r2
 8014e48:	e764      	b.n	8014d14 <_strtod_l+0x810>
 8014e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d015      	beq.n	8014e7c <_strtod_l+0x978>
 8014e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e54:	4213      	tst	r3, r2
 8014e56:	d100      	bne.n	8014e5a <_strtod_l+0x956>
 8014e58:	e75c      	b.n	8014d14 <_strtod_l+0x810>
 8014e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e5c:	9a06      	ldr	r2, [sp, #24]
 8014e5e:	0030      	movs	r0, r6
 8014e60:	0039      	movs	r1, r7
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00f      	beq.n	8014e86 <_strtod_l+0x982>
 8014e66:	f7ff fb35 	bl	80144d4 <sulp>
 8014e6a:	0002      	movs	r2, r0
 8014e6c:	000b      	movs	r3, r1
 8014e6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e72:	f7ec fbb9 	bl	80015e8 <__aeabi_dadd>
 8014e76:	0006      	movs	r6, r0
 8014e78:	000f      	movs	r7, r1
 8014e7a:	e74b      	b.n	8014d14 <_strtod_l+0x810>
 8014e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e7e:	4233      	tst	r3, r6
 8014e80:	d100      	bne.n	8014e84 <_strtod_l+0x980>
 8014e82:	e747      	b.n	8014d14 <_strtod_l+0x810>
 8014e84:	e7e9      	b.n	8014e5a <_strtod_l+0x956>
 8014e86:	f7ff fb25 	bl	80144d4 <sulp>
 8014e8a:	0002      	movs	r2, r0
 8014e8c:	000b      	movs	r3, r1
 8014e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e92:	f7ed fd41 	bl	8002918 <__aeabi_dsub>
 8014e96:	2200      	movs	r2, #0
 8014e98:	2300      	movs	r3, #0
 8014e9a:	0006      	movs	r6, r0
 8014e9c:	000f      	movs	r7, r1
 8014e9e:	f7eb fadd 	bl	800045c <__aeabi_dcmpeq>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d000      	beq.n	8014ea8 <_strtod_l+0x9a4>
 8014ea6:	e5f8      	b.n	8014a9a <_strtod_l+0x596>
 8014ea8:	e734      	b.n	8014d14 <_strtod_l+0x810>
 8014eaa:	46c0      	nop			; (mov r8, r8)
 8014eac:	fffffc02 	.word	0xfffffc02
 8014eb0:	7ff00000 	.word	0x7ff00000
 8014eb4:	0801bbc8 	.word	0x0801bbc8
 8014eb8:	fffffbe2 	.word	0xfffffbe2
 8014ebc:	000fffff 	.word	0x000fffff
 8014ec0:	7fefffff 	.word	0x7fefffff
 8014ec4:	39500000 	.word	0x39500000
 8014ec8:	fff00000 	.word	0xfff00000
 8014ecc:	9905      	ldr	r1, [sp, #20]
 8014ece:	0020      	movs	r0, r4
 8014ed0:	f003 fae2 	bl	8018498 <__ratio>
 8014ed4:	2380      	movs	r3, #128	; 0x80
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	05db      	lsls	r3, r3, #23
 8014eda:	9008      	str	r0, [sp, #32]
 8014edc:	9109      	str	r1, [sp, #36]	; 0x24
 8014ede:	f7eb facd 	bl	800047c <__aeabi_dcmple>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d100      	bne.n	8014ee8 <_strtod_l+0x9e4>
 8014ee6:	e07f      	b.n	8014fe8 <_strtod_l+0xae4>
 8014ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d04b      	beq.n	8014f86 <_strtod_l+0xa82>
 8014eee:	2200      	movs	r2, #0
 8014ef0:	4b8a      	ldr	r3, [pc, #552]	; (801511c <_strtod_l+0xc18>)
 8014ef2:	9210      	str	r2, [sp, #64]	; 0x40
 8014ef4:	9311      	str	r3, [sp, #68]	; 0x44
 8014ef6:	4b89      	ldr	r3, [pc, #548]	; (801511c <_strtod_l+0xc18>)
 8014ef8:	9308      	str	r3, [sp, #32]
 8014efa:	4a89      	ldr	r2, [pc, #548]	; (8015120 <_strtod_l+0xc1c>)
 8014efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014efe:	4013      	ands	r3, r2
 8014f00:	9314      	str	r3, [sp, #80]	; 0x50
 8014f02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f04:	4b87      	ldr	r3, [pc, #540]	; (8015124 <_strtod_l+0xc20>)
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d000      	beq.n	8014f0c <_strtod_l+0xa08>
 8014f0a:	e0ba      	b.n	8015082 <_strtod_l+0xb7e>
 8014f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f10:	921a      	str	r2, [sp, #104]	; 0x68
 8014f12:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f14:	4a84      	ldr	r2, [pc, #528]	; (8015128 <_strtod_l+0xc24>)
 8014f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f18:	4694      	mov	ip, r2
 8014f1a:	4463      	add	r3, ip
 8014f1c:	001f      	movs	r7, r3
 8014f1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f22:	0030      	movs	r0, r6
 8014f24:	0039      	movs	r1, r7
 8014f26:	920c      	str	r2, [sp, #48]	; 0x30
 8014f28:	930d      	str	r3, [sp, #52]	; 0x34
 8014f2a:	f003 f9ef 	bl	801830c <__ulp>
 8014f2e:	0002      	movs	r2, r0
 8014f30:	000b      	movs	r3, r1
 8014f32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f36:	f7ed fa7d 	bl	8002434 <__aeabi_dmul>
 8014f3a:	0032      	movs	r2, r6
 8014f3c:	003b      	movs	r3, r7
 8014f3e:	f7ec fb53 	bl	80015e8 <__aeabi_dadd>
 8014f42:	4a77      	ldr	r2, [pc, #476]	; (8015120 <_strtod_l+0xc1c>)
 8014f44:	4b79      	ldr	r3, [pc, #484]	; (801512c <_strtod_l+0xc28>)
 8014f46:	0006      	movs	r6, r0
 8014f48:	400a      	ands	r2, r1
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d964      	bls.n	8015018 <_strtod_l+0xb14>
 8014f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f50:	4a77      	ldr	r2, [pc, #476]	; (8015130 <_strtod_l+0xc2c>)
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d103      	bne.n	8014f5e <_strtod_l+0xa5a>
 8014f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f58:	3301      	adds	r3, #1
 8014f5a:	d100      	bne.n	8014f5e <_strtod_l+0xa5a>
 8014f5c:	e508      	b.n	8014970 <_strtod_l+0x46c>
 8014f5e:	2601      	movs	r6, #1
 8014f60:	4f73      	ldr	r7, [pc, #460]	; (8015130 <_strtod_l+0xc2c>)
 8014f62:	4276      	negs	r6, r6
 8014f64:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f66:	9804      	ldr	r0, [sp, #16]
 8014f68:	f002 ff56 	bl	8017e18 <_Bfree>
 8014f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f6e:	9804      	ldr	r0, [sp, #16]
 8014f70:	f002 ff52 	bl	8017e18 <_Bfree>
 8014f74:	9905      	ldr	r1, [sp, #20]
 8014f76:	9804      	ldr	r0, [sp, #16]
 8014f78:	f002 ff4e 	bl	8017e18 <_Bfree>
 8014f7c:	0021      	movs	r1, r4
 8014f7e:	9804      	ldr	r0, [sp, #16]
 8014f80:	f002 ff4a 	bl	8017e18 <_Bfree>
 8014f84:	e5f4      	b.n	8014b70 <_strtod_l+0x66c>
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	d11e      	bne.n	8014fc8 <_strtod_l+0xac4>
 8014f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f8c:	031b      	lsls	r3, r3, #12
 8014f8e:	d121      	bne.n	8014fd4 <_strtod_l+0xad0>
 8014f90:	9808      	ldr	r0, [sp, #32]
 8014f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f94:	2200      	movs	r2, #0
 8014f96:	4b61      	ldr	r3, [pc, #388]	; (801511c <_strtod_l+0xc18>)
 8014f98:	f7eb fa66 	bl	8000468 <__aeabi_dcmplt>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d11f      	bne.n	8014fe0 <_strtod_l+0xadc>
 8014fa0:	9808      	ldr	r0, [sp, #32]
 8014fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	4b63      	ldr	r3, [pc, #396]	; (8015134 <_strtod_l+0xc30>)
 8014fa8:	f7ed fa44 	bl	8002434 <__aeabi_dmul>
 8014fac:	0005      	movs	r5, r0
 8014fae:	9108      	str	r1, [sp, #32]
 8014fb0:	2280      	movs	r2, #128	; 0x80
 8014fb2:	0612      	lsls	r2, r2, #24
 8014fb4:	4694      	mov	ip, r2
 8014fb6:	9b08      	ldr	r3, [sp, #32]
 8014fb8:	951e      	str	r5, [sp, #120]	; 0x78
 8014fba:	4463      	add	r3, ip
 8014fbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8014fbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014fc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014fc2:	9210      	str	r2, [sp, #64]	; 0x40
 8014fc4:	9311      	str	r3, [sp, #68]	; 0x44
 8014fc6:	e798      	b.n	8014efa <_strtod_l+0x9f6>
 8014fc8:	2e01      	cmp	r6, #1
 8014fca:	d103      	bne.n	8014fd4 <_strtod_l+0xad0>
 8014fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d100      	bne.n	8014fd4 <_strtod_l+0xad0>
 8014fd2:	e562      	b.n	8014a9a <_strtod_l+0x596>
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	4b58      	ldr	r3, [pc, #352]	; (8015138 <_strtod_l+0xc34>)
 8014fd8:	2500      	movs	r5, #0
 8014fda:	9210      	str	r2, [sp, #64]	; 0x40
 8014fdc:	9311      	str	r3, [sp, #68]	; 0x44
 8014fde:	e78a      	b.n	8014ef6 <_strtod_l+0x9f2>
 8014fe0:	4b54      	ldr	r3, [pc, #336]	; (8015134 <_strtod_l+0xc30>)
 8014fe2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014fe4:	9308      	str	r3, [sp, #32]
 8014fe6:	e7e3      	b.n	8014fb0 <_strtod_l+0xaac>
 8014fe8:	4b52      	ldr	r3, [pc, #328]	; (8015134 <_strtod_l+0xc30>)
 8014fea:	9808      	ldr	r0, [sp, #32]
 8014fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fee:	2200      	movs	r2, #0
 8014ff0:	f7ed fa20 	bl	8002434 <__aeabi_dmul>
 8014ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ff6:	0005      	movs	r5, r0
 8014ff8:	9108      	str	r1, [sp, #32]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d107      	bne.n	801500e <_strtod_l+0xb0a>
 8014ffe:	2380      	movs	r3, #128	; 0x80
 8015000:	061b      	lsls	r3, r3, #24
 8015002:	18cb      	adds	r3, r1, r3
 8015004:	9016      	str	r0, [sp, #88]	; 0x58
 8015006:	9317      	str	r3, [sp, #92]	; 0x5c
 8015008:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801500a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801500c:	e7d9      	b.n	8014fc2 <_strtod_l+0xabe>
 801500e:	0002      	movs	r2, r0
 8015010:	9b08      	ldr	r3, [sp, #32]
 8015012:	9216      	str	r2, [sp, #88]	; 0x58
 8015014:	9317      	str	r3, [sp, #92]	; 0x5c
 8015016:	e7f7      	b.n	8015008 <_strtod_l+0xb04>
 8015018:	23d4      	movs	r3, #212	; 0xd4
 801501a:	049b      	lsls	r3, r3, #18
 801501c:	18cf      	adds	r7, r1, r3
 801501e:	9b06      	ldr	r3, [sp, #24]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d19f      	bne.n	8014f64 <_strtod_l+0xa60>
 8015024:	4b3e      	ldr	r3, [pc, #248]	; (8015120 <_strtod_l+0xc1c>)
 8015026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015028:	970c      	str	r7, [sp, #48]	; 0x30
 801502a:	403b      	ands	r3, r7
 801502c:	429a      	cmp	r2, r3
 801502e:	d199      	bne.n	8014f64 <_strtod_l+0xa60>
 8015030:	9908      	ldr	r1, [sp, #32]
 8015032:	0028      	movs	r0, r5
 8015034:	f7ed ffd4 	bl	8002fe0 <__aeabi_d2iz>
 8015038:	f7ee f808 	bl	800304c <__aeabi_i2d>
 801503c:	000b      	movs	r3, r1
 801503e:	0002      	movs	r2, r0
 8015040:	9908      	ldr	r1, [sp, #32]
 8015042:	0028      	movs	r0, r5
 8015044:	f7ed fc68 	bl	8002918 <__aeabi_dsub>
 8015048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801504a:	9008      	str	r0, [sp, #32]
 801504c:	9109      	str	r1, [sp, #36]	; 0x24
 801504e:	2b00      	cmp	r3, #0
 8015050:	d104      	bne.n	801505c <_strtod_l+0xb58>
 8015052:	2e00      	cmp	r6, #0
 8015054:	d102      	bne.n	801505c <_strtod_l+0xb58>
 8015056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015058:	031b      	lsls	r3, r3, #12
 801505a:	d058      	beq.n	801510e <_strtod_l+0xc0a>
 801505c:	9808      	ldr	r0, [sp, #32]
 801505e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015060:	4a36      	ldr	r2, [pc, #216]	; (801513c <_strtod_l+0xc38>)
 8015062:	4b37      	ldr	r3, [pc, #220]	; (8015140 <_strtod_l+0xc3c>)
 8015064:	f7eb fa00 	bl	8000468 <__aeabi_dcmplt>
 8015068:	2800      	cmp	r0, #0
 801506a:	d000      	beq.n	801506e <_strtod_l+0xb6a>
 801506c:	e489      	b.n	8014982 <_strtod_l+0x47e>
 801506e:	9808      	ldr	r0, [sp, #32]
 8015070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015072:	4a34      	ldr	r2, [pc, #208]	; (8015144 <_strtod_l+0xc40>)
 8015074:	4b2f      	ldr	r3, [pc, #188]	; (8015134 <_strtod_l+0xc30>)
 8015076:	f7eb fa0b 	bl	8000490 <__aeabi_dcmpgt>
 801507a:	2800      	cmp	r0, #0
 801507c:	d100      	bne.n	8015080 <_strtod_l+0xb7c>
 801507e:	e771      	b.n	8014f64 <_strtod_l+0xa60>
 8015080:	e47f      	b.n	8014982 <_strtod_l+0x47e>
 8015082:	9b06      	ldr	r3, [sp, #24]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d02a      	beq.n	80150de <_strtod_l+0xbda>
 8015088:	23d4      	movs	r3, #212	; 0xd4
 801508a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801508c:	04db      	lsls	r3, r3, #19
 801508e:	429a      	cmp	r2, r3
 8015090:	d825      	bhi.n	80150de <_strtod_l+0xbda>
 8015092:	4a2d      	ldr	r2, [pc, #180]	; (8015148 <_strtod_l+0xc44>)
 8015094:	4b2d      	ldr	r3, [pc, #180]	; (801514c <_strtod_l+0xc48>)
 8015096:	0028      	movs	r0, r5
 8015098:	9908      	ldr	r1, [sp, #32]
 801509a:	f7eb f9ef 	bl	800047c <__aeabi_dcmple>
 801509e:	2800      	cmp	r0, #0
 80150a0:	d016      	beq.n	80150d0 <_strtod_l+0xbcc>
 80150a2:	0028      	movs	r0, r5
 80150a4:	9908      	ldr	r1, [sp, #32]
 80150a6:	f7eb faad 	bl	8000604 <__aeabi_d2uiz>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d100      	bne.n	80150b0 <_strtod_l+0xbac>
 80150ae:	3001      	adds	r0, #1
 80150b0:	f7ee f806 	bl	80030c0 <__aeabi_ui2d>
 80150b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150b6:	0005      	movs	r5, r0
 80150b8:	9108      	str	r1, [sp, #32]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d122      	bne.n	8015104 <_strtod_l+0xc00>
 80150be:	2380      	movs	r3, #128	; 0x80
 80150c0:	061b      	lsls	r3, r3, #24
 80150c2:	18cb      	adds	r3, r1, r3
 80150c4:	9018      	str	r0, [sp, #96]	; 0x60
 80150c6:	9319      	str	r3, [sp, #100]	; 0x64
 80150c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80150cc:	9210      	str	r2, [sp, #64]	; 0x40
 80150ce:	9311      	str	r3, [sp, #68]	; 0x44
 80150d0:	22d6      	movs	r2, #214	; 0xd6
 80150d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150d4:	04d2      	lsls	r2, r2, #19
 80150d6:	189b      	adds	r3, r3, r2
 80150d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150da:	1a9b      	subs	r3, r3, r2
 80150dc:	9311      	str	r3, [sp, #68]	; 0x44
 80150de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80150e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80150e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80150e6:	f003 f911 	bl	801830c <__ulp>
 80150ea:	0002      	movs	r2, r0
 80150ec:	000b      	movs	r3, r1
 80150ee:	0030      	movs	r0, r6
 80150f0:	0039      	movs	r1, r7
 80150f2:	f7ed f99f 	bl	8002434 <__aeabi_dmul>
 80150f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150fa:	f7ec fa75 	bl	80015e8 <__aeabi_dadd>
 80150fe:	0006      	movs	r6, r0
 8015100:	000f      	movs	r7, r1
 8015102:	e78c      	b.n	801501e <_strtod_l+0xb1a>
 8015104:	0002      	movs	r2, r0
 8015106:	9b08      	ldr	r3, [sp, #32]
 8015108:	9218      	str	r2, [sp, #96]	; 0x60
 801510a:	9319      	str	r3, [sp, #100]	; 0x64
 801510c:	e7dc      	b.n	80150c8 <_strtod_l+0xbc4>
 801510e:	4a0b      	ldr	r2, [pc, #44]	; (801513c <_strtod_l+0xc38>)
 8015110:	4b0f      	ldr	r3, [pc, #60]	; (8015150 <_strtod_l+0xc4c>)
 8015112:	9808      	ldr	r0, [sp, #32]
 8015114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015116:	f7eb f9a7 	bl	8000468 <__aeabi_dcmplt>
 801511a:	e7ae      	b.n	801507a <_strtod_l+0xb76>
 801511c:	3ff00000 	.word	0x3ff00000
 8015120:	7ff00000 	.word	0x7ff00000
 8015124:	7fe00000 	.word	0x7fe00000
 8015128:	fcb00000 	.word	0xfcb00000
 801512c:	7c9fffff 	.word	0x7c9fffff
 8015130:	7fefffff 	.word	0x7fefffff
 8015134:	3fe00000 	.word	0x3fe00000
 8015138:	bff00000 	.word	0xbff00000
 801513c:	94a03595 	.word	0x94a03595
 8015140:	3fdfffff 	.word	0x3fdfffff
 8015144:	35afe535 	.word	0x35afe535
 8015148:	ffc00000 	.word	0xffc00000
 801514c:	41dfffff 	.word	0x41dfffff
 8015150:	3fcfffff 	.word	0x3fcfffff

08015154 <strtod>:
 8015154:	4b06      	ldr	r3, [pc, #24]	; (8015170 <strtod+0x1c>)
 8015156:	b510      	push	{r4, lr}
 8015158:	0004      	movs	r4, r0
 801515a:	6818      	ldr	r0, [r3, #0]
 801515c:	000a      	movs	r2, r1
 801515e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015160:	2b00      	cmp	r3, #0
 8015162:	d100      	bne.n	8015166 <strtod+0x12>
 8015164:	4b03      	ldr	r3, [pc, #12]	; (8015174 <strtod+0x20>)
 8015166:	0021      	movs	r1, r4
 8015168:	f7ff f9cc 	bl	8014504 <_strtod_l>
 801516c:	bd10      	pop	{r4, pc}
 801516e:	46c0      	nop			; (mov r8, r8)
 8015170:	20000128 	.word	0x20000128
 8015174:	20000558 	.word	0x20000558

08015178 <strtok>:
 8015178:	4b03      	ldr	r3, [pc, #12]	; (8015188 <strtok+0x10>)
 801517a:	b510      	push	{r4, lr}
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	2301      	movs	r3, #1
 8015180:	325c      	adds	r2, #92	; 0x5c
 8015182:	f000 f803 	bl	801518c <__strtok_r>
 8015186:	bd10      	pop	{r4, pc}
 8015188:	20000128 	.word	0x20000128

0801518c <__strtok_r>:
 801518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801518e:	2800      	cmp	r0, #0
 8015190:	d104      	bne.n	801519c <__strtok_r+0x10>
 8015192:	6810      	ldr	r0, [r2, #0]
 8015194:	2800      	cmp	r0, #0
 8015196:	d101      	bne.n	801519c <__strtok_r+0x10>
 8015198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801519a:	0020      	movs	r0, r4
 801519c:	000e      	movs	r6, r1
 801519e:	7805      	ldrb	r5, [r0, #0]
 80151a0:	1c44      	adds	r4, r0, #1
 80151a2:	7837      	ldrb	r7, [r6, #0]
 80151a4:	2f00      	cmp	r7, #0
 80151a6:	d104      	bne.n	80151b2 <__strtok_r+0x26>
 80151a8:	2d00      	cmp	r5, #0
 80151aa:	d110      	bne.n	80151ce <__strtok_r+0x42>
 80151ac:	6015      	str	r5, [r2, #0]
 80151ae:	0028      	movs	r0, r5
 80151b0:	e7f2      	b.n	8015198 <__strtok_r+0xc>
 80151b2:	3601      	adds	r6, #1
 80151b4:	42bd      	cmp	r5, r7
 80151b6:	d1f4      	bne.n	80151a2 <__strtok_r+0x16>
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d1ee      	bne.n	801519a <__strtok_r+0xe>
 80151bc:	6014      	str	r4, [r2, #0]
 80151be:	7003      	strb	r3, [r0, #0]
 80151c0:	e7ea      	b.n	8015198 <__strtok_r+0xc>
 80151c2:	0033      	movs	r3, r6
 80151c4:	e00d      	b.n	80151e2 <__strtok_r+0x56>
 80151c6:	3501      	adds	r5, #1
 80151c8:	2f00      	cmp	r7, #0
 80151ca:	d103      	bne.n	80151d4 <__strtok_r+0x48>
 80151cc:	001c      	movs	r4, r3
 80151ce:	000d      	movs	r5, r1
 80151d0:	7826      	ldrb	r6, [r4, #0]
 80151d2:	1c63      	adds	r3, r4, #1
 80151d4:	782f      	ldrb	r7, [r5, #0]
 80151d6:	42be      	cmp	r6, r7
 80151d8:	d1f5      	bne.n	80151c6 <__strtok_r+0x3a>
 80151da:	2e00      	cmp	r6, #0
 80151dc:	d0f1      	beq.n	80151c2 <__strtok_r+0x36>
 80151de:	2100      	movs	r1, #0
 80151e0:	7021      	strb	r1, [r4, #0]
 80151e2:	6013      	str	r3, [r2, #0]
 80151e4:	e7d8      	b.n	8015198 <__strtok_r+0xc>
	...

080151e8 <_strtol_l.isra.0>:
 80151e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ea:	001f      	movs	r7, r3
 80151ec:	000e      	movs	r6, r1
 80151ee:	b087      	sub	sp, #28
 80151f0:	9005      	str	r0, [sp, #20]
 80151f2:	9101      	str	r1, [sp, #4]
 80151f4:	9202      	str	r2, [sp, #8]
 80151f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80151f8:	7834      	ldrb	r4, [r6, #0]
 80151fa:	f7fe fc9f 	bl	8013b3c <__locale_ctype_ptr_l>
 80151fe:	2208      	movs	r2, #8
 8015200:	1900      	adds	r0, r0, r4
 8015202:	7843      	ldrb	r3, [r0, #1]
 8015204:	1c75      	adds	r5, r6, #1
 8015206:	4013      	ands	r3, r2
 8015208:	d136      	bne.n	8015278 <_strtol_l.isra.0+0x90>
 801520a:	2c2d      	cmp	r4, #45	; 0x2d
 801520c:	d136      	bne.n	801527c <_strtol_l.isra.0+0x94>
 801520e:	1cb5      	adds	r5, r6, #2
 8015210:	7874      	ldrb	r4, [r6, #1]
 8015212:	2601      	movs	r6, #1
 8015214:	2f00      	cmp	r7, #0
 8015216:	d062      	beq.n	80152de <_strtol_l.isra.0+0xf6>
 8015218:	2f10      	cmp	r7, #16
 801521a:	d109      	bne.n	8015230 <_strtol_l.isra.0+0x48>
 801521c:	2c30      	cmp	r4, #48	; 0x30
 801521e:	d107      	bne.n	8015230 <_strtol_l.isra.0+0x48>
 8015220:	2220      	movs	r2, #32
 8015222:	782b      	ldrb	r3, [r5, #0]
 8015224:	4393      	bics	r3, r2
 8015226:	2b58      	cmp	r3, #88	; 0x58
 8015228:	d154      	bne.n	80152d4 <_strtol_l.isra.0+0xec>
 801522a:	2710      	movs	r7, #16
 801522c:	786c      	ldrb	r4, [r5, #1]
 801522e:	3502      	adds	r5, #2
 8015230:	4b2d      	ldr	r3, [pc, #180]	; (80152e8 <_strtol_l.isra.0+0x100>)
 8015232:	0039      	movs	r1, r7
 8015234:	18f3      	adds	r3, r6, r3
 8015236:	0018      	movs	r0, r3
 8015238:	9303      	str	r3, [sp, #12]
 801523a:	f7eb f80f 	bl	800025c <__aeabi_uidivmod>
 801523e:	9104      	str	r1, [sp, #16]
 8015240:	2101      	movs	r1, #1
 8015242:	2300      	movs	r3, #0
 8015244:	4249      	negs	r1, r1
 8015246:	0002      	movs	r2, r0
 8015248:	468c      	mov	ip, r1
 801524a:	0018      	movs	r0, r3
 801524c:	0021      	movs	r1, r4
 801524e:	3930      	subs	r1, #48	; 0x30
 8015250:	2909      	cmp	r1, #9
 8015252:	d81a      	bhi.n	801528a <_strtol_l.isra.0+0xa2>
 8015254:	000c      	movs	r4, r1
 8015256:	42a7      	cmp	r7, r4
 8015258:	dd23      	ble.n	80152a2 <_strtol_l.isra.0+0xba>
 801525a:	1c59      	adds	r1, r3, #1
 801525c:	d009      	beq.n	8015272 <_strtol_l.isra.0+0x8a>
 801525e:	4663      	mov	r3, ip
 8015260:	4282      	cmp	r2, r0
 8015262:	d306      	bcc.n	8015272 <_strtol_l.isra.0+0x8a>
 8015264:	d102      	bne.n	801526c <_strtol_l.isra.0+0x84>
 8015266:	9904      	ldr	r1, [sp, #16]
 8015268:	42a1      	cmp	r1, r4
 801526a:	db02      	blt.n	8015272 <_strtol_l.isra.0+0x8a>
 801526c:	2301      	movs	r3, #1
 801526e:	4378      	muls	r0, r7
 8015270:	1820      	adds	r0, r4, r0
 8015272:	782c      	ldrb	r4, [r5, #0]
 8015274:	3501      	adds	r5, #1
 8015276:	e7e9      	b.n	801524c <_strtol_l.isra.0+0x64>
 8015278:	002e      	movs	r6, r5
 801527a:	e7bc      	b.n	80151f6 <_strtol_l.isra.0+0xe>
 801527c:	2c2b      	cmp	r4, #43	; 0x2b
 801527e:	d001      	beq.n	8015284 <_strtol_l.isra.0+0x9c>
 8015280:	001e      	movs	r6, r3
 8015282:	e7c7      	b.n	8015214 <_strtol_l.isra.0+0x2c>
 8015284:	1cb5      	adds	r5, r6, #2
 8015286:	7874      	ldrb	r4, [r6, #1]
 8015288:	e7fa      	b.n	8015280 <_strtol_l.isra.0+0x98>
 801528a:	0021      	movs	r1, r4
 801528c:	3941      	subs	r1, #65	; 0x41
 801528e:	2919      	cmp	r1, #25
 8015290:	d801      	bhi.n	8015296 <_strtol_l.isra.0+0xae>
 8015292:	3c37      	subs	r4, #55	; 0x37
 8015294:	e7df      	b.n	8015256 <_strtol_l.isra.0+0x6e>
 8015296:	0021      	movs	r1, r4
 8015298:	3961      	subs	r1, #97	; 0x61
 801529a:	2919      	cmp	r1, #25
 801529c:	d801      	bhi.n	80152a2 <_strtol_l.isra.0+0xba>
 801529e:	3c57      	subs	r4, #87	; 0x57
 80152a0:	e7d9      	b.n	8015256 <_strtol_l.isra.0+0x6e>
 80152a2:	1c5a      	adds	r2, r3, #1
 80152a4:	d108      	bne.n	80152b8 <_strtol_l.isra.0+0xd0>
 80152a6:	9a05      	ldr	r2, [sp, #20]
 80152a8:	3323      	adds	r3, #35	; 0x23
 80152aa:	6013      	str	r3, [r2, #0]
 80152ac:	9b02      	ldr	r3, [sp, #8]
 80152ae:	9803      	ldr	r0, [sp, #12]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d109      	bne.n	80152c8 <_strtol_l.isra.0+0xe0>
 80152b4:	b007      	add	sp, #28
 80152b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152b8:	2e00      	cmp	r6, #0
 80152ba:	d000      	beq.n	80152be <_strtol_l.isra.0+0xd6>
 80152bc:	4240      	negs	r0, r0
 80152be:	9a02      	ldr	r2, [sp, #8]
 80152c0:	2a00      	cmp	r2, #0
 80152c2:	d0f7      	beq.n	80152b4 <_strtol_l.isra.0+0xcc>
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d001      	beq.n	80152cc <_strtol_l.isra.0+0xe4>
 80152c8:	1e6b      	subs	r3, r5, #1
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	9b02      	ldr	r3, [sp, #8]
 80152ce:	9a01      	ldr	r2, [sp, #4]
 80152d0:	601a      	str	r2, [r3, #0]
 80152d2:	e7ef      	b.n	80152b4 <_strtol_l.isra.0+0xcc>
 80152d4:	2430      	movs	r4, #48	; 0x30
 80152d6:	2f00      	cmp	r7, #0
 80152d8:	d1aa      	bne.n	8015230 <_strtol_l.isra.0+0x48>
 80152da:	2708      	movs	r7, #8
 80152dc:	e7a8      	b.n	8015230 <_strtol_l.isra.0+0x48>
 80152de:	2c30      	cmp	r4, #48	; 0x30
 80152e0:	d09e      	beq.n	8015220 <_strtol_l.isra.0+0x38>
 80152e2:	270a      	movs	r7, #10
 80152e4:	e7a4      	b.n	8015230 <_strtol_l.isra.0+0x48>
 80152e6:	46c0      	nop			; (mov r8, r8)
 80152e8:	7fffffff 	.word	0x7fffffff

080152ec <strtol>:
 80152ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152ee:	0013      	movs	r3, r2
 80152f0:	4a06      	ldr	r2, [pc, #24]	; (801530c <strtol+0x20>)
 80152f2:	0005      	movs	r5, r0
 80152f4:	6810      	ldr	r0, [r2, #0]
 80152f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80152f8:	2c00      	cmp	r4, #0
 80152fa:	d100      	bne.n	80152fe <strtol+0x12>
 80152fc:	4c04      	ldr	r4, [pc, #16]	; (8015310 <strtol+0x24>)
 80152fe:	000a      	movs	r2, r1
 8015300:	9400      	str	r4, [sp, #0]
 8015302:	0029      	movs	r1, r5
 8015304:	f7ff ff70 	bl	80151e8 <_strtol_l.isra.0>
 8015308:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801530a:	46c0      	nop			; (mov r8, r8)
 801530c:	20000128 	.word	0x20000128
 8015310:	20000558 	.word	0x20000558

08015314 <_svfprintf_r>:
 8015314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015316:	b0d9      	sub	sp, #356	; 0x164
 8015318:	910b      	str	r1, [sp, #44]	; 0x2c
 801531a:	9209      	str	r2, [sp, #36]	; 0x24
 801531c:	001c      	movs	r4, r3
 801531e:	900a      	str	r0, [sp, #40]	; 0x28
 8015320:	f002 fd26 	bl	8017d70 <_localeconv_r>
 8015324:	6803      	ldr	r3, [r0, #0]
 8015326:	0018      	movs	r0, r3
 8015328:	931c      	str	r3, [sp, #112]	; 0x70
 801532a:	f7ea fef5 	bl	8000118 <strlen>
 801532e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015330:	9014      	str	r0, [sp, #80]	; 0x50
 8015332:	899b      	ldrh	r3, [r3, #12]
 8015334:	061b      	lsls	r3, r3, #24
 8015336:	d518      	bpl.n	801536a <_svfprintf_r+0x56>
 8015338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801533a:	691b      	ldr	r3, [r3, #16]
 801533c:	9308      	str	r3, [sp, #32]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d113      	bne.n	801536a <_svfprintf_r+0x56>
 8015342:	2140      	movs	r1, #64	; 0x40
 8015344:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015346:	f7fe fc1f 	bl	8013b88 <_malloc_r>
 801534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801534c:	6018      	str	r0, [r3, #0]
 801534e:	6118      	str	r0, [r3, #16]
 8015350:	2800      	cmp	r0, #0
 8015352:	d107      	bne.n	8015364 <_svfprintf_r+0x50>
 8015354:	230c      	movs	r3, #12
 8015356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015358:	6013      	str	r3, [r2, #0]
 801535a:	3b0d      	subs	r3, #13
 801535c:	9315      	str	r3, [sp, #84]	; 0x54
 801535e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015360:	b059      	add	sp, #356	; 0x164
 8015362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015364:	2340      	movs	r3, #64	; 0x40
 8015366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015368:	6153      	str	r3, [r2, #20]
 801536a:	2600      	movs	r6, #0
 801536c:	af2f      	add	r7, sp, #188	; 0xbc
 801536e:	972c      	str	r7, [sp, #176]	; 0xb0
 8015370:	962e      	str	r6, [sp, #184]	; 0xb8
 8015372:	962d      	str	r6, [sp, #180]	; 0xb4
 8015374:	960d      	str	r6, [sp, #52]	; 0x34
 8015376:	961a      	str	r6, [sp, #104]	; 0x68
 8015378:	9619      	str	r6, [sp, #100]	; 0x64
 801537a:	961e      	str	r6, [sp, #120]	; 0x78
 801537c:	961d      	str	r6, [sp, #116]	; 0x74
 801537e:	9613      	str	r6, [sp, #76]	; 0x4c
 8015380:	961b      	str	r6, [sp, #108]	; 0x6c
 8015382:	961f      	str	r6, [sp, #124]	; 0x7c
 8015384:	9615      	str	r6, [sp, #84]	; 0x54
 8015386:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015388:	782b      	ldrb	r3, [r5, #0]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d002      	beq.n	8015394 <_svfprintf_r+0x80>
 801538e:	2b25      	cmp	r3, #37	; 0x25
 8015390:	d000      	beq.n	8015394 <_svfprintf_r+0x80>
 8015392:	e095      	b.n	80154c0 <_svfprintf_r+0x1ac>
 8015394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015396:	1aee      	subs	r6, r5, r3
 8015398:	d017      	beq.n	80153ca <_svfprintf_r+0xb6>
 801539a:	603b      	str	r3, [r7, #0]
 801539c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801539e:	607e      	str	r6, [r7, #4]
 80153a0:	199b      	adds	r3, r3, r6
 80153a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80153a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153a6:	3708      	adds	r7, #8
 80153a8:	9308      	str	r3, [sp, #32]
 80153aa:	3301      	adds	r3, #1
 80153ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ae:	2b07      	cmp	r3, #7
 80153b0:	dd08      	ble.n	80153c4 <_svfprintf_r+0xb0>
 80153b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80153b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153b8:	f003 f900 	bl	80185bc <__ssprint_r>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d000      	beq.n	80153c2 <_svfprintf_r+0xae>
 80153c0:	e2d9      	b.n	8015976 <_svfprintf_r+0x662>
 80153c2:	af2f      	add	r7, sp, #188	; 0xbc
 80153c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153c6:	199b      	adds	r3, r3, r6
 80153c8:	9315      	str	r3, [sp, #84]	; 0x54
 80153ca:	782b      	ldrb	r3, [r5, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <_svfprintf_r+0xc0>
 80153d0:	f001 f9e5 	bl	801679e <_svfprintf_r+0x148a>
 80153d4:	1c6b      	adds	r3, r5, #1
 80153d6:	221b      	movs	r2, #27
 80153d8:	9311      	str	r3, [sp, #68]	; 0x44
 80153da:	2300      	movs	r3, #0
 80153dc:	a91e      	add	r1, sp, #120	; 0x78
 80153de:	1852      	adds	r2, r2, r1
 80153e0:	7013      	strb	r3, [r2, #0]
 80153e2:	2201      	movs	r2, #1
 80153e4:	001e      	movs	r6, r3
 80153e6:	2520      	movs	r5, #32
 80153e8:	4252      	negs	r2, r2
 80153ea:	9208      	str	r2, [sp, #32]
 80153ec:	9316      	str	r3, [sp, #88]	; 0x58
 80153ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	930e      	str	r3, [sp, #56]	; 0x38
 80153f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153f6:	3301      	adds	r3, #1
 80153f8:	9311      	str	r3, [sp, #68]	; 0x44
 80153fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153fc:	3820      	subs	r0, #32
 80153fe:	285a      	cmp	r0, #90	; 0x5a
 8015400:	d901      	bls.n	8015406 <_svfprintf_r+0xf2>
 8015402:	f000 fe3d 	bl	8016080 <_svfprintf_r+0xd6c>
 8015406:	f7ea fe99 	bl	800013c <__gnu_thumb1_case_shi>
 801540a:	009e      	.short	0x009e
 801540c:	063b063b 	.word	0x063b063b
 8015410:	063b00a7 	.word	0x063b00a7
 8015414:	063b063b 	.word	0x063b063b
 8015418:	063b0080 	.word	0x063b0080
 801541c:	00a9063b 	.word	0x00a9063b
 8015420:	063b00b3 	.word	0x063b00b3
 8015424:	00b900b1 	.word	0x00b900b1
 8015428:	00dd063b 	.word	0x00dd063b
 801542c:	00df00df 	.word	0x00df00df
 8015430:	00df00df 	.word	0x00df00df
 8015434:	00df00df 	.word	0x00df00df
 8015438:	00df00df 	.word	0x00df00df
 801543c:	063b00df 	.word	0x063b00df
 8015440:	063b063b 	.word	0x063b063b
 8015444:	063b063b 	.word	0x063b063b
 8015448:	063b063b 	.word	0x063b063b
 801544c:	063b0240 	.word	0x063b0240
 8015450:	01fd010a 	.word	0x01fd010a
 8015454:	02400240 	.word	0x02400240
 8015458:	063b0240 	.word	0x063b0240
 801545c:	063b063b 	.word	0x063b063b
 8015460:	00f1063b 	.word	0x00f1063b
 8015464:	063b063b 	.word	0x063b063b
 8015468:	063b04e2 	.word	0x063b04e2
 801546c:	063b063b 	.word	0x063b063b
 8015470:	063b0537 	.word	0x063b0537
 8015474:	063b0557 	.word	0x063b0557
 8015478:	005d063b 	.word	0x005d063b
 801547c:	063b063b 	.word	0x063b063b
 8015480:	063b063b 	.word	0x063b063b
 8015484:	063b063b 	.word	0x063b063b
 8015488:	063b063b 	.word	0x063b063b
 801548c:	063b0240 	.word	0x063b0240
 8015490:	01ff010a 	.word	0x01ff010a
 8015494:	02400240 	.word	0x02400240
 8015498:	00f30240 	.word	0x00f30240
 801549c:	010601ff 	.word	0x010601ff
 80154a0:	00ff063b 	.word	0x00ff063b
 80154a4:	04c5063b 	.word	0x04c5063b
 80154a8:	052704e4 	.word	0x052704e4
 80154ac:	063b0106 	.word	0x063b0106
 80154b0:	fff20537 	.word	0xfff20537
 80154b4:	063b0559 	.word	0x063b0559
 80154b8:	0582063b 	.word	0x0582063b
 80154bc:	fff2063b 	.word	0xfff2063b
 80154c0:	3501      	adds	r5, #1
 80154c2:	e761      	b.n	8015388 <_svfprintf_r+0x74>
 80154c4:	4bcb      	ldr	r3, [pc, #812]	; (80157f4 <_svfprintf_r+0x4e0>)
 80154c6:	2220      	movs	r2, #32
 80154c8:	931e      	str	r3, [sp, #120]	; 0x78
 80154ca:	4032      	ands	r2, r6
 80154cc:	d101      	bne.n	80154d2 <_svfprintf_r+0x1be>
 80154ce:	f000 fd21 	bl	8015f14 <_svfprintf_r+0xc00>
 80154d2:	2307      	movs	r3, #7
 80154d4:	3407      	adds	r4, #7
 80154d6:	439c      	bics	r4, r3
 80154d8:	0023      	movs	r3, r4
 80154da:	3308      	adds	r3, #8
 80154dc:	9312      	str	r3, [sp, #72]	; 0x48
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	6864      	ldr	r4, [r4, #4]
 80154e2:	9306      	str	r3, [sp, #24]
 80154e4:	9407      	str	r4, [sp, #28]
 80154e6:	07f3      	lsls	r3, r6, #31
 80154e8:	d50a      	bpl.n	8015500 <_svfprintf_r+0x1ec>
 80154ea:	9b06      	ldr	r3, [sp, #24]
 80154ec:	9a07      	ldr	r2, [sp, #28]
 80154ee:	4313      	orrs	r3, r2
 80154f0:	d006      	beq.n	8015500 <_svfprintf_r+0x1ec>
 80154f2:	2230      	movs	r2, #48	; 0x30
 80154f4:	ab25      	add	r3, sp, #148	; 0x94
 80154f6:	701a      	strb	r2, [r3, #0]
 80154f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154fa:	705a      	strb	r2, [r3, #1]
 80154fc:	2302      	movs	r3, #2
 80154fe:	431e      	orrs	r6, r3
 8015500:	4bbd      	ldr	r3, [pc, #756]	; (80157f8 <_svfprintf_r+0x4e4>)
 8015502:	401e      	ands	r6, r3
 8015504:	2302      	movs	r3, #2
 8015506:	f000 fc74 	bl	8015df2 <_svfprintf_r+0xade>
 801550a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801550c:	f002 fc30 	bl	8017d70 <_localeconv_r>
 8015510:	6843      	ldr	r3, [r0, #4]
 8015512:	0018      	movs	r0, r3
 8015514:	931f      	str	r3, [sp, #124]	; 0x7c
 8015516:	f7ea fdff 	bl	8000118 <strlen>
 801551a:	901b      	str	r0, [sp, #108]	; 0x6c
 801551c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801551e:	f002 fc27 	bl	8017d70 <_localeconv_r>
 8015522:	6883      	ldr	r3, [r0, #8]
 8015524:	9313      	str	r3, [sp, #76]	; 0x4c
 8015526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015528:	2b00      	cmp	r3, #0
 801552a:	d100      	bne.n	801552e <_svfprintf_r+0x21a>
 801552c:	e75f      	b.n	80153ee <_svfprintf_r+0xda>
 801552e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015530:	2b00      	cmp	r3, #0
 8015532:	d100      	bne.n	8015536 <_svfprintf_r+0x222>
 8015534:	e75b      	b.n	80153ee <_svfprintf_r+0xda>
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d100      	bne.n	801553e <_svfprintf_r+0x22a>
 801553c:	e757      	b.n	80153ee <_svfprintf_r+0xda>
 801553e:	2380      	movs	r3, #128	; 0x80
 8015540:	00db      	lsls	r3, r3, #3
 8015542:	431e      	orrs	r6, r3
 8015544:	e753      	b.n	80153ee <_svfprintf_r+0xda>
 8015546:	231b      	movs	r3, #27
 8015548:	aa1e      	add	r2, sp, #120	; 0x78
 801554a:	189b      	adds	r3, r3, r2
 801554c:	781a      	ldrb	r2, [r3, #0]
 801554e:	2a00      	cmp	r2, #0
 8015550:	d000      	beq.n	8015554 <_svfprintf_r+0x240>
 8015552:	e74c      	b.n	80153ee <_svfprintf_r+0xda>
 8015554:	701d      	strb	r5, [r3, #0]
 8015556:	e74a      	b.n	80153ee <_svfprintf_r+0xda>
 8015558:	2301      	movs	r3, #1
 801555a:	e7f2      	b.n	8015542 <_svfprintf_r+0x22e>
 801555c:	6823      	ldr	r3, [r4, #0]
 801555e:	3404      	adds	r4, #4
 8015560:	9316      	str	r3, [sp, #88]	; 0x58
 8015562:	2b00      	cmp	r3, #0
 8015564:	db00      	blt.n	8015568 <_svfprintf_r+0x254>
 8015566:	e742      	b.n	80153ee <_svfprintf_r+0xda>
 8015568:	425b      	negs	r3, r3
 801556a:	9316      	str	r3, [sp, #88]	; 0x58
 801556c:	2304      	movs	r3, #4
 801556e:	e7e8      	b.n	8015542 <_svfprintf_r+0x22e>
 8015570:	231b      	movs	r3, #27
 8015572:	aa1e      	add	r2, sp, #120	; 0x78
 8015574:	189b      	adds	r3, r3, r2
 8015576:	222b      	movs	r2, #43	; 0x2b
 8015578:	701a      	strb	r2, [r3, #0]
 801557a:	e738      	b.n	80153ee <_svfprintf_r+0xda>
 801557c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801557e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015580:	7812      	ldrb	r2, [r2, #0]
 8015582:	3301      	adds	r3, #1
 8015584:	920e      	str	r2, [sp, #56]	; 0x38
 8015586:	2a2a      	cmp	r2, #42	; 0x2a
 8015588:	d008      	beq.n	801559c <_svfprintf_r+0x288>
 801558a:	2200      	movs	r2, #0
 801558c:	9208      	str	r2, [sp, #32]
 801558e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015590:	001a      	movs	r2, r3
 8015592:	3930      	subs	r1, #48	; 0x30
 8015594:	2909      	cmp	r1, #9
 8015596:	d90c      	bls.n	80155b2 <_svfprintf_r+0x29e>
 8015598:	9211      	str	r2, [sp, #68]	; 0x44
 801559a:	e72e      	b.n	80153fa <_svfprintf_r+0xe6>
 801559c:	6821      	ldr	r1, [r4, #0]
 801559e:	1d22      	adds	r2, r4, #4
 80155a0:	9108      	str	r1, [sp, #32]
 80155a2:	2900      	cmp	r1, #0
 80155a4:	da02      	bge.n	80155ac <_svfprintf_r+0x298>
 80155a6:	2101      	movs	r1, #1
 80155a8:	4249      	negs	r1, r1
 80155aa:	9108      	str	r1, [sp, #32]
 80155ac:	0014      	movs	r4, r2
 80155ae:	9311      	str	r3, [sp, #68]	; 0x44
 80155b0:	e71d      	b.n	80153ee <_svfprintf_r+0xda>
 80155b2:	200a      	movs	r0, #10
 80155b4:	9a08      	ldr	r2, [sp, #32]
 80155b6:	4342      	muls	r2, r0
 80155b8:	1852      	adds	r2, r2, r1
 80155ba:	9208      	str	r2, [sp, #32]
 80155bc:	781a      	ldrb	r2, [r3, #0]
 80155be:	3301      	adds	r3, #1
 80155c0:	920e      	str	r2, [sp, #56]	; 0x38
 80155c2:	e7e4      	b.n	801558e <_svfprintf_r+0x27a>
 80155c4:	2380      	movs	r3, #128	; 0x80
 80155c6:	e7bc      	b.n	8015542 <_svfprintf_r+0x22e>
 80155c8:	2300      	movs	r3, #0
 80155ca:	9316      	str	r3, [sp, #88]	; 0x58
 80155cc:	220a      	movs	r2, #10
 80155ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80155d0:	4353      	muls	r3, r2
 80155d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155d4:	3a30      	subs	r2, #48	; 0x30
 80155d6:	18d3      	adds	r3, r2, r3
 80155d8:	9316      	str	r3, [sp, #88]	; 0x58
 80155da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	9211      	str	r2, [sp, #68]	; 0x44
 80155e2:	930e      	str	r3, [sp, #56]	; 0x38
 80155e4:	3b30      	subs	r3, #48	; 0x30
 80155e6:	2b09      	cmp	r3, #9
 80155e8:	d9f0      	bls.n	80155cc <_svfprintf_r+0x2b8>
 80155ea:	e7d5      	b.n	8015598 <_svfprintf_r+0x284>
 80155ec:	2308      	movs	r3, #8
 80155ee:	e7a8      	b.n	8015542 <_svfprintf_r+0x22e>
 80155f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	2b68      	cmp	r3, #104	; 0x68
 80155f6:	d105      	bne.n	8015604 <_svfprintf_r+0x2f0>
 80155f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155fa:	3301      	adds	r3, #1
 80155fc:	9311      	str	r3, [sp, #68]	; 0x44
 80155fe:	2380      	movs	r3, #128	; 0x80
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	e79e      	b.n	8015542 <_svfprintf_r+0x22e>
 8015604:	2340      	movs	r3, #64	; 0x40
 8015606:	e79c      	b.n	8015542 <_svfprintf_r+0x22e>
 8015608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	2b6c      	cmp	r3, #108	; 0x6c
 801560e:	d104      	bne.n	801561a <_svfprintf_r+0x306>
 8015610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015612:	3301      	adds	r3, #1
 8015614:	9311      	str	r3, [sp, #68]	; 0x44
 8015616:	432e      	orrs	r6, r5
 8015618:	e6e9      	b.n	80153ee <_svfprintf_r+0xda>
 801561a:	2310      	movs	r3, #16
 801561c:	e791      	b.n	8015542 <_svfprintf_r+0x22e>
 801561e:	1d23      	adds	r3, r4, #4
 8015620:	6822      	ldr	r2, [r4, #0]
 8015622:	9312      	str	r3, [sp, #72]	; 0x48
 8015624:	ab3f      	add	r3, sp, #252	; 0xfc
 8015626:	701a      	strb	r2, [r3, #0]
 8015628:	221b      	movs	r2, #27
 801562a:	2000      	movs	r0, #0
 801562c:	a91e      	add	r1, sp, #120	; 0x78
 801562e:	1852      	adds	r2, r2, r1
 8015630:	7010      	strb	r0, [r2, #0]
 8015632:	2201      	movs	r2, #1
 8015634:	0005      	movs	r5, r0
 8015636:	900c      	str	r0, [sp, #48]	; 0x30
 8015638:	9208      	str	r2, [sp, #32]
 801563a:	9017      	str	r0, [sp, #92]	; 0x5c
 801563c:	9010      	str	r0, [sp, #64]	; 0x40
 801563e:	900f      	str	r0, [sp, #60]	; 0x3c
 8015640:	9309      	str	r3, [sp, #36]	; 0x24
 8015642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015644:	9a08      	ldr	r2, [sp, #32]
 8015646:	9318      	str	r3, [sp, #96]	; 0x60
 8015648:	4293      	cmp	r3, r2
 801564a:	da00      	bge.n	801564e <_svfprintf_r+0x33a>
 801564c:	9218      	str	r2, [sp, #96]	; 0x60
 801564e:	231b      	movs	r3, #27
 8015650:	aa1e      	add	r2, sp, #120	; 0x78
 8015652:	189b      	adds	r3, r3, r2
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	1e5a      	subs	r2, r3, #1
 8015658:	4193      	sbcs	r3, r2
 801565a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801565c:	18d3      	adds	r3, r2, r3
 801565e:	9318      	str	r3, [sp, #96]	; 0x60
 8015660:	2302      	movs	r3, #2
 8015662:	4033      	ands	r3, r6
 8015664:	9320      	str	r3, [sp, #128]	; 0x80
 8015666:	d002      	beq.n	801566e <_svfprintf_r+0x35a>
 8015668:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801566a:	3302      	adds	r3, #2
 801566c:	9318      	str	r3, [sp, #96]	; 0x60
 801566e:	2384      	movs	r3, #132	; 0x84
 8015670:	4033      	ands	r3, r6
 8015672:	9321      	str	r3, [sp, #132]	; 0x84
 8015674:	d121      	bne.n	80156ba <_svfprintf_r+0x3a6>
 8015676:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015678:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801567a:	1a9c      	subs	r4, r3, r2
 801567c:	2c00      	cmp	r4, #0
 801567e:	dd1c      	ble.n	80156ba <_svfprintf_r+0x3a6>
 8015680:	0039      	movs	r1, r7
 8015682:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015684:	485d      	ldr	r0, [pc, #372]	; (80157fc <_svfprintf_r+0x4e8>)
 8015686:	9322      	str	r3, [sp, #136]	; 0x88
 8015688:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801568a:	3301      	adds	r3, #1
 801568c:	3108      	adds	r1, #8
 801568e:	6038      	str	r0, [r7, #0]
 8015690:	2c10      	cmp	r4, #16
 8015692:	dd01      	ble.n	8015698 <_svfprintf_r+0x384>
 8015694:	f000 fd08 	bl	80160a8 <_svfprintf_r+0xd94>
 8015698:	607c      	str	r4, [r7, #4]
 801569a:	18a4      	adds	r4, r4, r2
 801569c:	942e      	str	r4, [sp, #184]	; 0xb8
 801569e:	932d      	str	r3, [sp, #180]	; 0xb4
 80156a0:	000f      	movs	r7, r1
 80156a2:	2b07      	cmp	r3, #7
 80156a4:	dd09      	ble.n	80156ba <_svfprintf_r+0x3a6>
 80156a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80156a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156ac:	f002 ff86 	bl	80185bc <__ssprint_r>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d001      	beq.n	80156b8 <_svfprintf_r+0x3a4>
 80156b4:	f001 f852 	bl	801675c <_svfprintf_r+0x1448>
 80156b8:	af2f      	add	r7, sp, #188	; 0xbc
 80156ba:	231b      	movs	r3, #27
 80156bc:	aa1e      	add	r2, sp, #120	; 0x78
 80156be:	189b      	adds	r3, r3, r2
 80156c0:	781a      	ldrb	r2, [r3, #0]
 80156c2:	2a00      	cmp	r2, #0
 80156c4:	d017      	beq.n	80156f6 <_svfprintf_r+0x3e2>
 80156c6:	603b      	str	r3, [r7, #0]
 80156c8:	2301      	movs	r3, #1
 80156ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156cc:	607b      	str	r3, [r7, #4]
 80156ce:	0013      	movs	r3, r2
 80156d0:	3301      	adds	r3, #1
 80156d2:	932e      	str	r3, [sp, #184]	; 0xb8
 80156d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156d6:	3708      	adds	r7, #8
 80156d8:	9322      	str	r3, [sp, #136]	; 0x88
 80156da:	3301      	adds	r3, #1
 80156dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80156de:	2b07      	cmp	r3, #7
 80156e0:	dd09      	ble.n	80156f6 <_svfprintf_r+0x3e2>
 80156e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80156e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156e8:	f002 ff68 	bl	80185bc <__ssprint_r>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d001      	beq.n	80156f4 <_svfprintf_r+0x3e0>
 80156f0:	f001 f834 	bl	801675c <_svfprintf_r+0x1448>
 80156f4:	af2f      	add	r7, sp, #188	; 0xbc
 80156f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d019      	beq.n	8015730 <_svfprintf_r+0x41c>
 80156fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156fe:	9320      	str	r3, [sp, #128]	; 0x80
 8015700:	ab25      	add	r3, sp, #148	; 0x94
 8015702:	603b      	str	r3, [r7, #0]
 8015704:	2302      	movs	r3, #2
 8015706:	607b      	str	r3, [r7, #4]
 8015708:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801570a:	3708      	adds	r7, #8
 801570c:	3302      	adds	r3, #2
 801570e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015710:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015712:	9320      	str	r3, [sp, #128]	; 0x80
 8015714:	3301      	adds	r3, #1
 8015716:	932d      	str	r3, [sp, #180]	; 0xb4
 8015718:	2b07      	cmp	r3, #7
 801571a:	dd09      	ble.n	8015730 <_svfprintf_r+0x41c>
 801571c:	aa2c      	add	r2, sp, #176	; 0xb0
 801571e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015720:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015722:	f002 ff4b 	bl	80185bc <__ssprint_r>
 8015726:	2800      	cmp	r0, #0
 8015728:	d001      	beq.n	801572e <_svfprintf_r+0x41a>
 801572a:	f001 f817 	bl	801675c <_svfprintf_r+0x1448>
 801572e:	af2f      	add	r7, sp, #188	; 0xbc
 8015730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015732:	2b80      	cmp	r3, #128	; 0x80
 8015734:	d121      	bne.n	801577a <_svfprintf_r+0x466>
 8015736:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015738:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801573a:	1a9c      	subs	r4, r3, r2
 801573c:	2c00      	cmp	r4, #0
 801573e:	dd1c      	ble.n	801577a <_svfprintf_r+0x466>
 8015740:	0039      	movs	r1, r7
 8015742:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015744:	482e      	ldr	r0, [pc, #184]	; (8015800 <_svfprintf_r+0x4ec>)
 8015746:	9320      	str	r3, [sp, #128]	; 0x80
 8015748:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801574a:	3301      	adds	r3, #1
 801574c:	3108      	adds	r1, #8
 801574e:	6038      	str	r0, [r7, #0]
 8015750:	2c10      	cmp	r4, #16
 8015752:	dd01      	ble.n	8015758 <_svfprintf_r+0x444>
 8015754:	f000 fcbc 	bl	80160d0 <_svfprintf_r+0xdbc>
 8015758:	607c      	str	r4, [r7, #4]
 801575a:	18a4      	adds	r4, r4, r2
 801575c:	942e      	str	r4, [sp, #184]	; 0xb8
 801575e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015760:	000f      	movs	r7, r1
 8015762:	2b07      	cmp	r3, #7
 8015764:	dd09      	ble.n	801577a <_svfprintf_r+0x466>
 8015766:	aa2c      	add	r2, sp, #176	; 0xb0
 8015768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801576a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801576c:	f002 ff26 	bl	80185bc <__ssprint_r>
 8015770:	2800      	cmp	r0, #0
 8015772:	d001      	beq.n	8015778 <_svfprintf_r+0x464>
 8015774:	f000 fff2 	bl	801675c <_svfprintf_r+0x1448>
 8015778:	af2f      	add	r7, sp, #188	; 0xbc
 801577a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801577c:	9a08      	ldr	r2, [sp, #32]
 801577e:	1a9c      	subs	r4, r3, r2
 8015780:	2c00      	cmp	r4, #0
 8015782:	dd1c      	ble.n	80157be <_svfprintf_r+0x4aa>
 8015784:	0039      	movs	r1, r7
 8015786:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015788:	481d      	ldr	r0, [pc, #116]	; (8015800 <_svfprintf_r+0x4ec>)
 801578a:	9317      	str	r3, [sp, #92]	; 0x5c
 801578c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801578e:	3301      	adds	r3, #1
 8015790:	3108      	adds	r1, #8
 8015792:	6038      	str	r0, [r7, #0]
 8015794:	2c10      	cmp	r4, #16
 8015796:	dd01      	ble.n	801579c <_svfprintf_r+0x488>
 8015798:	f000 fcb4 	bl	8016104 <_svfprintf_r+0xdf0>
 801579c:	18a2      	adds	r2, r4, r2
 801579e:	607c      	str	r4, [r7, #4]
 80157a0:	922e      	str	r2, [sp, #184]	; 0xb8
 80157a2:	932d      	str	r3, [sp, #180]	; 0xb4
 80157a4:	000f      	movs	r7, r1
 80157a6:	2b07      	cmp	r3, #7
 80157a8:	dd09      	ble.n	80157be <_svfprintf_r+0x4aa>
 80157aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80157ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157b0:	f002 ff04 	bl	80185bc <__ssprint_r>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	d001      	beq.n	80157bc <_svfprintf_r+0x4a8>
 80157b8:	f000 ffd0 	bl	801675c <_svfprintf_r+0x1448>
 80157bc:	af2f      	add	r7, sp, #188	; 0xbc
 80157be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80157c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80157c2:	05f3      	lsls	r3, r6, #23
 80157c4:	d501      	bpl.n	80157ca <_svfprintf_r+0x4b6>
 80157c6:	f000 fcb1 	bl	801612c <_svfprintf_r+0xe18>
 80157ca:	9a08      	ldr	r2, [sp, #32]
 80157cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ce:	4694      	mov	ip, r2
 80157d0:	603b      	str	r3, [r7, #0]
 80157d2:	9b08      	ldr	r3, [sp, #32]
 80157d4:	607b      	str	r3, [r7, #4]
 80157d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157d8:	4463      	add	r3, ip
 80157da:	932e      	str	r3, [sp, #184]	; 0xb8
 80157dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157de:	9308      	str	r3, [sp, #32]
 80157e0:	3301      	adds	r3, #1
 80157e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80157e4:	2b07      	cmp	r3, #7
 80157e6:	dd01      	ble.n	80157ec <_svfprintf_r+0x4d8>
 80157e8:	f000 fd94 	bl	8016314 <_svfprintf_r+0x1000>
 80157ec:	3708      	adds	r7, #8
 80157ee:	f000 fce4 	bl	80161ba <_svfprintf_r+0xea6>
 80157f2:	46c0      	nop			; (mov r8, r8)
 80157f4:	0801bc11 	.word	0x0801bc11
 80157f8:	fffffbff 	.word	0xfffffbff
 80157fc:	0801bc24 	.word	0x0801bc24
 8015800:	0801bc34 	.word	0x0801bc34
 8015804:	2310      	movs	r3, #16
 8015806:	431e      	orrs	r6, r3
 8015808:	06b3      	lsls	r3, r6, #26
 801580a:	d52c      	bpl.n	8015866 <_svfprintf_r+0x552>
 801580c:	2307      	movs	r3, #7
 801580e:	3407      	adds	r4, #7
 8015810:	439c      	bics	r4, r3
 8015812:	0023      	movs	r3, r4
 8015814:	3308      	adds	r3, #8
 8015816:	9312      	str	r3, [sp, #72]	; 0x48
 8015818:	6823      	ldr	r3, [r4, #0]
 801581a:	6864      	ldr	r4, [r4, #4]
 801581c:	9306      	str	r3, [sp, #24]
 801581e:	9407      	str	r4, [sp, #28]
 8015820:	9b07      	ldr	r3, [sp, #28]
 8015822:	2b00      	cmp	r3, #0
 8015824:	da0b      	bge.n	801583e <_svfprintf_r+0x52a>
 8015826:	9906      	ldr	r1, [sp, #24]
 8015828:	9a07      	ldr	r2, [sp, #28]
 801582a:	2400      	movs	r4, #0
 801582c:	424b      	negs	r3, r1
 801582e:	4194      	sbcs	r4, r2
 8015830:	9306      	str	r3, [sp, #24]
 8015832:	9407      	str	r4, [sp, #28]
 8015834:	231b      	movs	r3, #27
 8015836:	aa1e      	add	r2, sp, #120	; 0x78
 8015838:	189b      	adds	r3, r3, r2
 801583a:	222d      	movs	r2, #45	; 0x2d
 801583c:	701a      	strb	r2, [r3, #0]
 801583e:	9b08      	ldr	r3, [sp, #32]
 8015840:	3301      	adds	r3, #1
 8015842:	d000      	beq.n	8015846 <_svfprintf_r+0x532>
 8015844:	e382      	b.n	8015f4c <_svfprintf_r+0xc38>
 8015846:	9b07      	ldr	r3, [sp, #28]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d000      	beq.n	801584e <_svfprintf_r+0x53a>
 801584c:	e3b0      	b.n	8015fb0 <_svfprintf_r+0xc9c>
 801584e:	9b06      	ldr	r3, [sp, #24]
 8015850:	2b09      	cmp	r3, #9
 8015852:	d900      	bls.n	8015856 <_svfprintf_r+0x542>
 8015854:	e3ac      	b.n	8015fb0 <_svfprintf_r+0xc9c>
 8015856:	23e7      	movs	r3, #231	; 0xe7
 8015858:	aa1e      	add	r2, sp, #120	; 0x78
 801585a:	189b      	adds	r3, r3, r2
 801585c:	9a06      	ldr	r2, [sp, #24]
 801585e:	3230      	adds	r2, #48	; 0x30
 8015860:	701a      	strb	r2, [r3, #0]
 8015862:	9309      	str	r3, [sp, #36]	; 0x24
 8015864:	e395      	b.n	8015f92 <_svfprintf_r+0xc7e>
 8015866:	1d23      	adds	r3, r4, #4
 8015868:	9312      	str	r3, [sp, #72]	; 0x48
 801586a:	06f3      	lsls	r3, r6, #27
 801586c:	d504      	bpl.n	8015878 <_svfprintf_r+0x564>
 801586e:	6823      	ldr	r3, [r4, #0]
 8015870:	9306      	str	r3, [sp, #24]
 8015872:	17db      	asrs	r3, r3, #31
 8015874:	9307      	str	r3, [sp, #28]
 8015876:	e7d3      	b.n	8015820 <_svfprintf_r+0x50c>
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	0672      	lsls	r2, r6, #25
 801587c:	d501      	bpl.n	8015882 <_svfprintf_r+0x56e>
 801587e:	b21b      	sxth	r3, r3
 8015880:	e7f6      	b.n	8015870 <_svfprintf_r+0x55c>
 8015882:	05b2      	lsls	r2, r6, #22
 8015884:	d5f4      	bpl.n	8015870 <_svfprintf_r+0x55c>
 8015886:	b25b      	sxtb	r3, r3
 8015888:	e7f2      	b.n	8015870 <_svfprintf_r+0x55c>
 801588a:	2307      	movs	r3, #7
 801588c:	3407      	adds	r4, #7
 801588e:	439c      	bics	r4, r3
 8015890:	0023      	movs	r3, r4
 8015892:	2201      	movs	r2, #1
 8015894:	3308      	adds	r3, #8
 8015896:	9312      	str	r3, [sp, #72]	; 0x48
 8015898:	6823      	ldr	r3, [r4, #0]
 801589a:	4252      	negs	r2, r2
 801589c:	931a      	str	r3, [sp, #104]	; 0x68
 801589e:	6863      	ldr	r3, [r4, #4]
 80158a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80158a2:	005c      	lsls	r4, r3, #1
 80158a4:	0864      	lsrs	r4, r4, #1
 80158a6:	9319      	str	r3, [sp, #100]	; 0x64
 80158a8:	0028      	movs	r0, r5
 80158aa:	4bcf      	ldr	r3, [pc, #828]	; (8015be8 <_svfprintf_r+0x8d4>)
 80158ac:	0021      	movs	r1, r4
 80158ae:	f7ed fb7b 	bl	8002fa8 <__aeabi_dcmpun>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d125      	bne.n	8015902 <_svfprintf_r+0x5ee>
 80158b6:	2201      	movs	r2, #1
 80158b8:	4bcb      	ldr	r3, [pc, #812]	; (8015be8 <_svfprintf_r+0x8d4>)
 80158ba:	4252      	negs	r2, r2
 80158bc:	0028      	movs	r0, r5
 80158be:	0021      	movs	r1, r4
 80158c0:	f7ea fddc 	bl	800047c <__aeabi_dcmple>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d11c      	bne.n	8015902 <_svfprintf_r+0x5ee>
 80158c8:	2200      	movs	r2, #0
 80158ca:	2300      	movs	r3, #0
 80158cc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80158ce:	9919      	ldr	r1, [sp, #100]	; 0x64
 80158d0:	f7ea fdca 	bl	8000468 <__aeabi_dcmplt>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d004      	beq.n	80158e2 <_svfprintf_r+0x5ce>
 80158d8:	231b      	movs	r3, #27
 80158da:	aa1e      	add	r2, sp, #120	; 0x78
 80158dc:	189b      	adds	r3, r3, r2
 80158de:	222d      	movs	r2, #45	; 0x2d
 80158e0:	701a      	strb	r2, [r3, #0]
 80158e2:	4bc2      	ldr	r3, [pc, #776]	; (8015bec <_svfprintf_r+0x8d8>)
 80158e4:	9309      	str	r3, [sp, #36]	; 0x24
 80158e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158e8:	2b47      	cmp	r3, #71	; 0x47
 80158ea:	dc01      	bgt.n	80158f0 <_svfprintf_r+0x5dc>
 80158ec:	4bc0      	ldr	r3, [pc, #768]	; (8015bf0 <_svfprintf_r+0x8dc>)
 80158ee:	9309      	str	r3, [sp, #36]	; 0x24
 80158f0:	2380      	movs	r3, #128	; 0x80
 80158f2:	439e      	bics	r6, r3
 80158f4:	2300      	movs	r3, #0
 80158f6:	930c      	str	r3, [sp, #48]	; 0x30
 80158f8:	3303      	adds	r3, #3
 80158fa:	9308      	str	r3, [sp, #32]
 80158fc:	2300      	movs	r3, #0
 80158fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8015900:	e34f      	b.n	8015fa2 <_svfprintf_r+0xc8e>
 8015902:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015906:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015908:	9919      	ldr	r1, [sp, #100]	; 0x64
 801590a:	f7ed fb4d 	bl	8002fa8 <__aeabi_dcmpun>
 801590e:	2800      	cmp	r0, #0
 8015910:	d00e      	beq.n	8015930 <_svfprintf_r+0x61c>
 8015912:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015914:	2b00      	cmp	r3, #0
 8015916:	da04      	bge.n	8015922 <_svfprintf_r+0x60e>
 8015918:	231b      	movs	r3, #27
 801591a:	aa1e      	add	r2, sp, #120	; 0x78
 801591c:	189b      	adds	r3, r3, r2
 801591e:	222d      	movs	r2, #45	; 0x2d
 8015920:	701a      	strb	r2, [r3, #0]
 8015922:	4bb4      	ldr	r3, [pc, #720]	; (8015bf4 <_svfprintf_r+0x8e0>)
 8015924:	9309      	str	r3, [sp, #36]	; 0x24
 8015926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015928:	2b47      	cmp	r3, #71	; 0x47
 801592a:	dce1      	bgt.n	80158f0 <_svfprintf_r+0x5dc>
 801592c:	4bb2      	ldr	r3, [pc, #712]	; (8015bf8 <_svfprintf_r+0x8e4>)
 801592e:	e7de      	b.n	80158ee <_svfprintf_r+0x5da>
 8015930:	2320      	movs	r3, #32
 8015932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015934:	439a      	bics	r2, r3
 8015936:	920f      	str	r2, [sp, #60]	; 0x3c
 8015938:	2a41      	cmp	r2, #65	; 0x41
 801593a:	d124      	bne.n	8015986 <_svfprintf_r+0x672>
 801593c:	2230      	movs	r2, #48	; 0x30
 801593e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015940:	ab25      	add	r3, sp, #148	; 0x94
 8015942:	701a      	strb	r2, [r3, #0]
 8015944:	3228      	adds	r2, #40	; 0x28
 8015946:	2961      	cmp	r1, #97	; 0x61
 8015948:	d100      	bne.n	801594c <_svfprintf_r+0x638>
 801594a:	3220      	adds	r2, #32
 801594c:	705a      	strb	r2, [r3, #1]
 801594e:	2302      	movs	r3, #2
 8015950:	431e      	orrs	r6, r3
 8015952:	9b08      	ldr	r3, [sp, #32]
 8015954:	2b63      	cmp	r3, #99	; 0x63
 8015956:	dc00      	bgt.n	801595a <_svfprintf_r+0x646>
 8015958:	e09e      	b.n	8015a98 <_svfprintf_r+0x784>
 801595a:	1c59      	adds	r1, r3, #1
 801595c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801595e:	f7fe f913 	bl	8013b88 <_malloc_r>
 8015962:	9009      	str	r0, [sp, #36]	; 0x24
 8015964:	2800      	cmp	r0, #0
 8015966:	d000      	beq.n	801596a <_svfprintf_r+0x656>
 8015968:	e09b      	b.n	8015aa2 <_svfprintf_r+0x78e>
 801596a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801596c:	899a      	ldrh	r2, [r3, #12]
 801596e:	2340      	movs	r3, #64	; 0x40
 8015970:	4313      	orrs	r3, r2
 8015972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015974:	8193      	strh	r3, [r2, #12]
 8015976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015978:	899b      	ldrh	r3, [r3, #12]
 801597a:	065b      	lsls	r3, r3, #25
 801597c:	d400      	bmi.n	8015980 <_svfprintf_r+0x66c>
 801597e:	e4ee      	b.n	801535e <_svfprintf_r+0x4a>
 8015980:	2301      	movs	r3, #1
 8015982:	425b      	negs	r3, r3
 8015984:	e4ea      	b.n	801535c <_svfprintf_r+0x48>
 8015986:	9b08      	ldr	r3, [sp, #32]
 8015988:	900c      	str	r0, [sp, #48]	; 0x30
 801598a:	3301      	adds	r3, #1
 801598c:	d100      	bne.n	8015990 <_svfprintf_r+0x67c>
 801598e:	e08b      	b.n	8015aa8 <_svfprintf_r+0x794>
 8015990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015992:	2b47      	cmp	r3, #71	; 0x47
 8015994:	d103      	bne.n	801599e <_svfprintf_r+0x68a>
 8015996:	9b08      	ldr	r3, [sp, #32]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d100      	bne.n	801599e <_svfprintf_r+0x68a>
 801599c:	e087      	b.n	8015aae <_svfprintf_r+0x79a>
 801599e:	2380      	movs	r3, #128	; 0x80
 80159a0:	005b      	lsls	r3, r3, #1
 80159a2:	4333      	orrs	r3, r6
 80159a4:	9320      	str	r3, [sp, #128]	; 0x80
 80159a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159a8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	db00      	blt.n	80159b0 <_svfprintf_r+0x69c>
 80159ae:	e082      	b.n	8015ab6 <_svfprintf_r+0x7a2>
 80159b0:	2280      	movs	r2, #128	; 0x80
 80159b2:	0612      	lsls	r2, r2, #24
 80159b4:	4694      	mov	ip, r2
 80159b6:	4463      	add	r3, ip
 80159b8:	930d      	str	r3, [sp, #52]	; 0x34
 80159ba:	232d      	movs	r3, #45	; 0x2d
 80159bc:	9322      	str	r3, [sp, #136]	; 0x88
 80159be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159c0:	2b41      	cmp	r3, #65	; 0x41
 80159c2:	d000      	beq.n	80159c6 <_svfprintf_r+0x6b2>
 80159c4:	e105      	b.n	8015bd2 <_svfprintf_r+0x8be>
 80159c6:	aa26      	add	r2, sp, #152	; 0x98
 80159c8:	0020      	movs	r0, r4
 80159ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80159cc:	f002 fdc4 	bl	8018558 <frexp>
 80159d0:	23ff      	movs	r3, #255	; 0xff
 80159d2:	2200      	movs	r2, #0
 80159d4:	059b      	lsls	r3, r3, #22
 80159d6:	f7ec fd2d 	bl	8002434 <__aeabi_dmul>
 80159da:	2200      	movs	r2, #0
 80159dc:	2300      	movs	r3, #0
 80159de:	0004      	movs	r4, r0
 80159e0:	000d      	movs	r5, r1
 80159e2:	f7ea fd3b 	bl	800045c <__aeabi_dcmpeq>
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d001      	beq.n	80159ee <_svfprintf_r+0x6da>
 80159ea:	2301      	movs	r3, #1
 80159ec:	9326      	str	r3, [sp, #152]	; 0x98
 80159ee:	4b83      	ldr	r3, [pc, #524]	; (8015bfc <_svfprintf_r+0x8e8>)
 80159f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80159f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159f4:	2b61      	cmp	r3, #97	; 0x61
 80159f6:	d101      	bne.n	80159fc <_svfprintf_r+0x6e8>
 80159f8:	4b81      	ldr	r3, [pc, #516]	; (8015c00 <_svfprintf_r+0x8ec>)
 80159fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80159fc:	9b08      	ldr	r3, [sp, #32]
 80159fe:	3b01      	subs	r3, #1
 8015a00:	9310      	str	r3, [sp, #64]	; 0x40
 8015a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a04:	9318      	str	r3, [sp, #96]	; 0x60
 8015a06:	2200      	movs	r2, #0
 8015a08:	4b7e      	ldr	r3, [pc, #504]	; (8015c04 <_svfprintf_r+0x8f0>)
 8015a0a:	0020      	movs	r0, r4
 8015a0c:	0029      	movs	r1, r5
 8015a0e:	f7ec fd11 	bl	8002434 <__aeabi_dmul>
 8015a12:	000d      	movs	r5, r1
 8015a14:	0004      	movs	r4, r0
 8015a16:	f7ed fae3 	bl	8002fe0 <__aeabi_d2iz>
 8015a1a:	9021      	str	r0, [sp, #132]	; 0x84
 8015a1c:	f7ed fb16 	bl	800304c <__aeabi_i2d>
 8015a20:	0002      	movs	r2, r0
 8015a22:	000b      	movs	r3, r1
 8015a24:	0020      	movs	r0, r4
 8015a26:	0029      	movs	r1, r5
 8015a28:	f7ec ff76 	bl	8002918 <__aeabi_dsub>
 8015a2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a30:	3301      	adds	r3, #1
 8015a32:	930d      	str	r3, [sp, #52]	; 0x34
 8015a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a36:	0004      	movs	r4, r0
 8015a38:	5c9b      	ldrb	r3, [r3, r2]
 8015a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a3c:	000d      	movs	r5, r1
 8015a3e:	7013      	strb	r3, [r2, #0]
 8015a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a42:	9323      	str	r3, [sp, #140]	; 0x8c
 8015a44:	3301      	adds	r3, #1
 8015a46:	d00a      	beq.n	8015a5e <_svfprintf_r+0x74a>
 8015a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	3b01      	subs	r3, #1
 8015a4e:	9310      	str	r3, [sp, #64]	; 0x40
 8015a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a52:	9318      	str	r3, [sp, #96]	; 0x60
 8015a54:	2300      	movs	r3, #0
 8015a56:	f7ea fd01 	bl	800045c <__aeabi_dcmpeq>
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d0d3      	beq.n	8015a06 <_svfprintf_r+0x6f2>
 8015a5e:	2200      	movs	r2, #0
 8015a60:	4b69      	ldr	r3, [pc, #420]	; (8015c08 <_svfprintf_r+0x8f4>)
 8015a62:	0020      	movs	r0, r4
 8015a64:	0029      	movs	r1, r5
 8015a66:	f7ea fd13 	bl	8000490 <__aeabi_dcmpgt>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d126      	bne.n	8015abc <_svfprintf_r+0x7a8>
 8015a6e:	2200      	movs	r2, #0
 8015a70:	4b65      	ldr	r3, [pc, #404]	; (8015c08 <_svfprintf_r+0x8f4>)
 8015a72:	0020      	movs	r0, r4
 8015a74:	0029      	movs	r1, r5
 8015a76:	f7ea fcf1 	bl	800045c <__aeabi_dcmpeq>
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d002      	beq.n	8015a84 <_svfprintf_r+0x770>
 8015a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a80:	07db      	lsls	r3, r3, #31
 8015a82:	d41b      	bmi.n	8015abc <_svfprintf_r+0x7a8>
 8015a84:	2130      	movs	r1, #48	; 0x30
 8015a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a88:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015a8a:	1898      	adds	r0, r3, r2
 8015a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8015a8e:	1ac2      	subs	r2, r0, r3
 8015a90:	d426      	bmi.n	8015ae0 <_svfprintf_r+0x7cc>
 8015a92:	7019      	strb	r1, [r3, #0]
 8015a94:	3301      	adds	r3, #1
 8015a96:	e7f9      	b.n	8015a8c <_svfprintf_r+0x778>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8015a9c:	ab3f      	add	r3, sp, #252	; 0xfc
 8015a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015aa0:	e77d      	b.n	801599e <_svfprintf_r+0x68a>
 8015aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8015aa6:	e77a      	b.n	801599e <_svfprintf_r+0x68a>
 8015aa8:	2306      	movs	r3, #6
 8015aaa:	9308      	str	r3, [sp, #32]
 8015aac:	e777      	b.n	801599e <_svfprintf_r+0x68a>
 8015aae:	9b08      	ldr	r3, [sp, #32]
 8015ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e7f9      	b.n	8015aaa <_svfprintf_r+0x796>
 8015ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ab8:	2300      	movs	r3, #0
 8015aba:	e77f      	b.n	80159bc <_svfprintf_r+0x6a8>
 8015abc:	2030      	movs	r0, #48	; 0x30
 8015abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ac0:	932a      	str	r3, [sp, #168]	; 0xa8
 8015ac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ac4:	7bda      	ldrb	r2, [r3, #15]
 8015ac6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	932a      	str	r3, [sp, #168]	; 0xa8
 8015acc:	7819      	ldrb	r1, [r3, #0]
 8015ace:	4291      	cmp	r1, r2
 8015ad0:	d07d      	beq.n	8015bce <_svfprintf_r+0x8ba>
 8015ad2:	1c4a      	adds	r2, r1, #1
 8015ad4:	b2d2      	uxtb	r2, r2
 8015ad6:	2939      	cmp	r1, #57	; 0x39
 8015ad8:	d101      	bne.n	8015ade <_svfprintf_r+0x7ca>
 8015ada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015adc:	7a92      	ldrb	r2, [r2, #10]
 8015ade:	701a      	strb	r2, [r3, #0]
 8015ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ae4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8015aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015aec:	2b47      	cmp	r3, #71	; 0x47
 8015aee:	d000      	beq.n	8015af2 <_svfprintf_r+0x7de>
 8015af0:	e0d2      	b.n	8015c98 <_svfprintf_r+0x984>
 8015af2:	1ceb      	adds	r3, r5, #3
 8015af4:	db03      	blt.n	8015afe <_svfprintf_r+0x7ea>
 8015af6:	9b08      	ldr	r3, [sp, #32]
 8015af8:	42ab      	cmp	r3, r5
 8015afa:	db00      	blt.n	8015afe <_svfprintf_r+0x7ea>
 8015afc:	e0fd      	b.n	8015cfa <_svfprintf_r+0x9e6>
 8015afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b00:	3b02      	subs	r3, #2
 8015b02:	930e      	str	r3, [sp, #56]	; 0x38
 8015b04:	2238      	movs	r2, #56	; 0x38
 8015b06:	466b      	mov	r3, sp
 8015b08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b0a:	189b      	adds	r3, r3, r2
 8015b0c:	3a18      	subs	r2, #24
 8015b0e:	4391      	bics	r1, r2
 8015b10:	1e6c      	subs	r4, r5, #1
 8015b12:	000a      	movs	r2, r1
 8015b14:	9426      	str	r4, [sp, #152]	; 0x98
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2100      	movs	r1, #0
 8015b1a:	2a41      	cmp	r2, #65	; 0x41
 8015b1c:	d102      	bne.n	8015b24 <_svfprintf_r+0x810>
 8015b1e:	330f      	adds	r3, #15
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	3101      	adds	r1, #1
 8015b24:	aa28      	add	r2, sp, #160	; 0xa0
 8015b26:	7013      	strb	r3, [r2, #0]
 8015b28:	232b      	movs	r3, #43	; 0x2b
 8015b2a:	2c00      	cmp	r4, #0
 8015b2c:	da02      	bge.n	8015b34 <_svfprintf_r+0x820>
 8015b2e:	2401      	movs	r4, #1
 8015b30:	232d      	movs	r3, #45	; 0x2d
 8015b32:	1b64      	subs	r4, r4, r5
 8015b34:	7053      	strb	r3, [r2, #1]
 8015b36:	2c09      	cmp	r4, #9
 8015b38:	dc00      	bgt.n	8015b3c <_svfprintf_r+0x828>
 8015b3a:	e0c7      	b.n	8015ccc <_svfprintf_r+0x9b8>
 8015b3c:	2537      	movs	r5, #55	; 0x37
 8015b3e:	ab1e      	add	r3, sp, #120	; 0x78
 8015b40:	18ed      	adds	r5, r5, r3
 8015b42:	1e6b      	subs	r3, r5, #1
 8015b44:	0020      	movs	r0, r4
 8015b46:	210a      	movs	r1, #10
 8015b48:	9308      	str	r3, [sp, #32]
 8015b4a:	f7ea fc71 	bl	8000430 <__aeabi_idivmod>
 8015b4e:	1e6b      	subs	r3, r5, #1
 8015b50:	3130      	adds	r1, #48	; 0x30
 8015b52:	7019      	strb	r1, [r3, #0]
 8015b54:	0020      	movs	r0, r4
 8015b56:	210a      	movs	r1, #10
 8015b58:	f7ea fb84 	bl	8000264 <__divsi3>
 8015b5c:	0004      	movs	r4, r0
 8015b5e:	2809      	cmp	r0, #9
 8015b60:	dd00      	ble.n	8015b64 <_svfprintf_r+0x850>
 8015b62:	e0ac      	b.n	8015cbe <_svfprintf_r+0x9aa>
 8015b64:	232a      	movs	r3, #42	; 0x2a
 8015b66:	2137      	movs	r1, #55	; 0x37
 8015b68:	aa1e      	add	r2, sp, #120	; 0x78
 8015b6a:	3d02      	subs	r5, #2
 8015b6c:	3430      	adds	r4, #48	; 0x30
 8015b6e:	702c      	strb	r4, [r5, #0]
 8015b70:	189b      	adds	r3, r3, r2
 8015b72:	1889      	adds	r1, r1, r2
 8015b74:	001a      	movs	r2, r3
 8015b76:	428d      	cmp	r5, r1
 8015b78:	d200      	bcs.n	8015b7c <_svfprintf_r+0x868>
 8015b7a:	e0a2      	b.n	8015cc2 <_svfprintf_r+0x9ae>
 8015b7c:	ab28      	add	r3, sp, #160	; 0xa0
 8015b7e:	1ad3      	subs	r3, r2, r3
 8015b80:	931d      	str	r3, [sp, #116]	; 0x74
 8015b82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b86:	4694      	mov	ip, r2
 8015b88:	4463      	add	r3, ip
 8015b8a:	9308      	str	r3, [sp, #32]
 8015b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	dc01      	bgt.n	8015b96 <_svfprintf_r+0x882>
 8015b92:	07f3      	lsls	r3, r6, #31
 8015b94:	d504      	bpl.n	8015ba0 <_svfprintf_r+0x88c>
 8015b96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b98:	9b08      	ldr	r3, [sp, #32]
 8015b9a:	4694      	mov	ip, r2
 8015b9c:	4463      	add	r3, ip
 8015b9e:	9308      	str	r3, [sp, #32]
 8015ba0:	2280      	movs	r2, #128	; 0x80
 8015ba2:	4b1a      	ldr	r3, [pc, #104]	; (8015c0c <_svfprintf_r+0x8f8>)
 8015ba4:	0052      	lsls	r2, r2, #1
 8015ba6:	4033      	ands	r3, r6
 8015ba8:	431a      	orrs	r2, r3
 8015baa:	2300      	movs	r3, #0
 8015bac:	001d      	movs	r5, r3
 8015bae:	9220      	str	r2, [sp, #128]	; 0x80
 8015bb0:	9310      	str	r3, [sp, #64]	; 0x40
 8015bb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d100      	bne.n	8015bbc <_svfprintf_r+0x8a8>
 8015bba:	e270      	b.n	801609e <_svfprintf_r+0xd8a>
 8015bbc:	231b      	movs	r3, #27
 8015bbe:	aa1e      	add	r2, sp, #120	; 0x78
 8015bc0:	189b      	adds	r3, r3, r2
 8015bc2:	222d      	movs	r2, #45	; 0x2d
 8015bc4:	701a      	strb	r2, [r3, #0]
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015bca:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bcc:	e539      	b.n	8015642 <_svfprintf_r+0x32e>
 8015bce:	7018      	strb	r0, [r3, #0]
 8015bd0:	e779      	b.n	8015ac6 <_svfprintf_r+0x7b2>
 8015bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bd4:	2b46      	cmp	r3, #70	; 0x46
 8015bd6:	d01b      	beq.n	8015c10 <_svfprintf_r+0x8fc>
 8015bd8:	9d08      	ldr	r5, [sp, #32]
 8015bda:	2b45      	cmp	r3, #69	; 0x45
 8015bdc:	d101      	bne.n	8015be2 <_svfprintf_r+0x8ce>
 8015bde:	9b08      	ldr	r3, [sp, #32]
 8015be0:	1c5d      	adds	r5, r3, #1
 8015be2:	2302      	movs	r3, #2
 8015be4:	e016      	b.n	8015c14 <_svfprintf_r+0x900>
 8015be6:	46c0      	nop			; (mov r8, r8)
 8015be8:	7fefffff 	.word	0x7fefffff
 8015bec:	0801bbf4 	.word	0x0801bbf4
 8015bf0:	0801bbf0 	.word	0x0801bbf0
 8015bf4:	0801bbfc 	.word	0x0801bbfc
 8015bf8:	0801bbf8 	.word	0x0801bbf8
 8015bfc:	0801bc11 	.word	0x0801bc11
 8015c00:	0801bc00 	.word	0x0801bc00
 8015c04:	40300000 	.word	0x40300000
 8015c08:	3fe00000 	.word	0x3fe00000
 8015c0c:	fffffbff 	.word	0xfffffbff
 8015c10:	2303      	movs	r3, #3
 8015c12:	9d08      	ldr	r5, [sp, #32]
 8015c14:	aa2a      	add	r2, sp, #168	; 0xa8
 8015c16:	9204      	str	r2, [sp, #16]
 8015c18:	aa27      	add	r2, sp, #156	; 0x9c
 8015c1a:	9203      	str	r2, [sp, #12]
 8015c1c:	aa26      	add	r2, sp, #152	; 0x98
 8015c1e:	9202      	str	r2, [sp, #8]
 8015c20:	9300      	str	r3, [sp, #0]
 8015c22:	9501      	str	r5, [sp, #4]
 8015c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c26:	0022      	movs	r2, r4
 8015c28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c2a:	f000 fe79 	bl	8016920 <_dtoa_r>
 8015c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c30:	9009      	str	r0, [sp, #36]	; 0x24
 8015c32:	2b47      	cmp	r3, #71	; 0x47
 8015c34:	d101      	bne.n	8015c3a <_svfprintf_r+0x926>
 8015c36:	07f3      	lsls	r3, r6, #31
 8015c38:	d524      	bpl.n	8015c84 <_svfprintf_r+0x970>
 8015c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3c:	195b      	adds	r3, r3, r5
 8015c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8015c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c42:	2b46      	cmp	r3, #70	; 0x46
 8015c44:	d113      	bne.n	8015c6e <_svfprintf_r+0x95a>
 8015c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	2b30      	cmp	r3, #48	; 0x30
 8015c4c:	d10a      	bne.n	8015c64 <_svfprintf_r+0x950>
 8015c4e:	2200      	movs	r2, #0
 8015c50:	2300      	movs	r3, #0
 8015c52:	0020      	movs	r0, r4
 8015c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c56:	f7ea fc01 	bl	800045c <__aeabi_dcmpeq>
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d102      	bne.n	8015c64 <_svfprintf_r+0x950>
 8015c5e:	2301      	movs	r3, #1
 8015c60:	1b5d      	subs	r5, r3, r5
 8015c62:	9526      	str	r5, [sp, #152]	; 0x98
 8015c64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c68:	4694      	mov	ip, r2
 8015c6a:	4463      	add	r3, ip
 8015c6c:	9310      	str	r3, [sp, #64]	; 0x40
 8015c6e:	2200      	movs	r2, #0
 8015c70:	2300      	movs	r3, #0
 8015c72:	0020      	movs	r0, r4
 8015c74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c76:	f7ea fbf1 	bl	800045c <__aeabi_dcmpeq>
 8015c7a:	2230      	movs	r2, #48	; 0x30
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d006      	beq.n	8015c8e <_svfprintf_r+0x97a>
 8015c80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c82:	932a      	str	r3, [sp, #168]	; 0xa8
 8015c84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c86:	e72c      	b.n	8015ae2 <_svfprintf_r+0x7ce>
 8015c88:	1c59      	adds	r1, r3, #1
 8015c8a:	912a      	str	r1, [sp, #168]	; 0xa8
 8015c8c:	701a      	strb	r2, [r3, #0]
 8015c8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c90:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015c92:	4299      	cmp	r1, r3
 8015c94:	d8f8      	bhi.n	8015c88 <_svfprintf_r+0x974>
 8015c96:	e7f5      	b.n	8015c84 <_svfprintf_r+0x970>
 8015c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c9a:	2b46      	cmp	r3, #70	; 0x46
 8015c9c:	d000      	beq.n	8015ca0 <_svfprintf_r+0x98c>
 8015c9e:	e731      	b.n	8015b04 <_svfprintf_r+0x7f0>
 8015ca0:	9b08      	ldr	r3, [sp, #32]
 8015ca2:	2d00      	cmp	r5, #0
 8015ca4:	dd21      	ble.n	8015cea <_svfprintf_r+0x9d6>
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d101      	bne.n	8015cae <_svfprintf_r+0x99a>
 8015caa:	07f3      	lsls	r3, r6, #31
 8015cac:	d54a      	bpl.n	8015d44 <_svfprintf_r+0xa30>
 8015cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cb0:	18eb      	adds	r3, r5, r3
 8015cb2:	9a08      	ldr	r2, [sp, #32]
 8015cb4:	18d3      	adds	r3, r2, r3
 8015cb6:	9308      	str	r3, [sp, #32]
 8015cb8:	2366      	movs	r3, #102	; 0x66
 8015cba:	930e      	str	r3, [sp, #56]	; 0x38
 8015cbc:	e034      	b.n	8015d28 <_svfprintf_r+0xa14>
 8015cbe:	9d08      	ldr	r5, [sp, #32]
 8015cc0:	e73f      	b.n	8015b42 <_svfprintf_r+0x82e>
 8015cc2:	782a      	ldrb	r2, [r5, #0]
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	e753      	b.n	8015b74 <_svfprintf_r+0x860>
 8015ccc:	232a      	movs	r3, #42	; 0x2a
 8015cce:	aa1e      	add	r2, sp, #120	; 0x78
 8015cd0:	189b      	adds	r3, r3, r2
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	d105      	bne.n	8015ce2 <_svfprintf_r+0x9ce>
 8015cd6:	2230      	movs	r2, #48	; 0x30
 8015cd8:	ab28      	add	r3, sp, #160	; 0xa0
 8015cda:	709a      	strb	r2, [r3, #2]
 8015cdc:	232b      	movs	r3, #43	; 0x2b
 8015cde:	aa1e      	add	r2, sp, #120	; 0x78
 8015ce0:	189b      	adds	r3, r3, r2
 8015ce2:	3430      	adds	r4, #48	; 0x30
 8015ce4:	1c5a      	adds	r2, r3, #1
 8015ce6:	701c      	strb	r4, [r3, #0]
 8015ce8:	e748      	b.n	8015b7c <_svfprintf_r+0x868>
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d102      	bne.n	8015cf4 <_svfprintf_r+0x9e0>
 8015cee:	3301      	adds	r3, #1
 8015cf0:	421e      	tst	r6, r3
 8015cf2:	d029      	beq.n	8015d48 <_svfprintf_r+0xa34>
 8015cf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cf6:	3301      	adds	r3, #1
 8015cf8:	e7db      	b.n	8015cb2 <_svfprintf_r+0x99e>
 8015cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cfc:	42ab      	cmp	r3, r5
 8015cfe:	dc06      	bgt.n	8015d0e <_svfprintf_r+0x9fa>
 8015d00:	07f3      	lsls	r3, r6, #31
 8015d02:	d524      	bpl.n	8015d4e <_svfprintf_r+0xa3a>
 8015d04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d06:	18eb      	adds	r3, r5, r3
 8015d08:	9308      	str	r3, [sp, #32]
 8015d0a:	2367      	movs	r3, #103	; 0x67
 8015d0c:	e7d5      	b.n	8015cba <_svfprintf_r+0x9a6>
 8015d0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d12:	4694      	mov	ip, r2
 8015d14:	4463      	add	r3, ip
 8015d16:	9308      	str	r3, [sp, #32]
 8015d18:	2367      	movs	r3, #103	; 0x67
 8015d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8015d1c:	2d00      	cmp	r5, #0
 8015d1e:	dc03      	bgt.n	8015d28 <_svfprintf_r+0xa14>
 8015d20:	9b08      	ldr	r3, [sp, #32]
 8015d22:	1b5b      	subs	r3, r3, r5
 8015d24:	3301      	adds	r3, #1
 8015d26:	9308      	str	r3, [sp, #32]
 8015d28:	2380      	movs	r3, #128	; 0x80
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	401e      	ands	r6, r3
 8015d2e:	2300      	movs	r3, #0
 8015d30:	960f      	str	r6, [sp, #60]	; 0x3c
 8015d32:	9310      	str	r3, [sp, #64]	; 0x40
 8015d34:	2e00      	cmp	r6, #0
 8015d36:	d100      	bne.n	8015d3a <_svfprintf_r+0xa26>
 8015d38:	e73c      	b.n	8015bb4 <_svfprintf_r+0x8a0>
 8015d3a:	2d00      	cmp	r5, #0
 8015d3c:	dc27      	bgt.n	8015d8e <_svfprintf_r+0xa7a>
 8015d3e:	2300      	movs	r3, #0
 8015d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d42:	e737      	b.n	8015bb4 <_svfprintf_r+0x8a0>
 8015d44:	9508      	str	r5, [sp, #32]
 8015d46:	e7b7      	b.n	8015cb8 <_svfprintf_r+0x9a4>
 8015d48:	2266      	movs	r2, #102	; 0x66
 8015d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8015d4c:	e7eb      	b.n	8015d26 <_svfprintf_r+0xa12>
 8015d4e:	9508      	str	r5, [sp, #32]
 8015d50:	e7db      	b.n	8015d0a <_svfprintf_r+0x9f6>
 8015d52:	42ab      	cmp	r3, r5
 8015d54:	da0e      	bge.n	8015d74 <_svfprintf_r+0xa60>
 8015d56:	1aed      	subs	r5, r5, r3
 8015d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d5a:	785b      	ldrb	r3, [r3, #1]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d012      	beq.n	8015d86 <_svfprintf_r+0xa72>
 8015d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d62:	3301      	adds	r3, #1
 8015d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d68:	3301      	adds	r3, #1
 8015d6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2bff      	cmp	r3, #255	; 0xff
 8015d72:	d1ee      	bne.n	8015d52 <_svfprintf_r+0xa3e>
 8015d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d78:	189b      	adds	r3, r3, r2
 8015d7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015d7c:	4353      	muls	r3, r2
 8015d7e:	9a08      	ldr	r2, [sp, #32]
 8015d80:	189b      	adds	r3, r3, r2
 8015d82:	9308      	str	r3, [sp, #32]
 8015d84:	e716      	b.n	8015bb4 <_svfprintf_r+0x8a0>
 8015d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d88:	3301      	adds	r3, #1
 8015d8a:	9310      	str	r3, [sp, #64]	; 0x40
 8015d8c:	e7ee      	b.n	8015d6c <_svfprintf_r+0xa58>
 8015d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d92:	e7eb      	b.n	8015d6c <_svfprintf_r+0xa58>
 8015d94:	0022      	movs	r2, r4
 8015d96:	ca08      	ldmia	r2!, {r3}
 8015d98:	9212      	str	r2, [sp, #72]	; 0x48
 8015d9a:	06b2      	lsls	r2, r6, #26
 8015d9c:	d508      	bpl.n	8015db0 <_svfprintf_r+0xa9c>
 8015d9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015da0:	601a      	str	r2, [r3, #0]
 8015da2:	17d2      	asrs	r2, r2, #31
 8015da4:	605a      	str	r2, [r3, #4]
 8015da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015da8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015daa:	9309      	str	r3, [sp, #36]	; 0x24
 8015dac:	f7ff faeb 	bl	8015386 <_svfprintf_r+0x72>
 8015db0:	06f2      	lsls	r2, r6, #27
 8015db2:	d502      	bpl.n	8015dba <_svfprintf_r+0xaa6>
 8015db4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015db6:	601a      	str	r2, [r3, #0]
 8015db8:	e7f5      	b.n	8015da6 <_svfprintf_r+0xa92>
 8015dba:	0672      	lsls	r2, r6, #25
 8015dbc:	d502      	bpl.n	8015dc4 <_svfprintf_r+0xab0>
 8015dbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dc0:	801a      	strh	r2, [r3, #0]
 8015dc2:	e7f0      	b.n	8015da6 <_svfprintf_r+0xa92>
 8015dc4:	05b2      	lsls	r2, r6, #22
 8015dc6:	d5f5      	bpl.n	8015db4 <_svfprintf_r+0xaa0>
 8015dc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015dca:	701a      	strb	r2, [r3, #0]
 8015dcc:	e7eb      	b.n	8015da6 <_svfprintf_r+0xa92>
 8015dce:	2310      	movs	r3, #16
 8015dd0:	431e      	orrs	r6, r3
 8015dd2:	2220      	movs	r2, #32
 8015dd4:	4032      	ands	r2, r6
 8015dd6:	d025      	beq.n	8015e24 <_svfprintf_r+0xb10>
 8015dd8:	2307      	movs	r3, #7
 8015dda:	3407      	adds	r4, #7
 8015ddc:	439c      	bics	r4, r3
 8015dde:	0023      	movs	r3, r4
 8015de0:	3308      	adds	r3, #8
 8015de2:	9312      	str	r3, [sp, #72]	; 0x48
 8015de4:	6823      	ldr	r3, [r4, #0]
 8015de6:	6864      	ldr	r4, [r4, #4]
 8015de8:	9306      	str	r3, [sp, #24]
 8015dea:	9407      	str	r4, [sp, #28]
 8015dec:	4bc2      	ldr	r3, [pc, #776]	; (80160f8 <_svfprintf_r+0xde4>)
 8015dee:	401e      	ands	r6, r3
 8015df0:	2300      	movs	r3, #0
 8015df2:	221b      	movs	r2, #27
 8015df4:	a91e      	add	r1, sp, #120	; 0x78
 8015df6:	1852      	adds	r2, r2, r1
 8015df8:	2100      	movs	r1, #0
 8015dfa:	7011      	strb	r1, [r2, #0]
 8015dfc:	9a08      	ldr	r2, [sp, #32]
 8015dfe:	3201      	adds	r2, #1
 8015e00:	d100      	bne.n	8015e04 <_svfprintf_r+0xaf0>
 8015e02:	e0a6      	b.n	8015f52 <_svfprintf_r+0xc3e>
 8015e04:	0032      	movs	r2, r6
 8015e06:	2180      	movs	r1, #128	; 0x80
 8015e08:	9807      	ldr	r0, [sp, #28]
 8015e0a:	438e      	bics	r6, r1
 8015e0c:	9906      	ldr	r1, [sp, #24]
 8015e0e:	4301      	orrs	r1, r0
 8015e10:	d000      	beq.n	8015e14 <_svfprintf_r+0xb00>
 8015e12:	e09e      	b.n	8015f52 <_svfprintf_r+0xc3e>
 8015e14:	9908      	ldr	r1, [sp, #32]
 8015e16:	2900      	cmp	r1, #0
 8015e18:	d100      	bne.n	8015e1c <_svfprintf_r+0xb08>
 8015e1a:	e125      	b.n	8016068 <_svfprintf_r+0xd54>
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d000      	beq.n	8015e22 <_svfprintf_r+0xb0e>
 8015e20:	e09a      	b.n	8015f58 <_svfprintf_r+0xc44>
 8015e22:	e518      	b.n	8015856 <_svfprintf_r+0x542>
 8015e24:	1d23      	adds	r3, r4, #4
 8015e26:	9312      	str	r3, [sp, #72]	; 0x48
 8015e28:	2310      	movs	r3, #16
 8015e2a:	4033      	ands	r3, r6
 8015e2c:	d003      	beq.n	8015e36 <_svfprintf_r+0xb22>
 8015e2e:	6823      	ldr	r3, [r4, #0]
 8015e30:	9306      	str	r3, [sp, #24]
 8015e32:	9207      	str	r2, [sp, #28]
 8015e34:	e7da      	b.n	8015dec <_svfprintf_r+0xad8>
 8015e36:	2240      	movs	r2, #64	; 0x40
 8015e38:	4032      	ands	r2, r6
 8015e3a:	d004      	beq.n	8015e46 <_svfprintf_r+0xb32>
 8015e3c:	6822      	ldr	r2, [r4, #0]
 8015e3e:	b292      	uxth	r2, r2
 8015e40:	9206      	str	r2, [sp, #24]
 8015e42:	9307      	str	r3, [sp, #28]
 8015e44:	e7d2      	b.n	8015dec <_svfprintf_r+0xad8>
 8015e46:	2380      	movs	r3, #128	; 0x80
 8015e48:	009b      	lsls	r3, r3, #2
 8015e4a:	4033      	ands	r3, r6
 8015e4c:	d002      	beq.n	8015e54 <_svfprintf_r+0xb40>
 8015e4e:	6823      	ldr	r3, [r4, #0]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	e7ed      	b.n	8015e30 <_svfprintf_r+0xb1c>
 8015e54:	6822      	ldr	r2, [r4, #0]
 8015e56:	e7f3      	b.n	8015e40 <_svfprintf_r+0xb2c>
 8015e58:	1d23      	adds	r3, r4, #4
 8015e5a:	49a8      	ldr	r1, [pc, #672]	; (80160fc <_svfprintf_r+0xde8>)
 8015e5c:	aa25      	add	r2, sp, #148	; 0x94
 8015e5e:	9312      	str	r3, [sp, #72]	; 0x48
 8015e60:	6823      	ldr	r3, [r4, #0]
 8015e62:	8011      	strh	r1, [r2, #0]
 8015e64:	4aa6      	ldr	r2, [pc, #664]	; (8016100 <_svfprintf_r+0xdec>)
 8015e66:	9306      	str	r3, [sp, #24]
 8015e68:	2300      	movs	r3, #0
 8015e6a:	921e      	str	r2, [sp, #120]	; 0x78
 8015e6c:	2278      	movs	r2, #120	; 0x78
 8015e6e:	9307      	str	r3, [sp, #28]
 8015e70:	3302      	adds	r3, #2
 8015e72:	431e      	orrs	r6, r3
 8015e74:	920e      	str	r2, [sp, #56]	; 0x38
 8015e76:	e7bc      	b.n	8015df2 <_svfprintf_r+0xade>
 8015e78:	1d23      	adds	r3, r4, #4
 8015e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8015e7c:	6823      	ldr	r3, [r4, #0]
 8015e7e:	2400      	movs	r4, #0
 8015e80:	9309      	str	r3, [sp, #36]	; 0x24
 8015e82:	231b      	movs	r3, #27
 8015e84:	aa1e      	add	r2, sp, #120	; 0x78
 8015e86:	189b      	adds	r3, r3, r2
 8015e88:	701c      	strb	r4, [r3, #0]
 8015e8a:	9b08      	ldr	r3, [sp, #32]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	d00e      	beq.n	8015eae <_svfprintf_r+0xb9a>
 8015e90:	9a08      	ldr	r2, [sp, #32]
 8015e92:	0021      	movs	r1, r4
 8015e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e96:	f001 ff79 	bl	8017d8c <memchr>
 8015e9a:	900c      	str	r0, [sp, #48]	; 0x30
 8015e9c:	42a0      	cmp	r0, r4
 8015e9e:	d100      	bne.n	8015ea2 <_svfprintf_r+0xb8e>
 8015ea0:	e100      	b.n	80160a4 <_svfprintf_r+0xd90>
 8015ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ea4:	1a83      	subs	r3, r0, r2
 8015ea6:	9308      	str	r3, [sp, #32]
 8015ea8:	940c      	str	r4, [sp, #48]	; 0x30
 8015eaa:	0023      	movs	r3, r4
 8015eac:	e527      	b.n	80158fe <_svfprintf_r+0x5ea>
 8015eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015eb0:	f7ea f932 	bl	8000118 <strlen>
 8015eb4:	9008      	str	r0, [sp, #32]
 8015eb6:	e7f7      	b.n	8015ea8 <_svfprintf_r+0xb94>
 8015eb8:	2310      	movs	r3, #16
 8015eba:	431e      	orrs	r6, r3
 8015ebc:	2220      	movs	r2, #32
 8015ebe:	4032      	ands	r2, r6
 8015ec0:	d00b      	beq.n	8015eda <_svfprintf_r+0xbc6>
 8015ec2:	2307      	movs	r3, #7
 8015ec4:	3407      	adds	r4, #7
 8015ec6:	439c      	bics	r4, r3
 8015ec8:	0023      	movs	r3, r4
 8015eca:	3308      	adds	r3, #8
 8015ecc:	9312      	str	r3, [sp, #72]	; 0x48
 8015ece:	6823      	ldr	r3, [r4, #0]
 8015ed0:	6864      	ldr	r4, [r4, #4]
 8015ed2:	9306      	str	r3, [sp, #24]
 8015ed4:	9407      	str	r4, [sp, #28]
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	e78b      	b.n	8015df2 <_svfprintf_r+0xade>
 8015eda:	1d23      	adds	r3, r4, #4
 8015edc:	9312      	str	r3, [sp, #72]	; 0x48
 8015ede:	2310      	movs	r3, #16
 8015ee0:	4033      	ands	r3, r6
 8015ee2:	d003      	beq.n	8015eec <_svfprintf_r+0xbd8>
 8015ee4:	6823      	ldr	r3, [r4, #0]
 8015ee6:	9306      	str	r3, [sp, #24]
 8015ee8:	9207      	str	r2, [sp, #28]
 8015eea:	e7f4      	b.n	8015ed6 <_svfprintf_r+0xbc2>
 8015eec:	2240      	movs	r2, #64	; 0x40
 8015eee:	4032      	ands	r2, r6
 8015ef0:	d004      	beq.n	8015efc <_svfprintf_r+0xbe8>
 8015ef2:	6822      	ldr	r2, [r4, #0]
 8015ef4:	b292      	uxth	r2, r2
 8015ef6:	9206      	str	r2, [sp, #24]
 8015ef8:	9307      	str	r3, [sp, #28]
 8015efa:	e7ec      	b.n	8015ed6 <_svfprintf_r+0xbc2>
 8015efc:	2380      	movs	r3, #128	; 0x80
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4033      	ands	r3, r6
 8015f02:	d002      	beq.n	8015f0a <_svfprintf_r+0xbf6>
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	e7ed      	b.n	8015ee6 <_svfprintf_r+0xbd2>
 8015f0a:	6822      	ldr	r2, [r4, #0]
 8015f0c:	e7f3      	b.n	8015ef6 <_svfprintf_r+0xbe2>
 8015f0e:	4b7c      	ldr	r3, [pc, #496]	; (8016100 <_svfprintf_r+0xdec>)
 8015f10:	f7ff fad9 	bl	80154c6 <_svfprintf_r+0x1b2>
 8015f14:	1d23      	adds	r3, r4, #4
 8015f16:	9312      	str	r3, [sp, #72]	; 0x48
 8015f18:	2310      	movs	r3, #16
 8015f1a:	4033      	ands	r3, r6
 8015f1c:	d004      	beq.n	8015f28 <_svfprintf_r+0xc14>
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	9306      	str	r3, [sp, #24]
 8015f22:	9207      	str	r2, [sp, #28]
 8015f24:	f7ff fadf 	bl	80154e6 <_svfprintf_r+0x1d2>
 8015f28:	2240      	movs	r2, #64	; 0x40
 8015f2a:	4032      	ands	r2, r6
 8015f2c:	d005      	beq.n	8015f3a <_svfprintf_r+0xc26>
 8015f2e:	6822      	ldr	r2, [r4, #0]
 8015f30:	b292      	uxth	r2, r2
 8015f32:	9206      	str	r2, [sp, #24]
 8015f34:	9307      	str	r3, [sp, #28]
 8015f36:	f7ff fad6 	bl	80154e6 <_svfprintf_r+0x1d2>
 8015f3a:	2380      	movs	r3, #128	; 0x80
 8015f3c:	009b      	lsls	r3, r3, #2
 8015f3e:	4033      	ands	r3, r6
 8015f40:	d002      	beq.n	8015f48 <_svfprintf_r+0xc34>
 8015f42:	6823      	ldr	r3, [r4, #0]
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	e7eb      	b.n	8015f20 <_svfprintf_r+0xc0c>
 8015f48:	6822      	ldr	r2, [r4, #0]
 8015f4a:	e7f2      	b.n	8015f32 <_svfprintf_r+0xc1e>
 8015f4c:	0032      	movs	r2, r6
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e759      	b.n	8015e06 <_svfprintf_r+0xaf2>
 8015f52:	2b01      	cmp	r3, #1
 8015f54:	d100      	bne.n	8015f58 <_svfprintf_r+0xc44>
 8015f56:	e476      	b.n	8015846 <_svfprintf_r+0x532>
 8015f58:	2b02      	cmp	r3, #2
 8015f5a:	d06b      	beq.n	8016034 <_svfprintf_r+0xd20>
 8015f5c:	2507      	movs	r5, #7
 8015f5e:	ab58      	add	r3, sp, #352	; 0x160
 8015f60:	1e5a      	subs	r2, r3, #1
 8015f62:	9209      	str	r2, [sp, #36]	; 0x24
 8015f64:	9a06      	ldr	r2, [sp, #24]
 8015f66:	1e59      	subs	r1, r3, #1
 8015f68:	402a      	ands	r2, r5
 8015f6a:	3230      	adds	r2, #48	; 0x30
 8015f6c:	700a      	strb	r2, [r1, #0]
 8015f6e:	9907      	ldr	r1, [sp, #28]
 8015f70:	074c      	lsls	r4, r1, #29
 8015f72:	9906      	ldr	r1, [sp, #24]
 8015f74:	08c8      	lsrs	r0, r1, #3
 8015f76:	9907      	ldr	r1, [sp, #28]
 8015f78:	4304      	orrs	r4, r0
 8015f7a:	08c9      	lsrs	r1, r1, #3
 8015f7c:	9107      	str	r1, [sp, #28]
 8015f7e:	0021      	movs	r1, r4
 8015f80:	9807      	ldr	r0, [sp, #28]
 8015f82:	9406      	str	r4, [sp, #24]
 8015f84:	4301      	orrs	r1, r0
 8015f86:	d111      	bne.n	8015fac <_svfprintf_r+0xc98>
 8015f88:	07f1      	lsls	r1, r6, #31
 8015f8a:	d502      	bpl.n	8015f92 <_svfprintf_r+0xc7e>
 8015f8c:	3b02      	subs	r3, #2
 8015f8e:	2a30      	cmp	r2, #48	; 0x30
 8015f90:	d173      	bne.n	801607a <_svfprintf_r+0xd66>
 8015f92:	9b08      	ldr	r3, [sp, #32]
 8015f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f96:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f98:	ab58      	add	r3, sp, #352	; 0x160
 8015f9a:	1a9b      	subs	r3, r3, r2
 8015f9c:	9308      	str	r3, [sp, #32]
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8015fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8015fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fa6:	001d      	movs	r5, r3
 8015fa8:	f7ff fb4b 	bl	8015642 <_svfprintf_r+0x32e>
 8015fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fae:	e7d7      	b.n	8015f60 <_svfprintf_r+0xc4c>
 8015fb0:	2480      	movs	r4, #128	; 0x80
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	00e4      	lsls	r4, r4, #3
 8015fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8015fb8:	4034      	ands	r4, r6
 8015fba:	ab58      	add	r3, sp, #352	; 0x160
 8015fbc:	3b01      	subs	r3, #1
 8015fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc0:	220a      	movs	r2, #10
 8015fc2:	9806      	ldr	r0, [sp, #24]
 8015fc4:	9907      	ldr	r1, [sp, #28]
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	f7ea faba 	bl	8000540 <__aeabi_uldivmod>
 8015fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fce:	3230      	adds	r2, #48	; 0x30
 8015fd0:	701a      	strb	r2, [r3, #0]
 8015fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fd4:	3301      	adds	r3, #1
 8015fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd8:	2c00      	cmp	r4, #0
 8015fda:	d01d      	beq.n	8016018 <_svfprintf_r+0xd04>
 8015fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d118      	bne.n	8016018 <_svfprintf_r+0xd04>
 8015fe6:	2aff      	cmp	r2, #255	; 0xff
 8015fe8:	d016      	beq.n	8016018 <_svfprintf_r+0xd04>
 8015fea:	9b07      	ldr	r3, [sp, #28]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d102      	bne.n	8015ff6 <_svfprintf_r+0xce2>
 8015ff0:	9b06      	ldr	r3, [sp, #24]
 8015ff2:	2b09      	cmp	r3, #9
 8015ff4:	d910      	bls.n	8016018 <_svfprintf_r+0xd04>
 8015ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ffa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015ffc:	1a9b      	subs	r3, r3, r2
 8015ffe:	0018      	movs	r0, r3
 8016000:	9309      	str	r3, [sp, #36]	; 0x24
 8016002:	f7fe fa52 	bl	80144aa <strncpy>
 8016006:	2200      	movs	r2, #0
 8016008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801600a:	920d      	str	r2, [sp, #52]	; 0x34
 801600c:	785b      	ldrb	r3, [r3, #1]
 801600e:	1e5a      	subs	r2, r3, #1
 8016010:	4193      	sbcs	r3, r2
 8016012:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016014:	18d3      	adds	r3, r2, r3
 8016016:	9313      	str	r3, [sp, #76]	; 0x4c
 8016018:	220a      	movs	r2, #10
 801601a:	9806      	ldr	r0, [sp, #24]
 801601c:	9907      	ldr	r1, [sp, #28]
 801601e:	2300      	movs	r3, #0
 8016020:	f7ea fa8e 	bl	8000540 <__aeabi_uldivmod>
 8016024:	9006      	str	r0, [sp, #24]
 8016026:	9107      	str	r1, [sp, #28]
 8016028:	9b06      	ldr	r3, [sp, #24]
 801602a:	9a07      	ldr	r2, [sp, #28]
 801602c:	4313      	orrs	r3, r2
 801602e:	d0b0      	beq.n	8015f92 <_svfprintf_r+0xc7e>
 8016030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016032:	e7c3      	b.n	8015fbc <_svfprintf_r+0xca8>
 8016034:	200f      	movs	r0, #15
 8016036:	ab58      	add	r3, sp, #352	; 0x160
 8016038:	9309      	str	r3, [sp, #36]	; 0x24
 801603a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801603c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801603e:	3b01      	subs	r3, #1
 8016040:	9309      	str	r3, [sp, #36]	; 0x24
 8016042:	9b06      	ldr	r3, [sp, #24]
 8016044:	4003      	ands	r3, r0
 8016046:	5cd3      	ldrb	r3, [r2, r3]
 8016048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801604a:	7013      	strb	r3, [r2, #0]
 801604c:	9b07      	ldr	r3, [sp, #28]
 801604e:	0719      	lsls	r1, r3, #28
 8016050:	9b06      	ldr	r3, [sp, #24]
 8016052:	091a      	lsrs	r2, r3, #4
 8016054:	9b07      	ldr	r3, [sp, #28]
 8016056:	4311      	orrs	r1, r2
 8016058:	091b      	lsrs	r3, r3, #4
 801605a:	9307      	str	r3, [sp, #28]
 801605c:	000b      	movs	r3, r1
 801605e:	9a07      	ldr	r2, [sp, #28]
 8016060:	9106      	str	r1, [sp, #24]
 8016062:	4313      	orrs	r3, r2
 8016064:	d1e9      	bne.n	801603a <_svfprintf_r+0xd26>
 8016066:	e794      	b.n	8015f92 <_svfprintf_r+0xc7e>
 8016068:	a958      	add	r1, sp, #352	; 0x160
 801606a:	9109      	str	r1, [sp, #36]	; 0x24
 801606c:	2b00      	cmp	r3, #0
 801606e:	d190      	bne.n	8015f92 <_svfprintf_r+0xc7e>
 8016070:	07d3      	lsls	r3, r2, #31
 8016072:	d58e      	bpl.n	8015f92 <_svfprintf_r+0xc7e>
 8016074:	23e7      	movs	r3, #231	; 0xe7
 8016076:	aa1e      	add	r2, sp, #120	; 0x78
 8016078:	189b      	adds	r3, r3, r2
 801607a:	2230      	movs	r2, #48	; 0x30
 801607c:	f7ff fbf0 	bl	8015860 <_svfprintf_r+0x54c>
 8016080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016082:	2b00      	cmp	r3, #0
 8016084:	d100      	bne.n	8016088 <_svfprintf_r+0xd74>
 8016086:	e38a      	b.n	801679e <_svfprintf_r+0x148a>
 8016088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801608a:	ab3f      	add	r3, sp, #252	; 0xfc
 801608c:	701a      	strb	r2, [r3, #0]
 801608e:	221b      	movs	r2, #27
 8016090:	2000      	movs	r0, #0
 8016092:	a91e      	add	r1, sp, #120	; 0x78
 8016094:	1852      	adds	r2, r2, r1
 8016096:	7010      	strb	r0, [r2, #0]
 8016098:	9412      	str	r4, [sp, #72]	; 0x48
 801609a:	f7ff faca 	bl	8015632 <_svfprintf_r+0x31e>
 801609e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80160a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80160a2:	e592      	b.n	8015bca <_svfprintf_r+0x8b6>
 80160a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160a6:	e42a      	b.n	80158fe <_svfprintf_r+0x5ea>
 80160a8:	2010      	movs	r0, #16
 80160aa:	1812      	adds	r2, r2, r0
 80160ac:	6078      	str	r0, [r7, #4]
 80160ae:	922e      	str	r2, [sp, #184]	; 0xb8
 80160b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80160b2:	2b07      	cmp	r3, #7
 80160b4:	dd08      	ble.n	80160c8 <_svfprintf_r+0xdb4>
 80160b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80160b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160bc:	f002 fa7e 	bl	80185bc <__ssprint_r>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d000      	beq.n	80160c6 <_svfprintf_r+0xdb2>
 80160c4:	e34a      	b.n	801675c <_svfprintf_r+0x1448>
 80160c6:	a92f      	add	r1, sp, #188	; 0xbc
 80160c8:	3c10      	subs	r4, #16
 80160ca:	000f      	movs	r7, r1
 80160cc:	f7ff fad8 	bl	8015680 <_svfprintf_r+0x36c>
 80160d0:	2010      	movs	r0, #16
 80160d2:	1812      	adds	r2, r2, r0
 80160d4:	6078      	str	r0, [r7, #4]
 80160d6:	922e      	str	r2, [sp, #184]	; 0xb8
 80160d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80160da:	2b07      	cmp	r3, #7
 80160dc:	dd08      	ble.n	80160f0 <_svfprintf_r+0xddc>
 80160de:	aa2c      	add	r2, sp, #176	; 0xb0
 80160e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160e4:	f002 fa6a 	bl	80185bc <__ssprint_r>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d000      	beq.n	80160ee <_svfprintf_r+0xdda>
 80160ec:	e336      	b.n	801675c <_svfprintf_r+0x1448>
 80160ee:	a92f      	add	r1, sp, #188	; 0xbc
 80160f0:	3c10      	subs	r4, #16
 80160f2:	000f      	movs	r7, r1
 80160f4:	f7ff fb24 	bl	8015740 <_svfprintf_r+0x42c>
 80160f8:	fffffbff 	.word	0xfffffbff
 80160fc:	00007830 	.word	0x00007830
 8016100:	0801bc00 	.word	0x0801bc00
 8016104:	2010      	movs	r0, #16
 8016106:	1812      	adds	r2, r2, r0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	922e      	str	r2, [sp, #184]	; 0xb8
 801610c:	932d      	str	r3, [sp, #180]	; 0xb4
 801610e:	2b07      	cmp	r3, #7
 8016110:	dd08      	ble.n	8016124 <_svfprintf_r+0xe10>
 8016112:	aa2c      	add	r2, sp, #176	; 0xb0
 8016114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016118:	f002 fa50 	bl	80185bc <__ssprint_r>
 801611c:	2800      	cmp	r0, #0
 801611e:	d000      	beq.n	8016122 <_svfprintf_r+0xe0e>
 8016120:	e31c      	b.n	801675c <_svfprintf_r+0x1448>
 8016122:	a92f      	add	r1, sp, #188	; 0xbc
 8016124:	3c10      	subs	r4, #16
 8016126:	000f      	movs	r7, r1
 8016128:	f7ff fb2c 	bl	8015784 <_svfprintf_r+0x470>
 801612c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801612e:	2b65      	cmp	r3, #101	; 0x65
 8016130:	dc00      	bgt.n	8016134 <_svfprintf_r+0xe20>
 8016132:	e259      	b.n	80165e8 <_svfprintf_r+0x12d4>
 8016134:	2200      	movs	r2, #0
 8016136:	2300      	movs	r3, #0
 8016138:	981a      	ldr	r0, [sp, #104]	; 0x68
 801613a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801613c:	f7ea f98e 	bl	800045c <__aeabi_dcmpeq>
 8016140:	2800      	cmp	r0, #0
 8016142:	d07c      	beq.n	801623e <_svfprintf_r+0xf2a>
 8016144:	4b81      	ldr	r3, [pc, #516]	; (801634c <_svfprintf_r+0x1038>)
 8016146:	603b      	str	r3, [r7, #0]
 8016148:	2301      	movs	r3, #1
 801614a:	607b      	str	r3, [r7, #4]
 801614c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801614e:	3708      	adds	r7, #8
 8016150:	3301      	adds	r3, #1
 8016152:	932e      	str	r3, [sp, #184]	; 0xb8
 8016154:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016156:	9308      	str	r3, [sp, #32]
 8016158:	3301      	adds	r3, #1
 801615a:	932d      	str	r3, [sp, #180]	; 0xb4
 801615c:	2b07      	cmp	r3, #7
 801615e:	dd08      	ble.n	8016172 <_svfprintf_r+0xe5e>
 8016160:	aa2c      	add	r2, sp, #176	; 0xb0
 8016162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016166:	f002 fa29 	bl	80185bc <__ssprint_r>
 801616a:	2800      	cmp	r0, #0
 801616c:	d000      	beq.n	8016170 <_svfprintf_r+0xe5c>
 801616e:	e2f5      	b.n	801675c <_svfprintf_r+0x1448>
 8016170:	af2f      	add	r7, sp, #188	; 0xbc
 8016172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016176:	4293      	cmp	r3, r2
 8016178:	db01      	blt.n	801617e <_svfprintf_r+0xe6a>
 801617a:	07f3      	lsls	r3, r6, #31
 801617c:	d51d      	bpl.n	80161ba <_svfprintf_r+0xea6>
 801617e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016180:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016182:	4694      	mov	ip, r2
 8016184:	603b      	str	r3, [r7, #0]
 8016186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016188:	607b      	str	r3, [r7, #4]
 801618a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801618c:	3708      	adds	r7, #8
 801618e:	4463      	add	r3, ip
 8016190:	932e      	str	r3, [sp, #184]	; 0xb8
 8016192:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016194:	9308      	str	r3, [sp, #32]
 8016196:	3301      	adds	r3, #1
 8016198:	932d      	str	r3, [sp, #180]	; 0xb4
 801619a:	2b07      	cmp	r3, #7
 801619c:	dd08      	ble.n	80161b0 <_svfprintf_r+0xe9c>
 801619e:	aa2c      	add	r2, sp, #176	; 0xb0
 80161a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161a4:	f002 fa0a 	bl	80185bc <__ssprint_r>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d000      	beq.n	80161ae <_svfprintf_r+0xe9a>
 80161ac:	e2d6      	b.n	801675c <_svfprintf_r+0x1448>
 80161ae:	af2f      	add	r7, sp, #188	; 0xbc
 80161b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b2:	2510      	movs	r5, #16
 80161b4:	1e5c      	subs	r4, r3, #1
 80161b6:	2c00      	cmp	r4, #0
 80161b8:	dc2f      	bgt.n	801621a <_svfprintf_r+0xf06>
 80161ba:	0773      	lsls	r3, r6, #29
 80161bc:	d500      	bpl.n	80161c0 <_svfprintf_r+0xeac>
 80161be:	e2af      	b.n	8016720 <_svfprintf_r+0x140c>
 80161c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80161c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161c4:	4293      	cmp	r3, r2
 80161c6:	da00      	bge.n	80161ca <_svfprintf_r+0xeb6>
 80161c8:	0013      	movs	r3, r2
 80161ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80161cc:	18d3      	adds	r3, r2, r3
 80161ce:	9315      	str	r3, [sp, #84]	; 0x54
 80161d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161d2:	9308      	str	r3, [sp, #32]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d007      	beq.n	80161e8 <_svfprintf_r+0xed4>
 80161d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80161da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161de:	f002 f9ed 	bl	80185bc <__ssprint_r>
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d000      	beq.n	80161e8 <_svfprintf_r+0xed4>
 80161e6:	e2b9      	b.n	801675c <_svfprintf_r+0x1448>
 80161e8:	2300      	movs	r3, #0
 80161ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80161ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d000      	beq.n	80161f4 <_svfprintf_r+0xee0>
 80161f2:	e2cf      	b.n	8016794 <_svfprintf_r+0x1480>
 80161f4:	af2f      	add	r7, sp, #188	; 0xbc
 80161f6:	e5d6      	b.n	8015da6 <_svfprintf_r+0xa92>
 80161f8:	3210      	adds	r2, #16
 80161fa:	607d      	str	r5, [r7, #4]
 80161fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80161fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016200:	2b07      	cmp	r3, #7
 8016202:	dd08      	ble.n	8016216 <_svfprintf_r+0xf02>
 8016204:	aa2c      	add	r2, sp, #176	; 0xb0
 8016206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016208:	980a      	ldr	r0, [sp, #40]	; 0x28
 801620a:	f002 f9d7 	bl	80185bc <__ssprint_r>
 801620e:	2800      	cmp	r0, #0
 8016210:	d000      	beq.n	8016214 <_svfprintf_r+0xf00>
 8016212:	e2a3      	b.n	801675c <_svfprintf_r+0x1448>
 8016214:	a92f      	add	r1, sp, #188	; 0xbc
 8016216:	000f      	movs	r7, r1
 8016218:	3c10      	subs	r4, #16
 801621a:	0039      	movs	r1, r7
 801621c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801621e:	484c      	ldr	r0, [pc, #304]	; (8016350 <_svfprintf_r+0x103c>)
 8016220:	9308      	str	r3, [sp, #32]
 8016222:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016224:	3301      	adds	r3, #1
 8016226:	3108      	adds	r1, #8
 8016228:	6038      	str	r0, [r7, #0]
 801622a:	2c10      	cmp	r4, #16
 801622c:	dce4      	bgt.n	80161f8 <_svfprintf_r+0xee4>
 801622e:	607c      	str	r4, [r7, #4]
 8016230:	18a4      	adds	r4, r4, r2
 8016232:	942e      	str	r4, [sp, #184]	; 0xb8
 8016234:	932d      	str	r3, [sp, #180]	; 0xb4
 8016236:	000f      	movs	r7, r1
 8016238:	2b07      	cmp	r3, #7
 801623a:	ddbe      	ble.n	80161ba <_svfprintf_r+0xea6>
 801623c:	e06a      	b.n	8016314 <_svfprintf_r+0x1000>
 801623e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016240:	2b00      	cmp	r3, #0
 8016242:	dd00      	ble.n	8016246 <_svfprintf_r+0xf32>
 8016244:	e086      	b.n	8016354 <_svfprintf_r+0x1040>
 8016246:	4b41      	ldr	r3, [pc, #260]	; (801634c <_svfprintf_r+0x1038>)
 8016248:	603b      	str	r3, [r7, #0]
 801624a:	2301      	movs	r3, #1
 801624c:	607b      	str	r3, [r7, #4]
 801624e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016250:	3708      	adds	r7, #8
 8016252:	3301      	adds	r3, #1
 8016254:	932e      	str	r3, [sp, #184]	; 0xb8
 8016256:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016258:	9308      	str	r3, [sp, #32]
 801625a:	3301      	adds	r3, #1
 801625c:	932d      	str	r3, [sp, #180]	; 0xb4
 801625e:	2b07      	cmp	r3, #7
 8016260:	dd08      	ble.n	8016274 <_svfprintf_r+0xf60>
 8016262:	aa2c      	add	r2, sp, #176	; 0xb0
 8016264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016266:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016268:	f002 f9a8 	bl	80185bc <__ssprint_r>
 801626c:	2800      	cmp	r0, #0
 801626e:	d000      	beq.n	8016272 <_svfprintf_r+0xf5e>
 8016270:	e274      	b.n	801675c <_svfprintf_r+0x1448>
 8016272:	af2f      	add	r7, sp, #188	; 0xbc
 8016274:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016276:	2b00      	cmp	r3, #0
 8016278:	d104      	bne.n	8016284 <_svfprintf_r+0xf70>
 801627a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801627c:	2b00      	cmp	r3, #0
 801627e:	d101      	bne.n	8016284 <_svfprintf_r+0xf70>
 8016280:	07f3      	lsls	r3, r6, #31
 8016282:	d59a      	bpl.n	80161ba <_svfprintf_r+0xea6>
 8016284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016286:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016288:	4694      	mov	ip, r2
 801628a:	603b      	str	r3, [r7, #0]
 801628c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801628e:	607b      	str	r3, [r7, #4]
 8016290:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016292:	3708      	adds	r7, #8
 8016294:	4463      	add	r3, ip
 8016296:	932e      	str	r3, [sp, #184]	; 0xb8
 8016298:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801629a:	9308      	str	r3, [sp, #32]
 801629c:	3301      	adds	r3, #1
 801629e:	932d      	str	r3, [sp, #180]	; 0xb4
 80162a0:	2b07      	cmp	r3, #7
 80162a2:	dd08      	ble.n	80162b6 <_svfprintf_r+0xfa2>
 80162a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80162a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162aa:	f002 f987 	bl	80185bc <__ssprint_r>
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d000      	beq.n	80162b4 <_svfprintf_r+0xfa0>
 80162b2:	e253      	b.n	801675c <_svfprintf_r+0x1448>
 80162b4:	af2f      	add	r7, sp, #188	; 0xbc
 80162b6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80162b8:	2c00      	cmp	r4, #0
 80162ba:	da1a      	bge.n	80162f2 <_svfprintf_r+0xfde>
 80162bc:	0039      	movs	r1, r7
 80162be:	2510      	movs	r5, #16
 80162c0:	4264      	negs	r4, r4
 80162c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162c4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80162c6:	9308      	str	r3, [sp, #32]
 80162c8:	1c5a      	adds	r2, r3, #1
 80162ca:	4b21      	ldr	r3, [pc, #132]	; (8016350 <_svfprintf_r+0x103c>)
 80162cc:	3708      	adds	r7, #8
 80162ce:	600b      	str	r3, [r1, #0]
 80162d0:	2c10      	cmp	r4, #16
 80162d2:	dc29      	bgt.n	8016328 <_svfprintf_r+0x1014>
 80162d4:	604c      	str	r4, [r1, #4]
 80162d6:	1824      	adds	r4, r4, r0
 80162d8:	942e      	str	r4, [sp, #184]	; 0xb8
 80162da:	922d      	str	r2, [sp, #180]	; 0xb4
 80162dc:	2a07      	cmp	r2, #7
 80162de:	dd08      	ble.n	80162f2 <_svfprintf_r+0xfde>
 80162e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80162e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162e6:	f002 f969 	bl	80185bc <__ssprint_r>
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d000      	beq.n	80162f0 <_svfprintf_r+0xfdc>
 80162ee:	e235      	b.n	801675c <_svfprintf_r+0x1448>
 80162f0:	af2f      	add	r7, sp, #188	; 0xbc
 80162f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80162f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f6:	468c      	mov	ip, r1
 80162f8:	603b      	str	r3, [r7, #0]
 80162fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162fc:	607b      	str	r3, [r7, #4]
 80162fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016300:	4463      	add	r3, ip
 8016302:	932e      	str	r3, [sp, #184]	; 0xb8
 8016304:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016306:	1c5a      	adds	r2, r3, #1
 8016308:	9308      	str	r3, [sp, #32]
 801630a:	922d      	str	r2, [sp, #180]	; 0xb4
 801630c:	2a07      	cmp	r2, #7
 801630e:	dc01      	bgt.n	8016314 <_svfprintf_r+0x1000>
 8016310:	f7ff fa6c 	bl	80157ec <_svfprintf_r+0x4d8>
 8016314:	aa2c      	add	r2, sp, #176	; 0xb0
 8016316:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016318:	980a      	ldr	r0, [sp, #40]	; 0x28
 801631a:	f002 f94f 	bl	80185bc <__ssprint_r>
 801631e:	2800      	cmp	r0, #0
 8016320:	d000      	beq.n	8016324 <_svfprintf_r+0x1010>
 8016322:	e21b      	b.n	801675c <_svfprintf_r+0x1448>
 8016324:	af2f      	add	r7, sp, #188	; 0xbc
 8016326:	e748      	b.n	80161ba <_svfprintf_r+0xea6>
 8016328:	3010      	adds	r0, #16
 801632a:	604d      	str	r5, [r1, #4]
 801632c:	902e      	str	r0, [sp, #184]	; 0xb8
 801632e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016330:	2a07      	cmp	r2, #7
 8016332:	dd08      	ble.n	8016346 <_svfprintf_r+0x1032>
 8016334:	aa2c      	add	r2, sp, #176	; 0xb0
 8016336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016338:	980a      	ldr	r0, [sp, #40]	; 0x28
 801633a:	f002 f93f 	bl	80185bc <__ssprint_r>
 801633e:	2800      	cmp	r0, #0
 8016340:	d000      	beq.n	8016344 <_svfprintf_r+0x1030>
 8016342:	e20b      	b.n	801675c <_svfprintf_r+0x1448>
 8016344:	af2f      	add	r7, sp, #188	; 0xbc
 8016346:	3c10      	subs	r4, #16
 8016348:	0039      	movs	r1, r7
 801634a:	e7ba      	b.n	80162c2 <_svfprintf_r+0xfae>
 801634c:	0801bc22 	.word	0x0801bc22
 8016350:	0801bc34 	.word	0x0801bc34
 8016354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016356:	002c      	movs	r4, r5
 8016358:	429d      	cmp	r5, r3
 801635a:	dd00      	ble.n	801635e <_svfprintf_r+0x104a>
 801635c:	001c      	movs	r4, r3
 801635e:	2c00      	cmp	r4, #0
 8016360:	dd15      	ble.n	801638e <_svfprintf_r+0x107a>
 8016362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016364:	607c      	str	r4, [r7, #4]
 8016366:	603b      	str	r3, [r7, #0]
 8016368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801636a:	3708      	adds	r7, #8
 801636c:	18e3      	adds	r3, r4, r3
 801636e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016370:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016372:	9308      	str	r3, [sp, #32]
 8016374:	3301      	adds	r3, #1
 8016376:	932d      	str	r3, [sp, #180]	; 0xb4
 8016378:	2b07      	cmp	r3, #7
 801637a:	dd08      	ble.n	801638e <_svfprintf_r+0x107a>
 801637c:	aa2c      	add	r2, sp, #176	; 0xb0
 801637e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016380:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016382:	f002 f91b 	bl	80185bc <__ssprint_r>
 8016386:	2800      	cmp	r0, #0
 8016388:	d000      	beq.n	801638c <_svfprintf_r+0x1078>
 801638a:	e1e7      	b.n	801675c <_svfprintf_r+0x1448>
 801638c:	af2f      	add	r7, sp, #188	; 0xbc
 801638e:	43e3      	mvns	r3, r4
 8016390:	17db      	asrs	r3, r3, #31
 8016392:	401c      	ands	r4, r3
 8016394:	1b2c      	subs	r4, r5, r4
 8016396:	2c00      	cmp	r4, #0
 8016398:	dd1a      	ble.n	80163d0 <_svfprintf_r+0x10bc>
 801639a:	0039      	movs	r1, r7
 801639c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801639e:	48d4      	ldr	r0, [pc, #848]	; (80166f0 <_svfprintf_r+0x13dc>)
 80163a0:	9308      	str	r3, [sp, #32]
 80163a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80163a4:	3301      	adds	r3, #1
 80163a6:	3108      	adds	r1, #8
 80163a8:	6038      	str	r0, [r7, #0]
 80163aa:	2c10      	cmp	r4, #16
 80163ac:	dd00      	ble.n	80163b0 <_svfprintf_r+0x109c>
 80163ae:	e089      	b.n	80164c4 <_svfprintf_r+0x11b0>
 80163b0:	607c      	str	r4, [r7, #4]
 80163b2:	18a4      	adds	r4, r4, r2
 80163b4:	942e      	str	r4, [sp, #184]	; 0xb8
 80163b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80163b8:	000f      	movs	r7, r1
 80163ba:	2b07      	cmp	r3, #7
 80163bc:	dd08      	ble.n	80163d0 <_svfprintf_r+0x10bc>
 80163be:	aa2c      	add	r2, sp, #176	; 0xb0
 80163c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163c4:	f002 f8fa 	bl	80185bc <__ssprint_r>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d000      	beq.n	80163ce <_svfprintf_r+0x10ba>
 80163cc:	e1c6      	b.n	801675c <_svfprintf_r+0x1448>
 80163ce:	af2f      	add	r7, sp, #188	; 0xbc
 80163d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163d2:	195d      	adds	r5, r3, r5
 80163d4:	0573      	lsls	r3, r6, #21
 80163d6:	d50d      	bpl.n	80163f4 <_svfprintf_r+0x10e0>
 80163d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d000      	beq.n	80163e0 <_svfprintf_r+0x10cc>
 80163de:	e084      	b.n	80164ea <_svfprintf_r+0x11d6>
 80163e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d000      	beq.n	80163e8 <_svfprintf_r+0x10d4>
 80163e6:	e083      	b.n	80164f0 <_svfprintf_r+0x11dc>
 80163e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163ec:	189b      	adds	r3, r3, r2
 80163ee:	429d      	cmp	r5, r3
 80163f0:	d900      	bls.n	80163f4 <_svfprintf_r+0x10e0>
 80163f2:	001d      	movs	r5, r3
 80163f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80163f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163f8:	4293      	cmp	r3, r2
 80163fa:	db01      	blt.n	8016400 <_svfprintf_r+0x10ec>
 80163fc:	07f3      	lsls	r3, r6, #31
 80163fe:	d518      	bpl.n	8016432 <_svfprintf_r+0x111e>
 8016400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016402:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016404:	4694      	mov	ip, r2
 8016406:	603b      	str	r3, [r7, #0]
 8016408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801640a:	607b      	str	r3, [r7, #4]
 801640c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801640e:	3708      	adds	r7, #8
 8016410:	4463      	add	r3, ip
 8016412:	932e      	str	r3, [sp, #184]	; 0xb8
 8016414:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016416:	9308      	str	r3, [sp, #32]
 8016418:	3301      	adds	r3, #1
 801641a:	932d      	str	r3, [sp, #180]	; 0xb4
 801641c:	2b07      	cmp	r3, #7
 801641e:	dd08      	ble.n	8016432 <_svfprintf_r+0x111e>
 8016420:	aa2c      	add	r2, sp, #176	; 0xb0
 8016422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016424:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016426:	f002 f8c9 	bl	80185bc <__ssprint_r>
 801642a:	2800      	cmp	r0, #0
 801642c:	d000      	beq.n	8016430 <_svfprintf_r+0x111c>
 801642e:	e195      	b.n	801675c <_svfprintf_r+0x1448>
 8016430:	af2f      	add	r7, sp, #188	; 0xbc
 8016432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016436:	4694      	mov	ip, r2
 8016438:	9926      	ldr	r1, [sp, #152]	; 0x98
 801643a:	4463      	add	r3, ip
 801643c:	1b5b      	subs	r3, r3, r5
 801643e:	1a54      	subs	r4, r2, r1
 8016440:	429c      	cmp	r4, r3
 8016442:	dd00      	ble.n	8016446 <_svfprintf_r+0x1132>
 8016444:	001c      	movs	r4, r3
 8016446:	2c00      	cmp	r4, #0
 8016448:	dd14      	ble.n	8016474 <_svfprintf_r+0x1160>
 801644a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801644c:	603d      	str	r5, [r7, #0]
 801644e:	18e3      	adds	r3, r4, r3
 8016450:	932e      	str	r3, [sp, #184]	; 0xb8
 8016452:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016454:	607c      	str	r4, [r7, #4]
 8016456:	9308      	str	r3, [sp, #32]
 8016458:	3301      	adds	r3, #1
 801645a:	932d      	str	r3, [sp, #180]	; 0xb4
 801645c:	3708      	adds	r7, #8
 801645e:	2b07      	cmp	r3, #7
 8016460:	dd08      	ble.n	8016474 <_svfprintf_r+0x1160>
 8016462:	aa2c      	add	r2, sp, #176	; 0xb0
 8016464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016466:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016468:	f002 f8a8 	bl	80185bc <__ssprint_r>
 801646c:	2800      	cmp	r0, #0
 801646e:	d000      	beq.n	8016472 <_svfprintf_r+0x115e>
 8016470:	e174      	b.n	801675c <_svfprintf_r+0x1448>
 8016472:	af2f      	add	r7, sp, #188	; 0xbc
 8016474:	43e3      	mvns	r3, r4
 8016476:	17db      	asrs	r3, r3, #31
 8016478:	401c      	ands	r4, r3
 801647a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801647c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801647e:	2510      	movs	r5, #16
 8016480:	1a9b      	subs	r3, r3, r2
 8016482:	1b1c      	subs	r4, r3, r4
 8016484:	2c00      	cmp	r4, #0
 8016486:	dc00      	bgt.n	801648a <_svfprintf_r+0x1176>
 8016488:	e697      	b.n	80161ba <_svfprintf_r+0xea6>
 801648a:	0039      	movs	r1, r7
 801648c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801648e:	4898      	ldr	r0, [pc, #608]	; (80166f0 <_svfprintf_r+0x13dc>)
 8016490:	9308      	str	r3, [sp, #32]
 8016492:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016494:	3301      	adds	r3, #1
 8016496:	3108      	adds	r1, #8
 8016498:	6038      	str	r0, [r7, #0]
 801649a:	2c10      	cmp	r4, #16
 801649c:	dc00      	bgt.n	80164a0 <_svfprintf_r+0x118c>
 801649e:	e6c6      	b.n	801622e <_svfprintf_r+0xf1a>
 80164a0:	3210      	adds	r2, #16
 80164a2:	607d      	str	r5, [r7, #4]
 80164a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80164a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80164a8:	2b07      	cmp	r3, #7
 80164aa:	dd08      	ble.n	80164be <_svfprintf_r+0x11aa>
 80164ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80164ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164b2:	f002 f883 	bl	80185bc <__ssprint_r>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d000      	beq.n	80164bc <_svfprintf_r+0x11a8>
 80164ba:	e14f      	b.n	801675c <_svfprintf_r+0x1448>
 80164bc:	a92f      	add	r1, sp, #188	; 0xbc
 80164be:	3c10      	subs	r4, #16
 80164c0:	000f      	movs	r7, r1
 80164c2:	e7e2      	b.n	801648a <_svfprintf_r+0x1176>
 80164c4:	2010      	movs	r0, #16
 80164c6:	1812      	adds	r2, r2, r0
 80164c8:	6078      	str	r0, [r7, #4]
 80164ca:	922e      	str	r2, [sp, #184]	; 0xb8
 80164cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80164ce:	2b07      	cmp	r3, #7
 80164d0:	dd08      	ble.n	80164e4 <_svfprintf_r+0x11d0>
 80164d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80164d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164d8:	f002 f870 	bl	80185bc <__ssprint_r>
 80164dc:	2800      	cmp	r0, #0
 80164de:	d000      	beq.n	80164e2 <_svfprintf_r+0x11ce>
 80164e0:	e13c      	b.n	801675c <_svfprintf_r+0x1448>
 80164e2:	a92f      	add	r1, sp, #188	; 0xbc
 80164e4:	3c10      	subs	r4, #16
 80164e6:	000f      	movs	r7, r1
 80164e8:	e757      	b.n	801639a <_svfprintf_r+0x1086>
 80164ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d061      	beq.n	80165b4 <_svfprintf_r+0x12a0>
 80164f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164f2:	3b01      	subs	r3, #1
 80164f4:	9310      	str	r3, [sp, #64]	; 0x40
 80164f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80164f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80164fa:	4694      	mov	ip, r2
 80164fc:	603b      	str	r3, [r7, #0]
 80164fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016500:	607b      	str	r3, [r7, #4]
 8016502:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016504:	3708      	adds	r7, #8
 8016506:	4463      	add	r3, ip
 8016508:	932e      	str	r3, [sp, #184]	; 0xb8
 801650a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801650c:	9308      	str	r3, [sp, #32]
 801650e:	3301      	adds	r3, #1
 8016510:	932d      	str	r3, [sp, #180]	; 0xb4
 8016512:	2b07      	cmp	r3, #7
 8016514:	dd08      	ble.n	8016528 <_svfprintf_r+0x1214>
 8016516:	aa2c      	add	r2, sp, #176	; 0xb0
 8016518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801651a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801651c:	f002 f84e 	bl	80185bc <__ssprint_r>
 8016520:	2800      	cmp	r0, #0
 8016522:	d000      	beq.n	8016526 <_svfprintf_r+0x1212>
 8016524:	e11a      	b.n	801675c <_svfprintf_r+0x1448>
 8016526:	af2f      	add	r7, sp, #188	; 0xbc
 8016528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801652a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801652c:	189b      	adds	r3, r3, r2
 801652e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016530:	1b5b      	subs	r3, r3, r5
 8016532:	7814      	ldrb	r4, [r2, #0]
 8016534:	429c      	cmp	r4, r3
 8016536:	dd00      	ble.n	801653a <_svfprintf_r+0x1226>
 8016538:	001c      	movs	r4, r3
 801653a:	2c00      	cmp	r4, #0
 801653c:	dd14      	ble.n	8016568 <_svfprintf_r+0x1254>
 801653e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016540:	603d      	str	r5, [r7, #0]
 8016542:	18e3      	adds	r3, r4, r3
 8016544:	932e      	str	r3, [sp, #184]	; 0xb8
 8016546:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016548:	607c      	str	r4, [r7, #4]
 801654a:	9308      	str	r3, [sp, #32]
 801654c:	3301      	adds	r3, #1
 801654e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016550:	3708      	adds	r7, #8
 8016552:	2b07      	cmp	r3, #7
 8016554:	dd08      	ble.n	8016568 <_svfprintf_r+0x1254>
 8016556:	aa2c      	add	r2, sp, #176	; 0xb0
 8016558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801655a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801655c:	f002 f82e 	bl	80185bc <__ssprint_r>
 8016560:	2800      	cmp	r0, #0
 8016562:	d000      	beq.n	8016566 <_svfprintf_r+0x1252>
 8016564:	e0fa      	b.n	801675c <_svfprintf_r+0x1448>
 8016566:	af2f      	add	r7, sp, #188	; 0xbc
 8016568:	43e3      	mvns	r3, r4
 801656a:	17db      	asrs	r3, r3, #31
 801656c:	401c      	ands	r4, r3
 801656e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	1b1c      	subs	r4, r3, r4
 8016574:	2c00      	cmp	r4, #0
 8016576:	dd19      	ble.n	80165ac <_svfprintf_r+0x1298>
 8016578:	0039      	movs	r1, r7
 801657a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801657c:	485c      	ldr	r0, [pc, #368]	; (80166f0 <_svfprintf_r+0x13dc>)
 801657e:	9308      	str	r3, [sp, #32]
 8016580:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016582:	3301      	adds	r3, #1
 8016584:	3108      	adds	r1, #8
 8016586:	6038      	str	r0, [r7, #0]
 8016588:	2c10      	cmp	r4, #16
 801658a:	dc1a      	bgt.n	80165c2 <_svfprintf_r+0x12ae>
 801658c:	607c      	str	r4, [r7, #4]
 801658e:	18a4      	adds	r4, r4, r2
 8016590:	942e      	str	r4, [sp, #184]	; 0xb8
 8016592:	932d      	str	r3, [sp, #180]	; 0xb4
 8016594:	000f      	movs	r7, r1
 8016596:	2b07      	cmp	r3, #7
 8016598:	dd08      	ble.n	80165ac <_svfprintf_r+0x1298>
 801659a:	aa2c      	add	r2, sp, #176	; 0xb0
 801659c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801659e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165a0:	f002 f80c 	bl	80185bc <__ssprint_r>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d000      	beq.n	80165aa <_svfprintf_r+0x1296>
 80165a8:	e0d8      	b.n	801675c <_svfprintf_r+0x1448>
 80165aa:	af2f      	add	r7, sp, #188	; 0xbc
 80165ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	18ed      	adds	r5, r5, r3
 80165b2:	e711      	b.n	80163d8 <_svfprintf_r+0x10c4>
 80165b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165b6:	3b01      	subs	r3, #1
 80165b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80165ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165bc:	3b01      	subs	r3, #1
 80165be:	930f      	str	r3, [sp, #60]	; 0x3c
 80165c0:	e799      	b.n	80164f6 <_svfprintf_r+0x11e2>
 80165c2:	2010      	movs	r0, #16
 80165c4:	1812      	adds	r2, r2, r0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	922e      	str	r2, [sp, #184]	; 0xb8
 80165ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80165cc:	2b07      	cmp	r3, #7
 80165ce:	dd08      	ble.n	80165e2 <_svfprintf_r+0x12ce>
 80165d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80165d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165d6:	f001 fff1 	bl	80185bc <__ssprint_r>
 80165da:	2800      	cmp	r0, #0
 80165dc:	d000      	beq.n	80165e0 <_svfprintf_r+0x12cc>
 80165de:	e0bd      	b.n	801675c <_svfprintf_r+0x1448>
 80165e0:	a92f      	add	r1, sp, #188	; 0xbc
 80165e2:	3c10      	subs	r4, #16
 80165e4:	000f      	movs	r7, r1
 80165e6:	e7c7      	b.n	8016578 <_svfprintf_r+0x1264>
 80165e8:	003c      	movs	r4, r7
 80165ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80165ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165f0:	9308      	str	r3, [sp, #32]
 80165f2:	3101      	adds	r1, #1
 80165f4:	3301      	adds	r3, #1
 80165f6:	3408      	adds	r4, #8
 80165f8:	2a01      	cmp	r2, #1
 80165fa:	dc03      	bgt.n	8016604 <_svfprintf_r+0x12f0>
 80165fc:	2201      	movs	r2, #1
 80165fe:	4216      	tst	r6, r2
 8016600:	d100      	bne.n	8016604 <_svfprintf_r+0x12f0>
 8016602:	e088      	b.n	8016716 <_svfprintf_r+0x1402>
 8016604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016606:	912e      	str	r1, [sp, #184]	; 0xb8
 8016608:	603a      	str	r2, [r7, #0]
 801660a:	2201      	movs	r2, #1
 801660c:	932d      	str	r3, [sp, #180]	; 0xb4
 801660e:	607a      	str	r2, [r7, #4]
 8016610:	2b07      	cmp	r3, #7
 8016612:	dd08      	ble.n	8016626 <_svfprintf_r+0x1312>
 8016614:	aa2c      	add	r2, sp, #176	; 0xb0
 8016616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016618:	980a      	ldr	r0, [sp, #40]	; 0x28
 801661a:	f001 ffcf 	bl	80185bc <__ssprint_r>
 801661e:	2800      	cmp	r0, #0
 8016620:	d000      	beq.n	8016624 <_svfprintf_r+0x1310>
 8016622:	e09b      	b.n	801675c <_svfprintf_r+0x1448>
 8016624:	ac2f      	add	r4, sp, #188	; 0xbc
 8016626:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016628:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801662a:	4694      	mov	ip, r2
 801662c:	6023      	str	r3, [r4, #0]
 801662e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016630:	6063      	str	r3, [r4, #4]
 8016632:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016634:	3408      	adds	r4, #8
 8016636:	4463      	add	r3, ip
 8016638:	932e      	str	r3, [sp, #184]	; 0xb8
 801663a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801663c:	9308      	str	r3, [sp, #32]
 801663e:	3301      	adds	r3, #1
 8016640:	932d      	str	r3, [sp, #180]	; 0xb4
 8016642:	2b07      	cmp	r3, #7
 8016644:	dd08      	ble.n	8016658 <_svfprintf_r+0x1344>
 8016646:	aa2c      	add	r2, sp, #176	; 0xb0
 8016648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801664a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801664c:	f001 ffb6 	bl	80185bc <__ssprint_r>
 8016650:	2800      	cmp	r0, #0
 8016652:	d000      	beq.n	8016656 <_svfprintf_r+0x1342>
 8016654:	e082      	b.n	801675c <_svfprintf_r+0x1448>
 8016656:	ac2f      	add	r4, sp, #188	; 0xbc
 8016658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801665a:	2200      	movs	r2, #0
 801665c:	1e5d      	subs	r5, r3, #1
 801665e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016660:	2300      	movs	r3, #0
 8016662:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016664:	f7e9 fefa 	bl	800045c <__aeabi_dcmpeq>
 8016668:	2800      	cmp	r0, #0
 801666a:	d12c      	bne.n	80166c6 <_svfprintf_r+0x13b2>
 801666c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801666e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016670:	9308      	str	r3, [sp, #32]
 8016672:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016674:	6065      	str	r5, [r4, #4]
 8016676:	1c5a      	adds	r2, r3, #1
 8016678:	930e      	str	r3, [sp, #56]	; 0x38
 801667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801667c:	922d      	str	r2, [sp, #180]	; 0xb4
 801667e:	3301      	adds	r3, #1
 8016680:	6023      	str	r3, [r4, #0]
 8016682:	9b08      	ldr	r3, [sp, #32]
 8016684:	3408      	adds	r4, #8
 8016686:	3b01      	subs	r3, #1
 8016688:	185b      	adds	r3, r3, r1
 801668a:	932e      	str	r3, [sp, #184]	; 0xb8
 801668c:	2a07      	cmp	r2, #7
 801668e:	dd07      	ble.n	80166a0 <_svfprintf_r+0x138c>
 8016690:	aa2c      	add	r2, sp, #176	; 0xb0
 8016692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016694:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016696:	f001 ff91 	bl	80185bc <__ssprint_r>
 801669a:	2800      	cmp	r0, #0
 801669c:	d15e      	bne.n	801675c <_svfprintf_r+0x1448>
 801669e:	ac2f      	add	r4, sp, #188	; 0xbc
 80166a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80166a2:	ab28      	add	r3, sp, #160	; 0xa0
 80166a4:	4694      	mov	ip, r2
 80166a6:	6023      	str	r3, [r4, #0]
 80166a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166aa:	6063      	str	r3, [r4, #4]
 80166ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166ae:	4463      	add	r3, ip
 80166b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80166b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166b4:	9308      	str	r3, [sp, #32]
 80166b6:	3301      	adds	r3, #1
 80166b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80166ba:	2b07      	cmp	r3, #7
 80166bc:	dd00      	ble.n	80166c0 <_svfprintf_r+0x13ac>
 80166be:	e629      	b.n	8016314 <_svfprintf_r+0x1000>
 80166c0:	3408      	adds	r4, #8
 80166c2:	0027      	movs	r7, r4
 80166c4:	e579      	b.n	80161ba <_svfprintf_r+0xea6>
 80166c6:	2710      	movs	r7, #16
 80166c8:	2d00      	cmp	r5, #0
 80166ca:	dde9      	ble.n	80166a0 <_svfprintf_r+0x138c>
 80166cc:	0021      	movs	r1, r4
 80166ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166d0:	4807      	ldr	r0, [pc, #28]	; (80166f0 <_svfprintf_r+0x13dc>)
 80166d2:	9308      	str	r3, [sp, #32]
 80166d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166d6:	3301      	adds	r3, #1
 80166d8:	3108      	adds	r1, #8
 80166da:	6020      	str	r0, [r4, #0]
 80166dc:	2d10      	cmp	r5, #16
 80166de:	dc09      	bgt.n	80166f4 <_svfprintf_r+0x13e0>
 80166e0:	6065      	str	r5, [r4, #4]
 80166e2:	000c      	movs	r4, r1
 80166e4:	18ad      	adds	r5, r5, r2
 80166e6:	952e      	str	r5, [sp, #184]	; 0xb8
 80166e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80166ea:	2b07      	cmp	r3, #7
 80166ec:	ddd8      	ble.n	80166a0 <_svfprintf_r+0x138c>
 80166ee:	e7cf      	b.n	8016690 <_svfprintf_r+0x137c>
 80166f0:	0801bc34 	.word	0x0801bc34
 80166f4:	3210      	adds	r2, #16
 80166f6:	6067      	str	r7, [r4, #4]
 80166f8:	922e      	str	r2, [sp, #184]	; 0xb8
 80166fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80166fc:	2b07      	cmp	r3, #7
 80166fe:	dd07      	ble.n	8016710 <_svfprintf_r+0x13fc>
 8016700:	aa2c      	add	r2, sp, #176	; 0xb0
 8016702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016704:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016706:	f001 ff59 	bl	80185bc <__ssprint_r>
 801670a:	2800      	cmp	r0, #0
 801670c:	d126      	bne.n	801675c <_svfprintf_r+0x1448>
 801670e:	a92f      	add	r1, sp, #188	; 0xbc
 8016710:	3d10      	subs	r5, #16
 8016712:	000c      	movs	r4, r1
 8016714:	e7da      	b.n	80166cc <_svfprintf_r+0x13b8>
 8016716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016718:	912e      	str	r1, [sp, #184]	; 0xb8
 801671a:	c705      	stmia	r7!, {r0, r2}
 801671c:	932d      	str	r3, [sp, #180]	; 0xb4
 801671e:	e7e4      	b.n	80166ea <_svfprintf_r+0x13d6>
 8016720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016724:	2510      	movs	r5, #16
 8016726:	1a9c      	subs	r4, r3, r2
 8016728:	2c00      	cmp	r4, #0
 801672a:	dc00      	bgt.n	801672e <_svfprintf_r+0x141a>
 801672c:	e548      	b.n	80161c0 <_svfprintf_r+0xeac>
 801672e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016730:	4921      	ldr	r1, [pc, #132]	; (80167b8 <_svfprintf_r+0x14a4>)
 8016732:	9308      	str	r3, [sp, #32]
 8016734:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016736:	3301      	adds	r3, #1
 8016738:	6039      	str	r1, [r7, #0]
 801673a:	2c10      	cmp	r4, #16
 801673c:	dc19      	bgt.n	8016772 <_svfprintf_r+0x145e>
 801673e:	607c      	str	r4, [r7, #4]
 8016740:	18a4      	adds	r4, r4, r2
 8016742:	942e      	str	r4, [sp, #184]	; 0xb8
 8016744:	932d      	str	r3, [sp, #180]	; 0xb4
 8016746:	2b07      	cmp	r3, #7
 8016748:	dc00      	bgt.n	801674c <_svfprintf_r+0x1438>
 801674a:	e539      	b.n	80161c0 <_svfprintf_r+0xeac>
 801674c:	aa2c      	add	r2, sp, #176	; 0xb0
 801674e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016750:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016752:	f001 ff33 	bl	80185bc <__ssprint_r>
 8016756:	2800      	cmp	r0, #0
 8016758:	d100      	bne.n	801675c <_svfprintf_r+0x1448>
 801675a:	e531      	b.n	80161c0 <_svfprintf_r+0xeac>
 801675c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801675e:	2b00      	cmp	r3, #0
 8016760:	d101      	bne.n	8016766 <_svfprintf_r+0x1452>
 8016762:	f7ff f908 	bl	8015976 <_svfprintf_r+0x662>
 8016766:	0019      	movs	r1, r3
 8016768:	980a      	ldr	r0, [sp, #40]	; 0x28
 801676a:	f000 ff19 	bl	80175a0 <_free_r>
 801676e:	f7ff f902 	bl	8015976 <_svfprintf_r+0x662>
 8016772:	3210      	adds	r2, #16
 8016774:	607d      	str	r5, [r7, #4]
 8016776:	922e      	str	r2, [sp, #184]	; 0xb8
 8016778:	932d      	str	r3, [sp, #180]	; 0xb4
 801677a:	3708      	adds	r7, #8
 801677c:	2b07      	cmp	r3, #7
 801677e:	dd07      	ble.n	8016790 <_svfprintf_r+0x147c>
 8016780:	aa2c      	add	r2, sp, #176	; 0xb0
 8016782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016784:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016786:	f001 ff19 	bl	80185bc <__ssprint_r>
 801678a:	2800      	cmp	r0, #0
 801678c:	d1e6      	bne.n	801675c <_svfprintf_r+0x1448>
 801678e:	af2f      	add	r7, sp, #188	; 0xbc
 8016790:	3c10      	subs	r4, #16
 8016792:	e7cc      	b.n	801672e <_svfprintf_r+0x141a>
 8016794:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016796:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016798:	f000 ff02 	bl	80175a0 <_free_r>
 801679c:	e52a      	b.n	80161f4 <_svfprintf_r+0xee0>
 801679e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80167a0:	9306      	str	r3, [sp, #24]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <_svfprintf_r+0x1496>
 80167a6:	f7ff f8e6 	bl	8015976 <_svfprintf_r+0x662>
 80167aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80167ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167b0:	f001 ff04 	bl	80185bc <__ssprint_r>
 80167b4:	f7ff f8df 	bl	8015976 <_svfprintf_r+0x662>
 80167b8:	0801bc24 	.word	0x0801bc24

080167bc <sysconf>:
 80167bc:	2380      	movs	r3, #128	; 0x80
 80167be:	b510      	push	{r4, lr}
 80167c0:	015b      	lsls	r3, r3, #5
 80167c2:	2808      	cmp	r0, #8
 80167c4:	d004      	beq.n	80167d0 <sysconf+0x14>
 80167c6:	f000 fe7d 	bl	80174c4 <__errno>
 80167ca:	2316      	movs	r3, #22
 80167cc:	6003      	str	r3, [r0, #0]
 80167ce:	3b17      	subs	r3, #23
 80167d0:	0018      	movs	r0, r3
 80167d2:	bd10      	pop	{r4, pc}

080167d4 <__ascii_wctomb>:
 80167d4:	1e0b      	subs	r3, r1, #0
 80167d6:	d004      	beq.n	80167e2 <__ascii_wctomb+0xe>
 80167d8:	2aff      	cmp	r2, #255	; 0xff
 80167da:	d904      	bls.n	80167e6 <__ascii_wctomb+0x12>
 80167dc:	238a      	movs	r3, #138	; 0x8a
 80167de:	6003      	str	r3, [r0, #0]
 80167e0:	3b8b      	subs	r3, #139	; 0x8b
 80167e2:	0018      	movs	r0, r3
 80167e4:	4770      	bx	lr
 80167e6:	700a      	strb	r2, [r1, #0]
 80167e8:	2301      	movs	r3, #1
 80167ea:	e7fa      	b.n	80167e2 <__ascii_wctomb+0xe>

080167ec <register_fini>:
 80167ec:	4b03      	ldr	r3, [pc, #12]	; (80167fc <register_fini+0x10>)
 80167ee:	b510      	push	{r4, lr}
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d002      	beq.n	80167fa <register_fini+0xe>
 80167f4:	4802      	ldr	r0, [pc, #8]	; (8016800 <register_fini+0x14>)
 80167f6:	f000 f805 	bl	8016804 <atexit>
 80167fa:	bd10      	pop	{r4, pc}
 80167fc:	00000000 	.word	0x00000000
 8016800:	080174d1 	.word	0x080174d1

08016804 <atexit>:
 8016804:	2300      	movs	r3, #0
 8016806:	b510      	push	{r4, lr}
 8016808:	0001      	movs	r1, r0
 801680a:	001a      	movs	r2, r3
 801680c:	0018      	movs	r0, r3
 801680e:	f001 ff53 	bl	80186b8 <__register_exitproc>
 8016812:	bd10      	pop	{r4, pc}

08016814 <quorem>:
 8016814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016816:	6903      	ldr	r3, [r0, #16]
 8016818:	690c      	ldr	r4, [r1, #16]
 801681a:	b089      	sub	sp, #36	; 0x24
 801681c:	0007      	movs	r7, r0
 801681e:	9105      	str	r1, [sp, #20]
 8016820:	2600      	movs	r6, #0
 8016822:	42a3      	cmp	r3, r4
 8016824:	db65      	blt.n	80168f2 <quorem+0xde>
 8016826:	000b      	movs	r3, r1
 8016828:	3c01      	subs	r4, #1
 801682a:	3314      	adds	r3, #20
 801682c:	00a5      	lsls	r5, r4, #2
 801682e:	9303      	str	r3, [sp, #12]
 8016830:	195b      	adds	r3, r3, r5
 8016832:	9304      	str	r3, [sp, #16]
 8016834:	0003      	movs	r3, r0
 8016836:	3314      	adds	r3, #20
 8016838:	9302      	str	r3, [sp, #8]
 801683a:	195d      	adds	r5, r3, r5
 801683c:	9b04      	ldr	r3, [sp, #16]
 801683e:	6828      	ldr	r0, [r5, #0]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	1c59      	adds	r1, r3, #1
 8016844:	9301      	str	r3, [sp, #4]
 8016846:	f7e9 fc83 	bl	8000150 <__udivsi3>
 801684a:	9001      	str	r0, [sp, #4]
 801684c:	42b0      	cmp	r0, r6
 801684e:	d029      	beq.n	80168a4 <quorem+0x90>
 8016850:	9b03      	ldr	r3, [sp, #12]
 8016852:	9802      	ldr	r0, [sp, #8]
 8016854:	469c      	mov	ip, r3
 8016856:	9606      	str	r6, [sp, #24]
 8016858:	4662      	mov	r2, ip
 801685a:	ca08      	ldmia	r2!, {r3}
 801685c:	4694      	mov	ip, r2
 801685e:	9a01      	ldr	r2, [sp, #4]
 8016860:	b299      	uxth	r1, r3
 8016862:	4351      	muls	r1, r2
 8016864:	0c1b      	lsrs	r3, r3, #16
 8016866:	4353      	muls	r3, r2
 8016868:	1989      	adds	r1, r1, r6
 801686a:	0c0a      	lsrs	r2, r1, #16
 801686c:	189b      	adds	r3, r3, r2
 801686e:	9307      	str	r3, [sp, #28]
 8016870:	0c1e      	lsrs	r6, r3, #16
 8016872:	6803      	ldr	r3, [r0, #0]
 8016874:	b289      	uxth	r1, r1
 8016876:	b29a      	uxth	r2, r3
 8016878:	9b06      	ldr	r3, [sp, #24]
 801687a:	18d2      	adds	r2, r2, r3
 801687c:	6803      	ldr	r3, [r0, #0]
 801687e:	1a52      	subs	r2, r2, r1
 8016880:	0c19      	lsrs	r1, r3, #16
 8016882:	466b      	mov	r3, sp
 8016884:	8b9b      	ldrh	r3, [r3, #28]
 8016886:	1acb      	subs	r3, r1, r3
 8016888:	1411      	asrs	r1, r2, #16
 801688a:	185b      	adds	r3, r3, r1
 801688c:	1419      	asrs	r1, r3, #16
 801688e:	b292      	uxth	r2, r2
 8016890:	041b      	lsls	r3, r3, #16
 8016892:	431a      	orrs	r2, r3
 8016894:	9b04      	ldr	r3, [sp, #16]
 8016896:	9106      	str	r1, [sp, #24]
 8016898:	c004      	stmia	r0!, {r2}
 801689a:	4563      	cmp	r3, ip
 801689c:	d2dc      	bcs.n	8016858 <quorem+0x44>
 801689e:	682b      	ldr	r3, [r5, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d02d      	beq.n	8016900 <quorem+0xec>
 80168a4:	9905      	ldr	r1, [sp, #20]
 80168a6:	0038      	movs	r0, r7
 80168a8:	f001 fcb2 	bl	8018210 <__mcmp>
 80168ac:	2800      	cmp	r0, #0
 80168ae:	db1f      	blt.n	80168f0 <quorem+0xdc>
 80168b0:	2500      	movs	r5, #0
 80168b2:	9b01      	ldr	r3, [sp, #4]
 80168b4:	9802      	ldr	r0, [sp, #8]
 80168b6:	3301      	adds	r3, #1
 80168b8:	9903      	ldr	r1, [sp, #12]
 80168ba:	9301      	str	r3, [sp, #4]
 80168bc:	6802      	ldr	r2, [r0, #0]
 80168be:	c908      	ldmia	r1!, {r3}
 80168c0:	b292      	uxth	r2, r2
 80168c2:	1955      	adds	r5, r2, r5
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	1aaa      	subs	r2, r5, r2
 80168c8:	6805      	ldr	r5, [r0, #0]
 80168ca:	0c1b      	lsrs	r3, r3, #16
 80168cc:	0c2d      	lsrs	r5, r5, #16
 80168ce:	1aeb      	subs	r3, r5, r3
 80168d0:	1415      	asrs	r5, r2, #16
 80168d2:	195b      	adds	r3, r3, r5
 80168d4:	141d      	asrs	r5, r3, #16
 80168d6:	b292      	uxth	r2, r2
 80168d8:	041b      	lsls	r3, r3, #16
 80168da:	4313      	orrs	r3, r2
 80168dc:	c008      	stmia	r0!, {r3}
 80168de:	9b04      	ldr	r3, [sp, #16]
 80168e0:	428b      	cmp	r3, r1
 80168e2:	d2eb      	bcs.n	80168bc <quorem+0xa8>
 80168e4:	9a02      	ldr	r2, [sp, #8]
 80168e6:	00a3      	lsls	r3, r4, #2
 80168e8:	18d3      	adds	r3, r2, r3
 80168ea:	681a      	ldr	r2, [r3, #0]
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	d011      	beq.n	8016914 <quorem+0x100>
 80168f0:	9e01      	ldr	r6, [sp, #4]
 80168f2:	0030      	movs	r0, r6
 80168f4:	b009      	add	sp, #36	; 0x24
 80168f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168f8:	682b      	ldr	r3, [r5, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d104      	bne.n	8016908 <quorem+0xf4>
 80168fe:	3c01      	subs	r4, #1
 8016900:	9b02      	ldr	r3, [sp, #8]
 8016902:	3d04      	subs	r5, #4
 8016904:	42ab      	cmp	r3, r5
 8016906:	d3f7      	bcc.n	80168f8 <quorem+0xe4>
 8016908:	613c      	str	r4, [r7, #16]
 801690a:	e7cb      	b.n	80168a4 <quorem+0x90>
 801690c:	681a      	ldr	r2, [r3, #0]
 801690e:	2a00      	cmp	r2, #0
 8016910:	d104      	bne.n	801691c <quorem+0x108>
 8016912:	3c01      	subs	r4, #1
 8016914:	9a02      	ldr	r2, [sp, #8]
 8016916:	3b04      	subs	r3, #4
 8016918:	429a      	cmp	r2, r3
 801691a:	d3f7      	bcc.n	801690c <quorem+0xf8>
 801691c:	613c      	str	r4, [r7, #16]
 801691e:	e7e7      	b.n	80168f0 <quorem+0xdc>

08016920 <_dtoa_r>:
 8016920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016922:	0014      	movs	r4, r2
 8016924:	001d      	movs	r5, r3
 8016926:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016928:	b09b      	sub	sp, #108	; 0x6c
 801692a:	9002      	str	r0, [sp, #8]
 801692c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801692e:	9406      	str	r4, [sp, #24]
 8016930:	9507      	str	r5, [sp, #28]
 8016932:	2900      	cmp	r1, #0
 8016934:	d009      	beq.n	801694a <_dtoa_r+0x2a>
 8016936:	2301      	movs	r3, #1
 8016938:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801693a:	4093      	lsls	r3, r2
 801693c:	604a      	str	r2, [r1, #4]
 801693e:	608b      	str	r3, [r1, #8]
 8016940:	f001 fa6a 	bl	8017e18 <_Bfree>
 8016944:	2300      	movs	r3, #0
 8016946:	9a02      	ldr	r2, [sp, #8]
 8016948:	6413      	str	r3, [r2, #64]	; 0x40
 801694a:	2d00      	cmp	r5, #0
 801694c:	da20      	bge.n	8016990 <_dtoa_r+0x70>
 801694e:	2301      	movs	r3, #1
 8016950:	6033      	str	r3, [r6, #0]
 8016952:	006b      	lsls	r3, r5, #1
 8016954:	085b      	lsrs	r3, r3, #1
 8016956:	9307      	str	r3, [sp, #28]
 8016958:	9c07      	ldr	r4, [sp, #28]
 801695a:	4bb2      	ldr	r3, [pc, #712]	; (8016c24 <_dtoa_r+0x304>)
 801695c:	0022      	movs	r2, r4
 801695e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016960:	401a      	ands	r2, r3
 8016962:	429a      	cmp	r2, r3
 8016964:	d117      	bne.n	8016996 <_dtoa_r+0x76>
 8016966:	4bb0      	ldr	r3, [pc, #704]	; (8016c28 <_dtoa_r+0x308>)
 8016968:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801696a:	6013      	str	r3, [r2, #0]
 801696c:	9b06      	ldr	r3, [sp, #24]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d103      	bne.n	801697a <_dtoa_r+0x5a>
 8016972:	0324      	lsls	r4, r4, #12
 8016974:	d101      	bne.n	801697a <_dtoa_r+0x5a>
 8016976:	f000 fd89 	bl	801748c <_dtoa_r+0xb6c>
 801697a:	4bac      	ldr	r3, [pc, #688]	; (8016c2c <_dtoa_r+0x30c>)
 801697c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801697e:	9308      	str	r3, [sp, #32]
 8016980:	2a00      	cmp	r2, #0
 8016982:	d002      	beq.n	801698a <_dtoa_r+0x6a>
 8016984:	4baa      	ldr	r3, [pc, #680]	; (8016c30 <_dtoa_r+0x310>)
 8016986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016988:	6013      	str	r3, [r2, #0]
 801698a:	9808      	ldr	r0, [sp, #32]
 801698c:	b01b      	add	sp, #108	; 0x6c
 801698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016990:	2300      	movs	r3, #0
 8016992:	6033      	str	r3, [r6, #0]
 8016994:	e7e0      	b.n	8016958 <_dtoa_r+0x38>
 8016996:	9e06      	ldr	r6, [sp, #24]
 8016998:	9f07      	ldr	r7, [sp, #28]
 801699a:	2200      	movs	r2, #0
 801699c:	2300      	movs	r3, #0
 801699e:	0030      	movs	r0, r6
 80169a0:	0039      	movs	r1, r7
 80169a2:	f7e9 fd5b 	bl	800045c <__aeabi_dcmpeq>
 80169a6:	1e05      	subs	r5, r0, #0
 80169a8:	d00b      	beq.n	80169c2 <_dtoa_r+0xa2>
 80169aa:	2301      	movs	r3, #1
 80169ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80169ae:	6013      	str	r3, [r2, #0]
 80169b0:	4ba0      	ldr	r3, [pc, #640]	; (8016c34 <_dtoa_r+0x314>)
 80169b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80169b4:	9308      	str	r3, [sp, #32]
 80169b6:	2a00      	cmp	r2, #0
 80169b8:	d0e7      	beq.n	801698a <_dtoa_r+0x6a>
 80169ba:	4a9f      	ldr	r2, [pc, #636]	; (8016c38 <_dtoa_r+0x318>)
 80169bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80169be:	600a      	str	r2, [r1, #0]
 80169c0:	e7e3      	b.n	801698a <_dtoa_r+0x6a>
 80169c2:	ab18      	add	r3, sp, #96	; 0x60
 80169c4:	9301      	str	r3, [sp, #4]
 80169c6:	ab19      	add	r3, sp, #100	; 0x64
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	0032      	movs	r2, r6
 80169cc:	003b      	movs	r3, r7
 80169ce:	9802      	ldr	r0, [sp, #8]
 80169d0:	f001 fd0e 	bl	80183f0 <__d2b>
 80169d4:	0063      	lsls	r3, r4, #1
 80169d6:	9003      	str	r0, [sp, #12]
 80169d8:	0d5b      	lsrs	r3, r3, #21
 80169da:	d074      	beq.n	8016ac6 <_dtoa_r+0x1a6>
 80169dc:	033a      	lsls	r2, r7, #12
 80169de:	4c97      	ldr	r4, [pc, #604]	; (8016c3c <_dtoa_r+0x31c>)
 80169e0:	0b12      	lsrs	r2, r2, #12
 80169e2:	4314      	orrs	r4, r2
 80169e4:	0021      	movs	r1, r4
 80169e6:	4a96      	ldr	r2, [pc, #600]	; (8016c40 <_dtoa_r+0x320>)
 80169e8:	0030      	movs	r0, r6
 80169ea:	9516      	str	r5, [sp, #88]	; 0x58
 80169ec:	189e      	adds	r6, r3, r2
 80169ee:	2200      	movs	r2, #0
 80169f0:	4b94      	ldr	r3, [pc, #592]	; (8016c44 <_dtoa_r+0x324>)
 80169f2:	f7eb ff91 	bl	8002918 <__aeabi_dsub>
 80169f6:	4a94      	ldr	r2, [pc, #592]	; (8016c48 <_dtoa_r+0x328>)
 80169f8:	4b94      	ldr	r3, [pc, #592]	; (8016c4c <_dtoa_r+0x32c>)
 80169fa:	f7eb fd1b 	bl	8002434 <__aeabi_dmul>
 80169fe:	4a94      	ldr	r2, [pc, #592]	; (8016c50 <_dtoa_r+0x330>)
 8016a00:	4b94      	ldr	r3, [pc, #592]	; (8016c54 <_dtoa_r+0x334>)
 8016a02:	f7ea fdf1 	bl	80015e8 <__aeabi_dadd>
 8016a06:	0004      	movs	r4, r0
 8016a08:	0030      	movs	r0, r6
 8016a0a:	000d      	movs	r5, r1
 8016a0c:	f7ec fb1e 	bl	800304c <__aeabi_i2d>
 8016a10:	4a91      	ldr	r2, [pc, #580]	; (8016c58 <_dtoa_r+0x338>)
 8016a12:	4b92      	ldr	r3, [pc, #584]	; (8016c5c <_dtoa_r+0x33c>)
 8016a14:	f7eb fd0e 	bl	8002434 <__aeabi_dmul>
 8016a18:	0002      	movs	r2, r0
 8016a1a:	000b      	movs	r3, r1
 8016a1c:	0020      	movs	r0, r4
 8016a1e:	0029      	movs	r1, r5
 8016a20:	f7ea fde2 	bl	80015e8 <__aeabi_dadd>
 8016a24:	0004      	movs	r4, r0
 8016a26:	000d      	movs	r5, r1
 8016a28:	f7ec fada 	bl	8002fe0 <__aeabi_d2iz>
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	0007      	movs	r7, r0
 8016a30:	2300      	movs	r3, #0
 8016a32:	0020      	movs	r0, r4
 8016a34:	0029      	movs	r1, r5
 8016a36:	f7e9 fd17 	bl	8000468 <__aeabi_dcmplt>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d009      	beq.n	8016a52 <_dtoa_r+0x132>
 8016a3e:	0038      	movs	r0, r7
 8016a40:	f7ec fb04 	bl	800304c <__aeabi_i2d>
 8016a44:	002b      	movs	r3, r5
 8016a46:	0022      	movs	r2, r4
 8016a48:	f7e9 fd08 	bl	800045c <__aeabi_dcmpeq>
 8016a4c:	4243      	negs	r3, r0
 8016a4e:	4158      	adcs	r0, r3
 8016a50:	1a3f      	subs	r7, r7, r0
 8016a52:	2301      	movs	r3, #1
 8016a54:	9314      	str	r3, [sp, #80]	; 0x50
 8016a56:	2f16      	cmp	r7, #22
 8016a58:	d80d      	bhi.n	8016a76 <_dtoa_r+0x156>
 8016a5a:	4981      	ldr	r1, [pc, #516]	; (8016c60 <_dtoa_r+0x340>)
 8016a5c:	00fb      	lsls	r3, r7, #3
 8016a5e:	18c9      	adds	r1, r1, r3
 8016a60:	6808      	ldr	r0, [r1, #0]
 8016a62:	6849      	ldr	r1, [r1, #4]
 8016a64:	9a06      	ldr	r2, [sp, #24]
 8016a66:	9b07      	ldr	r3, [sp, #28]
 8016a68:	f7e9 fd12 	bl	8000490 <__aeabi_dcmpgt>
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	d046      	beq.n	8016afe <_dtoa_r+0x1de>
 8016a70:	2300      	movs	r3, #0
 8016a72:	3f01      	subs	r7, #1
 8016a74:	9314      	str	r3, [sp, #80]	; 0x50
 8016a76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a78:	1b9e      	subs	r6, r3, r6
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016a7e:	0033      	movs	r3, r6
 8016a80:	3b01      	subs	r3, #1
 8016a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a84:	d504      	bpl.n	8016a90 <_dtoa_r+0x170>
 8016a86:	2301      	movs	r3, #1
 8016a88:	1b9b      	subs	r3, r3, r6
 8016a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a90:	2f00      	cmp	r7, #0
 8016a92:	db36      	blt.n	8016b02 <_dtoa_r+0x1e2>
 8016a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a96:	9711      	str	r7, [sp, #68]	; 0x44
 8016a98:	19db      	adds	r3, r3, r7
 8016a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	9304      	str	r3, [sp, #16]
 8016aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016aa2:	2401      	movs	r4, #1
 8016aa4:	2b09      	cmp	r3, #9
 8016aa6:	d900      	bls.n	8016aaa <_dtoa_r+0x18a>
 8016aa8:	e082      	b.n	8016bb0 <_dtoa_r+0x290>
 8016aaa:	2b05      	cmp	r3, #5
 8016aac:	dd02      	ble.n	8016ab4 <_dtoa_r+0x194>
 8016aae:	2400      	movs	r4, #0
 8016ab0:	3b04      	subs	r3, #4
 8016ab2:	9320      	str	r3, [sp, #128]	; 0x80
 8016ab4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016ab6:	1e98      	subs	r0, r3, #2
 8016ab8:	2803      	cmp	r0, #3
 8016aba:	d900      	bls.n	8016abe <_dtoa_r+0x19e>
 8016abc:	e082      	b.n	8016bc4 <_dtoa_r+0x2a4>
 8016abe:	f7e9 fb33 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016ac2:	7573      	.short	0x7573
 8016ac4:	6828      	.short	0x6828
 8016ac6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016ac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016aca:	189e      	adds	r6, r3, r2
 8016acc:	4b65      	ldr	r3, [pc, #404]	; (8016c64 <_dtoa_r+0x344>)
 8016ace:	18f2      	adds	r2, r6, r3
 8016ad0:	2a20      	cmp	r2, #32
 8016ad2:	dd0f      	ble.n	8016af4 <_dtoa_r+0x1d4>
 8016ad4:	2340      	movs	r3, #64	; 0x40
 8016ad6:	1a9b      	subs	r3, r3, r2
 8016ad8:	409c      	lsls	r4, r3
 8016ada:	4b63      	ldr	r3, [pc, #396]	; (8016c68 <_dtoa_r+0x348>)
 8016adc:	9806      	ldr	r0, [sp, #24]
 8016ade:	18f3      	adds	r3, r6, r3
 8016ae0:	40d8      	lsrs	r0, r3
 8016ae2:	4320      	orrs	r0, r4
 8016ae4:	f7ec faec 	bl	80030c0 <__aeabi_ui2d>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	4c60      	ldr	r4, [pc, #384]	; (8016c6c <_dtoa_r+0x34c>)
 8016aec:	3e01      	subs	r6, #1
 8016aee:	1909      	adds	r1, r1, r4
 8016af0:	9316      	str	r3, [sp, #88]	; 0x58
 8016af2:	e77c      	b.n	80169ee <_dtoa_r+0xce>
 8016af4:	2320      	movs	r3, #32
 8016af6:	9806      	ldr	r0, [sp, #24]
 8016af8:	1a9b      	subs	r3, r3, r2
 8016afa:	4098      	lsls	r0, r3
 8016afc:	e7f2      	b.n	8016ae4 <_dtoa_r+0x1c4>
 8016afe:	9014      	str	r0, [sp, #80]	; 0x50
 8016b00:	e7b9      	b.n	8016a76 <_dtoa_r+0x156>
 8016b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b04:	1bdb      	subs	r3, r3, r7
 8016b06:	930a      	str	r3, [sp, #40]	; 0x28
 8016b08:	427b      	negs	r3, r7
 8016b0a:	9304      	str	r3, [sp, #16]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8016b10:	e7c6      	b.n	8016aa0 <_dtoa_r+0x180>
 8016b12:	2301      	movs	r3, #1
 8016b14:	930d      	str	r3, [sp, #52]	; 0x34
 8016b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	dd57      	ble.n	8016bcc <_dtoa_r+0x2ac>
 8016b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8016b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b20:	2200      	movs	r2, #0
 8016b22:	9902      	ldr	r1, [sp, #8]
 8016b24:	644a      	str	r2, [r1, #68]	; 0x44
 8016b26:	3204      	adds	r2, #4
 8016b28:	0010      	movs	r0, r2
 8016b2a:	9902      	ldr	r1, [sp, #8]
 8016b2c:	3014      	adds	r0, #20
 8016b2e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016b30:	4298      	cmp	r0, r3
 8016b32:	d950      	bls.n	8016bd6 <_dtoa_r+0x2b6>
 8016b34:	9802      	ldr	r0, [sp, #8]
 8016b36:	f001 f947 	bl	8017dc8 <_Balloc>
 8016b3a:	9b02      	ldr	r3, [sp, #8]
 8016b3c:	9008      	str	r0, [sp, #32]
 8016b3e:	6418      	str	r0, [r3, #64]	; 0x40
 8016b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b42:	2b0e      	cmp	r3, #14
 8016b44:	d900      	bls.n	8016b48 <_dtoa_r+0x228>
 8016b46:	e10c      	b.n	8016d62 <_dtoa_r+0x442>
 8016b48:	2c00      	cmp	r4, #0
 8016b4a:	d100      	bne.n	8016b4e <_dtoa_r+0x22e>
 8016b4c:	e109      	b.n	8016d62 <_dtoa_r+0x442>
 8016b4e:	9b06      	ldr	r3, [sp, #24]
 8016b50:	9c07      	ldr	r4, [sp, #28]
 8016b52:	9312      	str	r3, [sp, #72]	; 0x48
 8016b54:	9413      	str	r4, [sp, #76]	; 0x4c
 8016b56:	2f00      	cmp	r7, #0
 8016b58:	dc00      	bgt.n	8016b5c <_dtoa_r+0x23c>
 8016b5a:	e08b      	b.n	8016c74 <_dtoa_r+0x354>
 8016b5c:	210f      	movs	r1, #15
 8016b5e:	003a      	movs	r2, r7
 8016b60:	4b3f      	ldr	r3, [pc, #252]	; (8016c60 <_dtoa_r+0x340>)
 8016b62:	400a      	ands	r2, r1
 8016b64:	00d2      	lsls	r2, r2, #3
 8016b66:	189b      	adds	r3, r3, r2
 8016b68:	681d      	ldr	r5, [r3, #0]
 8016b6a:	685e      	ldr	r6, [r3, #4]
 8016b6c:	2302      	movs	r3, #2
 8016b6e:	113c      	asrs	r4, r7, #4
 8016b70:	930e      	str	r3, [sp, #56]	; 0x38
 8016b72:	06e3      	lsls	r3, r4, #27
 8016b74:	d50b      	bpl.n	8016b8e <_dtoa_r+0x26e>
 8016b76:	4b3e      	ldr	r3, [pc, #248]	; (8016c70 <_dtoa_r+0x350>)
 8016b78:	400c      	ands	r4, r1
 8016b7a:	6a1a      	ldr	r2, [r3, #32]
 8016b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016b80:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016b82:	f7eb f84d 	bl	8001c20 <__aeabi_ddiv>
 8016b86:	2303      	movs	r3, #3
 8016b88:	9006      	str	r0, [sp, #24]
 8016b8a:	9107      	str	r1, [sp, #28]
 8016b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8016b8e:	2300      	movs	r3, #0
 8016b90:	e03b      	b.n	8016c0a <_dtoa_r+0x2ea>
 8016b92:	2301      	movs	r3, #1
 8016b94:	930d      	str	r3, [sp, #52]	; 0x34
 8016b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b98:	18fb      	adds	r3, r7, r3
 8016b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	dcbd      	bgt.n	8016b20 <_dtoa_r+0x200>
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	e7bb      	b.n	8016b20 <_dtoa_r+0x200>
 8016ba8:	2300      	movs	r3, #0
 8016baa:	e7b3      	b.n	8016b14 <_dtoa_r+0x1f4>
 8016bac:	2300      	movs	r3, #0
 8016bae:	e7f1      	b.n	8016b94 <_dtoa_r+0x274>
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	940d      	str	r4, [sp, #52]	; 0x34
 8016bb4:	9320      	str	r3, [sp, #128]	; 0x80
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	2200      	movs	r2, #0
 8016bba:	930c      	str	r3, [sp, #48]	; 0x30
 8016bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016bbe:	3313      	adds	r3, #19
 8016bc0:	9221      	str	r2, [sp, #132]	; 0x84
 8016bc2:	e7ad      	b.n	8016b20 <_dtoa_r+0x200>
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8016bc8:	3b02      	subs	r3, #2
 8016bca:	e7f5      	b.n	8016bb8 <_dtoa_r+0x298>
 8016bcc:	2301      	movs	r3, #1
 8016bce:	930c      	str	r3, [sp, #48]	; 0x30
 8016bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8016bd2:	001a      	movs	r2, r3
 8016bd4:	e7f4      	b.n	8016bc0 <_dtoa_r+0x2a0>
 8016bd6:	9802      	ldr	r0, [sp, #8]
 8016bd8:	3101      	adds	r1, #1
 8016bda:	6441      	str	r1, [r0, #68]	; 0x44
 8016bdc:	0052      	lsls	r2, r2, #1
 8016bde:	e7a3      	b.n	8016b28 <_dtoa_r+0x208>
 8016be0:	2301      	movs	r3, #1
 8016be2:	421c      	tst	r4, r3
 8016be4:	d00e      	beq.n	8016c04 <_dtoa_r+0x2e4>
 8016be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016be8:	4a21      	ldr	r2, [pc, #132]	; (8016c70 <_dtoa_r+0x350>)
 8016bea:	3301      	adds	r3, #1
 8016bec:	930e      	str	r3, [sp, #56]	; 0x38
 8016bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bf0:	0028      	movs	r0, r5
 8016bf2:	00db      	lsls	r3, r3, #3
 8016bf4:	189b      	adds	r3, r3, r2
 8016bf6:	0031      	movs	r1, r6
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	f7eb fc1a 	bl	8002434 <__aeabi_dmul>
 8016c00:	0005      	movs	r5, r0
 8016c02:	000e      	movs	r6, r1
 8016c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c06:	1064      	asrs	r4, r4, #1
 8016c08:	3301      	adds	r3, #1
 8016c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8016c0c:	2c00      	cmp	r4, #0
 8016c0e:	d1e7      	bne.n	8016be0 <_dtoa_r+0x2c0>
 8016c10:	9806      	ldr	r0, [sp, #24]
 8016c12:	9907      	ldr	r1, [sp, #28]
 8016c14:	002a      	movs	r2, r5
 8016c16:	0033      	movs	r3, r6
 8016c18:	f7eb f802 	bl	8001c20 <__aeabi_ddiv>
 8016c1c:	9006      	str	r0, [sp, #24]
 8016c1e:	9107      	str	r1, [sp, #28]
 8016c20:	e043      	b.n	8016caa <_dtoa_r+0x38a>
 8016c22:	46c0      	nop			; (mov r8, r8)
 8016c24:	7ff00000 	.word	0x7ff00000
 8016c28:	0000270f 	.word	0x0000270f
 8016c2c:	0801bd4e 	.word	0x0801bd4e
 8016c30:	0801bd51 	.word	0x0801bd51
 8016c34:	0801bc22 	.word	0x0801bc22
 8016c38:	0801bc23 	.word	0x0801bc23
 8016c3c:	3ff00000 	.word	0x3ff00000
 8016c40:	fffffc01 	.word	0xfffffc01
 8016c44:	3ff80000 	.word	0x3ff80000
 8016c48:	636f4361 	.word	0x636f4361
 8016c4c:	3fd287a7 	.word	0x3fd287a7
 8016c50:	8b60c8b3 	.word	0x8b60c8b3
 8016c54:	3fc68a28 	.word	0x3fc68a28
 8016c58:	509f79fb 	.word	0x509f79fb
 8016c5c:	3fd34413 	.word	0x3fd34413
 8016c60:	0801bd80 	.word	0x0801bd80
 8016c64:	00000432 	.word	0x00000432
 8016c68:	00000412 	.word	0x00000412
 8016c6c:	fe100000 	.word	0xfe100000
 8016c70:	0801bd58 	.word	0x0801bd58
 8016c74:	2302      	movs	r3, #2
 8016c76:	930e      	str	r3, [sp, #56]	; 0x38
 8016c78:	2f00      	cmp	r7, #0
 8016c7a:	d016      	beq.n	8016caa <_dtoa_r+0x38a>
 8016c7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016c7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016c80:	427c      	negs	r4, r7
 8016c82:	330d      	adds	r3, #13
 8016c84:	4023      	ands	r3, r4
 8016c86:	4acf      	ldr	r2, [pc, #828]	; (8016fc4 <_dtoa_r+0x6a4>)
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	18d3      	adds	r3, r2, r3
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	f7eb fbd0 	bl	8002434 <__aeabi_dmul>
 8016c94:	2300      	movs	r3, #0
 8016c96:	2601      	movs	r6, #1
 8016c98:	001d      	movs	r5, r3
 8016c9a:	9006      	str	r0, [sp, #24]
 8016c9c:	9107      	str	r1, [sp, #28]
 8016c9e:	1124      	asrs	r4, r4, #4
 8016ca0:	2c00      	cmp	r4, #0
 8016ca2:	d000      	beq.n	8016ca6 <_dtoa_r+0x386>
 8016ca4:	e08c      	b.n	8016dc0 <_dtoa_r+0x4a0>
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d1b8      	bne.n	8016c1c <_dtoa_r+0x2fc>
 8016caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d100      	bne.n	8016cb2 <_dtoa_r+0x392>
 8016cb0:	e096      	b.n	8016de0 <_dtoa_r+0x4c0>
 8016cb2:	9c06      	ldr	r4, [sp, #24]
 8016cb4:	9d07      	ldr	r5, [sp, #28]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	4bc3      	ldr	r3, [pc, #780]	; (8016fc8 <_dtoa_r+0x6a8>)
 8016cba:	0020      	movs	r0, r4
 8016cbc:	0029      	movs	r1, r5
 8016cbe:	f7e9 fbd3 	bl	8000468 <__aeabi_dcmplt>
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d100      	bne.n	8016cc8 <_dtoa_r+0x3a8>
 8016cc6:	e08b      	b.n	8016de0 <_dtoa_r+0x4c0>
 8016cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d100      	bne.n	8016cd0 <_dtoa_r+0x3b0>
 8016cce:	e087      	b.n	8016de0 <_dtoa_r+0x4c0>
 8016cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	dd41      	ble.n	8016d5a <_dtoa_r+0x43a>
 8016cd6:	4bbd      	ldr	r3, [pc, #756]	; (8016fcc <_dtoa_r+0x6ac>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	0020      	movs	r0, r4
 8016cdc:	0029      	movs	r1, r5
 8016cde:	f7eb fba9 	bl	8002434 <__aeabi_dmul>
 8016ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ce4:	9006      	str	r0, [sp, #24]
 8016ce6:	9107      	str	r1, [sp, #28]
 8016ce8:	3301      	adds	r3, #1
 8016cea:	930e      	str	r3, [sp, #56]	; 0x38
 8016cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cee:	1e7e      	subs	r6, r7, #1
 8016cf0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016cf2:	9310      	str	r3, [sp, #64]	; 0x40
 8016cf4:	f7ec f9aa 	bl	800304c <__aeabi_i2d>
 8016cf8:	9a06      	ldr	r2, [sp, #24]
 8016cfa:	9b07      	ldr	r3, [sp, #28]
 8016cfc:	f7eb fb9a 	bl	8002434 <__aeabi_dmul>
 8016d00:	2200      	movs	r2, #0
 8016d02:	4bb3      	ldr	r3, [pc, #716]	; (8016fd0 <_dtoa_r+0x6b0>)
 8016d04:	f7ea fc70 	bl	80015e8 <__aeabi_dadd>
 8016d08:	4ab2      	ldr	r2, [pc, #712]	; (8016fd4 <_dtoa_r+0x6b4>)
 8016d0a:	900e      	str	r0, [sp, #56]	; 0x38
 8016d0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016d10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016d12:	4694      	mov	ip, r2
 8016d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d16:	4463      	add	r3, ip
 8016d18:	9315      	str	r3, [sp, #84]	; 0x54
 8016d1a:	001d      	movs	r5, r3
 8016d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d161      	bne.n	8016de6 <_dtoa_r+0x4c6>
 8016d22:	9806      	ldr	r0, [sp, #24]
 8016d24:	9907      	ldr	r1, [sp, #28]
 8016d26:	2200      	movs	r2, #0
 8016d28:	4bab      	ldr	r3, [pc, #684]	; (8016fd8 <_dtoa_r+0x6b8>)
 8016d2a:	f7eb fdf5 	bl	8002918 <__aeabi_dsub>
 8016d2e:	0022      	movs	r2, r4
 8016d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d32:	9006      	str	r0, [sp, #24]
 8016d34:	9107      	str	r1, [sp, #28]
 8016d36:	f7e9 fbab 	bl	8000490 <__aeabi_dcmpgt>
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d000      	beq.n	8016d40 <_dtoa_r+0x420>
 8016d3e:	e2aa      	b.n	8017296 <_dtoa_r+0x976>
 8016d40:	48a6      	ldr	r0, [pc, #664]	; (8016fdc <_dtoa_r+0x6bc>)
 8016d42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016d44:	4684      	mov	ip, r0
 8016d46:	4461      	add	r1, ip
 8016d48:	000b      	movs	r3, r1
 8016d4a:	9806      	ldr	r0, [sp, #24]
 8016d4c:	9907      	ldr	r1, [sp, #28]
 8016d4e:	0022      	movs	r2, r4
 8016d50:	f7e9 fb8a 	bl	8000468 <__aeabi_dcmplt>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	d000      	beq.n	8016d5a <_dtoa_r+0x43a>
 8016d58:	e297      	b.n	801728a <_dtoa_r+0x96a>
 8016d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016d5e:	9306      	str	r3, [sp, #24]
 8016d60:	9407      	str	r4, [sp, #28]
 8016d62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	da00      	bge.n	8016d6a <_dtoa_r+0x44a>
 8016d68:	e15e      	b.n	8017028 <_dtoa_r+0x708>
 8016d6a:	2f0e      	cmp	r7, #14
 8016d6c:	dd00      	ble.n	8016d70 <_dtoa_r+0x450>
 8016d6e:	e15b      	b.n	8017028 <_dtoa_r+0x708>
 8016d70:	4b94      	ldr	r3, [pc, #592]	; (8016fc4 <_dtoa_r+0x6a4>)
 8016d72:	00fa      	lsls	r2, r7, #3
 8016d74:	189b      	adds	r3, r3, r2
 8016d76:	685c      	ldr	r4, [r3, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	9304      	str	r3, [sp, #16]
 8016d7c:	9405      	str	r4, [sp, #20]
 8016d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	db00      	blt.n	8016d86 <_dtoa_r+0x466>
 8016d84:	e0da      	b.n	8016f3c <_dtoa_r+0x61c>
 8016d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	dd00      	ble.n	8016d8e <_dtoa_r+0x46e>
 8016d8c:	e0d6      	b.n	8016f3c <_dtoa_r+0x61c>
 8016d8e:	d000      	beq.n	8016d92 <_dtoa_r+0x472>
 8016d90:	e27f      	b.n	8017292 <_dtoa_r+0x972>
 8016d92:	9804      	ldr	r0, [sp, #16]
 8016d94:	9905      	ldr	r1, [sp, #20]
 8016d96:	2200      	movs	r2, #0
 8016d98:	4b8f      	ldr	r3, [pc, #572]	; (8016fd8 <_dtoa_r+0x6b8>)
 8016d9a:	f7eb fb4b 	bl	8002434 <__aeabi_dmul>
 8016d9e:	9a06      	ldr	r2, [sp, #24]
 8016da0:	9b07      	ldr	r3, [sp, #28]
 8016da2:	f7e9 fb7f 	bl	80004a4 <__aeabi_dcmpge>
 8016da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016da8:	9304      	str	r3, [sp, #16]
 8016daa:	001e      	movs	r6, r3
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d000      	beq.n	8016db2 <_dtoa_r+0x492>
 8016db0:	e251      	b.n	8017256 <_dtoa_r+0x936>
 8016db2:	9b08      	ldr	r3, [sp, #32]
 8016db4:	9a08      	ldr	r2, [sp, #32]
 8016db6:	1c5d      	adds	r5, r3, #1
 8016db8:	2331      	movs	r3, #49	; 0x31
 8016dba:	3701      	adds	r7, #1
 8016dbc:	7013      	strb	r3, [r2, #0]
 8016dbe:	e24d      	b.n	801725c <_dtoa_r+0x93c>
 8016dc0:	4234      	tst	r4, r6
 8016dc2:	d00a      	beq.n	8016dda <_dtoa_r+0x4ba>
 8016dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dc6:	4a86      	ldr	r2, [pc, #536]	; (8016fe0 <_dtoa_r+0x6c0>)
 8016dc8:	3301      	adds	r3, #1
 8016dca:	930e      	str	r3, [sp, #56]	; 0x38
 8016dcc:	00eb      	lsls	r3, r5, #3
 8016dce:	189b      	adds	r3, r3, r2
 8016dd0:	681a      	ldr	r2, [r3, #0]
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	f7eb fb2e 	bl	8002434 <__aeabi_dmul>
 8016dd8:	0033      	movs	r3, r6
 8016dda:	1064      	asrs	r4, r4, #1
 8016ddc:	3501      	adds	r5, #1
 8016dde:	e75f      	b.n	8016ca0 <_dtoa_r+0x380>
 8016de0:	003e      	movs	r6, r7
 8016de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016de4:	e784      	b.n	8016cf0 <_dtoa_r+0x3d0>
 8016de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016de8:	1e5a      	subs	r2, r3, #1
 8016dea:	4b76      	ldr	r3, [pc, #472]	; (8016fc4 <_dtoa_r+0x6a4>)
 8016dec:	00d2      	lsls	r2, r2, #3
 8016dee:	189b      	adds	r3, r3, r2
 8016df0:	6818      	ldr	r0, [r3, #0]
 8016df2:	6859      	ldr	r1, [r3, #4]
 8016df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d04b      	beq.n	8016e92 <_dtoa_r+0x572>
 8016dfa:	0002      	movs	r2, r0
 8016dfc:	000b      	movs	r3, r1
 8016dfe:	2000      	movs	r0, #0
 8016e00:	4978      	ldr	r1, [pc, #480]	; (8016fe4 <_dtoa_r+0x6c4>)
 8016e02:	f7ea ff0d 	bl	8001c20 <__aeabi_ddiv>
 8016e06:	002b      	movs	r3, r5
 8016e08:	0022      	movs	r2, r4
 8016e0a:	f7eb fd85 	bl	8002918 <__aeabi_dsub>
 8016e0e:	9b08      	ldr	r3, [sp, #32]
 8016e10:	900e      	str	r0, [sp, #56]	; 0x38
 8016e12:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e14:	9315      	str	r3, [sp, #84]	; 0x54
 8016e16:	9806      	ldr	r0, [sp, #24]
 8016e18:	9907      	ldr	r1, [sp, #28]
 8016e1a:	f7ec f8e1 	bl	8002fe0 <__aeabi_d2iz>
 8016e1e:	0004      	movs	r4, r0
 8016e20:	f7ec f914 	bl	800304c <__aeabi_i2d>
 8016e24:	0002      	movs	r2, r0
 8016e26:	000b      	movs	r3, r1
 8016e28:	9806      	ldr	r0, [sp, #24]
 8016e2a:	9907      	ldr	r1, [sp, #28]
 8016e2c:	f7eb fd74 	bl	8002918 <__aeabi_dsub>
 8016e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e32:	3430      	adds	r4, #48	; 0x30
 8016e34:	1c5d      	adds	r5, r3, #1
 8016e36:	701c      	strb	r4, [r3, #0]
 8016e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e3c:	9006      	str	r0, [sp, #24]
 8016e3e:	9107      	str	r1, [sp, #28]
 8016e40:	f7e9 fb12 	bl	8000468 <__aeabi_dcmplt>
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d16c      	bne.n	8016f22 <_dtoa_r+0x602>
 8016e48:	9a06      	ldr	r2, [sp, #24]
 8016e4a:	9b07      	ldr	r3, [sp, #28]
 8016e4c:	2000      	movs	r0, #0
 8016e4e:	495e      	ldr	r1, [pc, #376]	; (8016fc8 <_dtoa_r+0x6a8>)
 8016e50:	f7eb fd62 	bl	8002918 <__aeabi_dsub>
 8016e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e58:	f7e9 fb06 	bl	8000468 <__aeabi_dcmplt>
 8016e5c:	2800      	cmp	r0, #0
 8016e5e:	d000      	beq.n	8016e62 <_dtoa_r+0x542>
 8016e60:	e0c3      	b.n	8016fea <_dtoa_r+0x6ca>
 8016e62:	9b08      	ldr	r3, [sp, #32]
 8016e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e66:	1aeb      	subs	r3, r5, r3
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	dc00      	bgt.n	8016e6e <_dtoa_r+0x54e>
 8016e6c:	e775      	b.n	8016d5a <_dtoa_r+0x43a>
 8016e6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016e70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e72:	2200      	movs	r2, #0
 8016e74:	4b55      	ldr	r3, [pc, #340]	; (8016fcc <_dtoa_r+0x6ac>)
 8016e76:	f7eb fadd 	bl	8002434 <__aeabi_dmul>
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	900e      	str	r0, [sp, #56]	; 0x38
 8016e7e:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e80:	9806      	ldr	r0, [sp, #24]
 8016e82:	9907      	ldr	r1, [sp, #28]
 8016e84:	4b51      	ldr	r3, [pc, #324]	; (8016fcc <_dtoa_r+0x6ac>)
 8016e86:	f7eb fad5 	bl	8002434 <__aeabi_dmul>
 8016e8a:	9515      	str	r5, [sp, #84]	; 0x54
 8016e8c:	9006      	str	r0, [sp, #24]
 8016e8e:	9107      	str	r1, [sp, #28]
 8016e90:	e7c1      	b.n	8016e16 <_dtoa_r+0x4f6>
 8016e92:	0022      	movs	r2, r4
 8016e94:	002b      	movs	r3, r5
 8016e96:	f7eb facd 	bl	8002434 <__aeabi_dmul>
 8016e9a:	9c08      	ldr	r4, [sp, #32]
 8016e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e9e:	0023      	movs	r3, r4
 8016ea0:	4694      	mov	ip, r2
 8016ea2:	900e      	str	r0, [sp, #56]	; 0x38
 8016ea4:	910f      	str	r1, [sp, #60]	; 0x3c
 8016ea6:	4463      	add	r3, ip
 8016ea8:	9315      	str	r3, [sp, #84]	; 0x54
 8016eaa:	9806      	ldr	r0, [sp, #24]
 8016eac:	9907      	ldr	r1, [sp, #28]
 8016eae:	f7ec f897 	bl	8002fe0 <__aeabi_d2iz>
 8016eb2:	0005      	movs	r5, r0
 8016eb4:	f7ec f8ca 	bl	800304c <__aeabi_i2d>
 8016eb8:	000b      	movs	r3, r1
 8016eba:	0002      	movs	r2, r0
 8016ebc:	9806      	ldr	r0, [sp, #24]
 8016ebe:	9907      	ldr	r1, [sp, #28]
 8016ec0:	f7eb fd2a 	bl	8002918 <__aeabi_dsub>
 8016ec4:	3530      	adds	r5, #48	; 0x30
 8016ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ec8:	7025      	strb	r5, [r4, #0]
 8016eca:	3401      	adds	r4, #1
 8016ecc:	9006      	str	r0, [sp, #24]
 8016ece:	9107      	str	r1, [sp, #28]
 8016ed0:	42a3      	cmp	r3, r4
 8016ed2:	d12a      	bne.n	8016f2a <_dtoa_r+0x60a>
 8016ed4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016ed6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016ed8:	9a08      	ldr	r2, [sp, #32]
 8016eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016edc:	4694      	mov	ip, r2
 8016ede:	4463      	add	r3, ip
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	001d      	movs	r5, r3
 8016ee4:	4b3f      	ldr	r3, [pc, #252]	; (8016fe4 <_dtoa_r+0x6c4>)
 8016ee6:	f7ea fb7f 	bl	80015e8 <__aeabi_dadd>
 8016eea:	0002      	movs	r2, r0
 8016eec:	000b      	movs	r3, r1
 8016eee:	9806      	ldr	r0, [sp, #24]
 8016ef0:	9907      	ldr	r1, [sp, #28]
 8016ef2:	f7e9 facd 	bl	8000490 <__aeabi_dcmpgt>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	d000      	beq.n	8016efc <_dtoa_r+0x5dc>
 8016efa:	e076      	b.n	8016fea <_dtoa_r+0x6ca>
 8016efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f00:	2000      	movs	r0, #0
 8016f02:	4938      	ldr	r1, [pc, #224]	; (8016fe4 <_dtoa_r+0x6c4>)
 8016f04:	f7eb fd08 	bl	8002918 <__aeabi_dsub>
 8016f08:	0002      	movs	r2, r0
 8016f0a:	000b      	movs	r3, r1
 8016f0c:	9806      	ldr	r0, [sp, #24]
 8016f0e:	9907      	ldr	r1, [sp, #28]
 8016f10:	f7e9 faaa 	bl	8000468 <__aeabi_dcmplt>
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d100      	bne.n	8016f1a <_dtoa_r+0x5fa>
 8016f18:	e71f      	b.n	8016d5a <_dtoa_r+0x43a>
 8016f1a:	1e6b      	subs	r3, r5, #1
 8016f1c:	781a      	ldrb	r2, [r3, #0]
 8016f1e:	2a30      	cmp	r2, #48	; 0x30
 8016f20:	d001      	beq.n	8016f26 <_dtoa_r+0x606>
 8016f22:	0037      	movs	r7, r6
 8016f24:	e03f      	b.n	8016fa6 <_dtoa_r+0x686>
 8016f26:	001d      	movs	r5, r3
 8016f28:	e7f7      	b.n	8016f1a <_dtoa_r+0x5fa>
 8016f2a:	9806      	ldr	r0, [sp, #24]
 8016f2c:	9907      	ldr	r1, [sp, #28]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	4b26      	ldr	r3, [pc, #152]	; (8016fcc <_dtoa_r+0x6ac>)
 8016f32:	f7eb fa7f 	bl	8002434 <__aeabi_dmul>
 8016f36:	9006      	str	r0, [sp, #24]
 8016f38:	9107      	str	r1, [sp, #28]
 8016f3a:	e7b6      	b.n	8016eaa <_dtoa_r+0x58a>
 8016f3c:	9e08      	ldr	r6, [sp, #32]
 8016f3e:	9a04      	ldr	r2, [sp, #16]
 8016f40:	9b05      	ldr	r3, [sp, #20]
 8016f42:	9806      	ldr	r0, [sp, #24]
 8016f44:	9907      	ldr	r1, [sp, #28]
 8016f46:	f7ea fe6b 	bl	8001c20 <__aeabi_ddiv>
 8016f4a:	f7ec f849 	bl	8002fe0 <__aeabi_d2iz>
 8016f4e:	0004      	movs	r4, r0
 8016f50:	f7ec f87c 	bl	800304c <__aeabi_i2d>
 8016f54:	9a04      	ldr	r2, [sp, #16]
 8016f56:	9b05      	ldr	r3, [sp, #20]
 8016f58:	f7eb fa6c 	bl	8002434 <__aeabi_dmul>
 8016f5c:	0002      	movs	r2, r0
 8016f5e:	000b      	movs	r3, r1
 8016f60:	9806      	ldr	r0, [sp, #24]
 8016f62:	9907      	ldr	r1, [sp, #28]
 8016f64:	f7eb fcd8 	bl	8002918 <__aeabi_dsub>
 8016f68:	0023      	movs	r3, r4
 8016f6a:	3330      	adds	r3, #48	; 0x30
 8016f6c:	7033      	strb	r3, [r6, #0]
 8016f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f70:	9b08      	ldr	r3, [sp, #32]
 8016f72:	1c75      	adds	r5, r6, #1
 8016f74:	1aeb      	subs	r3, r5, r3
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d148      	bne.n	801700c <_dtoa_r+0x6ec>
 8016f7a:	0002      	movs	r2, r0
 8016f7c:	000b      	movs	r3, r1
 8016f7e:	f7ea fb33 	bl	80015e8 <__aeabi_dadd>
 8016f82:	9a04      	ldr	r2, [sp, #16]
 8016f84:	9b05      	ldr	r3, [sp, #20]
 8016f86:	9006      	str	r0, [sp, #24]
 8016f88:	9107      	str	r1, [sp, #28]
 8016f8a:	f7e9 fa81 	bl	8000490 <__aeabi_dcmpgt>
 8016f8e:	2800      	cmp	r0, #0
 8016f90:	d12a      	bne.n	8016fe8 <_dtoa_r+0x6c8>
 8016f92:	9a04      	ldr	r2, [sp, #16]
 8016f94:	9b05      	ldr	r3, [sp, #20]
 8016f96:	9806      	ldr	r0, [sp, #24]
 8016f98:	9907      	ldr	r1, [sp, #28]
 8016f9a:	f7e9 fa5f 	bl	800045c <__aeabi_dcmpeq>
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d001      	beq.n	8016fa6 <_dtoa_r+0x686>
 8016fa2:	07e3      	lsls	r3, r4, #31
 8016fa4:	d420      	bmi.n	8016fe8 <_dtoa_r+0x6c8>
 8016fa6:	9903      	ldr	r1, [sp, #12]
 8016fa8:	9802      	ldr	r0, [sp, #8]
 8016faa:	f000 ff35 	bl	8017e18 <_Bfree>
 8016fae:	2300      	movs	r3, #0
 8016fb0:	702b      	strb	r3, [r5, #0]
 8016fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016fb4:	3701      	adds	r7, #1
 8016fb6:	601f      	str	r7, [r3, #0]
 8016fb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d100      	bne.n	8016fc0 <_dtoa_r+0x6a0>
 8016fbe:	e4e4      	b.n	801698a <_dtoa_r+0x6a>
 8016fc0:	601d      	str	r5, [r3, #0]
 8016fc2:	e4e2      	b.n	801698a <_dtoa_r+0x6a>
 8016fc4:	0801bd80 	.word	0x0801bd80
 8016fc8:	3ff00000 	.word	0x3ff00000
 8016fcc:	40240000 	.word	0x40240000
 8016fd0:	401c0000 	.word	0x401c0000
 8016fd4:	fcc00000 	.word	0xfcc00000
 8016fd8:	40140000 	.word	0x40140000
 8016fdc:	7cc00000 	.word	0x7cc00000
 8016fe0:	0801bd58 	.word	0x0801bd58
 8016fe4:	3fe00000 	.word	0x3fe00000
 8016fe8:	003e      	movs	r6, r7
 8016fea:	1e6b      	subs	r3, r5, #1
 8016fec:	781a      	ldrb	r2, [r3, #0]
 8016fee:	2a39      	cmp	r2, #57	; 0x39
 8016ff0:	d106      	bne.n	8017000 <_dtoa_r+0x6e0>
 8016ff2:	9a08      	ldr	r2, [sp, #32]
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	d107      	bne.n	8017008 <_dtoa_r+0x6e8>
 8016ff8:	2330      	movs	r3, #48	; 0x30
 8016ffa:	7013      	strb	r3, [r2, #0]
 8016ffc:	0013      	movs	r3, r2
 8016ffe:	3601      	adds	r6, #1
 8017000:	781a      	ldrb	r2, [r3, #0]
 8017002:	3201      	adds	r2, #1
 8017004:	701a      	strb	r2, [r3, #0]
 8017006:	e78c      	b.n	8016f22 <_dtoa_r+0x602>
 8017008:	001d      	movs	r5, r3
 801700a:	e7ee      	b.n	8016fea <_dtoa_r+0x6ca>
 801700c:	2200      	movs	r2, #0
 801700e:	4ba4      	ldr	r3, [pc, #656]	; (80172a0 <_dtoa_r+0x980>)
 8017010:	f7eb fa10 	bl	8002434 <__aeabi_dmul>
 8017014:	2200      	movs	r2, #0
 8017016:	2300      	movs	r3, #0
 8017018:	9006      	str	r0, [sp, #24]
 801701a:	9107      	str	r1, [sp, #28]
 801701c:	002e      	movs	r6, r5
 801701e:	f7e9 fa1d 	bl	800045c <__aeabi_dcmpeq>
 8017022:	2800      	cmp	r0, #0
 8017024:	d08b      	beq.n	8016f3e <_dtoa_r+0x61e>
 8017026:	e7be      	b.n	8016fa6 <_dtoa_r+0x686>
 8017028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801702a:	2a00      	cmp	r2, #0
 801702c:	d100      	bne.n	8017030 <_dtoa_r+0x710>
 801702e:	e0da      	b.n	80171e6 <_dtoa_r+0x8c6>
 8017030:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017032:	2a01      	cmp	r2, #1
 8017034:	dd00      	ble.n	8017038 <_dtoa_r+0x718>
 8017036:	e0bd      	b.n	80171b4 <_dtoa_r+0x894>
 8017038:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801703a:	2a00      	cmp	r2, #0
 801703c:	d100      	bne.n	8017040 <_dtoa_r+0x720>
 801703e:	e0b5      	b.n	80171ac <_dtoa_r+0x88c>
 8017040:	4a98      	ldr	r2, [pc, #608]	; (80172a4 <_dtoa_r+0x984>)
 8017042:	189b      	adds	r3, r3, r2
 8017044:	9d04      	ldr	r5, [sp, #16]
 8017046:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801704a:	2101      	movs	r1, #1
 801704c:	18d2      	adds	r2, r2, r3
 801704e:	920a      	str	r2, [sp, #40]	; 0x28
 8017050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017052:	9802      	ldr	r0, [sp, #8]
 8017054:	18d3      	adds	r3, r2, r3
 8017056:	930b      	str	r3, [sp, #44]	; 0x2c
 8017058:	f000 ffad 	bl	8017fb6 <__i2b>
 801705c:	0006      	movs	r6, r0
 801705e:	2c00      	cmp	r4, #0
 8017060:	dd0e      	ble.n	8017080 <_dtoa_r+0x760>
 8017062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017064:	2b00      	cmp	r3, #0
 8017066:	dd0b      	ble.n	8017080 <_dtoa_r+0x760>
 8017068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801706a:	0023      	movs	r3, r4
 801706c:	4294      	cmp	r4, r2
 801706e:	dd00      	ble.n	8017072 <_dtoa_r+0x752>
 8017070:	0013      	movs	r3, r2
 8017072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017074:	1ae4      	subs	r4, r4, r3
 8017076:	1ad2      	subs	r2, r2, r3
 8017078:	920a      	str	r2, [sp, #40]	; 0x28
 801707a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801707c:	1ad3      	subs	r3, r2, r3
 801707e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017080:	9b04      	ldr	r3, [sp, #16]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d01f      	beq.n	80170c6 <_dtoa_r+0x7a6>
 8017086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017088:	2b00      	cmp	r3, #0
 801708a:	d100      	bne.n	801708e <_dtoa_r+0x76e>
 801708c:	e0af      	b.n	80171ee <_dtoa_r+0x8ce>
 801708e:	2d00      	cmp	r5, #0
 8017090:	d011      	beq.n	80170b6 <_dtoa_r+0x796>
 8017092:	0031      	movs	r1, r6
 8017094:	002a      	movs	r2, r5
 8017096:	9802      	ldr	r0, [sp, #8]
 8017098:	f001 f826 	bl	80180e8 <__pow5mult>
 801709c:	9a03      	ldr	r2, [sp, #12]
 801709e:	0001      	movs	r1, r0
 80170a0:	0006      	movs	r6, r0
 80170a2:	9802      	ldr	r0, [sp, #8]
 80170a4:	f000 ff90 	bl	8017fc8 <__multiply>
 80170a8:	9903      	ldr	r1, [sp, #12]
 80170aa:	9010      	str	r0, [sp, #64]	; 0x40
 80170ac:	9802      	ldr	r0, [sp, #8]
 80170ae:	f000 feb3 	bl	8017e18 <_Bfree>
 80170b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170b4:	9303      	str	r3, [sp, #12]
 80170b6:	9b04      	ldr	r3, [sp, #16]
 80170b8:	1b5a      	subs	r2, r3, r5
 80170ba:	d004      	beq.n	80170c6 <_dtoa_r+0x7a6>
 80170bc:	9903      	ldr	r1, [sp, #12]
 80170be:	9802      	ldr	r0, [sp, #8]
 80170c0:	f001 f812 	bl	80180e8 <__pow5mult>
 80170c4:	9003      	str	r0, [sp, #12]
 80170c6:	2101      	movs	r1, #1
 80170c8:	9802      	ldr	r0, [sp, #8]
 80170ca:	f000 ff74 	bl	8017fb6 <__i2b>
 80170ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170d0:	9004      	str	r0, [sp, #16]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d100      	bne.n	80170d8 <_dtoa_r+0x7b8>
 80170d6:	e1e3      	b.n	80174a0 <_dtoa_r+0xb80>
 80170d8:	001a      	movs	r2, r3
 80170da:	0001      	movs	r1, r0
 80170dc:	9802      	ldr	r0, [sp, #8]
 80170de:	f001 f803 	bl	80180e8 <__pow5mult>
 80170e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170e4:	9004      	str	r0, [sp, #16]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	dd00      	ble.n	80170ec <_dtoa_r+0x7cc>
 80170ea:	e082      	b.n	80171f2 <_dtoa_r+0x8d2>
 80170ec:	2500      	movs	r5, #0
 80170ee:	9b06      	ldr	r3, [sp, #24]
 80170f0:	42ab      	cmp	r3, r5
 80170f2:	d10e      	bne.n	8017112 <_dtoa_r+0x7f2>
 80170f4:	9b07      	ldr	r3, [sp, #28]
 80170f6:	031b      	lsls	r3, r3, #12
 80170f8:	42ab      	cmp	r3, r5
 80170fa:	d10a      	bne.n	8017112 <_dtoa_r+0x7f2>
 80170fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170fe:	9a07      	ldr	r2, [sp, #28]
 8017100:	4213      	tst	r3, r2
 8017102:	d006      	beq.n	8017112 <_dtoa_r+0x7f2>
 8017104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017106:	3501      	adds	r5, #1
 8017108:	3301      	adds	r3, #1
 801710a:	930a      	str	r3, [sp, #40]	; 0x28
 801710c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801710e:	3301      	adds	r3, #1
 8017110:	930b      	str	r3, [sp, #44]	; 0x2c
 8017112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017114:	2001      	movs	r0, #1
 8017116:	2b00      	cmp	r3, #0
 8017118:	d16c      	bne.n	80171f4 <_dtoa_r+0x8d4>
 801711a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801711c:	1818      	adds	r0, r3, r0
 801711e:	231f      	movs	r3, #31
 8017120:	4018      	ands	r0, r3
 8017122:	d07e      	beq.n	8017222 <_dtoa_r+0x902>
 8017124:	3301      	adds	r3, #1
 8017126:	1a1b      	subs	r3, r3, r0
 8017128:	2b04      	cmp	r3, #4
 801712a:	dd70      	ble.n	801720e <_dtoa_r+0x8ee>
 801712c:	231c      	movs	r3, #28
 801712e:	1a18      	subs	r0, r3, r0
 8017130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017132:	1824      	adds	r4, r4, r0
 8017134:	181b      	adds	r3, r3, r0
 8017136:	930a      	str	r3, [sp, #40]	; 0x28
 8017138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801713a:	181b      	adds	r3, r3, r0
 801713c:	930b      	str	r3, [sp, #44]	; 0x2c
 801713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017140:	2b00      	cmp	r3, #0
 8017142:	dd05      	ble.n	8017150 <_dtoa_r+0x830>
 8017144:	001a      	movs	r2, r3
 8017146:	9903      	ldr	r1, [sp, #12]
 8017148:	9802      	ldr	r0, [sp, #8]
 801714a:	f001 f80f 	bl	801816c <__lshift>
 801714e:	9003      	str	r0, [sp, #12]
 8017150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017152:	2b00      	cmp	r3, #0
 8017154:	dd05      	ble.n	8017162 <_dtoa_r+0x842>
 8017156:	001a      	movs	r2, r3
 8017158:	9904      	ldr	r1, [sp, #16]
 801715a:	9802      	ldr	r0, [sp, #8]
 801715c:	f001 f806 	bl	801816c <__lshift>
 8017160:	9004      	str	r0, [sp, #16]
 8017162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017164:	2b00      	cmp	r3, #0
 8017166:	d05e      	beq.n	8017226 <_dtoa_r+0x906>
 8017168:	9904      	ldr	r1, [sp, #16]
 801716a:	9803      	ldr	r0, [sp, #12]
 801716c:	f001 f850 	bl	8018210 <__mcmp>
 8017170:	2800      	cmp	r0, #0
 8017172:	da58      	bge.n	8017226 <_dtoa_r+0x906>
 8017174:	2300      	movs	r3, #0
 8017176:	220a      	movs	r2, #10
 8017178:	9903      	ldr	r1, [sp, #12]
 801717a:	9802      	ldr	r0, [sp, #8]
 801717c:	f000 fe56 	bl	8017e2c <__multadd>
 8017180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017182:	3f01      	subs	r7, #1
 8017184:	9003      	str	r0, [sp, #12]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d100      	bne.n	801718c <_dtoa_r+0x86c>
 801718a:	e190      	b.n	80174ae <_dtoa_r+0xb8e>
 801718c:	2300      	movs	r3, #0
 801718e:	0031      	movs	r1, r6
 8017190:	220a      	movs	r2, #10
 8017192:	9802      	ldr	r0, [sp, #8]
 8017194:	f000 fe4a 	bl	8017e2c <__multadd>
 8017198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801719a:	0006      	movs	r6, r0
 801719c:	2b00      	cmp	r3, #0
 801719e:	dd00      	ble.n	80171a2 <_dtoa_r+0x882>
 80171a0:	e088      	b.n	80172b4 <_dtoa_r+0x994>
 80171a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80171a4:	2b02      	cmp	r3, #2
 80171a6:	dc00      	bgt.n	80171aa <_dtoa_r+0x88a>
 80171a8:	e084      	b.n	80172b4 <_dtoa_r+0x994>
 80171aa:	e044      	b.n	8017236 <_dtoa_r+0x916>
 80171ac:	2336      	movs	r3, #54	; 0x36
 80171ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80171b0:	1a9b      	subs	r3, r3, r2
 80171b2:	e747      	b.n	8017044 <_dtoa_r+0x724>
 80171b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b6:	1e5d      	subs	r5, r3, #1
 80171b8:	9b04      	ldr	r3, [sp, #16]
 80171ba:	42ab      	cmp	r3, r5
 80171bc:	db08      	blt.n	80171d0 <_dtoa_r+0x8b0>
 80171be:	1b5d      	subs	r5, r3, r5
 80171c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	da0c      	bge.n	80171e0 <_dtoa_r+0x8c0>
 80171c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171ca:	1a9c      	subs	r4, r3, r2
 80171cc:	2300      	movs	r3, #0
 80171ce:	e73b      	b.n	8017048 <_dtoa_r+0x728>
 80171d0:	9b04      	ldr	r3, [sp, #16]
 80171d2:	9504      	str	r5, [sp, #16]
 80171d4:	1aea      	subs	r2, r5, r3
 80171d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171d8:	2500      	movs	r5, #0
 80171da:	189b      	adds	r3, r3, r2
 80171dc:	9311      	str	r3, [sp, #68]	; 0x44
 80171de:	e7ef      	b.n	80171c0 <_dtoa_r+0x8a0>
 80171e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80171e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171e4:	e730      	b.n	8017048 <_dtoa_r+0x728>
 80171e6:	9d04      	ldr	r5, [sp, #16]
 80171e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80171ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80171ec:	e737      	b.n	801705e <_dtoa_r+0x73e>
 80171ee:	9a04      	ldr	r2, [sp, #16]
 80171f0:	e764      	b.n	80170bc <_dtoa_r+0x79c>
 80171f2:	2500      	movs	r5, #0
 80171f4:	9b04      	ldr	r3, [sp, #16]
 80171f6:	9a04      	ldr	r2, [sp, #16]
 80171f8:	691b      	ldr	r3, [r3, #16]
 80171fa:	9310      	str	r3, [sp, #64]	; 0x40
 80171fc:	3303      	adds	r3, #3
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	18d3      	adds	r3, r2, r3
 8017202:	6858      	ldr	r0, [r3, #4]
 8017204:	f000 fe8e 	bl	8017f24 <__hi0bits>
 8017208:	2320      	movs	r3, #32
 801720a:	1a18      	subs	r0, r3, r0
 801720c:	e785      	b.n	801711a <_dtoa_r+0x7fa>
 801720e:	2b04      	cmp	r3, #4
 8017210:	d095      	beq.n	801713e <_dtoa_r+0x81e>
 8017212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017214:	331c      	adds	r3, #28
 8017216:	18d2      	adds	r2, r2, r3
 8017218:	920a      	str	r2, [sp, #40]	; 0x28
 801721a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801721c:	18e4      	adds	r4, r4, r3
 801721e:	18d3      	adds	r3, r2, r3
 8017220:	e78c      	b.n	801713c <_dtoa_r+0x81c>
 8017222:	0003      	movs	r3, r0
 8017224:	e7f5      	b.n	8017212 <_dtoa_r+0x8f2>
 8017226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017228:	2b00      	cmp	r3, #0
 801722a:	dc3d      	bgt.n	80172a8 <_dtoa_r+0x988>
 801722c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801722e:	2b02      	cmp	r3, #2
 8017230:	dd3a      	ble.n	80172a8 <_dtoa_r+0x988>
 8017232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017234:	930c      	str	r3, [sp, #48]	; 0x30
 8017236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017238:	2b00      	cmp	r3, #0
 801723a:	d10c      	bne.n	8017256 <_dtoa_r+0x936>
 801723c:	9904      	ldr	r1, [sp, #16]
 801723e:	2205      	movs	r2, #5
 8017240:	9802      	ldr	r0, [sp, #8]
 8017242:	f000 fdf3 	bl	8017e2c <__multadd>
 8017246:	9004      	str	r0, [sp, #16]
 8017248:	0001      	movs	r1, r0
 801724a:	9803      	ldr	r0, [sp, #12]
 801724c:	f000 ffe0 	bl	8018210 <__mcmp>
 8017250:	2800      	cmp	r0, #0
 8017252:	dd00      	ble.n	8017256 <_dtoa_r+0x936>
 8017254:	e5ad      	b.n	8016db2 <_dtoa_r+0x492>
 8017256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017258:	9d08      	ldr	r5, [sp, #32]
 801725a:	43df      	mvns	r7, r3
 801725c:	2300      	movs	r3, #0
 801725e:	9309      	str	r3, [sp, #36]	; 0x24
 8017260:	9904      	ldr	r1, [sp, #16]
 8017262:	9802      	ldr	r0, [sp, #8]
 8017264:	f000 fdd8 	bl	8017e18 <_Bfree>
 8017268:	2e00      	cmp	r6, #0
 801726a:	d100      	bne.n	801726e <_dtoa_r+0x94e>
 801726c:	e69b      	b.n	8016fa6 <_dtoa_r+0x686>
 801726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017270:	2b00      	cmp	r3, #0
 8017272:	d005      	beq.n	8017280 <_dtoa_r+0x960>
 8017274:	42b3      	cmp	r3, r6
 8017276:	d003      	beq.n	8017280 <_dtoa_r+0x960>
 8017278:	0019      	movs	r1, r3
 801727a:	9802      	ldr	r0, [sp, #8]
 801727c:	f000 fdcc 	bl	8017e18 <_Bfree>
 8017280:	0031      	movs	r1, r6
 8017282:	9802      	ldr	r0, [sp, #8]
 8017284:	f000 fdc8 	bl	8017e18 <_Bfree>
 8017288:	e68d      	b.n	8016fa6 <_dtoa_r+0x686>
 801728a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	001e      	movs	r6, r3
 8017290:	e7e1      	b.n	8017256 <_dtoa_r+0x936>
 8017292:	2300      	movs	r3, #0
 8017294:	e7fa      	b.n	801728c <_dtoa_r+0x96c>
 8017296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017298:	0037      	movs	r7, r6
 801729a:	9304      	str	r3, [sp, #16]
 801729c:	001e      	movs	r6, r3
 801729e:	e588      	b.n	8016db2 <_dtoa_r+0x492>
 80172a0:	40240000 	.word	0x40240000
 80172a4:	00000433 	.word	0x00000433
 80172a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d100      	bne.n	80172b0 <_dtoa_r+0x990>
 80172ae:	e0b2      	b.n	8017416 <_dtoa_r+0xaf6>
 80172b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b2:	930c      	str	r3, [sp, #48]	; 0x30
 80172b4:	2c00      	cmp	r4, #0
 80172b6:	dd05      	ble.n	80172c4 <_dtoa_r+0x9a4>
 80172b8:	0031      	movs	r1, r6
 80172ba:	0022      	movs	r2, r4
 80172bc:	9802      	ldr	r0, [sp, #8]
 80172be:	f000 ff55 	bl	801816c <__lshift>
 80172c2:	0006      	movs	r6, r0
 80172c4:	0030      	movs	r0, r6
 80172c6:	2d00      	cmp	r5, #0
 80172c8:	d011      	beq.n	80172ee <_dtoa_r+0x9ce>
 80172ca:	6871      	ldr	r1, [r6, #4]
 80172cc:	9802      	ldr	r0, [sp, #8]
 80172ce:	f000 fd7b 	bl	8017dc8 <_Balloc>
 80172d2:	0031      	movs	r1, r6
 80172d4:	0004      	movs	r4, r0
 80172d6:	6933      	ldr	r3, [r6, #16]
 80172d8:	310c      	adds	r1, #12
 80172da:	1c9a      	adds	r2, r3, #2
 80172dc:	0092      	lsls	r2, r2, #2
 80172de:	300c      	adds	r0, #12
 80172e0:	f7fc fe8b 	bl	8013ffa <memcpy>
 80172e4:	2201      	movs	r2, #1
 80172e6:	0021      	movs	r1, r4
 80172e8:	9802      	ldr	r0, [sp, #8]
 80172ea:	f000 ff3f 	bl	801816c <__lshift>
 80172ee:	9609      	str	r6, [sp, #36]	; 0x24
 80172f0:	0006      	movs	r6, r0
 80172f2:	9b08      	ldr	r3, [sp, #32]
 80172f4:	930a      	str	r3, [sp, #40]	; 0x28
 80172f6:	9904      	ldr	r1, [sp, #16]
 80172f8:	9803      	ldr	r0, [sp, #12]
 80172fa:	f7ff fa8b 	bl	8016814 <quorem>
 80172fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017300:	900d      	str	r0, [sp, #52]	; 0x34
 8017302:	0004      	movs	r4, r0
 8017304:	9803      	ldr	r0, [sp, #12]
 8017306:	f000 ff83 	bl	8018210 <__mcmp>
 801730a:	0032      	movs	r2, r6
 801730c:	9010      	str	r0, [sp, #64]	; 0x40
 801730e:	9904      	ldr	r1, [sp, #16]
 8017310:	9802      	ldr	r0, [sp, #8]
 8017312:	f000 ff97 	bl	8018244 <__mdiff>
 8017316:	2301      	movs	r3, #1
 8017318:	930b      	str	r3, [sp, #44]	; 0x2c
 801731a:	68c3      	ldr	r3, [r0, #12]
 801731c:	3430      	adds	r4, #48	; 0x30
 801731e:	0005      	movs	r5, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	d104      	bne.n	801732e <_dtoa_r+0xa0e>
 8017324:	0001      	movs	r1, r0
 8017326:	9803      	ldr	r0, [sp, #12]
 8017328:	f000 ff72 	bl	8018210 <__mcmp>
 801732c:	900b      	str	r0, [sp, #44]	; 0x2c
 801732e:	0029      	movs	r1, r5
 8017330:	9802      	ldr	r0, [sp, #8]
 8017332:	f000 fd71 	bl	8017e18 <_Bfree>
 8017336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017338:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801733a:	4313      	orrs	r3, r2
 801733c:	d10e      	bne.n	801735c <_dtoa_r+0xa3c>
 801733e:	9a06      	ldr	r2, [sp, #24]
 8017340:	3301      	adds	r3, #1
 8017342:	4213      	tst	r3, r2
 8017344:	d10a      	bne.n	801735c <_dtoa_r+0xa3c>
 8017346:	2c39      	cmp	r4, #57	; 0x39
 8017348:	d026      	beq.n	8017398 <_dtoa_r+0xa78>
 801734a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801734c:	2b00      	cmp	r3, #0
 801734e:	dd01      	ble.n	8017354 <_dtoa_r+0xa34>
 8017350:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017352:	3431      	adds	r4, #49	; 0x31
 8017354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017356:	1c5d      	adds	r5, r3, #1
 8017358:	701c      	strb	r4, [r3, #0]
 801735a:	e781      	b.n	8017260 <_dtoa_r+0x940>
 801735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801735e:	2b00      	cmp	r3, #0
 8017360:	db07      	blt.n	8017372 <_dtoa_r+0xa52>
 8017362:	001d      	movs	r5, r3
 8017364:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017366:	431d      	orrs	r5, r3
 8017368:	d122      	bne.n	80173b0 <_dtoa_r+0xa90>
 801736a:	2301      	movs	r3, #1
 801736c:	9a06      	ldr	r2, [sp, #24]
 801736e:	4213      	tst	r3, r2
 8017370:	d11e      	bne.n	80173b0 <_dtoa_r+0xa90>
 8017372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017374:	2b00      	cmp	r3, #0
 8017376:	dded      	ble.n	8017354 <_dtoa_r+0xa34>
 8017378:	9903      	ldr	r1, [sp, #12]
 801737a:	2201      	movs	r2, #1
 801737c:	9802      	ldr	r0, [sp, #8]
 801737e:	f000 fef5 	bl	801816c <__lshift>
 8017382:	9904      	ldr	r1, [sp, #16]
 8017384:	9003      	str	r0, [sp, #12]
 8017386:	f000 ff43 	bl	8018210 <__mcmp>
 801738a:	2800      	cmp	r0, #0
 801738c:	dc02      	bgt.n	8017394 <_dtoa_r+0xa74>
 801738e:	d1e1      	bne.n	8017354 <_dtoa_r+0xa34>
 8017390:	07e3      	lsls	r3, r4, #31
 8017392:	d5df      	bpl.n	8017354 <_dtoa_r+0xa34>
 8017394:	2c39      	cmp	r4, #57	; 0x39
 8017396:	d1db      	bne.n	8017350 <_dtoa_r+0xa30>
 8017398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801739a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801739c:	1c5d      	adds	r5, r3, #1
 801739e:	2339      	movs	r3, #57	; 0x39
 80173a0:	7013      	strb	r3, [r2, #0]
 80173a2:	1e6b      	subs	r3, r5, #1
 80173a4:	781a      	ldrb	r2, [r3, #0]
 80173a6:	2a39      	cmp	r2, #57	; 0x39
 80173a8:	d067      	beq.n	801747a <_dtoa_r+0xb5a>
 80173aa:	3201      	adds	r2, #1
 80173ac:	701a      	strb	r2, [r3, #0]
 80173ae:	e757      	b.n	8017260 <_dtoa_r+0x940>
 80173b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b2:	1c5d      	adds	r5, r3, #1
 80173b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	dd04      	ble.n	80173c4 <_dtoa_r+0xaa4>
 80173ba:	2c39      	cmp	r4, #57	; 0x39
 80173bc:	d0ec      	beq.n	8017398 <_dtoa_r+0xa78>
 80173be:	3401      	adds	r4, #1
 80173c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173c2:	e7c9      	b.n	8017358 <_dtoa_r+0xa38>
 80173c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173c8:	701c      	strb	r4, [r3, #0]
 80173ca:	9b08      	ldr	r3, [sp, #32]
 80173cc:	1aeb      	subs	r3, r5, r3
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d03e      	beq.n	8017450 <_dtoa_r+0xb30>
 80173d2:	2300      	movs	r3, #0
 80173d4:	220a      	movs	r2, #10
 80173d6:	9903      	ldr	r1, [sp, #12]
 80173d8:	9802      	ldr	r0, [sp, #8]
 80173da:	f000 fd27 	bl	8017e2c <__multadd>
 80173de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e0:	9003      	str	r0, [sp, #12]
 80173e2:	42b3      	cmp	r3, r6
 80173e4:	d109      	bne.n	80173fa <_dtoa_r+0xada>
 80173e6:	2300      	movs	r3, #0
 80173e8:	220a      	movs	r2, #10
 80173ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173ec:	9802      	ldr	r0, [sp, #8]
 80173ee:	f000 fd1d 	bl	8017e2c <__multadd>
 80173f2:	9009      	str	r0, [sp, #36]	; 0x24
 80173f4:	0006      	movs	r6, r0
 80173f6:	950a      	str	r5, [sp, #40]	; 0x28
 80173f8:	e77d      	b.n	80172f6 <_dtoa_r+0x9d6>
 80173fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173fc:	2300      	movs	r3, #0
 80173fe:	220a      	movs	r2, #10
 8017400:	9802      	ldr	r0, [sp, #8]
 8017402:	f000 fd13 	bl	8017e2c <__multadd>
 8017406:	2300      	movs	r3, #0
 8017408:	9009      	str	r0, [sp, #36]	; 0x24
 801740a:	220a      	movs	r2, #10
 801740c:	0031      	movs	r1, r6
 801740e:	9802      	ldr	r0, [sp, #8]
 8017410:	f000 fd0c 	bl	8017e2c <__multadd>
 8017414:	e7ee      	b.n	80173f4 <_dtoa_r+0xad4>
 8017416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017418:	930c      	str	r3, [sp, #48]	; 0x30
 801741a:	9b08      	ldr	r3, [sp, #32]
 801741c:	9306      	str	r3, [sp, #24]
 801741e:	9904      	ldr	r1, [sp, #16]
 8017420:	9803      	ldr	r0, [sp, #12]
 8017422:	f7ff f9f7 	bl	8016814 <quorem>
 8017426:	9b06      	ldr	r3, [sp, #24]
 8017428:	3030      	adds	r0, #48	; 0x30
 801742a:	1c5d      	adds	r5, r3, #1
 801742c:	7018      	strb	r0, [r3, #0]
 801742e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017430:	9b08      	ldr	r3, [sp, #32]
 8017432:	0004      	movs	r4, r0
 8017434:	1aeb      	subs	r3, r5, r3
 8017436:	429a      	cmp	r2, r3
 8017438:	dd08      	ble.n	801744c <_dtoa_r+0xb2c>
 801743a:	2300      	movs	r3, #0
 801743c:	220a      	movs	r2, #10
 801743e:	9903      	ldr	r1, [sp, #12]
 8017440:	9802      	ldr	r0, [sp, #8]
 8017442:	f000 fcf3 	bl	8017e2c <__multadd>
 8017446:	9506      	str	r5, [sp, #24]
 8017448:	9003      	str	r0, [sp, #12]
 801744a:	e7e8      	b.n	801741e <_dtoa_r+0xafe>
 801744c:	2300      	movs	r3, #0
 801744e:	9309      	str	r3, [sp, #36]	; 0x24
 8017450:	9903      	ldr	r1, [sp, #12]
 8017452:	2201      	movs	r2, #1
 8017454:	9802      	ldr	r0, [sp, #8]
 8017456:	f000 fe89 	bl	801816c <__lshift>
 801745a:	9904      	ldr	r1, [sp, #16]
 801745c:	9003      	str	r0, [sp, #12]
 801745e:	f000 fed7 	bl	8018210 <__mcmp>
 8017462:	2800      	cmp	r0, #0
 8017464:	dc9d      	bgt.n	80173a2 <_dtoa_r+0xa82>
 8017466:	d101      	bne.n	801746c <_dtoa_r+0xb4c>
 8017468:	07e3      	lsls	r3, r4, #31
 801746a:	d49a      	bmi.n	80173a2 <_dtoa_r+0xa82>
 801746c:	1e6b      	subs	r3, r5, #1
 801746e:	781a      	ldrb	r2, [r3, #0]
 8017470:	2a30      	cmp	r2, #48	; 0x30
 8017472:	d000      	beq.n	8017476 <_dtoa_r+0xb56>
 8017474:	e6f4      	b.n	8017260 <_dtoa_r+0x940>
 8017476:	001d      	movs	r5, r3
 8017478:	e7f8      	b.n	801746c <_dtoa_r+0xb4c>
 801747a:	9a08      	ldr	r2, [sp, #32]
 801747c:	429a      	cmp	r2, r3
 801747e:	d103      	bne.n	8017488 <_dtoa_r+0xb68>
 8017480:	2331      	movs	r3, #49	; 0x31
 8017482:	3701      	adds	r7, #1
 8017484:	7013      	strb	r3, [r2, #0]
 8017486:	e6eb      	b.n	8017260 <_dtoa_r+0x940>
 8017488:	001d      	movs	r5, r3
 801748a:	e78a      	b.n	80173a2 <_dtoa_r+0xa82>
 801748c:	4b0b      	ldr	r3, [pc, #44]	; (80174bc <_dtoa_r+0xb9c>)
 801748e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017490:	9308      	str	r3, [sp, #32]
 8017492:	4b0b      	ldr	r3, [pc, #44]	; (80174c0 <_dtoa_r+0xba0>)
 8017494:	2a00      	cmp	r2, #0
 8017496:	d001      	beq.n	801749c <_dtoa_r+0xb7c>
 8017498:	f7ff fa75 	bl	8016986 <_dtoa_r+0x66>
 801749c:	f7ff fa75 	bl	801698a <_dtoa_r+0x6a>
 80174a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	dc00      	bgt.n	80174a8 <_dtoa_r+0xb88>
 80174a6:	e621      	b.n	80170ec <_dtoa_r+0x7cc>
 80174a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80174aa:	2001      	movs	r0, #1
 80174ac:	e635      	b.n	801711a <_dtoa_r+0x7fa>
 80174ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	dcb2      	bgt.n	801741a <_dtoa_r+0xafa>
 80174b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174b6:	2b02      	cmp	r3, #2
 80174b8:	ddaf      	ble.n	801741a <_dtoa_r+0xafa>
 80174ba:	e6bc      	b.n	8017236 <_dtoa_r+0x916>
 80174bc:	0801bd45 	.word	0x0801bd45
 80174c0:	0801bd4d 	.word	0x0801bd4d

080174c4 <__errno>:
 80174c4:	4b01      	ldr	r3, [pc, #4]	; (80174cc <__errno+0x8>)
 80174c6:	6818      	ldr	r0, [r3, #0]
 80174c8:	4770      	bx	lr
 80174ca:	46c0      	nop			; (mov r8, r8)
 80174cc:	20000128 	.word	0x20000128

080174d0 <__libc_fini_array>:
 80174d0:	b570      	push	{r4, r5, r6, lr}
 80174d2:	4d07      	ldr	r5, [pc, #28]	; (80174f0 <__libc_fini_array+0x20>)
 80174d4:	4c07      	ldr	r4, [pc, #28]	; (80174f4 <__libc_fini_array+0x24>)
 80174d6:	1b64      	subs	r4, r4, r5
 80174d8:	10a4      	asrs	r4, r4, #2
 80174da:	2c00      	cmp	r4, #0
 80174dc:	d102      	bne.n	80174e4 <__libc_fini_array+0x14>
 80174de:	f001 f987 	bl	80187f0 <_fini>
 80174e2:	bd70      	pop	{r4, r5, r6, pc}
 80174e4:	3c01      	subs	r4, #1
 80174e6:	00a3      	lsls	r3, r4, #2
 80174e8:	58eb      	ldr	r3, [r5, r3]
 80174ea:	4798      	blx	r3
 80174ec:	e7f5      	b.n	80174da <__libc_fini_array+0xa>
 80174ee:	46c0      	nop			; (mov r8, r8)
 80174f0:	0801be64 	.word	0x0801be64
 80174f4:	0801be68 	.word	0x0801be68

080174f8 <_malloc_trim_r>:
 80174f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174fa:	0005      	movs	r5, r0
 80174fc:	2008      	movs	r0, #8
 80174fe:	000c      	movs	r4, r1
 8017500:	f7ff f95c 	bl	80167bc <sysconf>
 8017504:	0007      	movs	r7, r0
 8017506:	0028      	movs	r0, r5
 8017508:	f7fc fd88 	bl	801401c <__malloc_lock>
 801750c:	2203      	movs	r2, #3
 801750e:	4e21      	ldr	r6, [pc, #132]	; (8017594 <_malloc_trim_r+0x9c>)
 8017510:	0039      	movs	r1, r7
 8017512:	68b3      	ldr	r3, [r6, #8]
 8017514:	685b      	ldr	r3, [r3, #4]
 8017516:	4393      	bics	r3, r2
 8017518:	1b18      	subs	r0, r3, r4
 801751a:	3811      	subs	r0, #17
 801751c:	19c0      	adds	r0, r0, r7
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	f7e8 fe16 	bl	8000150 <__udivsi3>
 8017524:	1e44      	subs	r4, r0, #1
 8017526:	437c      	muls	r4, r7
 8017528:	42a7      	cmp	r7, r4
 801752a:	dd04      	ble.n	8017536 <_malloc_trim_r+0x3e>
 801752c:	0028      	movs	r0, r5
 801752e:	f7fc fd7d 	bl	801402c <__malloc_unlock>
 8017532:	2000      	movs	r0, #0
 8017534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017536:	2100      	movs	r1, #0
 8017538:	0028      	movs	r0, r5
 801753a:	f7fc ff4f 	bl	80143dc <_sbrk_r>
 801753e:	68b3      	ldr	r3, [r6, #8]
 8017540:	9a01      	ldr	r2, [sp, #4]
 8017542:	189b      	adds	r3, r3, r2
 8017544:	4298      	cmp	r0, r3
 8017546:	d1f1      	bne.n	801752c <_malloc_trim_r+0x34>
 8017548:	4261      	negs	r1, r4
 801754a:	0028      	movs	r0, r5
 801754c:	f7fc ff46 	bl	80143dc <_sbrk_r>
 8017550:	1c43      	adds	r3, r0, #1
 8017552:	d110      	bne.n	8017576 <_malloc_trim_r+0x7e>
 8017554:	2100      	movs	r1, #0
 8017556:	0028      	movs	r0, r5
 8017558:	f7fc ff40 	bl	80143dc <_sbrk_r>
 801755c:	68b2      	ldr	r2, [r6, #8]
 801755e:	1a81      	subs	r1, r0, r2
 8017560:	290f      	cmp	r1, #15
 8017562:	dde3      	ble.n	801752c <_malloc_trim_r+0x34>
 8017564:	4b0c      	ldr	r3, [pc, #48]	; (8017598 <_malloc_trim_r+0xa0>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	1ac0      	subs	r0, r0, r3
 801756a:	4b0c      	ldr	r3, [pc, #48]	; (801759c <_malloc_trim_r+0xa4>)
 801756c:	6018      	str	r0, [r3, #0]
 801756e:	2301      	movs	r3, #1
 8017570:	430b      	orrs	r3, r1
 8017572:	6053      	str	r3, [r2, #4]
 8017574:	e7da      	b.n	801752c <_malloc_trim_r+0x34>
 8017576:	68b2      	ldr	r2, [r6, #8]
 8017578:	2601      	movs	r6, #1
 801757a:	9b01      	ldr	r3, [sp, #4]
 801757c:	0028      	movs	r0, r5
 801757e:	1b1b      	subs	r3, r3, r4
 8017580:	4333      	orrs	r3, r6
 8017582:	6053      	str	r3, [r2, #4]
 8017584:	4b05      	ldr	r3, [pc, #20]	; (801759c <_malloc_trim_r+0xa4>)
 8017586:	681a      	ldr	r2, [r3, #0]
 8017588:	1b14      	subs	r4, r2, r4
 801758a:	601c      	str	r4, [r3, #0]
 801758c:	f7fc fd4e 	bl	801402c <__malloc_unlock>
 8017590:	0030      	movs	r0, r6
 8017592:	e7cf      	b.n	8017534 <_malloc_trim_r+0x3c>
 8017594:	200006c4 	.word	0x200006c4
 8017598:	20000acc 	.word	0x20000acc
 801759c:	20006920 	.word	0x20006920

080175a0 <_free_r>:
 80175a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175a2:	1e0d      	subs	r5, r1, #0
 80175a4:	9001      	str	r0, [sp, #4]
 80175a6:	d02d      	beq.n	8017604 <_free_r+0x64>
 80175a8:	f7fc fd38 	bl	801401c <__malloc_lock>
 80175ac:	2301      	movs	r3, #1
 80175ae:	0029      	movs	r1, r5
 80175b0:	469c      	mov	ip, r3
 80175b2:	3908      	subs	r1, #8
 80175b4:	684f      	ldr	r7, [r1, #4]
 80175b6:	4662      	mov	r2, ip
 80175b8:	003b      	movs	r3, r7
 80175ba:	4666      	mov	r6, ip
 80175bc:	4393      	bics	r3, r2
 80175be:	18c8      	adds	r0, r1, r3
 80175c0:	6845      	ldr	r5, [r0, #4]
 80175c2:	3202      	adds	r2, #2
 80175c4:	4395      	bics	r5, r2
 80175c6:	4a4a      	ldr	r2, [pc, #296]	; (80176f0 <_free_r+0x150>)
 80175c8:	4037      	ands	r7, r6
 80175ca:	6896      	ldr	r6, [r2, #8]
 80175cc:	4286      	cmp	r6, r0
 80175ce:	d11a      	bne.n	8017606 <_free_r+0x66>
 80175d0:	195b      	adds	r3, r3, r5
 80175d2:	2f00      	cmp	r7, #0
 80175d4:	d106      	bne.n	80175e4 <_free_r+0x44>
 80175d6:	6808      	ldr	r0, [r1, #0]
 80175d8:	1a09      	subs	r1, r1, r0
 80175da:	688d      	ldr	r5, [r1, #8]
 80175dc:	181b      	adds	r3, r3, r0
 80175de:	68c8      	ldr	r0, [r1, #12]
 80175e0:	60e8      	str	r0, [r5, #12]
 80175e2:	6085      	str	r5, [r0, #8]
 80175e4:	2001      	movs	r0, #1
 80175e6:	4318      	orrs	r0, r3
 80175e8:	6048      	str	r0, [r1, #4]
 80175ea:	6091      	str	r1, [r2, #8]
 80175ec:	4a41      	ldr	r2, [pc, #260]	; (80176f4 <_free_r+0x154>)
 80175ee:	6812      	ldr	r2, [r2, #0]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d804      	bhi.n	80175fe <_free_r+0x5e>
 80175f4:	4b40      	ldr	r3, [pc, #256]	; (80176f8 <_free_r+0x158>)
 80175f6:	9801      	ldr	r0, [sp, #4]
 80175f8:	6819      	ldr	r1, [r3, #0]
 80175fa:	f7ff ff7d 	bl	80174f8 <_malloc_trim_r>
 80175fe:	9801      	ldr	r0, [sp, #4]
 8017600:	f7fc fd14 	bl	801402c <__malloc_unlock>
 8017604:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017606:	2600      	movs	r6, #0
 8017608:	6045      	str	r5, [r0, #4]
 801760a:	42b7      	cmp	r7, r6
 801760c:	d109      	bne.n	8017622 <_free_r+0x82>
 801760e:	680f      	ldr	r7, [r1, #0]
 8017610:	4c3a      	ldr	r4, [pc, #232]	; (80176fc <_free_r+0x15c>)
 8017612:	1bc9      	subs	r1, r1, r7
 8017614:	19db      	adds	r3, r3, r7
 8017616:	688f      	ldr	r7, [r1, #8]
 8017618:	42a7      	cmp	r7, r4
 801761a:	d02b      	beq.n	8017674 <_free_r+0xd4>
 801761c:	68cc      	ldr	r4, [r1, #12]
 801761e:	60fc      	str	r4, [r7, #12]
 8017620:	60a7      	str	r7, [r4, #8]
 8017622:	1947      	adds	r7, r0, r5
 8017624:	687c      	ldr	r4, [r7, #4]
 8017626:	2701      	movs	r7, #1
 8017628:	423c      	tst	r4, r7
 801762a:	d10b      	bne.n	8017644 <_free_r+0xa4>
 801762c:	195b      	adds	r3, r3, r5
 801762e:	6885      	ldr	r5, [r0, #8]
 8017630:	2e00      	cmp	r6, #0
 8017632:	d121      	bne.n	8017678 <_free_r+0xd8>
 8017634:	4c31      	ldr	r4, [pc, #196]	; (80176fc <_free_r+0x15c>)
 8017636:	42a5      	cmp	r5, r4
 8017638:	d11e      	bne.n	8017678 <_free_r+0xd8>
 801763a:	003e      	movs	r6, r7
 801763c:	6151      	str	r1, [r2, #20]
 801763e:	6111      	str	r1, [r2, #16]
 8017640:	60cd      	str	r5, [r1, #12]
 8017642:	608d      	str	r5, [r1, #8]
 8017644:	2001      	movs	r0, #1
 8017646:	0005      	movs	r5, r0
 8017648:	431d      	orrs	r5, r3
 801764a:	604d      	str	r5, [r1, #4]
 801764c:	50cb      	str	r3, [r1, r3]
 801764e:	2e00      	cmp	r6, #0
 8017650:	d1d5      	bne.n	80175fe <_free_r+0x5e>
 8017652:	4d2b      	ldr	r5, [pc, #172]	; (8017700 <_free_r+0x160>)
 8017654:	42ab      	cmp	r3, r5
 8017656:	d813      	bhi.n	8017680 <_free_r+0xe0>
 8017658:	08db      	lsrs	r3, r3, #3
 801765a:	109d      	asrs	r5, r3, #2
 801765c:	40a8      	lsls	r0, r5
 801765e:	6854      	ldr	r4, [r2, #4]
 8017660:	00db      	lsls	r3, r3, #3
 8017662:	4320      	orrs	r0, r4
 8017664:	6050      	str	r0, [r2, #4]
 8017666:	189a      	adds	r2, r3, r2
 8017668:	6893      	ldr	r3, [r2, #8]
 801766a:	60ca      	str	r2, [r1, #12]
 801766c:	608b      	str	r3, [r1, #8]
 801766e:	6091      	str	r1, [r2, #8]
 8017670:	60d9      	str	r1, [r3, #12]
 8017672:	e7c4      	b.n	80175fe <_free_r+0x5e>
 8017674:	4666      	mov	r6, ip
 8017676:	e7d4      	b.n	8017622 <_free_r+0x82>
 8017678:	68c0      	ldr	r0, [r0, #12]
 801767a:	60e8      	str	r0, [r5, #12]
 801767c:	6085      	str	r5, [r0, #8]
 801767e:	e7e1      	b.n	8017644 <_free_r+0xa4>
 8017680:	0a5d      	lsrs	r5, r3, #9
 8017682:	2d04      	cmp	r5, #4
 8017684:	d812      	bhi.n	80176ac <_free_r+0x10c>
 8017686:	0998      	lsrs	r0, r3, #6
 8017688:	3038      	adds	r0, #56	; 0x38
 801768a:	00c6      	lsls	r6, r0, #3
 801768c:	18b6      	adds	r6, r6, r2
 801768e:	68b5      	ldr	r5, [r6, #8]
 8017690:	2703      	movs	r7, #3
 8017692:	42ae      	cmp	r6, r5
 8017694:	d125      	bne.n	80176e2 <_free_r+0x142>
 8017696:	2301      	movs	r3, #1
 8017698:	1080      	asrs	r0, r0, #2
 801769a:	4083      	lsls	r3, r0
 801769c:	6850      	ldr	r0, [r2, #4]
 801769e:	4303      	orrs	r3, r0
 80176a0:	6053      	str	r3, [r2, #4]
 80176a2:	60ce      	str	r6, [r1, #12]
 80176a4:	608d      	str	r5, [r1, #8]
 80176a6:	60b1      	str	r1, [r6, #8]
 80176a8:	60e9      	str	r1, [r5, #12]
 80176aa:	e7a8      	b.n	80175fe <_free_r+0x5e>
 80176ac:	2d14      	cmp	r5, #20
 80176ae:	d802      	bhi.n	80176b6 <_free_r+0x116>
 80176b0:	0028      	movs	r0, r5
 80176b2:	305b      	adds	r0, #91	; 0x5b
 80176b4:	e7e9      	b.n	801768a <_free_r+0xea>
 80176b6:	2d54      	cmp	r5, #84	; 0x54
 80176b8:	d802      	bhi.n	80176c0 <_free_r+0x120>
 80176ba:	0b18      	lsrs	r0, r3, #12
 80176bc:	306e      	adds	r0, #110	; 0x6e
 80176be:	e7e4      	b.n	801768a <_free_r+0xea>
 80176c0:	20aa      	movs	r0, #170	; 0xaa
 80176c2:	0040      	lsls	r0, r0, #1
 80176c4:	4285      	cmp	r5, r0
 80176c6:	d802      	bhi.n	80176ce <_free_r+0x12e>
 80176c8:	0bd8      	lsrs	r0, r3, #15
 80176ca:	3077      	adds	r0, #119	; 0x77
 80176cc:	e7dd      	b.n	801768a <_free_r+0xea>
 80176ce:	4e0d      	ldr	r6, [pc, #52]	; (8017704 <_free_r+0x164>)
 80176d0:	207e      	movs	r0, #126	; 0x7e
 80176d2:	42b5      	cmp	r5, r6
 80176d4:	d8d9      	bhi.n	801768a <_free_r+0xea>
 80176d6:	0c98      	lsrs	r0, r3, #18
 80176d8:	307c      	adds	r0, #124	; 0x7c
 80176da:	e7d6      	b.n	801768a <_free_r+0xea>
 80176dc:	68ad      	ldr	r5, [r5, #8]
 80176de:	42ae      	cmp	r6, r5
 80176e0:	d003      	beq.n	80176ea <_free_r+0x14a>
 80176e2:	686a      	ldr	r2, [r5, #4]
 80176e4:	43ba      	bics	r2, r7
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d8f8      	bhi.n	80176dc <_free_r+0x13c>
 80176ea:	68ee      	ldr	r6, [r5, #12]
 80176ec:	e7d9      	b.n	80176a2 <_free_r+0x102>
 80176ee:	46c0      	nop			; (mov r8, r8)
 80176f0:	200006c4 	.word	0x200006c4
 80176f4:	20000ad0 	.word	0x20000ad0
 80176f8:	20006950 	.word	0x20006950
 80176fc:	200006cc 	.word	0x200006cc
 8017700:	000001ff 	.word	0x000001ff
 8017704:	00000554 	.word	0x00000554

08017708 <rshift>:
 8017708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801770a:	0004      	movs	r4, r0
 801770c:	6905      	ldr	r5, [r0, #16]
 801770e:	3414      	adds	r4, #20
 8017710:	114b      	asrs	r3, r1, #5
 8017712:	0026      	movs	r6, r4
 8017714:	429d      	cmp	r5, r3
 8017716:	dd14      	ble.n	8017742 <rshift+0x3a>
 8017718:	221f      	movs	r2, #31
 801771a:	00ad      	lsls	r5, r5, #2
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	4011      	ands	r1, r2
 8017720:	1965      	adds	r5, r4, r5
 8017722:	18e3      	adds	r3, r4, r3
 8017724:	0022      	movs	r2, r4
 8017726:	2900      	cmp	r1, #0
 8017728:	d01e      	beq.n	8017768 <rshift+0x60>
 801772a:	cb04      	ldmia	r3!, {r2}
 801772c:	2720      	movs	r7, #32
 801772e:	40ca      	lsrs	r2, r1
 8017730:	46a4      	mov	ip, r4
 8017732:	1a7f      	subs	r7, r7, r1
 8017734:	4666      	mov	r6, ip
 8017736:	429d      	cmp	r5, r3
 8017738:	d80b      	bhi.n	8017752 <rshift+0x4a>
 801773a:	6032      	str	r2, [r6, #0]
 801773c:	2a00      	cmp	r2, #0
 801773e:	d000      	beq.n	8017742 <rshift+0x3a>
 8017740:	3604      	adds	r6, #4
 8017742:	1b33      	subs	r3, r6, r4
 8017744:	109b      	asrs	r3, r3, #2
 8017746:	6103      	str	r3, [r0, #16]
 8017748:	42a6      	cmp	r6, r4
 801774a:	d101      	bne.n	8017750 <rshift+0x48>
 801774c:	2300      	movs	r3, #0
 801774e:	6143      	str	r3, [r0, #20]
 8017750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017752:	681e      	ldr	r6, [r3, #0]
 8017754:	40be      	lsls	r6, r7
 8017756:	4332      	orrs	r2, r6
 8017758:	4666      	mov	r6, ip
 801775a:	c604      	stmia	r6!, {r2}
 801775c:	cb04      	ldmia	r3!, {r2}
 801775e:	46b4      	mov	ip, r6
 8017760:	40ca      	lsrs	r2, r1
 8017762:	e7e7      	b.n	8017734 <rshift+0x2c>
 8017764:	cb02      	ldmia	r3!, {r1}
 8017766:	c202      	stmia	r2!, {r1}
 8017768:	0016      	movs	r6, r2
 801776a:	429d      	cmp	r5, r3
 801776c:	d8fa      	bhi.n	8017764 <rshift+0x5c>
 801776e:	e7e8      	b.n	8017742 <rshift+0x3a>

08017770 <__hexdig_fun>:
 8017770:	0003      	movs	r3, r0
 8017772:	3b30      	subs	r3, #48	; 0x30
 8017774:	2b09      	cmp	r3, #9
 8017776:	d803      	bhi.n	8017780 <__hexdig_fun+0x10>
 8017778:	3820      	subs	r0, #32
 801777a:	b2c3      	uxtb	r3, r0
 801777c:	0018      	movs	r0, r3
 801777e:	4770      	bx	lr
 8017780:	0003      	movs	r3, r0
 8017782:	3b61      	subs	r3, #97	; 0x61
 8017784:	2b05      	cmp	r3, #5
 8017786:	d801      	bhi.n	801778c <__hexdig_fun+0x1c>
 8017788:	3847      	subs	r0, #71	; 0x47
 801778a:	e7f6      	b.n	801777a <__hexdig_fun+0xa>
 801778c:	0002      	movs	r2, r0
 801778e:	3a41      	subs	r2, #65	; 0x41
 8017790:	2300      	movs	r3, #0
 8017792:	2a05      	cmp	r2, #5
 8017794:	d8f2      	bhi.n	801777c <__hexdig_fun+0xc>
 8017796:	3827      	subs	r0, #39	; 0x27
 8017798:	e7ef      	b.n	801777a <__hexdig_fun+0xa>

0801779a <__gethex>:
 801779a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801779c:	b08d      	sub	sp, #52	; 0x34
 801779e:	9005      	str	r0, [sp, #20]
 80177a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80177a2:	9109      	str	r1, [sp, #36]	; 0x24
 80177a4:	9202      	str	r2, [sp, #8]
 80177a6:	930a      	str	r3, [sp, #40]	; 0x28
 80177a8:	f000 fadf 	bl	8017d6a <__localeconv_l>
 80177ac:	6803      	ldr	r3, [r0, #0]
 80177ae:	0018      	movs	r0, r3
 80177b0:	9307      	str	r3, [sp, #28]
 80177b2:	f7e8 fcb1 	bl	8000118 <strlen>
 80177b6:	2202      	movs	r2, #2
 80177b8:	9b07      	ldr	r3, [sp, #28]
 80177ba:	4252      	negs	r2, r2
 80177bc:	181b      	adds	r3, r3, r0
 80177be:	3b01      	subs	r3, #1
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	9004      	str	r0, [sp, #16]
 80177c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80177c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177c8:	6819      	ldr	r1, [r3, #0]
 80177ca:	1c8b      	adds	r3, r1, #2
 80177cc:	1a52      	subs	r2, r2, r1
 80177ce:	18d1      	adds	r1, r2, r3
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	9108      	str	r1, [sp, #32]
 80177d4:	9901      	ldr	r1, [sp, #4]
 80177d6:	3301      	adds	r3, #1
 80177d8:	7808      	ldrb	r0, [r1, #0]
 80177da:	2830      	cmp	r0, #48	; 0x30
 80177dc:	d0f7      	beq.n	80177ce <__gethex+0x34>
 80177de:	f7ff ffc7 	bl	8017770 <__hexdig_fun>
 80177e2:	1e07      	subs	r7, r0, #0
 80177e4:	d000      	beq.n	80177e8 <__gethex+0x4e>
 80177e6:	e06f      	b.n	80178c8 <__gethex+0x12e>
 80177e8:	9a04      	ldr	r2, [sp, #16]
 80177ea:	9907      	ldr	r1, [sp, #28]
 80177ec:	9801      	ldr	r0, [sp, #4]
 80177ee:	f7fc fe4b 	bl	8014488 <strncmp>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d000      	beq.n	80177f8 <__gethex+0x5e>
 80177f6:	e06d      	b.n	80178d4 <__gethex+0x13a>
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	9a04      	ldr	r2, [sp, #16]
 80177fc:	189c      	adds	r4, r3, r2
 80177fe:	7820      	ldrb	r0, [r4, #0]
 8017800:	f7ff ffb6 	bl	8017770 <__hexdig_fun>
 8017804:	2800      	cmp	r0, #0
 8017806:	d069      	beq.n	80178dc <__gethex+0x142>
 8017808:	9401      	str	r4, [sp, #4]
 801780a:	9b01      	ldr	r3, [sp, #4]
 801780c:	7818      	ldrb	r0, [r3, #0]
 801780e:	2830      	cmp	r0, #48	; 0x30
 8017810:	d009      	beq.n	8017826 <__gethex+0x8c>
 8017812:	f7ff ffad 	bl	8017770 <__hexdig_fun>
 8017816:	4243      	negs	r3, r0
 8017818:	4143      	adcs	r3, r0
 801781a:	9303      	str	r3, [sp, #12]
 801781c:	2301      	movs	r3, #1
 801781e:	0026      	movs	r6, r4
 8017820:	9308      	str	r3, [sp, #32]
 8017822:	9c01      	ldr	r4, [sp, #4]
 8017824:	e004      	b.n	8017830 <__gethex+0x96>
 8017826:	9b01      	ldr	r3, [sp, #4]
 8017828:	3301      	adds	r3, #1
 801782a:	9301      	str	r3, [sp, #4]
 801782c:	e7ed      	b.n	801780a <__gethex+0x70>
 801782e:	3401      	adds	r4, #1
 8017830:	7820      	ldrb	r0, [r4, #0]
 8017832:	f7ff ff9d 	bl	8017770 <__hexdig_fun>
 8017836:	2800      	cmp	r0, #0
 8017838:	d1f9      	bne.n	801782e <__gethex+0x94>
 801783a:	9a04      	ldr	r2, [sp, #16]
 801783c:	9907      	ldr	r1, [sp, #28]
 801783e:	0020      	movs	r0, r4
 8017840:	f7fc fe22 	bl	8014488 <strncmp>
 8017844:	2800      	cmp	r0, #0
 8017846:	d109      	bne.n	801785c <__gethex+0xc2>
 8017848:	2e00      	cmp	r6, #0
 801784a:	d10a      	bne.n	8017862 <__gethex+0xc8>
 801784c:	9b04      	ldr	r3, [sp, #16]
 801784e:	18e4      	adds	r4, r4, r3
 8017850:	0026      	movs	r6, r4
 8017852:	7820      	ldrb	r0, [r4, #0]
 8017854:	f7ff ff8c 	bl	8017770 <__hexdig_fun>
 8017858:	2800      	cmp	r0, #0
 801785a:	d139      	bne.n	80178d0 <__gethex+0x136>
 801785c:	2700      	movs	r7, #0
 801785e:	42be      	cmp	r6, r7
 8017860:	d001      	beq.n	8017866 <__gethex+0xcc>
 8017862:	1b37      	subs	r7, r6, r4
 8017864:	00bf      	lsls	r7, r7, #2
 8017866:	7823      	ldrb	r3, [r4, #0]
 8017868:	2b50      	cmp	r3, #80	; 0x50
 801786a:	d001      	beq.n	8017870 <__gethex+0xd6>
 801786c:	2b70      	cmp	r3, #112	; 0x70
 801786e:	d142      	bne.n	80178f6 <__gethex+0x15c>
 8017870:	7863      	ldrb	r3, [r4, #1]
 8017872:	2b2b      	cmp	r3, #43	; 0x2b
 8017874:	d034      	beq.n	80178e0 <__gethex+0x146>
 8017876:	2b2d      	cmp	r3, #45	; 0x2d
 8017878:	d036      	beq.n	80178e8 <__gethex+0x14e>
 801787a:	2300      	movs	r3, #0
 801787c:	1c66      	adds	r6, r4, #1
 801787e:	9306      	str	r3, [sp, #24]
 8017880:	7830      	ldrb	r0, [r6, #0]
 8017882:	f7ff ff75 	bl	8017770 <__hexdig_fun>
 8017886:	1e43      	subs	r3, r0, #1
 8017888:	b2db      	uxtb	r3, r3
 801788a:	2b18      	cmp	r3, #24
 801788c:	d833      	bhi.n	80178f6 <__gethex+0x15c>
 801788e:	3810      	subs	r0, #16
 8017890:	0005      	movs	r5, r0
 8017892:	3601      	adds	r6, #1
 8017894:	7830      	ldrb	r0, [r6, #0]
 8017896:	f7ff ff6b 	bl	8017770 <__hexdig_fun>
 801789a:	1e43      	subs	r3, r0, #1
 801789c:	b2db      	uxtb	r3, r3
 801789e:	2b18      	cmp	r3, #24
 80178a0:	d924      	bls.n	80178ec <__gethex+0x152>
 80178a2:	9b06      	ldr	r3, [sp, #24]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d000      	beq.n	80178aa <__gethex+0x110>
 80178a8:	426d      	negs	r5, r5
 80178aa:	197f      	adds	r7, r7, r5
 80178ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ae:	601e      	str	r6, [r3, #0]
 80178b0:	9b03      	ldr	r3, [sp, #12]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d021      	beq.n	80178fa <__gethex+0x160>
 80178b6:	9b08      	ldr	r3, [sp, #32]
 80178b8:	2606      	movs	r6, #6
 80178ba:	425a      	negs	r2, r3
 80178bc:	4153      	adcs	r3, r2
 80178be:	425b      	negs	r3, r3
 80178c0:	401e      	ands	r6, r3
 80178c2:	0030      	movs	r0, r6
 80178c4:	b00d      	add	sp, #52	; 0x34
 80178c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178c8:	2300      	movs	r3, #0
 80178ca:	9303      	str	r3, [sp, #12]
 80178cc:	001e      	movs	r6, r3
 80178ce:	e7a8      	b.n	8017822 <__gethex+0x88>
 80178d0:	3401      	adds	r4, #1
 80178d2:	e7be      	b.n	8017852 <__gethex+0xb8>
 80178d4:	9c01      	ldr	r4, [sp, #4]
 80178d6:	2301      	movs	r3, #1
 80178d8:	9303      	str	r3, [sp, #12]
 80178da:	e7c4      	b.n	8017866 <__gethex+0xcc>
 80178dc:	0007      	movs	r7, r0
 80178de:	e7fa      	b.n	80178d6 <__gethex+0x13c>
 80178e0:	2300      	movs	r3, #0
 80178e2:	9306      	str	r3, [sp, #24]
 80178e4:	1ca6      	adds	r6, r4, #2
 80178e6:	e7cb      	b.n	8017880 <__gethex+0xe6>
 80178e8:	2301      	movs	r3, #1
 80178ea:	e7fa      	b.n	80178e2 <__gethex+0x148>
 80178ec:	230a      	movs	r3, #10
 80178ee:	435d      	muls	r5, r3
 80178f0:	182d      	adds	r5, r5, r0
 80178f2:	3d10      	subs	r5, #16
 80178f4:	e7cd      	b.n	8017892 <__gethex+0xf8>
 80178f6:	0026      	movs	r6, r4
 80178f8:	e7d8      	b.n	80178ac <__gethex+0x112>
 80178fa:	9b01      	ldr	r3, [sp, #4]
 80178fc:	9903      	ldr	r1, [sp, #12]
 80178fe:	1ae3      	subs	r3, r4, r3
 8017900:	3b01      	subs	r3, #1
 8017902:	2b07      	cmp	r3, #7
 8017904:	dc47      	bgt.n	8017996 <__gethex+0x1fc>
 8017906:	9805      	ldr	r0, [sp, #20]
 8017908:	f000 fa5e 	bl	8017dc8 <_Balloc>
 801790c:	0003      	movs	r3, r0
 801790e:	3314      	adds	r3, #20
 8017910:	9303      	str	r3, [sp, #12]
 8017912:	9308      	str	r3, [sp, #32]
 8017914:	2300      	movs	r3, #0
 8017916:	0005      	movs	r5, r0
 8017918:	001e      	movs	r6, r3
 801791a:	9306      	str	r3, [sp, #24]
 801791c:	9b01      	ldr	r3, [sp, #4]
 801791e:	42a3      	cmp	r3, r4
 8017920:	d33c      	bcc.n	801799c <__gethex+0x202>
 8017922:	9c08      	ldr	r4, [sp, #32]
 8017924:	9b03      	ldr	r3, [sp, #12]
 8017926:	c440      	stmia	r4!, {r6}
 8017928:	1ae4      	subs	r4, r4, r3
 801792a:	10a4      	asrs	r4, r4, #2
 801792c:	612c      	str	r4, [r5, #16]
 801792e:	0030      	movs	r0, r6
 8017930:	f000 faf8 	bl	8017f24 <__hi0bits>
 8017934:	9b02      	ldr	r3, [sp, #8]
 8017936:	0164      	lsls	r4, r4, #5
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	1a26      	subs	r6, r4, r0
 801793c:	9301      	str	r3, [sp, #4]
 801793e:	429e      	cmp	r6, r3
 8017940:	dd5f      	ble.n	8017a02 <__gethex+0x268>
 8017942:	1af6      	subs	r6, r6, r3
 8017944:	0031      	movs	r1, r6
 8017946:	0028      	movs	r0, r5
 8017948:	f000 fde3 	bl	8018512 <__any_on>
 801794c:	1e04      	subs	r4, r0, #0
 801794e:	d00f      	beq.n	8017970 <__gethex+0x1d6>
 8017950:	2401      	movs	r4, #1
 8017952:	211f      	movs	r1, #31
 8017954:	0020      	movs	r0, r4
 8017956:	1e73      	subs	r3, r6, #1
 8017958:	4019      	ands	r1, r3
 801795a:	4088      	lsls	r0, r1
 801795c:	0001      	movs	r1, r0
 801795e:	115a      	asrs	r2, r3, #5
 8017960:	9803      	ldr	r0, [sp, #12]
 8017962:	0092      	lsls	r2, r2, #2
 8017964:	5812      	ldr	r2, [r2, r0]
 8017966:	420a      	tst	r2, r1
 8017968:	d002      	beq.n	8017970 <__gethex+0x1d6>
 801796a:	42a3      	cmp	r3, r4
 801796c:	dc41      	bgt.n	80179f2 <__gethex+0x258>
 801796e:	2402      	movs	r4, #2
 8017970:	0031      	movs	r1, r6
 8017972:	0028      	movs	r0, r5
 8017974:	f7ff fec8 	bl	8017708 <rshift>
 8017978:	19bf      	adds	r7, r7, r6
 801797a:	9b02      	ldr	r3, [sp, #8]
 801797c:	689b      	ldr	r3, [r3, #8]
 801797e:	9304      	str	r3, [sp, #16]
 8017980:	42bb      	cmp	r3, r7
 8017982:	da4e      	bge.n	8017a22 <__gethex+0x288>
 8017984:	0029      	movs	r1, r5
 8017986:	9805      	ldr	r0, [sp, #20]
 8017988:	f000 fa46 	bl	8017e18 <_Bfree>
 801798c:	2300      	movs	r3, #0
 801798e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017990:	26a3      	movs	r6, #163	; 0xa3
 8017992:	6013      	str	r3, [r2, #0]
 8017994:	e795      	b.n	80178c2 <__gethex+0x128>
 8017996:	3101      	adds	r1, #1
 8017998:	105b      	asrs	r3, r3, #1
 801799a:	e7b2      	b.n	8017902 <__gethex+0x168>
 801799c:	1e63      	subs	r3, r4, #1
 801799e:	9309      	str	r3, [sp, #36]	; 0x24
 80179a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	4293      	cmp	r3, r2
 80179a6:	d015      	beq.n	80179d4 <__gethex+0x23a>
 80179a8:	9b06      	ldr	r3, [sp, #24]
 80179aa:	2b20      	cmp	r3, #32
 80179ac:	d105      	bne.n	80179ba <__gethex+0x220>
 80179ae:	9b08      	ldr	r3, [sp, #32]
 80179b0:	601e      	str	r6, [r3, #0]
 80179b2:	2600      	movs	r6, #0
 80179b4:	3304      	adds	r3, #4
 80179b6:	9308      	str	r3, [sp, #32]
 80179b8:	9606      	str	r6, [sp, #24]
 80179ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179bc:	7818      	ldrb	r0, [r3, #0]
 80179be:	f7ff fed7 	bl	8017770 <__hexdig_fun>
 80179c2:	230f      	movs	r3, #15
 80179c4:	4018      	ands	r0, r3
 80179c6:	9b06      	ldr	r3, [sp, #24]
 80179c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80179ca:	4098      	lsls	r0, r3
 80179cc:	3304      	adds	r3, #4
 80179ce:	4306      	orrs	r6, r0
 80179d0:	9306      	str	r3, [sp, #24]
 80179d2:	e7a3      	b.n	801791c <__gethex+0x182>
 80179d4:	2301      	movs	r3, #1
 80179d6:	9a04      	ldr	r2, [sp, #16]
 80179d8:	1a9c      	subs	r4, r3, r2
 80179da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179dc:	191c      	adds	r4, r3, r4
 80179de:	9b01      	ldr	r3, [sp, #4]
 80179e0:	429c      	cmp	r4, r3
 80179e2:	d3e1      	bcc.n	80179a8 <__gethex+0x20e>
 80179e4:	9907      	ldr	r1, [sp, #28]
 80179e6:	0020      	movs	r0, r4
 80179e8:	f7fc fd4e 	bl	8014488 <strncmp>
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d1db      	bne.n	80179a8 <__gethex+0x20e>
 80179f0:	e794      	b.n	801791c <__gethex+0x182>
 80179f2:	1eb1      	subs	r1, r6, #2
 80179f4:	0028      	movs	r0, r5
 80179f6:	f000 fd8c 	bl	8018512 <__any_on>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d0b7      	beq.n	801796e <__gethex+0x1d4>
 80179fe:	2403      	movs	r4, #3
 8017a00:	e7b6      	b.n	8017970 <__gethex+0x1d6>
 8017a02:	9b01      	ldr	r3, [sp, #4]
 8017a04:	2400      	movs	r4, #0
 8017a06:	429e      	cmp	r6, r3
 8017a08:	dab7      	bge.n	801797a <__gethex+0x1e0>
 8017a0a:	1b9e      	subs	r6, r3, r6
 8017a0c:	0029      	movs	r1, r5
 8017a0e:	0032      	movs	r2, r6
 8017a10:	9805      	ldr	r0, [sp, #20]
 8017a12:	f000 fbab 	bl	801816c <__lshift>
 8017a16:	0003      	movs	r3, r0
 8017a18:	3314      	adds	r3, #20
 8017a1a:	0005      	movs	r5, r0
 8017a1c:	1bbf      	subs	r7, r7, r6
 8017a1e:	9303      	str	r3, [sp, #12]
 8017a20:	e7ab      	b.n	801797a <__gethex+0x1e0>
 8017a22:	9b02      	ldr	r3, [sp, #8]
 8017a24:	685e      	ldr	r6, [r3, #4]
 8017a26:	42be      	cmp	r6, r7
 8017a28:	dd6b      	ble.n	8017b02 <__gethex+0x368>
 8017a2a:	9b01      	ldr	r3, [sp, #4]
 8017a2c:	1bf6      	subs	r6, r6, r7
 8017a2e:	42b3      	cmp	r3, r6
 8017a30:	dc32      	bgt.n	8017a98 <__gethex+0x2fe>
 8017a32:	9b02      	ldr	r3, [sp, #8]
 8017a34:	68db      	ldr	r3, [r3, #12]
 8017a36:	2b02      	cmp	r3, #2
 8017a38:	d026      	beq.n	8017a88 <__gethex+0x2ee>
 8017a3a:	2b03      	cmp	r3, #3
 8017a3c:	d028      	beq.n	8017a90 <__gethex+0x2f6>
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d119      	bne.n	8017a76 <__gethex+0x2dc>
 8017a42:	9b01      	ldr	r3, [sp, #4]
 8017a44:	42b3      	cmp	r3, r6
 8017a46:	d116      	bne.n	8017a76 <__gethex+0x2dc>
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	dc0d      	bgt.n	8017a68 <__gethex+0x2ce>
 8017a4c:	9b02      	ldr	r3, [sp, #8]
 8017a4e:	2662      	movs	r6, #98	; 0x62
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	9301      	str	r3, [sp, #4]
 8017a54:	9a01      	ldr	r2, [sp, #4]
 8017a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a58:	601a      	str	r2, [r3, #0]
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	9a03      	ldr	r2, [sp, #12]
 8017a5e:	612b      	str	r3, [r5, #16]
 8017a60:	6013      	str	r3, [r2, #0]
 8017a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a64:	601d      	str	r5, [r3, #0]
 8017a66:	e72c      	b.n	80178c2 <__gethex+0x128>
 8017a68:	9901      	ldr	r1, [sp, #4]
 8017a6a:	0028      	movs	r0, r5
 8017a6c:	3901      	subs	r1, #1
 8017a6e:	f000 fd50 	bl	8018512 <__any_on>
 8017a72:	2800      	cmp	r0, #0
 8017a74:	d1ea      	bne.n	8017a4c <__gethex+0x2b2>
 8017a76:	0029      	movs	r1, r5
 8017a78:	9805      	ldr	r0, [sp, #20]
 8017a7a:	f000 f9cd 	bl	8017e18 <_Bfree>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a82:	2650      	movs	r6, #80	; 0x50
 8017a84:	6013      	str	r3, [r2, #0]
 8017a86:	e71c      	b.n	80178c2 <__gethex+0x128>
 8017a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d0de      	beq.n	8017a4c <__gethex+0x2b2>
 8017a8e:	e7f2      	b.n	8017a76 <__gethex+0x2dc>
 8017a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d1da      	bne.n	8017a4c <__gethex+0x2b2>
 8017a96:	e7ee      	b.n	8017a76 <__gethex+0x2dc>
 8017a98:	1e77      	subs	r7, r6, #1
 8017a9a:	2c00      	cmp	r4, #0
 8017a9c:	d12f      	bne.n	8017afe <__gethex+0x364>
 8017a9e:	2f00      	cmp	r7, #0
 8017aa0:	d004      	beq.n	8017aac <__gethex+0x312>
 8017aa2:	0039      	movs	r1, r7
 8017aa4:	0028      	movs	r0, r5
 8017aa6:	f000 fd34 	bl	8018512 <__any_on>
 8017aaa:	0004      	movs	r4, r0
 8017aac:	231f      	movs	r3, #31
 8017aae:	117a      	asrs	r2, r7, #5
 8017ab0:	401f      	ands	r7, r3
 8017ab2:	3b1e      	subs	r3, #30
 8017ab4:	40bb      	lsls	r3, r7
 8017ab6:	9903      	ldr	r1, [sp, #12]
 8017ab8:	0092      	lsls	r2, r2, #2
 8017aba:	5852      	ldr	r2, [r2, r1]
 8017abc:	421a      	tst	r2, r3
 8017abe:	d001      	beq.n	8017ac4 <__gethex+0x32a>
 8017ac0:	2302      	movs	r3, #2
 8017ac2:	431c      	orrs	r4, r3
 8017ac4:	9b01      	ldr	r3, [sp, #4]
 8017ac6:	0031      	movs	r1, r6
 8017ac8:	1b9b      	subs	r3, r3, r6
 8017aca:	2602      	movs	r6, #2
 8017acc:	0028      	movs	r0, r5
 8017ace:	9301      	str	r3, [sp, #4]
 8017ad0:	f7ff fe1a 	bl	8017708 <rshift>
 8017ad4:	9b02      	ldr	r3, [sp, #8]
 8017ad6:	685f      	ldr	r7, [r3, #4]
 8017ad8:	2c00      	cmp	r4, #0
 8017ada:	d040      	beq.n	8017b5e <__gethex+0x3c4>
 8017adc:	9b02      	ldr	r3, [sp, #8]
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d010      	beq.n	8017b06 <__gethex+0x36c>
 8017ae4:	2b03      	cmp	r3, #3
 8017ae6:	d012      	beq.n	8017b0e <__gethex+0x374>
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d106      	bne.n	8017afa <__gethex+0x360>
 8017aec:	07a2      	lsls	r2, r4, #30
 8017aee:	d504      	bpl.n	8017afa <__gethex+0x360>
 8017af0:	9a03      	ldr	r2, [sp, #12]
 8017af2:	6812      	ldr	r2, [r2, #0]
 8017af4:	4314      	orrs	r4, r2
 8017af6:	421c      	tst	r4, r3
 8017af8:	d10c      	bne.n	8017b14 <__gethex+0x37a>
 8017afa:	2310      	movs	r3, #16
 8017afc:	e02e      	b.n	8017b5c <__gethex+0x3c2>
 8017afe:	2401      	movs	r4, #1
 8017b00:	e7d4      	b.n	8017aac <__gethex+0x312>
 8017b02:	2601      	movs	r6, #1
 8017b04:	e7e8      	b.n	8017ad8 <__gethex+0x33e>
 8017b06:	2301      	movs	r3, #1
 8017b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b0a:	1a9b      	subs	r3, r3, r2
 8017b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d0f2      	beq.n	8017afa <__gethex+0x360>
 8017b14:	692c      	ldr	r4, [r5, #16]
 8017b16:	00a3      	lsls	r3, r4, #2
 8017b18:	9304      	str	r3, [sp, #16]
 8017b1a:	002b      	movs	r3, r5
 8017b1c:	00a2      	lsls	r2, r4, #2
 8017b1e:	3314      	adds	r3, #20
 8017b20:	1899      	adds	r1, r3, r2
 8017b22:	2200      	movs	r2, #0
 8017b24:	4694      	mov	ip, r2
 8017b26:	681a      	ldr	r2, [r3, #0]
 8017b28:	1c50      	adds	r0, r2, #1
 8017b2a:	d01d      	beq.n	8017b68 <__gethex+0x3ce>
 8017b2c:	3201      	adds	r2, #1
 8017b2e:	601a      	str	r2, [r3, #0]
 8017b30:	002b      	movs	r3, r5
 8017b32:	3314      	adds	r3, #20
 8017b34:	2e02      	cmp	r6, #2
 8017b36:	d13a      	bne.n	8017bae <__gethex+0x414>
 8017b38:	9a02      	ldr	r2, [sp, #8]
 8017b3a:	9901      	ldr	r1, [sp, #4]
 8017b3c:	6812      	ldr	r2, [r2, #0]
 8017b3e:	3a01      	subs	r2, #1
 8017b40:	428a      	cmp	r2, r1
 8017b42:	d10a      	bne.n	8017b5a <__gethex+0x3c0>
 8017b44:	114a      	asrs	r2, r1, #5
 8017b46:	211f      	movs	r1, #31
 8017b48:	9801      	ldr	r0, [sp, #4]
 8017b4a:	0092      	lsls	r2, r2, #2
 8017b4c:	4001      	ands	r1, r0
 8017b4e:	2001      	movs	r0, #1
 8017b50:	0004      	movs	r4, r0
 8017b52:	408c      	lsls	r4, r1
 8017b54:	58d3      	ldr	r3, [r2, r3]
 8017b56:	4223      	tst	r3, r4
 8017b58:	d148      	bne.n	8017bec <__gethex+0x452>
 8017b5a:	2320      	movs	r3, #32
 8017b5c:	431e      	orrs	r6, r3
 8017b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b60:	601d      	str	r5, [r3, #0]
 8017b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b64:	601f      	str	r7, [r3, #0]
 8017b66:	e6ac      	b.n	80178c2 <__gethex+0x128>
 8017b68:	4662      	mov	r2, ip
 8017b6a:	c304      	stmia	r3!, {r2}
 8017b6c:	4299      	cmp	r1, r3
 8017b6e:	d8da      	bhi.n	8017b26 <__gethex+0x38c>
 8017b70:	68ab      	ldr	r3, [r5, #8]
 8017b72:	429c      	cmp	r4, r3
 8017b74:	db12      	blt.n	8017b9c <__gethex+0x402>
 8017b76:	686b      	ldr	r3, [r5, #4]
 8017b78:	9805      	ldr	r0, [sp, #20]
 8017b7a:	1c59      	adds	r1, r3, #1
 8017b7c:	f000 f924 	bl	8017dc8 <_Balloc>
 8017b80:	0029      	movs	r1, r5
 8017b82:	692b      	ldr	r3, [r5, #16]
 8017b84:	9003      	str	r0, [sp, #12]
 8017b86:	1c9a      	adds	r2, r3, #2
 8017b88:	0092      	lsls	r2, r2, #2
 8017b8a:	310c      	adds	r1, #12
 8017b8c:	300c      	adds	r0, #12
 8017b8e:	f7fc fa34 	bl	8013ffa <memcpy>
 8017b92:	0029      	movs	r1, r5
 8017b94:	9805      	ldr	r0, [sp, #20]
 8017b96:	f000 f93f 	bl	8017e18 <_Bfree>
 8017b9a:	9d03      	ldr	r5, [sp, #12]
 8017b9c:	692b      	ldr	r3, [r5, #16]
 8017b9e:	1c5a      	adds	r2, r3, #1
 8017ba0:	612a      	str	r2, [r5, #16]
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	3304      	adds	r3, #4
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	18eb      	adds	r3, r5, r3
 8017baa:	605a      	str	r2, [r3, #4]
 8017bac:	e7c0      	b.n	8017b30 <__gethex+0x396>
 8017bae:	692a      	ldr	r2, [r5, #16]
 8017bb0:	42a2      	cmp	r2, r4
 8017bb2:	dd0a      	ble.n	8017bca <__gethex+0x430>
 8017bb4:	2101      	movs	r1, #1
 8017bb6:	0028      	movs	r0, r5
 8017bb8:	f7ff fda6 	bl	8017708 <rshift>
 8017bbc:	9b02      	ldr	r3, [sp, #8]
 8017bbe:	3701      	adds	r7, #1
 8017bc0:	689b      	ldr	r3, [r3, #8]
 8017bc2:	2601      	movs	r6, #1
 8017bc4:	42bb      	cmp	r3, r7
 8017bc6:	dac8      	bge.n	8017b5a <__gethex+0x3c0>
 8017bc8:	e6dc      	b.n	8017984 <__gethex+0x1ea>
 8017bca:	241f      	movs	r4, #31
 8017bcc:	9a01      	ldr	r2, [sp, #4]
 8017bce:	2601      	movs	r6, #1
 8017bd0:	4022      	ands	r2, r4
 8017bd2:	1e14      	subs	r4, r2, #0
 8017bd4:	d0c1      	beq.n	8017b5a <__gethex+0x3c0>
 8017bd6:	9a04      	ldr	r2, [sp, #16]
 8017bd8:	189b      	adds	r3, r3, r2
 8017bda:	3b04      	subs	r3, #4
 8017bdc:	6818      	ldr	r0, [r3, #0]
 8017bde:	f000 f9a1 	bl	8017f24 <__hi0bits>
 8017be2:	2120      	movs	r1, #32
 8017be4:	1b0c      	subs	r4, r1, r4
 8017be6:	42a0      	cmp	r0, r4
 8017be8:	dbe4      	blt.n	8017bb4 <__gethex+0x41a>
 8017bea:	e7b6      	b.n	8017b5a <__gethex+0x3c0>
 8017bec:	0006      	movs	r6, r0
 8017bee:	e7b4      	b.n	8017b5a <__gethex+0x3c0>

08017bf0 <L_shift>:
 8017bf0:	2308      	movs	r3, #8
 8017bf2:	b570      	push	{r4, r5, r6, lr}
 8017bf4:	2520      	movs	r5, #32
 8017bf6:	1a9a      	subs	r2, r3, r2
 8017bf8:	0092      	lsls	r2, r2, #2
 8017bfa:	1aad      	subs	r5, r5, r2
 8017bfc:	6843      	ldr	r3, [r0, #4]
 8017bfe:	6806      	ldr	r6, [r0, #0]
 8017c00:	001c      	movs	r4, r3
 8017c02:	40ac      	lsls	r4, r5
 8017c04:	40d3      	lsrs	r3, r2
 8017c06:	4334      	orrs	r4, r6
 8017c08:	6004      	str	r4, [r0, #0]
 8017c0a:	6043      	str	r3, [r0, #4]
 8017c0c:	3004      	adds	r0, #4
 8017c0e:	4288      	cmp	r0, r1
 8017c10:	d3f4      	bcc.n	8017bfc <L_shift+0xc>
 8017c12:	bd70      	pop	{r4, r5, r6, pc}

08017c14 <__match>:
 8017c14:	b530      	push	{r4, r5, lr}
 8017c16:	6803      	ldr	r3, [r0, #0]
 8017c18:	780c      	ldrb	r4, [r1, #0]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	2c00      	cmp	r4, #0
 8017c1e:	d102      	bne.n	8017c26 <__match+0x12>
 8017c20:	6003      	str	r3, [r0, #0]
 8017c22:	2001      	movs	r0, #1
 8017c24:	bd30      	pop	{r4, r5, pc}
 8017c26:	781a      	ldrb	r2, [r3, #0]
 8017c28:	0015      	movs	r5, r2
 8017c2a:	3d41      	subs	r5, #65	; 0x41
 8017c2c:	2d19      	cmp	r5, #25
 8017c2e:	d800      	bhi.n	8017c32 <__match+0x1e>
 8017c30:	3220      	adds	r2, #32
 8017c32:	3101      	adds	r1, #1
 8017c34:	42a2      	cmp	r2, r4
 8017c36:	d0ef      	beq.n	8017c18 <__match+0x4>
 8017c38:	2000      	movs	r0, #0
 8017c3a:	e7f3      	b.n	8017c24 <__match+0x10>

08017c3c <__hexnan>:
 8017c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c3e:	b08b      	sub	sp, #44	; 0x2c
 8017c40:	9201      	str	r2, [sp, #4]
 8017c42:	680a      	ldr	r2, [r1, #0]
 8017c44:	9901      	ldr	r1, [sp, #4]
 8017c46:	1153      	asrs	r3, r2, #5
 8017c48:	009b      	lsls	r3, r3, #2
 8017c4a:	18cb      	adds	r3, r1, r3
 8017c4c:	9304      	str	r3, [sp, #16]
 8017c4e:	231f      	movs	r3, #31
 8017c50:	401a      	ands	r2, r3
 8017c52:	9008      	str	r0, [sp, #32]
 8017c54:	9206      	str	r2, [sp, #24]
 8017c56:	d002      	beq.n	8017c5e <__hexnan+0x22>
 8017c58:	9b04      	ldr	r3, [sp, #16]
 8017c5a:	3304      	adds	r3, #4
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	9b04      	ldr	r3, [sp, #16]
 8017c60:	2500      	movs	r5, #0
 8017c62:	1f1e      	subs	r6, r3, #4
 8017c64:	0037      	movs	r7, r6
 8017c66:	0034      	movs	r4, r6
 8017c68:	9b08      	ldr	r3, [sp, #32]
 8017c6a:	6035      	str	r5, [r6, #0]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	9507      	str	r5, [sp, #28]
 8017c70:	9305      	str	r3, [sp, #20]
 8017c72:	9502      	str	r5, [sp, #8]
 8017c74:	9b05      	ldr	r3, [sp, #20]
 8017c76:	3301      	adds	r3, #1
 8017c78:	9309      	str	r3, [sp, #36]	; 0x24
 8017c7a:	9b05      	ldr	r3, [sp, #20]
 8017c7c:	785b      	ldrb	r3, [r3, #1]
 8017c7e:	9303      	str	r3, [sp, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d028      	beq.n	8017cd6 <__hexnan+0x9a>
 8017c84:	9803      	ldr	r0, [sp, #12]
 8017c86:	f7ff fd73 	bl	8017770 <__hexdig_fun>
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	d145      	bne.n	8017d1a <__hexnan+0xde>
 8017c8e:	9b03      	ldr	r3, [sp, #12]
 8017c90:	2b20      	cmp	r3, #32
 8017c92:	d819      	bhi.n	8017cc8 <__hexnan+0x8c>
 8017c94:	9b02      	ldr	r3, [sp, #8]
 8017c96:	9a07      	ldr	r2, [sp, #28]
 8017c98:	4293      	cmp	r3, r2
 8017c9a:	dd12      	ble.n	8017cc2 <__hexnan+0x86>
 8017c9c:	42bc      	cmp	r4, r7
 8017c9e:	d206      	bcs.n	8017cae <__hexnan+0x72>
 8017ca0:	2d07      	cmp	r5, #7
 8017ca2:	dc04      	bgt.n	8017cae <__hexnan+0x72>
 8017ca4:	002a      	movs	r2, r5
 8017ca6:	0039      	movs	r1, r7
 8017ca8:	0020      	movs	r0, r4
 8017caa:	f7ff ffa1 	bl	8017bf0 <L_shift>
 8017cae:	9b01      	ldr	r3, [sp, #4]
 8017cb0:	2508      	movs	r5, #8
 8017cb2:	429c      	cmp	r4, r3
 8017cb4:	d905      	bls.n	8017cc2 <__hexnan+0x86>
 8017cb6:	1f27      	subs	r7, r4, #4
 8017cb8:	2500      	movs	r5, #0
 8017cba:	003c      	movs	r4, r7
 8017cbc:	9b02      	ldr	r3, [sp, #8]
 8017cbe:	603d      	str	r5, [r7, #0]
 8017cc0:	9307      	str	r3, [sp, #28]
 8017cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc4:	9305      	str	r3, [sp, #20]
 8017cc6:	e7d5      	b.n	8017c74 <__hexnan+0x38>
 8017cc8:	9b03      	ldr	r3, [sp, #12]
 8017cca:	2b29      	cmp	r3, #41	; 0x29
 8017ccc:	d14a      	bne.n	8017d64 <__hexnan+0x128>
 8017cce:	9b05      	ldr	r3, [sp, #20]
 8017cd0:	9a08      	ldr	r2, [sp, #32]
 8017cd2:	3302      	adds	r3, #2
 8017cd4:	6013      	str	r3, [r2, #0]
 8017cd6:	9b02      	ldr	r3, [sp, #8]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d043      	beq.n	8017d64 <__hexnan+0x128>
 8017cdc:	42bc      	cmp	r4, r7
 8017cde:	d206      	bcs.n	8017cee <__hexnan+0xb2>
 8017ce0:	2d07      	cmp	r5, #7
 8017ce2:	dc04      	bgt.n	8017cee <__hexnan+0xb2>
 8017ce4:	002a      	movs	r2, r5
 8017ce6:	0039      	movs	r1, r7
 8017ce8:	0020      	movs	r0, r4
 8017cea:	f7ff ff81 	bl	8017bf0 <L_shift>
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	429c      	cmp	r4, r3
 8017cf2:	d926      	bls.n	8017d42 <__hexnan+0x106>
 8017cf4:	cc04      	ldmia	r4!, {r2}
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	3304      	adds	r3, #4
 8017cfa:	42a6      	cmp	r6, r4
 8017cfc:	d2fa      	bcs.n	8017cf4 <__hexnan+0xb8>
 8017cfe:	2200      	movs	r2, #0
 8017d00:	c304      	stmia	r3!, {r2}
 8017d02:	429e      	cmp	r6, r3
 8017d04:	d2fc      	bcs.n	8017d00 <__hexnan+0xc4>
 8017d06:	6833      	ldr	r3, [r6, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d104      	bne.n	8017d16 <__hexnan+0xda>
 8017d0c:	9b01      	ldr	r3, [sp, #4]
 8017d0e:	429e      	cmp	r6, r3
 8017d10:	d126      	bne.n	8017d60 <__hexnan+0x124>
 8017d12:	2301      	movs	r3, #1
 8017d14:	6033      	str	r3, [r6, #0]
 8017d16:	2005      	movs	r0, #5
 8017d18:	e025      	b.n	8017d66 <__hexnan+0x12a>
 8017d1a:	9b02      	ldr	r3, [sp, #8]
 8017d1c:	3501      	adds	r5, #1
 8017d1e:	3301      	adds	r3, #1
 8017d20:	9302      	str	r3, [sp, #8]
 8017d22:	2d08      	cmp	r5, #8
 8017d24:	dd06      	ble.n	8017d34 <__hexnan+0xf8>
 8017d26:	9b01      	ldr	r3, [sp, #4]
 8017d28:	429c      	cmp	r4, r3
 8017d2a:	d9ca      	bls.n	8017cc2 <__hexnan+0x86>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	2501      	movs	r5, #1
 8017d30:	3c04      	subs	r4, #4
 8017d32:	6023      	str	r3, [r4, #0]
 8017d34:	220f      	movs	r2, #15
 8017d36:	6823      	ldr	r3, [r4, #0]
 8017d38:	4010      	ands	r0, r2
 8017d3a:	011b      	lsls	r3, r3, #4
 8017d3c:	4318      	orrs	r0, r3
 8017d3e:	6020      	str	r0, [r4, #0]
 8017d40:	e7bf      	b.n	8017cc2 <__hexnan+0x86>
 8017d42:	9b06      	ldr	r3, [sp, #24]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d0de      	beq.n	8017d06 <__hexnan+0xca>
 8017d48:	2120      	movs	r1, #32
 8017d4a:	9a06      	ldr	r2, [sp, #24]
 8017d4c:	9b04      	ldr	r3, [sp, #16]
 8017d4e:	1a89      	subs	r1, r1, r2
 8017d50:	2201      	movs	r2, #1
 8017d52:	4252      	negs	r2, r2
 8017d54:	40ca      	lsrs	r2, r1
 8017d56:	3b04      	subs	r3, #4
 8017d58:	6819      	ldr	r1, [r3, #0]
 8017d5a:	400a      	ands	r2, r1
 8017d5c:	601a      	str	r2, [r3, #0]
 8017d5e:	e7d2      	b.n	8017d06 <__hexnan+0xca>
 8017d60:	3e04      	subs	r6, #4
 8017d62:	e7d0      	b.n	8017d06 <__hexnan+0xca>
 8017d64:	2004      	movs	r0, #4
 8017d66:	b00b      	add	sp, #44	; 0x2c
 8017d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d6a <__localeconv_l>:
 8017d6a:	30f0      	adds	r0, #240	; 0xf0
 8017d6c:	4770      	bx	lr
	...

08017d70 <_localeconv_r>:
 8017d70:	4b03      	ldr	r3, [pc, #12]	; (8017d80 <_localeconv_r+0x10>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017d76:	2800      	cmp	r0, #0
 8017d78:	d100      	bne.n	8017d7c <_localeconv_r+0xc>
 8017d7a:	4802      	ldr	r0, [pc, #8]	; (8017d84 <_localeconv_r+0x14>)
 8017d7c:	30f0      	adds	r0, #240	; 0xf0
 8017d7e:	4770      	bx	lr
 8017d80:	20000128 	.word	0x20000128
 8017d84:	20000558 	.word	0x20000558

08017d88 <__retarget_lock_acquire_recursive>:
 8017d88:	4770      	bx	lr

08017d8a <__retarget_lock_release_recursive>:
 8017d8a:	4770      	bx	lr

08017d8c <memchr>:
 8017d8c:	b2c9      	uxtb	r1, r1
 8017d8e:	1882      	adds	r2, r0, r2
 8017d90:	4290      	cmp	r0, r2
 8017d92:	d101      	bne.n	8017d98 <memchr+0xc>
 8017d94:	2000      	movs	r0, #0
 8017d96:	4770      	bx	lr
 8017d98:	7803      	ldrb	r3, [r0, #0]
 8017d9a:	428b      	cmp	r3, r1
 8017d9c:	d0fb      	beq.n	8017d96 <memchr+0xa>
 8017d9e:	3001      	adds	r0, #1
 8017da0:	e7f6      	b.n	8017d90 <memchr+0x4>

08017da2 <memmove>:
 8017da2:	b510      	push	{r4, lr}
 8017da4:	4288      	cmp	r0, r1
 8017da6:	d902      	bls.n	8017dae <memmove+0xc>
 8017da8:	188b      	adds	r3, r1, r2
 8017daa:	4298      	cmp	r0, r3
 8017dac:	d303      	bcc.n	8017db6 <memmove+0x14>
 8017dae:	2300      	movs	r3, #0
 8017db0:	e007      	b.n	8017dc2 <memmove+0x20>
 8017db2:	5c8b      	ldrb	r3, [r1, r2]
 8017db4:	5483      	strb	r3, [r0, r2]
 8017db6:	3a01      	subs	r2, #1
 8017db8:	d2fb      	bcs.n	8017db2 <memmove+0x10>
 8017dba:	bd10      	pop	{r4, pc}
 8017dbc:	5ccc      	ldrb	r4, [r1, r3]
 8017dbe:	54c4      	strb	r4, [r0, r3]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d1fa      	bne.n	8017dbc <memmove+0x1a>
 8017dc6:	e7f8      	b.n	8017dba <memmove+0x18>

08017dc8 <_Balloc>:
 8017dc8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017dca:	b570      	push	{r4, r5, r6, lr}
 8017dcc:	0004      	movs	r4, r0
 8017dce:	000d      	movs	r5, r1
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d012      	beq.n	8017dfa <_Balloc+0x32>
 8017dd4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017dd6:	00ab      	lsls	r3, r5, #2
 8017dd8:	18d3      	adds	r3, r2, r3
 8017dda:	6818      	ldr	r0, [r3, #0]
 8017ddc:	2800      	cmp	r0, #0
 8017dde:	d115      	bne.n	8017e0c <_Balloc+0x44>
 8017de0:	2101      	movs	r1, #1
 8017de2:	000e      	movs	r6, r1
 8017de4:	40ae      	lsls	r6, r5
 8017de6:	1d72      	adds	r2, r6, #5
 8017de8:	0092      	lsls	r2, r2, #2
 8017dea:	0020      	movs	r0, r4
 8017dec:	f000 fcbe 	bl	801876c <_calloc_r>
 8017df0:	2800      	cmp	r0, #0
 8017df2:	d009      	beq.n	8017e08 <_Balloc+0x40>
 8017df4:	6045      	str	r5, [r0, #4]
 8017df6:	6086      	str	r6, [r0, #8]
 8017df8:	e00a      	b.n	8017e10 <_Balloc+0x48>
 8017dfa:	2221      	movs	r2, #33	; 0x21
 8017dfc:	2104      	movs	r1, #4
 8017dfe:	f000 fcb5 	bl	801876c <_calloc_r>
 8017e02:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017e04:	2800      	cmp	r0, #0
 8017e06:	d1e5      	bne.n	8017dd4 <_Balloc+0xc>
 8017e08:	2000      	movs	r0, #0
 8017e0a:	bd70      	pop	{r4, r5, r6, pc}
 8017e0c:	6802      	ldr	r2, [r0, #0]
 8017e0e:	601a      	str	r2, [r3, #0]
 8017e10:	2300      	movs	r3, #0
 8017e12:	6103      	str	r3, [r0, #16]
 8017e14:	60c3      	str	r3, [r0, #12]
 8017e16:	e7f8      	b.n	8017e0a <_Balloc+0x42>

08017e18 <_Bfree>:
 8017e18:	2900      	cmp	r1, #0
 8017e1a:	d006      	beq.n	8017e2a <_Bfree+0x12>
 8017e1c:	684b      	ldr	r3, [r1, #4]
 8017e1e:	009a      	lsls	r2, r3, #2
 8017e20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017e22:	189b      	adds	r3, r3, r2
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	600a      	str	r2, [r1, #0]
 8017e28:	6019      	str	r1, [r3, #0]
 8017e2a:	4770      	bx	lr

08017e2c <__multadd>:
 8017e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e2e:	001e      	movs	r6, r3
 8017e30:	2314      	movs	r3, #20
 8017e32:	469c      	mov	ip, r3
 8017e34:	0007      	movs	r7, r0
 8017e36:	000c      	movs	r4, r1
 8017e38:	2000      	movs	r0, #0
 8017e3a:	690d      	ldr	r5, [r1, #16]
 8017e3c:	448c      	add	ip, r1
 8017e3e:	4663      	mov	r3, ip
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	3001      	adds	r0, #1
 8017e44:	b299      	uxth	r1, r3
 8017e46:	4663      	mov	r3, ip
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	4351      	muls	r1, r2
 8017e4c:	0c1b      	lsrs	r3, r3, #16
 8017e4e:	4353      	muls	r3, r2
 8017e50:	1989      	adds	r1, r1, r6
 8017e52:	0c0e      	lsrs	r6, r1, #16
 8017e54:	199b      	adds	r3, r3, r6
 8017e56:	b289      	uxth	r1, r1
 8017e58:	0c1e      	lsrs	r6, r3, #16
 8017e5a:	041b      	lsls	r3, r3, #16
 8017e5c:	185b      	adds	r3, r3, r1
 8017e5e:	4661      	mov	r1, ip
 8017e60:	c108      	stmia	r1!, {r3}
 8017e62:	468c      	mov	ip, r1
 8017e64:	4285      	cmp	r5, r0
 8017e66:	dcea      	bgt.n	8017e3e <__multadd+0x12>
 8017e68:	2e00      	cmp	r6, #0
 8017e6a:	d01b      	beq.n	8017ea4 <__multadd+0x78>
 8017e6c:	68a3      	ldr	r3, [r4, #8]
 8017e6e:	42ab      	cmp	r3, r5
 8017e70:	dc12      	bgt.n	8017e98 <__multadd+0x6c>
 8017e72:	6863      	ldr	r3, [r4, #4]
 8017e74:	0038      	movs	r0, r7
 8017e76:	1c59      	adds	r1, r3, #1
 8017e78:	f7ff ffa6 	bl	8017dc8 <_Balloc>
 8017e7c:	0021      	movs	r1, r4
 8017e7e:	6923      	ldr	r3, [r4, #16]
 8017e80:	9001      	str	r0, [sp, #4]
 8017e82:	1c9a      	adds	r2, r3, #2
 8017e84:	0092      	lsls	r2, r2, #2
 8017e86:	310c      	adds	r1, #12
 8017e88:	300c      	adds	r0, #12
 8017e8a:	f7fc f8b6 	bl	8013ffa <memcpy>
 8017e8e:	0021      	movs	r1, r4
 8017e90:	0038      	movs	r0, r7
 8017e92:	f7ff ffc1 	bl	8017e18 <_Bfree>
 8017e96:	9c01      	ldr	r4, [sp, #4]
 8017e98:	1d2b      	adds	r3, r5, #4
 8017e9a:	009b      	lsls	r3, r3, #2
 8017e9c:	18e3      	adds	r3, r4, r3
 8017e9e:	3501      	adds	r5, #1
 8017ea0:	605e      	str	r6, [r3, #4]
 8017ea2:	6125      	str	r5, [r4, #16]
 8017ea4:	0020      	movs	r0, r4
 8017ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017ea8 <__s2b>:
 8017ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017eaa:	0006      	movs	r6, r0
 8017eac:	0018      	movs	r0, r3
 8017eae:	000c      	movs	r4, r1
 8017eb0:	3008      	adds	r0, #8
 8017eb2:	2109      	movs	r1, #9
 8017eb4:	9301      	str	r3, [sp, #4]
 8017eb6:	0015      	movs	r5, r2
 8017eb8:	f7e8 f9d4 	bl	8000264 <__divsi3>
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	2100      	movs	r1, #0
 8017ec0:	4283      	cmp	r3, r0
 8017ec2:	db1f      	blt.n	8017f04 <__s2b+0x5c>
 8017ec4:	0030      	movs	r0, r6
 8017ec6:	f7ff ff7f 	bl	8017dc8 <_Balloc>
 8017eca:	9b08      	ldr	r3, [sp, #32]
 8017ecc:	6143      	str	r3, [r0, #20]
 8017ece:	2301      	movs	r3, #1
 8017ed0:	6103      	str	r3, [r0, #16]
 8017ed2:	2d09      	cmp	r5, #9
 8017ed4:	dd19      	ble.n	8017f0a <__s2b+0x62>
 8017ed6:	0023      	movs	r3, r4
 8017ed8:	3309      	adds	r3, #9
 8017eda:	001f      	movs	r7, r3
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	1964      	adds	r4, r4, r5
 8017ee0:	783b      	ldrb	r3, [r7, #0]
 8017ee2:	0001      	movs	r1, r0
 8017ee4:	3b30      	subs	r3, #48	; 0x30
 8017ee6:	220a      	movs	r2, #10
 8017ee8:	0030      	movs	r0, r6
 8017eea:	3701      	adds	r7, #1
 8017eec:	f7ff ff9e 	bl	8017e2c <__multadd>
 8017ef0:	42a7      	cmp	r7, r4
 8017ef2:	d1f5      	bne.n	8017ee0 <__s2b+0x38>
 8017ef4:	9b00      	ldr	r3, [sp, #0]
 8017ef6:	195c      	adds	r4, r3, r5
 8017ef8:	3c08      	subs	r4, #8
 8017efa:	002f      	movs	r7, r5
 8017efc:	9b01      	ldr	r3, [sp, #4]
 8017efe:	429f      	cmp	r7, r3
 8017f00:	db06      	blt.n	8017f10 <__s2b+0x68>
 8017f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	3101      	adds	r1, #1
 8017f08:	e7da      	b.n	8017ec0 <__s2b+0x18>
 8017f0a:	340a      	adds	r4, #10
 8017f0c:	2509      	movs	r5, #9
 8017f0e:	e7f4      	b.n	8017efa <__s2b+0x52>
 8017f10:	1b63      	subs	r3, r4, r5
 8017f12:	5ddb      	ldrb	r3, [r3, r7]
 8017f14:	0001      	movs	r1, r0
 8017f16:	3b30      	subs	r3, #48	; 0x30
 8017f18:	220a      	movs	r2, #10
 8017f1a:	0030      	movs	r0, r6
 8017f1c:	f7ff ff86 	bl	8017e2c <__multadd>
 8017f20:	3701      	adds	r7, #1
 8017f22:	e7eb      	b.n	8017efc <__s2b+0x54>

08017f24 <__hi0bits>:
 8017f24:	0003      	movs	r3, r0
 8017f26:	0c02      	lsrs	r2, r0, #16
 8017f28:	2000      	movs	r0, #0
 8017f2a:	4282      	cmp	r2, r0
 8017f2c:	d101      	bne.n	8017f32 <__hi0bits+0xe>
 8017f2e:	041b      	lsls	r3, r3, #16
 8017f30:	3010      	adds	r0, #16
 8017f32:	0e1a      	lsrs	r2, r3, #24
 8017f34:	d101      	bne.n	8017f3a <__hi0bits+0x16>
 8017f36:	3008      	adds	r0, #8
 8017f38:	021b      	lsls	r3, r3, #8
 8017f3a:	0f1a      	lsrs	r2, r3, #28
 8017f3c:	d101      	bne.n	8017f42 <__hi0bits+0x1e>
 8017f3e:	3004      	adds	r0, #4
 8017f40:	011b      	lsls	r3, r3, #4
 8017f42:	0f9a      	lsrs	r2, r3, #30
 8017f44:	d101      	bne.n	8017f4a <__hi0bits+0x26>
 8017f46:	3002      	adds	r0, #2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	db03      	blt.n	8017f56 <__hi0bits+0x32>
 8017f4e:	3001      	adds	r0, #1
 8017f50:	005b      	lsls	r3, r3, #1
 8017f52:	d400      	bmi.n	8017f56 <__hi0bits+0x32>
 8017f54:	2020      	movs	r0, #32
 8017f56:	4770      	bx	lr

08017f58 <__lo0bits>:
 8017f58:	2207      	movs	r2, #7
 8017f5a:	6803      	ldr	r3, [r0, #0]
 8017f5c:	b510      	push	{r4, lr}
 8017f5e:	0001      	movs	r1, r0
 8017f60:	401a      	ands	r2, r3
 8017f62:	d00d      	beq.n	8017f80 <__lo0bits+0x28>
 8017f64:	2401      	movs	r4, #1
 8017f66:	2000      	movs	r0, #0
 8017f68:	4223      	tst	r3, r4
 8017f6a:	d105      	bne.n	8017f78 <__lo0bits+0x20>
 8017f6c:	3002      	adds	r0, #2
 8017f6e:	4203      	tst	r3, r0
 8017f70:	d003      	beq.n	8017f7a <__lo0bits+0x22>
 8017f72:	40e3      	lsrs	r3, r4
 8017f74:	0020      	movs	r0, r4
 8017f76:	600b      	str	r3, [r1, #0]
 8017f78:	bd10      	pop	{r4, pc}
 8017f7a:	089b      	lsrs	r3, r3, #2
 8017f7c:	600b      	str	r3, [r1, #0]
 8017f7e:	e7fb      	b.n	8017f78 <__lo0bits+0x20>
 8017f80:	b29c      	uxth	r4, r3
 8017f82:	0010      	movs	r0, r2
 8017f84:	2c00      	cmp	r4, #0
 8017f86:	d101      	bne.n	8017f8c <__lo0bits+0x34>
 8017f88:	2010      	movs	r0, #16
 8017f8a:	0c1b      	lsrs	r3, r3, #16
 8017f8c:	b2da      	uxtb	r2, r3
 8017f8e:	2a00      	cmp	r2, #0
 8017f90:	d101      	bne.n	8017f96 <__lo0bits+0x3e>
 8017f92:	3008      	adds	r0, #8
 8017f94:	0a1b      	lsrs	r3, r3, #8
 8017f96:	071a      	lsls	r2, r3, #28
 8017f98:	d101      	bne.n	8017f9e <__lo0bits+0x46>
 8017f9a:	3004      	adds	r0, #4
 8017f9c:	091b      	lsrs	r3, r3, #4
 8017f9e:	079a      	lsls	r2, r3, #30
 8017fa0:	d101      	bne.n	8017fa6 <__lo0bits+0x4e>
 8017fa2:	3002      	adds	r0, #2
 8017fa4:	089b      	lsrs	r3, r3, #2
 8017fa6:	07da      	lsls	r2, r3, #31
 8017fa8:	d4e8      	bmi.n	8017f7c <__lo0bits+0x24>
 8017faa:	085b      	lsrs	r3, r3, #1
 8017fac:	d001      	beq.n	8017fb2 <__lo0bits+0x5a>
 8017fae:	3001      	adds	r0, #1
 8017fb0:	e7e4      	b.n	8017f7c <__lo0bits+0x24>
 8017fb2:	2020      	movs	r0, #32
 8017fb4:	e7e0      	b.n	8017f78 <__lo0bits+0x20>

08017fb6 <__i2b>:
 8017fb6:	b510      	push	{r4, lr}
 8017fb8:	000c      	movs	r4, r1
 8017fba:	2101      	movs	r1, #1
 8017fbc:	f7ff ff04 	bl	8017dc8 <_Balloc>
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	6144      	str	r4, [r0, #20]
 8017fc4:	6103      	str	r3, [r0, #16]
 8017fc6:	bd10      	pop	{r4, pc}

08017fc8 <__multiply>:
 8017fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fca:	690b      	ldr	r3, [r1, #16]
 8017fcc:	0014      	movs	r4, r2
 8017fce:	6912      	ldr	r2, [r2, #16]
 8017fd0:	b089      	sub	sp, #36	; 0x24
 8017fd2:	000d      	movs	r5, r1
 8017fd4:	4293      	cmp	r3, r2
 8017fd6:	da01      	bge.n	8017fdc <__multiply+0x14>
 8017fd8:	0025      	movs	r5, r4
 8017fda:	000c      	movs	r4, r1
 8017fdc:	692f      	ldr	r7, [r5, #16]
 8017fde:	6926      	ldr	r6, [r4, #16]
 8017fe0:	6869      	ldr	r1, [r5, #4]
 8017fe2:	19bb      	adds	r3, r7, r6
 8017fe4:	9302      	str	r3, [sp, #8]
 8017fe6:	68ab      	ldr	r3, [r5, #8]
 8017fe8:	19ba      	adds	r2, r7, r6
 8017fea:	4293      	cmp	r3, r2
 8017fec:	da00      	bge.n	8017ff0 <__multiply+0x28>
 8017fee:	3101      	adds	r1, #1
 8017ff0:	f7ff feea 	bl	8017dc8 <_Balloc>
 8017ff4:	0002      	movs	r2, r0
 8017ff6:	19bb      	adds	r3, r7, r6
 8017ff8:	3214      	adds	r2, #20
 8017ffa:	009b      	lsls	r3, r3, #2
 8017ffc:	18d3      	adds	r3, r2, r3
 8017ffe:	469c      	mov	ip, r3
 8018000:	2100      	movs	r1, #0
 8018002:	0013      	movs	r3, r2
 8018004:	9004      	str	r0, [sp, #16]
 8018006:	4563      	cmp	r3, ip
 8018008:	d31d      	bcc.n	8018046 <__multiply+0x7e>
 801800a:	3514      	adds	r5, #20
 801800c:	00bf      	lsls	r7, r7, #2
 801800e:	19eb      	adds	r3, r5, r7
 8018010:	3414      	adds	r4, #20
 8018012:	00b6      	lsls	r6, r6, #2
 8018014:	9305      	str	r3, [sp, #20]
 8018016:	19a3      	adds	r3, r4, r6
 8018018:	9503      	str	r5, [sp, #12]
 801801a:	9401      	str	r4, [sp, #4]
 801801c:	9307      	str	r3, [sp, #28]
 801801e:	9b07      	ldr	r3, [sp, #28]
 8018020:	9901      	ldr	r1, [sp, #4]
 8018022:	4299      	cmp	r1, r3
 8018024:	d311      	bcc.n	801804a <__multiply+0x82>
 8018026:	9b02      	ldr	r3, [sp, #8]
 8018028:	2b00      	cmp	r3, #0
 801802a:	dd06      	ble.n	801803a <__multiply+0x72>
 801802c:	2304      	movs	r3, #4
 801802e:	425b      	negs	r3, r3
 8018030:	449c      	add	ip, r3
 8018032:	4663      	mov	r3, ip
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d051      	beq.n	80180de <__multiply+0x116>
 801803a:	9b04      	ldr	r3, [sp, #16]
 801803c:	9a02      	ldr	r2, [sp, #8]
 801803e:	0018      	movs	r0, r3
 8018040:	611a      	str	r2, [r3, #16]
 8018042:	b009      	add	sp, #36	; 0x24
 8018044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018046:	c302      	stmia	r3!, {r1}
 8018048:	e7dd      	b.n	8018006 <__multiply+0x3e>
 801804a:	9b01      	ldr	r3, [sp, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	b298      	uxth	r0, r3
 8018050:	2800      	cmp	r0, #0
 8018052:	d01c      	beq.n	801808e <__multiply+0xc6>
 8018054:	0015      	movs	r5, r2
 8018056:	2600      	movs	r6, #0
 8018058:	9f03      	ldr	r7, [sp, #12]
 801805a:	cf02      	ldmia	r7!, {r1}
 801805c:	682c      	ldr	r4, [r5, #0]
 801805e:	b28b      	uxth	r3, r1
 8018060:	4343      	muls	r3, r0
 8018062:	0c09      	lsrs	r1, r1, #16
 8018064:	4341      	muls	r1, r0
 8018066:	b2a4      	uxth	r4, r4
 8018068:	191b      	adds	r3, r3, r4
 801806a:	199b      	adds	r3, r3, r6
 801806c:	000e      	movs	r6, r1
 801806e:	6829      	ldr	r1, [r5, #0]
 8018070:	9506      	str	r5, [sp, #24]
 8018072:	0c09      	lsrs	r1, r1, #16
 8018074:	1871      	adds	r1, r6, r1
 8018076:	0c1e      	lsrs	r6, r3, #16
 8018078:	1989      	adds	r1, r1, r6
 801807a:	0c0e      	lsrs	r6, r1, #16
 801807c:	b29b      	uxth	r3, r3
 801807e:	0409      	lsls	r1, r1, #16
 8018080:	430b      	orrs	r3, r1
 8018082:	c508      	stmia	r5!, {r3}
 8018084:	9b05      	ldr	r3, [sp, #20]
 8018086:	42bb      	cmp	r3, r7
 8018088:	d8e7      	bhi.n	801805a <__multiply+0x92>
 801808a:	9b06      	ldr	r3, [sp, #24]
 801808c:	605e      	str	r6, [r3, #4]
 801808e:	9b01      	ldr	r3, [sp, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	0c1d      	lsrs	r5, r3, #16
 8018094:	d01e      	beq.n	80180d4 <__multiply+0x10c>
 8018096:	0010      	movs	r0, r2
 8018098:	2700      	movs	r7, #0
 801809a:	6813      	ldr	r3, [r2, #0]
 801809c:	9e03      	ldr	r6, [sp, #12]
 801809e:	6831      	ldr	r1, [r6, #0]
 80180a0:	6804      	ldr	r4, [r0, #0]
 80180a2:	b289      	uxth	r1, r1
 80180a4:	4369      	muls	r1, r5
 80180a6:	0c24      	lsrs	r4, r4, #16
 80180a8:	1909      	adds	r1, r1, r4
 80180aa:	19c9      	adds	r1, r1, r7
 80180ac:	040f      	lsls	r7, r1, #16
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	433b      	orrs	r3, r7
 80180b2:	6003      	str	r3, [r0, #0]
 80180b4:	ce80      	ldmia	r6!, {r7}
 80180b6:	6843      	ldr	r3, [r0, #4]
 80180b8:	0c3f      	lsrs	r7, r7, #16
 80180ba:	436f      	muls	r7, r5
 80180bc:	b29b      	uxth	r3, r3
 80180be:	18fb      	adds	r3, r7, r3
 80180c0:	0c09      	lsrs	r1, r1, #16
 80180c2:	185b      	adds	r3, r3, r1
 80180c4:	9905      	ldr	r1, [sp, #20]
 80180c6:	9006      	str	r0, [sp, #24]
 80180c8:	0c1f      	lsrs	r7, r3, #16
 80180ca:	3004      	adds	r0, #4
 80180cc:	42b1      	cmp	r1, r6
 80180ce:	d8e6      	bhi.n	801809e <__multiply+0xd6>
 80180d0:	9906      	ldr	r1, [sp, #24]
 80180d2:	604b      	str	r3, [r1, #4]
 80180d4:	9b01      	ldr	r3, [sp, #4]
 80180d6:	3204      	adds	r2, #4
 80180d8:	3304      	adds	r3, #4
 80180da:	9301      	str	r3, [sp, #4]
 80180dc:	e79f      	b.n	801801e <__multiply+0x56>
 80180de:	9b02      	ldr	r3, [sp, #8]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	9302      	str	r3, [sp, #8]
 80180e4:	e79f      	b.n	8018026 <__multiply+0x5e>
	...

080180e8 <__pow5mult>:
 80180e8:	2303      	movs	r3, #3
 80180ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180ec:	4013      	ands	r3, r2
 80180ee:	0006      	movs	r6, r0
 80180f0:	000f      	movs	r7, r1
 80180f2:	0015      	movs	r5, r2
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d008      	beq.n	801810a <__pow5mult+0x22>
 80180f8:	491a      	ldr	r1, [pc, #104]	; (8018164 <__pow5mult+0x7c>)
 80180fa:	3b01      	subs	r3, #1
 80180fc:	009a      	lsls	r2, r3, #2
 80180fe:	5852      	ldr	r2, [r2, r1]
 8018100:	2300      	movs	r3, #0
 8018102:	0039      	movs	r1, r7
 8018104:	f7ff fe92 	bl	8017e2c <__multadd>
 8018108:	0007      	movs	r7, r0
 801810a:	10ad      	asrs	r5, r5, #2
 801810c:	d027      	beq.n	801815e <__pow5mult+0x76>
 801810e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018110:	2c00      	cmp	r4, #0
 8018112:	d107      	bne.n	8018124 <__pow5mult+0x3c>
 8018114:	4914      	ldr	r1, [pc, #80]	; (8018168 <__pow5mult+0x80>)
 8018116:	0030      	movs	r0, r6
 8018118:	f7ff ff4d 	bl	8017fb6 <__i2b>
 801811c:	2300      	movs	r3, #0
 801811e:	0004      	movs	r4, r0
 8018120:	64b0      	str	r0, [r6, #72]	; 0x48
 8018122:	6003      	str	r3, [r0, #0]
 8018124:	2301      	movs	r3, #1
 8018126:	421d      	tst	r5, r3
 8018128:	d00a      	beq.n	8018140 <__pow5mult+0x58>
 801812a:	0039      	movs	r1, r7
 801812c:	0022      	movs	r2, r4
 801812e:	0030      	movs	r0, r6
 8018130:	f7ff ff4a 	bl	8017fc8 <__multiply>
 8018134:	0039      	movs	r1, r7
 8018136:	9001      	str	r0, [sp, #4]
 8018138:	0030      	movs	r0, r6
 801813a:	f7ff fe6d 	bl	8017e18 <_Bfree>
 801813e:	9f01      	ldr	r7, [sp, #4]
 8018140:	106d      	asrs	r5, r5, #1
 8018142:	d00c      	beq.n	801815e <__pow5mult+0x76>
 8018144:	6820      	ldr	r0, [r4, #0]
 8018146:	2800      	cmp	r0, #0
 8018148:	d107      	bne.n	801815a <__pow5mult+0x72>
 801814a:	0022      	movs	r2, r4
 801814c:	0021      	movs	r1, r4
 801814e:	0030      	movs	r0, r6
 8018150:	f7ff ff3a 	bl	8017fc8 <__multiply>
 8018154:	2300      	movs	r3, #0
 8018156:	6020      	str	r0, [r4, #0]
 8018158:	6003      	str	r3, [r0, #0]
 801815a:	0004      	movs	r4, r0
 801815c:	e7e2      	b.n	8018124 <__pow5mult+0x3c>
 801815e:	0038      	movs	r0, r7
 8018160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018162:	46c0      	nop			; (mov r8, r8)
 8018164:	0801be48 	.word	0x0801be48
 8018168:	00000271 	.word	0x00000271

0801816c <__lshift>:
 801816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816e:	000d      	movs	r5, r1
 8018170:	0017      	movs	r7, r2
 8018172:	692b      	ldr	r3, [r5, #16]
 8018174:	1154      	asrs	r4, r2, #5
 8018176:	b085      	sub	sp, #20
 8018178:	18e3      	adds	r3, r4, r3
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	3301      	adds	r3, #1
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	6849      	ldr	r1, [r1, #4]
 8018182:	68ab      	ldr	r3, [r5, #8]
 8018184:	9002      	str	r0, [sp, #8]
 8018186:	9a00      	ldr	r2, [sp, #0]
 8018188:	4293      	cmp	r3, r2
 801818a:	db35      	blt.n	80181f8 <__lshift+0x8c>
 801818c:	9802      	ldr	r0, [sp, #8]
 801818e:	f7ff fe1b 	bl	8017dc8 <_Balloc>
 8018192:	2300      	movs	r3, #0
 8018194:	0002      	movs	r2, r0
 8018196:	0006      	movs	r6, r0
 8018198:	0019      	movs	r1, r3
 801819a:	3214      	adds	r2, #20
 801819c:	42a3      	cmp	r3, r4
 801819e:	db2e      	blt.n	80181fe <__lshift+0x92>
 80181a0:	43e3      	mvns	r3, r4
 80181a2:	17db      	asrs	r3, r3, #31
 80181a4:	401c      	ands	r4, r3
 80181a6:	002b      	movs	r3, r5
 80181a8:	00a4      	lsls	r4, r4, #2
 80181aa:	1914      	adds	r4, r2, r4
 80181ac:	692a      	ldr	r2, [r5, #16]
 80181ae:	3314      	adds	r3, #20
 80181b0:	0092      	lsls	r2, r2, #2
 80181b2:	189a      	adds	r2, r3, r2
 80181b4:	4694      	mov	ip, r2
 80181b6:	221f      	movs	r2, #31
 80181b8:	4017      	ands	r7, r2
 80181ba:	d024      	beq.n	8018206 <__lshift+0x9a>
 80181bc:	3201      	adds	r2, #1
 80181be:	1bd2      	subs	r2, r2, r7
 80181c0:	9203      	str	r2, [sp, #12]
 80181c2:	2200      	movs	r2, #0
 80181c4:	6819      	ldr	r1, [r3, #0]
 80181c6:	0020      	movs	r0, r4
 80181c8:	40b9      	lsls	r1, r7
 80181ca:	430a      	orrs	r2, r1
 80181cc:	c404      	stmia	r4!, {r2}
 80181ce:	cb04      	ldmia	r3!, {r2}
 80181d0:	9903      	ldr	r1, [sp, #12]
 80181d2:	40ca      	lsrs	r2, r1
 80181d4:	459c      	cmp	ip, r3
 80181d6:	d8f5      	bhi.n	80181c4 <__lshift+0x58>
 80181d8:	6042      	str	r2, [r0, #4]
 80181da:	2a00      	cmp	r2, #0
 80181dc:	d002      	beq.n	80181e4 <__lshift+0x78>
 80181de:	9b01      	ldr	r3, [sp, #4]
 80181e0:	3302      	adds	r3, #2
 80181e2:	9300      	str	r3, [sp, #0]
 80181e4:	9b00      	ldr	r3, [sp, #0]
 80181e6:	9802      	ldr	r0, [sp, #8]
 80181e8:	3b01      	subs	r3, #1
 80181ea:	6133      	str	r3, [r6, #16]
 80181ec:	0029      	movs	r1, r5
 80181ee:	f7ff fe13 	bl	8017e18 <_Bfree>
 80181f2:	0030      	movs	r0, r6
 80181f4:	b005      	add	sp, #20
 80181f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181f8:	3101      	adds	r1, #1
 80181fa:	005b      	lsls	r3, r3, #1
 80181fc:	e7c3      	b.n	8018186 <__lshift+0x1a>
 80181fe:	0098      	lsls	r0, r3, #2
 8018200:	5011      	str	r1, [r2, r0]
 8018202:	3301      	adds	r3, #1
 8018204:	e7ca      	b.n	801819c <__lshift+0x30>
 8018206:	cb04      	ldmia	r3!, {r2}
 8018208:	c404      	stmia	r4!, {r2}
 801820a:	459c      	cmp	ip, r3
 801820c:	d8fb      	bhi.n	8018206 <__lshift+0x9a>
 801820e:	e7e9      	b.n	80181e4 <__lshift+0x78>

08018210 <__mcmp>:
 8018210:	690a      	ldr	r2, [r1, #16]
 8018212:	6903      	ldr	r3, [r0, #16]
 8018214:	b530      	push	{r4, r5, lr}
 8018216:	1a9b      	subs	r3, r3, r2
 8018218:	d10d      	bne.n	8018236 <__mcmp+0x26>
 801821a:	0092      	lsls	r2, r2, #2
 801821c:	3014      	adds	r0, #20
 801821e:	3114      	adds	r1, #20
 8018220:	1884      	adds	r4, r0, r2
 8018222:	1889      	adds	r1, r1, r2
 8018224:	3c04      	subs	r4, #4
 8018226:	3904      	subs	r1, #4
 8018228:	6825      	ldr	r5, [r4, #0]
 801822a:	680a      	ldr	r2, [r1, #0]
 801822c:	4295      	cmp	r5, r2
 801822e:	d004      	beq.n	801823a <__mcmp+0x2a>
 8018230:	2301      	movs	r3, #1
 8018232:	4295      	cmp	r5, r2
 8018234:	d304      	bcc.n	8018240 <__mcmp+0x30>
 8018236:	0018      	movs	r0, r3
 8018238:	bd30      	pop	{r4, r5, pc}
 801823a:	42a0      	cmp	r0, r4
 801823c:	d3f2      	bcc.n	8018224 <__mcmp+0x14>
 801823e:	e7fa      	b.n	8018236 <__mcmp+0x26>
 8018240:	425b      	negs	r3, r3
 8018242:	e7f8      	b.n	8018236 <__mcmp+0x26>

08018244 <__mdiff>:
 8018244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018246:	000d      	movs	r5, r1
 8018248:	b085      	sub	sp, #20
 801824a:	0007      	movs	r7, r0
 801824c:	0011      	movs	r1, r2
 801824e:	0028      	movs	r0, r5
 8018250:	0014      	movs	r4, r2
 8018252:	f7ff ffdd 	bl	8018210 <__mcmp>
 8018256:	1e06      	subs	r6, r0, #0
 8018258:	d108      	bne.n	801826c <__mdiff+0x28>
 801825a:	0001      	movs	r1, r0
 801825c:	0038      	movs	r0, r7
 801825e:	f7ff fdb3 	bl	8017dc8 <_Balloc>
 8018262:	2301      	movs	r3, #1
 8018264:	6146      	str	r6, [r0, #20]
 8018266:	6103      	str	r3, [r0, #16]
 8018268:	b005      	add	sp, #20
 801826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801826c:	2301      	movs	r3, #1
 801826e:	9301      	str	r3, [sp, #4]
 8018270:	2800      	cmp	r0, #0
 8018272:	db04      	blt.n	801827e <__mdiff+0x3a>
 8018274:	0023      	movs	r3, r4
 8018276:	002c      	movs	r4, r5
 8018278:	001d      	movs	r5, r3
 801827a:	2300      	movs	r3, #0
 801827c:	9301      	str	r3, [sp, #4]
 801827e:	6861      	ldr	r1, [r4, #4]
 8018280:	0038      	movs	r0, r7
 8018282:	f7ff fda1 	bl	8017dc8 <_Balloc>
 8018286:	002f      	movs	r7, r5
 8018288:	2200      	movs	r2, #0
 801828a:	9b01      	ldr	r3, [sp, #4]
 801828c:	6926      	ldr	r6, [r4, #16]
 801828e:	60c3      	str	r3, [r0, #12]
 8018290:	3414      	adds	r4, #20
 8018292:	00b3      	lsls	r3, r6, #2
 8018294:	18e3      	adds	r3, r4, r3
 8018296:	9302      	str	r3, [sp, #8]
 8018298:	692b      	ldr	r3, [r5, #16]
 801829a:	3714      	adds	r7, #20
 801829c:	009b      	lsls	r3, r3, #2
 801829e:	18fb      	adds	r3, r7, r3
 80182a0:	9303      	str	r3, [sp, #12]
 80182a2:	0003      	movs	r3, r0
 80182a4:	4694      	mov	ip, r2
 80182a6:	3314      	adds	r3, #20
 80182a8:	cc20      	ldmia	r4!, {r5}
 80182aa:	cf04      	ldmia	r7!, {r2}
 80182ac:	9201      	str	r2, [sp, #4]
 80182ae:	b2aa      	uxth	r2, r5
 80182b0:	4494      	add	ip, r2
 80182b2:	466a      	mov	r2, sp
 80182b4:	4661      	mov	r1, ip
 80182b6:	8892      	ldrh	r2, [r2, #4]
 80182b8:	0c2d      	lsrs	r5, r5, #16
 80182ba:	1a8a      	subs	r2, r1, r2
 80182bc:	9901      	ldr	r1, [sp, #4]
 80182be:	0c09      	lsrs	r1, r1, #16
 80182c0:	1a69      	subs	r1, r5, r1
 80182c2:	1415      	asrs	r5, r2, #16
 80182c4:	1949      	adds	r1, r1, r5
 80182c6:	140d      	asrs	r5, r1, #16
 80182c8:	b292      	uxth	r2, r2
 80182ca:	0409      	lsls	r1, r1, #16
 80182cc:	430a      	orrs	r2, r1
 80182ce:	601a      	str	r2, [r3, #0]
 80182d0:	9a03      	ldr	r2, [sp, #12]
 80182d2:	46ac      	mov	ip, r5
 80182d4:	3304      	adds	r3, #4
 80182d6:	42ba      	cmp	r2, r7
 80182d8:	d8e6      	bhi.n	80182a8 <__mdiff+0x64>
 80182da:	9902      	ldr	r1, [sp, #8]
 80182dc:	001a      	movs	r2, r3
 80182de:	428c      	cmp	r4, r1
 80182e0:	d305      	bcc.n	80182ee <__mdiff+0xaa>
 80182e2:	3a04      	subs	r2, #4
 80182e4:	6813      	ldr	r3, [r2, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d00e      	beq.n	8018308 <__mdiff+0xc4>
 80182ea:	6106      	str	r6, [r0, #16]
 80182ec:	e7bc      	b.n	8018268 <__mdiff+0x24>
 80182ee:	cc04      	ldmia	r4!, {r2}
 80182f0:	b291      	uxth	r1, r2
 80182f2:	4461      	add	r1, ip
 80182f4:	140d      	asrs	r5, r1, #16
 80182f6:	0c12      	lsrs	r2, r2, #16
 80182f8:	1952      	adds	r2, r2, r5
 80182fa:	1415      	asrs	r5, r2, #16
 80182fc:	b289      	uxth	r1, r1
 80182fe:	0412      	lsls	r2, r2, #16
 8018300:	430a      	orrs	r2, r1
 8018302:	46ac      	mov	ip, r5
 8018304:	c304      	stmia	r3!, {r2}
 8018306:	e7e8      	b.n	80182da <__mdiff+0x96>
 8018308:	3e01      	subs	r6, #1
 801830a:	e7ea      	b.n	80182e2 <__mdiff+0x9e>

0801830c <__ulp>:
 801830c:	000b      	movs	r3, r1
 801830e:	4910      	ldr	r1, [pc, #64]	; (8018350 <__ulp+0x44>)
 8018310:	b510      	push	{r4, lr}
 8018312:	4019      	ands	r1, r3
 8018314:	4b0f      	ldr	r3, [pc, #60]	; (8018354 <__ulp+0x48>)
 8018316:	18c9      	adds	r1, r1, r3
 8018318:	2900      	cmp	r1, #0
 801831a:	dd04      	ble.n	8018326 <__ulp+0x1a>
 801831c:	2200      	movs	r2, #0
 801831e:	000b      	movs	r3, r1
 8018320:	0010      	movs	r0, r2
 8018322:	0019      	movs	r1, r3
 8018324:	bd10      	pop	{r4, pc}
 8018326:	4249      	negs	r1, r1
 8018328:	1509      	asrs	r1, r1, #20
 801832a:	2200      	movs	r2, #0
 801832c:	2300      	movs	r3, #0
 801832e:	2913      	cmp	r1, #19
 8018330:	dc04      	bgt.n	801833c <__ulp+0x30>
 8018332:	2080      	movs	r0, #128	; 0x80
 8018334:	0300      	lsls	r0, r0, #12
 8018336:	4108      	asrs	r0, r1
 8018338:	0003      	movs	r3, r0
 801833a:	e7f1      	b.n	8018320 <__ulp+0x14>
 801833c:	3914      	subs	r1, #20
 801833e:	2001      	movs	r0, #1
 8018340:	291e      	cmp	r1, #30
 8018342:	dc02      	bgt.n	801834a <__ulp+0x3e>
 8018344:	241f      	movs	r4, #31
 8018346:	1a61      	subs	r1, r4, r1
 8018348:	4088      	lsls	r0, r1
 801834a:	0002      	movs	r2, r0
 801834c:	e7e8      	b.n	8018320 <__ulp+0x14>
 801834e:	46c0      	nop			; (mov r8, r8)
 8018350:	7ff00000 	.word	0x7ff00000
 8018354:	fcc00000 	.word	0xfcc00000

08018358 <__b2d>:
 8018358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801835a:	0006      	movs	r6, r0
 801835c:	6903      	ldr	r3, [r0, #16]
 801835e:	3614      	adds	r6, #20
 8018360:	009b      	lsls	r3, r3, #2
 8018362:	18f3      	adds	r3, r6, r3
 8018364:	1f1d      	subs	r5, r3, #4
 8018366:	682c      	ldr	r4, [r5, #0]
 8018368:	000f      	movs	r7, r1
 801836a:	0020      	movs	r0, r4
 801836c:	9301      	str	r3, [sp, #4]
 801836e:	f7ff fdd9 	bl	8017f24 <__hi0bits>
 8018372:	2320      	movs	r3, #32
 8018374:	1a1b      	subs	r3, r3, r0
 8018376:	603b      	str	r3, [r7, #0]
 8018378:	491c      	ldr	r1, [pc, #112]	; (80183ec <__b2d+0x94>)
 801837a:	280a      	cmp	r0, #10
 801837c:	dc16      	bgt.n	80183ac <__b2d+0x54>
 801837e:	230b      	movs	r3, #11
 8018380:	0027      	movs	r7, r4
 8018382:	1a1b      	subs	r3, r3, r0
 8018384:	40df      	lsrs	r7, r3
 8018386:	4339      	orrs	r1, r7
 8018388:	469c      	mov	ip, r3
 801838a:	000b      	movs	r3, r1
 801838c:	2100      	movs	r1, #0
 801838e:	42ae      	cmp	r6, r5
 8018390:	d202      	bcs.n	8018398 <__b2d+0x40>
 8018392:	9901      	ldr	r1, [sp, #4]
 8018394:	3908      	subs	r1, #8
 8018396:	6809      	ldr	r1, [r1, #0]
 8018398:	3015      	adds	r0, #21
 801839a:	4084      	lsls	r4, r0
 801839c:	4660      	mov	r0, ip
 801839e:	40c1      	lsrs	r1, r0
 80183a0:	430c      	orrs	r4, r1
 80183a2:	0022      	movs	r2, r4
 80183a4:	0010      	movs	r0, r2
 80183a6:	0019      	movs	r1, r3
 80183a8:	b003      	add	sp, #12
 80183aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ac:	2700      	movs	r7, #0
 80183ae:	42ae      	cmp	r6, r5
 80183b0:	d202      	bcs.n	80183b8 <__b2d+0x60>
 80183b2:	9d01      	ldr	r5, [sp, #4]
 80183b4:	3d08      	subs	r5, #8
 80183b6:	682f      	ldr	r7, [r5, #0]
 80183b8:	380b      	subs	r0, #11
 80183ba:	4684      	mov	ip, r0
 80183bc:	1e03      	subs	r3, r0, #0
 80183be:	d012      	beq.n	80183e6 <__b2d+0x8e>
 80183c0:	409c      	lsls	r4, r3
 80183c2:	2020      	movs	r0, #32
 80183c4:	4321      	orrs	r1, r4
 80183c6:	003c      	movs	r4, r7
 80183c8:	1ac0      	subs	r0, r0, r3
 80183ca:	40c4      	lsrs	r4, r0
 80183cc:	4321      	orrs	r1, r4
 80183ce:	000b      	movs	r3, r1
 80183d0:	2100      	movs	r1, #0
 80183d2:	42b5      	cmp	r5, r6
 80183d4:	d901      	bls.n	80183da <__b2d+0x82>
 80183d6:	3d04      	subs	r5, #4
 80183d8:	6829      	ldr	r1, [r5, #0]
 80183da:	4664      	mov	r4, ip
 80183dc:	40c1      	lsrs	r1, r0
 80183de:	40a7      	lsls	r7, r4
 80183e0:	430f      	orrs	r7, r1
 80183e2:	003a      	movs	r2, r7
 80183e4:	e7de      	b.n	80183a4 <__b2d+0x4c>
 80183e6:	4321      	orrs	r1, r4
 80183e8:	000b      	movs	r3, r1
 80183ea:	e7fa      	b.n	80183e2 <__b2d+0x8a>
 80183ec:	3ff00000 	.word	0x3ff00000

080183f0 <__d2b>:
 80183f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183f2:	001d      	movs	r5, r3
 80183f4:	2101      	movs	r1, #1
 80183f6:	0014      	movs	r4, r2
 80183f8:	9f08      	ldr	r7, [sp, #32]
 80183fa:	f7ff fce5 	bl	8017dc8 <_Balloc>
 80183fe:	032b      	lsls	r3, r5, #12
 8018400:	006d      	lsls	r5, r5, #1
 8018402:	0006      	movs	r6, r0
 8018404:	0b1b      	lsrs	r3, r3, #12
 8018406:	0d6d      	lsrs	r5, r5, #21
 8018408:	d124      	bne.n	8018454 <__d2b+0x64>
 801840a:	9301      	str	r3, [sp, #4]
 801840c:	2c00      	cmp	r4, #0
 801840e:	d027      	beq.n	8018460 <__d2b+0x70>
 8018410:	4668      	mov	r0, sp
 8018412:	9400      	str	r4, [sp, #0]
 8018414:	f7ff fda0 	bl	8017f58 <__lo0bits>
 8018418:	9c00      	ldr	r4, [sp, #0]
 801841a:	2800      	cmp	r0, #0
 801841c:	d01e      	beq.n	801845c <__d2b+0x6c>
 801841e:	9b01      	ldr	r3, [sp, #4]
 8018420:	2120      	movs	r1, #32
 8018422:	001a      	movs	r2, r3
 8018424:	1a09      	subs	r1, r1, r0
 8018426:	408a      	lsls	r2, r1
 8018428:	40c3      	lsrs	r3, r0
 801842a:	4322      	orrs	r2, r4
 801842c:	6172      	str	r2, [r6, #20]
 801842e:	9301      	str	r3, [sp, #4]
 8018430:	9c01      	ldr	r4, [sp, #4]
 8018432:	61b4      	str	r4, [r6, #24]
 8018434:	1e63      	subs	r3, r4, #1
 8018436:	419c      	sbcs	r4, r3
 8018438:	3401      	adds	r4, #1
 801843a:	6134      	str	r4, [r6, #16]
 801843c:	2d00      	cmp	r5, #0
 801843e:	d018      	beq.n	8018472 <__d2b+0x82>
 8018440:	4b12      	ldr	r3, [pc, #72]	; (801848c <__d2b+0x9c>)
 8018442:	18ed      	adds	r5, r5, r3
 8018444:	2335      	movs	r3, #53	; 0x35
 8018446:	182d      	adds	r5, r5, r0
 8018448:	603d      	str	r5, [r7, #0]
 801844a:	1a18      	subs	r0, r3, r0
 801844c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801844e:	6018      	str	r0, [r3, #0]
 8018450:	0030      	movs	r0, r6
 8018452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018454:	2280      	movs	r2, #128	; 0x80
 8018456:	0352      	lsls	r2, r2, #13
 8018458:	4313      	orrs	r3, r2
 801845a:	e7d6      	b.n	801840a <__d2b+0x1a>
 801845c:	6174      	str	r4, [r6, #20]
 801845e:	e7e7      	b.n	8018430 <__d2b+0x40>
 8018460:	a801      	add	r0, sp, #4
 8018462:	f7ff fd79 	bl	8017f58 <__lo0bits>
 8018466:	2401      	movs	r4, #1
 8018468:	9b01      	ldr	r3, [sp, #4]
 801846a:	6134      	str	r4, [r6, #16]
 801846c:	6173      	str	r3, [r6, #20]
 801846e:	3020      	adds	r0, #32
 8018470:	e7e4      	b.n	801843c <__d2b+0x4c>
 8018472:	4b07      	ldr	r3, [pc, #28]	; (8018490 <__d2b+0xa0>)
 8018474:	18c0      	adds	r0, r0, r3
 8018476:	4b07      	ldr	r3, [pc, #28]	; (8018494 <__d2b+0xa4>)
 8018478:	6038      	str	r0, [r7, #0]
 801847a:	18e3      	adds	r3, r4, r3
 801847c:	009b      	lsls	r3, r3, #2
 801847e:	18f3      	adds	r3, r6, r3
 8018480:	6958      	ldr	r0, [r3, #20]
 8018482:	f7ff fd4f 	bl	8017f24 <__hi0bits>
 8018486:	0164      	lsls	r4, r4, #5
 8018488:	1a20      	subs	r0, r4, r0
 801848a:	e7df      	b.n	801844c <__d2b+0x5c>
 801848c:	fffffbcd 	.word	0xfffffbcd
 8018490:	fffffbce 	.word	0xfffffbce
 8018494:	3fffffff 	.word	0x3fffffff

08018498 <__ratio>:
 8018498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801849a:	b085      	sub	sp, #20
 801849c:	000f      	movs	r7, r1
 801849e:	a902      	add	r1, sp, #8
 80184a0:	0006      	movs	r6, r0
 80184a2:	f7ff ff59 	bl	8018358 <__b2d>
 80184a6:	0004      	movs	r4, r0
 80184a8:	000d      	movs	r5, r1
 80184aa:	0038      	movs	r0, r7
 80184ac:	a903      	add	r1, sp, #12
 80184ae:	9400      	str	r4, [sp, #0]
 80184b0:	9501      	str	r5, [sp, #4]
 80184b2:	f7ff ff51 	bl	8018358 <__b2d>
 80184b6:	6936      	ldr	r6, [r6, #16]
 80184b8:	693f      	ldr	r7, [r7, #16]
 80184ba:	0002      	movs	r2, r0
 80184bc:	1bf7      	subs	r7, r6, r7
 80184be:	017e      	lsls	r6, r7, #5
 80184c0:	46b4      	mov	ip, r6
 80184c2:	9f03      	ldr	r7, [sp, #12]
 80184c4:	9e02      	ldr	r6, [sp, #8]
 80184c6:	000b      	movs	r3, r1
 80184c8:	1bf6      	subs	r6, r6, r7
 80184ca:	4466      	add	r6, ip
 80184cc:	0537      	lsls	r7, r6, #20
 80184ce:	2e00      	cmp	r6, #0
 80184d0:	dd07      	ble.n	80184e2 <__ratio+0x4a>
 80184d2:	1979      	adds	r1, r7, r5
 80184d4:	9101      	str	r1, [sp, #4]
 80184d6:	9800      	ldr	r0, [sp, #0]
 80184d8:	9901      	ldr	r1, [sp, #4]
 80184da:	f7e9 fba1 	bl	8001c20 <__aeabi_ddiv>
 80184de:	b005      	add	sp, #20
 80184e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184e2:	1bcb      	subs	r3, r1, r7
 80184e4:	e7f7      	b.n	80184d6 <__ratio+0x3e>

080184e6 <__copybits>:
 80184e6:	0013      	movs	r3, r2
 80184e8:	3901      	subs	r1, #1
 80184ea:	b510      	push	{r4, lr}
 80184ec:	1149      	asrs	r1, r1, #5
 80184ee:	6912      	ldr	r2, [r2, #16]
 80184f0:	3101      	adds	r1, #1
 80184f2:	0089      	lsls	r1, r1, #2
 80184f4:	3314      	adds	r3, #20
 80184f6:	0092      	lsls	r2, r2, #2
 80184f8:	1841      	adds	r1, r0, r1
 80184fa:	189a      	adds	r2, r3, r2
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d803      	bhi.n	8018508 <__copybits+0x22>
 8018500:	2300      	movs	r3, #0
 8018502:	4281      	cmp	r1, r0
 8018504:	d803      	bhi.n	801850e <__copybits+0x28>
 8018506:	bd10      	pop	{r4, pc}
 8018508:	cb10      	ldmia	r3!, {r4}
 801850a:	c010      	stmia	r0!, {r4}
 801850c:	e7f6      	b.n	80184fc <__copybits+0x16>
 801850e:	c008      	stmia	r0!, {r3}
 8018510:	e7f7      	b.n	8018502 <__copybits+0x1c>

08018512 <__any_on>:
 8018512:	0002      	movs	r2, r0
 8018514:	6900      	ldr	r0, [r0, #16]
 8018516:	b510      	push	{r4, lr}
 8018518:	3214      	adds	r2, #20
 801851a:	114b      	asrs	r3, r1, #5
 801851c:	4298      	cmp	r0, r3
 801851e:	db12      	blt.n	8018546 <__any_on+0x34>
 8018520:	dd0b      	ble.n	801853a <__any_on+0x28>
 8018522:	201f      	movs	r0, #31
 8018524:	4001      	ands	r1, r0
 8018526:	d008      	beq.n	801853a <__any_on+0x28>
 8018528:	0098      	lsls	r0, r3, #2
 801852a:	5884      	ldr	r4, [r0, r2]
 801852c:	0020      	movs	r0, r4
 801852e:	40c8      	lsrs	r0, r1
 8018530:	4088      	lsls	r0, r1
 8018532:	0001      	movs	r1, r0
 8018534:	2001      	movs	r0, #1
 8018536:	428c      	cmp	r4, r1
 8018538:	d104      	bne.n	8018544 <__any_on+0x32>
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	18d3      	adds	r3, r2, r3
 801853e:	4293      	cmp	r3, r2
 8018540:	d803      	bhi.n	801854a <__any_on+0x38>
 8018542:	2000      	movs	r0, #0
 8018544:	bd10      	pop	{r4, pc}
 8018546:	0003      	movs	r3, r0
 8018548:	e7f7      	b.n	801853a <__any_on+0x28>
 801854a:	3b04      	subs	r3, #4
 801854c:	6819      	ldr	r1, [r3, #0]
 801854e:	2900      	cmp	r1, #0
 8018550:	d0f5      	beq.n	801853e <__any_on+0x2c>
 8018552:	2001      	movs	r0, #1
 8018554:	e7f6      	b.n	8018544 <__any_on+0x32>
	...

08018558 <frexp>:
 8018558:	b570      	push	{r4, r5, r6, lr}
 801855a:	0014      	movs	r4, r2
 801855c:	2500      	movs	r5, #0
 801855e:	6025      	str	r5, [r4, #0]
 8018560:	4d10      	ldr	r5, [pc, #64]	; (80185a4 <frexp+0x4c>)
 8018562:	004b      	lsls	r3, r1, #1
 8018564:	000a      	movs	r2, r1
 8018566:	085b      	lsrs	r3, r3, #1
 8018568:	42ab      	cmp	r3, r5
 801856a:	dc1a      	bgt.n	80185a2 <frexp+0x4a>
 801856c:	001d      	movs	r5, r3
 801856e:	4305      	orrs	r5, r0
 8018570:	d017      	beq.n	80185a2 <frexp+0x4a>
 8018572:	4d0d      	ldr	r5, [pc, #52]	; (80185a8 <frexp+0x50>)
 8018574:	42ab      	cmp	r3, r5
 8018576:	dc09      	bgt.n	801858c <frexp+0x34>
 8018578:	2200      	movs	r2, #0
 801857a:	4b0c      	ldr	r3, [pc, #48]	; (80185ac <frexp+0x54>)
 801857c:	f7e9 ff5a 	bl	8002434 <__aeabi_dmul>
 8018580:	2536      	movs	r5, #54	; 0x36
 8018582:	000a      	movs	r2, r1
 8018584:	004b      	lsls	r3, r1, #1
 8018586:	426d      	negs	r5, r5
 8018588:	085b      	lsrs	r3, r3, #1
 801858a:	6025      	str	r5, [r4, #0]
 801858c:	4d08      	ldr	r5, [pc, #32]	; (80185b0 <frexp+0x58>)
 801858e:	151b      	asrs	r3, r3, #20
 8018590:	195b      	adds	r3, r3, r5
 8018592:	6825      	ldr	r5, [r4, #0]
 8018594:	18eb      	adds	r3, r5, r3
 8018596:	6023      	str	r3, [r4, #0]
 8018598:	4b06      	ldr	r3, [pc, #24]	; (80185b4 <frexp+0x5c>)
 801859a:	401a      	ands	r2, r3
 801859c:	4b06      	ldr	r3, [pc, #24]	; (80185b8 <frexp+0x60>)
 801859e:	4313      	orrs	r3, r2
 80185a0:	0019      	movs	r1, r3
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	7fefffff 	.word	0x7fefffff
 80185a8:	000fffff 	.word	0x000fffff
 80185ac:	43500000 	.word	0x43500000
 80185b0:	fffffc02 	.word	0xfffffc02
 80185b4:	800fffff 	.word	0x800fffff
 80185b8:	3fe00000 	.word	0x3fe00000

080185bc <__ssprint_r>:
 80185bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185be:	6893      	ldr	r3, [r2, #8]
 80185c0:	b087      	sub	sp, #28
 80185c2:	9002      	str	r0, [sp, #8]
 80185c4:	000c      	movs	r4, r1
 80185c6:	0016      	movs	r6, r2
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d063      	beq.n	8018694 <__ssprint_r+0xd8>
 80185cc:	6813      	ldr	r3, [r2, #0]
 80185ce:	9303      	str	r3, [sp, #12]
 80185d0:	2300      	movs	r3, #0
 80185d2:	001f      	movs	r7, r3
 80185d4:	9305      	str	r3, [sp, #20]
 80185d6:	2f00      	cmp	r7, #0
 80185d8:	d02e      	beq.n	8018638 <__ssprint_r+0x7c>
 80185da:	68a5      	ldr	r5, [r4, #8]
 80185dc:	42af      	cmp	r7, r5
 80185de:	d347      	bcc.n	8018670 <__ssprint_r+0xb4>
 80185e0:	2390      	movs	r3, #144	; 0x90
 80185e2:	89a2      	ldrh	r2, [r4, #12]
 80185e4:	00db      	lsls	r3, r3, #3
 80185e6:	421a      	tst	r2, r3
 80185e8:	d042      	beq.n	8018670 <__ssprint_r+0xb4>
 80185ea:	2003      	movs	r0, #3
 80185ec:	6921      	ldr	r1, [r4, #16]
 80185ee:	6823      	ldr	r3, [r4, #0]
 80185f0:	1a5b      	subs	r3, r3, r1
 80185f2:	9304      	str	r3, [sp, #16]
 80185f4:	6963      	ldr	r3, [r4, #20]
 80185f6:	4343      	muls	r3, r0
 80185f8:	0fd8      	lsrs	r0, r3, #31
 80185fa:	18c3      	adds	r3, r0, r3
 80185fc:	105b      	asrs	r3, r3, #1
 80185fe:	9301      	str	r3, [sp, #4]
 8018600:	9b04      	ldr	r3, [sp, #16]
 8018602:	9801      	ldr	r0, [sp, #4]
 8018604:	3301      	adds	r3, #1
 8018606:	19db      	adds	r3, r3, r7
 8018608:	4283      	cmp	r3, r0
 801860a:	d900      	bls.n	801860e <__ssprint_r+0x52>
 801860c:	9301      	str	r3, [sp, #4]
 801860e:	0553      	lsls	r3, r2, #21
 8018610:	d544      	bpl.n	801869c <__ssprint_r+0xe0>
 8018612:	9901      	ldr	r1, [sp, #4]
 8018614:	9802      	ldr	r0, [sp, #8]
 8018616:	f7fb fab7 	bl	8013b88 <_malloc_r>
 801861a:	1e05      	subs	r5, r0, #0
 801861c:	d114      	bne.n	8018648 <__ssprint_r+0x8c>
 801861e:	230c      	movs	r3, #12
 8018620:	9a02      	ldr	r2, [sp, #8]
 8018622:	2001      	movs	r0, #1
 8018624:	6013      	str	r3, [r2, #0]
 8018626:	2340      	movs	r3, #64	; 0x40
 8018628:	89a2      	ldrh	r2, [r4, #12]
 801862a:	4240      	negs	r0, r0
 801862c:	4313      	orrs	r3, r2
 801862e:	81a3      	strh	r3, [r4, #12]
 8018630:	2300      	movs	r3, #0
 8018632:	60b3      	str	r3, [r6, #8]
 8018634:	6073      	str	r3, [r6, #4]
 8018636:	e02f      	b.n	8018698 <__ssprint_r+0xdc>
 8018638:	9b03      	ldr	r3, [sp, #12]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	9305      	str	r3, [sp, #20]
 801863e:	9b03      	ldr	r3, [sp, #12]
 8018640:	685f      	ldr	r7, [r3, #4]
 8018642:	3308      	adds	r3, #8
 8018644:	9303      	str	r3, [sp, #12]
 8018646:	e7c6      	b.n	80185d6 <__ssprint_r+0x1a>
 8018648:	9a04      	ldr	r2, [sp, #16]
 801864a:	6921      	ldr	r1, [r4, #16]
 801864c:	f7fb fcd5 	bl	8013ffa <memcpy>
 8018650:	89a3      	ldrh	r3, [r4, #12]
 8018652:	4a18      	ldr	r2, [pc, #96]	; (80186b4 <__ssprint_r+0xf8>)
 8018654:	401a      	ands	r2, r3
 8018656:	2380      	movs	r3, #128	; 0x80
 8018658:	4313      	orrs	r3, r2
 801865a:	81a3      	strh	r3, [r4, #12]
 801865c:	9b04      	ldr	r3, [sp, #16]
 801865e:	6125      	str	r5, [r4, #16]
 8018660:	18ed      	adds	r5, r5, r3
 8018662:	6025      	str	r5, [r4, #0]
 8018664:	003d      	movs	r5, r7
 8018666:	9b01      	ldr	r3, [sp, #4]
 8018668:	9a04      	ldr	r2, [sp, #16]
 801866a:	6163      	str	r3, [r4, #20]
 801866c:	1a9b      	subs	r3, r3, r2
 801866e:	60a3      	str	r3, [r4, #8]
 8018670:	42bd      	cmp	r5, r7
 8018672:	d900      	bls.n	8018676 <__ssprint_r+0xba>
 8018674:	003d      	movs	r5, r7
 8018676:	002a      	movs	r2, r5
 8018678:	9905      	ldr	r1, [sp, #20]
 801867a:	6820      	ldr	r0, [r4, #0]
 801867c:	f7ff fb91 	bl	8017da2 <memmove>
 8018680:	68a3      	ldr	r3, [r4, #8]
 8018682:	1b5b      	subs	r3, r3, r5
 8018684:	60a3      	str	r3, [r4, #8]
 8018686:	6823      	ldr	r3, [r4, #0]
 8018688:	195d      	adds	r5, r3, r5
 801868a:	68b3      	ldr	r3, [r6, #8]
 801868c:	6025      	str	r5, [r4, #0]
 801868e:	1bdb      	subs	r3, r3, r7
 8018690:	60b3      	str	r3, [r6, #8]
 8018692:	d1d1      	bne.n	8018638 <__ssprint_r+0x7c>
 8018694:	2000      	movs	r0, #0
 8018696:	6070      	str	r0, [r6, #4]
 8018698:	b007      	add	sp, #28
 801869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801869c:	9a01      	ldr	r2, [sp, #4]
 801869e:	9802      	ldr	r0, [sp, #8]
 80186a0:	f7fb fcf0 	bl	8014084 <_realloc_r>
 80186a4:	1e05      	subs	r5, r0, #0
 80186a6:	d1d9      	bne.n	801865c <__ssprint_r+0xa0>
 80186a8:	6921      	ldr	r1, [r4, #16]
 80186aa:	9802      	ldr	r0, [sp, #8]
 80186ac:	f7fe ff78 	bl	80175a0 <_free_r>
 80186b0:	e7b5      	b.n	801861e <__ssprint_r+0x62>
 80186b2:	46c0      	nop			; (mov r8, r8)
 80186b4:	fffffb7f 	.word	0xfffffb7f

080186b8 <__register_exitproc>:
 80186b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186ba:	4d29      	ldr	r5, [pc, #164]	; (8018760 <__register_exitproc+0xa8>)
 80186bc:	0006      	movs	r6, r0
 80186be:	6828      	ldr	r0, [r5, #0]
 80186c0:	9301      	str	r3, [sp, #4]
 80186c2:	9100      	str	r1, [sp, #0]
 80186c4:	0017      	movs	r7, r2
 80186c6:	f7ff fb5f 	bl	8017d88 <__retarget_lock_acquire_recursive>
 80186ca:	4b26      	ldr	r3, [pc, #152]	; (8018764 <__register_exitproc+0xac>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	001c      	movs	r4, r3
 80186d0:	34fc      	adds	r4, #252	; 0xfc
 80186d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80186d4:	2800      	cmp	r0, #0
 80186d6:	d103      	bne.n	80186e0 <__register_exitproc+0x28>
 80186d8:	334d      	adds	r3, #77	; 0x4d
 80186da:	33ff      	adds	r3, #255	; 0xff
 80186dc:	0018      	movs	r0, r3
 80186de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80186e0:	6843      	ldr	r3, [r0, #4]
 80186e2:	2b1f      	cmp	r3, #31
 80186e4:	dd18      	ble.n	8018718 <__register_exitproc+0x60>
 80186e6:	4b20      	ldr	r3, [pc, #128]	; (8018768 <__register_exitproc+0xb0>)
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d105      	bne.n	80186f8 <__register_exitproc+0x40>
 80186ec:	6828      	ldr	r0, [r5, #0]
 80186ee:	f7ff fb4c 	bl	8017d8a <__retarget_lock_release_recursive>
 80186f2:	2001      	movs	r0, #1
 80186f4:	4240      	negs	r0, r0
 80186f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80186f8:	20c8      	movs	r0, #200	; 0xc8
 80186fa:	0040      	lsls	r0, r0, #1
 80186fc:	f7fb fa30 	bl	8013b60 <malloc>
 8018700:	2800      	cmp	r0, #0
 8018702:	d0f3      	beq.n	80186ec <__register_exitproc+0x34>
 8018704:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018706:	2300      	movs	r3, #0
 8018708:	6002      	str	r2, [r0, #0]
 801870a:	22c4      	movs	r2, #196	; 0xc4
 801870c:	0052      	lsls	r2, r2, #1
 801870e:	6043      	str	r3, [r0, #4]
 8018710:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018712:	5083      	str	r3, [r0, r2]
 8018714:	3204      	adds	r2, #4
 8018716:	5083      	str	r3, [r0, r2]
 8018718:	6843      	ldr	r3, [r0, #4]
 801871a:	2e00      	cmp	r6, #0
 801871c:	d014      	beq.n	8018748 <__register_exitproc+0x90>
 801871e:	009a      	lsls	r2, r3, #2
 8018720:	1882      	adds	r2, r0, r2
 8018722:	0011      	movs	r1, r2
 8018724:	3188      	adds	r1, #136	; 0x88
 8018726:	600f      	str	r7, [r1, #0]
 8018728:	2101      	movs	r1, #1
 801872a:	0004      	movs	r4, r0
 801872c:	4099      	lsls	r1, r3
 801872e:	3485      	adds	r4, #133	; 0x85
 8018730:	34ff      	adds	r4, #255	; 0xff
 8018732:	6865      	ldr	r5, [r4, #4]
 8018734:	32fc      	adds	r2, #252	; 0xfc
 8018736:	430d      	orrs	r5, r1
 8018738:	6065      	str	r5, [r4, #4]
 801873a:	9d01      	ldr	r5, [sp, #4]
 801873c:	60d5      	str	r5, [r2, #12]
 801873e:	2e02      	cmp	r6, #2
 8018740:	d102      	bne.n	8018748 <__register_exitproc+0x90>
 8018742:	68a2      	ldr	r2, [r4, #8]
 8018744:	4311      	orrs	r1, r2
 8018746:	60a1      	str	r1, [r4, #8]
 8018748:	1c5a      	adds	r2, r3, #1
 801874a:	6042      	str	r2, [r0, #4]
 801874c:	3302      	adds	r3, #2
 801874e:	9a00      	ldr	r2, [sp, #0]
 8018750:	009b      	lsls	r3, r3, #2
 8018752:	501a      	str	r2, [r3, r0]
 8018754:	4b02      	ldr	r3, [pc, #8]	; (8018760 <__register_exitproc+0xa8>)
 8018756:	6818      	ldr	r0, [r3, #0]
 8018758:	f7ff fb17 	bl	8017d8a <__retarget_lock_release_recursive>
 801875c:	2000      	movs	r0, #0
 801875e:	e7ca      	b.n	80186f6 <__register_exitproc+0x3e>
 8018760:	20000ad4 	.word	0x20000ad4
 8018764:	0801bb90 	.word	0x0801bb90
 8018768:	08013b61 	.word	0x08013b61

0801876c <_calloc_r>:
 801876c:	b510      	push	{r4, lr}
 801876e:	4351      	muls	r1, r2
 8018770:	f7fb fa0a 	bl	8013b88 <_malloc_r>
 8018774:	1e04      	subs	r4, r0, #0
 8018776:	d01a      	beq.n	80187ae <_calloc_r+0x42>
 8018778:	0003      	movs	r3, r0
 801877a:	3b08      	subs	r3, #8
 801877c:	685a      	ldr	r2, [r3, #4]
 801877e:	2303      	movs	r3, #3
 8018780:	439a      	bics	r2, r3
 8018782:	3a04      	subs	r2, #4
 8018784:	2a24      	cmp	r2, #36	; 0x24
 8018786:	d819      	bhi.n	80187bc <_calloc_r+0x50>
 8018788:	0003      	movs	r3, r0
 801878a:	2a13      	cmp	r2, #19
 801878c:	d90b      	bls.n	80187a6 <_calloc_r+0x3a>
 801878e:	2100      	movs	r1, #0
 8018790:	3308      	adds	r3, #8
 8018792:	6001      	str	r1, [r0, #0]
 8018794:	6041      	str	r1, [r0, #4]
 8018796:	2a1b      	cmp	r2, #27
 8018798:	d905      	bls.n	80187a6 <_calloc_r+0x3a>
 801879a:	6081      	str	r1, [r0, #8]
 801879c:	60c1      	str	r1, [r0, #12]
 801879e:	2a24      	cmp	r2, #36	; 0x24
 80187a0:	d007      	beq.n	80187b2 <_calloc_r+0x46>
 80187a2:	0003      	movs	r3, r0
 80187a4:	3310      	adds	r3, #16
 80187a6:	2200      	movs	r2, #0
 80187a8:	601a      	str	r2, [r3, #0]
 80187aa:	605a      	str	r2, [r3, #4]
 80187ac:	609a      	str	r2, [r3, #8]
 80187ae:	0020      	movs	r0, r4
 80187b0:	bd10      	pop	{r4, pc}
 80187b2:	0003      	movs	r3, r0
 80187b4:	6101      	str	r1, [r0, #16]
 80187b6:	3318      	adds	r3, #24
 80187b8:	6141      	str	r1, [r0, #20]
 80187ba:	e7f4      	b.n	80187a6 <_calloc_r+0x3a>
 80187bc:	2100      	movs	r1, #0
 80187be:	f7fb fc25 	bl	801400c <memset>
 80187c2:	e7f4      	b.n	80187ae <_calloc_r+0x42>

080187c4 <_sbrk>:
 80187c4:	4b05      	ldr	r3, [pc, #20]	; (80187dc <_sbrk+0x18>)
 80187c6:	0002      	movs	r2, r0
 80187c8:	6819      	ldr	r1, [r3, #0]
 80187ca:	2900      	cmp	r1, #0
 80187cc:	d101      	bne.n	80187d2 <_sbrk+0xe>
 80187ce:	4904      	ldr	r1, [pc, #16]	; (80187e0 <_sbrk+0x1c>)
 80187d0:	6019      	str	r1, [r3, #0]
 80187d2:	6818      	ldr	r0, [r3, #0]
 80187d4:	1882      	adds	r2, r0, r2
 80187d6:	601a      	str	r2, [r3, #0]
 80187d8:	4770      	bx	lr
 80187da:	46c0      	nop			; (mov r8, r8)
 80187dc:	20006954 	.word	0x20006954
 80187e0:	20006e80 	.word	0x20006e80

080187e4 <_init>:
 80187e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187e6:	46c0      	nop			; (mov r8, r8)
 80187e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187ea:	bc08      	pop	{r3}
 80187ec:	469e      	mov	lr, r3
 80187ee:	4770      	bx	lr

080187f0 <_fini>:
 80187f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187f2:	46c0      	nop			; (mov r8, r8)
 80187f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187f6:	bc08      	pop	{r3}
 80187f8:	469e      	mov	lr, r3
 80187fa:	4770      	bx	lr
